#ifndef BCMBD_CMICX_ACC_H
#define BCMBD_CMICX_ACC_H
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: $
 * Copyright: (c) 2018 Broadcom. All Rights Reserved. "Broadcom" refers to 
 * Broadcom Limited and/or its subsidiaries.
 * 
 * Broadcom Switch Software License
 * 
 * This license governs the use of the accompanying Broadcom software. Your 
 * use of the software indicates your acceptance of the terms and conditions 
 * of this license. If you do not agree to the terms and conditions of this 
 * license, do not use the software.
 * 1. Definitions
 *    "Licensor" means any person or entity that distributes its Work.
 *    "Software" means the original work of authorship made available under 
 *    this license.
 *    "Work" means the Software and any additions to or derivative works of 
 *    the Software that are made available under this license.
 *    The terms "reproduce," "reproduction," "derivative works," and 
 *    "distribution" have the meaning as provided under U.S. copyright law.
 *    Works, including the Software, are "made available" under this license 
 *    by including in or with the Work either (a) a copyright notice 
 *    referencing the applicability of this license to the Work, or (b) a copy 
 *    of this license.
 * 2. Grant of Copyright License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    copyright license to reproduce, prepare derivative works of, publicly 
 *    display, publicly perform, sublicense and distribute its Work and any 
 *    resulting derivative works in any form.
 * 3. Grant of Patent License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    patent license to make, have made, use, offer to sell, sell, import, and 
 *    otherwise transfer its Work, in whole or in part. This patent license 
 *    applies only to the patent claims licensable by Licensor that would be 
 *    infringed by Licensor's Work (or portion thereof) individually and 
 *    excluding any combinations with any other materials or technology.
 *    If you institute patent litigation against any Licensor (including a 
 *    cross-claim or counterclaim in a lawsuit) to enforce any patents that 
 *    you allege are infringed by any Work, then your patent license from such 
 *    Licensor to the Work shall terminate as of the date such litigation is 
 *    filed.
 * 4. Redistribution
 *    You may reproduce or distribute the Work only if (a) you do so under 
 *    this License, (b) you include a complete copy of this License with your 
 *    distribution, and (c) you retain without modification any copyright, 
 *    patent, trademark, or attribution notices that are present in the Work.
 * 5. Derivative Works
 *    You may specify that additional or different terms apply to the use, 
 *    reproduction, and distribution of your derivative works of the Work 
 *    ("Your Terms") only if (a) Your Terms provide that the limitations of 
 *    Section 7 apply to your derivative works, and (b) you identify the 
 *    specific derivative works that are subject to Your Terms. 
 *    Notwithstanding Your Terms, this license (including the redistribution 
 *    requirements in Section 4) will continue to apply to the Work itself.
 * 6. Trademarks
 *    This license does not grant any rights to use any Licensor's or its 
 *    affiliates' names, logos, or trademarks, except as necessary to 
 *    reproduce the notices described in this license.
 * 7. Limitations
 *    Platform. The Work and any derivative works thereof may only be used, or 
 *    intended for use, with a Broadcom switch integrated circuit.
 *    No Reverse Engineering. You will not use the Work to disassemble, 
 *    reverse engineer, decompile, or attempt to ascertain the underlying 
 *    technology of a Broadcom switch integrated circuit.
 * 8. Termination
 *    If you violate any term of this license, then your rights under this 
 *    license (including the license grants of Sections 2 and 3) will 
 *    terminate immediately.
 * 9. Disclaimer of Warranty
 *    THE WORK IS PROVIDED "AS IS" WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 *    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WARRANTIES OR CONDITIONS OF 
 *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR 
 *    NON-INFRINGEMENT. YOU BEAR THE RISK OF UNDERTAKING ANY ACTIVITIES UNDER 
 *    THIS LICENSE. SOME STATES' CONSUMER LAWS DO NOT ALLOW EXCLUSION OF AN 
 *    IMPLIED WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO YOU.
 * 10. Limitation of Liability
 *    EXCEPT AS PROHIBITED BY APPLICABLE LAW, IN NO EVENT AND UNDER NO LEGAL 
 *    THEORY, WHETHER IN TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE 
 *    SHALL ANY LICENSOR BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY DIRECT, 
 *    INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF 
 *    OR RELATED TO THIS LICENSE, THE USE OR INABILITY TO USE THE WORK 
 *    (INCLUDING BUT NOT LIMITED TO LOSS OF GOODWILL, BUSINESS INTERRUPTION, 
 *    LOST PROFITS OR DATA, COMPUTER FAILURE OR MALFUNCTION, OR ANY OTHER 
 *    COMMERCIAL DAMAGES OR LOSSES), EVEN IF THE LICENSOR HAS BEEN ADVISED OF 
 *    THE POSSIBILITY OF SUCH DAMAGES.
 */
#include <sal/sal_libc.h>
#include <bcmdrd/bcmdrd_chip.h>
#include <bcmdrd/bcmdrd_field.h>
#include <bcmbd/bcmbd_cmicx.h>
#include <bcmbd/bcmbd_cmicx_mem.h>
#include <bcmbd/bcmbd_cmicx_reg.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 */



/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_CFGr_OFFSET 0x00003418

#define CMIC_CMC_CCMDMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_CFG.
 */
typedef union CMIC_CMC_CCMDMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_cfg[1];
	uint32_t _cmic_cmc_ccmdma_cfg;
} CMIC_CMC_CCMDMA_CFGr_t;

#define CMIC_CMC_CCMDMA_CFGr_CLR(r) (r).cmic_cmc_ccmdma_cfg[0] = 0
#define CMIC_CMC_CCMDMA_CFGr_SET(r,d) (r).cmic_cmc_ccmdma_cfg[0] = d
#define CMIC_CMC_CCMDMA_CFGr_GET(r) (r).cmic_cmc_ccmdma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_CFGr_ENf_GET(r) (((r).cmic_cmc_ccmdma_cfg[0]) & 0x1)
#define CMIC_CMC_CCMDMA_CFGr_ENf_SET(r,f) (r).cmic_cmc_ccmdma_cfg[0]=(((r).cmic_cmc_ccmdma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_CCMDMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc_ccmdma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC_CCMDMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc_ccmdma_cfg[0]=(((r).cmic_cmc_ccmdma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_CCMDMA_CFGr_PROCESSOR0_ENDIANESSf_GET(r) ((((r).cmic_cmc_ccmdma_cfg[0]) >> 2) & 0x1)
#define CMIC_CMC_CCMDMA_CFGr_PROCESSOR0_ENDIANESSf_SET(r,f) (r).cmic_cmc_ccmdma_cfg[0]=(((r).cmic_cmc_ccmdma_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_CCMDMA_CFGr_PROCESSOR1_ENDIANESSf_GET(r) ((((r).cmic_cmc_ccmdma_cfg[0]) >> 3) & 0x1)
#define CMIC_CMC_CCMDMA_CFGr_PROCESSOR1_ENDIANESSf_SET(r,f) (r).cmic_cmc_ccmdma_cfg[0]=(((r).cmic_cmc_ccmdma_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_CFG.
 */
#define READ_CMIC_CMC_CCMDMA_CFGr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_CFGr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cfg)
#define WRITE_CMIC_CMC_CCMDMA_CFGr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_CFGr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cfg)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_OFFSET 0x00003424

#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HI.
 */
typedef union CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_cur_host0_addr_hi[1];
	uint32_t _cmic_cmc_ccmdma_cur_host0_addr_hi;
} CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_t;

#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_CLR(r) (r).cmic_cmc_ccmdma_cur_host0_addr_hi[0] = 0
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_SET(r,d) (r).cmic_cmc_ccmdma_cur_host0_addr_hi[0] = d
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_GET(r) (r).cmic_cmc_ccmdma_cur_host0_addr_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_ADDRf_GET(r) ((r).cmic_cmc_ccmdma_cur_host0_addr_hi[0])
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_ADDRf_SET(r,f) (r).cmic_cmc_ccmdma_cur_host0_addr_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HI.
 */
#define READ_CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cur_host0_addr_hi)
#define WRITE_CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cur_host0_addr_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_OFFSET 0x00003420

#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LO.
 */
typedef union CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_cur_host0_addr_lo[1];
	uint32_t _cmic_cmc_ccmdma_cur_host0_addr_lo;
} CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_t;

#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_CLR(r) (r).cmic_cmc_ccmdma_cur_host0_addr_lo[0] = 0
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_SET(r,d) (r).cmic_cmc_ccmdma_cur_host0_addr_lo[0] = d
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_GET(r) (r).cmic_cmc_ccmdma_cur_host0_addr_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_ADDRf_GET(r) ((r).cmic_cmc_ccmdma_cur_host0_addr_lo[0])
#define CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_ADDRf_SET(r,f) (r).cmic_cmc_ccmdma_cur_host0_addr_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LO.
 */
#define READ_CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cur_host0_addr_lo)
#define WRITE_CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cur_host0_addr_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_CUR_HOST0_ADDR_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_OFFSET 0x0000342c

#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HI.
 */
typedef union CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_cur_host1_addr_hi[1];
	uint32_t _cmic_cmc_ccmdma_cur_host1_addr_hi;
} CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_t;

#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_CLR(r) (r).cmic_cmc_ccmdma_cur_host1_addr_hi[0] = 0
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_SET(r,d) (r).cmic_cmc_ccmdma_cur_host1_addr_hi[0] = d
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_GET(r) (r).cmic_cmc_ccmdma_cur_host1_addr_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_ADDRf_GET(r) ((r).cmic_cmc_ccmdma_cur_host1_addr_hi[0])
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_ADDRf_SET(r,f) (r).cmic_cmc_ccmdma_cur_host1_addr_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HI.
 */
#define READ_CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cur_host1_addr_hi)
#define WRITE_CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cur_host1_addr_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_OFFSET 0x00003428

#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LO.
 */
typedef union CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_cur_host1_addr_lo[1];
	uint32_t _cmic_cmc_ccmdma_cur_host1_addr_lo;
} CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_t;

#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_CLR(r) (r).cmic_cmc_ccmdma_cur_host1_addr_lo[0] = 0
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_SET(r,d) (r).cmic_cmc_ccmdma_cur_host1_addr_lo[0] = d
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_GET(r) (r).cmic_cmc_ccmdma_cur_host1_addr_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_ADDRf_GET(r) ((r).cmic_cmc_ccmdma_cur_host1_addr_lo[0])
#define CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_ADDRf_SET(r,f) (r).cmic_cmc_ccmdma_cur_host1_addr_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LO.
 */
#define READ_CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cur_host1_addr_lo)
#define WRITE_CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_cur_host1_addr_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_CUR_HOST1_ADDR_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_ECC_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_ECC_CONTROLr_OFFSET 0x00003430

#define CMIC_CMC_CCMDMA_ECC_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_ECC_CONTROL.
 */
typedef union CMIC_CMC_CCMDMA_ECC_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_ecc_control[1];
	uint32_t _cmic_cmc_ccmdma_ecc_control;
} CMIC_CMC_CCMDMA_ECC_CONTROLr_t;

#define CMIC_CMC_CCMDMA_ECC_CONTROLr_CLR(r) (r).cmic_cmc_ccmdma_ecc_control[0] = 0
#define CMIC_CMC_CCMDMA_ECC_CONTROLr_SET(r,d) (r).cmic_cmc_ccmdma_ecc_control[0] = d
#define CMIC_CMC_CCMDMA_ECC_CONTROLr_GET(r) (r).cmic_cmc_ccmdma_ecc_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_ECC_CONTROLr_INJECT_1BIT_ERR_IN_DMARDf_GET(r) (((r).cmic_cmc_ccmdma_ecc_control[0]) & 0x1)
#define CMIC_CMC_CCMDMA_ECC_CONTROLr_INJECT_1BIT_ERR_IN_DMARDf_SET(r,f) (r).cmic_cmc_ccmdma_ecc_control[0]=(((r).cmic_cmc_ccmdma_ecc_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_CCMDMA_ECC_CONTROLr_INJECT_2BIT_ERR_IN_DMARDf_GET(r) ((((r).cmic_cmc_ccmdma_ecc_control[0]) >> 1) & 0x1)
#define CMIC_CMC_CCMDMA_ECC_CONTROLr_INJECT_2BIT_ERR_IN_DMARDf_SET(r,f) (r).cmic_cmc_ccmdma_ecc_control[0]=(((r).cmic_cmc_ccmdma_ecc_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_CCMDMA_ECC_CONTROLr_DISABLE_ECC_LOGICf_GET(r) ((((r).cmic_cmc_ccmdma_ecc_control[0]) >> 2) & 0x1)
#define CMIC_CMC_CCMDMA_ECC_CONTROLr_DISABLE_ECC_LOGICf_SET(r,f) (r).cmic_cmc_ccmdma_ecc_control[0]=(((r).cmic_cmc_ccmdma_ecc_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_ECC_CONTROL.
 */
#define READ_CMIC_CMC_CCMDMA_ECC_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_ECC_CONTROLr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_ecc_control)
#define WRITE_CMIC_CMC_CCMDMA_ECC_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_ECC_CONTROLr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_ecc_control)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_ECC_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_ECC_STATUSr_OFFSET 0x00003434

#define CMIC_CMC_CCMDMA_ECC_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_ECC_STATUS.
 */
typedef union CMIC_CMC_CCMDMA_ECC_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_ecc_status[1];
	uint32_t _cmic_cmc_ccmdma_ecc_status;
} CMIC_CMC_CCMDMA_ECC_STATUSr_t;

#define CMIC_CMC_CCMDMA_ECC_STATUSr_CLR(r) (r).cmic_cmc_ccmdma_ecc_status[0] = 0
#define CMIC_CMC_CCMDMA_ECC_STATUSr_SET(r,d) (r).cmic_cmc_ccmdma_ecc_status[0] = d
#define CMIC_CMC_CCMDMA_ECC_STATUSr_GET(r) (r).cmic_cmc_ccmdma_ecc_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_ECC_STATUSr_SINGLE_BIT_ERR_DETECTEDf_GET(r) (((r).cmic_cmc_ccmdma_ecc_status[0]) & 0x1)
#define CMIC_CMC_CCMDMA_ECC_STATUSr_SINGLE_BIT_ERR_DETECTEDf_SET(r,f) (r).cmic_cmc_ccmdma_ecc_status[0]=(((r).cmic_cmc_ccmdma_ecc_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_CCMDMA_ECC_STATUSr_DOUBLE_BIT_ERR_DETECTEDf_GET(r) ((((r).cmic_cmc_ccmdma_ecc_status[0]) >> 1) & 0x1)
#define CMIC_CMC_CCMDMA_ECC_STATUSr_DOUBLE_BIT_ERR_DETECTEDf_SET(r,f) (r).cmic_cmc_ccmdma_ecc_status[0]=(((r).cmic_cmc_ccmdma_ecc_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_CCMDMA_ECC_STATUSr_MULTIPLE_ERR_DETECTEDf_GET(r) ((((r).cmic_cmc_ccmdma_ecc_status[0]) >> 2) & 0x1)
#define CMIC_CMC_CCMDMA_ECC_STATUSr_MULTIPLE_ERR_DETECTEDf_SET(r,f) (r).cmic_cmc_ccmdma_ecc_status[0]=(((r).cmic_cmc_ccmdma_ecc_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_CCMDMA_ECC_STATUSr_FIRST_ERR_ADDRESSf_GET(r) ((((r).cmic_cmc_ccmdma_ecc_status[0]) >> 9) & 0x7)
#define CMIC_CMC_CCMDMA_ECC_STATUSr_FIRST_ERR_ADDRESSf_SET(r,f) (r).cmic_cmc_ccmdma_ecc_status[0]=(((r).cmic_cmc_ccmdma_ecc_status[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_ECC_STATUS.
 */
#define READ_CMIC_CMC_CCMDMA_ECC_STATUSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_ECC_STATUSr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_ecc_status)
#define WRITE_CMIC_CMC_CCMDMA_ECC_STATUSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_ECC_STATUSr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_ecc_status)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_ECC_STATUS_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_OFFSET 0x00003438

#define CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_ECC_STATUS_CLR.
 */
typedef union CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_ecc_status_clr[1];
	uint32_t _cmic_cmc_ccmdma_ecc_status_clr;
} CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_t;

#define CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_CLR(r) (r).cmic_cmc_ccmdma_ecc_status_clr[0] = 0
#define CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_SET(r,d) (r).cmic_cmc_ccmdma_ecc_status_clr[0] = d
#define CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_GET(r) (r).cmic_cmc_ccmdma_ecc_status_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_CLEARf_GET(r) (((r).cmic_cmc_ccmdma_ecc_status_clr[0]) & 0x1)
#define CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_CLEARf_SET(r,f) (r).cmic_cmc_ccmdma_ecc_status_clr[0]=(((r).cmic_cmc_ccmdma_ecc_status_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_ECC_STATUS_CLR.
 */
#define READ_CMIC_CMC_CCMDMA_ECC_STATUS_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_ecc_status_clr)
#define WRITE_CMIC_CMC_CCMDMA_ECC_STATUS_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_ECC_STATUS_CLRr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_ecc_status_clr)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_ECC_STATUS_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_ENTRY_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_ENTRY_COUNTr_OFFSET 0x00003414

#define CMIC_CMC_CCMDMA_ENTRY_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_ENTRY_COUNT.
 */
typedef union CMIC_CMC_CCMDMA_ENTRY_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_entry_count[1];
	uint32_t _cmic_cmc_ccmdma_entry_count;
} CMIC_CMC_CCMDMA_ENTRY_COUNTr_t;

#define CMIC_CMC_CCMDMA_ENTRY_COUNTr_CLR(r) (r).cmic_cmc_ccmdma_entry_count[0] = 0
#define CMIC_CMC_CCMDMA_ENTRY_COUNTr_SET(r,d) (r).cmic_cmc_ccmdma_entry_count[0] = d
#define CMIC_CMC_CCMDMA_ENTRY_COUNTr_GET(r) (r).cmic_cmc_ccmdma_entry_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_ENTRY_COUNTr_COUNTf_GET(r) (((r).cmic_cmc_ccmdma_entry_count[0]) & 0x3fffffff)
#define CMIC_CMC_CCMDMA_ENTRY_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc_ccmdma_entry_count[0]=(((r).cmic_cmc_ccmdma_entry_count[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_ENTRY_COUNT.
 */
#define READ_CMIC_CMC_CCMDMA_ENTRY_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_ENTRY_COUNTr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_entry_count)
#define WRITE_CMIC_CMC_CCMDMA_ENTRY_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_ENTRY_COUNTr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_entry_count)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_ENTRY_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_OFFSET 0x00003408

#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HI.
 */
typedef union CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_host0_mem_start_addr_hi[1];
	uint32_t _cmic_cmc_ccmdma_host0_mem_start_addr_hi;
} CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_t;

#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_CLR(r) (r).cmic_cmc_ccmdma_host0_mem_start_addr_hi[0] = 0
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_SET(r,d) (r).cmic_cmc_ccmdma_host0_mem_start_addr_hi[0] = d
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_GET(r) (r).cmic_cmc_ccmdma_host0_mem_start_addr_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_ADDRf_GET(r) ((r).cmic_cmc_ccmdma_host0_mem_start_addr_hi[0])
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_ADDRf_SET(r,f) (r).cmic_cmc_ccmdma_host0_mem_start_addr_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HI.
 */
#define READ_CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_host0_mem_start_addr_hi)
#define WRITE_CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_host0_mem_start_addr_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_OFFSET 0x00003404

#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LO.
 */
typedef union CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_host0_mem_start_addr_lo[1];
	uint32_t _cmic_cmc_ccmdma_host0_mem_start_addr_lo;
} CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_t;

#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_CLR(r) (r).cmic_cmc_ccmdma_host0_mem_start_addr_lo[0] = 0
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_SET(r,d) (r).cmic_cmc_ccmdma_host0_mem_start_addr_lo[0] = d
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_GET(r) (r).cmic_cmc_ccmdma_host0_mem_start_addr_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_ADDRf_GET(r) ((r).cmic_cmc_ccmdma_host0_mem_start_addr_lo[0])
#define CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_ADDRf_SET(r,f) (r).cmic_cmc_ccmdma_host0_mem_start_addr_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LO.
 */
#define READ_CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_host0_mem_start_addr_lo)
#define WRITE_CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_host0_mem_start_addr_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_HOST0_MEM_START_ADDR_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_OFFSET 0x00003410

#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HI.
 */
typedef union CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_host1_mem_start_addr_hi[1];
	uint32_t _cmic_cmc_ccmdma_host1_mem_start_addr_hi;
} CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_t;

#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_CLR(r) (r).cmic_cmc_ccmdma_host1_mem_start_addr_hi[0] = 0
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_SET(r,d) (r).cmic_cmc_ccmdma_host1_mem_start_addr_hi[0] = d
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_GET(r) (r).cmic_cmc_ccmdma_host1_mem_start_addr_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_ADDRf_GET(r) ((r).cmic_cmc_ccmdma_host1_mem_start_addr_hi[0])
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_ADDRf_SET(r,f) (r).cmic_cmc_ccmdma_host1_mem_start_addr_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HI.
 */
#define READ_CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_host1_mem_start_addr_hi)
#define WRITE_CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_host1_mem_start_addr_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_OFFSET 0x0000340c

#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LO.
 */
typedef union CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_host1_mem_start_addr_lo[1];
	uint32_t _cmic_cmc_ccmdma_host1_mem_start_addr_lo;
} CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_t;

#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_CLR(r) (r).cmic_cmc_ccmdma_host1_mem_start_addr_lo[0] = 0
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_SET(r,d) (r).cmic_cmc_ccmdma_host1_mem_start_addr_lo[0] = d
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_GET(r) (r).cmic_cmc_ccmdma_host1_mem_start_addr_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_ADDRf_GET(r) ((r).cmic_cmc_ccmdma_host1_mem_start_addr_lo[0])
#define CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_ADDRf_SET(r,f) (r).cmic_cmc_ccmdma_host1_mem_start_addr_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LO.
 */
#define READ_CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_host1_mem_start_addr_lo)
#define WRITE_CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_host1_mem_start_addr_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_HOST1_MEM_START_ADDR_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_STATr_OFFSET 0x0000341c

#define CMIC_CMC_CCMDMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_STAT.
 */
typedef union CMIC_CMC_CCMDMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_stat[1];
	uint32_t _cmic_cmc_ccmdma_stat;
} CMIC_CMC_CCMDMA_STATr_t;

#define CMIC_CMC_CCMDMA_STATr_CLR(r) (r).cmic_cmc_ccmdma_stat[0] = 0
#define CMIC_CMC_CCMDMA_STATr_SET(r,d) (r).cmic_cmc_ccmdma_stat[0] = d
#define CMIC_CMC_CCMDMA_STATr_GET(r) (r).cmic_cmc_ccmdma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_STATr_DONEf_GET(r) (((r).cmic_cmc_ccmdma_stat[0]) & 0x1)
#define CMIC_CMC_CCMDMA_STATr_DONEf_SET(r,f) (r).cmic_cmc_ccmdma_stat[0]=(((r).cmic_cmc_ccmdma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_CCMDMA_STATr_ERRORf_GET(r) ((((r).cmic_cmc_ccmdma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC_CCMDMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc_ccmdma_stat[0]=(((r).cmic_cmc_ccmdma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_CCMDMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_ccmdma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC_CCMDMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_ccmdma_stat[0]=(((r).cmic_cmc_ccmdma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_STAT.
 */
#define READ_CMIC_CMC_CCMDMA_STATr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_STATr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_stat)
#define WRITE_CMIC_CMC_CCMDMA_STATr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_STATr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_stat)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_TM_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_TM_CONTROLr_OFFSET 0x0000343c

#define CMIC_CMC_CCMDMA_TM_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_TM_CONTROL.
 */
typedef union CMIC_CMC_CCMDMA_TM_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_tm_control[1];
	uint32_t _cmic_cmc_ccmdma_tm_control;
} CMIC_CMC_CCMDMA_TM_CONTROLr_t;

#define CMIC_CMC_CCMDMA_TM_CONTROLr_CLR(r) (r).cmic_cmc_ccmdma_tm_control[0] = 0
#define CMIC_CMC_CCMDMA_TM_CONTROLr_SET(r,d) (r).cmic_cmc_ccmdma_tm_control[0] = d
#define CMIC_CMC_CCMDMA_TM_CONTROLr_GET(r) (r).cmic_cmc_ccmdma_tm_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_TM_CONTROLr_TMf_GET(r) (((r).cmic_cmc_ccmdma_tm_control[0]) & 0x1f)
#define CMIC_CMC_CCMDMA_TM_CONTROLr_TMf_SET(r,f) (r).cmic_cmc_ccmdma_tm_control[0]=(((r).cmic_cmc_ccmdma_tm_control[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access CMIC_CMC_CCMDMA_TM_CONTROL.
 */
#define READ_CMIC_CMC_CCMDMA_TM_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_CCMDMA_TM_CONTROLr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_tm_control)
#define WRITE_CMIC_CMC_CCMDMA_TM_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_CCMDMA_TM_CONTROLr_OFFSET+(0x80*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_ccmdma_tm_control)

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_TM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CONTROLr_OFFSET 0x00003000

#define CMIC_CMC_SBUSDMA_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CONTROL.
 */
typedef union CMIC_CMC_SBUSDMA_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_control[1];
	uint32_t _cmic_cmc_sbusdma_control;
} CMIC_CMC_SBUSDMA_CONTROLr_t;

#define CMIC_CMC_SBUSDMA_CONTROLr_CLR(r) (r).cmic_cmc_sbusdma_control[0] = 0
#define CMIC_CMC_SBUSDMA_CONTROLr_SET(r,d) (r).cmic_cmc_sbusdma_control[0] = d
#define CMIC_CMC_SBUSDMA_CONTROLr_GET(r) (r).cmic_cmc_sbusdma_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CONTROLr_STARTf_GET(r) (((r).cmic_cmc_sbusdma_control[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_SBUSDMA_CONTROLr_DESC_PREFETCH_ENABLEf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 4) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_DESC_PREFETCH_ENABLEf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CONTROL.
 */
#define READ_CMIC_CMC_SBUSDMA_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CONTROLr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_control)
#define WRITE_CMIC_CMC_SBUSDMA_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CONTROLr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_control)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_COUNTr_OFFSET 0x00003008

#define CMIC_CMC_SBUSDMA_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_COUNT.
 */
typedef union CMIC_CMC_SBUSDMA_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_count[1];
	uint32_t _cmic_cmc_sbusdma_count;
} CMIC_CMC_SBUSDMA_COUNTr_t;

#define CMIC_CMC_SBUSDMA_COUNTr_CLR(r) (r).cmic_cmc_sbusdma_count[0] = 0
#define CMIC_CMC_SBUSDMA_COUNTr_SET(r,d) (r).cmic_cmc_sbusdma_count[0] = d
#define CMIC_CMC_SBUSDMA_COUNTr_GET(r) (r).cmic_cmc_sbusdma_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_COUNTr_COUNTf_GET(r) ((r).cmic_cmc_sbusdma_count[0])
#define CMIC_CMC_SBUSDMA_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc_sbusdma_count[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_COUNT.
 */
#define READ_CMIC_CMC_SBUSDMA_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_COUNTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_count)
#define WRITE_CMIC_CMC_SBUSDMA_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_COUNTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_count)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_OFFSET 0x00003038

#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HI.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_desc_address_hi[1];
	uint32_t _cmic_cmc_sbusdma_cur_desc_address_hi;
} CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_t;

#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_CLR(r) (r).cmic_cmc_sbusdma_cur_desc_address_hi[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_SET(r,d) (r).cmic_cmc_sbusdma_cur_desc_address_hi[0] = d
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_GET(r) (r).cmic_cmc_sbusdma_cur_desc_address_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_desc_address_hi[0])
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_desc_address_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HI.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_desc_address_hi)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_desc_address_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_OFFSET 0x00003034

#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LO.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_desc_address_lo[1];
	uint32_t _cmic_cmc_sbusdma_cur_desc_address_lo;
} CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_t;

#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_CLR(r) (r).cmic_cmc_sbusdma_cur_desc_address_lo[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_SET(r,d) (r).cmic_cmc_sbusdma_cur_desc_address_lo[0] = d
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_GET(r) (r).cmic_cmc_sbusdma_cur_desc_address_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_desc_address_lo[0])
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_desc_address_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LO.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_desc_address_lo)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_desc_address_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_OFFSET 0x0000302c

#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HI.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_hostmem_address_hi[1];
	uint32_t _cmic_cmc_sbusdma_cur_hostmem_address_hi;
} CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_t;

#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_CLR(r) (r).cmic_cmc_sbusdma_cur_hostmem_address_hi[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_SET(r,d) (r).cmic_cmc_sbusdma_cur_hostmem_address_hi[0] = d
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_GET(r) (r).cmic_cmc_sbusdma_cur_hostmem_address_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_hostmem_address_hi[0])
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_hostmem_address_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HI.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_hostmem_address_hi)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_hostmem_address_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_OFFSET 0x00003028

#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LO.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_hostmem_address_lo[1];
	uint32_t _cmic_cmc_sbusdma_cur_hostmem_address_lo;
} CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_t;

#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_CLR(r) (r).cmic_cmc_sbusdma_cur_hostmem_address_lo[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_SET(r,d) (r).cmic_cmc_sbusdma_cur_hostmem_address_lo[0] = d
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_GET(r) (r).cmic_cmc_sbusdma_cur_hostmem_address_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_hostmem_address_lo[0])
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_hostmem_address_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LO.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_hostmem_address_lo)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_hostmem_address_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x00003050

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_count;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNT.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_count)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_count)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_OFFSET 0x0000304c

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HI.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_hi[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_hi;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_hi[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_hi[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_hi[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HI.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_hi)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_OFFSET 0x00003048

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LO.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_lo[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_lo;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_lo[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_lo[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_lo[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LO.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_lo)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x00003040

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_opcode;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODE.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_opcode)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_opcode)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x0000303c

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_request;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUEST.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_request)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_request)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x00003044

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_OFFSET 0x00003030

#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbus_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbus_address;
} CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbus_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbus_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbus_address[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbus_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbus_address)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbus_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_OFFSET 0x00003020

#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HI.
 */
typedef union CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_desc_start_address_hi[1];
	uint32_t _cmic_cmc_sbusdma_desc_start_address_hi;
} CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_t;

#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_CLR(r) (r).cmic_cmc_sbusdma_desc_start_address_hi[0] = 0
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_SET(r,d) (r).cmic_cmc_sbusdma_desc_start_address_hi[0] = d
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_GET(r) (r).cmic_cmc_sbusdma_desc_start_address_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_desc_start_address_hi[0])
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_desc_start_address_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HI.
 */
#define READ_CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_desc_start_address_hi)
#define WRITE_CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_desc_start_address_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_OFFSET 0x0000301c

#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LO.
 */
typedef union CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_desc_start_address_lo[1];
	uint32_t _cmic_cmc_sbusdma_desc_start_address_lo;
} CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_t;

#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_CLR(r) (r).cmic_cmc_sbusdma_desc_start_address_lo[0] = 0
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_SET(r,d) (r).cmic_cmc_sbusdma_desc_start_address_lo[0] = d
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_GET(r) (r).cmic_cmc_sbusdma_desc_start_address_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_desc_start_address_lo[0])
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_desc_start_address_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LO.
 */
#define READ_CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_desc_start_address_lo)
#define WRITE_CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_desc_start_address_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_DESC_START_ADDRESS_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_ECC_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_OFFSET 0x00003064

#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_ECC_CONTROL.
 */
typedef union CMIC_CMC_SBUSDMA_ECC_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_ecc_control[1];
	uint32_t _cmic_cmc_sbusdma_ecc_control;
} CMIC_CMC_SBUSDMA_ECC_CONTROLr_t;

#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_CLR(r) (r).cmic_cmc_sbusdma_ecc_control[0] = 0
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_SET(r,d) (r).cmic_cmc_sbusdma_ecc_control[0] = d
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_GET(r) (r).cmic_cmc_sbusdma_ecc_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_INJECT_1BIT_ERR_IN_HOSTWR_MEMf_GET(r) (((r).cmic_cmc_sbusdma_ecc_control[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_INJECT_1BIT_ERR_IN_HOSTWR_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_control[0]=(((r).cmic_cmc_sbusdma_ecc_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_INJECT_2BIT_ERR_IN_HOSTWR_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_control[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_INJECT_2BIT_ERR_IN_HOSTWR_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_control[0]=(((r).cmic_cmc_sbusdma_ecc_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_INJECT_1BIT_ERR_IN_HOSTRD_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_control[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_INJECT_1BIT_ERR_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_control[0]=(((r).cmic_cmc_sbusdma_ecc_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_INJECT_2BIT_ERR_IN_HOSTRD_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_control[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_INJECT_2BIT_ERR_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_control[0]=(((r).cmic_cmc_sbusdma_ecc_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_DISABLE_ECC_LOGIC_HOSTWR_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_control[0]) >> 4) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_DISABLE_ECC_LOGIC_HOSTWR_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_control[0]=(((r).cmic_cmc_sbusdma_ecc_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_DISABLE_ECC_LOGIC_HOSTRD_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_control[0]) >> 5) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_CONTROLr_DISABLE_ECC_LOGIC_HOSTRD_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_control[0]=(((r).cmic_cmc_sbusdma_ecc_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_ECC_CONTROL.
 */
#define READ_CMIC_CMC_SBUSDMA_ECC_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_ECC_CONTROLr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_ecc_control)
#define WRITE_CMIC_CMC_SBUSDMA_ECC_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_ECC_CONTROLr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_ecc_control)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_ECC_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_OFFSET 0x00003068

#define CMIC_CMC_SBUSDMA_ECC_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_ECC_STATUS.
 */
typedef union CMIC_CMC_SBUSDMA_ECC_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_ecc_status[1];
	uint32_t _cmic_cmc_sbusdma_ecc_status;
} CMIC_CMC_SBUSDMA_ECC_STATUSr_t;

#define CMIC_CMC_SBUSDMA_ECC_STATUSr_CLR(r) (r).cmic_cmc_sbusdma_ecc_status[0] = 0
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_SET(r,d) (r).cmic_cmc_sbusdma_ecc_status[0] = d
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_GET(r) (r).cmic_cmc_sbusdma_ecc_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_SINGLE_BIT_ERR_DETECTED_IN_HOSTWR_MEMf_GET(r) (((r).cmic_cmc_sbusdma_ecc_status[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_SINGLE_BIT_ERR_DETECTED_IN_HOSTWR_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status[0]=(((r).cmic_cmc_sbusdma_ecc_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_SINGLE_BIT_ERR_DETECTED_IN_HOSTRD_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_status[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_SINGLE_BIT_ERR_DETECTED_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status[0]=(((r).cmic_cmc_sbusdma_ecc_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_DOUBLE_BIT_ERR_DETECTED_IN_HOSTWR_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_status[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_DOUBLE_BIT_ERR_DETECTED_IN_HOSTWR_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status[0]=(((r).cmic_cmc_sbusdma_ecc_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_DOUBLE_BIT_ERR_DETECTED_IN_HOSTRD_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_status[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_DOUBLE_BIT_ERR_DETECTED_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status[0]=(((r).cmic_cmc_sbusdma_ecc_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_MULTIPLE_ERR_DETECTED_IN_HOSTWR_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_status[0]) >> 4) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_MULTIPLE_ERR_DETECTED_IN_HOSTWR_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status[0]=(((r).cmic_cmc_sbusdma_ecc_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_MULTIPLE_ERR_DETECTED_IN_HOSTRD_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_status[0]) >> 5) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_MULTIPLE_ERR_DETECTED_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status[0]=(((r).cmic_cmc_sbusdma_ecc_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_FIRST_ERR_ADDRESS_OF_HOSTWR_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_status[0]) >> 6) & 0xf)
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_FIRST_ERR_ADDRESS_OF_HOSTWR_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status[0]=(((r).cmic_cmc_sbusdma_ecc_status[0] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6))
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_FIRST_ERR_ADDRESS_OF_HOSTRD_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_status[0]) >> 10) & 0xf)
#define CMIC_CMC_SBUSDMA_ECC_STATUSr_FIRST_ERR_ADDRESS_OF_HOSTRD_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status[0]=(((r).cmic_cmc_sbusdma_ecc_status[0] & ~((uint32_t)0xf << 10)) | ((((uint32_t)f) & 0xf) << 10))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_ECC_STATUS.
 */
#define READ_CMIC_CMC_SBUSDMA_ECC_STATUSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_ECC_STATUSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_ecc_status)
#define WRITE_CMIC_CMC_SBUSDMA_ECC_STATUSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_ECC_STATUSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_ecc_status)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_ECC_STATUS_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_OFFSET 0x0000306c

#define CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_ECC_STATUS_CLR.
 */
typedef union CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_ecc_status_clr[1];
	uint32_t _cmic_cmc_sbusdma_ecc_status_clr;
} CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_t;

#define CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_CLR(r) (r).cmic_cmc_sbusdma_ecc_status_clr[0] = 0
#define CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_SET(r,d) (r).cmic_cmc_sbusdma_ecc_status_clr[0] = d
#define CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_GET(r) (r).cmic_cmc_sbusdma_ecc_status_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_CLEAR_HOSTWR_MEMf_GET(r) (((r).cmic_cmc_sbusdma_ecc_status_clr[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_CLEAR_HOSTWR_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status_clr[0]=(((r).cmic_cmc_sbusdma_ecc_status_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_CLEAR_HOSTRD_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_ecc_status_clr[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_CLEAR_HOSTRD_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_ecc_status_clr[0]=(((r).cmic_cmc_sbusdma_ecc_status_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_ECC_STATUS_CLR.
 */
#define READ_CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_ecc_status_clr)
#define WRITE_CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_ecc_status_clr)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_ECC_STATUS_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_OFFSET 0x00003018

#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HI.
 */
typedef union CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_hostmem_start_address_hi[1];
	uint32_t _cmic_cmc_sbusdma_hostmem_start_address_hi;
} CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_t;

#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_CLR(r) (r).cmic_cmc_sbusdma_hostmem_start_address_hi[0] = 0
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_SET(r,d) (r).cmic_cmc_sbusdma_hostmem_start_address_hi[0] = d
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_GET(r) (r).cmic_cmc_sbusdma_hostmem_start_address_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_hostmem_start_address_hi[0])
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_hostmem_start_address_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HI.
 */
#define READ_CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_hostmem_start_address_hi)
#define WRITE_CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_hostmem_start_address_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_OFFSET 0x00003014

#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LO.
 */
typedef union CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_hostmem_start_address_lo[1];
	uint32_t _cmic_cmc_sbusdma_hostmem_start_address_lo;
} CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_t;

#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_CLR(r) (r).cmic_cmc_sbusdma_hostmem_start_address_lo[0] = 0
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_SET(r,d) (r).cmic_cmc_sbusdma_hostmem_start_address_lo[0] = d
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_GET(r) (r).cmic_cmc_sbusdma_hostmem_start_address_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_hostmem_start_address_lo[0])
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_hostmem_start_address_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LO.
 */
#define READ_CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_hostmem_start_address_lo)
#define WRITE_CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_hostmem_start_address_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_OFFSET 0x00003074

#define CMIC_CMC_SBUSDMA_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_ITER_COUNT.
 */
typedef union CMIC_CMC_SBUSDMA_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_iter_count[1];
	uint32_t _cmic_cmc_sbusdma_iter_count;
} CMIC_CMC_SBUSDMA_ITER_COUNTr_t;

#define CMIC_CMC_SBUSDMA_ITER_COUNTr_CLR(r) (r).cmic_cmc_sbusdma_iter_count[0] = 0
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_SET(r,d) (r).cmic_cmc_sbusdma_iter_count[0] = d
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_GET(r) (r).cmic_cmc_sbusdma_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc_sbusdma_iter_count[0])
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc_sbusdma_iter_count[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_ITER_COUNT.
 */
#define READ_CMIC_CMC_SBUSDMA_ITER_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_ITER_COUNTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_iter_count)
#define WRITE_CMIC_CMC_SBUSDMA_ITER_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_ITER_COUNTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_iter_count)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_OPCODEr_OFFSET 0x0000300c

#define CMIC_CMC_SBUSDMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_OPCODE.
 */
typedef union CMIC_CMC_SBUSDMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_opcode[1];
	uint32_t _cmic_cmc_sbusdma_opcode;
} CMIC_CMC_SBUSDMA_OPCODEr_t;

#define CMIC_CMC_SBUSDMA_OPCODEr_CLR(r) (r).cmic_cmc_sbusdma_opcode[0] = 0
#define CMIC_CMC_SBUSDMA_OPCODEr_SET(r,d) (r).cmic_cmc_sbusdma_opcode[0] = d
#define CMIC_CMC_SBUSDMA_OPCODEr_GET(r) (r).cmic_cmc_sbusdma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc_sbusdma_opcode[0])
#define CMIC_CMC_SBUSDMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc_sbusdma_opcode[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_OPCODE.
 */
#define READ_CMIC_CMC_SBUSDMA_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_OPCODEr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_opcode)
#define WRITE_CMIC_CMC_SBUSDMA_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_OPCODEr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_opcode)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_REQUESTr_OFFSET 0x00003004

#define CMIC_CMC_SBUSDMA_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_REQUEST.
 */
typedef union CMIC_CMC_SBUSDMA_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_request[1];
	uint32_t _cmic_cmc_sbusdma_request;
} CMIC_CMC_SBUSDMA_REQUESTr_t;

#define CMIC_CMC_SBUSDMA_REQUESTr_CLR(r) (r).cmic_cmc_sbusdma_request[0] = 0
#define CMIC_CMC_SBUSDMA_REQUESTr_SET(r,d) (r).cmic_cmc_sbusdma_request[0] = d
#define CMIC_CMC_SBUSDMA_REQUESTr_GET(r) (r).cmic_cmc_sbusdma_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc_sbusdma_request[0]) & 0x1f)
#define CMIC_CMC_SBUSDMA_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 5) & 0x1f)
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 10) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 11) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_SBUSDMA_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 12) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_SBUSDMA_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 13) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_SBUSDMA_REQUESTr_IGNORE_SBUS_EARLYACKf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 14) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_IGNORE_SBUS_EARLYACKf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_SBUSDMA_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 16) & 0xff)
#define CMIC_CMC_SBUSDMA_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 24) & 0x1f)
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 29) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 30) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC_SBUSDMA_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 31) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_REQUEST.
 */
#define READ_CMIC_CMC_SBUSDMA_REQUESTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_REQUESTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_request)
#define WRITE_CMIC_CMC_SBUSDMA_REQUESTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_REQUESTr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_request)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_OFFSET 0x00003054

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_debug[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_debug;
} CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_debug[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_debug[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc_sbusdma_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_debug[0]=(((r).cmic_cmc_sbusdma_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_debug)
#define WRITE_CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_debug)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_OFFSET 0x00003058

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_debug_clr;
} CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]=(((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]=(((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLR.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_debug_clr)
#define WRITE_CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_debug_clr)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_OFFSET 0x00003060

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HI.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_eccerr_address_hi[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_eccerr_address_hi;
} CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address_hi[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address_hi[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_sbusdma_eccerr_address_hi[0])
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HI.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_eccerr_address_hi)
#define WRITE_CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_eccerr_address_hi)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_OFFSET 0x0000305c

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LO.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_eccerr_address_lo[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_eccerr_address_lo;
} CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address_lo[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address_lo[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_sbusdma_eccerr_address_lo[0])
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LO.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_eccerr_address_lo)
#define WRITE_CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_eccerr_address_lo)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_OFFSET 0x00003010

#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbus_start_address[1];
	uint32_t _cmic_cmc_sbusdma_sbus_start_address;
} CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_sbus_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_sbus_start_address[0] = d
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_sbus_start_address[0])
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_sbus_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUS_START_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbus_start_address)
#define WRITE_CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_sbus_start_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_STATUSr_OFFSET 0x00003024

#define CMIC_CMC_SBUSDMA_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_STATUS.
 */
typedef union CMIC_CMC_SBUSDMA_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_status[1];
	uint32_t _cmic_cmc_sbusdma_status;
} CMIC_CMC_SBUSDMA_STATUSr_t;

#define CMIC_CMC_SBUSDMA_STATUSr_CLR(r) (r).cmic_cmc_sbusdma_status[0] = 0
#define CMIC_CMC_SBUSDMA_STATUSr_SET(r,d) (r).cmic_cmc_sbusdma_status[0] = d
#define CMIC_CMC_SBUSDMA_STATUSr_GET(r) (r).cmic_cmc_sbusdma_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_STATUSr_DONEf_GET(r) (((r).cmic_cmc_sbusdma_status[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_DONEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_SBUSDMA_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 4) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 5) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 6) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 7) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 8) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 9) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_SBUSDMA_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 10) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_SBUSDMA_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 11) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 12) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_SBUSDMA_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 13) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_STATUS.
 */
#define READ_CMIC_CMC_SBUSDMA_STATUSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_STATUSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_status)
#define WRITE_CMIC_CMC_SBUSDMA_STATUSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_STATUSr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_status)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_TIMERr_OFFSET 0x00003070

#define CMIC_CMC_SBUSDMA_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_TIMER.
 */
typedef union CMIC_CMC_SBUSDMA_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_timer[1];
	uint32_t _cmic_cmc_sbusdma_timer;
} CMIC_CMC_SBUSDMA_TIMERr_t;

#define CMIC_CMC_SBUSDMA_TIMERr_CLR(r) (r).cmic_cmc_sbusdma_timer[0] = 0
#define CMIC_CMC_SBUSDMA_TIMERr_SET(r,d) (r).cmic_cmc_sbusdma_timer[0] = d
#define CMIC_CMC_SBUSDMA_TIMERr_GET(r) (r).cmic_cmc_sbusdma_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_TIMERr_TIMERf_GET(r) ((r).cmic_cmc_sbusdma_timer[0])
#define CMIC_CMC_SBUSDMA_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc_sbusdma_timer[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_TIMER.
 */
#define READ_CMIC_CMC_SBUSDMA_TIMERr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_TIMERr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_timer)
#define WRITE_CMIC_CMC_SBUSDMA_TIMERr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_TIMERr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_timer)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_TM_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_TM_CONTROLr_OFFSET 0x00003078

#define CMIC_CMC_SBUSDMA_TM_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_TM_CONTROL.
 */
typedef union CMIC_CMC_SBUSDMA_TM_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_tm_control[1];
	uint32_t _cmic_cmc_sbusdma_tm_control;
} CMIC_CMC_SBUSDMA_TM_CONTROLr_t;

#define CMIC_CMC_SBUSDMA_TM_CONTROLr_CLR(r) (r).cmic_cmc_sbusdma_tm_control[0] = 0
#define CMIC_CMC_SBUSDMA_TM_CONTROLr_SET(r,d) (r).cmic_cmc_sbusdma_tm_control[0] = d
#define CMIC_CMC_SBUSDMA_TM_CONTROLr_GET(r) (r).cmic_cmc_sbusdma_tm_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_TM_CONTROLr_TM_HOSTWR_MEMf_GET(r) (((r).cmic_cmc_sbusdma_tm_control[0]) & 0x1f)
#define CMIC_CMC_SBUSDMA_TM_CONTROLr_TM_HOSTWR_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_tm_control[0]=(((r).cmic_cmc_sbusdma_tm_control[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC_SBUSDMA_TM_CONTROLr_TM_HOSTRD_MEMf_GET(r) ((((r).cmic_cmc_sbusdma_tm_control[0]) >> 5) & 0x1f)
#define CMIC_CMC_SBUSDMA_TM_CONTROLr_TM_HOSTRD_MEMf_SET(r,f) (r).cmic_cmc_sbusdma_tm_control[0]=(((r).cmic_cmc_sbusdma_tm_control[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_TM_CONTROL.
 */
#define READ_CMIC_CMC_SBUSDMA_TM_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_TM_CONTROLr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_tm_control)
#define WRITE_CMIC_CMC_SBUSDMA_TM_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_TM_CONTROLr_OFFSET+(0x100*(_ch))+(0x3000*(_cmc)),r._cmic_cmc_sbusdma_tm_control)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_TM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_CFGr_OFFSET 0x00011000

#define CMIC_FIFO_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_CFG.
 */
typedef union CMIC_FIFO_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_cfg[1];
	uint32_t _cmic_fifo_rd_dma_cfg;
} CMIC_FIFO_RD_DMA_CFGr_t;

#define CMIC_FIFO_RD_DMA_CFGr_CLR(r) (r).cmic_fifo_rd_dma_cfg[0] = 0
#define CMIC_FIFO_RD_DMA_CFGr_SET(r,d) (r).cmic_fifo_rd_dma_cfg[0] = d
#define CMIC_FIFO_RD_DMA_CFGr_GET(r) (r).cmic_fifo_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_fifo_rd_dma_cfg[0]) & 0x1)
#define CMIC_FIFO_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_fifo_rd_dma_cfg[0]=(((r).cmic_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_FIFO_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_fifo_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_FIFO_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_fifo_rd_dma_cfg[0]=(((r).cmic_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_FIFO_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_fifo_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_FIFO_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_fifo_rd_dma_cfg[0]=(((r).cmic_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_FIFO_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_fifo_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_FIFO_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_fifo_rd_dma_cfg[0]=(((r).cmic_fifo_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_FIFO_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_fifo_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_FIFO_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_fifo_rd_dma_cfg[0]=(((r).cmic_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_FIFO_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_fifo_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_FIFO_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_fifo_rd_dma_cfg[0]=(((r).cmic_fifo_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_FIFO_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_fifo_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_FIFO_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_fifo_rd_dma_cfg[0]=(((r).cmic_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_FIFO_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_fifo_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_FIFO_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_fifo_rd_dma_cfg[0]=(((r).cmic_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_CFG.
 */
#define READ_CMIC_FIFO_RD_DMA_CFGr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_CFGr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_cfg)
#define WRITE_CMIC_FIFO_RD_DMA_CFGr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_CFGr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_cfg)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_CFG_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_CFG_1r_OFFSET 0x00011004

#define CMIC_FIFO_RD_DMA_CFG_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_CFG_1.
 */
typedef union CMIC_FIFO_RD_DMA_CFG_1r_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_cfg_1[1];
	uint32_t _cmic_fifo_rd_dma_cfg_1;
} CMIC_FIFO_RD_DMA_CFG_1r_t;

#define CMIC_FIFO_RD_DMA_CFG_1r_CLR(r) (r).cmic_fifo_rd_dma_cfg_1[0] = 0
#define CMIC_FIFO_RD_DMA_CFG_1r_SET(r,d) (r).cmic_fifo_rd_dma_cfg_1[0] = d
#define CMIC_FIFO_RD_DMA_CFG_1r_GET(r) (r).cmic_fifo_rd_dma_cfg_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_CFG_1r_IGNORE_SBUS_EARLYACKf_GET(r) (((r).cmic_fifo_rd_dma_cfg_1[0]) & 0x1)
#define CMIC_FIFO_RD_DMA_CFG_1r_IGNORE_SBUS_EARLYACKf_SET(r,f) (r).cmic_fifo_rd_dma_cfg_1[0]=(((r).cmic_fifo_rd_dma_cfg_1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_FIFO_RD_DMA_CFG_1r_MULTIPLE_SBUS_CMD_SPACING_MSB_BITSf_GET(r) ((((r).cmic_fifo_rd_dma_cfg_1[0]) >> 1) & 0x7)
#define CMIC_FIFO_RD_DMA_CFG_1r_MULTIPLE_SBUS_CMD_SPACING_MSB_BITSf_SET(r,f) (r).cmic_fifo_rd_dma_cfg_1[0]=(((r).cmic_fifo_rd_dma_cfg_1[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define CMIC_FIFO_RD_DMA_CFG_1r_TIMEOUT_COUNT_MSB_BITSf_GET(r) ((((r).cmic_fifo_rd_dma_cfg_1[0]) >> 4) & 0x3ffff)
#define CMIC_FIFO_RD_DMA_CFG_1r_TIMEOUT_COUNT_MSB_BITSf_SET(r,f) (r).cmic_fifo_rd_dma_cfg_1[0]=(((r).cmic_fifo_rd_dma_cfg_1[0] & ~((uint32_t)0x3ffff << 4)) | ((((uint32_t)f) & 0x3ffff) << 4))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_CFG_1.
 */
#define READ_CMIC_FIFO_RD_DMA_CFG_1r(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_CFG_1r_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_cfg_1)
#define WRITE_CMIC_FIFO_RD_DMA_CFG_1r(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_CFG_1r_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_cfg_1)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_CFG_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_OFFSET 0x00011048

#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HI.
 */
typedef union CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_cur_hostmem_write_ptr_hi[1];
	uint32_t _cmic_fifo_rd_dma_cur_hostmem_write_ptr_hi;
} CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_t;

#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_CLR(r) (r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_hi[0] = 0
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_SET(r,d) (r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_hi[0] = d
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_GET(r) (r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_ADDRESSf_GET(r) ((r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_hi[0])
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_ADDRESSf_SET(r,f) (r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HI.
 */
#define READ_CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_cur_hostmem_write_ptr_hi)
#define WRITE_CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_cur_hostmem_write_ptr_hi)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_OFFSET 0x00011044

#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LO.
 */
typedef union CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_cur_hostmem_write_ptr_lo[1];
	uint32_t _cmic_fifo_rd_dma_cur_hostmem_write_ptr_lo;
} CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_t;

#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_CLR(r) (r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_lo[0] = 0
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_SET(r,d) (r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_lo[0] = d
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_GET(r) (r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_ADDRESSf_GET(r) ((r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_lo[0])
#define CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_ADDRESSf_SET(r,f) (r).cmic_fifo_rd_dma_cur_hostmem_write_ptr_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LO.
 */
#define READ_CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_cur_hostmem_write_ptr_lo)
#define WRITE_CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_cur_hostmem_write_ptr_lo)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_OFFSET 0x00011030

#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HI.
 */
typedef union CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_eccerr_address_hi[1];
	uint32_t _cmic_fifo_rd_dma_eccerr_address_hi;
} CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_t;

#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_CLR(r) (r).cmic_fifo_rd_dma_eccerr_address_hi[0] = 0
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_SET(r,d) (r).cmic_fifo_rd_dma_eccerr_address_hi[0] = d
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_GET(r) (r).cmic_fifo_rd_dma_eccerr_address_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_ADDRESSf_GET(r) ((r).cmic_fifo_rd_dma_eccerr_address_hi[0])
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_ADDRESSf_SET(r,f) (r).cmic_fifo_rd_dma_eccerr_address_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HI.
 */
#define READ_CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_eccerr_address_hi)
#define WRITE_CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_eccerr_address_hi)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_OFFSET 0x0001102c

#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LO.
 */
typedef union CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_eccerr_address_lo[1];
	uint32_t _cmic_fifo_rd_dma_eccerr_address_lo;
} CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_t;

#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_CLR(r) (r).cmic_fifo_rd_dma_eccerr_address_lo[0] = 0
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_SET(r,d) (r).cmic_fifo_rd_dma_eccerr_address_lo[0] = d
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_GET(r) (r).cmic_fifo_rd_dma_eccerr_address_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_ADDRESSf_GET(r) ((r).cmic_fifo_rd_dma_eccerr_address_lo[0])
#define CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_ADDRESSf_SET(r,f) (r).cmic_fifo_rd_dma_eccerr_address_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LO.
 */
#define READ_CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_eccerr_address_lo)
#define WRITE_CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_eccerr_address_lo)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_ECCERR_ADDRESS_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_ECC_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_OFFSET 0x00011034

#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_ECC_CONTROL.
 */
typedef union CMIC_FIFO_RD_DMA_ECC_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_ecc_control[1];
	uint32_t _cmic_fifo_rd_dma_ecc_control;
} CMIC_FIFO_RD_DMA_ECC_CONTROLr_t;

#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_CLR(r) (r).cmic_fifo_rd_dma_ecc_control[0] = 0
#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_SET(r,d) (r).cmic_fifo_rd_dma_ecc_control[0] = d
#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_GET(r) (r).cmic_fifo_rd_dma_ecc_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_INJECT_1BIT_ERR_IN_HOSTRD_MEMf_GET(r) (((r).cmic_fifo_rd_dma_ecc_control[0]) & 0x1)
#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_INJECT_1BIT_ERR_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_fifo_rd_dma_ecc_control[0]=(((r).cmic_fifo_rd_dma_ecc_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_INJECT_2BIT_ERR_IN_HOSTRD_MEMf_GET(r) ((((r).cmic_fifo_rd_dma_ecc_control[0]) >> 1) & 0x1)
#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_INJECT_2BIT_ERR_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_fifo_rd_dma_ecc_control[0]=(((r).cmic_fifo_rd_dma_ecc_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_DISABLE_ECC_LOGIC_HOSTRD_MEMf_GET(r) ((((r).cmic_fifo_rd_dma_ecc_control[0]) >> 2) & 0x1)
#define CMIC_FIFO_RD_DMA_ECC_CONTROLr_DISABLE_ECC_LOGIC_HOSTRD_MEMf_SET(r,f) (r).cmic_fifo_rd_dma_ecc_control[0]=(((r).cmic_fifo_rd_dma_ecc_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_ECC_CONTROL.
 */
#define READ_CMIC_FIFO_RD_DMA_ECC_CONTROLr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_ECC_CONTROLr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_ecc_control)
#define WRITE_CMIC_FIFO_RD_DMA_ECC_CONTROLr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_ECC_CONTROLr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_ecc_control)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_ECC_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_OFFSET 0x00011038

#define CMIC_FIFO_RD_DMA_ECC_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_ECC_STATUS.
 */
typedef union CMIC_FIFO_RD_DMA_ECC_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_ecc_status[1];
	uint32_t _cmic_fifo_rd_dma_ecc_status;
} CMIC_FIFO_RD_DMA_ECC_STATUSr_t;

#define CMIC_FIFO_RD_DMA_ECC_STATUSr_CLR(r) (r).cmic_fifo_rd_dma_ecc_status[0] = 0
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_SET(r,d) (r).cmic_fifo_rd_dma_ecc_status[0] = d
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_GET(r) (r).cmic_fifo_rd_dma_ecc_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_SINGLE_BIT_ERR_DETECTED_IN_HOSTRD_MEMf_GET(r) (((r).cmic_fifo_rd_dma_ecc_status[0]) & 0x1)
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_SINGLE_BIT_ERR_DETECTED_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_fifo_rd_dma_ecc_status[0]=(((r).cmic_fifo_rd_dma_ecc_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_DOUBLE_BIT_ERR_DETECTED_IN_HOSTRD_MEMf_GET(r) ((((r).cmic_fifo_rd_dma_ecc_status[0]) >> 1) & 0x1)
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_DOUBLE_BIT_ERR_DETECTED_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_fifo_rd_dma_ecc_status[0]=(((r).cmic_fifo_rd_dma_ecc_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_MULTIPLE_ERR_DETECTED_IN_HOSTRD_MEMf_GET(r) ((((r).cmic_fifo_rd_dma_ecc_status[0]) >> 2) & 0x1)
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_MULTIPLE_ERR_DETECTED_IN_HOSTRD_MEMf_SET(r,f) (r).cmic_fifo_rd_dma_ecc_status[0]=(((r).cmic_fifo_rd_dma_ecc_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_FIRST_ERR_ADDRESS_OF_HOSTRD_MEMf_GET(r) ((((r).cmic_fifo_rd_dma_ecc_status[0]) >> 9) & 0xf)
#define CMIC_FIFO_RD_DMA_ECC_STATUSr_FIRST_ERR_ADDRESS_OF_HOSTRD_MEMf_SET(r,f) (r).cmic_fifo_rd_dma_ecc_status[0]=(((r).cmic_fifo_rd_dma_ecc_status[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_ECC_STATUS.
 */
#define READ_CMIC_FIFO_RD_DMA_ECC_STATUSr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_ECC_STATUSr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_ecc_status)
#define WRITE_CMIC_FIFO_RD_DMA_ECC_STATUSr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_ECC_STATUSr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_ecc_status)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_ECC_STATUS_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_OFFSET 0x0001103c

#define CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_ECC_STATUS_CLR.
 */
typedef union CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_ecc_status_clr[1];
	uint32_t _cmic_fifo_rd_dma_ecc_status_clr;
} CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_t;

#define CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_CLR(r) (r).cmic_fifo_rd_dma_ecc_status_clr[0] = 0
#define CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_SET(r,d) (r).cmic_fifo_rd_dma_ecc_status_clr[0] = d
#define CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_GET(r) (r).cmic_fifo_rd_dma_ecc_status_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_CLEAR_HOSTRD_MEMf_GET(r) (((r).cmic_fifo_rd_dma_ecc_status_clr[0]) & 0x1)
#define CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_CLEAR_HOSTRD_MEMf_SET(r,f) (r).cmic_fifo_rd_dma_ecc_status_clr[0]=(((r).cmic_fifo_rd_dma_ecc_status_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_ECC_STATUS_CLR.
 */
#define READ_CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_ecc_status_clr)
#define WRITE_CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_ecc_status_clr)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_ECC_STATUS_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_OFFSET 0x00011010

#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HI.
 */
typedef union CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_hostmem_start_address_hi[1];
	uint32_t _cmic_fifo_rd_dma_hostmem_start_address_hi;
} CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_t;

#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_CLR(r) (r).cmic_fifo_rd_dma_hostmem_start_address_hi[0] = 0
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_SET(r,d) (r).cmic_fifo_rd_dma_hostmem_start_address_hi[0] = d
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_GET(r) (r).cmic_fifo_rd_dma_hostmem_start_address_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_ADDRESSf_GET(r) ((r).cmic_fifo_rd_dma_hostmem_start_address_hi[0])
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_ADDRESSf_SET(r,f) (r).cmic_fifo_rd_dma_hostmem_start_address_hi[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HI.
 */
#define READ_CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_hostmem_start_address_hi)
#define WRITE_CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_hostmem_start_address_hi)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_OFFSET 0x0001100c

#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LO.
 */
typedef union CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_hostmem_start_address_lo[1];
	uint32_t _cmic_fifo_rd_dma_hostmem_start_address_lo;
} CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_t;

#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_CLR(r) (r).cmic_fifo_rd_dma_hostmem_start_address_lo[0] = 0
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_SET(r,d) (r).cmic_fifo_rd_dma_hostmem_start_address_lo[0] = d
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_GET(r) (r).cmic_fifo_rd_dma_hostmem_start_address_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_ADDRESSf_GET(r) ((r).cmic_fifo_rd_dma_hostmem_start_address_lo[0])
#define CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_ADDRESSf_SET(r,f) (r).cmic_fifo_rd_dma_hostmem_start_address_lo[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LO.
 */
#define READ_CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_hostmem_start_address_lo)
#define WRITE_CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_hostmem_start_address_lo)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x0001101c

#define CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_fifo_rd_dma_hostmem_threshold;
} CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_fifo_rd_dma_hostmem_threshold[0] = 0
#define CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_fifo_rd_dma_hostmem_threshold[0] = d
#define CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_fifo_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_fifo_rd_dma_hostmem_threshold[0])
#define CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_fifo_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLD.
 */
#define READ_CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_hostmem_threshold)
#define WRITE_CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_hostmem_threshold)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x00011014

#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_WR_NUMBER_OF_ENTRIESf_GET(r) ((((r).cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]) >> 17) & 0x1)
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_WR_NUMBER_OF_ENTRIESf_SET(r,f) (r).cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
#define READ_CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem)
#define WRITE_CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_num_of_entries_read_frm_hostmem)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x00011018

#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
#define READ_CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem)
#define WRITE_CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_num_of_entries_valid_in_hostmem)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_OPCODEr_OFFSET 0x00011028

#define CMIC_FIFO_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_OPCODE.
 */
typedef union CMIC_FIFO_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_opcode[1];
	uint32_t _cmic_fifo_rd_dma_opcode;
} CMIC_FIFO_RD_DMA_OPCODEr_t;

#define CMIC_FIFO_RD_DMA_OPCODEr_CLR(r) (r).cmic_fifo_rd_dma_opcode[0] = 0
#define CMIC_FIFO_RD_DMA_OPCODEr_SET(r,d) (r).cmic_fifo_rd_dma_opcode[0] = d
#define CMIC_FIFO_RD_DMA_OPCODEr_GET(r) (r).cmic_fifo_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_fifo_rd_dma_opcode[0])
#define CMIC_FIFO_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_fifo_rd_dma_opcode[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_OPCODE.
 */
#define READ_CMIC_FIFO_RD_DMA_OPCODEr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_OPCODEr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_opcode)
#define WRITE_CMIC_FIFO_RD_DMA_OPCODEr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_OPCODEr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_opcode)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x00011008

#define CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_sbus_start_address[1];
	uint32_t _cmic_fifo_rd_dma_sbus_start_address;
} CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_fifo_rd_dma_sbus_start_address[0] = 0
#define CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_fifo_rd_dma_sbus_start_address[0] = d
#define CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_fifo_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_fifo_rd_dma_sbus_start_address[0])
#define CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_fifo_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_SBUS_START_ADDRESS.
 */
#define READ_CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_sbus_start_address)
#define WRITE_CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_sbus_start_address)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_STATr_OFFSET 0x00011020

#define CMIC_FIFO_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_STAT.
 */
typedef union CMIC_FIFO_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_stat[1];
	uint32_t _cmic_fifo_rd_dma_stat;
} CMIC_FIFO_RD_DMA_STATr_t;

#define CMIC_FIFO_RD_DMA_STATr_CLR(r) (r).cmic_fifo_rd_dma_stat[0] = 0
#define CMIC_FIFO_RD_DMA_STATr_SET(r,d) (r).cmic_fifo_rd_dma_stat[0] = d
#define CMIC_FIFO_RD_DMA_STATr_GET(r) (r).cmic_fifo_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_fifo_rd_dma_stat[0]) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_FIFO_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_FIFO_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_FIFO_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_FIFO_RD_DMA_STATr_ABORTEDf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_ABORTEDf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_FIFO_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_FIFO_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_fifo_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_FIFO_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_fifo_rd_dma_stat[0]=(((r).cmic_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_STAT.
 */
#define READ_CMIC_FIFO_RD_DMA_STATr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_STATr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_stat)
#define WRITE_CMIC_FIFO_RD_DMA_STATr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_STATr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_stat)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_STAT_CLRr_OFFSET 0x00011024

#define CMIC_FIFO_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_STAT_CLR.
 */
typedef union CMIC_FIFO_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_stat_clr[1];
	uint32_t _cmic_fifo_rd_dma_stat_clr;
} CMIC_FIFO_RD_DMA_STAT_CLRr_t;

#define CMIC_FIFO_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_fifo_rd_dma_stat_clr[0] = 0
#define CMIC_FIFO_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_fifo_rd_dma_stat_clr[0] = d
#define CMIC_FIFO_RD_DMA_STAT_CLRr_GET(r) (r).cmic_fifo_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_fifo_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_fifo_rd_dma_stat_clr[0]=(((r).cmic_fifo_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_fifo_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_fifo_rd_dma_stat_clr[0]=(((r).cmic_fifo_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_FIFO_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_fifo_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_FIFO_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_fifo_rd_dma_stat_clr[0]=(((r).cmic_fifo_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_STAT_CLR.
 */
#define READ_CMIC_FIFO_RD_DMA_STAT_CLRr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_STAT_CLRr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_stat_clr)
#define WRITE_CMIC_FIFO_RD_DMA_STAT_CLRr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_STAT_CLRr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_stat_clr)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FIFO_RD_DMA_TM_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FIFO_RD_DMA_TM_CONTROLr_OFFSET 0x00011040

#define CMIC_FIFO_RD_DMA_TM_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FIFO_RD_DMA_TM_CONTROL.
 */
typedef union CMIC_FIFO_RD_DMA_TM_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_fifo_rd_dma_tm_control[1];
	uint32_t _cmic_fifo_rd_dma_tm_control;
} CMIC_FIFO_RD_DMA_TM_CONTROLr_t;

#define CMIC_FIFO_RD_DMA_TM_CONTROLr_CLR(r) (r).cmic_fifo_rd_dma_tm_control[0] = 0
#define CMIC_FIFO_RD_DMA_TM_CONTROLr_SET(r,d) (r).cmic_fifo_rd_dma_tm_control[0] = d
#define CMIC_FIFO_RD_DMA_TM_CONTROLr_GET(r) (r).cmic_fifo_rd_dma_tm_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FIFO_RD_DMA_TM_CONTROLr_TM_HOSTRD_MEMf_GET(r) (((r).cmic_fifo_rd_dma_tm_control[0]) & 0x1f)
#define CMIC_FIFO_RD_DMA_TM_CONTROLr_TM_HOSTRD_MEMf_SET(r,f) (r).cmic_fifo_rd_dma_tm_control[0]=(((r).cmic_fifo_rd_dma_tm_control[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access CMIC_FIFO_RD_DMA_TM_CONTROL.
 */
#define READ_CMIC_FIFO_RD_DMA_TM_CONTROLr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_FIFO_RD_DMA_TM_CONTROLr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_tm_control)
#define WRITE_CMIC_FIFO_RD_DMA_TM_CONTROLr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_FIFO_RD_DMA_TM_CONTROLr_OFFSET+(0x80*(_ch)),r._cmic_fifo_rd_dma_tm_control)

/*******************************************************************************
 * End of 'CMIC_FIFO_RD_DMA_TM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHANFIFO_COMMAND_MEMORY
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHANFIFO_COMMAND_MEMORYr_OFFSET 0x00012100

#define CMIC_SCHANFIFO_COMMAND_MEMORYr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHANFIFO_COMMAND_MEMORY.
 */
typedef union CMIC_SCHANFIFO_COMMAND_MEMORYr_s {
	uint32_t v[1];
	uint32_t cmic_schanfifo_command_memory[1];
	uint32_t _cmic_schanfifo_command_memory;
} CMIC_SCHANFIFO_COMMAND_MEMORYr_t;

#define CMIC_SCHANFIFO_COMMAND_MEMORYr_CLR(r) (r).cmic_schanfifo_command_memory[0] = 0
#define CMIC_SCHANFIFO_COMMAND_MEMORYr_SET(r,d) (r).cmic_schanfifo_command_memory[0] = d
#define CMIC_SCHANFIFO_COMMAND_MEMORYr_GET(r) (r).cmic_schanfifo_command_memory[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHANFIFO_COMMAND_MEMORYr_OPCODE_OR_ADDR_OR_DATAf_GET(r) ((r).cmic_schanfifo_command_memory[0])
#define CMIC_SCHANFIFO_COMMAND_MEMORYr_OPCODE_OR_ADDR_OR_DATAf_SET(r,f) (r).cmic_schanfifo_command_memory[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_SCHANFIFO_COMMAND_MEMORY.
 */
#define READ_CMIC_SCHANFIFO_COMMAND_MEMORYr(u,_ch,i,r) BCMDRD_DEV_READ32(u,CMIC_SCHANFIFO_COMMAND_MEMORYr_OFFSET+(4*(i))+(0x580*(_ch)),r._cmic_schanfifo_command_memory)
#define WRITE_CMIC_SCHANFIFO_COMMAND_MEMORYr(u,_ch,i,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHANFIFO_COMMAND_MEMORYr_OFFSET+(4*(i))+(0x580*(_ch)),r._cmic_schanfifo_command_memory)

/*******************************************************************************
 * End of 'CMIC_SCHANFIFO_COMMAND_MEMORYr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHANFIFO_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHANFIFO_CTRLr_OFFSET 0x0001200c

#define CMIC_SCHANFIFO_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHANFIFO_CTRL.
 */
typedef union CMIC_SCHANFIFO_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_schanfifo_ctrl[1];
	uint32_t _cmic_schanfifo_ctrl;
} CMIC_SCHANFIFO_CTRLr_t;

#define CMIC_SCHANFIFO_CTRLr_CLR(r) (r).cmic_schanfifo_ctrl[0] = 0
#define CMIC_SCHANFIFO_CTRLr_SET(r,d) (r).cmic_schanfifo_ctrl[0] = d
#define CMIC_SCHANFIFO_CTRLr_GET(r) (r).cmic_schanfifo_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHANFIFO_CTRLr_STARTf_GET(r) (((r).cmic_schanfifo_ctrl[0]) & 0x1)
#define CMIC_SCHANFIFO_CTRLr_STARTf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_SCHANFIFO_CTRLr_ABORTf_GET(r) ((((r).cmic_schanfifo_ctrl[0]) >> 1) & 0x1)
#define CMIC_SCHANFIFO_CTRLr_ABORTf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_SCHANFIFO_CTRLr_NUMB_OF_COMMANDSf_GET(r) ((((r).cmic_schanfifo_ctrl[0]) >> 2) & 0xff)
#define CMIC_SCHANFIFO_CTRLr_NUMB_OF_COMMANDSf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0xff << 2)) | ((((uint32_t)f) & 0xff) << 2))
#define CMIC_SCHANFIFO_CTRLr_RESPONSE_ENDIANESSf_GET(r) ((((r).cmic_schanfifo_ctrl[0]) >> 10) & 0x1)
#define CMIC_SCHANFIFO_CTRLr_RESPONSE_ENDIANESSf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_SCHANFIFO_CTRLr_SUMMARY_ENDIANESSf_GET(r) ((((r).cmic_schanfifo_ctrl[0]) >> 11) & 0x1)
#define CMIC_SCHANFIFO_CTRLr_SUMMARY_ENDIANESSf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_SCHANFIFO_CTRLr_AXI_IDf_GET(r) ((((r).cmic_schanfifo_ctrl[0]) >> 12) & 0x7)
#define CMIC_SCHANFIFO_CTRLr_AXI_IDf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_SCHANFIFO_CTRLr_RESPONSE_WRITE_DISABLEf_GET(r) ((((r).cmic_schanfifo_ctrl[0]) >> 15) & 0x1)
#define CMIC_SCHANFIFO_CTRLr_RESPONSE_WRITE_DISABLEf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_SCHANFIFO_CTRLr_SUMMARY_UPDATE_INTERVALf_GET(r) ((((r).cmic_schanfifo_ctrl[0]) >> 16) & 0x1f)
#define CMIC_SCHANFIFO_CTRLr_SUMMARY_UPDATE_INTERVALf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_SCHANFIFO_CTRLr_ENABLE_RESP_MEM_ECCERR_BASED_ABORTf_GET(r) ((((r).cmic_schanfifo_ctrl[0]) >> 21) & 0x1)
#define CMIC_SCHANFIFO_CTRLr_ENABLE_RESP_MEM_ECCERR_BASED_ABORTf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_SCHANFIFO_CTRLr_DISABLE_SBUS_ERR_BASED_ABORTf_GET(r) ((((r).cmic_schanfifo_ctrl[0]) >> 22) & 0x1)
#define CMIC_SCHANFIFO_CTRLr_DISABLE_SBUS_ERR_BASED_ABORTf_SET(r,f) (r).cmic_schanfifo_ctrl[0]=(((r).cmic_schanfifo_ctrl[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))

/*
 * These macros can be used to access CMIC_SCHANFIFO_CTRL.
 */
#define READ_CMIC_SCHANFIFO_CTRLr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_SCHANFIFO_CTRLr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_ctrl)
#define WRITE_CMIC_SCHANFIFO_CTRLr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHANFIFO_CTRLr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_ctrl)

/*******************************************************************************
 * End of 'CMIC_SCHANFIFO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_OFFSET 0x00012014

#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWER.
 */
typedef union CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_s {
	uint32_t v[1];
	uint32_t cmic_schanfifo_resp_hostmem_start_addr_lower[1];
	uint32_t _cmic_schanfifo_resp_hostmem_start_addr_lower;
} CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_t;

#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_CLR(r) (r).cmic_schanfifo_resp_hostmem_start_addr_lower[0] = 0
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_SET(r,d) (r).cmic_schanfifo_resp_hostmem_start_addr_lower[0] = d
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_GET(r) (r).cmic_schanfifo_resp_hostmem_start_addr_lower[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_ADDRf_GET(r) ((r).cmic_schanfifo_resp_hostmem_start_addr_lower[0])
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_ADDRf_SET(r,f) (r).cmic_schanfifo_resp_hostmem_start_addr_lower[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWER.
 */
#define READ_CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_resp_hostmem_start_addr_lower)
#define WRITE_CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_resp_hostmem_start_addr_lower)

/*******************************************************************************
 * End of 'CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_OFFSET 0x00012010

#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPER.
 */
typedef union CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_s {
	uint32_t v[1];
	uint32_t cmic_schanfifo_resp_hostmem_start_addr_upper[1];
	uint32_t _cmic_schanfifo_resp_hostmem_start_addr_upper;
} CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_t;

#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_CLR(r) (r).cmic_schanfifo_resp_hostmem_start_addr_upper[0] = 0
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_SET(r,d) (r).cmic_schanfifo_resp_hostmem_start_addr_upper[0] = d
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_GET(r) (r).cmic_schanfifo_resp_hostmem_start_addr_upper[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_ADDRf_GET(r) ((r).cmic_schanfifo_resp_hostmem_start_addr_upper[0])
#define CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_ADDRf_SET(r,f) (r).cmic_schanfifo_resp_hostmem_start_addr_upper[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPER.
 */
#define READ_CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_resp_hostmem_start_addr_upper)
#define WRITE_CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_resp_hostmem_start_addr_upper)

/*******************************************************************************
 * End of 'CMIC_SCHANFIFO_RESP_HOSTMEM_START_ADDR_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHANFIFO_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHANFIFO_STATUSr_OFFSET 0x00012020

#define CMIC_SCHANFIFO_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHANFIFO_STATUS.
 */
typedef union CMIC_SCHANFIFO_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_schanfifo_status[1];
	uint32_t _cmic_schanfifo_status;
} CMIC_SCHANFIFO_STATUSr_t;

#define CMIC_SCHANFIFO_STATUSr_CLR(r) (r).cmic_schanfifo_status[0] = 0
#define CMIC_SCHANFIFO_STATUSr_SET(r,d) (r).cmic_schanfifo_status[0] = d
#define CMIC_SCHANFIFO_STATUSr_GET(r) (r).cmic_schanfifo_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHANFIFO_STATUSr_DONEf_GET(r) (((r).cmic_schanfifo_status[0]) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_DONEf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_SCHANFIFO_STATUSr_ERRORf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 1) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERRORf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_SCHANFIFO_STATUSr_ACTIVEf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 2) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ACTIVEf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_SCHANFIFO_STATUSr_CURR_SBUS_CMD_NUMf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 3) & 0xff)
#define CMIC_SCHANFIFO_STATUSr_CURR_SBUS_CMD_NUMf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0xff << 3)) | ((((uint32_t)f) & 0xff) << 3))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_NACKf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 11) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_NACKf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_MESSAGE_ERRf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 12) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_MESSAGE_ERRf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_MESSAGE_ERR_CODEf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 13) & 0x3)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_MESSAGE_ERR_CODEf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_ACK_OPCODE_MISMATCHf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 15) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_ACK_OPCODE_MISMATCHf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_CMD_MEM_ECC_ERRf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 16) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_CMD_MEM_ECC_ERRf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_RESP_MEM_ECC_ERRf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 17) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_RESP_MEM_ECC_ERRf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_CMD_OPCODE_IS_INVALIDf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 18) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_CMD_OPCODE_IS_INVALIDf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_CMD_DLEN_IS_INVALIDf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 19) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_CMD_DLEN_IS_INVALIDf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_SBUS_TIMEOUTf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 20) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_SBUS_TIMEOUTf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_ACK_DATA_BEAT_GT20f_GET(r) ((((r).cmic_schanfifo_status[0]) >> 21) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_ACK_DATA_BEAT_GT20f_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_AXI_RESP_ERRf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 22) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_AXI_RESP_ERRf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_AXI_SLAVE_ABORTf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 23) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_AXI_SLAVE_ABORTf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_SW_ABORTf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 24) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_SW_ABORTf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_CMD_MEM_RD_ACCESS_INVALIDf_GET(r) ((((r).cmic_schanfifo_status[0]) >> 25) & 0x1)
#define CMIC_SCHANFIFO_STATUSr_ERR_TYPE_CMD_MEM_RD_ACCESS_INVALIDf_SET(r,f) (r).cmic_schanfifo_status[0]=(((r).cmic_schanfifo_status[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*
 * These macros can be used to access CMIC_SCHANFIFO_STATUS.
 */
#define READ_CMIC_SCHANFIFO_STATUSr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_SCHANFIFO_STATUSr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_status)
#define WRITE_CMIC_SCHANFIFO_STATUSr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHANFIFO_STATUSr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_status)

/*******************************************************************************
 * End of 'CMIC_SCHANFIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_OFFSET 0x0001201c

#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWER.
 */
typedef union CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_s {
	uint32_t v[1];
	uint32_t cmic_schanfifo_summary_hostmem_start_addr_lower[1];
	uint32_t _cmic_schanfifo_summary_hostmem_start_addr_lower;
} CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_t;

#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_CLR(r) (r).cmic_schanfifo_summary_hostmem_start_addr_lower[0] = 0
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_SET(r,d) (r).cmic_schanfifo_summary_hostmem_start_addr_lower[0] = d
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_GET(r) (r).cmic_schanfifo_summary_hostmem_start_addr_lower[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_ADDRf_GET(r) ((r).cmic_schanfifo_summary_hostmem_start_addr_lower[0])
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_ADDRf_SET(r,f) (r).cmic_schanfifo_summary_hostmem_start_addr_lower[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWER.
 */
#define READ_CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_summary_hostmem_start_addr_lower)
#define WRITE_CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_summary_hostmem_start_addr_lower)

/*******************************************************************************
 * End of 'CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_OFFSET 0x00012018

#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPER.
 */
typedef union CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_s {
	uint32_t v[1];
	uint32_t cmic_schanfifo_summary_hostmem_start_addr_upper[1];
	uint32_t _cmic_schanfifo_summary_hostmem_start_addr_upper;
} CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_t;

#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_CLR(r) (r).cmic_schanfifo_summary_hostmem_start_addr_upper[0] = 0
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_SET(r,d) (r).cmic_schanfifo_summary_hostmem_start_addr_upper[0] = d
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_GET(r) (r).cmic_schanfifo_summary_hostmem_start_addr_upper[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_ADDRf_GET(r) ((r).cmic_schanfifo_summary_hostmem_start_addr_upper[0])
#define CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_ADDRf_SET(r,f) (r).cmic_schanfifo_summary_hostmem_start_addr_upper[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPER.
 */
#define READ_CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_summary_hostmem_start_addr_upper)
#define WRITE_CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr_OFFSET+(0x18*(_ch)),r._cmic_schanfifo_summary_hostmem_start_addr_upper)

/*******************************************************************************
 * End of 'CMIC_SCHANFIFO_SUMMARY_HOSTMEM_START_ADDR_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHAN_ACK_DATA_BEAT_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET 0x00010004

#define CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHAN_ACK_DATA_BEAT_COUNT.
 */
typedef union CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_schan_ack_data_beat_count[1];
	uint32_t _cmic_schan_ack_data_beat_count;
} CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_t;

#define CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_CLR(r) (r).cmic_schan_ack_data_beat_count[0] = 0
#define CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_SET(r,d) (r).cmic_schan_ack_data_beat_count[0] = d
#define CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_GET(r) (r).cmic_schan_ack_data_beat_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_GET(r) (((r).cmic_schan_ack_data_beat_count[0]) & 0x1f)
#define CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_SET(r,f) (r).cmic_schan_ack_data_beat_count[0]=(((r).cmic_schan_ack_data_beat_count[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_GET(r) ((((r).cmic_schan_ack_data_beat_count[0]) >> 5) & 0x7ffffff)
#define CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_SET(r,f) (r).cmic_schan_ack_data_beat_count[0]=(((r).cmic_schan_ack_data_beat_count[0] & ~((uint32_t)0x7ffffff << 5)) | ((((uint32_t)f) & 0x7ffffff) << 5))

/*
 * These macros can be used to access CMIC_SCHAN_ACK_DATA_BEAT_COUNT.
 */
#define READ_CMIC_SCHAN_ACK_DATA_BEAT_COUNTr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET+(0x100*(_ch)),r._cmic_schan_ack_data_beat_count)
#define WRITE_CMIC_SCHAN_ACK_DATA_BEAT_COUNTr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET+(0x100*(_ch)),r._cmic_schan_ack_data_beat_count)

/*******************************************************************************
 * End of 'CMIC_SCHAN_ACK_DATA_BEAT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHAN_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHAN_CTRLr_OFFSET 0x00010000

#define CMIC_SCHAN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHAN_CTRL.
 */
typedef union CMIC_SCHAN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_schan_ctrl[1];
	uint32_t _cmic_schan_ctrl;
} CMIC_SCHAN_CTRLr_t;

#define CMIC_SCHAN_CTRLr_CLR(r) (r).cmic_schan_ctrl[0] = 0
#define CMIC_SCHAN_CTRLr_SET(r,d) (r).cmic_schan_ctrl[0] = d
#define CMIC_SCHAN_CTRLr_GET(r) (r).cmic_schan_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHAN_CTRLr_MSG_STARTf_GET(r) (((r).cmic_schan_ctrl[0]) & 0x1)
#define CMIC_SCHAN_CTRLr_MSG_STARTf_SET(r,f) (r).cmic_schan_ctrl[0]=(((r).cmic_schan_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_SCHAN_CTRLr_MSG_DONEf_GET(r) ((((r).cmic_schan_ctrl[0]) >> 1) & 0x1)
#define CMIC_SCHAN_CTRLr_MSG_DONEf_SET(r,f) (r).cmic_schan_ctrl[0]=(((r).cmic_schan_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_SCHAN_CTRLr_ABORTf_GET(r) ((((r).cmic_schan_ctrl[0]) >> 2) & 0x1)
#define CMIC_SCHAN_CTRLr_ABORTf_SET(r,f) (r).cmic_schan_ctrl[0]=(((r).cmic_schan_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_SCHAN_CTRLr_SER_CHECK_FAILf_GET(r) ((((r).cmic_schan_ctrl[0]) >> 20) & 0x1)
#define CMIC_SCHAN_CTRLr_SER_CHECK_FAILf_SET(r,f) (r).cmic_schan_ctrl[0]=(((r).cmic_schan_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_SCHAN_CTRLr_NACKf_GET(r) ((((r).cmic_schan_ctrl[0]) >> 21) & 0x1)
#define CMIC_SCHAN_CTRLr_NACKf_SET(r,f) (r).cmic_schan_ctrl[0]=(((r).cmic_schan_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_SCHAN_CTRLr_TIMEOUTf_GET(r) ((((r).cmic_schan_ctrl[0]) >> 22) & 0x1)
#define CMIC_SCHAN_CTRLr_TIMEOUTf_SET(r,f) (r).cmic_schan_ctrl[0]=(((r).cmic_schan_ctrl[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_SCHAN_CTRLr_SCHAN_ERRORf_GET(r) ((((r).cmic_schan_ctrl[0]) >> 23) & 0x1)
#define CMIC_SCHAN_CTRLr_SCHAN_ERRORf_SET(r,f) (r).cmic_schan_ctrl[0]=(((r).cmic_schan_ctrl[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))

/*
 * These macros can be used to access CMIC_SCHAN_CTRL.
 */
#define READ_CMIC_SCHAN_CTRLr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_SCHAN_CTRLr_OFFSET+(0x100*(_ch)),r._cmic_schan_ctrl)
#define WRITE_CMIC_SCHAN_CTRLr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHAN_CTRLr_OFFSET+(0x100*(_ch)),r._cmic_schan_ctrl)

/*******************************************************************************
 * End of 'CMIC_SCHAN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHAN_ERR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHAN_ERRr_OFFSET 0x00010008

#define CMIC_SCHAN_ERRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHAN_ERR.
 */
typedef union CMIC_SCHAN_ERRr_s {
	uint32_t v[1];
	uint32_t cmic_schan_err[1];
	uint32_t _cmic_schan_err;
} CMIC_SCHAN_ERRr_t;

#define CMIC_SCHAN_ERRr_CLR(r) (r).cmic_schan_err[0] = 0
#define CMIC_SCHAN_ERRr_SET(r,d) (r).cmic_schan_err[0] = d
#define CMIC_SCHAN_ERRr_GET(r) (r).cmic_schan_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHAN_ERRr_NACKf_GET(r) (((r).cmic_schan_err[0]) & 0x1)
#define CMIC_SCHAN_ERRr_NACKf_SET(r,f) (r).cmic_schan_err[0]=(((r).cmic_schan_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_SCHAN_ERRr_ERR_CODEf_GET(r) ((((r).cmic_schan_err[0]) >> 4) & 0x3)
#define CMIC_SCHAN_ERRr_ERR_CODEf_SET(r,f) (r).cmic_schan_err[0]=(((r).cmic_schan_err[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define CMIC_SCHAN_ERRr_ERRBITf_GET(r) ((((r).cmic_schan_err[0]) >> 6) & 0x1)
#define CMIC_SCHAN_ERRr_ERRBITf_SET(r,f) (r).cmic_schan_err[0]=(((r).cmic_schan_err[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_SCHAN_ERRr_DATA_LENf_GET(r) ((((r).cmic_schan_err[0]) >> 7) & 0x7f)
#define CMIC_SCHAN_ERRr_DATA_LENf_SET(r,f) (r).cmic_schan_err[0]=(((r).cmic_schan_err[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define CMIC_SCHAN_ERRr_SRC_PORTf_GET(r) ((((r).cmic_schan_err[0]) >> 14) & 0x3f)
#define CMIC_SCHAN_ERRr_SRC_PORTf_SET(r,f) (r).cmic_schan_err[0]=(((r).cmic_schan_err[0] & ~((uint32_t)0x3f << 14)) | ((((uint32_t)f) & 0x3f) << 14))
#define CMIC_SCHAN_ERRr_DST_PORTf_GET(r) ((((r).cmic_schan_err[0]) >> 20) & 0x3f)
#define CMIC_SCHAN_ERRr_DST_PORTf_SET(r,f) (r).cmic_schan_err[0]=(((r).cmic_schan_err[0] & ~((uint32_t)0x3f << 20)) | ((((uint32_t)f) & 0x3f) << 20))
#define CMIC_SCHAN_ERRr_OP_CODEf_GET(r) ((((r).cmic_schan_err[0]) >> 26) & 0x3f)
#define CMIC_SCHAN_ERRr_OP_CODEf_SET(r,f) (r).cmic_schan_err[0]=(((r).cmic_schan_err[0] & ~((uint32_t)0x3f << 26)) | ((((uint32_t)f) & 0x3f) << 26))

/*
 * These macros can be used to access CMIC_SCHAN_ERR.
 */
#define READ_CMIC_SCHAN_ERRr(u,_ch,r) BCMDRD_DEV_READ32(u,CMIC_SCHAN_ERRr_OFFSET+(0x100*(_ch)),r._cmic_schan_err)
#define WRITE_CMIC_SCHAN_ERRr(u,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHAN_ERRr_OFFSET+(0x100*(_ch)),r._cmic_schan_err)

/*******************************************************************************
 * End of 'CMIC_SCHAN_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHAN_MESSAGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHAN_MESSAGEr_OFFSET 0x0001000c

#define CMIC_SCHAN_MESSAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHAN_MESSAGE.
 */
typedef union CMIC_SCHAN_MESSAGEr_s {
	uint32_t v[1];
	uint32_t cmic_schan_message[1];
	uint32_t _cmic_schan_message;
} CMIC_SCHAN_MESSAGEr_t;

#define CMIC_SCHAN_MESSAGEr_CLR(r) (r).cmic_schan_message[0] = 0
#define CMIC_SCHAN_MESSAGEr_SET(r,d) (r).cmic_schan_message[0] = d
#define CMIC_SCHAN_MESSAGEr_GET(r) (r).cmic_schan_message[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHAN_MESSAGEr_DATAf_GET(r) ((r).cmic_schan_message[0])
#define CMIC_SCHAN_MESSAGEr_DATAf_SET(r,f) (r).cmic_schan_message[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_SCHAN_MESSAGE.
 */
#define READ_CMIC_SCHAN_MESSAGEr(u,_ch,i,r) BCMDRD_DEV_READ32(u,CMIC_SCHAN_MESSAGEr_OFFSET+(4*(i))+(0x100*(_ch)),r._cmic_schan_message)
#define WRITE_CMIC_SCHAN_MESSAGEr(u,_ch,i,r) BCMDRD_DEV_WRITE32(u,CMIC_SCHAN_MESSAGEr_OFFSET+(4*(i))+(0x100*(_ch)),r._cmic_schan_message)

/*******************************************************************************
 * End of 'CMIC_SCHAN_MESSAGEr'
 */




/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_ENABLE_REG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_ENABLE_REGr_OFFSET 0x03241730

#define ICFG_CHIP_LP_INTR_ENABLE_REGr_SIZE 4

/*
 * This structure should be used to declare and program ICFG_CHIP_LP_INTR_ENABLE_REG.
 */
typedef union ICFG_CHIP_LP_INTR_ENABLE_REGr_s {
	uint32_t v[1];
	uint32_t icfg_chip_lp_intr_enable_reg[1];
	uint32_t _icfg_chip_lp_intr_enable_reg;
} ICFG_CHIP_LP_INTR_ENABLE_REGr_t;

#define ICFG_CHIP_LP_INTR_ENABLE_REGr_CLR(r) (r).icfg_chip_lp_intr_enable_reg[0] = 0
#define ICFG_CHIP_LP_INTR_ENABLE_REGr_SET(r,d) (r).icfg_chip_lp_intr_enable_reg[0] = d
#define ICFG_CHIP_LP_INTR_ENABLE_REGr_GET(r) (r).icfg_chip_lp_intr_enable_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define ICFG_CHIP_LP_INTR_ENABLE_REGr_B31_TO_0f_GET(r) ((r).icfg_chip_lp_intr_enable_reg[0])
#define ICFG_CHIP_LP_INTR_ENABLE_REGr_B31_TO_0f_SET(r,f) (r).icfg_chip_lp_intr_enable_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access ICFG_CHIP_LP_INTR_ENABLE_REG.
 */
#define READ_ICFG_CHIP_LP_INTR_ENABLE_REGr(u,i,r) BCMDRD_IPROC_READ(u,ICFG_CHIP_LP_INTR_ENABLE_REGr_OFFSET+(4*(i)),r._icfg_chip_lp_intr_enable_reg)
#define WRITE_ICFG_CHIP_LP_INTR_ENABLE_REGr(u,i,r) BCMDRD_IPROC_WRITE(u,ICFG_CHIP_LP_INTR_ENABLE_REGr_OFFSET+(4*(i)),r._icfg_chip_lp_intr_enable_reg)

/*******************************************************************************
 * End of 'ICFG_CHIP_LP_INTR_ENABLE_REGr'
 */




/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_ENABLE_REG0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_ENABLE_REG0r_OFFSET 0x03241730

#define ICFG_CHIP_LP_INTR_ENABLE_REG0r_SIZE 4

/* ICFG_CHIP_LP_INTR_ENABLE_REG0r is element of ICFG_CHIP_LP_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_ENABLE_REG1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_ENABLE_REG1r_OFFSET 0x03241734

#define ICFG_CHIP_LP_INTR_ENABLE_REG1r_SIZE 4

/* ICFG_CHIP_LP_INTR_ENABLE_REG1r is element of ICFG_CHIP_LP_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_ENABLE_REG2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_ENABLE_REG2r_OFFSET 0x03241738

#define ICFG_CHIP_LP_INTR_ENABLE_REG2r_SIZE 4

/* ICFG_CHIP_LP_INTR_ENABLE_REG2r is element of ICFG_CHIP_LP_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_ENABLE_REG3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_ENABLE_REG3r_OFFSET 0x0324173c

#define ICFG_CHIP_LP_INTR_ENABLE_REG3r_SIZE 4

/* ICFG_CHIP_LP_INTR_ENABLE_REG3r is element of ICFG_CHIP_LP_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_RAW_STATUS_REG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_OFFSET 0x03241740

#define ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_SIZE 4

/*
 * This structure should be used to declare and program ICFG_CHIP_LP_INTR_RAW_STATUS_REG.
 */
typedef union ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_s {
	uint32_t v[1];
	uint32_t icfg_chip_lp_intr_raw_status_reg[1];
	uint32_t _icfg_chip_lp_intr_raw_status_reg;
} ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_t;

#define ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_CLR(r) (r).icfg_chip_lp_intr_raw_status_reg[0] = 0
#define ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_SET(r,d) (r).icfg_chip_lp_intr_raw_status_reg[0] = d
#define ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_GET(r) (r).icfg_chip_lp_intr_raw_status_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_B31_TO_0f_GET(r) ((r).icfg_chip_lp_intr_raw_status_reg[0])
#define ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_B31_TO_0f_SET(r,f) (r).icfg_chip_lp_intr_raw_status_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access ICFG_CHIP_LP_INTR_RAW_STATUS_REG.
 */
#define READ_ICFG_CHIP_LP_INTR_RAW_STATUS_REGr(u,i,r) BCMDRD_IPROC_READ(u,ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_OFFSET+(4*(i)),r._icfg_chip_lp_intr_raw_status_reg)
#define WRITE_ICFG_CHIP_LP_INTR_RAW_STATUS_REGr(u,i,r) BCMDRD_IPROC_WRITE(u,ICFG_CHIP_LP_INTR_RAW_STATUS_REGr_OFFSET+(4*(i)),r._icfg_chip_lp_intr_raw_status_reg)

/*******************************************************************************
 * End of 'ICFG_CHIP_LP_INTR_RAW_STATUS_REGr'
 */




/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_RAW_STATUS_REG0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_RAW_STATUS_REG0r_OFFSET 0x03241740

#define ICFG_CHIP_LP_INTR_RAW_STATUS_REG0r_SIZE 4

/* ICFG_CHIP_LP_INTR_RAW_STATUS_REG0r is element of ICFG_CHIP_LP_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_RAW_STATUS_REG1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_RAW_STATUS_REG1r_OFFSET 0x03241744

#define ICFG_CHIP_LP_INTR_RAW_STATUS_REG1r_SIZE 4

/* ICFG_CHIP_LP_INTR_RAW_STATUS_REG1r is element of ICFG_CHIP_LP_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_RAW_STATUS_REG2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_RAW_STATUS_REG2r_OFFSET 0x03241748

#define ICFG_CHIP_LP_INTR_RAW_STATUS_REG2r_SIZE 4

/* ICFG_CHIP_LP_INTR_RAW_STATUS_REG2r is element of ICFG_CHIP_LP_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_RAW_STATUS_REG3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_RAW_STATUS_REG3r_OFFSET 0x0324174c

#define ICFG_CHIP_LP_INTR_RAW_STATUS_REG3r_SIZE 4

/* ICFG_CHIP_LP_INTR_RAW_STATUS_REG3r is element of ICFG_CHIP_LP_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_STATUS_REG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_STATUS_REGr_OFFSET 0x03241750

#define ICFG_CHIP_LP_INTR_STATUS_REGr_SIZE 4

/*
 * This structure should be used to declare and program ICFG_CHIP_LP_INTR_STATUS_REG.
 */
typedef union ICFG_CHIP_LP_INTR_STATUS_REGr_s {
	uint32_t v[1];
	uint32_t icfg_chip_lp_intr_status_reg[1];
	uint32_t _icfg_chip_lp_intr_status_reg;
} ICFG_CHIP_LP_INTR_STATUS_REGr_t;

#define ICFG_CHIP_LP_INTR_STATUS_REGr_CLR(r) (r).icfg_chip_lp_intr_status_reg[0] = 0
#define ICFG_CHIP_LP_INTR_STATUS_REGr_SET(r,d) (r).icfg_chip_lp_intr_status_reg[0] = d
#define ICFG_CHIP_LP_INTR_STATUS_REGr_GET(r) (r).icfg_chip_lp_intr_status_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define ICFG_CHIP_LP_INTR_STATUS_REGr_B31_TO_0f_GET(r) ((r).icfg_chip_lp_intr_status_reg[0])
#define ICFG_CHIP_LP_INTR_STATUS_REGr_B31_TO_0f_SET(r,f) (r).icfg_chip_lp_intr_status_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access ICFG_CHIP_LP_INTR_STATUS_REG.
 */
#define READ_ICFG_CHIP_LP_INTR_STATUS_REGr(u,i,r) BCMDRD_IPROC_READ(u,ICFG_CHIP_LP_INTR_STATUS_REGr_OFFSET+(4*(i)),r._icfg_chip_lp_intr_status_reg)
#define WRITE_ICFG_CHIP_LP_INTR_STATUS_REGr(u,i,r) BCMDRD_IPROC_WRITE(u,ICFG_CHIP_LP_INTR_STATUS_REGr_OFFSET+(4*(i)),r._icfg_chip_lp_intr_status_reg)

/*******************************************************************************
 * End of 'ICFG_CHIP_LP_INTR_STATUS_REGr'
 */




/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_STATUS_REG0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_STATUS_REG0r_OFFSET 0x03241750

#define ICFG_CHIP_LP_INTR_STATUS_REG0r_SIZE 4

/* ICFG_CHIP_LP_INTR_STATUS_REG0r is element of ICFG_CHIP_LP_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_STATUS_REG1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_STATUS_REG1r_OFFSET 0x03241754

#define ICFG_CHIP_LP_INTR_STATUS_REG1r_SIZE 4

/* ICFG_CHIP_LP_INTR_STATUS_REG1r is element of ICFG_CHIP_LP_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_STATUS_REG2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_STATUS_REG2r_OFFSET 0x03241758

#define ICFG_CHIP_LP_INTR_STATUS_REG2r_SIZE 4

/* ICFG_CHIP_LP_INTR_STATUS_REG2r is element of ICFG_CHIP_LP_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CHIP_LP_INTR_STATUS_REG3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CHIP_LP_INTR_STATUS_REG3r_OFFSET 0x0324175c

#define ICFG_CHIP_LP_INTR_STATUS_REG3r_SIZE 4

/* ICFG_CHIP_LP_INTR_STATUS_REG3r is element of ICFG_CHIP_LP_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  ICFG_CMIC_RCPU_SW_PROG_INTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_OFFSET 0x032417a0

#define ICFG_CMIC_RCPU_SW_PROG_INTRr_SIZE 4

/*
 * This structure should be used to declare and program ICFG_CMIC_RCPU_SW_PROG_INTR.
 */
typedef union ICFG_CMIC_RCPU_SW_PROG_INTRr_s {
	uint32_t v[1];
	uint32_t icfg_cmic_rcpu_sw_prog_intr[1];
	uint32_t _icfg_cmic_rcpu_sw_prog_intr;
} ICFG_CMIC_RCPU_SW_PROG_INTRr_t;

#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CLR(r) (r).icfg_cmic_rcpu_sw_prog_intr[0] = 0
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_SET(r,d) (r).icfg_cmic_rcpu_sw_prog_intr[0] = d
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_GET(r) (r).icfg_cmic_rcpu_sw_prog_intr[0]

/*
 * These macros can be used to access individual fields.
 */
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_PCIEf_GET(r) (((r).icfg_cmic_rcpu_sw_prog_intr[0]) & 0x1)
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_PCIEf_SET(r,f) (r).icfg_cmic_rcpu_sw_prog_intr[0]=(((r).icfg_cmic_rcpu_sw_prog_intr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_MHOST0f_GET(r) ((((r).icfg_cmic_rcpu_sw_prog_intr[0]) >> 1) & 0x1)
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_MHOST0f_SET(r,f) (r).icfg_cmic_rcpu_sw_prog_intr[0]=(((r).icfg_cmic_rcpu_sw_prog_intr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_MHOST1f_GET(r) ((((r).icfg_cmic_rcpu_sw_prog_intr[0]) >> 2) & 0x1)
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_MHOST1f_SET(r,f) (r).icfg_cmic_rcpu_sw_prog_intr[0]=(((r).icfg_cmic_rcpu_sw_prog_intr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CORTEXM0_U0f_GET(r) ((((r).icfg_cmic_rcpu_sw_prog_intr[0]) >> 8) & 0x1)
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CORTEXM0_U0f_SET(r,f) (r).icfg_cmic_rcpu_sw_prog_intr[0]=(((r).icfg_cmic_rcpu_sw_prog_intr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CORTEXM0_U1f_GET(r) ((((r).icfg_cmic_rcpu_sw_prog_intr[0]) >> 9) & 0x1)
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CORTEXM0_U1f_SET(r,f) (r).icfg_cmic_rcpu_sw_prog_intr[0]=(((r).icfg_cmic_rcpu_sw_prog_intr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CORTEXM0_U2f_GET(r) ((((r).icfg_cmic_rcpu_sw_prog_intr[0]) >> 10) & 0x1)
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CORTEXM0_U2f_SET(r,f) (r).icfg_cmic_rcpu_sw_prog_intr[0]=(((r).icfg_cmic_rcpu_sw_prog_intr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CORTEXM0_U3f_GET(r) ((((r).icfg_cmic_rcpu_sw_prog_intr[0]) >> 11) & 0x1)
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CORTEXM0_U3f_SET(r,f) (r).icfg_cmic_rcpu_sw_prog_intr[0]=(((r).icfg_cmic_rcpu_sw_prog_intr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CMIC_RCPUf_GET(r) ((((r).icfg_cmic_rcpu_sw_prog_intr[0]) >> 12) & 0x1)
#define ICFG_CMIC_RCPU_SW_PROG_INTRr_CMIC_RCPUf_SET(r,f) (r).icfg_cmic_rcpu_sw_prog_intr[0]=(((r).icfg_cmic_rcpu_sw_prog_intr[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*
 * These macros can be used to access ICFG_CMIC_RCPU_SW_PROG_INTR.
 */
#define READ_ICFG_CMIC_RCPU_SW_PROG_INTRr(u,r) BCMDRD_IPROC_READ(u,ICFG_CMIC_RCPU_SW_PROG_INTRr_OFFSET,r._icfg_cmic_rcpu_sw_prog_intr)
#define WRITE_ICFG_CMIC_RCPU_SW_PROG_INTRr(u,r) BCMDRD_IPROC_WRITE(u,ICFG_CMIC_RCPU_SW_PROG_INTRr_OFFSET,r._icfg_cmic_rcpu_sw_prog_intr)

/*******************************************************************************
 * End of 'ICFG_CMIC_RCPU_SW_PROG_INTRr'
 */




/*******************************************************************************
 * REGISTER:  ICFG_MHOST0_SW_PROG_INTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_MHOST0_SW_PROG_INTRr_OFFSET 0x03241788

#define ICFG_MHOST0_SW_PROG_INTRr_SIZE 4

/*
 * This structure should be used to declare and program ICFG_MHOST0_SW_PROG_INTR.
 */
typedef union ICFG_MHOST0_SW_PROG_INTRr_s {
	uint32_t v[1];
	uint32_t icfg_mhost0_sw_prog_intr[1];
	uint32_t _icfg_mhost0_sw_prog_intr;
} ICFG_MHOST0_SW_PROG_INTRr_t;

#define ICFG_MHOST0_SW_PROG_INTRr_CLR(r) (r).icfg_mhost0_sw_prog_intr[0] = 0
#define ICFG_MHOST0_SW_PROG_INTRr_SET(r,d) (r).icfg_mhost0_sw_prog_intr[0] = d
#define ICFG_MHOST0_SW_PROG_INTRr_GET(r) (r).icfg_mhost0_sw_prog_intr[0]

/*
 * These macros can be used to access individual fields.
 */
#define ICFG_MHOST0_SW_PROG_INTRr_PCIEf_GET(r) (((r).icfg_mhost0_sw_prog_intr[0]) & 0x1)
#define ICFG_MHOST0_SW_PROG_INTRr_PCIEf_SET(r,f) (r).icfg_mhost0_sw_prog_intr[0]=(((r).icfg_mhost0_sw_prog_intr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define ICFG_MHOST0_SW_PROG_INTRr_MHOST0f_GET(r) ((((r).icfg_mhost0_sw_prog_intr[0]) >> 1) & 0x1)
#define ICFG_MHOST0_SW_PROG_INTRr_MHOST0f_SET(r,f) (r).icfg_mhost0_sw_prog_intr[0]=(((r).icfg_mhost0_sw_prog_intr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define ICFG_MHOST0_SW_PROG_INTRr_MHOST1f_GET(r) ((((r).icfg_mhost0_sw_prog_intr[0]) >> 2) & 0x1)
#define ICFG_MHOST0_SW_PROG_INTRr_MHOST1f_SET(r,f) (r).icfg_mhost0_sw_prog_intr[0]=(((r).icfg_mhost0_sw_prog_intr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define ICFG_MHOST0_SW_PROG_INTRr_CORTEXM0_U0f_GET(r) ((((r).icfg_mhost0_sw_prog_intr[0]) >> 8) & 0x1)
#define ICFG_MHOST0_SW_PROG_INTRr_CORTEXM0_U0f_SET(r,f) (r).icfg_mhost0_sw_prog_intr[0]=(((r).icfg_mhost0_sw_prog_intr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define ICFG_MHOST0_SW_PROG_INTRr_CORTEXM0_U1f_GET(r) ((((r).icfg_mhost0_sw_prog_intr[0]) >> 9) & 0x1)
#define ICFG_MHOST0_SW_PROG_INTRr_CORTEXM0_U1f_SET(r,f) (r).icfg_mhost0_sw_prog_intr[0]=(((r).icfg_mhost0_sw_prog_intr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define ICFG_MHOST0_SW_PROG_INTRr_CORTEXM0_U2f_GET(r) ((((r).icfg_mhost0_sw_prog_intr[0]) >> 10) & 0x1)
#define ICFG_MHOST0_SW_PROG_INTRr_CORTEXM0_U2f_SET(r,f) (r).icfg_mhost0_sw_prog_intr[0]=(((r).icfg_mhost0_sw_prog_intr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define ICFG_MHOST0_SW_PROG_INTRr_CORTEXM0_U3f_GET(r) ((((r).icfg_mhost0_sw_prog_intr[0]) >> 11) & 0x1)
#define ICFG_MHOST0_SW_PROG_INTRr_CORTEXM0_U3f_SET(r,f) (r).icfg_mhost0_sw_prog_intr[0]=(((r).icfg_mhost0_sw_prog_intr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define ICFG_MHOST0_SW_PROG_INTRr_CMIC_RCPUf_GET(r) ((((r).icfg_mhost0_sw_prog_intr[0]) >> 12) & 0x1)
#define ICFG_MHOST0_SW_PROG_INTRr_CMIC_RCPUf_SET(r,f) (r).icfg_mhost0_sw_prog_intr[0]=(((r).icfg_mhost0_sw_prog_intr[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*
 * These macros can be used to access ICFG_MHOST0_SW_PROG_INTR.
 */
#define READ_ICFG_MHOST0_SW_PROG_INTRr(u,r) BCMDRD_IPROC_READ(u,ICFG_MHOST0_SW_PROG_INTRr_OFFSET,r._icfg_mhost0_sw_prog_intr)
#define WRITE_ICFG_MHOST0_SW_PROG_INTRr(u,r) BCMDRD_IPROC_WRITE(u,ICFG_MHOST0_SW_PROG_INTRr_OFFSET,r._icfg_mhost0_sw_prog_intr)

/*******************************************************************************
 * End of 'ICFG_MHOST0_SW_PROG_INTRr'
 */




/*******************************************************************************
 * REGISTER:  ICFG_MHOST1_SW_PROG_INTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_MHOST1_SW_PROG_INTRr_OFFSET 0x0324178c

#define ICFG_MHOST1_SW_PROG_INTRr_SIZE 4

/*
 * This structure should be used to declare and program ICFG_MHOST1_SW_PROG_INTR.
 */
typedef union ICFG_MHOST1_SW_PROG_INTRr_s {
	uint32_t v[1];
	uint32_t icfg_mhost1_sw_prog_intr[1];
	uint32_t _icfg_mhost1_sw_prog_intr;
} ICFG_MHOST1_SW_PROG_INTRr_t;

#define ICFG_MHOST1_SW_PROG_INTRr_CLR(r) (r).icfg_mhost1_sw_prog_intr[0] = 0
#define ICFG_MHOST1_SW_PROG_INTRr_SET(r,d) (r).icfg_mhost1_sw_prog_intr[0] = d
#define ICFG_MHOST1_SW_PROG_INTRr_GET(r) (r).icfg_mhost1_sw_prog_intr[0]

/*
 * These macros can be used to access individual fields.
 */
#define ICFG_MHOST1_SW_PROG_INTRr_PCIEf_GET(r) (((r).icfg_mhost1_sw_prog_intr[0]) & 0x1)
#define ICFG_MHOST1_SW_PROG_INTRr_PCIEf_SET(r,f) (r).icfg_mhost1_sw_prog_intr[0]=(((r).icfg_mhost1_sw_prog_intr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define ICFG_MHOST1_SW_PROG_INTRr_MHOST0f_GET(r) ((((r).icfg_mhost1_sw_prog_intr[0]) >> 1) & 0x1)
#define ICFG_MHOST1_SW_PROG_INTRr_MHOST0f_SET(r,f) (r).icfg_mhost1_sw_prog_intr[0]=(((r).icfg_mhost1_sw_prog_intr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define ICFG_MHOST1_SW_PROG_INTRr_MHOST1f_GET(r) ((((r).icfg_mhost1_sw_prog_intr[0]) >> 2) & 0x1)
#define ICFG_MHOST1_SW_PROG_INTRr_MHOST1f_SET(r,f) (r).icfg_mhost1_sw_prog_intr[0]=(((r).icfg_mhost1_sw_prog_intr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define ICFG_MHOST1_SW_PROG_INTRr_CORTEXM0_U0f_GET(r) ((((r).icfg_mhost1_sw_prog_intr[0]) >> 8) & 0x1)
#define ICFG_MHOST1_SW_PROG_INTRr_CORTEXM0_U0f_SET(r,f) (r).icfg_mhost1_sw_prog_intr[0]=(((r).icfg_mhost1_sw_prog_intr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define ICFG_MHOST1_SW_PROG_INTRr_CORTEXM0_U1f_GET(r) ((((r).icfg_mhost1_sw_prog_intr[0]) >> 9) & 0x1)
#define ICFG_MHOST1_SW_PROG_INTRr_CORTEXM0_U1f_SET(r,f) (r).icfg_mhost1_sw_prog_intr[0]=(((r).icfg_mhost1_sw_prog_intr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define ICFG_MHOST1_SW_PROG_INTRr_CORTEXM0_U2f_GET(r) ((((r).icfg_mhost1_sw_prog_intr[0]) >> 10) & 0x1)
#define ICFG_MHOST1_SW_PROG_INTRr_CORTEXM0_U2f_SET(r,f) (r).icfg_mhost1_sw_prog_intr[0]=(((r).icfg_mhost1_sw_prog_intr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define ICFG_MHOST1_SW_PROG_INTRr_CORTEXM0_U3f_GET(r) ((((r).icfg_mhost1_sw_prog_intr[0]) >> 11) & 0x1)
#define ICFG_MHOST1_SW_PROG_INTRr_CORTEXM0_U3f_SET(r,f) (r).icfg_mhost1_sw_prog_intr[0]=(((r).icfg_mhost1_sw_prog_intr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define ICFG_MHOST1_SW_PROG_INTRr_CMIC_RCPUf_GET(r) ((((r).icfg_mhost1_sw_prog_intr[0]) >> 12) & 0x1)
#define ICFG_MHOST1_SW_PROG_INTRr_CMIC_RCPUf_SET(r,f) (r).icfg_mhost1_sw_prog_intr[0]=(((r).icfg_mhost1_sw_prog_intr[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*
 * These macros can be used to access ICFG_MHOST1_SW_PROG_INTR.
 */
#define READ_ICFG_MHOST1_SW_PROG_INTRr(u,r) BCMDRD_IPROC_READ(u,ICFG_MHOST1_SW_PROG_INTRr_OFFSET,r._icfg_mhost1_sw_prog_intr)
#define WRITE_ICFG_MHOST1_SW_PROG_INTRr(u,r) BCMDRD_IPROC_WRITE(u,ICFG_MHOST1_SW_PROG_INTRr_OFFSET,r._icfg_mhost1_sw_prog_intr)

/*******************************************************************************
 * End of 'ICFG_MHOST1_SW_PROG_INTRr'
 */




/*******************************************************************************
 * REGISTER:  ICFG_PCIE_SW_PROG_INTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define ICFG_PCIE_SW_PROG_INTRr_OFFSET 0x03241784

#define ICFG_PCIE_SW_PROG_INTRr_SIZE 4

/*
 * This structure should be used to declare and program ICFG_PCIE_SW_PROG_INTR.
 */
typedef union ICFG_PCIE_SW_PROG_INTRr_s {
	uint32_t v[1];
	uint32_t icfg_pcie_sw_prog_intr[1];
	uint32_t _icfg_pcie_sw_prog_intr;
} ICFG_PCIE_SW_PROG_INTRr_t;

#define ICFG_PCIE_SW_PROG_INTRr_CLR(r) (r).icfg_pcie_sw_prog_intr[0] = 0
#define ICFG_PCIE_SW_PROG_INTRr_SET(r,d) (r).icfg_pcie_sw_prog_intr[0] = d
#define ICFG_PCIE_SW_PROG_INTRr_GET(r) (r).icfg_pcie_sw_prog_intr[0]

/*
 * These macros can be used to access individual fields.
 */
#define ICFG_PCIE_SW_PROG_INTRr_PCIEf_GET(r) (((r).icfg_pcie_sw_prog_intr[0]) & 0x1)
#define ICFG_PCIE_SW_PROG_INTRr_PCIEf_SET(r,f) (r).icfg_pcie_sw_prog_intr[0]=(((r).icfg_pcie_sw_prog_intr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define ICFG_PCIE_SW_PROG_INTRr_MHOST0f_GET(r) ((((r).icfg_pcie_sw_prog_intr[0]) >> 1) & 0x1)
#define ICFG_PCIE_SW_PROG_INTRr_MHOST0f_SET(r,f) (r).icfg_pcie_sw_prog_intr[0]=(((r).icfg_pcie_sw_prog_intr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define ICFG_PCIE_SW_PROG_INTRr_MHOST1f_GET(r) ((((r).icfg_pcie_sw_prog_intr[0]) >> 2) & 0x1)
#define ICFG_PCIE_SW_PROG_INTRr_MHOST1f_SET(r,f) (r).icfg_pcie_sw_prog_intr[0]=(((r).icfg_pcie_sw_prog_intr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define ICFG_PCIE_SW_PROG_INTRr_CORTEXM0_U0f_GET(r) ((((r).icfg_pcie_sw_prog_intr[0]) >> 8) & 0x1)
#define ICFG_PCIE_SW_PROG_INTRr_CORTEXM0_U0f_SET(r,f) (r).icfg_pcie_sw_prog_intr[0]=(((r).icfg_pcie_sw_prog_intr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define ICFG_PCIE_SW_PROG_INTRr_CORTEXM0_U1f_GET(r) ((((r).icfg_pcie_sw_prog_intr[0]) >> 9) & 0x1)
#define ICFG_PCIE_SW_PROG_INTRr_CORTEXM0_U1f_SET(r,f) (r).icfg_pcie_sw_prog_intr[0]=(((r).icfg_pcie_sw_prog_intr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define ICFG_PCIE_SW_PROG_INTRr_CORTEXM0_U2f_GET(r) ((((r).icfg_pcie_sw_prog_intr[0]) >> 10) & 0x1)
#define ICFG_PCIE_SW_PROG_INTRr_CORTEXM0_U2f_SET(r,f) (r).icfg_pcie_sw_prog_intr[0]=(((r).icfg_pcie_sw_prog_intr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define ICFG_PCIE_SW_PROG_INTRr_CORTEXM0_U3f_GET(r) ((((r).icfg_pcie_sw_prog_intr[0]) >> 11) & 0x1)
#define ICFG_PCIE_SW_PROG_INTRr_CORTEXM0_U3f_SET(r,f) (r).icfg_pcie_sw_prog_intr[0]=(((r).icfg_pcie_sw_prog_intr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define ICFG_PCIE_SW_PROG_INTRr_CMIC_RCPUf_GET(r) ((((r).icfg_pcie_sw_prog_intr[0]) >> 12) & 0x1)
#define ICFG_PCIE_SW_PROG_INTRr_CMIC_RCPUf_SET(r,f) (r).icfg_pcie_sw_prog_intr[0]=(((r).icfg_pcie_sw_prog_intr[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*
 * These macros can be used to access ICFG_PCIE_SW_PROG_INTR.
 */
#define READ_ICFG_PCIE_SW_PROG_INTRr(u,r) BCMDRD_IPROC_READ(u,ICFG_PCIE_SW_PROG_INTRr_OFFSET,r._icfg_pcie_sw_prog_intr)
#define WRITE_ICFG_PCIE_SW_PROG_INTRr(u,r) BCMDRD_IPROC_WRITE(u,ICFG_PCIE_SW_PROG_INTRr_OFFSET,r._icfg_pcie_sw_prog_intr)

/*******************************************************************************
 * End of 'ICFG_PCIE_SW_PROG_INTRr'
 */




/*******************************************************************************
 * REGISTER:  INTC_INTR_ENABLE_REG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_ENABLE_REGr_OFFSET 0x180130f0

#define INTC_INTR_ENABLE_REGr_SIZE 4

/*
 * This structure should be used to declare and program INTC_INTR_ENABLE_REG.
 */
typedef union INTC_INTR_ENABLE_REGr_s {
	uint32_t v[1];
	uint32_t intc_intr_enable_reg[1];
	uint32_t _intc_intr_enable_reg;
} INTC_INTR_ENABLE_REGr_t;

#define INTC_INTR_ENABLE_REGr_CLR(r) (r).intc_intr_enable_reg[0] = 0
#define INTC_INTR_ENABLE_REGr_SET(r,d) (r).intc_intr_enable_reg[0] = d
#define INTC_INTR_ENABLE_REGr_GET(r) (r).intc_intr_enable_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define INTC_INTR_ENABLE_REGr_B31_TO_0f_GET(r) ((r).intc_intr_enable_reg[0])
#define INTC_INTR_ENABLE_REGr_B31_TO_0f_SET(r,f) (r).intc_intr_enable_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access INTC_INTR_ENABLE_REG.
 */
#define READ_INTC_INTR_ENABLE_REGr(u,i,r) BCMDRD_IPROC_READ(u,INTC_INTR_ENABLE_REGr_OFFSET+(4*(i)),r._intc_intr_enable_reg)
#define WRITE_INTC_INTR_ENABLE_REGr(u,i,r) BCMDRD_IPROC_WRITE(u,INTC_INTR_ENABLE_REGr_OFFSET+(4*(i)),r._intc_intr_enable_reg)

/*******************************************************************************
 * End of 'INTC_INTR_ENABLE_REGr'
 */




/*******************************************************************************
 * REGISTER:  INTC_INTR_ENABLE_REG0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_ENABLE_REG0r_OFFSET 0x180130f0

#define INTC_INTR_ENABLE_REG0r_SIZE 4

/* INTC_INTR_ENABLE_REG0r is element of INTC_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_ENABLE_REG1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_ENABLE_REG1r_OFFSET 0x180130f4

#define INTC_INTR_ENABLE_REG1r_SIZE 4

/* INTC_INTR_ENABLE_REG1r is element of INTC_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_ENABLE_REG2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_ENABLE_REG2r_OFFSET 0x180130f8

#define INTC_INTR_ENABLE_REG2r_SIZE 4

/* INTC_INTR_ENABLE_REG2r is element of INTC_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_ENABLE_REG3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_ENABLE_REG3r_OFFSET 0x180130fc

#define INTC_INTR_ENABLE_REG3r_SIZE 4

/* INTC_INTR_ENABLE_REG3r is element of INTC_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_ENABLE_REG4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_ENABLE_REG4r_OFFSET 0x18013100

#define INTC_INTR_ENABLE_REG4r_SIZE 4

/* INTC_INTR_ENABLE_REG4r is element of INTC_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_ENABLE_REG5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_ENABLE_REG5r_OFFSET 0x18013104

#define INTC_INTR_ENABLE_REG5r_SIZE 4

/* INTC_INTR_ENABLE_REG5r is element of INTC_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_ENABLE_REG6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_ENABLE_REG6r_OFFSET 0x18013108

#define INTC_INTR_ENABLE_REG6r_SIZE 4

/* INTC_INTR_ENABLE_REG6r is element of INTC_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_ENABLE_REG7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_ENABLE_REG7r_OFFSET 0x1801310c

#define INTC_INTR_ENABLE_REG7r_SIZE 4

/* INTC_INTR_ENABLE_REG7r is element of INTC_INTR_ENABLE_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_RAW_STATUS_REG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_RAW_STATUS_REGr_OFFSET 0x18013140

#define INTC_INTR_RAW_STATUS_REGr_SIZE 4

/*
 * This structure should be used to declare and program INTC_INTR_RAW_STATUS_REG.
 */
typedef union INTC_INTR_RAW_STATUS_REGr_s {
	uint32_t v[1];
	uint32_t intc_intr_raw_status_reg[1];
	uint32_t _intc_intr_raw_status_reg;
} INTC_INTR_RAW_STATUS_REGr_t;

#define INTC_INTR_RAW_STATUS_REGr_CLR(r) (r).intc_intr_raw_status_reg[0] = 0
#define INTC_INTR_RAW_STATUS_REGr_SET(r,d) (r).intc_intr_raw_status_reg[0] = d
#define INTC_INTR_RAW_STATUS_REGr_GET(r) (r).intc_intr_raw_status_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define INTC_INTR_RAW_STATUS_REGr_B31_TO_0f_GET(r) ((r).intc_intr_raw_status_reg[0])
#define INTC_INTR_RAW_STATUS_REGr_B31_TO_0f_SET(r,f) (r).intc_intr_raw_status_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access INTC_INTR_RAW_STATUS_REG.
 */
#define READ_INTC_INTR_RAW_STATUS_REGr(u,i,r) BCMDRD_IPROC_READ(u,INTC_INTR_RAW_STATUS_REGr_OFFSET+(4*(i)),r._intc_intr_raw_status_reg)
#define WRITE_INTC_INTR_RAW_STATUS_REGr(u,i,r) BCMDRD_IPROC_WRITE(u,INTC_INTR_RAW_STATUS_REGr_OFFSET+(4*(i)),r._intc_intr_raw_status_reg)

/*******************************************************************************
 * End of 'INTC_INTR_RAW_STATUS_REGr'
 */




/*******************************************************************************
 * REGISTER:  INTC_INTR_RAW_STATUS_REG0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_RAW_STATUS_REG0r_OFFSET 0x18013140

#define INTC_INTR_RAW_STATUS_REG0r_SIZE 4

/* INTC_INTR_RAW_STATUS_REG0r is element of INTC_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_RAW_STATUS_REG1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_RAW_STATUS_REG1r_OFFSET 0x18013144

#define INTC_INTR_RAW_STATUS_REG1r_SIZE 4

/* INTC_INTR_RAW_STATUS_REG1r is element of INTC_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_RAW_STATUS_REG2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_RAW_STATUS_REG2r_OFFSET 0x18013148

#define INTC_INTR_RAW_STATUS_REG2r_SIZE 4

/* INTC_INTR_RAW_STATUS_REG2r is element of INTC_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_RAW_STATUS_REG3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_RAW_STATUS_REG3r_OFFSET 0x1801314c

#define INTC_INTR_RAW_STATUS_REG3r_SIZE 4

/* INTC_INTR_RAW_STATUS_REG3r is element of INTC_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_RAW_STATUS_REG4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_RAW_STATUS_REG4r_OFFSET 0x18013150

#define INTC_INTR_RAW_STATUS_REG4r_SIZE 4

/* INTC_INTR_RAW_STATUS_REG4r is element of INTC_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_RAW_STATUS_REG5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_RAW_STATUS_REG5r_OFFSET 0x18013154

#define INTC_INTR_RAW_STATUS_REG5r_SIZE 4

/* INTC_INTR_RAW_STATUS_REG5r is element of INTC_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_RAW_STATUS_REG6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_RAW_STATUS_REG6r_OFFSET 0x18013158

#define INTC_INTR_RAW_STATUS_REG6r_SIZE 4

/* INTC_INTR_RAW_STATUS_REG6r is element of INTC_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_RAW_STATUS_REG7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_RAW_STATUS_REG7r_OFFSET 0x1801315c

#define INTC_INTR_RAW_STATUS_REG7r_SIZE 4

/* INTC_INTR_RAW_STATUS_REG7r is element of INTC_INTR_RAW_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_STATUS_REG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_STATUS_REGr_OFFSET 0x18013190

#define INTC_INTR_STATUS_REGr_SIZE 4

/*
 * This structure should be used to declare and program INTC_INTR_STATUS_REG.
 */
typedef union INTC_INTR_STATUS_REGr_s {
	uint32_t v[1];
	uint32_t intc_intr_status_reg[1];
	uint32_t _intc_intr_status_reg;
} INTC_INTR_STATUS_REGr_t;

#define INTC_INTR_STATUS_REGr_CLR(r) (r).intc_intr_status_reg[0] = 0
#define INTC_INTR_STATUS_REGr_SET(r,d) (r).intc_intr_status_reg[0] = d
#define INTC_INTR_STATUS_REGr_GET(r) (r).intc_intr_status_reg[0]

/*
 * These macros can be used to access individual fields.
 */
#define INTC_INTR_STATUS_REGr_B31_TO_0f_GET(r) ((r).intc_intr_status_reg[0])
#define INTC_INTR_STATUS_REGr_B31_TO_0f_SET(r,f) (r).intc_intr_status_reg[0]=((uint32_t)f)

/*
 * These macros can be used to access INTC_INTR_STATUS_REG.
 */
#define READ_INTC_INTR_STATUS_REGr(u,i,r) BCMDRD_IPROC_READ(u,INTC_INTR_STATUS_REGr_OFFSET+(4*(i)),r._intc_intr_status_reg)
#define WRITE_INTC_INTR_STATUS_REGr(u,i,r) BCMDRD_IPROC_WRITE(u,INTC_INTR_STATUS_REGr_OFFSET+(4*(i)),r._intc_intr_status_reg)

/*******************************************************************************
 * End of 'INTC_INTR_STATUS_REGr'
 */




/*******************************************************************************
 * REGISTER:  INTC_INTR_STATUS_REG0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_STATUS_REG0r_OFFSET 0x18013190

#define INTC_INTR_STATUS_REG0r_SIZE 4

/* INTC_INTR_STATUS_REG0r is element of INTC_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_STATUS_REG1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_STATUS_REG1r_OFFSET 0x18013194

#define INTC_INTR_STATUS_REG1r_SIZE 4

/* INTC_INTR_STATUS_REG1r is element of INTC_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_STATUS_REG2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_STATUS_REG2r_OFFSET 0x18013198

#define INTC_INTR_STATUS_REG2r_SIZE 4

/* INTC_INTR_STATUS_REG2r is element of INTC_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_STATUS_REG3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_STATUS_REG3r_OFFSET 0x1801319c

#define INTC_INTR_STATUS_REG3r_SIZE 4

/* INTC_INTR_STATUS_REG3r is element of INTC_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_STATUS_REG4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_STATUS_REG4r_OFFSET 0x180131a0

#define INTC_INTR_STATUS_REG4r_SIZE 4

/* INTC_INTR_STATUS_REG4r is element of INTC_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_STATUS_REG5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_STATUS_REG5r_OFFSET 0x180131a4

#define INTC_INTR_STATUS_REG5r_SIZE 4

/* INTC_INTR_STATUS_REG5r is element of INTC_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_STATUS_REG6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_STATUS_REG6r_OFFSET 0x180131a8

#define INTC_INTR_STATUS_REG6r_SIZE 4

/* INTC_INTR_STATUS_REG6r is element of INTC_INTR_STATUS_REG */

/*******************************************************************************
 * REGISTER:  INTC_INTR_STATUS_REG7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define INTC_INTR_STATUS_REG7r_OFFSET 0x180131ac

#define INTC_INTR_STATUS_REG7r_SIZE 4

/* INTC_INTR_STATUS_REG7r is element of INTC_INTR_STATUS_REG */

#endif /* BCMBD_CMICX_ACC_H */
