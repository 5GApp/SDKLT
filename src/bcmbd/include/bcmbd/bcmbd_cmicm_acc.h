#ifndef BCMBD_CMICM_ACC_H
#define BCMBD_CMICM_ACC_H
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: $
 * Copyright: (c) 2018 Broadcom. All Rights Reserved. "Broadcom" refers to 
 * Broadcom Limited and/or its subsidiaries.
 * 
 * Broadcom Switch Software License
 * 
 * This license governs the use of the accompanying Broadcom software. Your 
 * use of the software indicates your acceptance of the terms and conditions 
 * of this license. If you do not agree to the terms and conditions of this 
 * license, do not use the software.
 * 1. Definitions
 *    "Licensor" means any person or entity that distributes its Work.
 *    "Software" means the original work of authorship made available under 
 *    this license.
 *    "Work" means the Software and any additions to or derivative works of 
 *    the Software that are made available under this license.
 *    The terms "reproduce," "reproduction," "derivative works," and 
 *    "distribution" have the meaning as provided under U.S. copyright law.
 *    Works, including the Software, are "made available" under this license 
 *    by including in or with the Work either (a) a copyright notice 
 *    referencing the applicability of this license to the Work, or (b) a copy 
 *    of this license.
 * 2. Grant of Copyright License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    copyright license to reproduce, prepare derivative works of, publicly 
 *    display, publicly perform, sublicense and distribute its Work and any 
 *    resulting derivative works in any form.
 * 3. Grant of Patent License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    patent license to make, have made, use, offer to sell, sell, import, and 
 *    otherwise transfer its Work, in whole or in part. This patent license 
 *    applies only to the patent claims licensable by Licensor that would be 
 *    infringed by Licensor's Work (or portion thereof) individually and 
 *    excluding any combinations with any other materials or technology.
 *    If you institute patent litigation against any Licensor (including a 
 *    cross-claim or counterclaim in a lawsuit) to enforce any patents that 
 *    you allege are infringed by any Work, then your patent license from such 
 *    Licensor to the Work shall terminate as of the date such litigation is 
 *    filed.
 * 4. Redistribution
 *    You may reproduce or distribute the Work only if (a) you do so under 
 *    this License, (b) you include a complete copy of this License with your 
 *    distribution, and (c) you retain without modification any copyright, 
 *    patent, trademark, or attribution notices that are present in the Work.
 * 5. Derivative Works
 *    You may specify that additional or different terms apply to the use, 
 *    reproduction, and distribution of your derivative works of the Work 
 *    ("Your Terms") only if (a) Your Terms provide that the limitations of 
 *    Section 7 apply to your derivative works, and (b) you identify the 
 *    specific derivative works that are subject to Your Terms. 
 *    Notwithstanding Your Terms, this license (including the redistribution 
 *    requirements in Section 4) will continue to apply to the Work itself.
 * 6. Trademarks
 *    This license does not grant any rights to use any Licensor's or its 
 *    affiliates' names, logos, or trademarks, except as necessary to 
 *    reproduce the notices described in this license.
 * 7. Limitations
 *    Platform. The Work and any derivative works thereof may only be used, or 
 *    intended for use, with a Broadcom switch integrated circuit.
 *    No Reverse Engineering. You will not use the Work to disassemble, 
 *    reverse engineer, decompile, or attempt to ascertain the underlying 
 *    technology of a Broadcom switch integrated circuit.
 * 8. Termination
 *    If you violate any term of this license, then your rights under this 
 *    license (including the license grants of Sections 2 and 3) will 
 *    terminate immediately.
 * 9. Disclaimer of Warranty
 *    THE WORK IS PROVIDED "AS IS" WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 *    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WARRANTIES OR CONDITIONS OF 
 *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR 
 *    NON-INFRINGEMENT. YOU BEAR THE RISK OF UNDERTAKING ANY ACTIVITIES UNDER 
 *    THIS LICENSE. SOME STATES' CONSUMER LAWS DO NOT ALLOW EXCLUSION OF AN 
 *    IMPLIED WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO YOU.
 * 10. Limitation of Liability
 *    EXCEPT AS PROHIBITED BY APPLICABLE LAW, IN NO EVENT AND UNDER NO LEGAL 
 *    THEORY, WHETHER IN TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE 
 *    SHALL ANY LICENSOR BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY DIRECT, 
 *    INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF 
 *    OR RELATED TO THIS LICENSE, THE USE OR INABILITY TO USE THE WORK 
 *    (INCLUDING BUT NOT LIMITED TO LOSS OF GOODWILL, BUSINESS INTERRUPTION, 
 *    LOST PROFITS OR DATA, COMPUTER FAILURE OR MALFUNCTION, OR ANY OTHER 
 *    COMMERCIAL DAMAGES OR LOSSES), EVEN IF THE LICENSOR HAS BEEN ADVISED OF 
 *    THE POSSIBILITY OF SUCH DAMAGES.
 */
#include <sal/sal_libc.h>
#include <bcmdrd/bcmdrd_chip.h>
#include <bcmdrd/bcmdrd_field.h>
#include <bcmbd/bcmbd_cmicm.h>
#include <bcmbd/bcmbd_cmicm_mem.h>
#include <bcmbd/bcmbd_cmicm_reg.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 */



/*******************************************************************************
 * REGISTER:  CMIC_CMC_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_COS_CTRL_RX_0r_OFFSET 0x00031168

#define CMIC_CMC_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc_cos_ctrl_rx_0;
} CMIC_CMC_COS_CTRL_RX_0r_t;

#define CMIC_CMC_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc_cos_ctrl_rx_0[0] = d
#define CMIC_CMC_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc_cos_ctrl_rx_0[0])
#define CMIC_CMC_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc_cos_ctrl_rx_0[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_COS_CTRL_RX_0.
 */
#define READ_CMIC_CMC_COS_CTRL_RX_0r(u,_cmc,i,r) BCMDRD_DEV_READ32(u,CMIC_CMC_COS_CTRL_RX_0r_OFFSET+(4*(i)*2)+(0x1000*(_cmc)),r._cmic_cmc_cos_ctrl_rx_0)
#define WRITE_CMIC_CMC_COS_CTRL_RX_0r(u,_cmc,i,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_COS_CTRL_RX_0r_OFFSET+(4*(i)*2)+(0x1000*(_cmc)),r._cmic_cmc_cos_ctrl_rx_0)

/*******************************************************************************
 * End of 'CMIC_CMC_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_COS_CTRL_RX_1r_OFFSET 0x0003116c

#define CMIC_CMC_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc_cos_ctrl_rx_1;
} CMIC_CMC_COS_CTRL_RX_1r_t;

#define CMIC_CMC_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc_cos_ctrl_rx_1[0] = d
#define CMIC_CMC_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc_cos_ctrl_rx_1[0])
#define CMIC_CMC_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc_cos_ctrl_rx_1[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_COS_CTRL_RX_1.
 */
#define READ_CMIC_CMC_COS_CTRL_RX_1r(u,_cmc,i,r) BCMDRD_DEV_READ32(u,CMIC_CMC_COS_CTRL_RX_1r_OFFSET+(4*(i)*2)+(0x1000*(_cmc)),r._cmic_cmc_cos_ctrl_rx_1)
#define WRITE_CMIC_CMC_COS_CTRL_RX_1r(u,_cmc,i,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_COS_CTRL_RX_1r_OFFSET+(4*(i)*2)+(0x1000*(_cmc)),r._cmic_cmc_cos_ctrl_rx_1)

/*******************************************************************************
 * End of 'CMIC_CMC_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_CTRLr_OFFSET 0x00031140

#define CMIC_CMC_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_CTRL.
 */
typedef union CMIC_CMC_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_ctrl[1];
	uint32_t _cmic_cmc_dma_ctrl;
} CMIC_CMC_DMA_CTRLr_t;

#define CMIC_CMC_DMA_CTRLr_CLR(r) (r).cmic_cmc_dma_ctrl[0] = 0
#define CMIC_CMC_DMA_CTRLr_SET(r,d) (r).cmic_cmc_dma_ctrl[0] = d
#define CMIC_CMC_DMA_CTRLr_GET(r) (r).cmic_cmc_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc_dma_ctrl[0]) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*
 * These macros can be used to access CMIC_CMC_DMA_CTRL.
 */
#define READ_CMIC_CMC_DMA_CTRLr(u,_cmc,i,r) BCMDRD_DEV_READ32(u,CMIC_CMC_DMA_CTRLr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_dma_ctrl)
#define WRITE_CMIC_CMC_DMA_CTRLr(u,_cmc,i,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_DMA_CTRLr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_dma_ctrl)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_CURR_DESCr_OFFSET 0x000311a8

#define CMIC_CMC_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_CURR_DESC.
 */
typedef union CMIC_CMC_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_curr_desc[1];
	uint32_t _cmic_cmc_dma_curr_desc;
} CMIC_CMC_DMA_CURR_DESCr_t;

#define CMIC_CMC_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc_dma_curr_desc[0] = 0
#define CMIC_CMC_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc_dma_curr_desc[0] = d
#define CMIC_CMC_DMA_CURR_DESCr_GET(r) (r).cmic_cmc_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc_dma_curr_desc[0])
#define CMIC_CMC_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc_dma_curr_desc[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_DMA_CURR_DESC.
 */
#define READ_CMIC_CMC_DMA_CURR_DESCr(u,_cmc,i,r) BCMDRD_DEV_READ32(u,CMIC_CMC_DMA_CURR_DESCr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_dma_curr_desc)
#define WRITE_CMIC_CMC_DMA_CURR_DESCr(u,_cmc,i,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_DMA_CURR_DESCr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_dma_curr_desc)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_DESCr_OFFSET 0x00031158

#define CMIC_CMC_DMA_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_DESC.
 */
typedef union CMIC_CMC_DMA_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_desc[1];
	uint32_t _cmic_cmc_dma_desc;
} CMIC_CMC_DMA_DESCr_t;

#define CMIC_CMC_DMA_DESCr_CLR(r) (r).cmic_cmc_dma_desc[0] = 0
#define CMIC_CMC_DMA_DESCr_SET(r,d) (r).cmic_cmc_dma_desc[0] = d
#define CMIC_CMC_DMA_DESCr_GET(r) (r).cmic_cmc_dma_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_DESCr_ADDRf_GET(r) ((r).cmic_cmc_dma_desc[0])
#define CMIC_CMC_DMA_DESCr_ADDRf_SET(r,f) (r).cmic_cmc_dma_desc[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_DMA_DESC.
 */
#define READ_CMIC_CMC_DMA_DESCr(u,_cmc,i,r) BCMDRD_DEV_READ32(u,CMIC_CMC_DMA_DESCr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_dma_desc)
#define WRITE_CMIC_CMC_DMA_DESCr(u,_cmc,i,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_DMA_DESCr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_dma_desc)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_INTR_COALr_OFFSET 0x00031188

#define CMIC_CMC_DMA_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_INTR_COAL.
 */
typedef union CMIC_CMC_DMA_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_intr_coal[1];
	uint32_t _cmic_cmc_dma_intr_coal;
} CMIC_CMC_DMA_INTR_COALr_t;

#define CMIC_CMC_DMA_INTR_COALr_CLR(r) (r).cmic_cmc_dma_intr_coal[0] = 0
#define CMIC_CMC_DMA_INTR_COALr_SET(r,d) (r).cmic_cmc_dma_intr_coal[0] = d
#define CMIC_CMC_DMA_INTR_COALr_GET(r) (r).cmic_cmc_dma_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc_dma_intr_coal[0]) & 0xffff)
#define CMIC_CMC_DMA_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc_dma_intr_coal[0]=(((r).cmic_cmc_dma_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC_DMA_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc_dma_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC_DMA_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc_dma_intr_coal[0]=(((r).cmic_cmc_dma_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC_DMA_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc_dma_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC_DMA_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc_dma_intr_coal[0]=(((r).cmic_cmc_dma_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*
 * These macros can be used to access CMIC_CMC_DMA_INTR_COAL.
 */
#define READ_CMIC_CMC_DMA_INTR_COALr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_DMA_INTR_COALr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_dma_intr_coal)
#define WRITE_CMIC_CMC_DMA_INTR_COALr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_DMA_INTR_COALr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_dma_intr_coal)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_STATr_OFFSET 0x00031150

#define CMIC_CMC_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_STAT.
 */
typedef union CMIC_CMC_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_stat[1];
	uint32_t _cmic_cmc_dma_stat;
} CMIC_CMC_DMA_STATr_t;

#define CMIC_CMC_DMA_STATr_CLR(r) (r).cmic_cmc_dma_stat[0] = 0
#define CMIC_CMC_DMA_STATr_SET(r,d) (r).cmic_cmc_dma_stat[0] = d
#define CMIC_CMC_DMA_STATr_GET(r) (r).cmic_cmc_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_STATr_CHAIN_DONEf_GET(r) (((r).cmic_cmc_dma_stat[0]) & 0xf)
#define CMIC_CMC_DMA_STATr_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC_DMA_STATr_CH0_CHAIN_DONEf_GET(r) (((r).cmic_cmc_dma_stat[0]) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_DMA_STATr_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_DMA_STATr_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_DMA_STATr_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_DMA_STATr_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 4) & 0xf)
#define CMIC_CMC_DMA_STATr_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_CMC_DMA_STATr_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_DMA_STATr_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_DMA_STATr_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_DMA_STATr_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_DMA_STATr_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 8) & 0xf)
#define CMIC_CMC_DMA_STATr_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define CMIC_CMC_DMA_STATr_CH0_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_DMA_STATr_CH1_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_DMA_STATr_CH2_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_DMA_STATr_CH3_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_DMA_STATr_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 12) & 0xf)
#define CMIC_CMC_DMA_STATr_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define CMIC_CMC_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 12) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 13) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 14) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 15) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_DMA_STATr_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 16) & 0xf)
#define CMIC_CMC_DMA_STATr_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 16)) | ((((uint32_t)f) & 0xf) << 16))
#define CMIC_CMC_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 16) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 17) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 18) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 19) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_DMA_STATr_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 20) & 0xf)
#define CMIC_CMC_DMA_STATr_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 20)) | ((((uint32_t)f) & 0xf) << 20))
#define CMIC_CMC_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 20) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 21) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 22) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 23) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_DMA_STATr_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 24) & 0xf)
#define CMIC_CMC_DMA_STATr_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 24)) | ((((uint32_t)f) & 0xf) << 24))
#define CMIC_CMC_DMA_STATr_CH0_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 24) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_DMA_STATr_CH1_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 25) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_DMA_STATr_CH2_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 26) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_DMA_STATr_CH3_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 27) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_DMA_STATr_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 28) & 0xf)
#define CMIC_CMC_DMA_STATr_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 28)) | ((((uint32_t)f) & 0xf) << 28))
#define CMIC_CMC_DMA_STATr_CH0_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 28) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_DMA_STATr_CH1_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 29) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_DMA_STATr_CH2_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 30) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC_DMA_STATr_CH3_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 31) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*
 * These macros can be used to access CMIC_CMC_DMA_STAT.
 */
#define READ_CMIC_CMC_DMA_STATr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_DMA_STATr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_dma_stat)
#define WRITE_CMIC_CMC_DMA_STATr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_DMA_STATr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_dma_stat)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_STAT_CLRr_OFFSET 0x000311a4

#define CMIC_CMC_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_STAT_CLR.
 */
typedef union CMIC_CMC_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_stat_clr[1];
	uint32_t _cmic_cmc_dma_stat_clr;
} CMIC_CMC_DMA_STAT_CLRr_t;

#define CMIC_CMC_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc_dma_stat_clr[0] = 0
#define CMIC_CMC_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc_dma_stat_clr[0] = d
#define CMIC_CMC_DMA_STAT_CLRr_GET(r) (r).cmic_cmc_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_STAT_CLRr_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc_dma_stat_clr[0]) & 0xf)
#define CMIC_CMC_DMA_STAT_CLRr_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 3) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_DMA_STAT_CLRr_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 4) & 0xf)
#define CMIC_CMC_DMA_STAT_CLRr_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_CMC_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 4) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 5) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 6) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 7) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*
 * These macros can be used to access CMIC_CMC_DMA_STAT_CLR.
 */
#define READ_CMIC_CMC_DMA_STAT_CLRr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_DMA_STAT_CLRr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_dma_stat_clr)
#define WRITE_CMIC_CMC_DMA_STAT_CLRr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_DMA_STAT_CLRr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_dma_stat_clr)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_CFGr_OFFSET 0x000312c0

#define CMIC_CMC_FIFO_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_CFG.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_cfg[1];
	uint32_t _cmic_cmc_fifo_rd_dma_cfg;
} CMIC_CMC_FIFO_RD_DMA_CFGr_t;

#define CMIC_CMC_FIFO_RD_DMA_CFGr_CLR(r) (r).cmic_cmc_fifo_rd_dma_cfg[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_cfg[0] = d
#define CMIC_CMC_FIFO_RD_DMA_CFGr_GET(r) (r).cmic_cmc_fifo_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc_fifo_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_CFG.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_CFGr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_CFGr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_cfg)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_CFGr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_CFGr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_cfg)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00031330

#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00031310

#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc_fifo_rd_dma_eccerr_address;
} CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc_fifo_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_eccerr_address[0] = d
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc_fifo_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_fifo_rd_dma_eccerr_address[0])
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_eccerr_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESS.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_eccerr_address)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_eccerr_address)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00031320

#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc_fifo_rd_dma_eccerr_control;
} CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0] = d
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc_fifo_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0]=(((r).cmic_cmc_fifo_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0]=(((r).cmic_cmc_fifo_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROL.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_eccerr_control)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_eccerr_control)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000312e0

#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc_fifo_rd_dma_hostmem_start_address;
} CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0])
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_hostmem_start_address)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_hostmem_start_address)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00031354

#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc_fifo_rd_dma_hostmem_threshold;
} CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0])
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLD.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_hostmem_threshold)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_hostmem_threshold)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x000312f0

#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET+(0x8*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET+(0x8*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x000312f4

#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET+(0x8*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET+(0x8*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_OFFSET 0x00031384

#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_opcode[1];
	uint32_t _cmic_cmc_fifo_rd_dma_opcode;
} CMIC_CMC_FIFO_RD_DMA_OPCODEr_t;

#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc_fifo_rd_dma_opcode[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_opcode[0] = d
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc_fifo_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc_fifo_rd_dma_opcode[0])
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_opcode[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_OPCODE.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_OPCODEr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_opcode)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_OPCODEr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_opcode)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000312d0

#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc_fifo_rd_dma_sbus_start_address;
} CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc_fifo_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc_fifo_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_fifo_rd_dma_sbus_start_address[0])
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESS.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_sbus_start_address)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_sbus_start_address)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_STATr_OFFSET 0x00031364

#define CMIC_CMC_FIFO_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_STAT.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_stat[1];
	uint32_t _cmic_cmc_fifo_rd_dma_stat;
} CMIC_CMC_FIFO_RD_DMA_STATr_t;

#define CMIC_CMC_FIFO_RD_DMA_STATr_CLR(r) (r).cmic_cmc_fifo_rd_dma_stat[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_STATr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_stat[0] = d
#define CMIC_CMC_FIFO_RD_DMA_STATr_GET(r) (r).cmic_cmc_fifo_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc_fifo_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_FIFO_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_FIFO_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_FIFO_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_STAT.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_STATr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_STATr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_stat)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_STATr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_STATr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_stat)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_OFFSET 0x00031374

#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc_fifo_rd_dma_stat_clr;
} CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc_fifo_rd_dma_stat_clr[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_stat_clr[0] = d
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc_fifo_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc_fifo_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat_clr[0]=(((r).cmic_cmc_fifo_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat_clr[0]=(((r).cmic_cmc_fifo_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat_clr[0]=(((r).cmic_cmc_fifo_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*
 * These macros can be used to access CMIC_CMC_FIFO_RD_DMA_STAT_CLR.
 */
#define READ_CMIC_CMC_FIFO_RD_DMA_STAT_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_stat_clr)
#define WRITE_CMIC_CMC_FIFO_RD_DMA_STAT_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_OFFSET+(0x4*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_fifo_rd_dma_stat_clr)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_HOSTMEM_ADDR_REMAP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_OFFSET 0x00031474

#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_HOSTMEM_ADDR_REMAP.
 */
typedef union CMIC_CMC_HOSTMEM_ADDR_REMAPr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_hostmem_addr_remap[1];
	uint32_t _cmic_cmc_hostmem_addr_remap;
} CMIC_CMC_HOSTMEM_ADDR_REMAPr_t;

#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_CLR(r) (r).cmic_cmc_hostmem_addr_remap[0] = 0
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_SET(r,d) (r).cmic_cmc_hostmem_addr_remap[0] = d
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_GET(r) (r).cmic_cmc_hostmem_addr_remap[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_0f_GET(r) (((r).cmic_cmc_hostmem_addr_remap[0]) & 0x1f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_0f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_1f_GET(r) ((((r).cmic_cmc_hostmem_addr_remap[0]) >> 5) & 0x1f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_1f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_2f_GET(r) ((((r).cmic_cmc_hostmem_addr_remap[0]) >> 10) & 0x1f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_2f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_3f_GET(r) ((((r).cmic_cmc_hostmem_addr_remap[0]) >> 15) & 0x1f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_3f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x1f << 15)) | ((((uint32_t)f) & 0x1f) << 15))
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_4f_GET(r) ((((r).cmic_cmc_hostmem_addr_remap[0]) >> 20) & 0x1f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_4f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x1f << 20)) | ((((uint32_t)f) & 0x1f) << 20))
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_5f_GET(r) ((((r).cmic_cmc_hostmem_addr_remap[0]) >> 25) & 0x1f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_5f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x1f << 25)) | ((((uint32_t)f) & 0x1f) << 25))

/*
 * These macros can be used to access CMIC_CMC_HOSTMEM_ADDR_REMAP.
 */
#define READ_CMIC_CMC_HOSTMEM_ADDR_REMAPr(u,_cmc,i,r) BCMDRD_DEV_READ32(u,CMIC_CMC_HOSTMEM_ADDR_REMAPr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_hostmem_addr_remap)
#define WRITE_CMIC_CMC_HOSTMEM_ADDR_REMAPr(u,_cmc,i,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_HOSTMEM_ADDR_REMAPr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_hostmem_addr_remap)

/*******************************************************************************
 * End of 'CMIC_CMC_HOSTMEM_ADDR_REMAPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT0r_OFFSET 0x00031400

#define CMIC_CMC_IRQ_STAT0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT0.
 */
typedef union CMIC_CMC_IRQ_STAT0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat0[1];
	uint32_t _cmic_cmc_irq_stat0;
} CMIC_CMC_IRQ_STAT0r_t;

#define CMIC_CMC_IRQ_STAT0r_CLR(r) (r).cmic_cmc_irq_stat0[0] = 0
#define CMIC_CMC_IRQ_STAT0r_SET(r,d) (r).cmic_cmc_irq_stat0[0] = d
#define CMIC_CMC_IRQ_STAT0r_GET(r) (r).cmic_cmc_irq_stat0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc_irq_stat0[0]) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 1) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 2) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 3) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 4) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 5) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 6) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_IRQ_STAT0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 7) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_IRQ_STAT0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 8) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_IRQ_STAT0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 9) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_IRQ_STAT0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 10) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_IRQ_STAT0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 11) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_IRQ_STAT0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 12) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_IRQ_STAT0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 13) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_IRQ_STAT0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 14) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_IRQ_STAT0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 15) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 16) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 17) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 18) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 19) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_IRQ_STAT0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 20) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 21) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_IRQ_STAT0r_SW_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 22) & 0xf)
#define CMIC_CMC_IRQ_STAT0r_SW_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 26) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))

/*
 * These macros can be used to access CMIC_CMC_IRQ_STAT0.
 */
#define READ_CMIC_CMC_IRQ_STAT0r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_IRQ_STAT0r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat0)
#define WRITE_CMIC_CMC_IRQ_STAT0r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_IRQ_STAT0r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat0)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT1r_OFFSET 0x00031404

#define CMIC_CMC_IRQ_STAT1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT1.
 */
typedef union CMIC_CMC_IRQ_STAT1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat1[1];
	uint32_t _cmic_cmc_irq_stat1;
} CMIC_CMC_IRQ_STAT1r_t;

#define CMIC_CMC_IRQ_STAT1r_CLR(r) (r).cmic_cmc_irq_stat1[0] = 0
#define CMIC_CMC_IRQ_STAT1r_SET(r,d) (r).cmic_cmc_irq_stat1[0] = d
#define CMIC_CMC_IRQ_STAT1r_GET(r) (r).cmic_cmc_irq_stat1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT1r_I2C_INTRf_GET(r) (((r).cmic_cmc_irq_stat1[0]) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_I2C_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 1) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_IRQ_STAT1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 2) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 3) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 4) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_IRQ_STAT1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 5) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_IRQ_STAT1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 6) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_IRQ_STAT1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 7) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_IRQ_STAT1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 8) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_IRQ_STAT1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 9) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_IRQ_STAT1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 10) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_IRQ_STAT1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 11) & 0xff)
#define CMIC_CMC_IRQ_STAT1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC_IRQ_STAT1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 19) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_IRQ_STAT1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 20) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_IRQ_STAT1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 21) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_IRQ_STAT1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 22) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 23) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 24) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 25) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 26) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 27) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_IRQ_STAT1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 28) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_IRQ_STAT1r_SER_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 29) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_SER_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*
 * These macros can be used to access CMIC_CMC_IRQ_STAT1.
 */
#define READ_CMIC_CMC_IRQ_STAT1r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_IRQ_STAT1r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat1)
#define WRITE_CMIC_CMC_IRQ_STAT1r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_IRQ_STAT1r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat1)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT2r_OFFSET 0x00031408

#define CMIC_CMC_IRQ_STAT2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT2.
 */
typedef union CMIC_CMC_IRQ_STAT2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat2[1];
	uint32_t _cmic_cmc_irq_stat2;
} CMIC_CMC_IRQ_STAT2r_t;

#define CMIC_CMC_IRQ_STAT2r_CLR(r) (r).cmic_cmc_irq_stat2[0] = 0
#define CMIC_CMC_IRQ_STAT2r_SET(r,d) (r).cmic_cmc_irq_stat2[0] = d
#define CMIC_CMC_IRQ_STAT2r_GET(r) (r).cmic_cmc_irq_stat2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_GET(r) ((r).cmic_cmc_irq_stat2[0])
#define CMIC_CMC_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_SET(r,f) (r).cmic_cmc_irq_stat2[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_IRQ_STAT2.
 */
#define READ_CMIC_CMC_IRQ_STAT2r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_IRQ_STAT2r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat2)
#define WRITE_CMIC_CMC_IRQ_STAT2r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_IRQ_STAT2r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat2)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT3r_OFFSET 0x0003140c

#define CMIC_CMC_IRQ_STAT3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT3.
 */
typedef union CMIC_CMC_IRQ_STAT3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat3[1];
	uint32_t _cmic_cmc_irq_stat3;
} CMIC_CMC_IRQ_STAT3r_t;

#define CMIC_CMC_IRQ_STAT3r_CLR(r) (r).cmic_cmc_irq_stat3[0] = 0
#define CMIC_CMC_IRQ_STAT3r_SET(r,d) (r).cmic_cmc_irq_stat3[0] = d
#define CMIC_CMC_IRQ_STAT3r_GET(r) (r).cmic_cmc_irq_stat3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc_irq_stat3[0])
#define CMIC_CMC_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc_irq_stat3[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_IRQ_STAT3.
 */
#define READ_CMIC_CMC_IRQ_STAT3r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_IRQ_STAT3r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat3)
#define WRITE_CMIC_CMC_IRQ_STAT3r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_IRQ_STAT3r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat3)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT4r_OFFSET 0x00031410

#define CMIC_CMC_IRQ_STAT4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT4.
 */
typedef union CMIC_CMC_IRQ_STAT4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat4[1];
	uint32_t _cmic_cmc_irq_stat4;
} CMIC_CMC_IRQ_STAT4r_t;

#define CMIC_CMC_IRQ_STAT4r_CLR(r) (r).cmic_cmc_irq_stat4[0] = 0
#define CMIC_CMC_IRQ_STAT4r_SET(r,d) (r).cmic_cmc_irq_stat4[0] = d
#define CMIC_CMC_IRQ_STAT4r_GET(r) (r).cmic_cmc_irq_stat4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc_irq_stat4[0])
#define CMIC_CMC_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc_irq_stat4[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_IRQ_STAT4.
 */
#define READ_CMIC_CMC_IRQ_STAT4r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_IRQ_STAT4r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat4)
#define WRITE_CMIC_CMC_IRQ_STAT4r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_IRQ_STAT4r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_irq_stat4)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_ADDRESSr_OFFSET 0x00031088

#define CMIC_CMC_MIIM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_ADDRESS.
 */
typedef union CMIC_CMC_MIIM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_address[1];
	uint32_t _cmic_cmc_miim_address;
} CMIC_CMC_MIIM_ADDRESSr_t;

#define CMIC_CMC_MIIM_ADDRESSr_CLR(r) (r).cmic_cmc_miim_address[0] = 0
#define CMIC_CMC_MIIM_ADDRESSr_SET(r,d) (r).cmic_cmc_miim_address[0] = d
#define CMIC_CMC_MIIM_ADDRESSr_GET(r) (r).cmic_cmc_miim_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_cmc_miim_address[0]) & 0xffff)
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_cmc_miim_address[0]=(((r).cmic_cmc_miim_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_22_REGADRf_GET(r) (((r).cmic_cmc_miim_address[0]) & 0x1f)
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_22_REGADRf_SET(r,f) (r).cmic_cmc_miim_address[0]=(((r).cmic_cmc_miim_address[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_cmc_miim_address[0]) >> 16) & 0x1f)
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_cmc_miim_address[0]=(((r).cmic_cmc_miim_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))

/*
 * These macros can be used to access CMIC_CMC_MIIM_ADDRESS.
 */
#define READ_CMIC_CMC_MIIM_ADDRESSr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_MIIM_ADDRESSr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_address)
#define WRITE_CMIC_CMC_MIIM_ADDRESSr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_MIIM_ADDRESSr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_address)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_CTRLr_OFFSET 0x0003108c

#define CMIC_CMC_MIIM_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_CTRL.
 */
typedef union CMIC_CMC_MIIM_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_ctrl[1];
	uint32_t _cmic_cmc_miim_ctrl;
} CMIC_CMC_MIIM_CTRLr_t;

#define CMIC_CMC_MIIM_CTRLr_CLR(r) (r).cmic_cmc_miim_ctrl[0] = 0
#define CMIC_CMC_MIIM_CTRLr_SET(r,d) (r).cmic_cmc_miim_ctrl[0] = d
#define CMIC_CMC_MIIM_CTRLr_GET(r) (r).cmic_cmc_miim_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_CTRLr_MIIM_WR_STARTf_GET(r) (((r).cmic_cmc_miim_ctrl[0]) & 0x1)
#define CMIC_CMC_MIIM_CTRLr_MIIM_WR_STARTf_SET(r,f) (r).cmic_cmc_miim_ctrl[0]=(((r).cmic_cmc_miim_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_MIIM_CTRLr_MIIM_RD_STARTf_GET(r) ((((r).cmic_cmc_miim_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC_MIIM_CTRLr_MIIM_RD_STARTf_SET(r,f) (r).cmic_cmc_miim_ctrl[0]=(((r).cmic_cmc_miim_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access CMIC_CMC_MIIM_CTRL.
 */
#define READ_CMIC_CMC_MIIM_CTRLr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_MIIM_CTRLr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_ctrl)
#define WRITE_CMIC_CMC_MIIM_CTRLr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_MIIM_CTRLr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_ctrl)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_PARAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_PARAMr_OFFSET 0x00031080

#define CMIC_CMC_MIIM_PARAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_PARAM.
 */
typedef union CMIC_CMC_MIIM_PARAMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_param[1];
	uint32_t _cmic_cmc_miim_param;
} CMIC_CMC_MIIM_PARAMr_t;

#define CMIC_CMC_MIIM_PARAMr_CLR(r) (r).cmic_cmc_miim_param[0] = 0
#define CMIC_CMC_MIIM_PARAMr_SET(r,d) (r).cmic_cmc_miim_param[0] = d
#define CMIC_CMC_MIIM_PARAMr_GET(r) (r).cmic_cmc_miim_param[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_PARAMr_PHY_DATAf_GET(r) (((r).cmic_cmc_miim_param[0]) & 0xffff)
#define CMIC_CMC_MIIM_PARAMr_PHY_DATAf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC_MIIM_PARAMr_PHY_IDf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 16) & 0x1f)
#define CMIC_CMC_MIIM_PARAMr_PHY_IDf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_CMC_MIIM_PARAMr_C45_SELf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 21) & 0x1)
#define CMIC_CMC_MIIM_PARAMr_C45_SELf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_MIIM_PARAMr_BUS_IDf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 22) & 0x7)
#define CMIC_CMC_MIIM_PARAMr_BUS_IDf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x7 << 22)) | ((((uint32_t)f) & 0x7) << 22))
#define CMIC_CMC_MIIM_PARAMr_INTERNAL_SELf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 25) & 0x1)
#define CMIC_CMC_MIIM_PARAMr_INTERNAL_SELf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_MIIM_PARAMr_MIIM_CYCLEf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 29) & 0x7)
#define CMIC_CMC_MIIM_PARAMr_MIIM_CYCLEf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x7 << 29)) | ((((uint32_t)f) & 0x7) << 29))

/*
 * These macros can be used to access CMIC_CMC_MIIM_PARAM.
 */
#define READ_CMIC_CMC_MIIM_PARAMr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_MIIM_PARAMr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_param)
#define WRITE_CMIC_CMC_MIIM_PARAMr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_MIIM_PARAMr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_param)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_PARAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_READ_DATA
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_READ_DATAr_OFFSET 0x00031084

#define CMIC_CMC_MIIM_READ_DATAr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_READ_DATA.
 */
typedef union CMIC_CMC_MIIM_READ_DATAr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_read_data[1];
	uint32_t _cmic_cmc_miim_read_data;
} CMIC_CMC_MIIM_READ_DATAr_t;

#define CMIC_CMC_MIIM_READ_DATAr_CLR(r) (r).cmic_cmc_miim_read_data[0] = 0
#define CMIC_CMC_MIIM_READ_DATAr_SET(r,d) (r).cmic_cmc_miim_read_data[0] = d
#define CMIC_CMC_MIIM_READ_DATAr_GET(r) (r).cmic_cmc_miim_read_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_READ_DATAr_DATAf_GET(r) (((r).cmic_cmc_miim_read_data[0]) & 0xffff)
#define CMIC_CMC_MIIM_READ_DATAr_DATAf_SET(r,f) (r).cmic_cmc_miim_read_data[0]=(((r).cmic_cmc_miim_read_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CMIC_CMC_MIIM_READ_DATA.
 */
#define READ_CMIC_CMC_MIIM_READ_DATAr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_MIIM_READ_DATAr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_read_data)
#define WRITE_CMIC_CMC_MIIM_READ_DATAr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_MIIM_READ_DATAr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_read_data)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_STATr_OFFSET 0x00031090

#define CMIC_CMC_MIIM_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_STAT.
 */
typedef union CMIC_CMC_MIIM_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_stat[1];
	uint32_t _cmic_cmc_miim_stat;
} CMIC_CMC_MIIM_STATr_t;

#define CMIC_CMC_MIIM_STATr_CLR(r) (r).cmic_cmc_miim_stat[0] = 0
#define CMIC_CMC_MIIM_STATr_SET(r,d) (r).cmic_cmc_miim_stat[0] = d
#define CMIC_CMC_MIIM_STATr_GET(r) (r).cmic_cmc_miim_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_STATr_MIIM_OPN_DONEf_GET(r) (((r).cmic_cmc_miim_stat[0]) & 0x1)
#define CMIC_CMC_MIIM_STATr_MIIM_OPN_DONEf_SET(r,f) (r).cmic_cmc_miim_stat[0]=(((r).cmic_cmc_miim_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_CMC_MIIM_STAT.
 */
#define READ_CMIC_CMC_MIIM_STATr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_MIIM_STATr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_stat)
#define WRITE_CMIC_CMC_MIIM_STATr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_MIIM_STATr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_miim_stat)

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK0r_OFFSET 0x00031414

#define CMIC_CMC_PCIE_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK0.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask0[1];
	uint32_t _cmic_cmc_pcie_irq_mask0;
} CMIC_CMC_PCIE_IRQ_MASK0r_t;

#define CMIC_CMC_PCIE_IRQ_MASK0r_CLR(r) (r).cmic_cmc_pcie_irq_mask0[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK0r_SET(r,d) (r).cmic_cmc_pcie_irq_mask0[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK0r_GET(r) (r).cmic_cmc_pcie_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc_pcie_irq_mask0[0]) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))

/*
 * These macros can be used to access CMIC_CMC_PCIE_IRQ_MASK0.
 */
#define READ_CMIC_CMC_PCIE_IRQ_MASK0r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_PCIE_IRQ_MASK0r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask0)
#define WRITE_CMIC_CMC_PCIE_IRQ_MASK0r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_PCIE_IRQ_MASK0r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask0)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK1r_OFFSET 0x00031418

#define CMIC_CMC_PCIE_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK1.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask1[1];
	uint32_t _cmic_cmc_pcie_irq_mask1;
} CMIC_CMC_PCIE_IRQ_MASK1r_t;

#define CMIC_CMC_PCIE_IRQ_MASK1r_CLR(r) (r).cmic_cmc_pcie_irq_mask1[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK1r_SET(r,d) (r).cmic_cmc_pcie_irq_mask1[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK1r_GET(r) (r).cmic_cmc_pcie_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc_pcie_irq_mask1[0]) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_PCIE_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_PCIE_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*
 * These macros can be used to access CMIC_CMC_PCIE_IRQ_MASK1.
 */
#define READ_CMIC_CMC_PCIE_IRQ_MASK1r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_PCIE_IRQ_MASK1r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask1)
#define WRITE_CMIC_CMC_PCIE_IRQ_MASK1r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_PCIE_IRQ_MASK1r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask1)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK2r_OFFSET 0x0003141c

#define CMIC_CMC_PCIE_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK2.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask2[1];
	uint32_t _cmic_cmc_pcie_irq_mask2;
} CMIC_CMC_PCIE_IRQ_MASK2r_t;

#define CMIC_CMC_PCIE_IRQ_MASK2r_CLR(r) (r).cmic_cmc_pcie_irq_mask2[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK2r_SET(r,d) (r).cmic_cmc_pcie_irq_mask2[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK2r_GET(r) (r).cmic_cmc_pcie_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc_pcie_irq_mask2[0])
#define CMIC_CMC_PCIE_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc_pcie_irq_mask2[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_PCIE_IRQ_MASK2.
 */
#define READ_CMIC_CMC_PCIE_IRQ_MASK2r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_PCIE_IRQ_MASK2r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask2)
#define WRITE_CMIC_CMC_PCIE_IRQ_MASK2r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_PCIE_IRQ_MASK2r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask2)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK3r_OFFSET 0x00031420

#define CMIC_CMC_PCIE_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK3.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask3[1];
	uint32_t _cmic_cmc_pcie_irq_mask3;
} CMIC_CMC_PCIE_IRQ_MASK3r_t;

#define CMIC_CMC_PCIE_IRQ_MASK3r_CLR(r) (r).cmic_cmc_pcie_irq_mask3[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK3r_SET(r,d) (r).cmic_cmc_pcie_irq_mask3[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK3r_GET(r) (r).cmic_cmc_pcie_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc_pcie_irq_mask3[0])
#define CMIC_CMC_PCIE_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc_pcie_irq_mask3[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_PCIE_IRQ_MASK3.
 */
#define READ_CMIC_CMC_PCIE_IRQ_MASK3r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_PCIE_IRQ_MASK3r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask3)
#define WRITE_CMIC_CMC_PCIE_IRQ_MASK3r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_PCIE_IRQ_MASK3r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask3)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK4r_OFFSET 0x00031424

#define CMIC_CMC_PCIE_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK4.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask4[1];
	uint32_t _cmic_cmc_pcie_irq_mask4;
} CMIC_CMC_PCIE_IRQ_MASK4r_t;

#define CMIC_CMC_PCIE_IRQ_MASK4r_CLR(r) (r).cmic_cmc_pcie_irq_mask4[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK4r_SET(r,d) (r).cmic_cmc_pcie_irq_mask4[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK4r_GET(r) (r).cmic_cmc_pcie_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc_pcie_irq_mask4[0])
#define CMIC_CMC_PCIE_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc_pcie_irq_mask4[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_PCIE_IRQ_MASK4.
 */
#define READ_CMIC_CMC_PCIE_IRQ_MASK4r(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_PCIE_IRQ_MASK4r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask4)
#define WRITE_CMIC_CMC_PCIE_IRQ_MASK4r(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_PCIE_IRQ_MASK4r_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_pcie_irq_mask4)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CONTROLr_OFFSET 0x00031600

#define CMIC_CMC_SBUSDMA_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CONTROL.
 */
typedef union CMIC_CMC_SBUSDMA_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_control[1];
	uint32_t _cmic_cmc_sbusdma_control;
} CMIC_CMC_SBUSDMA_CONTROLr_t;

#define CMIC_CMC_SBUSDMA_CONTROLr_CLR(r) (r).cmic_cmc_sbusdma_control[0] = 0
#define CMIC_CMC_SBUSDMA_CONTROLr_SET(r,d) (r).cmic_cmc_sbusdma_control[0] = d
#define CMIC_CMC_SBUSDMA_CONTROLr_GET(r) (r).cmic_cmc_sbusdma_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CONTROLr_STARTf_GET(r) (((r).cmic_cmc_sbusdma_control[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CONTROL.
 */
#define READ_CMIC_CMC_SBUSDMA_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CONTROLr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_control)
#define WRITE_CMIC_CMC_SBUSDMA_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CONTROLr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_control)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_COUNTr_OFFSET 0x00031608

#define CMIC_CMC_SBUSDMA_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_COUNT.
 */
typedef union CMIC_CMC_SBUSDMA_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_count[1];
	uint32_t _cmic_cmc_sbusdma_count;
} CMIC_CMC_SBUSDMA_COUNTr_t;

#define CMIC_CMC_SBUSDMA_COUNTr_CLR(r) (r).cmic_cmc_sbusdma_count[0] = 0
#define CMIC_CMC_SBUSDMA_COUNTr_SET(r,d) (r).cmic_cmc_sbusdma_count[0] = d
#define CMIC_CMC_SBUSDMA_COUNTr_GET(r) (r).cmic_cmc_sbusdma_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_COUNTr_COUNTf_GET(r) ((r).cmic_cmc_sbusdma_count[0])
#define CMIC_CMC_SBUSDMA_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc_sbusdma_count[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_COUNT.
 */
#define READ_CMIC_CMC_SBUSDMA_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_COUNTr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_count)
#define WRITE_CMIC_CMC_SBUSDMA_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_COUNTr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_count)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_OFFSET 0x00031628

#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_desc_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_desc_address;
} CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_desc_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_desc_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_desc_address[0])
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_desc_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_desc_address)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_desc_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_OFFSET 0x00031620

#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_hostmem_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_hostmem_address;
} CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_hostmem_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_hostmem_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_hostmem_address[0])
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_hostmem_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_hostmem_address)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_hostmem_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x00031630

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_count;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNT.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_count)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_count)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x00031638

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x0003163c

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_opcode;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODE.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_opcode)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_opcode)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x0003162c

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_request;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUEST.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_request)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_request)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x00031634

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_OFFSET 0x00031624

#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbus_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbus_address;
} CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbus_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbus_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbus_address[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbus_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbus_address)
#define WRITE_CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_cur_sbus_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_OFFSET 0x00031618

#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_desc_start_address[1];
	uint32_t _cmic_cmc_sbusdma_desc_start_address;
} CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_desc_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_desc_start_address[0] = d
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_desc_start_address[0])
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_desc_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_DESC_START_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_desc_start_address)
#define WRITE_CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_desc_start_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_OFFSET 0x00031614

#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_hostmem_start_address[1];
	uint32_t _cmic_cmc_sbusdma_hostmem_start_address;
} CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_hostmem_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_hostmem_start_address[0] = d
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_hostmem_start_address[0])
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_hostmem_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_hostmem_start_address)
#define WRITE_CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_hostmem_start_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_OPCODEr_OFFSET 0x0003160c

#define CMIC_CMC_SBUSDMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_OPCODE.
 */
typedef union CMIC_CMC_SBUSDMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_opcode[1];
	uint32_t _cmic_cmc_sbusdma_opcode;
} CMIC_CMC_SBUSDMA_OPCODEr_t;

#define CMIC_CMC_SBUSDMA_OPCODEr_CLR(r) (r).cmic_cmc_sbusdma_opcode[0] = 0
#define CMIC_CMC_SBUSDMA_OPCODEr_SET(r,d) (r).cmic_cmc_sbusdma_opcode[0] = d
#define CMIC_CMC_SBUSDMA_OPCODEr_GET(r) (r).cmic_cmc_sbusdma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc_sbusdma_opcode[0])
#define CMIC_CMC_SBUSDMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc_sbusdma_opcode[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_OPCODE.
 */
#define READ_CMIC_CMC_SBUSDMA_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_OPCODEr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_opcode)
#define WRITE_CMIC_CMC_SBUSDMA_OPCODEr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_OPCODEr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_opcode)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_REQUESTr_OFFSET 0x00031604

#define CMIC_CMC_SBUSDMA_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_REQUEST.
 */
typedef union CMIC_CMC_SBUSDMA_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_request[1];
	uint32_t _cmic_cmc_sbusdma_request;
} CMIC_CMC_SBUSDMA_REQUESTr_t;

#define CMIC_CMC_SBUSDMA_REQUESTr_CLR(r) (r).cmic_cmc_sbusdma_request[0] = 0
#define CMIC_CMC_SBUSDMA_REQUESTr_SET(r,d) (r).cmic_cmc_sbusdma_request[0] = d
#define CMIC_CMC_SBUSDMA_REQUESTr_GET(r) (r).cmic_cmc_sbusdma_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc_sbusdma_request[0]) & 0x1f)
#define CMIC_CMC_SBUSDMA_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 5) & 0x1f)
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 10) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 11) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_SBUSDMA_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 12) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_SBUSDMA_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 16) & 0xff)
#define CMIC_CMC_SBUSDMA_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 24) & 0x1f)
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 29) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 30) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC_SBUSDMA_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 31) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_REQUEST.
 */
#define READ_CMIC_CMC_SBUSDMA_REQUESTr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_REQUESTr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_request)
#define WRITE_CMIC_CMC_SBUSDMA_REQUESTr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_REQUESTr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_request)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_OFFSET 0x00031640

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_debug[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_debug;
} CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_debug[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_debug[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc_sbusdma_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_debug[0]=(((r).cmic_cmc_sbusdma_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_debug)
#define WRITE_CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_debug)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_OFFSET 0x00031644

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_debug_clr;
} CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]=(((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]=(((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLR.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_debug_clr)
#define WRITE_CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_debug_clr)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x00031648

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_eccerr_address;
} CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0])
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_eccerr_address)
#define WRITE_CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_eccerr_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x0003164c

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_eccerr_control;
} CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]=(((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]=(((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]=(((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]=(((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROL.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_eccerr_control)
#define WRITE_CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbusdma_eccerr_control)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_OFFSET 0x00031610

#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbus_start_address[1];
	uint32_t _cmic_cmc_sbusdma_sbus_start_address;
} CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_sbus_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_sbus_start_address[0] = d
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_sbus_start_address[0])
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_sbus_start_address[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_SBUS_START_ADDRESS.
 */
#define READ_CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbus_start_address)
#define WRITE_CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_sbus_start_address)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_STATUSr_OFFSET 0x0003161c

#define CMIC_CMC_SBUSDMA_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_STATUS.
 */
typedef union CMIC_CMC_SBUSDMA_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_status[1];
	uint32_t _cmic_cmc_sbusdma_status;
} CMIC_CMC_SBUSDMA_STATUSr_t;

#define CMIC_CMC_SBUSDMA_STATUSr_CLR(r) (r).cmic_cmc_sbusdma_status[0] = 0
#define CMIC_CMC_SBUSDMA_STATUSr_SET(r,d) (r).cmic_cmc_sbusdma_status[0] = d
#define CMIC_CMC_SBUSDMA_STATUSr_GET(r) (r).cmic_cmc_sbusdma_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_STATUSr_DONEf_GET(r) (((r).cmic_cmc_sbusdma_status[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_DONEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_SBUSDMA_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 4) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 5) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 6) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 7) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 8) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 9) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_SBUSDMA_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 10) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_SBUSDMA_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 11) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 12) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_SBUSDMA_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 13) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*
 * These macros can be used to access CMIC_CMC_SBUSDMA_STATUS.
 */
#define READ_CMIC_CMC_SBUSDMA_STATUSr(u,_cmc,_ch,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SBUSDMA_STATUSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_status)
#define WRITE_CMIC_CMC_SBUSDMA_STATUSr(u,_cmc,_ch,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SBUSDMA_STATUSr_OFFSET+(0x50*(_ch))+(0x1000*(_cmc)),r._cmic_cmc_sbusdma_status)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET 0x00031004

#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNT.
 */
typedef union CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_ack_data_beat_count[1];
	uint32_t _cmic_cmc_schan_ack_data_beat_count;
} CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_t;

#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_CLR(r) (r).cmic_cmc_schan_ack_data_beat_count[0] = 0
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_SET(r,d) (r).cmic_cmc_schan_ack_data_beat_count[0] = d
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_GET(r) (r).cmic_cmc_schan_ack_data_beat_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_GET(r) (((r).cmic_cmc_schan_ack_data_beat_count[0]) & 0x1f)
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc_schan_ack_data_beat_count[0]=(((r).cmic_cmc_schan_ack_data_beat_count[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_GET(r) ((((r).cmic_cmc_schan_ack_data_beat_count[0]) >> 5) & 0x7ffffff)
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_SET(r,f) (r).cmic_cmc_schan_ack_data_beat_count[0]=(((r).cmic_cmc_schan_ack_data_beat_count[0] & ~((uint32_t)0x7ffffff << 5)) | ((((uint32_t)f) & 0x7ffffff) << 5))

/*
 * These macros can be used to access CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNT.
 */
#define READ_CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_schan_ack_data_beat_count)
#define WRITE_CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_schan_ack_data_beat_count)

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_CTRLr_OFFSET 0x00031000

#define CMIC_CMC_SCHAN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_CTRL.
 */
typedef union CMIC_CMC_SCHAN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_ctrl[1];
	uint32_t _cmic_cmc_schan_ctrl;
} CMIC_CMC_SCHAN_CTRLr_t;

#define CMIC_CMC_SCHAN_CTRLr_CLR(r) (r).cmic_cmc_schan_ctrl[0] = 0
#define CMIC_CMC_SCHAN_CTRLr_SET(r,d) (r).cmic_cmc_schan_ctrl[0] = d
#define CMIC_CMC_SCHAN_CTRLr_GET(r) (r).cmic_cmc_schan_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_CTRLr_MSG_STARTf_GET(r) (((r).cmic_cmc_schan_ctrl[0]) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_MSG_STARTf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SCHAN_CTRLr_MSG_DONEf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_MSG_DONEf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SCHAN_CTRLr_ABORTf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_ABORTf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SCHAN_CTRLr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 20) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_SCHAN_CTRLr_NACKf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 21) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_NACKf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_SCHAN_CTRLr_TIMEOUTf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 22) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_TIMEOUTf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))

/*
 * These macros can be used to access CMIC_CMC_SCHAN_CTRL.
 */
#define READ_CMIC_CMC_SCHAN_CTRLr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SCHAN_CTRLr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_schan_ctrl)
#define WRITE_CMIC_CMC_SCHAN_CTRLr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SCHAN_CTRLr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_schan_ctrl)

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_ERR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_ERRr_OFFSET 0x00031008

#define CMIC_CMC_SCHAN_ERRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_ERR.
 */
typedef union CMIC_CMC_SCHAN_ERRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_err[1];
	uint32_t _cmic_cmc_schan_err;
} CMIC_CMC_SCHAN_ERRr_t;

#define CMIC_CMC_SCHAN_ERRr_CLR(r) (r).cmic_cmc_schan_err[0] = 0
#define CMIC_CMC_SCHAN_ERRr_SET(r,d) (r).cmic_cmc_schan_err[0] = d
#define CMIC_CMC_SCHAN_ERRr_GET(r) (r).cmic_cmc_schan_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_ERRr_NACKf_GET(r) (((r).cmic_cmc_schan_err[0]) & 0x1)
#define CMIC_CMC_SCHAN_ERRr_NACKf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SCHAN_ERRr_ERR_CODEf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 4) & 0x3)
#define CMIC_CMC_SCHAN_ERRr_ERR_CODEf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define CMIC_CMC_SCHAN_ERRr_ERRBITf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 6) & 0x1)
#define CMIC_CMC_SCHAN_ERRr_ERRBITf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_SCHAN_ERRr_DATA_LENf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 7) & 0x7f)
#define CMIC_CMC_SCHAN_ERRr_DATA_LENf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define CMIC_CMC_SCHAN_ERRr_SRC_PORTf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 14) & 0x3f)
#define CMIC_CMC_SCHAN_ERRr_SRC_PORTf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3f << 14)) | ((((uint32_t)f) & 0x3f) << 14))
#define CMIC_CMC_SCHAN_ERRr_DST_PORTf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 20) & 0x3f)
#define CMIC_CMC_SCHAN_ERRr_DST_PORTf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3f << 20)) | ((((uint32_t)f) & 0x3f) << 20))
#define CMIC_CMC_SCHAN_ERRr_OP_CODEf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 26) & 0x3f)
#define CMIC_CMC_SCHAN_ERRr_OP_CODEf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3f << 26)) | ((((uint32_t)f) & 0x3f) << 26))

/*
 * These macros can be used to access CMIC_CMC_SCHAN_ERR.
 */
#define READ_CMIC_CMC_SCHAN_ERRr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SCHAN_ERRr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_schan_err)
#define WRITE_CMIC_CMC_SCHAN_ERRr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SCHAN_ERRr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_schan_err)

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_MESSAGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_MESSAGEr_OFFSET 0x0003100c

#define CMIC_CMC_SCHAN_MESSAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_MESSAGE.
 */
typedef union CMIC_CMC_SCHAN_MESSAGEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_message[1];
	uint32_t _cmic_cmc_schan_message;
} CMIC_CMC_SCHAN_MESSAGEr_t;

#define CMIC_CMC_SCHAN_MESSAGEr_CLR(r) (r).cmic_cmc_schan_message[0] = 0
#define CMIC_CMC_SCHAN_MESSAGEr_SET(r,d) (r).cmic_cmc_schan_message[0] = d
#define CMIC_CMC_SCHAN_MESSAGEr_GET(r) (r).cmic_cmc_schan_message[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_MESSAGEr_DATAf_GET(r) ((r).cmic_cmc_schan_message[0])
#define CMIC_CMC_SCHAN_MESSAGEr_DATAf_SET(r,f) (r).cmic_cmc_schan_message[0]=((uint32_t)f)

/*
 * These macros can be used to access CMIC_CMC_SCHAN_MESSAGE.
 */
#define READ_CMIC_CMC_SCHAN_MESSAGEr(u,_cmc,i,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SCHAN_MESSAGEr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_schan_message)
#define WRITE_CMIC_CMC_SCHAN_MESSAGEr(u,_cmc,i,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SCHAN_MESSAGEr_OFFSET+(4*(i))+(0x1000*(_cmc)),r._cmic_cmc_schan_message)

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_MESSAGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SW_INTR_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SW_INTR_CONFIGr_OFFSET 0x000314a8

#define CMIC_CMC_SW_INTR_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SW_INTR_CONFIG.
 */
typedef union CMIC_CMC_SW_INTR_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sw_intr_config[1];
	uint32_t _cmic_cmc_sw_intr_config;
} CMIC_CMC_SW_INTR_CONFIGr_t;

#define CMIC_CMC_SW_INTR_CONFIGr_CLR(r) (r).cmic_cmc_sw_intr_config[0] = 0
#define CMIC_CMC_SW_INTR_CONFIGr_SET(r,d) (r).cmic_cmc_sw_intr_config[0] = d
#define CMIC_CMC_SW_INTR_CONFIGr_GET(r) (r).cmic_cmc_sw_intr_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_GET(r) (((r).cmic_cmc_sw_intr_config[0]) & 0x3)
#define CMIC_CMC_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_SET(r,f) (r).cmic_cmc_sw_intr_config[0]=(((r).cmic_cmc_sw_intr_config[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define CMIC_CMC_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_GET(r) ((((r).cmic_cmc_sw_intr_config[0]) >> 2) & 0x1)
#define CMIC_CMC_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_SET(r,f) (r).cmic_cmc_sw_intr_config[0]=(((r).cmic_cmc_sw_intr_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*
 * These macros can be used to access CMIC_CMC_SW_INTR_CONFIG.
 */
#define READ_CMIC_CMC_SW_INTR_CONFIGr(u,_cmc,r) BCMDRD_DEV_READ32(u,CMIC_CMC_SW_INTR_CONFIGr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_sw_intr_config)
#define WRITE_CMIC_CMC_SW_INTR_CONFIGr(u,_cmc,r) BCMDRD_DEV_WRITE32(u,CMIC_CMC_SW_INTR_CONFIGr_OFFSET+(0x1000*(_cmc)),r._cmic_cmc_sw_intr_config)

/*******************************************************************************
 * End of 'CMIC_CMC_SW_INTR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_PCIE_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_OFFSET 0x000101ec

#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_PCIE_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_PCIE_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_pcie_pio_endianess[1];
	uint32_t _cmic_common_pcie_pio_endianess;
} CMIC_COMMON_PCIE_PIO_ENDIANESSr_t;

#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_CLR(r) (r).cmic_common_pcie_pio_endianess[0] = 0
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_pcie_pio_endianess[0] = d
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_GET(r) (r).cmic_common_pcie_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_pcie_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_pcie_pio_endianess[0]=(((r).cmic_common_pcie_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_COMMON_PCIE_PIO_ENDIANESS.
 */
#define READ_CMIC_COMMON_PCIE_PIO_ENDIANESSr(u,r) BCMDRD_DEV_READ32(u,CMIC_COMMON_PCIE_PIO_ENDIANESSr_OFFSET,r._cmic_common_pcie_pio_endianess)
#define WRITE_CMIC_COMMON_PCIE_PIO_ENDIANESSr(u,r) BCMDRD_DEV_WRITE32(u,CMIC_COMMON_PCIE_PIO_ENDIANESSr_OFFSET,r._cmic_common_pcie_pio_endianess)

/*******************************************************************************
 * End of 'CMIC_COMMON_PCIE_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_UC0_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_OFFSET 0x000101f0

#define CMIC_COMMON_UC0_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_UC0_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_UC0_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_uc0_pio_endianess[1];
	uint32_t _cmic_common_uc0_pio_endianess;
} CMIC_COMMON_UC0_PIO_ENDIANESSr_t;

#define CMIC_COMMON_UC0_PIO_ENDIANESSr_CLR(r) (r).cmic_common_uc0_pio_endianess[0] = 0
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_uc0_pio_endianess[0] = d
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_GET(r) (r).cmic_common_uc0_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_uc0_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_uc0_pio_endianess[0]=(((r).cmic_common_uc0_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_COMMON_UC0_PIO_ENDIANESS.
 */
#define READ_CMIC_COMMON_UC0_PIO_ENDIANESSr(u,r) BCMDRD_DEV_READ32(u,CMIC_COMMON_UC0_PIO_ENDIANESSr_OFFSET,r._cmic_common_uc0_pio_endianess)
#define WRITE_CMIC_COMMON_UC0_PIO_ENDIANESSr(u,r) BCMDRD_DEV_WRITE32(u,CMIC_COMMON_UC0_PIO_ENDIANESSr_OFFSET,r._cmic_common_uc0_pio_endianess)

/*******************************************************************************
 * End of 'CMIC_COMMON_UC0_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_CONFIGr_OFFSET 0x00010208

#define CMIC_PCIE_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_CONFIG.
 */
typedef union CMIC_PCIE_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_config[1];
	uint32_t _cmic_pcie_config;
} CMIC_PCIE_CONFIGr_t;

#define CMIC_PCIE_CONFIGr_CLR(r) (r).cmic_pcie_config[0] = 0
#define CMIC_PCIE_CONFIGr_SET(r,d) (r).cmic_pcie_config[0] = d
#define CMIC_PCIE_CONFIGr_GET(r) (r).cmic_pcie_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_CONFIGr_ACT_LOW_INTRf_GET(r) (((r).cmic_pcie_config[0]) & 0x1)
#define CMIC_PCIE_CONFIGr_ACT_LOW_INTRf_SET(r,f) (r).cmic_pcie_config[0]=(((r).cmic_pcie_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_CONFIGr_WRITEREQ_PLD_SIZEf_GET(r) ((((r).cmic_pcie_config[0]) >> 1) & 0x3)
#define CMIC_PCIE_CONFIGr_WRITEREQ_PLD_SIZEf_SET(r,f) (r).cmic_pcie_config[0]=(((r).cmic_pcie_config[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define CMIC_PCIE_CONFIGr_READREQ_PLD_SIZEf_GET(r) ((((r).cmic_pcie_config[0]) >> 3) & 0x3)
#define CMIC_PCIE_CONFIGr_READREQ_PLD_SIZEf_SET(r,f) (r).cmic_pcie_config[0]=(((r).cmic_pcie_config[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))

/*
 * These macros can be used to access CMIC_PCIE_CONFIG.
 */
#define READ_CMIC_PCIE_CONFIGr(u,r) BCMDRD_DEV_READ32(u,CMIC_PCIE_CONFIGr_OFFSET,r._cmic_pcie_config)
#define WRITE_CMIC_PCIE_CONFIGr(u,r) BCMDRD_DEV_WRITE32(u,CMIC_PCIE_CONFIGr_OFFSET,r._cmic_pcie_config)

/*******************************************************************************
 * End of 'CMIC_PCIE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_EP_RLS_CRED
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_EP_RLS_CREDr_OFFSET 0x0001a000

#define CMIC_RXBUF_EP_RLS_CREDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_EP_RLS_CRED.
 */
typedef union CMIC_RXBUF_EP_RLS_CREDr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_ep_rls_cred[1];
	uint32_t _cmic_rxbuf_ep_rls_cred;
} CMIC_RXBUF_EP_RLS_CREDr_t;

#define CMIC_RXBUF_EP_RLS_CREDr_CLR(r) (r).cmic_rxbuf_ep_rls_cred[0] = 0
#define CMIC_RXBUF_EP_RLS_CREDr_SET(r,d) (r).cmic_rxbuf_ep_rls_cred[0] = d
#define CMIC_RXBUF_EP_RLS_CREDr_GET(r) (r).cmic_rxbuf_ep_rls_cred[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_EP_RLS_CREDr_RELEASE_ALL_CREDITSf_GET(r) (((r).cmic_rxbuf_ep_rls_cred[0]) & 0x1)
#define CMIC_RXBUF_EP_RLS_CREDr_RELEASE_ALL_CREDITSf_SET(r,f) (r).cmic_rxbuf_ep_rls_cred[0]=(((r).cmic_rxbuf_ep_rls_cred[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CMIC_RXBUF_EP_RLS_CRED.
 */
#define READ_CMIC_RXBUF_EP_RLS_CREDr(u,r) BCMDRD_DEV_READ32(u,CMIC_RXBUF_EP_RLS_CREDr_OFFSET,r._cmic_rxbuf_ep_rls_cred)
#define WRITE_CMIC_RXBUF_EP_RLS_CREDr(u,r) BCMDRD_DEV_WRITE32(u,CMIC_RXBUF_EP_RLS_CREDr_OFFSET,r._cmic_rxbuf_ep_rls_cred)

/*******************************************************************************
 * End of 'CMIC_RXBUF_EP_RLS_CREDr'
 */




#endif /* BCMBD_CMICM_ACC_H */
