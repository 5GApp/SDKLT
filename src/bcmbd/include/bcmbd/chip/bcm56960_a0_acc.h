#ifndef BCM56960_A0_ACC_H
#define BCM56960_A0_ACC_H
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: $
 * Copyright: (c) 2018 Broadcom. All Rights Reserved. "Broadcom" refers to 
 * Broadcom Limited and/or its subsidiaries.
 * 
 * Broadcom Switch Software License
 * 
 * This license governs the use of the accompanying Broadcom software. Your 
 * use of the software indicates your acceptance of the terms and conditions 
 * of this license. If you do not agree to the terms and conditions of this 
 * license, do not use the software.
 * 1. Definitions
 *    "Licensor" means any person or entity that distributes its Work.
 *    "Software" means the original work of authorship made available under 
 *    this license.
 *    "Work" means the Software and any additions to or derivative works of 
 *    the Software that are made available under this license.
 *    The terms "reproduce," "reproduction," "derivative works," and 
 *    "distribution" have the meaning as provided under U.S. copyright law.
 *    Works, including the Software, are "made available" under this license 
 *    by including in or with the Work either (a) a copyright notice 
 *    referencing the applicability of this license to the Work, or (b) a copy 
 *    of this license.
 * 2. Grant of Copyright License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    copyright license to reproduce, prepare derivative works of, publicly 
 *    display, publicly perform, sublicense and distribute its Work and any 
 *    resulting derivative works in any form.
 * 3. Grant of Patent License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    patent license to make, have made, use, offer to sell, sell, import, and 
 *    otherwise transfer its Work, in whole or in part. This patent license 
 *    applies only to the patent claims licensable by Licensor that would be 
 *    infringed by Licensor's Work (or portion thereof) individually and 
 *    excluding any combinations with any other materials or technology.
 *    If you institute patent litigation against any Licensor (including a 
 *    cross-claim or counterclaim in a lawsuit) to enforce any patents that 
 *    you allege are infringed by any Work, then your patent license from such 
 *    Licensor to the Work shall terminate as of the date such litigation is 
 *    filed.
 * 4. Redistribution
 *    You may reproduce or distribute the Work only if (a) you do so under 
 *    this License, (b) you include a complete copy of this License with your 
 *    distribution, and (c) you retain without modification any copyright, 
 *    patent, trademark, or attribution notices that are present in the Work.
 * 5. Derivative Works
 *    You may specify that additional or different terms apply to the use, 
 *    reproduction, and distribution of your derivative works of the Work 
 *    ("Your Terms") only if (a) Your Terms provide that the limitations of 
 *    Section 7 apply to your derivative works, and (b) you identify the 
 *    specific derivative works that are subject to Your Terms. 
 *    Notwithstanding Your Terms, this license (including the redistribution 
 *    requirements in Section 4) will continue to apply to the Work itself.
 * 6. Trademarks
 *    This license does not grant any rights to use any Licensor's or its 
 *    affiliates' names, logos, or trademarks, except as necessary to 
 *    reproduce the notices described in this license.
 * 7. Limitations
 *    Platform. The Work and any derivative works thereof may only be used, or 
 *    intended for use, with a Broadcom switch integrated circuit.
 *    No Reverse Engineering. You will not use the Work to disassemble, 
 *    reverse engineer, decompile, or attempt to ascertain the underlying 
 *    technology of a Broadcom switch integrated circuit.
 * 8. Termination
 *    If you violate any term of this license, then your rights under this 
 *    license (including the license grants of Sections 2 and 3) will 
 *    terminate immediately.
 * 9. Disclaimer of Warranty
 *    THE WORK IS PROVIDED "AS IS" WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 *    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WARRANTIES OR CONDITIONS OF 
 *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR 
 *    NON-INFRINGEMENT. YOU BEAR THE RISK OF UNDERTAKING ANY ACTIVITIES UNDER 
 *    THIS LICENSE. SOME STATES' CONSUMER LAWS DO NOT ALLOW EXCLUSION OF AN 
 *    IMPLIED WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO YOU.
 * 10. Limitation of Liability
 *    EXCEPT AS PROHIBITED BY APPLICABLE LAW, IN NO EVENT AND UNDER NO LEGAL 
 *    THEORY, WHETHER IN TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE 
 *    SHALL ANY LICENSOR BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY DIRECT, 
 *    INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF 
 *    OR RELATED TO THIS LICENSE, THE USE OR INABILITY TO USE THE WORK 
 *    (INCLUDING BUT NOT LIMITED TO LOSS OF GOODWILL, BUSINESS INTERRUPTION, 
 *    LOST PROFITS OR DATA, COMPUTER FAILURE OR MALFUNCTION, OR ANY OTHER 
 *    COMMERCIAL DAMAGES OR LOSSES), EVEN IF THE LICENSOR HAS BEEN ADVISED OF 
 *    THE POSSIBILITY OF SUCH DAMAGES.
 * 
 * 
 *
 * Definition file for the BCM56960_A0.
 * This file provides all basic definitions required to program the BCM56960_A0.
 */
#include <sal/sal_libc.h>
#include <bcmdrd/bcmdrd_chip.h>
#include <bcmbd/bcmbd_cmicd.h>
#include <bcmbd/bcmbd_cmicd_mem.h>
#include <bcmbd/bcmbd_cmicd_reg.h>
#include <bcmdrd/chip/bcm56960_a0_enum.h>
#include <bcmdrd/chip/bcm56960_a0_defs.h>
#include <bcmbd/chip/bcm56960_a0_cmic_acc.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 */



/*******************************************************************************
 * MEMORY:  AGM_MONITOR_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     76
 */
/*
 * These macros can be used to access AGM_MONITOR_TABLE.
 */
#define READ_AGM_MONITOR_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(AGM_MONITOR_TABLEm_BLKACC)+1,AGM_MONITOR_TABLEm_OFFSET+i,(m._agm_monitor_table),3)
#define WRITE_AGM_MONITOR_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(AGM_MONITOR_TABLEm_BLKACC)+1,AGM_MONITOR_TABLEm_OFFSET+i,&(m._agm_monitor_table),3)

/*******************************************************************************
 * End of 'AGM_MONITOR_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  ALTERNATE_EMIRROR_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access ALTERNATE_EMIRROR_BITMAP.
 */
#define READ_ALTERNATE_EMIRROR_BITMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ALTERNATE_EMIRROR_BITMAPm_BLKACC)+1,ALTERNATE_EMIRROR_BITMAPm_OFFSET+i,(m._alternate_emirror_bitmap),1)
#define WRITE_ALTERNATE_EMIRROR_BITMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ALTERNATE_EMIRROR_BITMAPm_BLKACC)+1,ALTERNATE_EMIRROR_BITMAPm_OFFSET+i,&(m._alternate_emirror_bitmap),1)

/*******************************************************************************
 * End of 'ALTERNATE_EMIRROR_BITMAPm'
 */




/*******************************************************************************
 * REGISTER:  ASF_CREDIT_THRESH_HI
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access ASF_CREDIT_THRESH_HI.
 */
#define READ_ASF_CREDIT_THRESH_HIr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,ASF_CREDIT_THRESH_HIr_BLKACC,4,0,p,ASF_CREDIT_THRESH_HIr_OFFSET,0,(r._asf_credit_thresh_hi),1)
#define WRITE_ASF_CREDIT_THRESH_HIr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,ASF_CREDIT_THRESH_HIr_BLKACC,4,0,p,ASF_CREDIT_THRESH_HIr_OFFSET,0,&(r._asf_credit_thresh_hi),1)

/*******************************************************************************
 * End of 'ASF_CREDIT_THRESH_HIr'
 */




/*******************************************************************************
 * REGISTER:  ASF_EPORT_CFG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access ASF_EPORT_CFG.
 */
#define READ_ASF_EPORT_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,ASF_EPORT_CFGr_BLKACC,4,0,p,ASF_EPORT_CFGr_OFFSET,0,(r._asf_eport_cfg),1)
#define WRITE_ASF_EPORT_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,ASF_EPORT_CFGr_BLKACC,4,0,p,ASF_EPORT_CFGr_OFFSET,0,&(r._asf_eport_cfg),1)

/*******************************************************************************
 * End of 'ASF_EPORT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  ASF_IPORT_CFG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access ASF_IPORT_CFG.
 */
#define READ_ASF_IPORT_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,ASF_IPORT_CFGr_BLKACC,4,0,p,ASF_IPORT_CFGr_OFFSET,0,(r._asf_iport_cfg),1)
#define WRITE_ASF_IPORT_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,ASF_IPORT_CFGr_BLKACC,4,0,p,ASF_IPORT_CFGr_OFFSET,0,&(r._asf_iport_cfg),1)

/*******************************************************************************
 * End of 'ASF_IPORT_CFGr'
 */




/*******************************************************************************
 * REGISTER:  AUX_ARB_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access AUX_ARB_CONTROL.
 */
#define READ_AUX_ARB_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,AUX_ARB_CONTROLr_BLKACC,1,n,0,AUX_ARB_CONTROLr_OFFSET,0,(r._aux_arb_control),1)
#define WRITE_AUX_ARB_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,AUX_ARB_CONTROLr_BLKACC,1,n,0,AUX_ARB_CONTROLr_OFFSET,0,&(r._aux_arb_control),1)
#define WRITE_AUX_ARB_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,AUX_ARB_CONTROLr_BLKACC,1,-1,0,AUX_ARB_CONTROLr_OFFSET,0,&(r._aux_arb_control),1)

/*******************************************************************************
 * End of 'AUX_ARB_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AUX_L2_BULK_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access AUX_L2_BULK_CONTROL.
 */
#define READ_AUX_L2_BULK_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,AUX_L2_BULK_CONTROLr_BLKACC,1,AUX_L2_BULK_CONTROLr_OFFSET,0,(r._aux_l2_bulk_control), 1)
#define WRITE_AUX_L2_BULK_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,AUX_L2_BULK_CONTROLr_BLKACC,1,AUX_L2_BULK_CONTROLr_OFFSET,0,&(r._aux_l2_bulk_control), 1)

/*******************************************************************************
 * End of 'AUX_L2_BULK_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_CTRL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_CTRL.
 */
#define READ_AVS_CTRLr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_CTRLr_BLKACC,7,AVS_CTRLr_OFFSET,0,(r._avs_ctrl), 1)
#define WRITE_AVS_CTRLr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_CTRLr_BLKACC,7,AVS_CTRLr_OFFSET,0,&(r._avs_ctrl), 1)

/*******************************************************************************
 * End of 'AVS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_ADC_SETTLING_TIME
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_ADC_SETTLING_TIME.
 */
#define READ_AVS_REG_HW_MNTR_ADC_SETTLING_TIMEr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_ADC_SETTLING_TIMEr_BLKACC,59,AVS_REG_HW_MNTR_ADC_SETTLING_TIMEr_OFFSET,0,(r._avs_reg_hw_mntr_adc_settling_time), 1)
#define WRITE_AVS_REG_HW_MNTR_ADC_SETTLING_TIMEr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_ADC_SETTLING_TIMEr_BLKACC,59,AVS_REG_HW_MNTR_ADC_SETTLING_TIMEr_OFFSET,0,&(r._avs_reg_hw_mntr_adc_settling_time), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_ADC_SETTLING_TIMEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS.
 */
#define READ_AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGSr_BLKACC,59,AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGSr_OFFSET,0,(r._avs_reg_hw_mntr_avs_interrupt_flags), 1)
#define WRITE_AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGSr_BLKACC,59,AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGSr_OFFSET,0,&(r._avs_reg_hw_mntr_avs_interrupt_flags), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS_CLEAR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS_CLEAR.
 */
#define READ_AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS_CLEARr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS_CLEARr_BLKACC,59,AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS_CLEARr_OFFSET,0,(r._avs_reg_hw_mntr_avs_interrupt_flags_clear), 1)
#define WRITE_AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS_CLEARr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS_CLEARr_BLKACC,59,AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS_CLEARr_OFFSET,0,&(r._avs_reg_hw_mntr_avs_interrupt_flags_clear), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_AVS_INTERRUPT_FLAGS_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_AVS_REGISTERS_LOCKS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_AVS_REGISTERS_LOCKS.
 */
#define READ_AVS_REG_HW_MNTR_AVS_REGISTERS_LOCKSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_AVS_REGISTERS_LOCKSr_BLKACC,59,AVS_REG_HW_MNTR_AVS_REGISTERS_LOCKSr_OFFSET,0,(r._avs_reg_hw_mntr_avs_registers_locks), 1)
#define WRITE_AVS_REG_HW_MNTR_AVS_REGISTERS_LOCKSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_AVS_REGISTERS_LOCKSr_BLKACC,59,AVS_REG_HW_MNTR_AVS_REGISTERS_LOCKSr_OFFSET,0,&(r._avs_reg_hw_mntr_avs_registers_locks), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_AVS_REGISTERS_LOCKSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_AVS_SPARE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_AVS_SPARE.
 */
#define READ_AVS_REG_HW_MNTR_AVS_SPAREr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_AVS_SPAREr_BLKACC,59,AVS_REG_HW_MNTR_AVS_SPAREr_OFFSET,(i)*4,(r._avs_reg_hw_mntr_avs_spare), 1)
#define WRITE_AVS_REG_HW_MNTR_AVS_SPAREr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_AVS_SPAREr_BLKACC,59,AVS_REG_HW_MNTR_AVS_SPAREr_OFFSET,(i)*4,&(r._avs_reg_hw_mntr_avs_spare), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_AVS_SPAREr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_AVS_SPARE_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_AVS_SPARE_0.
 */
#define READ_AVS_REG_HW_MNTR_AVS_SPARE_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_AVS_SPARE_0r_BLKACC,59,AVS_REG_HW_MNTR_AVS_SPARE_0r_OFFSET,0,(r._avs_reg_hw_mntr_avs_spare_0), 1)
#define WRITE_AVS_REG_HW_MNTR_AVS_SPARE_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_AVS_SPARE_0r_BLKACC,59,AVS_REG_HW_MNTR_AVS_SPARE_0r_OFFSET,0,&(r._avs_reg_hw_mntr_avs_spare_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_AVS_SPARE_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_AVS_SPARE_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_AVS_SPARE_1.
 */
#define READ_AVS_REG_HW_MNTR_AVS_SPARE_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_AVS_SPARE_1r_BLKACC,59,AVS_REG_HW_MNTR_AVS_SPARE_1r_OFFSET,0,(r._avs_reg_hw_mntr_avs_spare_1), 1)
#define WRITE_AVS_REG_HW_MNTR_AVS_SPARE_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_AVS_SPARE_1r_BLKACC,59,AVS_REG_HW_MNTR_AVS_SPARE_1r_OFFSET,0,&(r._avs_reg_hw_mntr_avs_spare_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_AVS_SPARE_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0.
 */
#define READ_AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r_OFFSET,0,(r._avs_reg_hw_mntr_enable_default_cen_rosc_0), 1)
#define WRITE_AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r_OFFSET,0,&(r._avs_reg_hw_mntr_enable_default_cen_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_1.
 */
#define READ_AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_1r_OFFSET,0,(r._avs_reg_hw_mntr_enable_default_cen_rosc_1), 1)
#define WRITE_AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_1r_OFFSET,0,&(r._avs_reg_hw_mntr_enable_default_cen_rosc_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_ENABLE_DEFAULT_CEN_ROSC_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_ENABLE_DEFAULT_PVT_MNTR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_ENABLE_DEFAULT_PVT_MNTR.
 */
#define READ_AVS_REG_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr_BLKACC,59,AVS_REG_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr_OFFSET,0,(r._avs_reg_hw_mntr_enable_default_pvt_mntr), 1)
#define WRITE_AVS_REG_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr_BLKACC,59,AVS_REG_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr_OFFSET,0,&(r._avs_reg_hw_mntr_enable_default_pvt_mntr), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_ENABLE_DEFAULT_PVT_MNTRr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0.
 */
#define READ_AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r_OFFSET,0,(r._avs_reg_hw_mntr_idle_state_0_cen_rosc_0), 1)
#define WRITE_AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r_OFFSET,0,&(r._avs_reg_hw_mntr_idle_state_0_cen_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_1.
 */
#define READ_AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_1r_OFFSET,0,(r._avs_reg_hw_mntr_idle_state_0_cen_rosc_1), 1)
#define WRITE_AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_1r_OFFSET,0,&(r._avs_reg_hw_mntr_idle_state_0_cen_rosc_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_IDLE_STATE_0_CEN_ROSC_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN.
 */
#define READ_AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_ENr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_ENr_BLKACC,59,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_ENr_OFFSET,0,(r._avs_reg_hw_mntr_interrupt_pow_wdog_en), 1)
#define WRITE_AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_ENr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_ENr_BLKACC,59,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_ENr_OFFSET,0,&(r._avs_reg_hw_mntr_interrupt_pow_wdog_en), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_ENr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_1.
 */
#define READ_AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_1r_BLKACC,59,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_1r_OFFSET,0,(r._avs_reg_hw_mntr_interrupt_pow_wdog_en_1), 1)
#define WRITE_AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_1r_BLKACC,59,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_1r_OFFSET,0,&(r._avs_reg_hw_mntr_interrupt_pow_wdog_en_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_2.
 */
#define READ_AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_2r_BLKACC,59,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_2r_OFFSET,0,(r._avs_reg_hw_mntr_interrupt_pow_wdog_en_2), 1)
#define WRITE_AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_2r_BLKACC,59,AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_2r_OFFSET,0,&(r._avs_reg_hw_mntr_interrupt_pow_wdog_en_2), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_INTERRUPT_POW_WDOG_EN_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_INTERRUPT_SW_MEASUREMENT_DONE_EN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_INTERRUPT_SW_MEASUREMENT_DONE_EN.
 */
#define READ_AVS_REG_HW_MNTR_INTERRUPT_SW_MEASUREMENT_DONE_ENr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_INTERRUPT_SW_MEASUREMENT_DONE_ENr_BLKACC,59,AVS_REG_HW_MNTR_INTERRUPT_SW_MEASUREMENT_DONE_ENr_OFFSET,0,(r._avs_reg_hw_mntr_interrupt_sw_measurement_done_en), 1)
#define WRITE_AVS_REG_HW_MNTR_INTERRUPT_SW_MEASUREMENT_DONE_ENr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_INTERRUPT_SW_MEASUREMENT_DONE_ENr_BLKACC,59,AVS_REG_HW_MNTR_INTERRUPT_SW_MEASUREMENT_DONE_ENr_OFFSET,0,&(r._avs_reg_hw_mntr_interrupt_sw_measurement_done_en), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_INTERRUPT_SW_MEASUREMENT_DONE_ENr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_LAST_MEASURED_SENSOR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_LAST_MEASURED_SENSOR.
 */
#define READ_AVS_REG_HW_MNTR_LAST_MEASURED_SENSORr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_LAST_MEASURED_SENSORr_BLKACC,59,AVS_REG_HW_MNTR_LAST_MEASURED_SENSORr_OFFSET,0,(r._avs_reg_hw_mntr_last_measured_sensor), 1)
#define WRITE_AVS_REG_HW_MNTR_LAST_MEASURED_SENSORr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_LAST_MEASURED_SENSORr_BLKACC,59,AVS_REG_HW_MNTR_LAST_MEASURED_SENSORr_OFFSET,0,&(r._avs_reg_hw_mntr_last_measured_sensor), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_LAST_MEASURED_SENSORr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r_OFFSET,0,(r._avs_reg_hw_mntr_measurements_init_cen_rosc_0), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r_OFFSET,0,&(r._avs_reg_hw_mntr_measurements_init_cen_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_1.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_1r_OFFSET,0,(r._avs_reg_hw_mntr_measurements_init_cen_rosc_1), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_1r_OFFSET,0,&(r._avs_reg_hw_mntr_measurements_init_cen_rosc_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_CEN_ROSC_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_POW_WDOG
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_POW_WDOG.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr_OFFSET,0,(r._avs_reg_hw_mntr_measurements_init_pow_wdog), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr_OFFSET,0,&(r._avs_reg_hw_mntr_measurements_init_pow_wdog), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_POW_WDOGr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTR.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr_OFFSET,0,(r._avs_reg_hw_mntr_measurements_init_pvt_mntr), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr_OFFSET,0,&(r._avs_reg_hw_mntr_measurements_init_pvt_mntr), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_PVT_MNTRr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSCr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSCr_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSCr_OFFSET,(i)*4,(r._avs_reg_hw_mntr_measurements_init_rmt_rosc), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSCr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSCr_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSCr_OFFSET,(i)*4,&(r._avs_reg_hw_mntr_measurements_init_rmt_rosc), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSCr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_0.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_0r_OFFSET,0,(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_0), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_0r_OFFSET,0,&(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_1.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_1r_OFFSET,0,(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_1), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_1r_OFFSET,0,&(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_2.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_2r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_2r_OFFSET,0,(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_2), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_2r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_2r_OFFSET,0,&(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_2), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_3.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_3r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_3r_OFFSET,0,(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_3), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_3r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_3r_OFFSET,0,&(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_3), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_4
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_4.
 */
#define READ_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_4r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_4r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_4r_OFFSET,0,(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_4), 1)
#define WRITE_AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_4r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_4r_BLKACC,59,AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_4r_OFFSET,0,&(r._avs_reg_hw_mntr_measurements_init_rmt_rosc_4), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_MEASUREMENTS_INIT_RMT_ROSC_4r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE.
 */
#define READ_AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPEr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPEr_BLKACC,59,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPEr_OFFSET,0,(r._avs_reg_hw_mntr_remote_sensor_type), 1)
#define WRITE_AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPEr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPEr_BLKACC,59,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPEr_OFFSET,0,&(r._avs_reg_hw_mntr_remote_sensor_type), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_1.
 */
#define READ_AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_1r_BLKACC,59,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_1r_OFFSET,0,(r._avs_reg_hw_mntr_remote_sensor_type_1), 1)
#define WRITE_AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_1r_BLKACC,59,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_1r_OFFSET,0,&(r._avs_reg_hw_mntr_remote_sensor_type_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_2.
 */
#define READ_AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_2r_BLKACC,59,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_2r_OFFSET,0,(r._avs_reg_hw_mntr_remote_sensor_type_2), 1)
#define WRITE_AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_2r_BLKACC,59,AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_2r_OFFSET,0,&(r._avs_reg_hw_mntr_remote_sensor_type_2), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_REMOTE_SENSOR_TYPE_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_ROSC_COUNTING_MODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_ROSC_COUNTING_MODE.
 */
#define READ_AVS_REG_HW_MNTR_ROSC_COUNTING_MODEr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_ROSC_COUNTING_MODEr_BLKACC,59,AVS_REG_HW_MNTR_ROSC_COUNTING_MODEr_OFFSET,0,(r._avs_reg_hw_mntr_rosc_counting_mode), 1)
#define WRITE_AVS_REG_HW_MNTR_ROSC_COUNTING_MODEr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_ROSC_COUNTING_MODEr_BLKACC,59,AVS_REG_HW_MNTR_ROSC_COUNTING_MODEr_OFFSET,0,&(r._avs_reg_hw_mntr_rosc_counting_mode), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_ROSC_COUNTING_MODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROL.
 */
#define READ_AVS_REG_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr_BLKACC,59,AVS_REG_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr_OFFSET,0,(r._avs_reg_hw_mntr_rosc_measurement_time_control), 1)
#define WRITE_AVS_REG_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr_BLKACC,59,AVS_REG_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr_OFFSET,0,&(r._avs_reg_hw_mntr_rosc_measurement_time_control), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_ROSC_MEASUREMENT_TIME_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_INIT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_INIT.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_INITr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_INITr_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_INITr_OFFSET,0,(r._avs_reg_hw_mntr_sequencer_init), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_INITr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_INITr_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_INITr_OFFSET,0,&(r._avs_reg_hw_mntr_sequencer_init), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_INITr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r_OFFSET,0,(r._avs_reg_hw_mntr_sequencer_mask_cen_rosc_0), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r_OFFSET,0,&(r._avs_reg_hw_mntr_sequencer_mask_cen_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_1.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_1r_OFFSET,0,(r._avs_reg_hw_mntr_sequencer_mask_cen_rosc_1), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_1r_OFFSET,0,&(r._avs_reg_hw_mntr_sequencer_mask_cen_rosc_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_MASK_CEN_ROSC_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_MASK_PVT_MNTR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_MASK_PVT_MNTR.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr_OFFSET,0,(r._avs_reg_hw_mntr_sequencer_mask_pvt_mntr), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr_OFFSET,0,&(r._avs_reg_hw_mntr_sequencer_mask_pvt_mntr), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_MASK_PVT_MNTRr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSCr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSCr_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSCr_OFFSET,(i)*4,(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSCr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSCr_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSCr_OFFSET,(i)*4,&(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSCr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_0.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_0r_OFFSET,0,(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_0), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_0r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_0r_OFFSET,0,&(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_1.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_1r_OFFSET,0,(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_1), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_1r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_1r_OFFSET,0,&(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_2.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_2r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_2r_OFFSET,0,(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_2), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_2r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_2r_OFFSET,0,&(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_2), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_3.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_3r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_3r_OFFSET,0,(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_3), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_3r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_3r_OFFSET,0,&(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_3), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_4
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_4.
 */
#define READ_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_4r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_4r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_4r_OFFSET,0,(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_4), 1)
#define WRITE_AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_4r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_4r_BLKACC,59,AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_4r_OFFSET,0,&(r._avs_reg_hw_mntr_sequencer_mask_rmt_rosc_4), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SEQUENCER_MASK_RMT_ROSC_4r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SW_CONTROLS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SW_CONTROLS.
 */
#define READ_AVS_REG_HW_MNTR_SW_CONTROLSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SW_CONTROLSr_BLKACC,59,AVS_REG_HW_MNTR_SW_CONTROLSr_OFFSET,0,(r._avs_reg_hw_mntr_sw_controls), 1)
#define WRITE_AVS_REG_HW_MNTR_SW_CONTROLSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SW_CONTROLSr_BLKACC,59,AVS_REG_HW_MNTR_SW_CONTROLSr_OFFSET,0,&(r._avs_reg_hw_mntr_sw_controls), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SW_CONTROLSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_SW_MEASUREMENT_UNIT_BUSY
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_SW_MEASUREMENT_UNIT_BUSY.
 */
#define READ_AVS_REG_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr_BLKACC,59,AVS_REG_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr_OFFSET,0,(r._avs_reg_hw_mntr_sw_measurement_unit_busy), 1)
#define WRITE_AVS_REG_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr_BLKACC,59,AVS_REG_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr_OFFSET,0,&(r._avs_reg_hw_mntr_sw_measurement_unit_busy), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_SW_MEASUREMENT_UNIT_BUSYr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_TEMPERATURE_RESET_ENABLE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_TEMPERATURE_RESET_ENABLE.
 */
#define READ_AVS_REG_HW_MNTR_TEMPERATURE_RESET_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_TEMPERATURE_RESET_ENABLEr_BLKACC,59,AVS_REG_HW_MNTR_TEMPERATURE_RESET_ENABLEr_OFFSET,0,(r._avs_reg_hw_mntr_temperature_reset_enable), 1)
#define WRITE_AVS_REG_HW_MNTR_TEMPERATURE_RESET_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_TEMPERATURE_RESET_ENABLEr_BLKACC,59,AVS_REG_HW_MNTR_TEMPERATURE_RESET_ENABLEr_OFFSET,0,&(r._avs_reg_hw_mntr_temperature_reset_enable), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_TEMPERATURE_RESET_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_HW_MNTR_TEMPERATURE_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_HW_MNTR_TEMPERATURE_THRESHOLD.
 */
#define READ_AVS_REG_HW_MNTR_TEMPERATURE_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_HW_MNTR_TEMPERATURE_THRESHOLDr_BLKACC,59,AVS_REG_HW_MNTR_TEMPERATURE_THRESHOLDr_OFFSET,0,(r._avs_reg_hw_mntr_temperature_threshold), 1)
#define WRITE_AVS_REG_HW_MNTR_TEMPERATURE_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_HW_MNTR_TEMPERATURE_THRESHOLDr_BLKACC,59,AVS_REG_HW_MNTR_TEMPERATURE_THRESHOLDr_OFFSET,0,&(r._avs_reg_hw_mntr_temperature_threshold), 1)

/*******************************************************************************
 * End of 'AVS_REG_HW_MNTR_TEMPERATURE_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_MISC_CONTROL_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_MISC_CONTROL_0.
 */
#define READ_AVS_REG_MISC_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_MISC_CONTROL_0r_BLKACC,59,AVS_REG_MISC_CONTROL_0r_OFFSET,0,(r._avs_reg_misc_control_0), 1)
#define WRITE_AVS_REG_MISC_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_MISC_CONTROL_0r_BLKACC,59,AVS_REG_MISC_CONTROL_0r_OFFSET,0,&(r._avs_reg_misc_control_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_MISC_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_MISC_CONTROL_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_MISC_CONTROL_1.
 */
#define READ_AVS_REG_MISC_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_MISC_CONTROL_1r_BLKACC,59,AVS_REG_MISC_CONTROL_1r_OFFSET,0,(r._avs_reg_misc_control_1), 1)
#define WRITE_AVS_REG_MISC_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_MISC_CONTROL_1r_BLKACC,59,AVS_REG_MISC_CONTROL_1r_OFFSET,0,&(r._avs_reg_misc_control_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_MISC_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_MISC_CONTROL_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_MISC_CONTROL_2.
 */
#define READ_AVS_REG_MISC_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_MISC_CONTROL_2r_BLKACC,59,AVS_REG_MISC_CONTROL_2r_OFFSET,0,(r._avs_reg_misc_control_2), 1)
#define WRITE_AVS_REG_MISC_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_MISC_CONTROL_2r_BLKACC,59,AVS_REG_MISC_CONTROL_2r_OFFSET,0,&(r._avs_reg_misc_control_2), 1)

/*******************************************************************************
 * End of 'AVS_REG_MISC_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_MISC_CONTROL_3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_MISC_CONTROL_3.
 */
#define READ_AVS_REG_MISC_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_MISC_CONTROL_3r_BLKACC,59,AVS_REG_MISC_CONTROL_3r_OFFSET,0,(r._avs_reg_misc_control_3), 1)
#define WRITE_AVS_REG_MISC_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_MISC_CONTROL_3r_BLKACC,59,AVS_REG_MISC_CONTROL_3r_OFFSET,0,&(r._avs_reg_misc_control_3), 1)

/*******************************************************************************
 * End of 'AVS_REG_MISC_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_MISC_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_MISC_STATUS.
 */
#define READ_AVS_REG_MISC_STATUSr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_MISC_STATUSr_BLKACC,59,AVS_REG_MISC_STATUSr_OFFSET,i,(r._avs_reg_misc_status), 1)
#define WRITE_AVS_REG_MISC_STATUSr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_MISC_STATUSr_BLKACC,59,AVS_REG_MISC_STATUSr_OFFSET,i,&(r._avs_reg_misc_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_MISC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_MISC_STATUS_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_MISC_STATUS_0.
 */
#define READ_AVS_REG_MISC_STATUS_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_MISC_STATUS_0r_BLKACC,59,AVS_REG_MISC_STATUS_0r_OFFSET,0,(r._avs_reg_misc_status_0), 1)
#define WRITE_AVS_REG_MISC_STATUS_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_MISC_STATUS_0r_BLKACC,59,AVS_REG_MISC_STATUS_0r_OFFSET,0,&(r._avs_reg_misc_status_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_MISC_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_MISC_STATUS_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_MISC_STATUS_1.
 */
#define READ_AVS_REG_MISC_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_MISC_STATUS_1r_BLKACC,59,AVS_REG_MISC_STATUS_1r_OFFSET,0,(r._avs_reg_misc_status_1), 1)
#define WRITE_AVS_REG_MISC_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_MISC_STATUS_1r_BLKACC,59,AVS_REG_MISC_STATUS_1r_OFFSET,0,&(r._avs_reg_misc_status_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_MISC_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_REGISTERS_CLEAR_PMB_ERROR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_REGISTERS_CLEAR_PMB_ERROR_STATUS.
 */
#define READ_AVS_REG_PMB_REGISTERS_CLEAR_PMB_ERROR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_REGISTERS_CLEAR_PMB_ERROR_STATUSr_BLKACC,59,AVS_REG_PMB_REGISTERS_CLEAR_PMB_ERROR_STATUSr_OFFSET,0,(r._avs_reg_pmb_registers_clear_pmb_error_status), 1)
#define WRITE_AVS_REG_PMB_REGISTERS_CLEAR_PMB_ERROR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_REGISTERS_CLEAR_PMB_ERROR_STATUSr_BLKACC,59,AVS_REG_PMB_REGISTERS_CLEAR_PMB_ERROR_STATUSr_OFFSET,0,&(r._avs_reg_pmb_registers_clear_pmb_error_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_REGISTERS_CLEAR_PMB_ERROR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_REGISTERS_PMB_ERROR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_REGISTERS_PMB_ERROR_STATUS.
 */
#define READ_AVS_REG_PMB_REGISTERS_PMB_ERROR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_REGISTERS_PMB_ERROR_STATUSr_BLKACC,59,AVS_REG_PMB_REGISTERS_PMB_ERROR_STATUSr_OFFSET,0,(r._avs_reg_pmb_registers_pmb_error_status), 1)
#define WRITE_AVS_REG_PMB_REGISTERS_PMB_ERROR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_REGISTERS_PMB_ERROR_STATUSr_BLKACC,59,AVS_REG_PMB_REGISTERS_PMB_ERROR_STATUSr_OFFSET,0,&(r._avs_reg_pmb_registers_pmb_error_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_REGISTERS_PMB_ERROR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_REGISTERS_PMB_TIMEOUT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_REGISTERS_PMB_TIMEOUT.
 */
#define READ_AVS_REG_PMB_REGISTERS_PMB_TIMEOUTr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_REGISTERS_PMB_TIMEOUTr_BLKACC,59,AVS_REG_PMB_REGISTERS_PMB_TIMEOUTr_OFFSET,0,(r._avs_reg_pmb_registers_pmb_timeout), 1)
#define WRITE_AVS_REG_PMB_REGISTERS_PMB_TIMEOUTr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_REGISTERS_PMB_TIMEOUTr_BLKACC,59,AVS_REG_PMB_REGISTERS_PMB_TIMEOUTr_OFFSET,0,&(r._avs_reg_pmb_registers_pmb_timeout), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_REGISTERS_PMB_TIMEOUTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_AVS_PWD_ACC_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_AVS_PWD_ACC_CONTROL.
 */
#define READ_AVS_REG_PMB_SLAVE_AVS_PWD_ACC_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_AVS_PWD_ACC_CONTROLr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_PWD_ACC_CONTROLr_OFFSET,i,(r._avs_reg_pmb_slave_avs_pwd_acc_control), 1)
#define WRITE_AVS_REG_PMB_SLAVE_AVS_PWD_ACC_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_AVS_PWD_ACC_CONTROLr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_PWD_ACC_CONTROLr_OFFSET,i,&(r._avs_reg_pmb_slave_avs_pwd_acc_control), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_AVS_PWD_ACC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_AVS_PWD_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_AVS_PWD_CONTROL.
 */
#define READ_AVS_REG_PMB_SLAVE_AVS_PWD_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_AVS_PWD_CONTROLr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_PWD_CONTROLr_OFFSET,i,(r._avs_reg_pmb_slave_avs_pwd_control), 1)
#define WRITE_AVS_REG_PMB_SLAVE_AVS_PWD_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_AVS_PWD_CONTROLr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_PWD_CONTROLr_OFFSET,i,&(r._avs_reg_pmb_slave_avs_pwd_control), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_AVS_PWD_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_AVS_ROSC_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_AVS_ROSC_CONTROL.
 */
#define READ_AVS_REG_PMB_SLAVE_AVS_ROSC_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_AVS_ROSC_CONTROLr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_ROSC_CONTROLr_OFFSET,i,(r._avs_reg_pmb_slave_avs_rosc_control), 1)
#define WRITE_AVS_REG_PMB_SLAVE_AVS_ROSC_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_AVS_ROSC_CONTROLr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_ROSC_CONTROLr_OFFSET,i,&(r._avs_reg_pmb_slave_avs_rosc_control), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_AVS_ROSC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_AVS_ROSC_COUNT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_AVS_ROSC_COUNT.
 */
#define READ_AVS_REG_PMB_SLAVE_AVS_ROSC_COUNTr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_AVS_ROSC_COUNTr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_ROSC_COUNTr_OFFSET,i,(r._avs_reg_pmb_slave_avs_rosc_count), 1)
#define WRITE_AVS_REG_PMB_SLAVE_AVS_ROSC_COUNTr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_AVS_ROSC_COUNTr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_ROSC_COUNTr_OFFSET,i,&(r._avs_reg_pmb_slave_avs_rosc_count), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_AVS_ROSC_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_AVS_ROSC_H_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_AVS_ROSC_H_THRESHOLD.
 */
#define READ_AVS_REG_PMB_SLAVE_AVS_ROSC_H_THRESHOLDr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_AVS_ROSC_H_THRESHOLDr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_ROSC_H_THRESHOLDr_OFFSET,i,(r._avs_reg_pmb_slave_avs_rosc_h_threshold), 1)
#define WRITE_AVS_REG_PMB_SLAVE_AVS_ROSC_H_THRESHOLDr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_AVS_ROSC_H_THRESHOLDr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_ROSC_H_THRESHOLDr_OFFSET,i,&(r._avs_reg_pmb_slave_avs_rosc_h_threshold), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_AVS_ROSC_H_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_AVS_ROSC_S_THRESHOLD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_AVS_ROSC_S_THRESHOLD.
 */
#define READ_AVS_REG_PMB_SLAVE_AVS_ROSC_S_THRESHOLDr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_AVS_ROSC_S_THRESHOLDr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_ROSC_S_THRESHOLDr_OFFSET,i,(r._avs_reg_pmb_slave_avs_rosc_s_threshold), 1)
#define WRITE_AVS_REG_PMB_SLAVE_AVS_ROSC_S_THRESHOLDr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_AVS_ROSC_S_THRESHOLDr_BLKACC,59,AVS_REG_PMB_SLAVE_AVS_ROSC_S_THRESHOLDr_OFFSET,i,&(r._avs_reg_pmb_slave_avs_rosc_s_threshold), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_AVS_ROSC_S_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_BPCM_CAPABILITY
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_BPCM_CAPABILITY.
 */
#define READ_AVS_REG_PMB_SLAVE_BPCM_CAPABILITYr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_BPCM_CAPABILITYr_BLKACC,59,AVS_REG_PMB_SLAVE_BPCM_CAPABILITYr_OFFSET,i,(r._avs_reg_pmb_slave_bpcm_capability), 1)
#define WRITE_AVS_REG_PMB_SLAVE_BPCM_CAPABILITYr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_BPCM_CAPABILITYr_BLKACC,59,AVS_REG_PMB_SLAVE_BPCM_CAPABILITYr_OFFSET,i,&(r._avs_reg_pmb_slave_bpcm_capability), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_BPCM_CAPABILITYr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_BPCM_CONTROL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_BPCM_CONTROL.
 */
#define READ_AVS_REG_PMB_SLAVE_BPCM_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_BPCM_CONTROLr_BLKACC,59,AVS_REG_PMB_SLAVE_BPCM_CONTROLr_OFFSET,i,(r._avs_reg_pmb_slave_bpcm_control), 1)
#define WRITE_AVS_REG_PMB_SLAVE_BPCM_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_BPCM_CONTROLr_BLKACC,59,AVS_REG_PMB_SLAVE_BPCM_CONTROLr_OFFSET,i,&(r._avs_reg_pmb_slave_bpcm_control), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_BPCM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_BPCM_ID
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_BPCM_ID.
 */
#define READ_AVS_REG_PMB_SLAVE_BPCM_IDr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_BPCM_IDr_BLKACC,59,AVS_REG_PMB_SLAVE_BPCM_IDr_OFFSET,i,(r._avs_reg_pmb_slave_bpcm_id), 1)
#define WRITE_AVS_REG_PMB_SLAVE_BPCM_IDr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_BPCM_IDr_BLKACC,59,AVS_REG_PMB_SLAVE_BPCM_IDr_OFFSET,i,&(r._avs_reg_pmb_slave_bpcm_id), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_BPCM_IDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PMB_SLAVE_BPCM_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PMB_SLAVE_BPCM_STATUS.
 */
#define READ_AVS_REG_PMB_SLAVE_BPCM_STATUSr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PMB_SLAVE_BPCM_STATUSr_BLKACC,59,AVS_REG_PMB_SLAVE_BPCM_STATUSr_OFFSET,i,(r._avs_reg_pmb_slave_bpcm_status), 1)
#define WRITE_AVS_REG_PMB_SLAVE_BPCM_STATUSr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PMB_SLAVE_BPCM_STATUSr_BLKACC,59,AVS_REG_PMB_SLAVE_BPCM_STATUSr_OFFSET,i,&(r._avs_reg_pmb_slave_bpcm_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_PMB_SLAVE_BPCM_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PVT_MNTR_CONFIG_AVS_TOP_ANALOG_SRAM_INDICATOR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PVT_MNTR_CONFIG_AVS_TOP_ANALOG_SRAM_INDICATOR.
 */
#define READ_AVS_REG_PVT_MNTR_CONFIG_AVS_TOP_ANALOG_SRAM_INDICATORr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PVT_MNTR_CONFIG_AVS_TOP_ANALOG_SRAM_INDICATORr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_AVS_TOP_ANALOG_SRAM_INDICATORr_OFFSET,0,(r._avs_reg_pvt_mntr_config_avs_top_analog_sram_indicator), 1)
#define WRITE_AVS_REG_PVT_MNTR_CONFIG_AVS_TOP_ANALOG_SRAM_INDICATORr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PVT_MNTR_CONFIG_AVS_TOP_ANALOG_SRAM_INDICATORr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_AVS_TOP_ANALOG_SRAM_INDICATORr_OFFSET,0,&(r._avs_reg_pvt_mntr_config_avs_top_analog_sram_indicator), 1)

/*******************************************************************************
 * End of 'AVS_REG_PVT_MNTR_CONFIG_AVS_TOP_ANALOG_SRAM_INDICATORr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PVT_MNTR_CONFIG_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PVT_MNTR_CONFIG_DAC_CODE.
 */
#define READ_AVS_REG_PVT_MNTR_CONFIG_DAC_CODEr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PVT_MNTR_CONFIG_DAC_CODEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_DAC_CODEr_OFFSET,0,(r._avs_reg_pvt_mntr_config_dac_code), 1)
#define WRITE_AVS_REG_PVT_MNTR_CONFIG_DAC_CODEr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PVT_MNTR_CONFIG_DAC_CODEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_DAC_CODEr_OFFSET,0,&(r._avs_reg_pvt_mntr_config_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_REG_PVT_MNTR_CONFIG_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLE.
 */
#define READ_AVS_REG_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr_OFFSET,0,(r._avs_reg_pvt_mntr_config_dac_code_programming_enable), 1)
#define WRITE_AVS_REG_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr_OFFSET,0,&(r._avs_reg_pvt_mntr_config_dac_code_programming_enable), 1)

/*******************************************************************************
 * End of 'AVS_REG_PVT_MNTR_CONFIG_DAC_CODE_PROGRAMMING_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PVT_MNTR_CONFIG_MAX_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PVT_MNTR_CONFIG_MAX_DAC_CODE.
 */
#define READ_AVS_REG_PVT_MNTR_CONFIG_MAX_DAC_CODEr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PVT_MNTR_CONFIG_MAX_DAC_CODEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_MAX_DAC_CODEr_OFFSET,0,(r._avs_reg_pvt_mntr_config_max_dac_code), 1)
#define WRITE_AVS_REG_PVT_MNTR_CONFIG_MAX_DAC_CODEr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PVT_MNTR_CONFIG_MAX_DAC_CODEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_MAX_DAC_CODEr_OFFSET,0,&(r._avs_reg_pvt_mntr_config_max_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_REG_PVT_MNTR_CONFIG_MAX_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PVT_MNTR_CONFIG_MIN_DAC_CODE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PVT_MNTR_CONFIG_MIN_DAC_CODE.
 */
#define READ_AVS_REG_PVT_MNTR_CONFIG_MIN_DAC_CODEr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PVT_MNTR_CONFIG_MIN_DAC_CODEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_MIN_DAC_CODEr_OFFSET,0,(r._avs_reg_pvt_mntr_config_min_dac_code), 1)
#define WRITE_AVS_REG_PVT_MNTR_CONFIG_MIN_DAC_CODEr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PVT_MNTR_CONFIG_MIN_DAC_CODEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_MIN_DAC_CODEr_OFFSET,0,&(r._avs_reg_pvt_mntr_config_min_dac_code), 1)

/*******************************************************************************
 * End of 'AVS_REG_PVT_MNTR_CONFIG_MIN_DAC_CODEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_CTRL
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_CTRL.
 */
#define READ_AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr_OFFSET,0,(r._avs_reg_pvt_mntr_config_pvt_mntr_ctrl), 1)
#define WRITE_AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr_OFFSET,0,&(r._avs_reg_pvt_mntr_config_pvt_mntr_ctrl), 1)

/*******************************************************************************
 * End of 'AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETB
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETB.
 */
#define READ_AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr_OFFSET,0,(r._avs_reg_pvt_mntr_config_pvt_mntr_sw_resetb), 1)
#define WRITE_AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr_OFFSET,0,&(r._avs_reg_pvt_mntr_config_pvt_mntr_sw_resetb), 1)

/*******************************************************************************
 * End of 'AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_SW_RESETBr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLE
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLE.
 */
#define READ_AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr_OFFSET,0,(r._avs_reg_pvt_mntr_config_pvt_mntr_tp_mode_enable), 1)
#define WRITE_AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr_BLKACC,59,AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr_OFFSET,0,&(r._avs_reg_pvt_mntr_config_pvt_mntr_tp_mode_enable), 1)

/*******************************************************************************
 * End of 'AVS_REG_PVT_MNTR_CONFIG_PVT_MNTR_TP_MODE_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_0.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_0r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_0r_OFFSET,0,(r._avs_reg_rosc_threshold_1_cen_rosc_threshold1_en_0), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_0r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_0r_OFFSET,0,&(r._avs_reg_rosc_threshold_1_cen_rosc_threshold1_en_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_1.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_1r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_1r_OFFSET,0,(r._avs_reg_rosc_threshold_1_cen_rosc_threshold1_en_1), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_1r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_1r_OFFSET,0,&(r._avs_reg_rosc_threshold_1_cen_rosc_threshold1_en_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_CEN_ROSC_THRESHOLD1_EN_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_INTERRUPT_STATUS_THRESHOLD1_FAULTY_SENSOR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_INTERRUPT_STATUS_THRESHOLD1_FAULTY_SENSOR.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_INTERRUPT_STATUS_THRESHOLD1_FAULTY_SENSORr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_INTERRUPT_STATUS_THRESHOLD1_FAULTY_SENSORr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_INTERRUPT_STATUS_THRESHOLD1_FAULTY_SENSORr_OFFSET,0,(r._avs_reg_rosc_threshold_1_interrupt_status_threshold1_faulty_sensor), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_INTERRUPT_STATUS_THRESHOLD1_FAULTY_SENSORr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_INTERRUPT_STATUS_THRESHOLD1_FAULTY_SENSORr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_INTERRUPT_STATUS_THRESHOLD1_FAULTY_SENSORr_OFFSET,0,&(r._avs_reg_rosc_threshold_1_interrupt_status_threshold1_faulty_sensor), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_INTERRUPT_STATUS_THRESHOLD1_FAULTY_SENSORr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_0.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_0r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_0r_OFFSET,0,(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_0), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_0r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_0r_OFFSET,0,&(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_1.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_1r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_1r_OFFSET,0,(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_1), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_1r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_1r_OFFSET,0,&(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_2.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_2r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_2r_OFFSET,0,(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_2), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_2r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_2r_OFFSET,0,&(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_2), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_3.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_3r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_3r_OFFSET,0,(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_3), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_3r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_3r_OFFSET,0,&(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_3), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_4
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_4.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_4r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_4r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_4r_OFFSET,0,(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_4), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_4r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_4r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_4r_OFFSET,0,&(r._avs_reg_rosc_threshold_1_rmt_rosc_threshold1_en_4), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_RMT_ROSC_THRESHOLD1_EN_4r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_CEN_ROSC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_CEN_ROSC.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_CEN_ROSCr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_CEN_ROSCr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_CEN_ROSCr_OFFSET,i,(r._avs_reg_rosc_threshold_1_threshold1_cen_rosc), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_CEN_ROSCr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_CEN_ROSCr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_CEN_ROSCr_OFFSET,i,&(r._avs_reg_rosc_threshold_1_threshold1_cen_rosc), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_CEN_ROSCr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_DIRECTION
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_DIRECTION.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_DIRECTIONr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_DIRECTIONr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_DIRECTIONr_OFFSET,0,(r._avs_reg_rosc_threshold_1_threshold1_direction), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_DIRECTIONr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_DIRECTIONr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_DIRECTIONr_OFFSET,0,&(r._avs_reg_rosc_threshold_1_threshold1_direction), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_DIRECTIONr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8H
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8H.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Hr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Hr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Hr_OFFSET,0,(r._avs_reg_rosc_threshold_1_threshold1_rmt_rosc_g8h), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Hr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Hr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Hr_OFFSET,0,&(r._avs_reg_rosc_threshold_1_threshold1_rmt_rosc_g8h), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Hr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8S
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8S.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Sr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Sr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Sr_OFFSET,0,(r._avs_reg_rosc_threshold_1_threshold1_rmt_rosc_g8s), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Sr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Sr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Sr_OFFSET,0,&(r._avs_reg_rosc_threshold_1_threshold1_rmt_rosc_g8s), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_G8Sr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GH
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GH.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GHr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GHr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GHr_OFFSET,0,(r._avs_reg_rosc_threshold_1_threshold1_rmt_rosc_gh), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GHr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GHr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GHr_OFFSET,0,&(r._avs_reg_rosc_threshold_1_threshold1_rmt_rosc_gh), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GHr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GS.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GSr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GSr_OFFSET,0,(r._avs_reg_rosc_threshold_1_threshold1_rmt_rosc_gs), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GSr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GSr_OFFSET,0,&(r._avs_reg_rosc_threshold_1_threshold1_rmt_rosc_gs), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_1_THRESHOLD1_RMT_ROSC_GSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_0.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_0r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_0r_OFFSET,0,(r._avs_reg_rosc_threshold_2_cen_rosc_threshold2_en_0), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_0r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_0r_OFFSET,0,&(r._avs_reg_rosc_threshold_2_cen_rosc_threshold2_en_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_1.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_1r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_1r_OFFSET,0,(r._avs_reg_rosc_threshold_2_cen_rosc_threshold2_en_1), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_1r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_1r_OFFSET,0,&(r._avs_reg_rosc_threshold_2_cen_rosc_threshold2_en_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_CEN_ROSC_THRESHOLD2_EN_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_INTERRUPT_STATUS_THRESHOLD2_FAULTY_SENSOR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_INTERRUPT_STATUS_THRESHOLD2_FAULTY_SENSOR.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_INTERRUPT_STATUS_THRESHOLD2_FAULTY_SENSORr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_INTERRUPT_STATUS_THRESHOLD2_FAULTY_SENSORr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_INTERRUPT_STATUS_THRESHOLD2_FAULTY_SENSORr_OFFSET,0,(r._avs_reg_rosc_threshold_2_interrupt_status_threshold2_faulty_sensor), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_INTERRUPT_STATUS_THRESHOLD2_FAULTY_SENSORr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_INTERRUPT_STATUS_THRESHOLD2_FAULTY_SENSORr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_INTERRUPT_STATUS_THRESHOLD2_FAULTY_SENSORr_OFFSET,0,&(r._avs_reg_rosc_threshold_2_interrupt_status_threshold2_faulty_sensor), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_INTERRUPT_STATUS_THRESHOLD2_FAULTY_SENSORr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_0.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_0r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_0r_OFFSET,0,(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_0), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_0r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_0r_OFFSET,0,&(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_0), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_1.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_1r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_1r_OFFSET,0,(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_1), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_1r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_1r_OFFSET,0,&(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_2.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_2r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_2r_OFFSET,0,(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_2), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_2r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_2r_OFFSET,0,&(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_2), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_3.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_3r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_3r_OFFSET,0,(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_3), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_3r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_3r_OFFSET,0,&(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_3), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_4
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_4.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_4r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_4r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_4r_OFFSET,0,(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_4), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_4r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_4r_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_4r_OFFSET,0,&(r._avs_reg_rosc_threshold_2_rmt_rosc_threshold2_en_4), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_RMT_ROSC_THRESHOLD2_EN_4r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_CEN_ROSC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_CEN_ROSC.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_CEN_ROSCr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_CEN_ROSCr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_CEN_ROSCr_OFFSET,i,(r._avs_reg_rosc_threshold_2_threshold2_cen_rosc), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_CEN_ROSCr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_CEN_ROSCr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_CEN_ROSCr_OFFSET,i,&(r._avs_reg_rosc_threshold_2_threshold2_cen_rosc), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_CEN_ROSCr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_DIRECTION
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_DIRECTION.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_DIRECTIONr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_DIRECTIONr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_DIRECTIONr_OFFSET,0,(r._avs_reg_rosc_threshold_2_threshold2_direction), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_DIRECTIONr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_DIRECTIONr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_DIRECTIONr_OFFSET,0,&(r._avs_reg_rosc_threshold_2_threshold2_direction), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_DIRECTIONr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8H
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8H.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Hr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Hr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Hr_OFFSET,0,(r._avs_reg_rosc_threshold_2_threshold2_rmt_rosc_g8h), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Hr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Hr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Hr_OFFSET,0,&(r._avs_reg_rosc_threshold_2_threshold2_rmt_rosc_g8h), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Hr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8S
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8S.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Sr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Sr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Sr_OFFSET,0,(r._avs_reg_rosc_threshold_2_threshold2_rmt_rosc_g8s), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Sr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Sr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Sr_OFFSET,0,&(r._avs_reg_rosc_threshold_2_threshold2_rmt_rosc_g8s), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_G8Sr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GH
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GH.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GHr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GHr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GHr_OFFSET,0,(r._avs_reg_rosc_threshold_2_threshold2_rmt_rosc_gh), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GHr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GHr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GHr_OFFSET,0,&(r._avs_reg_rosc_threshold_2_threshold2_rmt_rosc_gh), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GHr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GS.
 */
#define READ_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GSr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GSr_OFFSET,0,(r._avs_reg_rosc_threshold_2_threshold2_rmt_rosc_gs), 1)
#define WRITE_AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GSr_BLKACC,59,AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GSr_OFFSET,0,&(r._avs_reg_rosc_threshold_2_threshold2_rmt_rosc_gs), 1)

/*******************************************************************************
 * End of 'AVS_REG_ROSC_THRESHOLD_2_THRESHOLD2_RMT_ROSC_GSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_CEN_ROSC_ALL_IDL_HI_LOW_ROSCS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_CEN_ROSC_ALL_IDL_HI_LOW_ROSCS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr_OFFSET,0,(r._avs_reg_ro_registers_0_cen_rosc_all_idl_hi_low_roscs), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr_OFFSET,0,&(r._avs_reg_ro_registers_0_cen_rosc_all_idl_hi_low_roscs), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_CEN_ROSC_ALL_IDL_HI_LOW_ROSCSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_CEN_ROSC_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_CEN_ROSC_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_CEN_ROSC_STATUSr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_CEN_ROSC_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_CEN_ROSC_STATUSr_OFFSET,i,(r._avs_reg_ro_registers_0_cen_rosc_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_CEN_ROSC_STATUSr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_CEN_ROSC_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_CEN_ROSC_STATUSr_OFFSET,i,&(r._avs_reg_ro_registers_0_cen_rosc_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_CEN_ROSC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_PVT_0P85V_0_MNTR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_PVT_0P85V_0_MNTR_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_PVT_0P85V_0_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_PVT_0P85V_0_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_0P85V_0_MNTR_STATUSr_OFFSET,0,(r._avs_reg_ro_registers_0_pvt_0p85v_0_mntr_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_PVT_0P85V_0_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_PVT_0P85V_0_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_0P85V_0_MNTR_STATUSr_OFFSET,0,&(r._avs_reg_ro_registers_0_pvt_0p85v_0_mntr_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_PVT_0P85V_0_MNTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_PVT_0P85V_1_MNTR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_PVT_0P85V_1_MNTR_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_PVT_0P85V_1_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_PVT_0P85V_1_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_0P85V_1_MNTR_STATUSr_OFFSET,0,(r._avs_reg_ro_registers_0_pvt_0p85v_1_mntr_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_PVT_0P85V_1_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_PVT_0P85V_1_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_0P85V_1_MNTR_STATUSr_OFFSET,0,&(r._avs_reg_ro_registers_0_pvt_0p85v_1_mntr_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_PVT_0P85V_1_MNTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_PVT_1V_0_MNTR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_PVT_1V_0_MNTR_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_PVT_1V_0_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_PVT_1V_0_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_1V_0_MNTR_STATUSr_OFFSET,0,(r._avs_reg_ro_registers_0_pvt_1v_0_mntr_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_PVT_1V_0_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_PVT_1V_0_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_1V_0_MNTR_STATUSr_OFFSET,0,&(r._avs_reg_ro_registers_0_pvt_1v_0_mntr_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_PVT_1V_0_MNTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_PVT_1V_1_MNTR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_PVT_1V_1_MNTR_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_PVT_1V_1_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_PVT_1V_1_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_1V_1_MNTR_STATUSr_OFFSET,0,(r._avs_reg_ro_registers_0_pvt_1v_1_mntr_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_PVT_1V_1_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_PVT_1V_1_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_1V_1_MNTR_STATUSr_OFFSET,0,&(r._avs_reg_ro_registers_0_pvt_1v_1_mntr_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_PVT_1V_1_MNTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_PVT_1p8V_MNTR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_PVT_1p8V_MNTR_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_PVT_1P8V_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_PVT_1P8V_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_1P8V_MNTR_STATUSr_OFFSET,0,(r._avs_reg_ro_registers_0_pvt_1p8v_mntr_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_PVT_1P8V_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_PVT_1P8V_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_1P8V_MNTR_STATUSr_OFFSET,0,&(r._avs_reg_ro_registers_0_pvt_1p8v_mntr_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_PVT_1P8V_MNTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_PVT_3p3V_MNTR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_PVT_3p3V_MNTR_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_PVT_3P3V_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_PVT_3P3V_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_3P3V_MNTR_STATUSr_OFFSET,0,(r._avs_reg_ro_registers_0_pvt_3p3v_mntr_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_PVT_3P3V_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_PVT_3P3V_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_3P3V_MNTR_STATUSr_OFFSET,0,&(r._avs_reg_ro_registers_0_pvt_3p3v_mntr_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_PVT_3P3V_MNTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_PVT_TEMPERATURE_MNTR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_PVT_TEMPERATURE_MNTR_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_PVT_TEMPERATURE_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_PVT_TEMPERATURE_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_TEMPERATURE_MNTR_STATUSr_OFFSET,0,(r._avs_reg_ro_registers_0_pvt_temperature_mntr_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_PVT_TEMPERATURE_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_PVT_TEMPERATURE_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_TEMPERATURE_MNTR_STATUSr_OFFSET,0,&(r._avs_reg_ro_registers_0_pvt_temperature_mntr_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_PVT_TEMPERATURE_MNTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_0_PVT_TESTMODE_MNTR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_0_PVT_TESTMODE_MNTR_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_0_PVT_TESTMODE_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_0_PVT_TESTMODE_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_TESTMODE_MNTR_STATUSr_OFFSET,0,(r._avs_reg_ro_registers_0_pvt_testmode_mntr_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_0_PVT_TESTMODE_MNTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_0_PVT_TESTMODE_MNTR_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_0_PVT_TESTMODE_MNTR_STATUSr_OFFSET,0,&(r._avs_reg_ro_registers_0_pvt_testmode_mntr_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_0_PVT_TESTMODE_MNTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG.
 */
#define READ_AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOGr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOGr_BLKACC,59,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOGr_OFFSET,0,(r._avs_reg_ro_registers_1_interrupt_status_faulty_pow_wdog), 1)
#define WRITE_AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOGr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOGr_BLKACC,59,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOGr_OFFSET,0,&(r._avs_reg_ro_registers_1_interrupt_status_faulty_pow_wdog), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOGr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_1.
 */
#define READ_AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_1r_BLKACC,59,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_1r_OFFSET,0,(r._avs_reg_ro_registers_1_interrupt_status_faulty_pow_wdog_1), 1)
#define WRITE_AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_1r_BLKACC,59,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_1r_OFFSET,0,&(r._avs_reg_ro_registers_1_interrupt_status_faulty_pow_wdog_1), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_2.
 */
#define READ_AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_2r_BLKACC,59,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_2r_OFFSET,0,(r._avs_reg_ro_registers_1_interrupt_status_faulty_pow_wdog_2), 1)
#define WRITE_AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_2r_BLKACC,59,AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_2r_OFFSET,0,&(r._avs_reg_ro_registers_1_interrupt_status_faulty_pow_wdog_2), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_1_INTERRUPT_STATUS_FAULTY_POW_WDOG_2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_1_POW_WDOG_FAILURE_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_1_POW_WDOG_FAILURE_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_1_POW_WDOG_FAILURE_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_1_POW_WDOG_FAILURE_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_1_POW_WDOG_FAILURE_STATUSr_OFFSET,0,(r._avs_reg_ro_registers_1_pow_wdog_failure_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_1_POW_WDOG_FAILURE_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_1_POW_WDOG_FAILURE_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_1_POW_WDOG_FAILURE_STATUSr_OFFSET,0,&(r._avs_reg_ro_registers_1_pow_wdog_failure_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_1_POW_WDOG_FAILURE_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_RO_REGISTERS_1_RMT_ROSC_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_RO_REGISTERS_1_RMT_ROSC_STATUS.
 */
#define READ_AVS_REG_RO_REGISTERS_1_RMT_ROSC_STATUSr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_RO_REGISTERS_1_RMT_ROSC_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_1_RMT_ROSC_STATUSr_OFFSET,i,(r._avs_reg_ro_registers_1_rmt_rosc_status), 1)
#define WRITE_AVS_REG_RO_REGISTERS_1_RMT_ROSC_STATUSr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_RO_REGISTERS_1_RMT_ROSC_STATUSr_BLKACC,59,AVS_REG_RO_REGISTERS_1_RMT_ROSC_STATUSr_OFFSET,i,&(r._avs_reg_ro_registers_1_rmt_rosc_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_RO_REGISTERS_1_RMT_ROSC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_AVS_STATUS_IN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_AVS_STATUS_IN.
 */
#define READ_AVS_REG_TOP_CTRL_AVS_STATUS_INr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_AVS_STATUS_INr_BLKACC,59,AVS_REG_TOP_CTRL_AVS_STATUS_INr_OFFSET,0,(r._avs_reg_top_ctrl_avs_status_in), 1)
#define WRITE_AVS_REG_TOP_CTRL_AVS_STATUS_INr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_AVS_STATUS_INr_BLKACC,59,AVS_REG_TOP_CTRL_AVS_STATUS_INr_OFFSET,0,&(r._avs_reg_top_ctrl_avs_status_in), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_AVS_STATUS_INr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_AVS_STATUS_OUT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_AVS_STATUS_OUT.
 */
#define READ_AVS_REG_TOP_CTRL_AVS_STATUS_OUTr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_AVS_STATUS_OUTr_BLKACC,59,AVS_REG_TOP_CTRL_AVS_STATUS_OUTr_OFFSET,0,(r._avs_reg_top_ctrl_avs_status_out), 1)
#define WRITE_AVS_REG_TOP_CTRL_AVS_STATUS_OUTr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_AVS_STATUS_OUTr_BLKACC,59,AVS_REG_TOP_CTRL_AVS_STATUS_OUTr_OFFSET,0,&(r._avs_reg_top_ctrl_avs_status_out), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_AVS_STATUS_OUTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_ASSIST
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_ASSIST.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_ASSISTr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_ASSISTr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_ASSISTr_OFFSET,0,(r._avs_reg_top_ctrl_memory_assist), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_ASSISTr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_ASSISTr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_ASSISTr_OFFSET,0,&(r._avs_reg_top_ctrl_memory_assist), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_ASSISTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_ASSIST_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_ASSIST_STATUS.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_ASSIST_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_ASSIST_STATUSr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_ASSIST_STATUSr_OFFSET,0,(r._avs_reg_top_ctrl_memory_assist_status), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_ASSIST_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_ASSIST_STATUSr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_ASSIST_STATUSr_OFFSET,0,&(r._avs_reg_top_ctrl_memory_assist_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_ASSIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFECr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFECr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFECr_OFFSET,(i)*4,(r._avs_reg_top_ctrl_memory_standby_afec), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFECr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFECr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFECr_OFFSET,(i)*4,&(r._avs_reg_top_ctrl_memory_standby_afec), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFECr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC0.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC0r_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC0r_OFFSET,0,(r._avs_reg_top_ctrl_memory_standby_afec0), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC0r_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC0r_OFFSET,0,&(r._avs_reg_top_ctrl_memory_standby_afec0), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC1.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC1r_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC1r_OFFSET,0,(r._avs_reg_top_ctrl_memory_standby_afec1), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC1r_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC1r_OFFSET,0,&(r._avs_reg_top_ctrl_memory_standby_afec1), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC2.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC2r_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC2r_OFFSET,0,(r._avs_reg_top_ctrl_memory_standby_afec2), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC2r_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC2r_OFFSET,0,&(r._avs_reg_top_ctrl_memory_standby_afec2), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC3.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC3r_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC3r_OFFSET,0,(r._avs_reg_top_ctrl_memory_standby_afec3), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC3r_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC3r_OFFSET,0,&(r._avs_reg_top_ctrl_memory_standby_afec3), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_STANDBY_AFEC3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_STANDBY_BSP
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_STANDBY_BSP.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_STANDBY_BSPr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_BSPr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_BSPr_OFFSET,0,(r._avs_reg_top_ctrl_memory_standby_bsp), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_STANDBY_BSPr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_BSPr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_BSPr_OFFSET,0,&(r._avs_reg_top_ctrl_memory_standby_bsp), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_STANDBY_BSPr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_STANDBY_HIF
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_STANDBY_HIF.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_STANDBY_HIFr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_HIFr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_HIFr_OFFSET,0,(r._avs_reg_top_ctrl_memory_standby_hif), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_STANDBY_HIFr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_HIFr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_HIFr_OFFSET,0,&(r._avs_reg_top_ctrl_memory_standby_hif), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_STANDBY_HIFr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_MEMORY_STANDBY_LEAP
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_MEMORY_STANDBY_LEAP.
 */
#define READ_AVS_REG_TOP_CTRL_MEMORY_STANDBY_LEAPr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_LEAPr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_LEAPr_OFFSET,0,(r._avs_reg_top_ctrl_memory_standby_leap), 1)
#define WRITE_AVS_REG_TOP_CTRL_MEMORY_STANDBY_LEAPr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_MEMORY_STANDBY_LEAPr_BLKACC,59,AVS_REG_TOP_CTRL_MEMORY_STANDBY_LEAPr_OFFSET,0,&(r._avs_reg_top_ctrl_memory_standby_leap), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_MEMORY_STANDBY_LEAPr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_RMON_HZ
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_RMON_HZ.
 */
#define READ_AVS_REG_TOP_CTRL_RMON_HZr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_RMON_HZr_BLKACC,59,AVS_REG_TOP_CTRL_RMON_HZr_OFFSET,0,(r._avs_reg_top_ctrl_rmon_hz), 1)
#define WRITE_AVS_REG_TOP_CTRL_RMON_HZr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_RMON_HZr_BLKACC,59,AVS_REG_TOP_CTRL_RMON_HZr_OFFSET,0,&(r._avs_reg_top_ctrl_rmon_hz), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_RMON_HZr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_RMON_VT
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_RMON_VT.
 */
#define READ_AVS_REG_TOP_CTRL_RMON_VTr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_RMON_VTr_BLKACC,59,AVS_REG_TOP_CTRL_RMON_VTr_OFFSET,0,(r._avs_reg_top_ctrl_rmon_vt), 1)
#define WRITE_AVS_REG_TOP_CTRL_RMON_VTr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_RMON_VTr_BLKACC,59,AVS_REG_TOP_CTRL_RMON_VTr_OFFSET,0,&(r._avs_reg_top_ctrl_rmon_vt), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_RMON_VTr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_S2_STANDBY_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_S2_STANDBY_STATUS.
 */
#define READ_AVS_REG_TOP_CTRL_S2_STANDBY_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_S2_STANDBY_STATUSr_BLKACC,59,AVS_REG_TOP_CTRL_S2_STANDBY_STATUSr_OFFSET,0,(r._avs_reg_top_ctrl_s2_standby_status), 1)
#define WRITE_AVS_REG_TOP_CTRL_S2_STANDBY_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_S2_STANDBY_STATUSr_BLKACC,59,AVS_REG_TOP_CTRL_S2_STANDBY_STATUSr_OFFSET,0,&(r._avs_reg_top_ctrl_s2_standby_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_S2_STANDBY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SPARE_HIGH
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SPARE_HIGH.
 */
#define READ_AVS_REG_TOP_CTRL_SPARE_HIGHr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SPARE_HIGHr_BLKACC,59,AVS_REG_TOP_CTRL_SPARE_HIGHr_OFFSET,0,(r._avs_reg_top_ctrl_spare_high), 1)
#define WRITE_AVS_REG_TOP_CTRL_SPARE_HIGHr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SPARE_HIGHr_BLKACC,59,AVS_REG_TOP_CTRL_SPARE_HIGHr_OFFSET,0,&(r._avs_reg_top_ctrl_spare_high), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SPARE_HIGHr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SPARE_LOW
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SPARE_LOW.
 */
#define READ_AVS_REG_TOP_CTRL_SPARE_LOWr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SPARE_LOWr_BLKACC,59,AVS_REG_TOP_CTRL_SPARE_LOWr_OFFSET,0,(r._avs_reg_top_ctrl_spare_low), 1)
#define WRITE_AVS_REG_TOP_CTRL_SPARE_LOWr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SPARE_LOWr_BLKACC,59,AVS_REG_TOP_CTRL_SPARE_LOWr_OFFSET,0,&(r._avs_reg_top_ctrl_spare_low), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SPARE_LOWr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFECr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFECr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFECr_OFFSET,(i)*8,(r._avs_reg_top_ctrl_sram_power_gate_in_afec), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFECr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFECr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFECr_OFFSET,(i)*8,&(r._avs_reg_top_ctrl_sram_power_gate_in_afec), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFECr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC0.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC0r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_afec0), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC0r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_afec0), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC1.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC1r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_afec1), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC1r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_afec1), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC2.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC2r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC2r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_afec2), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC2r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC2r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_afec2), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC3.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC3r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC3r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_afec3), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC3r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC3r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_afec3), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AFEC3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AIO
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AIO.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AIOr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AIOr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AIOr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_aio), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AIOr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AIOr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AIOr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_aio), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_AIOr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVN.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_bvn), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_bvn), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVND
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVND.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNDr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNDr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_bvnd), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNDr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNDr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_bvnd), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_BVNDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_FSK
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_FSK.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_FSKr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_FSKr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_FSKr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_fsk), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_FSKr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_FSKr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_FSKr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_fsk), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_FSKr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_GFX
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_GFX.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_GFXr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_GFXr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_GFXr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_gfx), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_GFXr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_GFXr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_GFXr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_gfx), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_GFXr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_HVD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_HVD.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_HVDr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_HVDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_HVDr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_hvd), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_HVDr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_HVDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_HVDr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_hvd), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_HVDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_LEAP
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_LEAP.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_LEAPr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_LEAPr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_LEAPr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_leap), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_LEAPr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_LEAPr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_LEAPr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_leap), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_LEAPr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_M2MC1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_M2MC1.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_M2MC1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_M2MC1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_M2MC1r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_m2mc1), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_M2MC1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_M2MC1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_M2MC1r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_m2mc1), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_M2MC1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAMAC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAMAC.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAMACr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAMACr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAMACr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_mocamac), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAMACr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAMACr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAMACr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_mocamac), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAMACr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAPHY
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAPHY.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAPHYr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAPHYr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAPHYr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_mocaphy), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAPHYr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAPHYr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAPHYr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_mocaphy), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_MOCAPHYr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_RAAGA0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_RAAGA0.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_RAAGA0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_RAAGA0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_RAAGA0r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_raaga0), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_RAAGA0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_RAAGA0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_RAAGA0r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_raaga0), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_RAAGA0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDSr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDSr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDSr_OFFSET,(i)*8,(r._avs_reg_top_ctrl_sram_power_gate_in_sds), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDSr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDSr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDSr_OFFSET,(i)*8,&(r._avs_reg_top_ctrl_sram_power_gate_in_sds), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS0.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS0r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_sds0), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS0r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_sds0), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS1.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS1r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_sds1), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS1r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_sds1), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS2.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS2r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS2r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_sds2), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS2r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS2r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_sds2), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS3.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS3r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS3r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_sds3), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS3r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS3r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_sds3), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SDS3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SID
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SID.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SIDr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SIDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SIDr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_sid), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SIDr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SIDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SIDr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_sid), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_SIDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_V3D
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_V3D.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_V3Dr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_V3Dr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_V3Dr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_v3d), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_V3Dr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_V3Dr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_V3Dr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_v3d), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_V3Dr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_VEC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_VEC.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_VECr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_VECr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_VECr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_in_vec), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_VECr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_VECr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_VECr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_in_vec), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_IN_VECr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFECr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFECr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFECr_OFFSET,(i)*8,(r._avs_reg_top_ctrl_sram_power_gate_out_afec), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFECr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFECr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFECr_OFFSET,(i)*8,&(r._avs_reg_top_ctrl_sram_power_gate_out_afec), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFECr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC0.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC0r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_afec0), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC0r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_afec0), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC1.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC1r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_afec1), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC1r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_afec1), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC2.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC2r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC2r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_afec2), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC2r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC2r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_afec2), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC3.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC3r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC3r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_afec3), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC3r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC3r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_afec3), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AFEC3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AIO
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AIO.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AIOr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AIOr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AIOr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_aio), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AIOr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AIOr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AIOr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_aio), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_AIOr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVN.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_bvn), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_bvn), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVND
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVND.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNDr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNDr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_bvnd), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNDr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNDr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_bvnd), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_BVNDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_FSK
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_FSK.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_FSKr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_FSKr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_FSKr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_fsk), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_FSKr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_FSKr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_FSKr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_fsk), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_FSKr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_GFX
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_GFX.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_GFXr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_GFXr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_GFXr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_gfx), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_GFXr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_GFXr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_GFXr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_gfx), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_GFXr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_HVD
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_HVD.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_HVDr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_HVDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_HVDr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_hvd), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_HVDr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_HVDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_HVDr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_hvd), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_HVDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_LEAP
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_LEAP.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_LEAPr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_LEAPr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_LEAPr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_leap), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_LEAPr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_LEAPr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_LEAPr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_leap), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_LEAPr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_M2MC1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_M2MC1.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_M2MC1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_M2MC1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_M2MC1r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_m2mc1), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_M2MC1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_M2MC1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_M2MC1r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_m2mc1), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_M2MC1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAMAC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAMAC.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAMACr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAMACr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAMACr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_mocamac), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAMACr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAMACr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAMACr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_mocamac), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAMACr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAPHY
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAPHY.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAPHYr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAPHYr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAPHYr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_mocaphy), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAPHYr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAPHYr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAPHYr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_mocaphy), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_MOCAPHYr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_RAAGA0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_RAAGA0.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_RAAGA0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_RAAGA0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_RAAGA0r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_raaga0), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_RAAGA0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_RAAGA0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_RAAGA0r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_raaga0), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_RAAGA0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDSr(u,i,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDSr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDSr_OFFSET,(i)*8,(r._avs_reg_top_ctrl_sram_power_gate_out_sds), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDSr(u,i,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDSr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDSr_OFFSET,(i)*8,&(r._avs_reg_top_ctrl_sram_power_gate_out_sds), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS0
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS0.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS0r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS0r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_sds0), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS0r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS0r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS0r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_sds0), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS0r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS1
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS1.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS1r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS1r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_sds1), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS1r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS1r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS1r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_sds1), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS1r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS2
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS2.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS2r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS2r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS2r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_sds2), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS2r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS2r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS2r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_sds2), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS2r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS3
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS3.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS3r(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS3r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS3r_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_sds3), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS3r(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS3r_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS3r_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_sds3), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SDS3r'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SID
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SID.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SIDr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SIDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SIDr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_sid), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SIDr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SIDr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SIDr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_sid), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_SIDr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_V3D
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_V3D.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_V3Dr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_V3Dr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_V3Dr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_v3d), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_V3Dr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_V3Dr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_V3Dr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_v3d), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_V3Dr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_VEC
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_VEC.
 */
#define READ_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_VECr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_VECr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_VECr_OFFSET,0,(r._avs_reg_top_ctrl_sram_power_gate_out_vec), 1)
#define WRITE_AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_VECr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_VECr_BLKACC,59,AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_VECr_OFFSET,0,&(r._avs_reg_top_ctrl_sram_power_gate_out_vec), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_SRAM_POWER_GATE_OUT_VECr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_START_AVS_CPU
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_START_AVS_CPU.
 */
#define READ_AVS_REG_TOP_CTRL_START_AVS_CPUr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_START_AVS_CPUr_BLKACC,59,AVS_REG_TOP_CTRL_START_AVS_CPUr_OFFSET,0,(r._avs_reg_top_ctrl_start_avs_cpu), 1)
#define WRITE_AVS_REG_TOP_CTRL_START_AVS_CPUr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_START_AVS_CPUr_BLKACC,59,AVS_REG_TOP_CTRL_START_AVS_CPUr_OFFSET,0,&(r._avs_reg_top_ctrl_start_avs_cpu), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_START_AVS_CPUr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_PWRDN
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_PWRDN.
 */
#define READ_AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr_BLKACC,59,AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr_OFFSET,0,(r._avs_reg_top_ctrl_voltage_regulator_pwrdn), 1)
#define WRITE_AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr_BLKACC,59,AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr_OFFSET,0,&(r._avs_reg_top_ctrl_voltage_regulator_pwrdn), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_PWRDNr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_STATUS.
 */
#define READ_AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr_BLKACC,59,AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr_OFFSET,0,(r._avs_reg_top_ctrl_voltage_regulator_status), 1)
#define WRITE_AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr_BLKACC,59,AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr_OFFSET,0,&(r._avs_reg_top_ctrl_voltage_regulator_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_VOLTAGE_REGULATOR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_VTRAP_STATUS
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_VTRAP_STATUS.
 */
#define READ_AVS_REG_TOP_CTRL_VTRAP_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_VTRAP_STATUSr_BLKACC,59,AVS_REG_TOP_CTRL_VTRAP_STATUSr_OFFSET,0,(r._avs_reg_top_ctrl_vtrap_status), 1)
#define WRITE_AVS_REG_TOP_CTRL_VTRAP_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_VTRAP_STATUSr_BLKACC,59,AVS_REG_TOP_CTRL_VTRAP_STATUSr_OFFSET,0,&(r._avs_reg_top_ctrl_vtrap_status), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_VTRAP_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  AVS_REG_TOP_CTRL_VTRAP_STATUS_CLEAR
 * BLOCKS:   AVS
 * SIZE:     32
 */
/*
 * These macros can be used to access AVS_REG_TOP_CTRL_VTRAP_STATUS_CLEAR.
 */
#define READ_AVS_REG_TOP_CTRL_VTRAP_STATUS_CLEARr(u,r) bcmbd_cmicd_reg_block_read(u,AVS_REG_TOP_CTRL_VTRAP_STATUS_CLEARr_BLKACC,59,AVS_REG_TOP_CTRL_VTRAP_STATUS_CLEARr_OFFSET,0,(r._avs_reg_top_ctrl_vtrap_status_clear), 1)
#define WRITE_AVS_REG_TOP_CTRL_VTRAP_STATUS_CLEARr(u,r) bcmbd_cmicd_reg_block_write(u,AVS_REG_TOP_CTRL_VTRAP_STATUS_CLEARr_BLKACC,59,AVS_REG_TOP_CTRL_VTRAP_STATUS_CLEARr_OFFSET,0,&(r._avs_reg_top_ctrl_vtrap_status_clear), 1)

/*******************************************************************************
 * End of 'AVS_REG_TOP_CTRL_VTRAP_STATUS_CLEARr'
 */




/*******************************************************************************
 * MEMORY:  BCAST_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access BCAST_BLOCK_MASK.
 */
#define READ_BCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(BCAST_BLOCK_MASKm_BLKACC)+1,BCAST_BLOCK_MASKm_OFFSET+i,(m._bcast_block_mask),5)
#define WRITE_BCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(BCAST_BLOCK_MASKm_BLKACC)+1,BCAST_BLOCK_MASKm_OFFSET+i,&(m._bcast_block_mask),5)

/*******************************************************************************
 * End of 'BCAST_BLOCK_MASKm'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_ACH_TYPE_CONTROL0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_ACH_TYPE_CONTROL0.
 */
#define READ_BFD_RX_ACH_TYPE_CONTROL0r(u,r) bcmbd_cmicd_reg_block_read(u,BFD_RX_ACH_TYPE_CONTROL0r_BLKACC,1,BFD_RX_ACH_TYPE_CONTROL0r_OFFSET,0,(r._bfd_rx_ach_type_control0), 1)
#define WRITE_BFD_RX_ACH_TYPE_CONTROL0r(u,r) bcmbd_cmicd_reg_block_write(u,BFD_RX_ACH_TYPE_CONTROL0r_BLKACC,1,BFD_RX_ACH_TYPE_CONTROL0r_OFFSET,0,&(r._bfd_rx_ach_type_control0), 1)

/*******************************************************************************
 * End of 'BFD_RX_ACH_TYPE_CONTROL0r'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_ACH_TYPE_CONTROL1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_ACH_TYPE_CONTROL1.
 */
#define READ_BFD_RX_ACH_TYPE_CONTROL1r(u,r) bcmbd_cmicd_reg_block_read(u,BFD_RX_ACH_TYPE_CONTROL1r_BLKACC,1,BFD_RX_ACH_TYPE_CONTROL1r_OFFSET,0,(r._bfd_rx_ach_type_control1), 1)
#define WRITE_BFD_RX_ACH_TYPE_CONTROL1r(u,r) bcmbd_cmicd_reg_block_write(u,BFD_RX_ACH_TYPE_CONTROL1r_BLKACC,1,BFD_RX_ACH_TYPE_CONTROL1r_OFFSET,0,&(r._bfd_rx_ach_type_control1), 1)

/*******************************************************************************
 * End of 'BFD_RX_ACH_TYPE_CONTROL1r'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_ACH_TYPE_MPLSTP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_ACH_TYPE_MPLSTP.
 */
#define READ_BFD_RX_ACH_TYPE_MPLSTPr(u,r) bcmbd_cmicd_reg_block_read(u,BFD_RX_ACH_TYPE_MPLSTPr_BLKACC,1,BFD_RX_ACH_TYPE_MPLSTPr_OFFSET,0,(r._bfd_rx_ach_type_mplstp), 1)
#define WRITE_BFD_RX_ACH_TYPE_MPLSTPr(u,r) bcmbd_cmicd_reg_block_write(u,BFD_RX_ACH_TYPE_MPLSTPr_BLKACC,1,BFD_RX_ACH_TYPE_MPLSTPr_OFFSET,0,&(r._bfd_rx_ach_type_mplstp), 1)

/*******************************************************************************
 * End of 'BFD_RX_ACH_TYPE_MPLSTPr'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_ACH_TYPE_MPLSTP1_32
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_ACH_TYPE_MPLSTP1_32.
 */
#define READ_BFD_RX_ACH_TYPE_MPLSTP1_32r(u,r) bcmbd_cmicd_reg_block_read(u,BFD_RX_ACH_TYPE_MPLSTP1_32r_BLKACC,1,BFD_RX_ACH_TYPE_MPLSTP1_32r_OFFSET,0,(r._bfd_rx_ach_type_mplstp1_32), 1)
#define WRITE_BFD_RX_ACH_TYPE_MPLSTP1_32r(u,r) bcmbd_cmicd_reg_block_write(u,BFD_RX_ACH_TYPE_MPLSTP1_32r_BLKACC,1,BFD_RX_ACH_TYPE_MPLSTP1_32r_OFFSET,0,&(r._bfd_rx_ach_type_mplstp1_32), 1)

/*******************************************************************************
 * End of 'BFD_RX_ACH_TYPE_MPLSTP1_32r'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_UDP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_UDP_CONTROL.
 */
#define READ_BFD_RX_UDP_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,BFD_RX_UDP_CONTROLr_BLKACC,1,BFD_RX_UDP_CONTROLr_OFFSET,0,(r._bfd_rx_udp_control), 1)
#define WRITE_BFD_RX_UDP_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,BFD_RX_UDP_CONTROLr_BLKACC,1,BFD_RX_UDP_CONTROLr_OFFSET,0,&(r._bfd_rx_udp_control), 1)

/*******************************************************************************
 * End of 'BFD_RX_UDP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  BFD_RX_UDP_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access BFD_RX_UDP_CONTROL_1.
 */
#define READ_BFD_RX_UDP_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,BFD_RX_UDP_CONTROL_1r_BLKACC,1,BFD_RX_UDP_CONTROL_1r_OFFSET,0,(r._bfd_rx_udp_control_1), 1)
#define WRITE_BFD_RX_UDP_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,BFD_RX_UDP_CONTROL_1r_BLKACC,1,BFD_RX_UDP_CONTROL_1r_OFFSET,0,&(r._bfd_rx_udp_control_1), 1)

/*******************************************************************************
 * End of 'BFD_RX_UDP_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CBL_ATTRIBUTE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CBL_ATTRIBUTE.
 */
#define READ_CBL_ATTRIBUTEr(u,i,r) bcmbd_cmicd_reg_block_read(u,CBL_ATTRIBUTEr_BLKACC,1,CBL_ATTRIBUTEr_OFFSET,i,(r._cbl_attribute), 1)
#define WRITE_CBL_ATTRIBUTEr(u,i,r) bcmbd_cmicd_reg_block_write(u,CBL_ATTRIBUTEr_BLKACC,1,CBL_ATTRIBUTEr_OFFSET,i,&(r._cbl_attribute), 1)

/*******************************************************************************
 * End of 'CBL_ATTRIBUTEr'
 */




/*******************************************************************************
 * REGISTER:  CCPMEMDEBUG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CCPMEMDEBUG.
 */
#define READ_CCPMEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CCPMEMDEBUGr_BLKACC,3,0,p,CCPMEMDEBUGr_OFFSET,0,(r._ccpmemdebug),1)
#define WRITE_CCPMEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CCPMEMDEBUGr_BLKACC,3,0,p,CCPMEMDEBUGr_OFFSET,0,&(r._ccpmemdebug),1)

/*******************************************************************************
 * End of 'CCPMEMDEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CCP_STS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CCP_STS.
 */
#define READ_CCP_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CCP_STSr_BLKACC,3,0,p,CCP_STSr_OFFSET,0,(r._ccp_sts),1)
#define WRITE_CCP_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CCP_STSr_BLKACC,3,0,p,CCP_STSr_OFFSET,0,&(r._ccp_sts),1)

/*******************************************************************************
 * End of 'CCP_STSr'
 */




/*******************************************************************************
 * REGISTER:  CELL_LINK_MEM_DEBUG_TM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CELL_LINK_MEM_DEBUG_TM.
 */
#define READ_CELL_LINK_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CELL_LINK_MEM_DEBUG_TMr_BLKACC,4,0,p,CELL_LINK_MEM_DEBUG_TMr_OFFSET,0,(r._cell_link_mem_debug_tm),1)
#define WRITE_CELL_LINK_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CELL_LINK_MEM_DEBUG_TMr_BLKACC,4,0,p,CELL_LINK_MEM_DEBUG_TMr_OFFSET,0,&(r._cell_link_mem_debug_tm),1)

/*******************************************************************************
 * End of 'CELL_LINK_MEM_DEBUG_TMr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_CONTROL.
 */
#define READ_CENTRAL_CTR_EVICTION_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,CENTRAL_CTR_EVICTION_CONTROLr_BLKACC,1,CENTRAL_CTR_EVICTION_CONTROLr_OFFSET,0,(r._central_ctr_eviction_control), 1)
#define WRITE_CENTRAL_CTR_EVICTION_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,CENTRAL_CTR_EVICTION_CONTROLr_BLKACC,1,CENTRAL_CTR_EVICTION_CONTROLr_OFFSET,0,&(r._central_ctr_eviction_control), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_COUNTER_FLAG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_COUNTER_FLAG.
 */
#define READ_CENTRAL_CTR_EVICTION_COUNTER_FLAGr(u,r) bcmbd_cmicd_reg_block_read(u,CENTRAL_CTR_EVICTION_COUNTER_FLAGr_BLKACC,1,CENTRAL_CTR_EVICTION_COUNTER_FLAGr_OFFSET,0,(r._central_ctr_eviction_counter_flag), 1)
#define WRITE_CENTRAL_CTR_EVICTION_COUNTER_FLAGr(u,r) bcmbd_cmicd_reg_block_write(u,CENTRAL_CTR_EVICTION_COUNTER_FLAGr_BLKACC,1,CENTRAL_CTR_EVICTION_COUNTER_FLAGr_OFFSET,0,&(r._central_ctr_eviction_counter_flag), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_COUNTER_FLAGr'
 */




/*******************************************************************************
 * MEMORY:  CENTRAL_CTR_EVICTION_FIFO
 * BLOCKS:   IPIPE
 * SIZE:     84
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_FIFO.
 */
#define READ_CENTRAL_CTR_EVICTION_FIFOm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(CENTRAL_CTR_EVICTION_FIFOm_BLKACC)+1,CENTRAL_CTR_EVICTION_FIFOm_OFFSET+i,(m._central_ctr_eviction_fifo),3)
#define WRITE_CENTRAL_CTR_EVICTION_FIFOm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(CENTRAL_CTR_EVICTION_FIFOm_BLKACC)+1,CENTRAL_CTR_EVICTION_FIFOm_OFFSET+i,&(m._central_ctr_eviction_fifo),3)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROL.
 */
#define READ_CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr_BLKACC,1,CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr_OFFSET,0,(r._central_ctr_eviction_fifo_parity_control), 1)
#define WRITE_CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr_BLKACC,1,CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr_OFFSET,0,&(r._central_ctr_eviction_fifo_parity_control), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_FIFO_PARITY_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_FIFO_PARITY_ERROR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_FIFO_PARITY_ERROR.
 */
#define READ_CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr(u,r) bcmbd_cmicd_reg_block_read(u,CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr_BLKACC,1,CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr_OFFSET,0,(r._central_ctr_eviction_fifo_parity_error), 1)
#define WRITE_CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr(u,r) bcmbd_cmicd_reg_block_write(u,CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr_BLKACC,1,CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr_OFFSET,0,&(r._central_ctr_eviction_fifo_parity_error), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_FIFO_PARITY_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROL.
 */
#define READ_CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr_BLKACC,1,CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr_OFFSET,0,(r._central_ctr_eviction_fifo_ram_control), 1)
#define WRITE_CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr_BLKACC,1,CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr_OFFSET,0,&(r._central_ctr_eviction_fifo_ram_control), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_FIFO_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_INTR_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_INTR_ENABLE.
 */
#define READ_CENTRAL_CTR_EVICTION_INTR_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,CENTRAL_CTR_EVICTION_INTR_ENABLEr_BLKACC,1,CENTRAL_CTR_EVICTION_INTR_ENABLEr_OFFSET,0,(r._central_ctr_eviction_intr_enable), 1)
#define WRITE_CENTRAL_CTR_EVICTION_INTR_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,CENTRAL_CTR_EVICTION_INTR_ENABLEr_BLKACC,1,CENTRAL_CTR_EVICTION_INTR_ENABLEr_OFFSET,0,&(r._central_ctr_eviction_intr_enable), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CENTRAL_CTR_EVICTION_INTR_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CENTRAL_CTR_EVICTION_INTR_STATUS.
 */
#define READ_CENTRAL_CTR_EVICTION_INTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,CENTRAL_CTR_EVICTION_INTR_STATUSr_BLKACC,1,CENTRAL_CTR_EVICTION_INTR_STATUSr_OFFSET,0,(r._central_ctr_eviction_intr_status), 1)
#define WRITE_CENTRAL_CTR_EVICTION_INTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,CENTRAL_CTR_EVICTION_INTR_STATUSr_BLKACC,1,CENTRAL_CTR_EVICTION_INTR_STATUSr_OFFSET,0,&(r._central_ctr_eviction_intr_status), 1)

/*******************************************************************************
 * End of 'CENTRAL_CTR_EVICTION_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CFAPBANKFULL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPBANKFULL.
 */
#define READ_CFAPBANKFULLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPBANKFULLr_BLKACC,4,0,p,CFAPBANKFULLr_OFFSET,i,(r._cfapbankfull),1)
#define WRITE_CFAPBANKFULLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPBANKFULLr_BLKACC,4,0,p,CFAPBANKFULLr_OFFSET,i,&(r._cfapbankfull),1)

/*******************************************************************************
 * End of 'CFAPBANKFULLr'
 */




/*******************************************************************************
 * REGISTER:  CFAPBANKSTATUS
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPBANKSTATUS.
 */
#define READ_CFAPBANKSTATUSr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPBANKSTATUSr_BLKACC,4,0,p,CFAPBANKSTATUSr_OFFSET,i,(r._cfapbankstatus),1)
#define WRITE_CFAPBANKSTATUSr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPBANKSTATUSr_BLKACC,4,0,p,CFAPBANKSTATUSr_OFFSET,i,&(r._cfapbankstatus),1)

/*******************************************************************************
 * End of 'CFAPBANKSTATUSr'
 */




/*******************************************************************************
 * REGISTER:  CFAPBSTSTAT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPBSTSTAT.
 */
#define READ_CFAPBSTSTATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPBSTSTATr_BLKACC,4,0,p,CFAPBSTSTATr_OFFSET,0,(r._cfapbststat),1)
#define WRITE_CFAPBSTSTATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPBSTSTATr_BLKACC,4,0,p,CFAPBSTSTATr_OFFSET,0,&(r._cfapbststat),1)

/*******************************************************************************
 * End of 'CFAPBSTSTATr'
 */




/*******************************************************************************
 * REGISTER:  CFAPBSTTHRS
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPBSTTHRS.
 */
#define READ_CFAPBSTTHRSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPBSTTHRSr_BLKACC,4,0,p,CFAPBSTTHRSr_OFFSET,0,(r._cfapbstthrs),1)
#define WRITE_CFAPBSTTHRSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPBSTTHRSr_BLKACC,4,0,p,CFAPBSTTHRSr_OFFSET,0,&(r._cfapbstthrs),1)

/*******************************************************************************
 * End of 'CFAPBSTTHRSr'
 */




/*******************************************************************************
 * REGISTER:  CFAPCONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPCONFIG.
 */
#define READ_CFAPCONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPCONFIGr_BLKACC,4,0,p,CFAPCONFIGr_OFFSET,0,(r._cfapconfig),1)
#define WRITE_CFAPCONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPCONFIGr_BLKACC,4,0,p,CFAPCONFIGr_OFFSET,0,&(r._cfapconfig),1)

/*******************************************************************************
 * End of 'CFAPCONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CFAPDEBUGSCR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPDEBUGSCR.
 */
#define READ_CFAPDEBUGSCRr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPDEBUGSCRr_BLKACC,4,0,p,CFAPDEBUGSCRr_OFFSET,i,(r._cfapdebugscr),1)
#define WRITE_CFAPDEBUGSCRr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPDEBUGSCRr_BLKACC,4,0,p,CFAPDEBUGSCRr_OFFSET,i,&(r._cfapdebugscr),1)

/*******************************************************************************
 * End of 'CFAPDEBUGSCRr'
 */




/*******************************************************************************
 * REGISTER:  CFAPDEBUGSCR0
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPDEBUGSCR0.
 */
#define READ_CFAPDEBUGSCR0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPDEBUGSCR0r_BLKACC,4,0,p,CFAPDEBUGSCR0r_OFFSET,0,(r._cfapdebugscr0),1)
#define WRITE_CFAPDEBUGSCR0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPDEBUGSCR0r_BLKACC,4,0,p,CFAPDEBUGSCR0r_OFFSET,0,&(r._cfapdebugscr0),1)

/*******************************************************************************
 * End of 'CFAPDEBUGSCR0r'
 */




/*******************************************************************************
 * REGISTER:  CFAPDEBUGSCR1
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPDEBUGSCR1.
 */
#define READ_CFAPDEBUGSCR1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPDEBUGSCR1r_BLKACC,4,0,p,CFAPDEBUGSCR1r_OFFSET,0,(r._cfapdebugscr1),1)
#define WRITE_CFAPDEBUGSCR1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPDEBUGSCR1r_BLKACC,4,0,p,CFAPDEBUGSCR1r_OFFSET,0,&(r._cfapdebugscr1),1)

/*******************************************************************************
 * End of 'CFAPDEBUGSCR1r'
 */




/*******************************************************************************
 * REGISTER:  CFAPDEBUGSCR2
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPDEBUGSCR2.
 */
#define READ_CFAPDEBUGSCR2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPDEBUGSCR2r_BLKACC,4,0,p,CFAPDEBUGSCR2r_OFFSET,0,(r._cfapdebugscr2),1)
#define WRITE_CFAPDEBUGSCR2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPDEBUGSCR2r_BLKACC,4,0,p,CFAPDEBUGSCR2r_OFFSET,0,&(r._cfapdebugscr2),1)

/*******************************************************************************
 * End of 'CFAPDEBUGSCR2r'
 */




/*******************************************************************************
 * REGISTER:  CFAPFULLTHRESHOLDRESET
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPFULLTHRESHOLDRESET.
 */
#define READ_CFAPFULLTHRESHOLDRESETr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPFULLTHRESHOLDRESETr_BLKACC,4,0,p,CFAPFULLTHRESHOLDRESETr_OFFSET,0,(r._cfapfullthresholdreset),1)
#define WRITE_CFAPFULLTHRESHOLDRESETr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPFULLTHRESHOLDRESETr_BLKACC,4,0,p,CFAPFULLTHRESHOLDRESETr_OFFSET,0,&(r._cfapfullthresholdreset),1)

/*******************************************************************************
 * End of 'CFAPFULLTHRESHOLDRESETr'
 */




/*******************************************************************************
 * REGISTER:  CFAPFULLTHRESHOLDSET
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPFULLTHRESHOLDSET.
 */
#define READ_CFAPFULLTHRESHOLDSETr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPFULLTHRESHOLDSETr_BLKACC,4,0,p,CFAPFULLTHRESHOLDSETr_OFFSET,0,(r._cfapfullthresholdset),1)
#define WRITE_CFAPFULLTHRESHOLDSETr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPFULLTHRESHOLDSETr_BLKACC,4,0,p,CFAPFULLTHRESHOLDSETr_OFFSET,0,&(r._cfapfullthresholdset),1)

/*******************************************************************************
 * End of 'CFAPFULLTHRESHOLDSETr'
 */




/*******************************************************************************
 * REGISTER:  CFAPINIT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPINIT.
 */
#define READ_CFAPINITr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPINITr_BLKACC,4,0,p,CFAPINITr_OFFSET,0,(r._cfapinit),1)
#define WRITE_CFAPINITr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPINITr_BLKACC,4,0,p,CFAPINITr_OFFSET,0,&(r._cfapinit),1)

/*******************************************************************************
 * End of 'CFAPINITr'
 */




/*******************************************************************************
 * REGISTER:  CFAPMEMDEBUG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPMEMDEBUG.
 */
#define READ_CFAPMEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPMEMDEBUGr_BLKACC,4,0,p,CFAPMEMDEBUGr_OFFSET,0,(r._cfapmemdebug),1)
#define WRITE_CFAPMEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPMEMDEBUGr_BLKACC,4,0,p,CFAPMEMDEBUGr_OFFSET,0,&(r._cfapmemdebug),1)

/*******************************************************************************
 * End of 'CFAPMEMDEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CFAPREADPOINTER
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAPREADPOINTER.
 */
#define READ_CFAPREADPOINTERr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAPREADPOINTERr_BLKACC,4,0,p,CFAPREADPOINTERr_OFFSET,0,(r._cfapreadpointer),1)
#define WRITE_CFAPREADPOINTERr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAPREADPOINTERr_BLKACC,4,0,p,CFAPREADPOINTERr_OFFSET,0,&(r._cfapreadpointer),1)

/*******************************************************************************
 * End of 'CFAPREADPOINTERr'
 */




/*******************************************************************************
 * REGISTER:  CFAP_ARBITER_CONTROL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAP_ARBITER_CONTROL.
 */
#define READ_CFAP_ARBITER_CONTROLr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAP_ARBITER_CONTROLr_BLKACC,4,0,p,CFAP_ARBITER_CONTROLr_OFFSET,0,(r._cfap_arbiter_control),1)
#define WRITE_CFAP_ARBITER_CONTROLr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAP_ARBITER_CONTROLr_BLKACC,4,0,p,CFAP_ARBITER_CONTROLr_OFFSET,0,&(r._cfap_arbiter_control),1)

/*******************************************************************************
 * End of 'CFAP_ARBITER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CFAP_ARBITER_MASK
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAP_ARBITER_MASK.
 */
#define READ_CFAP_ARBITER_MASKr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAP_ARBITER_MASKr_BLKACC,4,0,p,CFAP_ARBITER_MASKr_OFFSET,0,(r._cfap_arbiter_mask),1)
#define WRITE_CFAP_ARBITER_MASKr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAP_ARBITER_MASKr_BLKACC,4,0,p,CFAP_ARBITER_MASKr_OFFSET,0,&(r._cfap_arbiter_mask),1)

/*******************************************************************************
 * End of 'CFAP_ARBITER_MASKr'
 */




/*******************************************************************************
 * REGISTER:  CFAP_ARBITER_RANDOM_SEED
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CFAP_ARBITER_RANDOM_SEED.
 */
#define READ_CFAP_ARBITER_RANDOM_SEEDr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAP_ARBITER_RANDOM_SEEDr_BLKACC,4,0,p,CFAP_ARBITER_RANDOM_SEEDr_OFFSET,0,(r._cfap_arbiter_random_seed),1)
#define WRITE_CFAP_ARBITER_RANDOM_SEEDr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAP_ARBITER_RANDOM_SEEDr_BLKACC,4,0,p,CFAP_ARBITER_RANDOM_SEEDr_OFFSET,0,&(r._cfap_arbiter_random_seed),1)

/*******************************************************************************
 * End of 'CFAP_ARBITER_RANDOM_SEEDr'
 */




/*******************************************************************************
 * REGISTER:  CFAP_ARBITER_RANKER
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access CFAP_ARBITER_RANKER.
 */
#define READ_CFAP_ARBITER_RANKERr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CFAP_ARBITER_RANKERr_BLKACC,4,0,p,CFAP_ARBITER_RANKERr_OFFSET,0,(r._cfap_arbiter_ranker),2)
#define WRITE_CFAP_ARBITER_RANKERr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CFAP_ARBITER_RANKERr_BLKACC,4,0,p,CFAP_ARBITER_RANKERr_OFFSET,0,&(r._cfap_arbiter_ranker),2)

/*******************************************************************************
 * End of 'CFAP_ARBITER_RANKERr'
 */




/*******************************************************************************
 * REGISTER:  CFG_RAM_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access CFG_RAM_CONTROL_1.
 */
#define READ_CFG_RAM_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,CFG_RAM_CONTROL_1r_BLKACC,1,n,0,CFG_RAM_CONTROL_1r_OFFSET,0,(r._cfg_ram_control_1),2)
#define WRITE_CFG_RAM_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,CFG_RAM_CONTROL_1r_BLKACC,1,n,0,CFG_RAM_CONTROL_1r_OFFSET,0,&(r._cfg_ram_control_1),2)
#define WRITE_CFG_RAM_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,CFG_RAM_CONTROL_1r_BLKACC,1,-1,0,CFG_RAM_CONTROL_1r_OFFSET,0,&(r._cfg_ram_control_1),2)

/*******************************************************************************
 * End of 'CFG_RAM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CFG_RAM_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CFG_RAM_CONTROL_2.
 */
#define READ_CFG_RAM_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,CFG_RAM_CONTROL_2r_BLKACC,1,n,0,CFG_RAM_CONTROL_2r_OFFSET,0,(r._cfg_ram_control_2),1)
#define WRITE_CFG_RAM_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,CFG_RAM_CONTROL_2r_BLKACC,1,n,0,CFG_RAM_CONTROL_2r_OFFSET,0,&(r._cfg_ram_control_2),1)
#define WRITE_CFG_RAM_CONTROL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,CFG_RAM_CONTROL_2r_BLKACC,1,-1,0,CFG_RAM_CONTROL_2r_OFFSET,0,&(r._cfg_ram_control_2),1)

/*******************************************************************************
 * End of 'CFG_RAM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CFG_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CFG_SER_CONTROL.
 */
#define READ_CFG_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,CFG_SER_CONTROLr_BLKACC,1,CFG_SER_CONTROLr_OFFSET,0,(r._cfg_ser_control), 1)
#define WRITE_CFG_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,CFG_SER_CONTROLr_BLKACC,1,CFG_SER_CONTROLr_OFFSET,0,&(r._cfg_ser_control), 1)

/*******************************************************************************
 * End of 'CFG_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CHFC2PFC_STATE
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access CHFC2PFC_STATE.
 */
#define READ_CHFC2PFC_STATEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CHFC2PFC_STATEr_BLKACC,5,0,p,CHFC2PFC_STATEr_OFFSET,0,(r._chfc2pfc_state),1)
#define WRITE_CHFC2PFC_STATEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CHFC2PFC_STATEr_BLKACC,5,0,p,CHFC2PFC_STATEr_OFFSET,0,&(r._chfc2pfc_state),1)

/*******************************************************************************
 * End of 'CHFC2PFC_STATEr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_CLEAR_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_CLEAR_ECC_STATUS.
 */
#define READ_CLMAC_CLEAR_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_CLEAR_ECC_STATUSr_BLKACC,p,CLMAC_CLEAR_ECC_STATUSr_OFFSET,0,(r._clmac_clear_ecc_status), 2)
#define WRITE_CLMAC_CLEAR_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_CLEAR_ECC_STATUSr_BLKACC,p,CLMAC_CLEAR_ECC_STATUSr_OFFSET,0,&(r._clmac_clear_ecc_status), 2)

/*******************************************************************************
 * End of 'CLMAC_CLEAR_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_CLEAR_FIFO_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_CLEAR_FIFO_STATUS.
 */
#define READ_CLMAC_CLEAR_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_CLEAR_FIFO_STATUSr_BLKACC,p,CLMAC_CLEAR_FIFO_STATUSr_OFFSET,0,(r._clmac_clear_fifo_status), 2)
#define WRITE_CLMAC_CLEAR_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_CLEAR_FIFO_STATUSr_BLKACC,p,CLMAC_CLEAR_FIFO_STATUSr_OFFSET,0,&(r._clmac_clear_fifo_status), 2)

/*******************************************************************************
 * End of 'CLMAC_CLEAR_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_CLEAR_RX_LSS_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_CLEAR_RX_LSS_STATUS.
 */
#define READ_CLMAC_CLEAR_RX_LSS_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_CLEAR_RX_LSS_STATUSr_BLKACC,p,CLMAC_CLEAR_RX_LSS_STATUSr_OFFSET,0,(r._clmac_clear_rx_lss_status), 2)
#define WRITE_CLMAC_CLEAR_RX_LSS_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_CLEAR_RX_LSS_STATUSr_BLKACC,p,CLMAC_CLEAR_RX_LSS_STATUSr_OFFSET,0,&(r._clmac_clear_rx_lss_status), 2)

/*******************************************************************************
 * End of 'CLMAC_CLEAR_RX_LSS_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_CTRL.
 */
#define READ_CLMAC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_CTRLr_BLKACC,p,CLMAC_CTRLr_OFFSET,0,(r._clmac_ctrl), 2)
#define WRITE_CLMAC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_CTRLr_BLKACC,p,CLMAC_CTRLr_OFFSET,0,&(r._clmac_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_E2ECC_DATA_HDR_0
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_E2ECC_DATA_HDR_0.
 */
#define READ_CLMAC_E2ECC_DATA_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_E2ECC_DATA_HDR_0r_BLKACC,p,CLMAC_E2ECC_DATA_HDR_0r_OFFSET,0,(r._clmac_e2ecc_data_hdr_0), 2)
#define WRITE_CLMAC_E2ECC_DATA_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_E2ECC_DATA_HDR_0r_BLKACC,p,CLMAC_E2ECC_DATA_HDR_0r_OFFSET,0,&(r._clmac_e2ecc_data_hdr_0), 2)

/*******************************************************************************
 * End of 'CLMAC_E2ECC_DATA_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_E2ECC_DATA_HDR_1
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_E2ECC_DATA_HDR_1.
 */
#define READ_CLMAC_E2ECC_DATA_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_E2ECC_DATA_HDR_1r_BLKACC,p,CLMAC_E2ECC_DATA_HDR_1r_OFFSET,0,(r._clmac_e2ecc_data_hdr_1), 2)
#define WRITE_CLMAC_E2ECC_DATA_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_E2ECC_DATA_HDR_1r_BLKACC,p,CLMAC_E2ECC_DATA_HDR_1r_OFFSET,0,&(r._clmac_e2ecc_data_hdr_1), 2)

/*******************************************************************************
 * End of 'CLMAC_E2ECC_DATA_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_E2ECC_MODULE_HDR_0
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_E2ECC_MODULE_HDR_0.
 */
#define READ_CLMAC_E2ECC_MODULE_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_E2ECC_MODULE_HDR_0r_BLKACC,p,CLMAC_E2ECC_MODULE_HDR_0r_OFFSET,0,(r._clmac_e2ecc_module_hdr_0), 2)
#define WRITE_CLMAC_E2ECC_MODULE_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_E2ECC_MODULE_HDR_0r_BLKACC,p,CLMAC_E2ECC_MODULE_HDR_0r_OFFSET,0,&(r._clmac_e2ecc_module_hdr_0), 2)

/*******************************************************************************
 * End of 'CLMAC_E2ECC_MODULE_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_E2ECC_MODULE_HDR_1
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_E2ECC_MODULE_HDR_1.
 */
#define READ_CLMAC_E2ECC_MODULE_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_E2ECC_MODULE_HDR_1r_BLKACC,p,CLMAC_E2ECC_MODULE_HDR_1r_OFFSET,0,(r._clmac_e2ecc_module_hdr_1), 2)
#define WRITE_CLMAC_E2ECC_MODULE_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_E2ECC_MODULE_HDR_1r_BLKACC,p,CLMAC_E2ECC_MODULE_HDR_1r_OFFSET,0,&(r._clmac_e2ecc_module_hdr_1), 2)

/*******************************************************************************
 * End of 'CLMAC_E2ECC_MODULE_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_E2EFC_DATA_HDR_0
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_E2EFC_DATA_HDR_0.
 */
#define READ_CLMAC_E2EFC_DATA_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_E2EFC_DATA_HDR_0r_BLKACC,p,CLMAC_E2EFC_DATA_HDR_0r_OFFSET,0,(r._clmac_e2efc_data_hdr_0), 2)
#define WRITE_CLMAC_E2EFC_DATA_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_E2EFC_DATA_HDR_0r_BLKACC,p,CLMAC_E2EFC_DATA_HDR_0r_OFFSET,0,&(r._clmac_e2efc_data_hdr_0), 2)

/*******************************************************************************
 * End of 'CLMAC_E2EFC_DATA_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_E2EFC_DATA_HDR_1
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_E2EFC_DATA_HDR_1.
 */
#define READ_CLMAC_E2EFC_DATA_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_E2EFC_DATA_HDR_1r_BLKACC,p,CLMAC_E2EFC_DATA_HDR_1r_OFFSET,0,(r._clmac_e2efc_data_hdr_1), 2)
#define WRITE_CLMAC_E2EFC_DATA_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_E2EFC_DATA_HDR_1r_BLKACC,p,CLMAC_E2EFC_DATA_HDR_1r_OFFSET,0,&(r._clmac_e2efc_data_hdr_1), 2)

/*******************************************************************************
 * End of 'CLMAC_E2EFC_DATA_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_E2EFC_MODULE_HDR_0
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_E2EFC_MODULE_HDR_0.
 */
#define READ_CLMAC_E2EFC_MODULE_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_E2EFC_MODULE_HDR_0r_BLKACC,p,CLMAC_E2EFC_MODULE_HDR_0r_OFFSET,0,(r._clmac_e2efc_module_hdr_0), 2)
#define WRITE_CLMAC_E2EFC_MODULE_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_E2EFC_MODULE_HDR_0r_BLKACC,p,CLMAC_E2EFC_MODULE_HDR_0r_OFFSET,0,&(r._clmac_e2efc_module_hdr_0), 2)

/*******************************************************************************
 * End of 'CLMAC_E2EFC_MODULE_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_E2EFC_MODULE_HDR_1
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_E2EFC_MODULE_HDR_1.
 */
#define READ_CLMAC_E2EFC_MODULE_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_E2EFC_MODULE_HDR_1r_BLKACC,p,CLMAC_E2EFC_MODULE_HDR_1r_OFFSET,0,(r._clmac_e2efc_module_hdr_1), 2)
#define WRITE_CLMAC_E2EFC_MODULE_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_E2EFC_MODULE_HDR_1r_BLKACC,p,CLMAC_E2EFC_MODULE_HDR_1r_OFFSET,0,&(r._clmac_e2efc_module_hdr_1), 2)

/*******************************************************************************
 * End of 'CLMAC_E2EFC_MODULE_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_E2E_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_E2E_CTRL.
 */
#define READ_CLMAC_E2E_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_E2E_CTRLr_BLKACC,p,CLMAC_E2E_CTRLr_OFFSET,0,(r._clmac_e2e_ctrl), 2)
#define WRITE_CLMAC_E2E_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_E2E_CTRLr_BLKACC,p,CLMAC_E2E_CTRLr_OFFSET,0,&(r._clmac_e2e_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_E2E_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_ECC_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_ECC_CTRL.
 */
#define READ_CLMAC_ECC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_ECC_CTRLr_BLKACC,p,CLMAC_ECC_CTRLr_OFFSET,0,(r._clmac_ecc_ctrl), 2)
#define WRITE_CLMAC_ECC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_ECC_CTRLr_BLKACC,p,CLMAC_ECC_CTRLr_OFFSET,0,&(r._clmac_ecc_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_ECC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_ECC_FORCE_DOUBLE_BIT_ERR
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_ECC_FORCE_DOUBLE_BIT_ERR.
 */
#define READ_CLMAC_ECC_FORCE_DOUBLE_BIT_ERRr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_BLKACC,p,CLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_OFFSET,0,(r._clmac_ecc_force_double_bit_err), 2)
#define WRITE_CLMAC_ECC_FORCE_DOUBLE_BIT_ERRr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_BLKACC,p,CLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_OFFSET,0,&(r._clmac_ecc_force_double_bit_err), 2)

/*******************************************************************************
 * End of 'CLMAC_ECC_FORCE_DOUBLE_BIT_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_ECC_FORCE_SINGLE_BIT_ERR
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_ECC_FORCE_SINGLE_BIT_ERR.
 */
#define READ_CLMAC_ECC_FORCE_SINGLE_BIT_ERRr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_ECC_FORCE_SINGLE_BIT_ERRr_BLKACC,p,CLMAC_ECC_FORCE_SINGLE_BIT_ERRr_OFFSET,0,(r._clmac_ecc_force_single_bit_err), 2)
#define WRITE_CLMAC_ECC_FORCE_SINGLE_BIT_ERRr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_ECC_FORCE_SINGLE_BIT_ERRr_BLKACC,p,CLMAC_ECC_FORCE_SINGLE_BIT_ERRr_OFFSET,0,&(r._clmac_ecc_force_single_bit_err), 2)

/*******************************************************************************
 * End of 'CLMAC_ECC_FORCE_SINGLE_BIT_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_EEE_1_SEC_LINK_STATUS_TIMER
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_EEE_1_SEC_LINK_STATUS_TIMER.
 */
#define READ_CLMAC_EEE_1_SEC_LINK_STATUS_TIMERr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_BLKACC,p,CLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_OFFSET,0,(r._clmac_eee_1_sec_link_status_timer), 2)
#define WRITE_CLMAC_EEE_1_SEC_LINK_STATUS_TIMERr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_BLKACC,p,CLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_OFFSET,0,&(r._clmac_eee_1_sec_link_status_timer), 2)

/*******************************************************************************
 * End of 'CLMAC_EEE_1_SEC_LINK_STATUS_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_EEE_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_EEE_CTRL.
 */
#define READ_CLMAC_EEE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_EEE_CTRLr_BLKACC,p,CLMAC_EEE_CTRLr_OFFSET,0,(r._clmac_eee_ctrl), 2)
#define WRITE_CLMAC_EEE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_EEE_CTRLr_BLKACC,p,CLMAC_EEE_CTRLr_OFFSET,0,&(r._clmac_eee_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_EEE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_EEE_TIMERS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_EEE_TIMERS.
 */
#define READ_CLMAC_EEE_TIMERSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_EEE_TIMERSr_BLKACC,p,CLMAC_EEE_TIMERSr_OFFSET,0,(r._clmac_eee_timers), 2)
#define WRITE_CLMAC_EEE_TIMERSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_EEE_TIMERSr_BLKACC,p,CLMAC_EEE_TIMERSr_OFFSET,0,&(r._clmac_eee_timers), 2)

/*******************************************************************************
 * End of 'CLMAC_EEE_TIMERSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_FIFO_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_FIFO_STATUS.
 */
#define READ_CLMAC_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_FIFO_STATUSr_BLKACC,p,CLMAC_FIFO_STATUSr_OFFSET,0,(r._clmac_fifo_status), 2)
#define WRITE_CLMAC_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_FIFO_STATUSr_BLKACC,p,CLMAC_FIFO_STATUSr_OFFSET,0,&(r._clmac_fifo_status), 2)

/*******************************************************************************
 * End of 'CLMAC_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_GMII_EEE_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_GMII_EEE_CTRL.
 */
#define READ_CLMAC_GMII_EEE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_GMII_EEE_CTRLr_BLKACC,p,CLMAC_GMII_EEE_CTRLr_OFFSET,0,(r._clmac_gmii_eee_ctrl), 2)
#define WRITE_CLMAC_GMII_EEE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_GMII_EEE_CTRLr_BLKACC,p,CLMAC_GMII_EEE_CTRLr_OFFSET,0,&(r._clmac_gmii_eee_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_GMII_EEE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_HIGIG_HDR_0
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_HIGIG_HDR_0.
 */
#define READ_CLMAC_HIGIG_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_HIGIG_HDR_0r_BLKACC,p,CLMAC_HIGIG_HDR_0r_OFFSET,0,(r._clmac_higig_hdr_0), 2)
#define WRITE_CLMAC_HIGIG_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_HIGIG_HDR_0r_BLKACC,p,CLMAC_HIGIG_HDR_0r_OFFSET,0,&(r._clmac_higig_hdr_0), 2)

/*******************************************************************************
 * End of 'CLMAC_HIGIG_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_HIGIG_HDR_1
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_HIGIG_HDR_1.
 */
#define READ_CLMAC_HIGIG_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_HIGIG_HDR_1r_BLKACC,p,CLMAC_HIGIG_HDR_1r_OFFSET,0,(r._clmac_higig_hdr_1), 2)
#define WRITE_CLMAC_HIGIG_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_HIGIG_HDR_1r_BLKACC,p,CLMAC_HIGIG_HDR_1r_OFFSET,0,&(r._clmac_higig_hdr_1), 2)

/*******************************************************************************
 * End of 'CLMAC_HIGIG_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_LAG_FAILOVER_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_LAG_FAILOVER_STATUS.
 */
#define READ_CLMAC_LAG_FAILOVER_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_LAG_FAILOVER_STATUSr_BLKACC,p,CLMAC_LAG_FAILOVER_STATUSr_OFFSET,0,(r._clmac_lag_failover_status), 2)
#define WRITE_CLMAC_LAG_FAILOVER_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_LAG_FAILOVER_STATUSr_BLKACC,p,CLMAC_LAG_FAILOVER_STATUSr_OFFSET,0,&(r._clmac_lag_failover_status), 2)

/*******************************************************************************
 * End of 'CLMAC_LAG_FAILOVER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_LLFC_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_LLFC_CTRL.
 */
#define READ_CLMAC_LLFC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_LLFC_CTRLr_BLKACC,p,CLMAC_LLFC_CTRLr_OFFSET,0,(r._clmac_llfc_ctrl), 2)
#define WRITE_CLMAC_LLFC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_LLFC_CTRLr_BLKACC,p,CLMAC_LLFC_CTRLr_OFFSET,0,&(r._clmac_llfc_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_LLFC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_MEM_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_MEM_CTRL.
 */
#define READ_CLMAC_MEM_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_MEM_CTRLr_BLKACC,p,CLMAC_MEM_CTRLr_OFFSET,0,(r._clmac_mem_ctrl), 2)
#define WRITE_CLMAC_MEM_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_MEM_CTRLr_BLKACC,p,CLMAC_MEM_CTRLr_OFFSET,0,&(r._clmac_mem_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_MEM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_MODE
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_MODE.
 */
#define READ_CLMAC_MODEr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_MODEr_BLKACC,p,CLMAC_MODEr_OFFSET,0,(r._clmac_mode), 2)
#define WRITE_CLMAC_MODEr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_MODEr_BLKACC,p,CLMAC_MODEr_OFFSET,0,&(r._clmac_mode), 2)

/*******************************************************************************
 * End of 'CLMAC_MODEr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_PAUSE_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_PAUSE_CTRL.
 */
#define READ_CLMAC_PAUSE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_PAUSE_CTRLr_BLKACC,p,CLMAC_PAUSE_CTRLr_OFFSET,0,(r._clmac_pause_ctrl), 2)
#define WRITE_CLMAC_PAUSE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_PAUSE_CTRLr_BLKACC,p,CLMAC_PAUSE_CTRLr_OFFSET,0,&(r._clmac_pause_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_PAUSE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_PFC_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_PFC_CTRL.
 */
#define READ_CLMAC_PFC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_PFC_CTRLr_BLKACC,p,CLMAC_PFC_CTRLr_OFFSET,0,(r._clmac_pfc_ctrl), 2)
#define WRITE_CLMAC_PFC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_PFC_CTRLr_BLKACC,p,CLMAC_PFC_CTRLr_OFFSET,0,&(r._clmac_pfc_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_PFC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_PFC_DA
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_PFC_DA.
 */
#define READ_CLMAC_PFC_DAr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_PFC_DAr_BLKACC,p,CLMAC_PFC_DAr_OFFSET,0,(r._clmac_pfc_da), 2)
#define WRITE_CLMAC_PFC_DAr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_PFC_DAr_BLKACC,p,CLMAC_PFC_DAr_OFFSET,0,&(r._clmac_pfc_da), 2)

/*******************************************************************************
 * End of 'CLMAC_PFC_DAr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_PFC_OPCODE
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_PFC_OPCODE.
 */
#define READ_CLMAC_PFC_OPCODEr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_PFC_OPCODEr_BLKACC,p,CLMAC_PFC_OPCODEr_OFFSET,0,(r._clmac_pfc_opcode), 2)
#define WRITE_CLMAC_PFC_OPCODEr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_PFC_OPCODEr_BLKACC,p,CLMAC_PFC_OPCODEr_OFFSET,0,&(r._clmac_pfc_opcode), 2)

/*******************************************************************************
 * End of 'CLMAC_PFC_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_PFC_TYPE
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_PFC_TYPE.
 */
#define READ_CLMAC_PFC_TYPEr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_PFC_TYPEr_BLKACC,p,CLMAC_PFC_TYPEr_OFFSET,0,(r._clmac_pfc_type), 2)
#define WRITE_CLMAC_PFC_TYPEr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_PFC_TYPEr_BLKACC,p,CLMAC_PFC_TYPEr_OFFSET,0,&(r._clmac_pfc_type), 2)

/*******************************************************************************
 * End of 'CLMAC_PFC_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_RX_CDC_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_RX_CDC_ECC_STATUS.
 */
#define READ_CLMAC_RX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_RX_CDC_ECC_STATUSr_BLKACC,p,CLMAC_RX_CDC_ECC_STATUSr_OFFSET,0,(r._clmac_rx_cdc_ecc_status), 2)
#define WRITE_CLMAC_RX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_RX_CDC_ECC_STATUSr_BLKACC,p,CLMAC_RX_CDC_ECC_STATUSr_OFFSET,0,&(r._clmac_rx_cdc_ecc_status), 2)

/*******************************************************************************
 * End of 'CLMAC_RX_CDC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_RX_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_RX_CTRL.
 */
#define READ_CLMAC_RX_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_RX_CTRLr_BLKACC,p,CLMAC_RX_CTRLr_OFFSET,0,(r._clmac_rx_ctrl), 2)
#define WRITE_CLMAC_RX_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_RX_CTRLr_BLKACC,p,CLMAC_RX_CTRLr_OFFSET,0,&(r._clmac_rx_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_RX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_RX_LLFC_MSG_FIELDS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_RX_LLFC_MSG_FIELDS.
 */
#define READ_CLMAC_RX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_RX_LLFC_MSG_FIELDSr_BLKACC,p,CLMAC_RX_LLFC_MSG_FIELDSr_OFFSET,0,(r._clmac_rx_llfc_msg_fields), 2)
#define WRITE_CLMAC_RX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_RX_LLFC_MSG_FIELDSr_BLKACC,p,CLMAC_RX_LLFC_MSG_FIELDSr_OFFSET,0,&(r._clmac_rx_llfc_msg_fields), 2)

/*******************************************************************************
 * End of 'CLMAC_RX_LLFC_MSG_FIELDSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_RX_LSS_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_RX_LSS_CTRL.
 */
#define READ_CLMAC_RX_LSS_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_RX_LSS_CTRLr_BLKACC,p,CLMAC_RX_LSS_CTRLr_OFFSET,0,(r._clmac_rx_lss_ctrl), 2)
#define WRITE_CLMAC_RX_LSS_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_RX_LSS_CTRLr_BLKACC,p,CLMAC_RX_LSS_CTRLr_OFFSET,0,&(r._clmac_rx_lss_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_RX_LSS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_RX_LSS_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_RX_LSS_STATUS.
 */
#define READ_CLMAC_RX_LSS_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_RX_LSS_STATUSr_BLKACC,p,CLMAC_RX_LSS_STATUSr_OFFSET,0,(r._clmac_rx_lss_status), 2)
#define WRITE_CLMAC_RX_LSS_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_RX_LSS_STATUSr_BLKACC,p,CLMAC_RX_LSS_STATUSr_OFFSET,0,&(r._clmac_rx_lss_status), 2)

/*******************************************************************************
 * End of 'CLMAC_RX_LSS_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_RX_MAC_SA
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_RX_MAC_SA.
 */
#define READ_CLMAC_RX_MAC_SAr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_RX_MAC_SAr_BLKACC,p,CLMAC_RX_MAC_SAr_OFFSET,0,(r._clmac_rx_mac_sa), 2)
#define WRITE_CLMAC_RX_MAC_SAr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_RX_MAC_SAr_BLKACC,p,CLMAC_RX_MAC_SAr_OFFSET,0,&(r._clmac_rx_mac_sa), 2)

/*******************************************************************************
 * End of 'CLMAC_RX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_RX_MAX_SIZE
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_RX_MAX_SIZE.
 */
#define READ_CLMAC_RX_MAX_SIZEr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_RX_MAX_SIZEr_BLKACC,p,CLMAC_RX_MAX_SIZEr_OFFSET,0,(r._clmac_rx_max_size), 2)
#define WRITE_CLMAC_RX_MAX_SIZEr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_RX_MAX_SIZEr_BLKACC,p,CLMAC_RX_MAX_SIZEr_OFFSET,0,&(r._clmac_rx_max_size), 2)

/*******************************************************************************
 * End of 'CLMAC_RX_MAX_SIZEr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_RX_TS_MEM_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_RX_TS_MEM_ECC_STATUS.
 */
#define READ_CLMAC_RX_TS_MEM_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_RX_TS_MEM_ECC_STATUSr_BLKACC,p,CLMAC_RX_TS_MEM_ECC_STATUSr_OFFSET,0,(r._clmac_rx_ts_mem_ecc_status), 2)
#define WRITE_CLMAC_RX_TS_MEM_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_RX_TS_MEM_ECC_STATUSr_BLKACC,p,CLMAC_RX_TS_MEM_ECC_STATUSr_OFFSET,0,&(r._clmac_rx_ts_mem_ecc_status), 2)

/*******************************************************************************
 * End of 'CLMAC_RX_TS_MEM_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_RX_VLAN_TAG
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_RX_VLAN_TAG.
 */
#define READ_CLMAC_RX_VLAN_TAGr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_RX_VLAN_TAGr_BLKACC,p,CLMAC_RX_VLAN_TAGr_OFFSET,0,(r._clmac_rx_vlan_tag), 2)
#define WRITE_CLMAC_RX_VLAN_TAGr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_RX_VLAN_TAGr_BLKACC,p,CLMAC_RX_VLAN_TAGr_OFFSET,0,&(r._clmac_rx_vlan_tag), 2)

/*******************************************************************************
 * End of 'CLMAC_RX_VLAN_TAGr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_SPARE0
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_SPARE0.
 */
#define READ_CLMAC_SPARE0r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_SPARE0r_BLKACC,p,CLMAC_SPARE0r_OFFSET,0,(r._clmac_spare0), 2)
#define WRITE_CLMAC_SPARE0r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_SPARE0r_BLKACC,p,CLMAC_SPARE0r_OFFSET,0,&(r._clmac_spare0), 2)

/*******************************************************************************
 * End of 'CLMAC_SPARE0r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_SPARE1
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_SPARE1.
 */
#define READ_CLMAC_SPARE1r(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_SPARE1r_BLKACC,p,CLMAC_SPARE1r_OFFSET,0,(r._clmac_spare1), 2)
#define WRITE_CLMAC_SPARE1r(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_SPARE1r_BLKACC,p,CLMAC_SPARE1r_OFFSET,0,&(r._clmac_spare1), 2)

/*******************************************************************************
 * End of 'CLMAC_SPARE1r'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TIMESTAMP_ADJUST
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TIMESTAMP_ADJUST.
 */
#define READ_CLMAC_TIMESTAMP_ADJUSTr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TIMESTAMP_ADJUSTr_BLKACC,p,CLMAC_TIMESTAMP_ADJUSTr_OFFSET,0,(r._clmac_timestamp_adjust), 2)
#define WRITE_CLMAC_TIMESTAMP_ADJUSTr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TIMESTAMP_ADJUSTr_BLKACC,p,CLMAC_TIMESTAMP_ADJUSTr_OFFSET,0,&(r._clmac_timestamp_adjust), 2)

/*******************************************************************************
 * End of 'CLMAC_TIMESTAMP_ADJUSTr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TXFIFO_CELL_CNT
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TXFIFO_CELL_CNT.
 */
#define READ_CLMAC_TXFIFO_CELL_CNTr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TXFIFO_CELL_CNTr_BLKACC,p,CLMAC_TXFIFO_CELL_CNTr_OFFSET,0,(r._clmac_txfifo_cell_cnt), 2)
#define WRITE_CLMAC_TXFIFO_CELL_CNTr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TXFIFO_CELL_CNTr_BLKACC,p,CLMAC_TXFIFO_CELL_CNTr_OFFSET,0,&(r._clmac_txfifo_cell_cnt), 2)

/*******************************************************************************
 * End of 'CLMAC_TXFIFO_CELL_CNTr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TXFIFO_CELL_REQ_CNT
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TXFIFO_CELL_REQ_CNT.
 */
#define READ_CLMAC_TXFIFO_CELL_REQ_CNTr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TXFIFO_CELL_REQ_CNTr_BLKACC,p,CLMAC_TXFIFO_CELL_REQ_CNTr_OFFSET,0,(r._clmac_txfifo_cell_req_cnt), 2)
#define WRITE_CLMAC_TXFIFO_CELL_REQ_CNTr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TXFIFO_CELL_REQ_CNTr_BLKACC,p,CLMAC_TXFIFO_CELL_REQ_CNTr_OFFSET,0,&(r._clmac_txfifo_cell_req_cnt), 2)

/*******************************************************************************
 * End of 'CLMAC_TXFIFO_CELL_REQ_CNTr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TX_CDC_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TX_CDC_ECC_STATUS.
 */
#define READ_CLMAC_TX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TX_CDC_ECC_STATUSr_BLKACC,p,CLMAC_TX_CDC_ECC_STATUSr_OFFSET,0,(r._clmac_tx_cdc_ecc_status), 2)
#define WRITE_CLMAC_TX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TX_CDC_ECC_STATUSr_BLKACC,p,CLMAC_TX_CDC_ECC_STATUSr_OFFSET,0,&(r._clmac_tx_cdc_ecc_status), 2)

/*******************************************************************************
 * End of 'CLMAC_TX_CDC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TX_CRC_CORRUPT_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TX_CRC_CORRUPT_CTRL.
 */
#define READ_CLMAC_TX_CRC_CORRUPT_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TX_CRC_CORRUPT_CTRLr_BLKACC,p,CLMAC_TX_CRC_CORRUPT_CTRLr_OFFSET,0,(r._clmac_tx_crc_corrupt_ctrl), 2)
#define WRITE_CLMAC_TX_CRC_CORRUPT_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TX_CRC_CORRUPT_CTRLr_BLKACC,p,CLMAC_TX_CRC_CORRUPT_CTRLr_OFFSET,0,&(r._clmac_tx_crc_corrupt_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_TX_CRC_CORRUPT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TX_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TX_CTRL.
 */
#define READ_CLMAC_TX_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TX_CTRLr_BLKACC,p,CLMAC_TX_CTRLr_OFFSET,0,(r._clmac_tx_ctrl), 2)
#define WRITE_CLMAC_TX_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TX_CTRLr_BLKACC,p,CLMAC_TX_CTRLr_OFFSET,0,&(r._clmac_tx_ctrl), 2)

/*******************************************************************************
 * End of 'CLMAC_TX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TX_LLFC_MSG_FIELDS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TX_LLFC_MSG_FIELDS.
 */
#define READ_CLMAC_TX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TX_LLFC_MSG_FIELDSr_BLKACC,p,CLMAC_TX_LLFC_MSG_FIELDSr_OFFSET,0,(r._clmac_tx_llfc_msg_fields), 2)
#define WRITE_CLMAC_TX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TX_LLFC_MSG_FIELDSr_BLKACC,p,CLMAC_TX_LLFC_MSG_FIELDSr_OFFSET,0,&(r._clmac_tx_llfc_msg_fields), 2)

/*******************************************************************************
 * End of 'CLMAC_TX_LLFC_MSG_FIELDSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TX_MAC_SA
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TX_MAC_SA.
 */
#define READ_CLMAC_TX_MAC_SAr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TX_MAC_SAr_BLKACC,p,CLMAC_TX_MAC_SAr_OFFSET,0,(r._clmac_tx_mac_sa), 2)
#define WRITE_CLMAC_TX_MAC_SAr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TX_MAC_SAr_BLKACC,p,CLMAC_TX_MAC_SAr_OFFSET,0,&(r._clmac_tx_mac_sa), 2)

/*******************************************************************************
 * End of 'CLMAC_TX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TX_TIMESTAMP_FIFO_DATA
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TX_TIMESTAMP_FIFO_DATA.
 */
#define READ_CLMAC_TX_TIMESTAMP_FIFO_DATAr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TX_TIMESTAMP_FIFO_DATAr_BLKACC,p,CLMAC_TX_TIMESTAMP_FIFO_DATAr_OFFSET,0,(r._clmac_tx_timestamp_fifo_data), 2)
#define WRITE_CLMAC_TX_TIMESTAMP_FIFO_DATAr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TX_TIMESTAMP_FIFO_DATAr_BLKACC,p,CLMAC_TX_TIMESTAMP_FIFO_DATAr_OFFSET,0,&(r._clmac_tx_timestamp_fifo_data), 2)

/*******************************************************************************
 * End of 'CLMAC_TX_TIMESTAMP_FIFO_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_TX_TIMESTAMP_FIFO_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_TX_TIMESTAMP_FIFO_STATUS.
 */
#define READ_CLMAC_TX_TIMESTAMP_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_TX_TIMESTAMP_FIFO_STATUSr_BLKACC,p,CLMAC_TX_TIMESTAMP_FIFO_STATUSr_OFFSET,0,(r._clmac_tx_timestamp_fifo_status), 2)
#define WRITE_CLMAC_TX_TIMESTAMP_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_TX_TIMESTAMP_FIFO_STATUSr_BLKACC,p,CLMAC_TX_TIMESTAMP_FIFO_STATUSr_OFFSET,0,&(r._clmac_tx_timestamp_fifo_status), 2)

/*******************************************************************************
 * End of 'CLMAC_TX_TIMESTAMP_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLMAC_VERSION_ID
 * BLOCKS:   CLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access CLMAC_VERSION_ID.
 */
#define READ_CLMAC_VERSION_IDr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLMAC_VERSION_IDr_BLKACC,p,CLMAC_VERSION_IDr_OFFSET,0,(r._clmac_version_id), 2)
#define WRITE_CLMAC_VERSION_IDr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLMAC_VERSION_IDr_BLKACC,p,CLMAC_VERSION_IDr_OFFSET,0,&(r._clmac_version_id), 2)

/*******************************************************************************
 * End of 'CLMAC_VERSION_IDr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_CNTMAXSIZE
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_CNTMAXSIZE.
 */
#define READ_CLPORT_CNTMAXSIZEr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_CNTMAXSIZEr_BLKACC,p,CLPORT_CNTMAXSIZEr_OFFSET,0,(r._clport_cntmaxsize), 1)
#define WRITE_CLPORT_CNTMAXSIZEr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_CNTMAXSIZEr_BLKACC,p,CLPORT_CNTMAXSIZEr_OFFSET,0,&(r._clport_cntmaxsize), 1)

/*******************************************************************************
 * End of 'CLPORT_CNTMAXSIZEr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_CONFIG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_CONFIG.
 */
#define READ_CLPORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_CONFIGr_BLKACC,p,CLPORT_CONFIGr_OFFSET,0,(r._clport_config), 1)
#define WRITE_CLPORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_CONFIGr_BLKACC,p,CLPORT_CONFIGr_OFFSET,0,&(r._clport_config), 1)

/*******************************************************************************
 * End of 'CLPORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_ECC_CONTROL
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_ECC_CONTROL.
 */
#define READ_CLPORT_ECC_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_ECC_CONTROLr_BLKACC,p,CLPORT_ECC_CONTROLr_OFFSET,0,(r._clport_ecc_control), 1)
#define WRITE_CLPORT_ECC_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_ECC_CONTROLr_BLKACC,p,CLPORT_ECC_CONTROLr_OFFSET,0,&(r._clport_ecc_control), 1)

/*******************************************************************************
 * End of 'CLPORT_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_EEE_CLOCK_GATE
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_EEE_CLOCK_GATE.
 */
#define READ_CLPORT_EEE_CLOCK_GATEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_EEE_CLOCK_GATEr_BLKACC,p,CLPORT_EEE_CLOCK_GATEr_OFFSET,0,(r._clport_eee_clock_gate), 1)
#define WRITE_CLPORT_EEE_CLOCK_GATEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_EEE_CLOCK_GATEr_BLKACC,p,CLPORT_EEE_CLOCK_GATEr_OFFSET,0,&(r._clport_eee_clock_gate), 1)

/*******************************************************************************
 * End of 'CLPORT_EEE_CLOCK_GATEr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_EEE_CORE0_CLOCK_GATE_COUNTER
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_EEE_CORE0_CLOCK_GATE_COUNTER.
 */
#define READ_CLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_BLKACC,p,CLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_OFFSET,0,(r._clport_eee_core0_clock_gate_counter), 1)
#define WRITE_CLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_BLKACC,p,CLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_OFFSET,0,&(r._clport_eee_core0_clock_gate_counter), 1)

/*******************************************************************************
 * End of 'CLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_EEE_COUNTER_MODE
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_EEE_COUNTER_MODE.
 */
#define READ_CLPORT_EEE_COUNTER_MODEr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_EEE_COUNTER_MODEr_BLKACC,p,CLPORT_EEE_COUNTER_MODEr_OFFSET,0,(r._clport_eee_counter_mode), 1)
#define WRITE_CLPORT_EEE_COUNTER_MODEr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_EEE_COUNTER_MODEr_BLKACC,p,CLPORT_EEE_COUNTER_MODEr_OFFSET,0,&(r._clport_eee_counter_mode), 1)

/*******************************************************************************
 * End of 'CLPORT_EEE_COUNTER_MODEr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_EEE_DURATION_TIMER_PULSE
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_EEE_DURATION_TIMER_PULSE.
 */
#define READ_CLPORT_EEE_DURATION_TIMER_PULSEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_EEE_DURATION_TIMER_PULSEr_BLKACC,p,CLPORT_EEE_DURATION_TIMER_PULSEr_OFFSET,0,(r._clport_eee_duration_timer_pulse), 1)
#define WRITE_CLPORT_EEE_DURATION_TIMER_PULSEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_EEE_DURATION_TIMER_PULSEr_BLKACC,p,CLPORT_EEE_DURATION_TIMER_PULSEr_OFFSET,0,&(r._clport_eee_duration_timer_pulse), 1)

/*******************************************************************************
 * End of 'CLPORT_EEE_DURATION_TIMER_PULSEr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_ENABLE_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_ENABLE_REG.
 */
#define READ_CLPORT_ENABLE_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_ENABLE_REGr_BLKACC,p,CLPORT_ENABLE_REGr_OFFSET,0,(r._clport_enable_reg), 1)
#define WRITE_CLPORT_ENABLE_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_ENABLE_REGr_BLKACC,p,CLPORT_ENABLE_REGr_OFFSET,0,&(r._clport_enable_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_ENABLE_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_FAULT_LINK_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_FAULT_LINK_STATUS.
 */
#define READ_CLPORT_FAULT_LINK_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_FAULT_LINK_STATUSr_BLKACC,p,CLPORT_FAULT_LINK_STATUSr_OFFSET,0,(r._clport_fault_link_status), 1)
#define WRITE_CLPORT_FAULT_LINK_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_FAULT_LINK_STATUSr_BLKACC,p,CLPORT_FAULT_LINK_STATUSr_OFFSET,0,&(r._clport_fault_link_status), 1)

/*******************************************************************************
 * End of 'CLPORT_FAULT_LINK_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_FLOW_CONTROL_CONFIG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_FLOW_CONTROL_CONFIG.
 */
#define READ_CLPORT_FLOW_CONTROL_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_FLOW_CONTROL_CONFIGr_BLKACC,p,CLPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,(r._clport_flow_control_config), 1)
#define WRITE_CLPORT_FLOW_CONTROL_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_FLOW_CONTROL_CONFIGr_BLKACC,p,CLPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,&(r._clport_flow_control_config), 1)

/*******************************************************************************
 * End of 'CLPORT_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_FORCE_DOUBLE_BIT_ERROR
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_FORCE_DOUBLE_BIT_ERROR.
 */
#define READ_CLPORT_FORCE_DOUBLE_BIT_ERRORr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_FORCE_DOUBLE_BIT_ERRORr_BLKACC,p,CLPORT_FORCE_DOUBLE_BIT_ERRORr_OFFSET,0,(r._clport_force_double_bit_error), 1)
#define WRITE_CLPORT_FORCE_DOUBLE_BIT_ERRORr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_FORCE_DOUBLE_BIT_ERRORr_BLKACC,p,CLPORT_FORCE_DOUBLE_BIT_ERRORr_OFFSET,0,&(r._clport_force_double_bit_error), 1)

/*******************************************************************************
 * End of 'CLPORT_FORCE_DOUBLE_BIT_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_FORCE_SINGLE_BIT_ERROR
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_FORCE_SINGLE_BIT_ERROR.
 */
#define READ_CLPORT_FORCE_SINGLE_BIT_ERRORr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_FORCE_SINGLE_BIT_ERRORr_BLKACC,p,CLPORT_FORCE_SINGLE_BIT_ERRORr_OFFSET,0,(r._clport_force_single_bit_error), 1)
#define WRITE_CLPORT_FORCE_SINGLE_BIT_ERRORr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_FORCE_SINGLE_BIT_ERRORr_BLKACC,p,CLPORT_FORCE_SINGLE_BIT_ERRORr_OFFSET,0,&(r._clport_force_single_bit_error), 1)

/*******************************************************************************
 * End of 'CLPORT_FORCE_SINGLE_BIT_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_INTR_ENABLE
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_INTR_ENABLE.
 */
#define READ_CLPORT_INTR_ENABLEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_INTR_ENABLEr_BLKACC,p,CLPORT_INTR_ENABLEr_OFFSET,0,(r._clport_intr_enable), 1)
#define WRITE_CLPORT_INTR_ENABLEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_INTR_ENABLEr_BLKACC,p,CLPORT_INTR_ENABLEr_OFFSET,0,&(r._clport_intr_enable), 1)

/*******************************************************************************
 * End of 'CLPORT_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_INTR_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_INTR_STATUS.
 */
#define READ_CLPORT_INTR_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_INTR_STATUSr_BLKACC,p,CLPORT_INTR_STATUSr_OFFSET,0,(r._clport_intr_status), 1)
#define WRITE_CLPORT_INTR_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_INTR_STATUSr_BLKACC,p,CLPORT_INTR_STATUSr_OFFSET,0,&(r._clport_intr_status), 1)

/*******************************************************************************
 * End of 'CLPORT_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_LAG_FAILOVER_CONFIG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_LAG_FAILOVER_CONFIG.
 */
#define READ_CLPORT_LAG_FAILOVER_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_LAG_FAILOVER_CONFIGr_BLKACC,p,CLPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,(r._clport_lag_failover_config), 1)
#define WRITE_CLPORT_LAG_FAILOVER_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_LAG_FAILOVER_CONFIGr_BLKACC,p,CLPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,&(r._clport_lag_failover_config), 1)

/*******************************************************************************
 * End of 'CLPORT_LAG_FAILOVER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_LED_CHAIN_CONFIG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_LED_CHAIN_CONFIG.
 */
#define READ_CLPORT_LED_CHAIN_CONFIGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_LED_CHAIN_CONFIGr_BLKACC,p,CLPORT_LED_CHAIN_CONFIGr_OFFSET,0,(r._clport_led_chain_config), 1)
#define WRITE_CLPORT_LED_CHAIN_CONFIGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_LED_CHAIN_CONFIGr_BLKACC,p,CLPORT_LED_CHAIN_CONFIGr_OFFSET,0,&(r._clport_led_chain_config), 1)

/*******************************************************************************
 * End of 'CLPORT_LED_CHAIN_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_LINKSTATUS_DOWN
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_LINKSTATUS_DOWN.
 */
#define READ_CLPORT_LINKSTATUS_DOWNr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_LINKSTATUS_DOWNr_BLKACC,p,CLPORT_LINKSTATUS_DOWNr_OFFSET,0,(r._clport_linkstatus_down), 1)
#define WRITE_CLPORT_LINKSTATUS_DOWNr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_LINKSTATUS_DOWNr_BLKACC,p,CLPORT_LINKSTATUS_DOWNr_OFFSET,0,&(r._clport_linkstatus_down), 1)

/*******************************************************************************
 * End of 'CLPORT_LINKSTATUS_DOWNr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_LINKSTATUS_DOWN_CLEAR
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_LINKSTATUS_DOWN_CLEAR.
 */
#define READ_CLPORT_LINKSTATUS_DOWN_CLEARr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_LINKSTATUS_DOWN_CLEARr_BLKACC,p,CLPORT_LINKSTATUS_DOWN_CLEARr_OFFSET,0,(r._clport_linkstatus_down_clear), 1)
#define WRITE_CLPORT_LINKSTATUS_DOWN_CLEARr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_LINKSTATUS_DOWN_CLEARr_BLKACC,p,CLPORT_LINKSTATUS_DOWN_CLEARr_OFFSET,0,&(r._clport_linkstatus_down_clear), 1)

/*******************************************************************************
 * End of 'CLPORT_LINKSTATUS_DOWN_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MAC_CONTROL
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MAC_CONTROL.
 */
#define READ_CLPORT_MAC_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MAC_CONTROLr_BLKACC,p,CLPORT_MAC_CONTROLr_OFFSET,0,(r._clport_mac_control), 1)
#define WRITE_CLPORT_MAC_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MAC_CONTROLr_BLKACC,p,CLPORT_MAC_CONTROLr_OFFSET,0,&(r._clport_mac_control), 1)

/*******************************************************************************
 * End of 'CLPORT_MAC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MAC_RSV_MASK
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MAC_RSV_MASK.
 */
#define READ_CLPORT_MAC_RSV_MASKr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_MAC_RSV_MASKr_BLKACC,p,CLPORT_MAC_RSV_MASKr_OFFSET,0,(r._clport_mac_rsv_mask), 1)
#define WRITE_CLPORT_MAC_RSV_MASKr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_MAC_RSV_MASKr_BLKACC,p,CLPORT_MAC_RSV_MASKr_OFFSET,0,&(r._clport_mac_rsv_mask), 1)

/*******************************************************************************
 * End of 'CLPORT_MAC_RSV_MASKr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MIB_RESET
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MIB_RESET.
 */
#define READ_CLPORT_MIB_RESETr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MIB_RESETr_BLKACC,p,CLPORT_MIB_RESETr_OFFSET,0,(r._clport_mib_reset), 1)
#define WRITE_CLPORT_MIB_RESETr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MIB_RESETr_BLKACC,p,CLPORT_MIB_RESETr_OFFSET,0,&(r._clport_mib_reset), 1)

/*******************************************************************************
 * End of 'CLPORT_MIB_RESETr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MIB_RSC0_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MIB_RSC0_ECC_STATUS.
 */
#define READ_CLPORT_MIB_RSC0_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MIB_RSC0_ECC_STATUSr_BLKACC,p,CLPORT_MIB_RSC0_ECC_STATUSr_OFFSET,0,(r._clport_mib_rsc0_ecc_status), 1)
#define WRITE_CLPORT_MIB_RSC0_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MIB_RSC0_ECC_STATUSr_BLKACC,p,CLPORT_MIB_RSC0_ECC_STATUSr_OFFSET,0,&(r._clport_mib_rsc0_ecc_status), 1)

/*******************************************************************************
 * End of 'CLPORT_MIB_RSC0_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MIB_RSC1_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MIB_RSC1_ECC_STATUS.
 */
#define READ_CLPORT_MIB_RSC1_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MIB_RSC1_ECC_STATUSr_BLKACC,p,CLPORT_MIB_RSC1_ECC_STATUSr_OFFSET,0,(r._clport_mib_rsc1_ecc_status), 1)
#define WRITE_CLPORT_MIB_RSC1_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MIB_RSC1_ECC_STATUSr_BLKACC,p,CLPORT_MIB_RSC1_ECC_STATUSr_OFFSET,0,&(r._clport_mib_rsc1_ecc_status), 1)

/*******************************************************************************
 * End of 'CLPORT_MIB_RSC1_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MIB_RSC_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MIB_RSC_ECC_STATUS.
 */
#define READ_CLPORT_MIB_RSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MIB_RSC_ECC_STATUSr_BLKACC,p,CLPORT_MIB_RSC_ECC_STATUSr_OFFSET,i,(r._clport_mib_rsc_ecc_status), 1)
#define WRITE_CLPORT_MIB_RSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MIB_RSC_ECC_STATUSr_BLKACC,p,CLPORT_MIB_RSC_ECC_STATUSr_OFFSET,i,&(r._clport_mib_rsc_ecc_status), 1)

/*******************************************************************************
 * End of 'CLPORT_MIB_RSC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MIB_RSC_RAM_CONTROL
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MIB_RSC_RAM_CONTROL.
 */
#define READ_CLPORT_MIB_RSC_RAM_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MIB_RSC_RAM_CONTROLr_BLKACC,p,CLPORT_MIB_RSC_RAM_CONTROLr_OFFSET,0,(r._clport_mib_rsc_ram_control), 1)
#define WRITE_CLPORT_MIB_RSC_RAM_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MIB_RSC_RAM_CONTROLr_BLKACC,p,CLPORT_MIB_RSC_RAM_CONTROLr_OFFSET,0,&(r._clport_mib_rsc_ram_control), 1)

/*******************************************************************************
 * End of 'CLPORT_MIB_RSC_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MIB_TSC0_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MIB_TSC0_ECC_STATUS.
 */
#define READ_CLPORT_MIB_TSC0_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MIB_TSC0_ECC_STATUSr_BLKACC,p,CLPORT_MIB_TSC0_ECC_STATUSr_OFFSET,0,(r._clport_mib_tsc0_ecc_status), 1)
#define WRITE_CLPORT_MIB_TSC0_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MIB_TSC0_ECC_STATUSr_BLKACC,p,CLPORT_MIB_TSC0_ECC_STATUSr_OFFSET,0,&(r._clport_mib_tsc0_ecc_status), 1)

/*******************************************************************************
 * End of 'CLPORT_MIB_TSC0_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MIB_TSC1_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MIB_TSC1_ECC_STATUS.
 */
#define READ_CLPORT_MIB_TSC1_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MIB_TSC1_ECC_STATUSr_BLKACC,p,CLPORT_MIB_TSC1_ECC_STATUSr_OFFSET,0,(r._clport_mib_tsc1_ecc_status), 1)
#define WRITE_CLPORT_MIB_TSC1_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MIB_TSC1_ECC_STATUSr_BLKACC,p,CLPORT_MIB_TSC1_ECC_STATUSr_OFFSET,0,&(r._clport_mib_tsc1_ecc_status), 1)

/*******************************************************************************
 * End of 'CLPORT_MIB_TSC1_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MIB_TSC_ECC_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MIB_TSC_ECC_STATUS.
 */
#define READ_CLPORT_MIB_TSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MIB_TSC_ECC_STATUSr_BLKACC,p,CLPORT_MIB_TSC_ECC_STATUSr_OFFSET,i,(r._clport_mib_tsc_ecc_status), 1)
#define WRITE_CLPORT_MIB_TSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MIB_TSC_ECC_STATUSr_BLKACC,p,CLPORT_MIB_TSC_ECC_STATUSr_OFFSET,i,&(r._clport_mib_tsc_ecc_status), 1)

/*******************************************************************************
 * End of 'CLPORT_MIB_TSC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MIB_TSC_RAM_CONTROL
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MIB_TSC_RAM_CONTROL.
 */
#define READ_CLPORT_MIB_TSC_RAM_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MIB_TSC_RAM_CONTROLr_BLKACC,p,CLPORT_MIB_TSC_RAM_CONTROLr_OFFSET,0,(r._clport_mib_tsc_ram_control), 1)
#define WRITE_CLPORT_MIB_TSC_RAM_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MIB_TSC_RAM_CONTROLr_BLKACC,p,CLPORT_MIB_TSC_RAM_CONTROLr_OFFSET,0,&(r._clport_mib_tsc_ram_control), 1)

/*******************************************************************************
 * End of 'CLPORT_MIB_TSC_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_MODE_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_MODE_REG.
 */
#define READ_CLPORT_MODE_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_MODE_REGr_BLKACC,p,CLPORT_MODE_REGr_OFFSET,0,(r._clport_mode_reg), 1)
#define WRITE_CLPORT_MODE_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_MODE_REGr_BLKACC,p,CLPORT_MODE_REGr_OFFSET,0,&(r._clport_mode_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_MODE_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_POWER_SAVE
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_POWER_SAVE.
 */
#define READ_CLPORT_POWER_SAVEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_POWER_SAVEr_BLKACC,p,CLPORT_POWER_SAVEr_OFFSET,0,(r._clport_power_save), 1)
#define WRITE_CLPORT_POWER_SAVEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_POWER_SAVEr_BLKACC,p,CLPORT_POWER_SAVEr_OFFSET,0,&(r._clport_power_save), 1)

/*******************************************************************************
 * End of 'CLPORT_POWER_SAVEr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_SBUS_CONTROL
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_SBUS_CONTROL.
 */
#define READ_CLPORT_SBUS_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_SBUS_CONTROLr_BLKACC,p,CLPORT_SBUS_CONTROLr_OFFSET,0,(r._clport_sbus_control), 1)
#define WRITE_CLPORT_SBUS_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_SBUS_CONTROLr_BLKACC,p,CLPORT_SBUS_CONTROLr_OFFSET,0,&(r._clport_sbus_control), 1)

/*******************************************************************************
 * End of 'CLPORT_SBUS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_SGNDET_EARLYCRS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_SGNDET_EARLYCRS.
 */
#define READ_CLPORT_SGNDET_EARLYCRSr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_SGNDET_EARLYCRSr_BLKACC,p,CLPORT_SGNDET_EARLYCRSr_OFFSET,0,(r._clport_sgndet_earlycrs), 1)
#define WRITE_CLPORT_SGNDET_EARLYCRSr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_SGNDET_EARLYCRSr_BLKACC,p,CLPORT_SGNDET_EARLYCRSr_OFFSET,0,&(r._clport_sgndet_earlycrs), 1)

/*******************************************************************************
 * End of 'CLPORT_SGNDET_EARLYCRSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_SOFT_RESET
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_SOFT_RESET.
 */
#define READ_CLPORT_SOFT_RESETr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_SOFT_RESETr_BLKACC,p,CLPORT_SOFT_RESETr_OFFSET,0,(r._clport_soft_reset), 1)
#define WRITE_CLPORT_SOFT_RESETr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_SOFT_RESETr_BLKACC,p,CLPORT_SOFT_RESETr_OFFSET,0,&(r._clport_soft_reset), 1)

/*******************************************************************************
 * End of 'CLPORT_SOFT_RESETr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_SPARE0_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_SPARE0_REG.
 */
#define READ_CLPORT_SPARE0_REGr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_SPARE0_REGr_BLKACC,p,CLPORT_SPARE0_REGr_OFFSET,0,(r._clport_spare0_reg), 1)
#define WRITE_CLPORT_SPARE0_REGr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_SPARE0_REGr_BLKACC,p,CLPORT_SPARE0_REGr_OFFSET,0,&(r._clport_spare0_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_SPARE0_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_SW_FLOW_CONTROL
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_SW_FLOW_CONTROL.
 */
#define READ_CLPORT_SW_FLOW_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_read(u,CLPORT_SW_FLOW_CONTROLr_BLKACC,p,CLPORT_SW_FLOW_CONTROLr_OFFSET,0,(r._clport_sw_flow_control), 1)
#define WRITE_CLPORT_SW_FLOW_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_write(u,CLPORT_SW_FLOW_CONTROLr_BLKACC,p,CLPORT_SW_FLOW_CONTROLr_OFFSET,0,&(r._clport_sw_flow_control), 1)

/*******************************************************************************
 * End of 'CLPORT_SW_FLOW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_TSC_PLL_LOCK_STATUS
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_TSC_PLL_LOCK_STATUS.
 */
#define READ_CLPORT_TSC_PLL_LOCK_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_TSC_PLL_LOCK_STATUSr_BLKACC,p,CLPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,(r._clport_tsc_pll_lock_status), 1)
#define WRITE_CLPORT_TSC_PLL_LOCK_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_TSC_PLL_LOCK_STATUSr_BLKACC,p,CLPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,&(r._clport_tsc_pll_lock_status), 1)

/*******************************************************************************
 * End of 'CLPORT_TSC_PLL_LOCK_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_TS_TIMER_31_0_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_TS_TIMER_31_0_REG.
 */
#define READ_CLPORT_TS_TIMER_31_0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_TS_TIMER_31_0_REGr_BLKACC,p,CLPORT_TS_TIMER_31_0_REGr_OFFSET,0,(r._clport_ts_timer_31_0_reg), 1)
#define WRITE_CLPORT_TS_TIMER_31_0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_TS_TIMER_31_0_REGr_BLKACC,p,CLPORT_TS_TIMER_31_0_REGr_OFFSET,0,&(r._clport_ts_timer_31_0_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_TS_TIMER_31_0_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_TS_TIMER_47_32_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_TS_TIMER_47_32_REG.
 */
#define READ_CLPORT_TS_TIMER_47_32_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_TS_TIMER_47_32_REGr_BLKACC,p,CLPORT_TS_TIMER_47_32_REGr_OFFSET,0,(r._clport_ts_timer_47_32_reg), 1)
#define WRITE_CLPORT_TS_TIMER_47_32_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_TS_TIMER_47_32_REGr_BLKACC,p,CLPORT_TS_TIMER_47_32_REGr_OFFSET,0,&(r._clport_ts_timer_47_32_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_TS_TIMER_47_32_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_WC_UCMEM_CTRL
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_WC_UCMEM_CTRL.
 */
#define READ_CLPORT_WC_UCMEM_CTRLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_WC_UCMEM_CTRLr_BLKACC,p,CLPORT_WC_UCMEM_CTRLr_OFFSET,0,(r._clport_wc_ucmem_ctrl), 1)
#define WRITE_CLPORT_WC_UCMEM_CTRLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_WC_UCMEM_CTRLr_BLKACC,p,CLPORT_WC_UCMEM_CTRLr_OFFSET,0,&(r._clport_wc_ucmem_ctrl), 1)

/*******************************************************************************
 * End of 'CLPORT_WC_UCMEM_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  CLPORT_WC_UCMEM_DATA
 * BLOCKS:   CLPORT
 * SIZE:     128
 */
/*
 * These macros can be used to access CLPORT_WC_UCMEM_DATA.
 */
#define READ_CLPORT_WC_UCMEM_DATAm(u,i,m,p) bcmbd_cmicd_mem_blocks_read(u,CLPORT_WC_UCMEM_DATAm_BLKACC,p,CLPORT_WC_UCMEM_DATAm_OFFSET,i,(m._clport_wc_ucmem_data),4)
#define WRITE_CLPORT_WC_UCMEM_DATAm(u,i,m,p) bcmbd_cmicd_mem_blocks_write(u,CLPORT_WC_UCMEM_DATAm_BLKACC,p,CLPORT_WC_UCMEM_DATAm_OFFSET,i,&(m._clport_wc_ucmem_data),4)

/*******************************************************************************
 * End of 'CLPORT_WC_UCMEM_DATAm'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_XGXS0_CTRL_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_XGXS0_CTRL_REG.
 */
#define READ_CLPORT_XGXS0_CTRL_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_XGXS0_CTRL_REGr_BLKACC,p,CLPORT_XGXS0_CTRL_REGr_OFFSET,0,(r._clport_xgxs0_ctrl_reg), 1)
#define WRITE_CLPORT_XGXS0_CTRL_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_XGXS0_CTRL_REGr_BLKACC,p,CLPORT_XGXS0_CTRL_REGr_OFFSET,0,&(r._clport_xgxs0_ctrl_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_XGXS0_CTRL_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_XGXS0_LN0_STATUS0_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_XGXS0_LN0_STATUS0_REG.
 */
#define READ_CLPORT_XGXS0_LN0_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_XGXS0_LN0_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_LN0_STATUS0_REGr_OFFSET,0,(r._clport_xgxs0_ln0_status0_reg), 1)
#define WRITE_CLPORT_XGXS0_LN0_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_XGXS0_LN0_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_LN0_STATUS0_REGr_OFFSET,0,&(r._clport_xgxs0_ln0_status0_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_XGXS0_LN0_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_XGXS0_LN1_STATUS0_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_XGXS0_LN1_STATUS0_REG.
 */
#define READ_CLPORT_XGXS0_LN1_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_XGXS0_LN1_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_LN1_STATUS0_REGr_OFFSET,0,(r._clport_xgxs0_ln1_status0_reg), 1)
#define WRITE_CLPORT_XGXS0_LN1_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_XGXS0_LN1_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_LN1_STATUS0_REGr_OFFSET,0,&(r._clport_xgxs0_ln1_status0_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_XGXS0_LN1_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_XGXS0_LN2_STATUS0_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_XGXS0_LN2_STATUS0_REG.
 */
#define READ_CLPORT_XGXS0_LN2_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_XGXS0_LN2_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_LN2_STATUS0_REGr_OFFSET,0,(r._clport_xgxs0_ln2_status0_reg), 1)
#define WRITE_CLPORT_XGXS0_LN2_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_XGXS0_LN2_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_LN2_STATUS0_REGr_OFFSET,0,&(r._clport_xgxs0_ln2_status0_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_XGXS0_LN2_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_XGXS0_LN3_STATUS0_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_XGXS0_LN3_STATUS0_REG.
 */
#define READ_CLPORT_XGXS0_LN3_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_XGXS0_LN3_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_LN3_STATUS0_REGr_OFFSET,0,(r._clport_xgxs0_ln3_status0_reg), 1)
#define WRITE_CLPORT_XGXS0_LN3_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_XGXS0_LN3_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_LN3_STATUS0_REGr_OFFSET,0,&(r._clport_xgxs0_ln3_status0_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_XGXS0_LN3_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_XGXS0_STATUS0_REG
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_XGXS0_STATUS0_REG.
 */
#define READ_CLPORT_XGXS0_STATUS0_REGr(u,i,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_XGXS0_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_STATUS0_REGr_OFFSET,i,(r._clport_xgxs0_status0_reg), 1)
#define WRITE_CLPORT_XGXS0_STATUS0_REGr(u,i,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_XGXS0_STATUS0_REGr_BLKACC,p,CLPORT_XGXS0_STATUS0_REGr_OFFSET,i,&(r._clport_xgxs0_status0_reg), 1)

/*******************************************************************************
 * End of 'CLPORT_XGXS0_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  CLPORT_XGXS_COUNTER_MODE
 * BLOCKS:   CLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access CLPORT_XGXS_COUNTER_MODE.
 */
#define READ_CLPORT_XGXS_COUNTER_MODEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,CLPORT_XGXS_COUNTER_MODEr_BLKACC,p,CLPORT_XGXS_COUNTER_MODEr_OFFSET,0,(r._clport_xgxs_counter_mode), 1)
#define WRITE_CLPORT_XGXS_COUNTER_MODEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,CLPORT_XGXS_COUNTER_MODEr_BLKACC,p,CLPORT_XGXS_COUNTER_MODEr_OFFSET,0,&(r._clport_xgxs_counter_mode), 1)

/*******************************************************************************
 * End of 'CLPORT_XGXS_COUNTER_MODEr'
 */




/*******************************************************************************
 * MEMORY:  COS_MAP_SEL
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access COS_MAP_SEL.
 */
#define READ_COS_MAP_SELm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(COS_MAP_SELm_BLKACC)+1,COS_MAP_SELm_OFFSET+i,(m._cos_map_sel),1)
#define WRITE_COS_MAP_SELm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(COS_MAP_SELm_BLKACC)+1,COS_MAP_SELm_OFFSET+i,&(m._cos_map_sel),1)

/*******************************************************************************
 * End of 'COS_MAP_SELm'
 */




/*******************************************************************************
 * REGISTER:  COS_MODE_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access COS_MODE_64.
 */
#define READ_COS_MODE_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,COS_MODE_64r_BLKACC,3,0,p,COS_MODE_64r_OFFSET,0,(r._cos_mode_64),2)
#define WRITE_COS_MODE_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,COS_MODE_64r_BLKACC,3,0,p,COS_MODE_64r_OFFSET,0,&(r._cos_mode_64),2)

/*******************************************************************************
 * End of 'COS_MODE_64r'
 */




/*******************************************************************************
 * REGISTER:  CPU_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_CONTROL_0.
 */
#define READ_CPU_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,CPU_CONTROL_0r_BLKACC,1,CPU_CONTROL_0r_OFFSET,0,(r._cpu_control_0), 1)
#define WRITE_CPU_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,CPU_CONTROL_0r_BLKACC,1,CPU_CONTROL_0r_OFFSET,0,&(r._cpu_control_0), 1)

/*******************************************************************************
 * End of 'CPU_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CPU_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_CONTROL_1.
 */
#define READ_CPU_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,CPU_CONTROL_1r_BLKACC,1,CPU_CONTROL_1r_OFFSET,0,(r._cpu_control_1), 1)
#define WRITE_CPU_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,CPU_CONTROL_1r_BLKACC,1,CPU_CONTROL_1r_OFFSET,0,&(r._cpu_control_1), 1)

/*******************************************************************************
 * End of 'CPU_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CPU_CONTROL_M
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_CONTROL_M.
 */
#define READ_CPU_CONTROL_Mr(u,r) bcmbd_cmicd_reg_block_read(u,CPU_CONTROL_Mr_BLKACC,1,CPU_CONTROL_Mr_OFFSET,0,(r._cpu_control_m), 1)
#define WRITE_CPU_CONTROL_Mr(u,r) bcmbd_cmicd_reg_block_write(u,CPU_CONTROL_Mr_BLKACC,1,CPU_CONTROL_Mr_OFFSET,0,&(r._cpu_control_m), 1)

/*******************************************************************************
 * End of 'CPU_CONTROL_Mr'
 */




/*******************************************************************************
 * REGISTER:  CPU_COS_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_COS_CAM_BIST_CONFIG.
 */
#define READ_CPU_COS_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,CPU_COS_CAM_BIST_CONFIGr_BLKACC,1,n,0,CPU_COS_CAM_BIST_CONFIGr_OFFSET,0,(r._cpu_cos_cam_bist_config),1)
#define WRITE_CPU_COS_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,CPU_COS_CAM_BIST_CONFIGr_BLKACC,1,n,0,CPU_COS_CAM_BIST_CONFIGr_OFFSET,0,&(r._cpu_cos_cam_bist_config),1)
#define WRITE_CPU_COS_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,CPU_COS_CAM_BIST_CONFIGr_BLKACC,1,-1,0,CPU_COS_CAM_BIST_CONFIGr_OFFSET,0,&(r._cpu_cos_cam_bist_config),1)

/*******************************************************************************
 * End of 'CPU_COS_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CPU_COS_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_COS_CAM_BIST_DBG_DATA.
 */
#define READ_CPU_COS_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,CPU_COS_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,CPU_COS_CAM_BIST_DBG_DATAr_OFFSET,0,(r._cpu_cos_cam_bist_dbg_data),1)
#define WRITE_CPU_COS_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,CPU_COS_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,CPU_COS_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._cpu_cos_cam_bist_dbg_data),1)
#define WRITE_CPU_COS_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,CPU_COS_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,CPU_COS_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._cpu_cos_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'CPU_COS_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CPU_COS_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_COS_CAM_BIST_STATUS.
 */
#define READ_CPU_COS_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,CPU_COS_CAM_BIST_STATUSr_BLKACC,1,n,0,CPU_COS_CAM_BIST_STATUSr_OFFSET,0,(r._cpu_cos_cam_bist_status),1)
#define WRITE_CPU_COS_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,CPU_COS_CAM_BIST_STATUSr_BLKACC,1,n,0,CPU_COS_CAM_BIST_STATUSr_OFFSET,0,&(r._cpu_cos_cam_bist_status),1)
#define WRITE_CPU_COS_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,CPU_COS_CAM_BIST_STATUSr_BLKACC,1,-1,0,CPU_COS_CAM_BIST_STATUSr_OFFSET,0,&(r._cpu_cos_cam_bist_status),1)

/*******************************************************************************
 * End of 'CPU_COS_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CPU_COS_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_COS_CAM_DBGCTRL.
 */
#define READ_CPU_COS_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,CPU_COS_CAM_DBGCTRLr_BLKACC,1,n,0,CPU_COS_CAM_DBGCTRLr_OFFSET,0,(r._cpu_cos_cam_dbgctrl),1)
#define WRITE_CPU_COS_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,CPU_COS_CAM_DBGCTRLr_BLKACC,1,n,0,CPU_COS_CAM_DBGCTRLr_OFFSET,0,&(r._cpu_cos_cam_dbgctrl),1)
#define WRITE_CPU_COS_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,CPU_COS_CAM_DBGCTRLr_BLKACC,1,-1,0,CPU_COS_CAM_DBGCTRLr_OFFSET,0,&(r._cpu_cos_cam_dbgctrl),1)

/*******************************************************************************
 * End of 'CPU_COS_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  CPU_HI_RQE_Q_NUM
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_HI_RQE_Q_NUM.
 */
#define READ_CPU_HI_RQE_Q_NUMr(u,r) bcmbd_cmicd_reg_block_read(u,CPU_HI_RQE_Q_NUMr_BLKACC,1,CPU_HI_RQE_Q_NUMr_OFFSET,0,(r._cpu_hi_rqe_q_num), 1)
#define WRITE_CPU_HI_RQE_Q_NUMr(u,r) bcmbd_cmicd_reg_block_write(u,CPU_HI_RQE_Q_NUMr_BLKACC,1,CPU_HI_RQE_Q_NUMr_OFFSET,0,&(r._cpu_hi_rqe_q_num), 1)

/*******************************************************************************
 * End of 'CPU_HI_RQE_Q_NUMr'
 */




/*******************************************************************************
 * REGISTER:  CPU_LB_OPP_CFG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_LB_OPP_CFG.
 */
#define READ_CPU_LB_OPP_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CPU_LB_OPP_CFGr_BLKACC,4,0,p,CPU_LB_OPP_CFGr_OFFSET,0,(r._cpu_lb_opp_cfg),1)
#define WRITE_CPU_LB_OPP_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CPU_LB_OPP_CFGr_BLKACC,4,0,p,CPU_LB_OPP_CFGr_OFFSET,0,&(r._cpu_lb_opp_cfg),1)

/*******************************************************************************
 * End of 'CPU_LB_OPP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CPU_LO_RQE_Q_NUM
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_LO_RQE_Q_NUM.
 */
#define READ_CPU_LO_RQE_Q_NUMr(u,r) bcmbd_cmicd_reg_block_read(u,CPU_LO_RQE_Q_NUMr_BLKACC,1,CPU_LO_RQE_Q_NUMr_OFFSET,0,(r._cpu_lo_rqe_q_num), 1)
#define WRITE_CPU_LO_RQE_Q_NUMr(u,r) bcmbd_cmicd_reg_block_write(u,CPU_LO_RQE_Q_NUMr_BLKACC,1,CPU_LO_RQE_Q_NUMr_OFFSET,0,&(r._cpu_lo_rqe_q_num), 1)

/*******************************************************************************
 * End of 'CPU_LO_RQE_Q_NUMr'
 */




/*******************************************************************************
 * MEMORY:  CPU_PBM
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access CPU_PBM.
 */
#define READ_CPU_PBMm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(CPU_PBMm_BLKACC)+1,CPU_PBMm_OFFSET+i,(m._cpu_pbm),5)
#define WRITE_CPU_PBMm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(CPU_PBMm_BLKACC)+1,CPU_PBMm_OFFSET+i,&(m._cpu_pbm),5)

/*******************************************************************************
 * End of 'CPU_PBMm'
 */




/*******************************************************************************
 * MEMORY:  CPU_PBM_2
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access CPU_PBM_2.
 */
#define READ_CPU_PBM_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(CPU_PBM_2m_BLKACC)+1,CPU_PBM_2m_OFFSET+i,(m._cpu_pbm_2),5)
#define WRITE_CPU_PBM_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(CPU_PBM_2m_BLKACC)+1,CPU_PBM_2m_OFFSET+i,&(m._cpu_pbm_2),5)

/*******************************************************************************
 * End of 'CPU_PBM_2m'
 */




/*******************************************************************************
 * REGISTER:  CPU_PKT_PROFILE_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_PKT_PROFILE_1.
 */
#define READ_CPU_PKT_PROFILE_1r(u,r) bcmbd_cmicd_reg_block_read(u,CPU_PKT_PROFILE_1r_BLKACC,1,CPU_PKT_PROFILE_1r_OFFSET,0,(r._cpu_pkt_profile_1), 1)
#define WRITE_CPU_PKT_PROFILE_1r(u,r) bcmbd_cmicd_reg_block_write(u,CPU_PKT_PROFILE_1r_BLKACC,1,CPU_PKT_PROFILE_1r_OFFSET,0,&(r._cpu_pkt_profile_1), 1)

/*******************************************************************************
 * End of 'CPU_PKT_PROFILE_1r'
 */




/*******************************************************************************
 * REGISTER:  CPU_PKT_PROFILE_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CPU_PKT_PROFILE_2.
 */
#define READ_CPU_PKT_PROFILE_2r(u,r) bcmbd_cmicd_reg_block_read(u,CPU_PKT_PROFILE_2r_BLKACC,1,CPU_PKT_PROFILE_2r_OFFSET,0,(r._cpu_pkt_profile_2), 1)
#define WRITE_CPU_PKT_PROFILE_2r(u,r) bcmbd_cmicd_reg_block_write(u,CPU_PKT_PROFILE_2r_BLKACC,1,CPU_PKT_PROFILE_2r_OFFSET,0,&(r._cpu_pkt_profile_2), 1)

/*******************************************************************************
 * End of 'CPU_PKT_PROFILE_2r'
 */




/*******************************************************************************
 * MEMORY:  CPU_TS_MAP
 * BLOCKS:   IPIPE
 * SIZE:     7
 */
/*
 * These macros can be used to access CPU_TS_MAP.
 */
#define READ_CPU_TS_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(CPU_TS_MAPm_BLKACC)+1,CPU_TS_MAPm_OFFSET+i,(m._cpu_ts_map),1)
#define WRITE_CPU_TS_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(CPU_TS_MAPm_BLKACC)+1,CPU_TS_MAPm_OFFSET+i,&(m._cpu_ts_map),1)

/*******************************************************************************
 * End of 'CPU_TS_MAPm'
 */




/*******************************************************************************
 * REGISTER:  CTR_MEM_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CTR_MEM_TM.
 */
#define READ_CTR_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CTR_MEM_TMr_BLKACC,3,0,p,CTR_MEM_TMr_OFFSET,0,(r._ctr_mem_tm),1)
#define WRITE_CTR_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CTR_MEM_TMr_BLKACC,3,0,p,CTR_MEM_TMr_OFFSET,0,&(r._ctr_mem_tm),1)

/*******************************************************************************
 * End of 'CTR_MEM_TMr'
 */




/*******************************************************************************
 * REGISTER:  CT_FIFO_DBG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_FIFO_DBG.
 */
#define READ_CT_FIFO_DBGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_FIFO_DBGr_BLKACC,4,0,p,CT_FIFO_DBGr_OFFSET,0,(r._ct_fifo_dbg),1)
#define WRITE_CT_FIFO_DBGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_FIFO_DBGr_BLKACC,4,0,p,CT_FIFO_DBGr_OFFSET,0,&(r._ct_fifo_dbg),1)

/*******************************************************************************
 * End of 'CT_FIFO_DBGr'
 */




/*******************************************************************************
 * REGISTER:  CT_PURGE_CNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_PURGE_CNT.
 */
#define READ_CT_PURGE_CNTr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_PURGE_CNTr_BLKACC,3,n,p,CT_PURGE_CNTr_OFFSET,0,(r._ct_purge_cnt),1)
#define WRITE_CT_PURGE_CNTr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNTr_BLKACC,3,n,p,CT_PURGE_CNTr_OFFSET,0,&(r._ct_purge_cnt),1)
#define WRITE_CT_PURGE_CNTr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNTr_BLKACC,3,-1,p,CT_PURGE_CNTr_OFFSET,0,&(r._ct_purge_cnt),1)

/*******************************************************************************
 * End of 'CT_PURGE_CNTr'
 */




/*******************************************************************************
 * REGISTER:  CT_PURGE_CNT_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_PURGE_CNT_MMU_XPE0_EPIPE0.
 */
#define READ_CT_PURGE_CNT_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_PURGE_CNT_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE0_EPIPE0r_OFFSET,0,(r._ct_purge_cnt_mmu_xpe0_epipe0),1)
#define WRITE_CT_PURGE_CNT_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNT_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE0_EPIPE0r_OFFSET,0,&(r._ct_purge_cnt_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'CT_PURGE_CNT_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  CT_PURGE_CNT_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_PURGE_CNT_MMU_XPE0_EPIPE1.
 */
#define READ_CT_PURGE_CNT_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_PURGE_CNT_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE0_EPIPE1r_OFFSET,0,(r._ct_purge_cnt_mmu_xpe0_epipe1),1)
#define WRITE_CT_PURGE_CNT_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNT_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE0_EPIPE1r_OFFSET,0,&(r._ct_purge_cnt_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'CT_PURGE_CNT_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  CT_PURGE_CNT_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_PURGE_CNT_MMU_XPE1_EPIPE2.
 */
#define READ_CT_PURGE_CNT_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_PURGE_CNT_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE1_EPIPE2r_OFFSET,0,(r._ct_purge_cnt_mmu_xpe1_epipe2),1)
#define WRITE_CT_PURGE_CNT_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNT_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE1_EPIPE2r_OFFSET,0,&(r._ct_purge_cnt_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'CT_PURGE_CNT_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  CT_PURGE_CNT_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_PURGE_CNT_MMU_XPE1_EPIPE3.
 */
#define READ_CT_PURGE_CNT_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_PURGE_CNT_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE1_EPIPE3r_OFFSET,0,(r._ct_purge_cnt_mmu_xpe1_epipe3),1)
#define WRITE_CT_PURGE_CNT_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNT_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE1_EPIPE3r_OFFSET,0,&(r._ct_purge_cnt_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'CT_PURGE_CNT_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  CT_PURGE_CNT_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_PURGE_CNT_MMU_XPE2_EPIPE0.
 */
#define READ_CT_PURGE_CNT_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_PURGE_CNT_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE2_EPIPE0r_OFFSET,0,(r._ct_purge_cnt_mmu_xpe2_epipe0),1)
#define WRITE_CT_PURGE_CNT_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNT_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE2_EPIPE0r_OFFSET,0,&(r._ct_purge_cnt_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'CT_PURGE_CNT_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  CT_PURGE_CNT_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_PURGE_CNT_MMU_XPE2_EPIPE1.
 */
#define READ_CT_PURGE_CNT_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_PURGE_CNT_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE2_EPIPE1r_OFFSET,0,(r._ct_purge_cnt_mmu_xpe2_epipe1),1)
#define WRITE_CT_PURGE_CNT_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNT_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE2_EPIPE1r_OFFSET,0,&(r._ct_purge_cnt_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'CT_PURGE_CNT_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  CT_PURGE_CNT_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_PURGE_CNT_MMU_XPE3_EPIPE2.
 */
#define READ_CT_PURGE_CNT_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_PURGE_CNT_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE3_EPIPE2r_OFFSET,0,(r._ct_purge_cnt_mmu_xpe3_epipe2),1)
#define WRITE_CT_PURGE_CNT_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNT_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE3_EPIPE2r_OFFSET,0,&(r._ct_purge_cnt_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'CT_PURGE_CNT_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  CT_PURGE_CNT_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access CT_PURGE_CNT_MMU_XPE3_EPIPE3.
 */
#define READ_CT_PURGE_CNT_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,CT_PURGE_CNT_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE3_EPIPE3r_OFFSET,0,(r._ct_purge_cnt_mmu_xpe3_epipe3),1)
#define WRITE_CT_PURGE_CNT_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,CT_PURGE_CNT_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,CT_PURGE_CNT_MMU_XPE3_EPIPE3r_OFFSET,0,&(r._ct_purge_cnt_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'CT_PURGE_CNT_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * MEMORY:  DEST_TRUNK_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access DEST_TRUNK_BITMAP.
 */
#define READ_DEST_TRUNK_BITMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(DEST_TRUNK_BITMAPm_BLKACC)+1,DEST_TRUNK_BITMAPm_OFFSET+i,(m._dest_trunk_bitmap),5)
#define WRITE_DEST_TRUNK_BITMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(DEST_TRUNK_BITMAPm_BLKACC)+1,DEST_TRUNK_BITMAPm_OFFSET+i,&(m._dest_trunk_bitmap),5)

/*******************************************************************************
 * End of 'DEST_TRUNK_BITMAPm'
 */




/*******************************************************************************
 * MEMORY:  DEVICE_LOOPBACK_PORTS_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access DEVICE_LOOPBACK_PORTS_BITMAP.
 */
#define READ_DEVICE_LOOPBACK_PORTS_BITMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(DEVICE_LOOPBACK_PORTS_BITMAPm_BLKACC)+1,DEVICE_LOOPBACK_PORTS_BITMAPm_OFFSET+i,(m._device_loopback_ports_bitmap),5)
#define WRITE_DEVICE_LOOPBACK_PORTS_BITMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(DEVICE_LOOPBACK_PORTS_BITMAPm_BLKACC)+1,DEVICE_LOOPBACK_PORTS_BITMAPm_OFFSET+i,&(m._device_loopback_ports_bitmap),5)

/*******************************************************************************
 * End of 'DEVICE_LOOPBACK_PORTS_BITMAPm'
 */




/*******************************************************************************
 * REGISTER:  DNAT_DISCARDS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DNAT_DISCARDS.
 */
#define READ_DNAT_DISCARDSr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,DNAT_DISCARDSr_BLKACC,1,n,0,DNAT_DISCARDSr_OFFSET,i,(r._dnat_discards),1)
#define WRITE_DNAT_DISCARDSr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,DNAT_DISCARDSr_BLKACC,1,n,0,DNAT_DISCARDSr_OFFSET,i,&(r._dnat_discards),1)
#define WRITE_DNAT_DISCARDSr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,DNAT_DISCARDSr_BLKACC,1,-1,0,DNAT_DISCARDSr_OFFSET,i,&(r._dnat_discards),1)

/*******************************************************************************
 * End of 'DNAT_DISCARDSr'
 */




/*******************************************************************************
 * REGISTER:  DNAT_TRANSLATIONS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DNAT_TRANSLATIONS.
 */
#define READ_DNAT_TRANSLATIONSr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,DNAT_TRANSLATIONSr_BLKACC,1,n,0,DNAT_TRANSLATIONSr_OFFSET,i,(r._dnat_translations),1)
#define WRITE_DNAT_TRANSLATIONSr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,DNAT_TRANSLATIONSr_BLKACC,1,n,0,DNAT_TRANSLATIONSr_OFFSET,i,&(r._dnat_translations),1)
#define WRITE_DNAT_TRANSLATIONSr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,DNAT_TRANSLATIONSr_BLKACC,1,-1,0,DNAT_TRANSLATIONSr_OFFSET,i,&(r._dnat_translations),1)

/*******************************************************************************
 * End of 'DNAT_TRANSLATIONSr'
 */




/*******************************************************************************
 * REGISTER:  DOS_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DOS_CONTROL.
 */
#define READ_DOS_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,DOS_CONTROLr_BLKACC,1,DOS_CONTROLr_OFFSET,0,(r._dos_control), 1)
#define WRITE_DOS_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,DOS_CONTROLr_BLKACC,1,DOS_CONTROLr_OFFSET,0,&(r._dos_control), 1)

/*******************************************************************************
 * End of 'DOS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  DOS_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DOS_CONTROL_2.
 */
#define READ_DOS_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,DOS_CONTROL_2r_BLKACC,1,DOS_CONTROL_2r_OFFSET,0,(r._dos_control_2), 1)
#define WRITE_DOS_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,DOS_CONTROL_2r_BLKACC,1,DOS_CONTROL_2r_OFFSET,0,&(r._dos_control_2), 1)

/*******************************************************************************
 * End of 'DOS_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  DOS_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DOS_CONTROL_3.
 */
#define READ_DOS_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,DOS_CONTROL_3r_BLKACC,1,DOS_CONTROL_3r_OFFSET,0,(r._dos_control_3), 2)
#define WRITE_DOS_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,DOS_CONTROL_3r_BLKACC,1,DOS_CONTROL_3r_OFFSET,0,&(r._dos_control_3), 2)

/*******************************************************************************
 * End of 'DOS_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  DQS_MEMDEBUG
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access DQS_MEMDEBUG.
 */
#define READ_DQS_MEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,DQS_MEMDEBUGr_BLKACC,4,0,p,DQS_MEMDEBUGr_OFFSET,0,(r._dqs_memdebug),2)
#define WRITE_DQS_MEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,DQS_MEMDEBUGr_BLKACC,4,0,p,DQS_MEMDEBUGr_OFFSET,0,&(r._dqs_memdebug),2)

/*******************************************************************************
 * End of 'DQS_MEMDEBUGr'
 */




/*******************************************************************************
 * REGISTER:  DROP_CBP_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DROP_CBP_64.
 */
#define READ_DROP_CBP_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,DROP_CBP_64r_BLKACC,3,0,p,DROP_CBP_64r_OFFSET,0,(r._drop_cbp_64),2)
#define WRITE_DROP_CBP_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,DROP_CBP_64r_BLKACC,3,0,p,DROP_CBP_64r_OFFSET,0,&(r._drop_cbp_64),2)

/*******************************************************************************
 * End of 'DROP_CBP_64r'
 */




/*******************************************************************************
 * REGISTER:  DROP_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DROP_CONTROL_0.
 */
#define READ_DROP_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,DROP_CONTROL_0r_BLKACC,1,DROP_CONTROL_0r_OFFSET,0,(r._drop_control_0), 1)
#define WRITE_DROP_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,DROP_CONTROL_0r_BLKACC,1,DROP_CONTROL_0r_OFFSET,0,&(r._drop_control_0), 1)

/*******************************************************************************
 * End of 'DROP_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  DROP_PKT_CNT_RQE_BYTE_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DROP_PKT_CNT_RQE_BYTE_64.
 */
#define READ_DROP_PKT_CNT_RQE_BYTE_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,DROP_PKT_CNT_RQE_BYTE_64r_BLKACC,3,0,p,DROP_PKT_CNT_RQE_BYTE_64r_OFFSET,i,(r._drop_pkt_cnt_rqe_byte_64),2)
#define WRITE_DROP_PKT_CNT_RQE_BYTE_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,DROP_PKT_CNT_RQE_BYTE_64r_BLKACC,3,0,p,DROP_PKT_CNT_RQE_BYTE_64r_OFFSET,i,&(r._drop_pkt_cnt_rqe_byte_64),2)

/*******************************************************************************
 * End of 'DROP_PKT_CNT_RQE_BYTE_64r'
 */




/*******************************************************************************
 * REGISTER:  DROP_PKT_CNT_RQE_PKT_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DROP_PKT_CNT_RQE_PKT_64.
 */
#define READ_DROP_PKT_CNT_RQE_PKT_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,DROP_PKT_CNT_RQE_PKT_64r_BLKACC,3,0,p,DROP_PKT_CNT_RQE_PKT_64r_OFFSET,i,(r._drop_pkt_cnt_rqe_pkt_64),2)
#define WRITE_DROP_PKT_CNT_RQE_PKT_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,DROP_PKT_CNT_RQE_PKT_64r_BLKACC,3,0,p,DROP_PKT_CNT_RQE_PKT_64r_OFFSET,i,&(r._drop_pkt_cnt_rqe_pkt_64),2)

/*******************************************************************************
 * End of 'DROP_PKT_CNT_RQE_PKT_64r'
 */




/*******************************************************************************
 * REGISTER:  DROP_PKT_CNT_RQE_RED_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DROP_PKT_CNT_RQE_RED_64.
 */
#define READ_DROP_PKT_CNT_RQE_RED_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,DROP_PKT_CNT_RQE_RED_64r_BLKACC,3,0,p,DROP_PKT_CNT_RQE_RED_64r_OFFSET,i,(r._drop_pkt_cnt_rqe_red_64),2)
#define WRITE_DROP_PKT_CNT_RQE_RED_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,DROP_PKT_CNT_RQE_RED_64r_BLKACC,3,0,p,DROP_PKT_CNT_RQE_RED_64r_OFFSET,i,&(r._drop_pkt_cnt_rqe_red_64),2)

/*******************************************************************************
 * End of 'DROP_PKT_CNT_RQE_RED_64r'
 */




/*******************************************************************************
 * REGISTER:  DROP_PKT_CNT_RQE_YEL_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access DROP_PKT_CNT_RQE_YEL_64.
 */
#define READ_DROP_PKT_CNT_RQE_YEL_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,DROP_PKT_CNT_RQE_YEL_64r_BLKACC,3,0,p,DROP_PKT_CNT_RQE_YEL_64r_OFFSET,i,(r._drop_pkt_cnt_rqe_yel_64),2)
#define WRITE_DROP_PKT_CNT_RQE_YEL_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,DROP_PKT_CNT_RQE_YEL_64r_BLKACC,3,0,p,DROP_PKT_CNT_RQE_YEL_64r_OFFSET,i,&(r._drop_pkt_cnt_rqe_yel_64),2)

/*******************************************************************************
 * End of 'DROP_PKT_CNT_RQE_YEL_64r'
 */




/*******************************************************************************
 * MEMORY:  DSCP_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     13
 */
/*
 * These macros can be used to access DSCP_TABLE.
 */
#define READ_DSCP_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(DSCP_TABLEm_BLKACC)+1,DSCP_TABLEm_OFFSET+i,(m._dscp_table),1)
#define WRITE_DSCP_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(DSCP_TABLEm_BLKACC)+1,DSCP_TABLEm_OFFSET+i,&(m._dscp_table),1)

/*******************************************************************************
 * End of 'DSCP_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  DST_COMPRESSION
 * BLOCKS:   IPIPE
 * SIZE:     326
 */
/*
 * These macros can be used to access DST_COMPRESSION.
 */
#define READ_DST_COMPRESSIONm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,DST_COMPRESSIONm_BLKACC,1,n,0,DST_COMPRESSIONm_OFFSET,i,(m._dst_compression),11)
#define WRITE_DST_COMPRESSIONm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,DST_COMPRESSIONm_BLKACC,1,n,0,DST_COMPRESSIONm_OFFSET,i,&(m._dst_compression),11)
#define WRITE_DST_COMPRESSIONm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,DST_COMPRESSIONm_BLKACC,1,-1,0,DST_COMPRESSIONm_OFFSET,i,&(m._dst_compression),11)

/*******************************************************************************
 * End of 'DST_COMPRESSIONm'
 */




/*******************************************************************************
 * REGISTER:  DST_COMPRESSION_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DST_COMPRESSION_CAM_BIST_CONFIG.
 */
#define READ_DST_COMPRESSION_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,DST_COMPRESSION_CAM_BIST_CONFIGr_BLKACC,1,n,0,DST_COMPRESSION_CAM_BIST_CONFIGr_OFFSET,0,(r._dst_compression_cam_bist_config),1)
#define WRITE_DST_COMPRESSION_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_CAM_BIST_CONFIGr_BLKACC,1,n,0,DST_COMPRESSION_CAM_BIST_CONFIGr_OFFSET,0,&(r._dst_compression_cam_bist_config),1)
#define WRITE_DST_COMPRESSION_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_CAM_BIST_CONFIGr_BLKACC,1,-1,0,DST_COMPRESSION_CAM_BIST_CONFIGr_OFFSET,0,&(r._dst_compression_cam_bist_config),1)

/*******************************************************************************
 * End of 'DST_COMPRESSION_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  DST_COMPRESSION_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DST_COMPRESSION_CAM_BIST_DBG_DATA.
 */
#define READ_DST_COMPRESSION_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,DST_COMPRESSION_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,DST_COMPRESSION_CAM_BIST_DBG_DATAr_OFFSET,0,(r._dst_compression_cam_bist_dbg_data),1)
#define WRITE_DST_COMPRESSION_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,DST_COMPRESSION_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._dst_compression_cam_bist_dbg_data),1)
#define WRITE_DST_COMPRESSION_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,DST_COMPRESSION_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._dst_compression_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'DST_COMPRESSION_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  DST_COMPRESSION_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DST_COMPRESSION_CAM_BIST_STATUS.
 */
#define READ_DST_COMPRESSION_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,DST_COMPRESSION_CAM_BIST_STATUSr_BLKACC,1,n,0,DST_COMPRESSION_CAM_BIST_STATUSr_OFFSET,0,(r._dst_compression_cam_bist_status),1)
#define WRITE_DST_COMPRESSION_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_CAM_BIST_STATUSr_BLKACC,1,n,0,DST_COMPRESSION_CAM_BIST_STATUSr_OFFSET,0,&(r._dst_compression_cam_bist_status),1)
#define WRITE_DST_COMPRESSION_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_CAM_BIST_STATUSr_BLKACC,1,-1,0,DST_COMPRESSION_CAM_BIST_STATUSr_OFFSET,0,&(r._dst_compression_cam_bist_status),1)

/*******************************************************************************
 * End of 'DST_COMPRESSION_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  DST_COMPRESSION_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DST_COMPRESSION_CAM_DBGCTRL.
 */
#define READ_DST_COMPRESSION_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,DST_COMPRESSION_CAM_DBGCTRLr_BLKACC,1,n,0,DST_COMPRESSION_CAM_DBGCTRLr_OFFSET,0,(r._dst_compression_cam_dbgctrl),1)
#define WRITE_DST_COMPRESSION_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_CAM_DBGCTRLr_BLKACC,1,n,0,DST_COMPRESSION_CAM_DBGCTRLr_OFFSET,0,&(r._dst_compression_cam_dbgctrl),1)
#define WRITE_DST_COMPRESSION_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_CAM_DBGCTRLr_BLKACC,1,-1,0,DST_COMPRESSION_CAM_DBGCTRLr_OFFSET,0,&(r._dst_compression_cam_dbgctrl),1)

/*******************************************************************************
 * End of 'DST_COMPRESSION_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  DST_COMPRESSION_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     37
 */
/*
 * These macros can be used to access DST_COMPRESSION_DATA_ONLY.
 */
#define READ_DST_COMPRESSION_DATA_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,DST_COMPRESSION_DATA_ONLYm_BLKACC,1,n,0,DST_COMPRESSION_DATA_ONLYm_OFFSET,i,(m._dst_compression_data_only),2)
#define WRITE_DST_COMPRESSION_DATA_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,DST_COMPRESSION_DATA_ONLYm_BLKACC,1,n,0,DST_COMPRESSION_DATA_ONLYm_OFFSET,i,&(m._dst_compression_data_only),2)
#define WRITE_DST_COMPRESSION_DATA_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,DST_COMPRESSION_DATA_ONLYm_BLKACC,1,-1,0,DST_COMPRESSION_DATA_ONLYm_OFFSET,i,&(m._dst_compression_data_only),2)

/*******************************************************************************
 * End of 'DST_COMPRESSION_DATA_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  DST_COMPRESSION_RAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access DST_COMPRESSION_RAM_DBGCTRL.
 */
#define READ_DST_COMPRESSION_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,DST_COMPRESSION_RAM_DBGCTRLr_BLKACC,1,n,0,DST_COMPRESSION_RAM_DBGCTRLr_OFFSET,0,(r._dst_compression_ram_dbgctrl),1)
#define WRITE_DST_COMPRESSION_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_RAM_DBGCTRLr_BLKACC,1,n,0,DST_COMPRESSION_RAM_DBGCTRLr_OFFSET,0,&(r._dst_compression_ram_dbgctrl),1)
#define WRITE_DST_COMPRESSION_RAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,DST_COMPRESSION_RAM_DBGCTRLr_BLKACC,1,-1,0,DST_COMPRESSION_RAM_DBGCTRLr_OFFSET,0,&(r._dst_compression_ram_dbgctrl),1)

/*******************************************************************************
 * End of 'DST_COMPRESSION_RAM_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  DST_COMPRESSION_TCAM_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     289
 */
/*
 * These macros can be used to access DST_COMPRESSION_TCAM_ONLY.
 */
#define READ_DST_COMPRESSION_TCAM_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,DST_COMPRESSION_TCAM_ONLYm_BLKACC,1,n,0,DST_COMPRESSION_TCAM_ONLYm_OFFSET,i,(m._dst_compression_tcam_only),10)
#define WRITE_DST_COMPRESSION_TCAM_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,DST_COMPRESSION_TCAM_ONLYm_BLKACC,1,n,0,DST_COMPRESSION_TCAM_ONLYm_OFFSET,i,&(m._dst_compression_tcam_only),10)
#define WRITE_DST_COMPRESSION_TCAM_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,DST_COMPRESSION_TCAM_ONLYm_BLKACC,1,-1,0,DST_COMPRESSION_TCAM_ONLYm_OFFSET,i,&(m._dst_compression_tcam_only),10)

/*******************************************************************************
 * End of 'DST_COMPRESSION_TCAM_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  ECMP_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ECMP_CONFIG.
 */
#define READ_ECMP_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,ECMP_CONFIGr_BLKACC,1,ECMP_CONFIGr_OFFSET,0,(r._ecmp_config), 1)
#define WRITE_ECMP_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,ECMP_CONFIGr_BLKACC,1,ECMP_CONFIGr_OFFSET,0,&(r._ecmp_config), 1)

/*******************************************************************************
 * End of 'ECMP_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ECMP_RANDOM_LB_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ECMP_RANDOM_LB_CONFIG.
 */
#define READ_ECMP_RANDOM_LB_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ECMP_RANDOM_LB_CONFIGr_BLKACC,1,n,0,ECMP_RANDOM_LB_CONFIGr_OFFSET,0,(r._ecmp_random_lb_config),1)
#define WRITE_ECMP_RANDOM_LB_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ECMP_RANDOM_LB_CONFIGr_BLKACC,1,n,0,ECMP_RANDOM_LB_CONFIGr_OFFSET,0,&(r._ecmp_random_lb_config),1)
#define WRITE_ECMP_RANDOM_LB_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ECMP_RANDOM_LB_CONFIGr_BLKACC,1,-1,0,ECMP_RANDOM_LB_CONFIGr_OFFSET,0,&(r._ecmp_random_lb_config),1)

/*******************************************************************************
 * End of 'ECMP_RANDOM_LB_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ECN_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ECN_CONTROL.
 */
#define READ_ECN_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ECN_CONTROLr_BLKACC,1,ECN_CONTROLr_OFFSET,0,(r._ecn_control), 1)
#define WRITE_ECN_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ECN_CONTROLr_BLKACC,1,ECN_CONTROLr_OFFSET,0,&(r._ecn_control), 1)

/*******************************************************************************
 * End of 'ECN_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EDB_1DBG_A
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EDB_1DBG_A.
 */
#define READ_EDB_1DBG_Ar(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EDB_1DBG_Ar_BLKACC,2,n,0,EDB_1DBG_Ar_OFFSET,0,(r._edb_1dbg_a),1)
#define WRITE_EDB_1DBG_Ar(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EDB_1DBG_Ar_BLKACC,2,n,0,EDB_1DBG_Ar_OFFSET,0,&(r._edb_1dbg_a),1)
#define WRITE_EDB_1DBG_Ar_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EDB_1DBG_Ar_BLKACC,2,-1,0,EDB_1DBG_Ar_OFFSET,0,&(r._edb_1dbg_a),1)

/*******************************************************************************
 * End of 'EDB_1DBG_Ar'
 */




/*******************************************************************************
 * MEMORY:  EDB_1DBG_B
 * BLOCKS:   EPIPE
 * SIZE:     14
 */
/*
 * These macros can be used to access EDB_1DBG_B.
 */
#define READ_EDB_1DBG_Bm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EDB_1DBG_Bm_BLKACC)+2,EDB_1DBG_Bm_OFFSET+i,(m._edb_1dbg_b),1)
#define WRITE_EDB_1DBG_Bm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EDB_1DBG_Bm_BLKACC)+2,EDB_1DBG_Bm_OFFSET+i,&(m._edb_1dbg_b),1)

/*******************************************************************************
 * End of 'EDB_1DBG_Bm'
 */




/*******************************************************************************
 * REGISTER:  EFP_CAM_BIST_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_CAM_BIST_CONFIG.
 */
#define READ_EFP_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_CAM_BIST_CONFIGr_BLKACC,2,n,0,EFP_CAM_BIST_CONFIGr_OFFSET,0,(r._efp_cam_bist_config),1)
#define WRITE_EFP_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_CAM_BIST_CONFIGr_BLKACC,2,n,0,EFP_CAM_BIST_CONFIGr_OFFSET,0,&(r._efp_cam_bist_config),1)
#define WRITE_EFP_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_CAM_BIST_CONFIGr_BLKACC,2,-1,0,EFP_CAM_BIST_CONFIGr_OFFSET,0,&(r._efp_cam_bist_config),1)

/*******************************************************************************
 * End of 'EFP_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EFP_CAM_BIST_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_CAM_BIST_CONTROL.
 */
#define READ_EFP_CAM_BIST_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EFP_CAM_BIST_CONTROLr_BLKACC,2,EFP_CAM_BIST_CONTROLr_OFFSET,0,(r._efp_cam_bist_control), 1)
#define WRITE_EFP_CAM_BIST_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EFP_CAM_BIST_CONTROLr_BLKACC,2,EFP_CAM_BIST_CONTROLr_OFFSET,0,&(r._efp_cam_bist_control), 1)

/*******************************************************************************
 * End of 'EFP_CAM_BIST_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EFP_CAM_BIST_DBG_DATA
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_CAM_BIST_DBG_DATA.
 */
#define READ_EFP_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_CAM_BIST_DBG_DATAr_BLKACC,2,n,0,EFP_CAM_BIST_DBG_DATAr_OFFSET,0,(r._efp_cam_bist_dbg_data),1)
#define WRITE_EFP_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_CAM_BIST_DBG_DATAr_BLKACC,2,n,0,EFP_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._efp_cam_bist_dbg_data),1)
#define WRITE_EFP_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_CAM_BIST_DBG_DATAr_BLKACC,2,-1,0,EFP_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._efp_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'EFP_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  EFP_CAM_BIST_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_CAM_BIST_STATUS.
 */
#define READ_EFP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_CAM_BIST_STATUSr_BLKACC,2,n,0,EFP_CAM_BIST_STATUSr_OFFSET,0,(r._efp_cam_bist_status),1)
#define WRITE_EFP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_CAM_BIST_STATUSr_BLKACC,2,n,0,EFP_CAM_BIST_STATUSr_OFFSET,0,&(r._efp_cam_bist_status),1)
#define WRITE_EFP_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_CAM_BIST_STATUSr_BLKACC,2,-1,0,EFP_CAM_BIST_STATUSr_OFFSET,0,&(r._efp_cam_bist_status),1)

/*******************************************************************************
 * End of 'EFP_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EFP_CLASSID_SELECTOR
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_CLASSID_SELECTOR.
 */
#define READ_EFP_CLASSID_SELECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_CLASSID_SELECTORr_BLKACC,2,n,0,EFP_CLASSID_SELECTORr_OFFSET,0,(r._efp_classid_selector),2)
#define WRITE_EFP_CLASSID_SELECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_CLASSID_SELECTORr_BLKACC,2,n,0,EFP_CLASSID_SELECTORr_OFFSET,0,&(r._efp_classid_selector),2)
#define WRITE_EFP_CLASSID_SELECTORr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_CLASSID_SELECTORr_BLKACC&(~(0x1f<<18))|(9<<18),2,-1,0,EFP_CLASSID_SELECTORr_OFFSET,0,&(r._efp_classid_selector),2)

/*******************************************************************************
 * End of 'EFP_CLASSID_SELECTORr'
 */




/*******************************************************************************
 * MEMORY:  EFP_COUNTER_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access EFP_COUNTER_TABLE.
 */
#define READ_EFP_COUNTER_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EFP_COUNTER_TABLEm_BLKACC,2,n,0,EFP_COUNTER_TABLEm_OFFSET,i,(m._efp_counter_table),3)
#define WRITE_EFP_COUNTER_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EFP_COUNTER_TABLEm_BLKACC,2,n,0,EFP_COUNTER_TABLEm_OFFSET,i,&(m._efp_counter_table),3)
#define WRITE_EFP_COUNTER_TABLEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EFP_COUNTER_TABLEm_BLKACC,2,-1,0,EFP_COUNTER_TABLEm_OFFSET,i,&(m._efp_counter_table),3)

/*******************************************************************************
 * End of 'EFP_COUNTER_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  EFP_KEY4_DVP_SELECTOR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_KEY4_DVP_SELECTOR.
 */
#define READ_EFP_KEY4_DVP_SELECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_KEY4_DVP_SELECTORr_BLKACC,2,n,0,EFP_KEY4_DVP_SELECTORr_OFFSET,0,(r._efp_key4_dvp_selector),1)
#define WRITE_EFP_KEY4_DVP_SELECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_KEY4_DVP_SELECTORr_BLKACC,2,n,0,EFP_KEY4_DVP_SELECTORr_OFFSET,0,&(r._efp_key4_dvp_selector),1)
#define WRITE_EFP_KEY4_DVP_SELECTORr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_KEY4_DVP_SELECTORr_BLKACC&(~(0x1f<<18))|(9<<18),2,-1,0,EFP_KEY4_DVP_SELECTORr_OFFSET,0,&(r._efp_key4_dvp_selector),1)

/*******************************************************************************
 * End of 'EFP_KEY4_DVP_SELECTORr'
 */




/*******************************************************************************
 * REGISTER:  EFP_KEY4_MDL_SELECTOR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_KEY4_MDL_SELECTOR.
 */
#define READ_EFP_KEY4_MDL_SELECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_KEY4_MDL_SELECTORr_BLKACC,2,n,0,EFP_KEY4_MDL_SELECTORr_OFFSET,0,(r._efp_key4_mdl_selector),1)
#define WRITE_EFP_KEY4_MDL_SELECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_KEY4_MDL_SELECTORr_BLKACC,2,n,0,EFP_KEY4_MDL_SELECTORr_OFFSET,0,&(r._efp_key4_mdl_selector),1)
#define WRITE_EFP_KEY4_MDL_SELECTORr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_KEY4_MDL_SELECTORr_BLKACC&(~(0x1f<<18))|(9<<18),2,-1,0,EFP_KEY4_MDL_SELECTORr_OFFSET,0,&(r._efp_key4_mdl_selector),1)

/*******************************************************************************
 * End of 'EFP_KEY4_MDL_SELECTORr'
 */




/*******************************************************************************
 * REGISTER:  EFP_KEY8_DVP_SELECTOR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_KEY8_DVP_SELECTOR.
 */
#define READ_EFP_KEY8_DVP_SELECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_KEY8_DVP_SELECTORr_BLKACC,2,n,0,EFP_KEY8_DVP_SELECTORr_OFFSET,0,(r._efp_key8_dvp_selector),1)
#define WRITE_EFP_KEY8_DVP_SELECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_KEY8_DVP_SELECTORr_BLKACC,2,n,0,EFP_KEY8_DVP_SELECTORr_OFFSET,0,&(r._efp_key8_dvp_selector),1)
#define WRITE_EFP_KEY8_DVP_SELECTORr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_KEY8_DVP_SELECTORr_BLKACC&(~(0x1f<<18))|(9<<18),2,-1,0,EFP_KEY8_DVP_SELECTORr_OFFSET,0,&(r._efp_key8_dvp_selector),1)

/*******************************************************************************
 * End of 'EFP_KEY8_DVP_SELECTORr'
 */




/*******************************************************************************
 * REGISTER:  EFP_METER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_METER_CONTROL.
 */
#define READ_EFP_METER_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_METER_CONTROLr_BLKACC,2,n,0,EFP_METER_CONTROLr_OFFSET,0,(r._efp_meter_control),1)
#define WRITE_EFP_METER_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_METER_CONTROLr_BLKACC,2,n,0,EFP_METER_CONTROLr_OFFSET,0,&(r._efp_meter_control),1)
#define WRITE_EFP_METER_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_METER_CONTROLr_BLKACC&(~(0x1f<<18))|(9<<18),2,-1,0,EFP_METER_CONTROLr_OFFSET,0,&(r._efp_meter_control),1)

/*******************************************************************************
 * End of 'EFP_METER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EFP_METER_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     70
 */
/*
 * These macros can be used to access EFP_METER_TABLE.
 */
#define READ_EFP_METER_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EFP_METER_TABLEm_BLKACC,2,n,0,EFP_METER_TABLEm_OFFSET,i,(m._efp_meter_table),3)
#define WRITE_EFP_METER_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EFP_METER_TABLEm_BLKACC,2,n,0,EFP_METER_TABLEm_OFFSET,i,&(m._efp_meter_table),3)
#define WRITE_EFP_METER_TABLEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EFP_METER_TABLEm_BLKACC,2,-1,0,EFP_METER_TABLEm_OFFSET,i,&(m._efp_meter_table),3)

/*******************************************************************************
 * End of 'EFP_METER_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  EFP_PARITY_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_PARITY_CONTROL.
 */
#define READ_EFP_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EFP_PARITY_CONTROLr_BLKACC,2,EFP_PARITY_CONTROLr_OFFSET,0,(r._efp_parity_control), 1)
#define WRITE_EFP_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EFP_PARITY_CONTROLr_BLKACC,2,EFP_PARITY_CONTROLr_OFFSET,0,&(r._efp_parity_control), 1)

/*******************************************************************************
 * End of 'EFP_PARITY_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EFP_POLICY_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     194
 */
/*
 * These macros can be used to access EFP_POLICY_TABLE.
 */
#define READ_EFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EFP_POLICY_TABLEm_BLKACC,2,n,0,EFP_POLICY_TABLEm_OFFSET,i,(m._efp_policy_table),7)
#define WRITE_EFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EFP_POLICY_TABLEm_BLKACC,2,n,0,EFP_POLICY_TABLEm_OFFSET,i,&(m._efp_policy_table),7)
#define WRITE_EFP_POLICY_TABLEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EFP_POLICY_TABLEm_BLKACC,2,-1,0,EFP_POLICY_TABLEm_OFFSET,i,&(m._efp_policy_table),7)

/*******************************************************************************
 * End of 'EFP_POLICY_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  EFP_RAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_RAM_CONTROL.
 */
#define READ_EFP_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_RAM_CONTROLr_BLKACC,2,n,0,EFP_RAM_CONTROLr_OFFSET,0,(r._efp_ram_control),1)
#define WRITE_EFP_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROLr_BLKACC,2,n,0,EFP_RAM_CONTROLr_OFFSET,0,&(r._efp_ram_control),1)
#define WRITE_EFP_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROLr_BLKACC,2,-1,0,EFP_RAM_CONTROLr_OFFSET,0,&(r._efp_ram_control),1)

/*******************************************************************************
 * End of 'EFP_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EFP_RAM_CONTROL_1_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_RAM_CONTROL_1_64.
 */
#define READ_EFP_RAM_CONTROL_1_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_RAM_CONTROL_1_64r_BLKACC,2,n,0,EFP_RAM_CONTROL_1_64r_OFFSET,0,(r._efp_ram_control_1_64),2)
#define WRITE_EFP_RAM_CONTROL_1_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_1_64r_BLKACC,2,n,0,EFP_RAM_CONTROL_1_64r_OFFSET,0,&(r._efp_ram_control_1_64),2)
#define WRITE_EFP_RAM_CONTROL_1_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_1_64r_BLKACC,2,-1,0,EFP_RAM_CONTROL_1_64r_OFFSET,0,&(r._efp_ram_control_1_64),2)

/*******************************************************************************
 * End of 'EFP_RAM_CONTROL_1_64r'
 */




/*******************************************************************************
 * REGISTER:  EFP_RAM_CONTROL_2_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_RAM_CONTROL_2_64.
 */
#define READ_EFP_RAM_CONTROL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_RAM_CONTROL_2_64r_BLKACC,2,n,0,EFP_RAM_CONTROL_2_64r_OFFSET,0,(r._efp_ram_control_2_64),2)
#define WRITE_EFP_RAM_CONTROL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_2_64r_BLKACC,2,n,0,EFP_RAM_CONTROL_2_64r_OFFSET,0,&(r._efp_ram_control_2_64),2)
#define WRITE_EFP_RAM_CONTROL_2_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_2_64r_BLKACC,2,-1,0,EFP_RAM_CONTROL_2_64r_OFFSET,0,&(r._efp_ram_control_2_64),2)

/*******************************************************************************
 * End of 'EFP_RAM_CONTROL_2_64r'
 */




/*******************************************************************************
 * REGISTER:  EFP_RAM_CONTROL_3
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_RAM_CONTROL_3.
 */
#define READ_EFP_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_RAM_CONTROL_3r_BLKACC,2,n,0,EFP_RAM_CONTROL_3r_OFFSET,0,(r._efp_ram_control_3),2)
#define WRITE_EFP_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_3r_BLKACC,2,n,0,EFP_RAM_CONTROL_3r_OFFSET,0,&(r._efp_ram_control_3),2)
#define WRITE_EFP_RAM_CONTROL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_3r_BLKACC,2,-1,0,EFP_RAM_CONTROL_3r_OFFSET,0,&(r._efp_ram_control_3),2)

/*******************************************************************************
 * End of 'EFP_RAM_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  EFP_RAM_CONTROL_4
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EFP_RAM_CONTROL_4.
 */
#define READ_EFP_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_RAM_CONTROL_4r_BLKACC,2,n,0,EFP_RAM_CONTROL_4r_OFFSET,0,(r._efp_ram_control_4),2)
#define WRITE_EFP_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_4r_BLKACC,2,n,0,EFP_RAM_CONTROL_4r_OFFSET,0,&(r._efp_ram_control_4),2)
#define WRITE_EFP_RAM_CONTROL_4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_4r_BLKACC,2,-1,0,EFP_RAM_CONTROL_4r_OFFSET,0,&(r._efp_ram_control_4),2)

/*******************************************************************************
 * End of 'EFP_RAM_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  EFP_RAM_CONTROL_5
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_RAM_CONTROL_5.
 */
#define READ_EFP_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_RAM_CONTROL_5r_BLKACC,2,n,0,EFP_RAM_CONTROL_5r_OFFSET,0,(r._efp_ram_control_5),1)
#define WRITE_EFP_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_5r_BLKACC,2,n,0,EFP_RAM_CONTROL_5r_OFFSET,0,&(r._efp_ram_control_5),1)
#define WRITE_EFP_RAM_CONTROL_5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_RAM_CONTROL_5r_BLKACC,2,-1,0,EFP_RAM_CONTROL_5r_OFFSET,0,&(r._efp_ram_control_5),1)

/*******************************************************************************
 * End of 'EFP_RAM_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  EFP_SLICE_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_SLICE_CONTROL.
 */
#define READ_EFP_SLICE_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_SLICE_CONTROLr_BLKACC,2,n,0,EFP_SLICE_CONTROLr_OFFSET,0,(r._efp_slice_control),1)
#define WRITE_EFP_SLICE_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_SLICE_CONTROLr_BLKACC,2,n,0,EFP_SLICE_CONTROLr_OFFSET,0,&(r._efp_slice_control),1)
#define WRITE_EFP_SLICE_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_SLICE_CONTROLr_BLKACC&(~(0x1f<<18))|(9<<18),2,-1,0,EFP_SLICE_CONTROLr_OFFSET,0,&(r._efp_slice_control),1)

/*******************************************************************************
 * End of 'EFP_SLICE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EFP_SLICE_MAP
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EFP_SLICE_MAP.
 */
#define READ_EFP_SLICE_MAPr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EFP_SLICE_MAPr_BLKACC,2,n,0,EFP_SLICE_MAPr_OFFSET,0,(r._efp_slice_map),1)
#define WRITE_EFP_SLICE_MAPr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_SLICE_MAPr_BLKACC,2,n,0,EFP_SLICE_MAPr_OFFSET,0,&(r._efp_slice_map),1)
#define WRITE_EFP_SLICE_MAPr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EFP_SLICE_MAPr_BLKACC&(~(0x1f<<18))|(9<<18),2,-1,0,EFP_SLICE_MAPr_OFFSET,0,&(r._efp_slice_map),1)

/*******************************************************************************
 * End of 'EFP_SLICE_MAPr'
 */




/*******************************************************************************
 * MEMORY:  EFP_TCAM
 * BLOCKS:   EPIPE
 * SIZE:     482
 */
/*
 * These macros can be used to access EFP_TCAM.
 */
#define READ_EFP_TCAMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EFP_TCAMm_BLKACC,2,n,0,EFP_TCAMm_OFFSET,i,(m._efp_tcam),16)
#define WRITE_EFP_TCAMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EFP_TCAMm_BLKACC,2,n,0,EFP_TCAMm_OFFSET,i,&(m._efp_tcam),16)
#define WRITE_EFP_TCAMm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EFP_TCAMm_BLKACC,2,-1,0,EFP_TCAMm_OFFSET,i,&(m._efp_tcam),16)

/*******************************************************************************
 * End of 'EFP_TCAMm'
 */




/*******************************************************************************
 * REGISTER:  EGR_1588_EGRESS_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_1588_EGRESS_CTRL.
 */
#define READ_EGR_1588_EGRESS_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_1588_EGRESS_CTRLr_BLKACC,p,EGR_1588_EGRESS_CTRLr_OFFSET,0,(r._egr_1588_egress_ctrl), 1)
#define WRITE_EGR_1588_EGRESS_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_1588_EGRESS_CTRLr_BLKACC,p,EGR_1588_EGRESS_CTRLr_OFFSET,0,&(r._egr_1588_egress_ctrl), 1)

/*******************************************************************************
 * End of 'EGR_1588_EGRESS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_1588_INGRESS_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_1588_INGRESS_CTRL.
 */
#define READ_EGR_1588_INGRESS_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_1588_INGRESS_CTRLr_BLKACC,p,EGR_1588_INGRESS_CTRLr_OFFSET,0,(r._egr_1588_ingress_ctrl), 1)
#define WRITE_EGR_1588_INGRESS_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_1588_INGRESS_CTRLr_BLKACC,p,EGR_1588_INGRESS_CTRLr_OFFSET,0,&(r._egr_1588_ingress_ctrl), 1)

/*******************************************************************************
 * End of 'EGR_1588_INGRESS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_1588_LINK_DELAY_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_1588_LINK_DELAY_64.
 */
#define READ_EGR_1588_LINK_DELAY_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_1588_LINK_DELAY_64r_BLKACC,p,EGR_1588_LINK_DELAY_64r_OFFSET,0,(r._egr_1588_link_delay_64), 2)
#define WRITE_EGR_1588_LINK_DELAY_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_1588_LINK_DELAY_64r_BLKACC,p,EGR_1588_LINK_DELAY_64r_OFFSET,0,&(r._egr_1588_link_delay_64), 2)

/*******************************************************************************
 * End of 'EGR_1588_LINK_DELAY_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_1588_PARSING_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_1588_PARSING_CONTROL.
 */
#define READ_EGR_1588_PARSING_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_1588_PARSING_CONTROLr_BLKACC,2,EGR_1588_PARSING_CONTROLr_OFFSET,0,(r._egr_1588_parsing_control), 1)
#define WRITE_EGR_1588_PARSING_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_1588_PARSING_CONTROLr_BLKACC,2,EGR_1588_PARSING_CONTROLr_OFFSET,0,&(r._egr_1588_parsing_control), 1)

/*******************************************************************************
 * End of 'EGR_1588_PARSING_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_1588_SA
 * BLOCKS:   EPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access EGR_1588_SA.
 */
#define READ_EGR_1588_SAm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_1588_SAm_BLKACC)+2,EGR_1588_SAm_OFFSET+i,(m._egr_1588_sa),2)
#define WRITE_EGR_1588_SAm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_1588_SAm_BLKACC)+2,EGR_1588_SAm_OFFSET+i,&(m._egr_1588_sa),2)

/*******************************************************************************
 * End of 'EGR_1588_SAm'
 */




/*******************************************************************************
 * REGISTER:  EGR_ARB_MISC_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_ARB_MISC_CONTROL.
 */
#define READ_EGR_ARB_MISC_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_ARB_MISC_CONTROLr_BLKACC,2,EGR_ARB_MISC_CONTROLr_OFFSET,0,(r._egr_arb_misc_control), 1)
#define WRITE_EGR_ARB_MISC_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_ARB_MISC_CONTROLr_BLKACC,2,EGR_ARB_MISC_CONTROLr_OFFSET,0,&(r._egr_arb_misc_control), 1)

/*******************************************************************************
 * End of 'EGR_ARB_MISC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_ARB_TIMEOUT_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_ARB_TIMEOUT_CONTROL.
 */
#define READ_EGR_ARB_TIMEOUT_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_ARB_TIMEOUT_CONTROLr_BLKACC,2,EGR_ARB_TIMEOUT_CONTROLr_OFFSET,0,(r._egr_arb_timeout_control), 1)
#define WRITE_EGR_ARB_TIMEOUT_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_ARB_TIMEOUT_CONTROLr_BLKACC,2,EGR_ARB_TIMEOUT_CONTROLr_OFFSET,0,&(r._egr_arb_timeout_control), 1)

/*******************************************************************************
 * End of 'EGR_ARB_TIMEOUT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_CONFIG.
 */
#define READ_EGR_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_CONFIGr_BLKACC,2,EGR_CONFIGr_OFFSET,0,(r._egr_config), 1)
#define WRITE_EGR_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_CONFIGr_BLKACC,2,EGR_CONFIGr_OFFSET,0,&(r._egr_config), 1)

/*******************************************************************************
 * End of 'EGR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_CONFIG_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_CONFIG_1.
 */
#define READ_EGR_CONFIG_1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_CONFIG_1r_BLKACC,2,EGR_CONFIG_1r_OFFSET,0,(r._egr_config_1), 1)
#define WRITE_EGR_CONFIG_1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_CONFIG_1r_BLKACC,2,EGR_CONFIG_1r_OFFSET,0,&(r._egr_config_1), 1)

/*******************************************************************************
 * End of 'EGR_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_COUNTER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_COUNTER_CONTROL.
 */
#define READ_EGR_COUNTER_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_COUNTER_CONTROLr_BLKACC,p,EGR_COUNTER_CONTROLr_OFFSET,0,(r._egr_counter_control), 1)
#define WRITE_EGR_COUNTER_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_COUNTER_CONTROLr_BLKACC,p,EGR_COUNTER_CONTROLr_OFFSET,0,&(r._egr_counter_control), 1)

/*******************************************************************************
 * End of 'EGR_COUNTER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DATABUF_ISO_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DATABUF_ISO_CONTROL_1.
 */
#define READ_EGR_DATABUF_ISO_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DATABUF_ISO_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_ISO_CONTROL_1r_OFFSET,0,(r._egr_databuf_iso_control_1),1)
#define WRITE_EGR_DATABUF_ISO_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_ISO_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_ISO_CONTROL_1r_OFFSET,0,&(r._egr_databuf_iso_control_1),1)
#define WRITE_EGR_DATABUF_ISO_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_ISO_CONTROL_1r_BLKACC,2,-1,0,EGR_DATABUF_ISO_CONTROL_1r_OFFSET,0,&(r._egr_databuf_iso_control_1),1)

/*******************************************************************************
 * End of 'EGR_DATABUF_ISO_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DATABUF_LVM_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DATABUF_LVM_CONTROL_1.
 */
#define READ_EGR_DATABUF_LVM_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DATABUF_LVM_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_LVM_CONTROL_1r_OFFSET,0,(r._egr_databuf_lvm_control_1),1)
#define WRITE_EGR_DATABUF_LVM_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_LVM_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_LVM_CONTROL_1r_OFFSET,0,&(r._egr_databuf_lvm_control_1),1)
#define WRITE_EGR_DATABUF_LVM_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_LVM_CONTROL_1r_BLKACC,2,-1,0,EGR_DATABUF_LVM_CONTROL_1r_OFFSET,0,&(r._egr_databuf_lvm_control_1),1)

/*******************************************************************************
 * End of 'EGR_DATABUF_LVM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DATABUF_RAM_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DATABUF_RAM_CONTROL_1.
 */
#define READ_EGR_DATABUF_RAM_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DATABUF_RAM_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_1r_OFFSET,0,(r._egr_databuf_ram_control_1),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_1r_OFFSET,0,&(r._egr_databuf_ram_control_1),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_1r_BLKACC,2,-1,0,EGR_DATABUF_RAM_CONTROL_1r_OFFSET,0,&(r._egr_databuf_ram_control_1),1)

/*******************************************************************************
 * End of 'EGR_DATABUF_RAM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DATABUF_RAM_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DATABUF_RAM_CONTROL_2.
 */
#define READ_EGR_DATABUF_RAM_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DATABUF_RAM_CONTROL_2r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_2r_OFFSET,0,(r._egr_databuf_ram_control_2),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_2r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_2r_OFFSET,0,&(r._egr_databuf_ram_control_2),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_2r_BLKACC,2,-1,0,EGR_DATABUF_RAM_CONTROL_2r_OFFSET,0,&(r._egr_databuf_ram_control_2),1)

/*******************************************************************************
 * End of 'EGR_DATABUF_RAM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DATABUF_RAM_CONTROL_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DATABUF_RAM_CONTROL_3.
 */
#define READ_EGR_DATABUF_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DATABUF_RAM_CONTROL_3r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_3r_OFFSET,0,(r._egr_databuf_ram_control_3),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_3r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_3r_OFFSET,0,&(r._egr_databuf_ram_control_3),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_3r_BLKACC,2,-1,0,EGR_DATABUF_RAM_CONTROL_3r_OFFSET,0,&(r._egr_databuf_ram_control_3),1)

/*******************************************************************************
 * End of 'EGR_DATABUF_RAM_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DATABUF_RAM_CONTROL_4
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DATABUF_RAM_CONTROL_4.
 */
#define READ_EGR_DATABUF_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DATABUF_RAM_CONTROL_4r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_4r_OFFSET,0,(r._egr_databuf_ram_control_4),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_4r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_4r_OFFSET,0,&(r._egr_databuf_ram_control_4),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_4r_BLKACC,2,-1,0,EGR_DATABUF_RAM_CONTROL_4r_OFFSET,0,&(r._egr_databuf_ram_control_4),1)

/*******************************************************************************
 * End of 'EGR_DATABUF_RAM_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DATABUF_RAM_CONTROL_5
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DATABUF_RAM_CONTROL_5.
 */
#define READ_EGR_DATABUF_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DATABUF_RAM_CONTROL_5r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_5r_OFFSET,0,(r._egr_databuf_ram_control_5),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_5r_BLKACC,2,n,0,EGR_DATABUF_RAM_CONTROL_5r_OFFSET,0,&(r._egr_databuf_ram_control_5),1)
#define WRITE_EGR_DATABUF_RAM_CONTROL_5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RAM_CONTROL_5r_BLKACC,2,-1,0,EGR_DATABUF_RAM_CONTROL_5r_OFFSET,0,&(r._egr_databuf_ram_control_5),1)

/*******************************************************************************
 * End of 'EGR_DATABUF_RAM_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DATABUF_RDT_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DATABUF_RDT_CONTROL_1.
 */
#define READ_EGR_DATABUF_RDT_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DATABUF_RDT_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_RDT_CONTROL_1r_OFFSET,0,(r._egr_databuf_rdt_control_1),1)
#define WRITE_EGR_DATABUF_RDT_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RDT_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_RDT_CONTROL_1r_OFFSET,0,&(r._egr_databuf_rdt_control_1),1)
#define WRITE_EGR_DATABUF_RDT_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_RDT_CONTROL_1r_BLKACC,2,-1,0,EGR_DATABUF_RDT_CONTROL_1r_OFFSET,0,&(r._egr_databuf_rdt_control_1),1)

/*******************************************************************************
 * End of 'EGR_DATABUF_RDT_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DATABUF_WBT_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DATABUF_WBT_CONTROL_1.
 */
#define READ_EGR_DATABUF_WBT_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DATABUF_WBT_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_WBT_CONTROL_1r_OFFSET,0,(r._egr_databuf_wbt_control_1),1)
#define WRITE_EGR_DATABUF_WBT_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_WBT_CONTROL_1r_BLKACC,2,n,0,EGR_DATABUF_WBT_CONTROL_1r_OFFSET,0,&(r._egr_databuf_wbt_control_1),1)
#define WRITE_EGR_DATABUF_WBT_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DATABUF_WBT_CONTROL_1r_BLKACC,2,-1,0,EGR_DATABUF_WBT_CONTROL_1r_OFFSET,0,&(r._egr_databuf_wbt_control_1),1)

/*******************************************************************************
 * End of 'EGR_DATABUF_WBT_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_DBG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DBG.
 */
#define READ_EGR_DBGr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_DBGr_BLKACC,p,EGR_DBGr_OFFSET,0,(r._egr_dbg), 1)
#define WRITE_EGR_DBGr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_DBGr_BLKACC,p,EGR_DBGr_OFFSET,0,&(r._egr_dbg), 1)

/*******************************************************************************
 * End of 'EGR_DBGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DEV_TO_PHYS_MAP
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DEV_TO_PHYS_MAP.
 */
#define READ_EGR_DEV_TO_PHYS_MAPr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_DEV_TO_PHYS_MAPr_BLKACC,p,EGR_DEV_TO_PHYS_MAPr_OFFSET,0,(r._egr_dev_to_phys_map), 1)
#define WRITE_EGR_DEV_TO_PHYS_MAPr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_DEV_TO_PHYS_MAPr_BLKACC,p,EGR_DEV_TO_PHYS_MAPr_OFFSET,0,&(r._egr_dev_to_phys_map), 1)

/*******************************************************************************
 * End of 'EGR_DEV_TO_PHYS_MAPr'
 */




/*******************************************************************************
 * REGISTER:  EGR_DROP_VECTOR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_DROP_VECTOR.
 */
#define READ_EGR_DROP_VECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_DROP_VECTORr_BLKACC,2,n,0,EGR_DROP_VECTORr_OFFSET,0,(r._egr_drop_vector),1)
#define WRITE_EGR_DROP_VECTORr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DROP_VECTORr_BLKACC,2,n,0,EGR_DROP_VECTORr_OFFSET,0,&(r._egr_drop_vector),1)
#define WRITE_EGR_DROP_VECTORr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_DROP_VECTORr_BLKACC,2,-1,0,EGR_DROP_VECTORr_OFFSET,0,&(r._egr_drop_vector),1)

/*******************************************************************************
 * End of 'EGR_DROP_VECTORr'
 */




/*******************************************************************************
 * MEMORY:  EGR_DSCP_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     7
 */
/*
 * These macros can be used to access EGR_DSCP_TABLE.
 */
#define READ_EGR_DSCP_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_DSCP_TABLEm_BLKACC)+2,EGR_DSCP_TABLEm_OFFSET+i,(m._egr_dscp_table),1)
#define WRITE_EGR_DSCP_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_DSCP_TABLEm_BLKACC)+2,EGR_DSCP_TABLEm_OFFSET+i,&(m._egr_dscp_table),1)

/*******************************************************************************
 * End of 'EGR_DSCP_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_DVP_ATTRIBUTE
 * BLOCKS:   EPIPE
 * SIZE:     82
 */
/*
 * These macros can be used to access EGR_DVP_ATTRIBUTE.
 */
#define READ_EGR_DVP_ATTRIBUTEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_DVP_ATTRIBUTEm_BLKACC)+2,EGR_DVP_ATTRIBUTEm_OFFSET+i,(m._egr_dvp_attribute),3)
#define WRITE_EGR_DVP_ATTRIBUTEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_DVP_ATTRIBUTEm_BLKACC)+2,EGR_DVP_ATTRIBUTEm_OFFSET+i,&(m._egr_dvp_attribute),3)

/*******************************************************************************
 * End of 'EGR_DVP_ATTRIBUTEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_DVP_ATTRIBUTE_1
 * BLOCKS:   EPIPE
 * SIZE:     82
 */
/*
 * These macros can be used to access EGR_DVP_ATTRIBUTE_1.
 */
#define READ_EGR_DVP_ATTRIBUTE_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_DVP_ATTRIBUTE_1m_BLKACC)+2,EGR_DVP_ATTRIBUTE_1m_OFFSET+i,(m._egr_dvp_attribute_1),3)
#define WRITE_EGR_DVP_ATTRIBUTE_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_DVP_ATTRIBUTE_1m_BLKACC)+2,EGR_DVP_ATTRIBUTE_1m_OFFSET+i,&(m._egr_dvp_attribute_1),3)

/*******************************************************************************
 * End of 'EGR_DVP_ATTRIBUTE_1m'
 */




/*******************************************************************************
 * REGISTER:  EGR_ECN_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_ECN_CONTROL.
 */
#define READ_EGR_ECN_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_ECN_CONTROLr_BLKACC,2,EGR_ECN_CONTROLr_OFFSET,0,(r._egr_ecn_control), 1)
#define WRITE_EGR_ECN_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_ECN_CONTROLr_BLKACC,2,EGR_ECN_CONTROLr_OFFSET,0,&(r._egr_ecn_control), 1)

/*******************************************************************************
 * End of 'EGR_ECN_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_ECN_COUNTER_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_ECN_COUNTER_64.
 */
#define READ_EGR_ECN_COUNTER_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_ECN_COUNTER_64r_BLKACC,p,EGR_ECN_COUNTER_64r_OFFSET,0,(r._egr_ecn_counter_64), 2)
#define WRITE_EGR_ECN_COUNTER_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_ECN_COUNTER_64r_BLKACC,p,EGR_ECN_COUNTER_64r_OFFSET,0,&(r._egr_ecn_counter_64), 2)

/*******************************************************************************
 * End of 'EGR_ECN_COUNTER_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EDATABUF_EN_COR_ERR_RPT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EDATABUF_EN_COR_ERR_RPT.
 */
#define READ_EGR_EDATABUF_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EDATABUF_EN_COR_ERR_RPTr_BLKACC,2,EGR_EDATABUF_EN_COR_ERR_RPTr_OFFSET,0,(r._egr_edatabuf_en_cor_err_rpt), 1)
#define WRITE_EGR_EDATABUF_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EDATABUF_EN_COR_ERR_RPTr_BLKACC,2,EGR_EDATABUF_EN_COR_ERR_RPTr_OFFSET,0,&(r._egr_edatabuf_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'EGR_EDATABUF_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EDATABUF_EN_COR_ERR_RPT_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EDATABUF_EN_COR_ERR_RPT_1.
 */
#define READ_EGR_EDATABUF_EN_COR_ERR_RPT_1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EDATABUF_EN_COR_ERR_RPT_1r_BLKACC,2,EGR_EDATABUF_EN_COR_ERR_RPT_1r_OFFSET,0,(r._egr_edatabuf_en_cor_err_rpt_1), 1)
#define WRITE_EGR_EDATABUF_EN_COR_ERR_RPT_1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EDATABUF_EN_COR_ERR_RPT_1r_BLKACC,2,EGR_EDATABUF_EN_COR_ERR_RPT_1r_OFFSET,0,&(r._egr_edatabuf_en_cor_err_rpt_1), 1)

/*******************************************************************************
 * End of 'EGR_EDATABUF_EN_COR_ERR_RPT_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EDATABUF_PARITY_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EDATABUF_PARITY_CONTROL.
 */
#define READ_EGR_EDATABUF_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EDATABUF_PARITY_CONTROLr_BLKACC,2,EGR_EDATABUF_PARITY_CONTROLr_OFFSET,0,(r._egr_edatabuf_parity_control), 1)
#define WRITE_EGR_EDATABUF_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EDATABUF_PARITY_CONTROLr_BLKACC,2,EGR_EDATABUF_PARITY_CONTROLr_OFFSET,0,&(r._egr_edatabuf_parity_control), 1)

/*******************************************************************************
 * End of 'EGR_EDATABUF_PARITY_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EDATABUF_PDA_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EDATABUF_PDA_CONTROL.
 */
#define READ_EGR_EDATABUF_PDA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EDATABUF_PDA_CONTROLr_BLKACC,2,n,0,EGR_EDATABUF_PDA_CONTROLr_OFFSET,0,(r._egr_edatabuf_pda_control),1)
#define WRITE_EGR_EDATABUF_PDA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EDATABUF_PDA_CONTROLr_BLKACC,2,n,0,EGR_EDATABUF_PDA_CONTROLr_OFFSET,0,&(r._egr_edatabuf_pda_control),1)
#define WRITE_EGR_EDATABUF_PDA_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EDATABUF_PDA_CONTROLr_BLKACC,2,-1,0,EGR_EDATABUF_PDA_CONTROLr_OFFSET,0,&(r._egr_edatabuf_pda_control),1)

/*******************************************************************************
 * End of 'EGR_EDATABUF_PDA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EDB_CTRL_PARITY_EN
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EDB_CTRL_PARITY_EN.
 */
#define READ_EGR_EDB_CTRL_PARITY_ENr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EDB_CTRL_PARITY_ENr_BLKACC,2,EGR_EDB_CTRL_PARITY_ENr_OFFSET,0,(r._egr_edb_ctrl_parity_en), 1)
#define WRITE_EGR_EDB_CTRL_PARITY_ENr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EDB_CTRL_PARITY_ENr_BLKACC,2,EGR_EDB_CTRL_PARITY_ENr_OFFSET,0,&(r._egr_edb_ctrl_parity_en), 1)

/*******************************************************************************
 * End of 'EGR_EDB_CTRL_PARITY_ENr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EDB_MISC_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EDB_MISC_CTRL.
 */
#define READ_EGR_EDB_MISC_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EDB_MISC_CTRLr_BLKACC,2,n,0,EGR_EDB_MISC_CTRLr_OFFSET,0,(r._egr_edb_misc_ctrl),1)
#define WRITE_EGR_EDB_MISC_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EDB_MISC_CTRLr_BLKACC,2,n,0,EGR_EDB_MISC_CTRLr_OFFSET,0,&(r._egr_edb_misc_ctrl),1)
#define WRITE_EGR_EDB_MISC_CTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EDB_MISC_CTRLr_BLKACC,2,-1,0,EGR_EDB_MISC_CTRLr_OFFSET,0,&(r._egr_edb_misc_ctrl),1)

/*******************************************************************************
 * End of 'EGR_EDB_MISC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPMOD_RAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFPMOD_RAM_CONTROL.
 */
#define READ_EGR_EFPMOD_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EFPMOD_RAM_CONTROLr_BLKACC,2,n,0,EGR_EFPMOD_RAM_CONTROLr_OFFSET,0,(r._egr_efpmod_ram_control),1)
#define WRITE_EGR_EFPMOD_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFPMOD_RAM_CONTROLr_BLKACC,2,n,0,EGR_EFPMOD_RAM_CONTROLr_OFFSET,0,&(r._egr_efpmod_ram_control),1)
#define WRITE_EGR_EFPMOD_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFPMOD_RAM_CONTROLr_BLKACC,2,-1,0,EGR_EFPMOD_RAM_CONTROLr_OFFSET,0,&(r._egr_efpmod_ram_control),1)

/*******************************************************************************
 * End of 'EGR_EFPMOD_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPMOD_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFPMOD_SER_CONTROL.
 */
#define READ_EGR_EFPMOD_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EFPMOD_SER_CONTROLr_BLKACC,2,EGR_EFPMOD_SER_CONTROLr_OFFSET,0,(r._egr_efpmod_ser_control), 1)
#define WRITE_EGR_EFPMOD_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EFPMOD_SER_CONTROLr_BLKACC,2,EGR_EFPMOD_SER_CONTROLr_OFFSET,0,&(r._egr_efpmod_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_EFPMOD_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFPPARS_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFPPARS_SER_CONTROL.
 */
#define READ_EGR_EFPPARS_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EFPPARS_SER_CONTROLr_BLKACC,2,EGR_EFPPARS_SER_CONTROLr_OFFSET,0,(r._egr_efppars_ser_control), 1)
#define WRITE_EGR_EFPPARS_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EFPPARS_SER_CONTROLr_BLKACC,2,EGR_EFPPARS_SER_CONTROLr_OFFSET,0,&(r._egr_efppars_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_EFPPARS_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFP_CNTR_UPDATE_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFP_CNTR_UPDATE_CONTROL.
 */
#define READ_EGR_EFP_CNTR_UPDATE_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EFP_CNTR_UPDATE_CONTROLr_BLKACC,2,n,0,EGR_EFP_CNTR_UPDATE_CONTROLr_OFFSET,0,(r._egr_efp_cntr_update_control),1)
#define WRITE_EGR_EFP_CNTR_UPDATE_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFP_CNTR_UPDATE_CONTROLr_BLKACC,2,n,0,EGR_EFP_CNTR_UPDATE_CONTROLr_OFFSET,0,&(r._egr_efp_cntr_update_control),1)
#define WRITE_EGR_EFP_CNTR_UPDATE_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFP_CNTR_UPDATE_CONTROLr_BLKACC,2,-1,0,EGR_EFP_CNTR_UPDATE_CONTROLr_OFFSET,0,&(r._egr_efp_cntr_update_control),1)

/*******************************************************************************
 * End of 'EGR_EFP_CNTR_UPDATE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFP_EVICTION_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EFP_EVICTION_CONTROL.
 */
#define READ_EGR_EFP_EVICTION_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EFP_EVICTION_CONTROLr_BLKACC,2,n,0,EGR_EFP_EVICTION_CONTROLr_OFFSET,0,(r._egr_efp_eviction_control),1)
#define WRITE_EGR_EFP_EVICTION_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFP_EVICTION_CONTROLr_BLKACC,2,n,0,EGR_EFP_EVICTION_CONTROLr_OFFSET,0,&(r._egr_efp_eviction_control),1)
#define WRITE_EGR_EFP_EVICTION_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFP_EVICTION_CONTROLr_BLKACC,2,-1,0,EGR_EFP_EVICTION_CONTROLr_OFFSET,0,&(r._egr_efp_eviction_control),1)

/*******************************************************************************
 * End of 'EGR_EFP_EVICTION_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFP_EVICTION_SEED
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EFP_EVICTION_SEED.
 */
#define READ_EGR_EFP_EVICTION_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EFP_EVICTION_SEEDr_BLKACC,2,n,0,EGR_EFP_EVICTION_SEEDr_OFFSET,0,(r._egr_efp_eviction_seed),2)
#define WRITE_EGR_EFP_EVICTION_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFP_EVICTION_SEEDr_BLKACC,2,n,0,EGR_EFP_EVICTION_SEEDr_OFFSET,0,&(r._egr_efp_eviction_seed),2)
#define WRITE_EGR_EFP_EVICTION_SEEDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFP_EVICTION_SEEDr_BLKACC,2,-1,0,EGR_EFP_EVICTION_SEEDr_OFFSET,0,&(r._egr_efp_eviction_seed),2)

/*******************************************************************************
 * End of 'EGR_EFP_EVICTION_SEEDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EFP_EVICTION_THRESHOLD
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EFP_EVICTION_THRESHOLD.
 */
#define READ_EGR_EFP_EVICTION_THRESHOLDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EFP_EVICTION_THRESHOLDr_BLKACC,2,n,0,EGR_EFP_EVICTION_THRESHOLDr_OFFSET,0,(r._egr_efp_eviction_threshold),2)
#define WRITE_EGR_EFP_EVICTION_THRESHOLDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFP_EVICTION_THRESHOLDr_BLKACC,2,n,0,EGR_EFP_EVICTION_THRESHOLDr_OFFSET,0,&(r._egr_efp_eviction_threshold),2)
#define WRITE_EGR_EFP_EVICTION_THRESHOLDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EFP_EVICTION_THRESHOLDr_BLKACC,2,-1,0,EGR_EFP_EVICTION_THRESHOLDr_OFFSET,0,&(r._egr_efp_eviction_threshold),2)

/*******************************************************************************
 * End of 'EGR_EFP_EVICTION_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EHCPM_ECC_PARITY_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EHCPM_ECC_PARITY_CONTROL.
 */
#define READ_EGR_EHCPM_ECC_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EHCPM_ECC_PARITY_CONTROLr_BLKACC,2,EGR_EHCPM_ECC_PARITY_CONTROLr_OFFSET,0,(r._egr_ehcpm_ecc_parity_control), 1)
#define WRITE_EGR_EHCPM_ECC_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EHCPM_ECC_PARITY_CONTROLr_BLKACC,2,EGR_EHCPM_ECC_PARITY_CONTROLr_OFFSET,0,&(r._egr_ehcpm_ecc_parity_control), 1)

/*******************************************************************************
 * End of 'EGR_EHCPM_ECC_PARITY_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EHCPM_EN_COR_ERR_RPT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EHCPM_EN_COR_ERR_RPT.
 */
#define READ_EGR_EHCPM_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EHCPM_EN_COR_ERR_RPTr_BLKACC,2,EGR_EHCPM_EN_COR_ERR_RPTr_OFFSET,0,(r._egr_ehcpm_en_cor_err_rpt), 1)
#define WRITE_EGR_EHCPM_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EHCPM_EN_COR_ERR_RPTr_BLKACC,2,EGR_EHCPM_EN_COR_ERR_RPTr_OFFSET,0,&(r._egr_ehcpm_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'EGR_EHCPM_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EHCPM_RAM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EHCPM_RAM_CONTROL.
 */
#define READ_EGR_EHCPM_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EHCPM_RAM_CONTROLr_BLKACC,2,n,0,EGR_EHCPM_RAM_CONTROLr_OFFSET,0,(r._egr_ehcpm_ram_control),1)
#define WRITE_EGR_EHCPM_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EHCPM_RAM_CONTROLr_BLKACC,2,n,0,EGR_EHCPM_RAM_CONTROLr_OFFSET,0,&(r._egr_ehcpm_ram_control),1)
#define WRITE_EGR_EHCPM_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EHCPM_RAM_CONTROLr_BLKACC,2,-1,0,EGR_EHCPM_RAM_CONTROLr_OFFSET,0,&(r._egr_ehcpm_ram_control),1)

/*******************************************************************************
 * End of 'EGR_EHCPM_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EHCPM_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EHCPM_SER_CONTROL.
 */
#define READ_EGR_EHCPM_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EHCPM_SER_CONTROLr_BLKACC,2,EGR_EHCPM_SER_CONTROLr_OFFSET,0,(r._egr_ehcpm_ser_control), 1)
#define WRITE_EGR_EHCPM_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EHCPM_SER_CONTROLr_BLKACC,2,EGR_EHCPM_SER_CONTROLr_OFFSET,0,&(r._egr_ehcpm_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_EHCPM_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EL3_ECC_PARITY_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EL3_ECC_PARITY_CONTROL.
 */
#define READ_EGR_EL3_ECC_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EL3_ECC_PARITY_CONTROLr_BLKACC,2,EGR_EL3_ECC_PARITY_CONTROLr_OFFSET,0,(r._egr_el3_ecc_parity_control), 1)
#define WRITE_EGR_EL3_ECC_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EL3_ECC_PARITY_CONTROLr_BLKACC,2,EGR_EL3_ECC_PARITY_CONTROLr_OFFSET,0,&(r._egr_el3_ecc_parity_control), 1)

/*******************************************************************************
 * End of 'EGR_EL3_ECC_PARITY_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EL3_EN_COR_ERR_RPT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EL3_EN_COR_ERR_RPT.
 */
#define READ_EGR_EL3_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EL3_EN_COR_ERR_RPTr_BLKACC,2,EGR_EL3_EN_COR_ERR_RPTr_OFFSET,0,(r._egr_el3_en_cor_err_rpt), 1)
#define WRITE_EGR_EL3_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EL3_EN_COR_ERR_RPTr_BLKACC,2,EGR_EL3_EN_COR_ERR_RPTr_OFFSET,0,&(r._egr_el3_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'EGR_EL3_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EL3_PM_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EL3_PM_CONTROL.
 */
#define READ_EGR_EL3_PM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EL3_PM_CONTROLr_BLKACC,2,n,0,EGR_EL3_PM_CONTROLr_OFFSET,0,(r._egr_el3_pm_control),1)
#define WRITE_EGR_EL3_PM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_PM_CONTROLr_BLKACC,2,n,0,EGR_EL3_PM_CONTROLr_OFFSET,0,&(r._egr_el3_pm_control),1)
#define WRITE_EGR_EL3_PM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_PM_CONTROLr_BLKACC,2,-1,0,EGR_EL3_PM_CONTROLr_OFFSET,0,&(r._egr_el3_pm_control),1)

/*******************************************************************************
 * End of 'EGR_EL3_PM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_EL3_RAM_CONTROL_2_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EL3_RAM_CONTROL_2_64.
 */
#define READ_EGR_EL3_RAM_CONTROL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EL3_RAM_CONTROL_2_64r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_2_64r_OFFSET,0,(r._egr_el3_ram_control_2_64),2)
#define WRITE_EGR_EL3_RAM_CONTROL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_2_64r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_2_64r_OFFSET,0,&(r._egr_el3_ram_control_2_64),2)
#define WRITE_EGR_EL3_RAM_CONTROL_2_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_2_64r_BLKACC,2,-1,0,EGR_EL3_RAM_CONTROL_2_64r_OFFSET,0,&(r._egr_el3_ram_control_2_64),2)

/*******************************************************************************
 * End of 'EGR_EL3_RAM_CONTROL_2_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EL3_RAM_CONTROL_3
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EL3_RAM_CONTROL_3.
 */
#define READ_EGR_EL3_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EL3_RAM_CONTROL_3r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_3r_OFFSET,0,(r._egr_el3_ram_control_3),2)
#define WRITE_EGR_EL3_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_3r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_3r_OFFSET,0,&(r._egr_el3_ram_control_3),2)
#define WRITE_EGR_EL3_RAM_CONTROL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_3r_BLKACC,2,-1,0,EGR_EL3_RAM_CONTROL_3r_OFFSET,0,&(r._egr_el3_ram_control_3),2)

/*******************************************************************************
 * End of 'EGR_EL3_RAM_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EL3_RAM_CONTROL_4
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EL3_RAM_CONTROL_4.
 */
#define READ_EGR_EL3_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EL3_RAM_CONTROL_4r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_4r_OFFSET,0,(r._egr_el3_ram_control_4),1)
#define WRITE_EGR_EL3_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_4r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_4r_OFFSET,0,&(r._egr_el3_ram_control_4),1)
#define WRITE_EGR_EL3_RAM_CONTROL_4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_4r_BLKACC,2,-1,0,EGR_EL3_RAM_CONTROL_4r_OFFSET,0,&(r._egr_el3_ram_control_4),1)

/*******************************************************************************
 * End of 'EGR_EL3_RAM_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EL3_RAM_CONTROL_5
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EL3_RAM_CONTROL_5.
 */
#define READ_EGR_EL3_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EL3_RAM_CONTROL_5r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_5r_OFFSET,0,(r._egr_el3_ram_control_5),1)
#define WRITE_EGR_EL3_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_5r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_5r_OFFSET,0,&(r._egr_el3_ram_control_5),1)
#define WRITE_EGR_EL3_RAM_CONTROL_5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_5r_BLKACC,2,-1,0,EGR_EL3_RAM_CONTROL_5r_OFFSET,0,&(r._egr_el3_ram_control_5),1)

/*******************************************************************************
 * End of 'EGR_EL3_RAM_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EL3_RAM_CONTROL_6
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EL3_RAM_CONTROL_6.
 */
#define READ_EGR_EL3_RAM_CONTROL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EL3_RAM_CONTROL_6r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_6r_OFFSET,0,(r._egr_el3_ram_control_6),1)
#define WRITE_EGR_EL3_RAM_CONTROL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_6r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_6r_OFFSET,0,&(r._egr_el3_ram_control_6),1)
#define WRITE_EGR_EL3_RAM_CONTROL_6r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_6r_BLKACC,2,-1,0,EGR_EL3_RAM_CONTROL_6r_OFFSET,0,&(r._egr_el3_ram_control_6),1)

/*******************************************************************************
 * End of 'EGR_EL3_RAM_CONTROL_6r'
 */




/*******************************************************************************
 * REGISTER:  EGR_EL3_RAM_CONTROL_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_EL3_RAM_CONTROL_64.
 */
#define READ_EGR_EL3_RAM_CONTROL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_EL3_RAM_CONTROL_64r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_64r_OFFSET,0,(r._egr_el3_ram_control_64),2)
#define WRITE_EGR_EL3_RAM_CONTROL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_64r_BLKACC,2,n,0,EGR_EL3_RAM_CONTROL_64r_OFFSET,0,&(r._egr_el3_ram_control_64),2)
#define WRITE_EGR_EL3_RAM_CONTROL_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_EL3_RAM_CONTROL_64r_BLKACC,2,-1,0,EGR_EL3_RAM_CONTROL_64r_OFFSET,0,&(r._egr_el3_ram_control_64),2)

/*******************************************************************************
 * End of 'EGR_EL3_RAM_CONTROL_64r'
 */




/*******************************************************************************
 * MEMORY:  EGR_EM_MTP_INDEX
 * BLOCKS:   EPIPE
 * SIZE:     27
 */
/*
 * These macros can be used to access EGR_EM_MTP_INDEX.
 */
#define READ_EGR_EM_MTP_INDEXm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_EM_MTP_INDEXm_BLKACC)+2,EGR_EM_MTP_INDEXm_OFFSET+i,(m._egr_em_mtp_index),1)
#define WRITE_EGR_EM_MTP_INDEXm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_EM_MTP_INDEXm_BLKACC)+2,EGR_EM_MTP_INDEXm_OFFSET+i,&(m._egr_em_mtp_index),1)

/*******************************************************************************
 * End of 'EGR_EM_MTP_INDEXm'
 */




/*******************************************************************************
 * MEMORY:  EGR_ENABLE
 * BLOCKS:   EPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access EGR_ENABLE.
 */
#define READ_EGR_ENABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_ENABLEm_BLKACC)+2,EGR_ENABLEm_OFFSET+i,(m._egr_enable),1)
#define WRITE_EGR_ENABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_ENABLEm_BLKACC)+2,EGR_ENABLEm_OFFSET+i,&(m._egr_enable),1)

/*******************************************************************************
 * End of 'EGR_ENABLEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_EPMOD_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_EPMOD_SER_CONTROL.
 */
#define READ_EGR_EPMOD_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_EPMOD_SER_CONTROLr_BLKACC,2,EGR_EPMOD_SER_CONTROLr_OFFSET,0,(r._egr_epmod_ser_control), 1)
#define WRITE_EGR_EPMOD_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_EPMOD_SER_CONTROLr_BLKACC,2,EGR_EPMOD_SER_CONTROLr_OFFSET,0,&(r._egr_epmod_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_EPMOD_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_ETAG_MULTICAST_RANGE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_ETAG_MULTICAST_RANGE.
 */
#define READ_EGR_ETAG_MULTICAST_RANGEr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_ETAG_MULTICAST_RANGEr_BLKACC,2,EGR_ETAG_MULTICAST_RANGEr_OFFSET,0,(r._egr_etag_multicast_range), 1)
#define WRITE_EGR_ETAG_MULTICAST_RANGEr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_ETAG_MULTICAST_RANGEr_BLKACC,2,EGR_ETAG_MULTICAST_RANGEr_OFFSET,0,&(r._egr_etag_multicast_range), 1)

/*******************************************************************************
 * End of 'EGR_ETAG_MULTICAST_RANGEr'
 */




/*******************************************************************************
 * MEMORY:  EGR_ETAG_PCP_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access EGR_ETAG_PCP_MAPPING.
 */
#define READ_EGR_ETAG_PCP_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_ETAG_PCP_MAPPINGm_BLKACC)+2,EGR_ETAG_PCP_MAPPINGm_OFFSET+i,(m._egr_etag_pcp_mapping),1)
#define WRITE_EGR_ETAG_PCP_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_ETAG_PCP_MAPPINGm_BLKACC)+2,EGR_ETAG_PCP_MAPPINGm_OFFSET+i,&(m._egr_etag_pcp_mapping),1)

/*******************************************************************************
 * End of 'EGR_ETAG_PCP_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEXIBLE_IPV6_EXT_HDR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEXIBLE_IPV6_EXT_HDR.
 */
#define READ_EGR_FLEXIBLE_IPV6_EXT_HDRr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEXIBLE_IPV6_EXT_HDRr_BLKACC,2,EGR_FLEXIBLE_IPV6_EXT_HDRr_OFFSET,0,(r._egr_flexible_ipv6_ext_hdr), 1)
#define WRITE_EGR_FLEXIBLE_IPV6_EXT_HDRr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEXIBLE_IPV6_EXT_HDRr_BLKACC,2,EGR_FLEXIBLE_IPV6_EXT_HDRr_OFFSET,0,&(r._egr_flexible_ipv6_ext_hdr), 1)

/*******************************************************************************
 * End of 'EGR_FLEXIBLE_IPV6_EXT_HDRr'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_COS_MAP
 * BLOCKS:   EPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COS_MAP.
 */
#define READ_EGR_FLEX_CTR_COS_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_COS_MAPm_BLKACC)+2,EGR_FLEX_CTR_COS_MAPm_OFFSET+i,(m._egr_flex_ctr_cos_map),1)
#define WRITE_EGR_FLEX_CTR_COS_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_COS_MAPm_BLKACC)+2,EGR_FLEX_CTR_COS_MAPm_OFFSET+i,&(m._egr_flex_ctr_cos_map),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COS_MAPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_COUNTER_TABLE_0
 * BLOCKS:   EPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_TABLE_0.
 */
#define READ_EGR_FLEX_CTR_COUNTER_TABLE_0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EGR_FLEX_CTR_COUNTER_TABLE_0m_BLKACC,2,n,0,EGR_FLEX_CTR_COUNTER_TABLE_0m_OFFSET,i,(m._egr_flex_ctr_counter_table_0),3)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_0m_BLKACC,2,n,0,EGR_FLEX_CTR_COUNTER_TABLE_0m_OFFSET,i,&(m._egr_flex_ctr_counter_table_0),3)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_0m_BLKACC,2,-1,0,EGR_FLEX_CTR_COUNTER_TABLE_0m_OFFSET,i,&(m._egr_flex_ctr_counter_table_0),3)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_TABLE_0m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_COUNTER_TABLE_1
 * BLOCKS:   EPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_TABLE_1.
 */
#define READ_EGR_FLEX_CTR_COUNTER_TABLE_1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EGR_FLEX_CTR_COUNTER_TABLE_1m_BLKACC,2,n,0,EGR_FLEX_CTR_COUNTER_TABLE_1m_OFFSET,i,(m._egr_flex_ctr_counter_table_1),3)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_1m_BLKACC,2,n,0,EGR_FLEX_CTR_COUNTER_TABLE_1m_OFFSET,i,&(m._egr_flex_ctr_counter_table_1),3)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_1m_BLKACC,2,-1,0,EGR_FLEX_CTR_COUNTER_TABLE_1m_OFFSET,i,&(m._egr_flex_ctr_counter_table_1),3)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_TABLE_1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_COUNTER_TABLE_2
 * BLOCKS:   EPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_TABLE_2.
 */
#define READ_EGR_FLEX_CTR_COUNTER_TABLE_2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EGR_FLEX_CTR_COUNTER_TABLE_2m_BLKACC,2,n,0,EGR_FLEX_CTR_COUNTER_TABLE_2m_OFFSET,i,(m._egr_flex_ctr_counter_table_2),3)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_2m_BLKACC,2,n,0,EGR_FLEX_CTR_COUNTER_TABLE_2m_OFFSET,i,&(m._egr_flex_ctr_counter_table_2),3)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_2m_BLKACC,2,-1,0,EGR_FLEX_CTR_COUNTER_TABLE_2m_OFFSET,i,&(m._egr_flex_ctr_counter_table_2),3)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_TABLE_2m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_COUNTER_TABLE_3
 * BLOCKS:   EPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_TABLE_3.
 */
#define READ_EGR_FLEX_CTR_COUNTER_TABLE_3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EGR_FLEX_CTR_COUNTER_TABLE_3m_BLKACC,2,n,0,EGR_FLEX_CTR_COUNTER_TABLE_3m_OFFSET,i,(m._egr_flex_ctr_counter_table_3),3)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_3m_BLKACC,2,n,0,EGR_FLEX_CTR_COUNTER_TABLE_3m_OFFSET,i,&(m._egr_flex_ctr_counter_table_3),3)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_3m_BLKACC,2,-1,0,EGR_FLEX_CTR_COUNTER_TABLE_3m_OFFSET,i,&(m._egr_flex_ctr_counter_table_3),3)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_TABLE_3m'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_0.
 */
#define READ_EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_0r_BLKACC,2,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_0r_OFFSET,0,(r._egr_flex_ctr_counter_table_control_0), 1)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_0r_BLKACC,2,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_0r_OFFSET,0,&(r._egr_flex_ctr_counter_table_control_0), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_1.
 */
#define READ_EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_1r_BLKACC,2,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_1r_OFFSET,0,(r._egr_flex_ctr_counter_table_control_1), 1)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_1r_BLKACC,2,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_1r_OFFSET,0,&(r._egr_flex_ctr_counter_table_control_1), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_2.
 */
#define READ_EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_2r_BLKACC,2,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_2r_OFFSET,0,(r._egr_flex_ctr_counter_table_control_2), 1)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_2r_BLKACC,2,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_2r_OFFSET,0,&(r._egr_flex_ctr_counter_table_control_2), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_3.
 */
#define READ_EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_3r_BLKACC,2,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_3r_OFFSET,0,(r._egr_flex_ctr_counter_table_control_3), 1)
#define WRITE_EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_3r_BLKACC,2,EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_3r_OFFSET,0,&(r._egr_flex_ctr_counter_table_control_3), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_TABLE_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL.
 */
#define READ_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROLr_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROLr_OFFSET,i,(r._egr_flex_ctr_counter_update_control), 1)
#define WRITE_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROLr_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROLr_OFFSET,i,&(r._egr_flex_ctr_counter_update_control), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_UPDATE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_0.
 */
#define READ_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r_OFFSET,0,(r._egr_flex_ctr_counter_update_control_0), 1)
#define WRITE_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r_OFFSET,0,&(r._egr_flex_ctr_counter_update_control_0), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_1.
 */
#define READ_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r_OFFSET,0,(r._egr_flex_ctr_counter_update_control_1), 1)
#define WRITE_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r_OFFSET,0,&(r._egr_flex_ctr_counter_update_control_1), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_2.
 */
#define READ_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r_OFFSET,0,(r._egr_flex_ctr_counter_update_control_2), 1)
#define WRITE_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r_OFFSET,0,&(r._egr_flex_ctr_counter_update_control_2), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_3.
 */
#define READ_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r_OFFSET,0,(r._egr_flex_ctr_counter_update_control_3), 1)
#define WRITE_EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r_BLKACC,2,EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r_OFFSET,0,&(r._egr_flex_ctr_counter_update_control_3), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_CONTROL_POOL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_CONTROL_POOL.
 */
#define READ_EGR_FLEX_CTR_EVICTION_CONTROL_POOLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOLr_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOLr_OFFSET,i,(r._egr_flex_ctr_eviction_control_pool),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOLr_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOLr_OFFSET,i,&(r._egr_flex_ctr_eviction_control_pool),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOLr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOLr_BLKACC,2,-1,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOLr_OFFSET,i,&(r._egr_flex_ctr_eviction_control_pool),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_CONTROL_POOLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0.
 */
#define READ_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r_OFFSET,0,(r._egr_flex_ctr_eviction_control_pool_0),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r_OFFSET,0,&(r._egr_flex_ctr_eviction_control_pool_0),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r_BLKACC,2,-1,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r_OFFSET,0,&(r._egr_flex_ctr_eviction_control_pool_0),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_CONTROL_POOL_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1.
 */
#define READ_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r_OFFSET,0,(r._egr_flex_ctr_eviction_control_pool_1),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r_OFFSET,0,&(r._egr_flex_ctr_eviction_control_pool_1),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r_BLKACC,2,-1,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r_OFFSET,0,&(r._egr_flex_ctr_eviction_control_pool_1),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_CONTROL_POOL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2.
 */
#define READ_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r_OFFSET,0,(r._egr_flex_ctr_eviction_control_pool_2),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r_OFFSET,0,&(r._egr_flex_ctr_eviction_control_pool_2),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r_BLKACC,2,-1,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r_OFFSET,0,&(r._egr_flex_ctr_eviction_control_pool_2),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_CONTROL_POOL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3.
 */
#define READ_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r_OFFSET,0,(r._egr_flex_ctr_eviction_control_pool_3),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r_OFFSET,0,&(r._egr_flex_ctr_eviction_control_pool_3),1)
#define WRITE_EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r_BLKACC,2,-1,0,EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r_OFFSET,0,&(r._egr_flex_ctr_eviction_control_pool_3),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_CONTROL_POOL_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0.
 */
#define READ_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_OFFSET,0,(r._egr_flex_ctr_eviction_lfsr_seed_pool_0),2)
#define WRITE_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_OFFSET,0,&(r._egr_flex_ctr_eviction_lfsr_seed_pool_0),2)
#define WRITE_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_BLKACC,2,-1,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_OFFSET,0,&(r._egr_flex_ctr_eviction_lfsr_seed_pool_0),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1.
 */
#define READ_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_OFFSET,0,(r._egr_flex_ctr_eviction_lfsr_seed_pool_1),2)
#define WRITE_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_OFFSET,0,&(r._egr_flex_ctr_eviction_lfsr_seed_pool_1),2)
#define WRITE_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_BLKACC,2,-1,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_OFFSET,0,&(r._egr_flex_ctr_eviction_lfsr_seed_pool_1),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2.
 */
#define READ_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_OFFSET,0,(r._egr_flex_ctr_eviction_lfsr_seed_pool_2),2)
#define WRITE_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_OFFSET,0,&(r._egr_flex_ctr_eviction_lfsr_seed_pool_2),2)
#define WRITE_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_BLKACC,2,-1,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_OFFSET,0,&(r._egr_flex_ctr_eviction_lfsr_seed_pool_2),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3.
 */
#define READ_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_OFFSET,0,(r._egr_flex_ctr_eviction_lfsr_seed_pool_3),2)
#define WRITE_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_BLKACC,2,n,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_OFFSET,0,&(r._egr_flex_ctr_eviction_lfsr_seed_pool_3),2)
#define WRITE_EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_BLKACC,2,-1,0,EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_OFFSET,0,&(r._egr_flex_ctr_eviction_lfsr_seed_pool_3),2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_0
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_0.
 */
#define READ_EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r_BLKACC,2,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r_OFFSET,0,(r._egr_flex_ctr_eviction_threshold_pool_0), 2)
#define WRITE_EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r_BLKACC,2,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r_OFFSET,0,&(r._egr_flex_ctr_eviction_threshold_pool_0), 2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_1
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_1.
 */
#define READ_EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r_BLKACC,2,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r_OFFSET,0,(r._egr_flex_ctr_eviction_threshold_pool_1), 2)
#define WRITE_EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r_BLKACC,2,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r_OFFSET,0,&(r._egr_flex_ctr_eviction_threshold_pool_1), 2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_2
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_2.
 */
#define READ_EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r_BLKACC,2,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r_OFFSET,0,(r._egr_flex_ctr_eviction_threshold_pool_2), 2)
#define WRITE_EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r_BLKACC,2,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r_OFFSET,0,&(r._egr_flex_ctr_eviction_threshold_pool_2), 2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_3
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_3.
 */
#define READ_EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r_BLKACC,2,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r_OFFSET,0,(r._egr_flex_ctr_eviction_threshold_pool_3), 2)
#define WRITE_EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r_BLKACC,2,EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r_OFFSET,0,&(r._egr_flex_ctr_eviction_threshold_pool_3), 2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_0
 * BLOCKS:   EPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_0.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_0m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_OFFSET_TABLE_0m_BLKACC)+2,EGR_FLEX_CTR_OFFSET_TABLE_0m_OFFSET+i,(m._egr_flex_ctr_offset_table_0),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_0m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_OFFSET_TABLE_0m_BLKACC)+2,EGR_FLEX_CTR_OFFSET_TABLE_0m_OFFSET+i,&(m._egr_flex_ctr_offset_table_0),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_0m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_1
 * BLOCKS:   EPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_1.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_OFFSET_TABLE_1m_BLKACC)+2,EGR_FLEX_CTR_OFFSET_TABLE_1m_OFFSET+i,(m._egr_flex_ctr_offset_table_1),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_OFFSET_TABLE_1m_BLKACC)+2,EGR_FLEX_CTR_OFFSET_TABLE_1m_OFFSET+i,&(m._egr_flex_ctr_offset_table_1),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_2
 * BLOCKS:   EPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_2.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_OFFSET_TABLE_2m_BLKACC)+2,EGR_FLEX_CTR_OFFSET_TABLE_2m_OFFSET+i,(m._egr_flex_ctr_offset_table_2),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_OFFSET_TABLE_2m_BLKACC)+2,EGR_FLEX_CTR_OFFSET_TABLE_2m_OFFSET+i,&(m._egr_flex_ctr_offset_table_2),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_2m'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_OFFSET_TABLE_3
 * BLOCKS:   EPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_3.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_3m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_OFFSET_TABLE_3m_BLKACC)+2,EGR_FLEX_CTR_OFFSET_TABLE_3m_OFFSET+i,(m._egr_flex_ctr_offset_table_3),1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_3m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_OFFSET_TABLE_3m_BLKACC)+2,EGR_FLEX_CTR_OFFSET_TABLE_3m_OFFSET+i,&(m._egr_flex_ctr_offset_table_3),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_3m'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0r_BLKACC,2,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_0), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0r_BLKACC,2,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_0), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1r_BLKACC,2,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_1), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1r_BLKACC,2,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_1), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2r_BLKACC,2,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_2), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2r_BLKACC,2,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_2), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_3.
 */
#define READ_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_3r_BLKACC,2,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_3r_OFFSET,0,(r._egr_flex_ctr_offset_table_control_3), 1)
#define WRITE_EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_3r_BLKACC,2,EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_3r_OFFSET,0,&(r._egr_flex_ctr_offset_table_control_3), 1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_OFFSET_TABLE_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEYr(u,i,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEYr_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEYr_OFFSET,i,(r._egr_flex_ctr_pkt_attr_selector_key), 2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEYr(u,i,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEYr_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEYr_OFFSET,i,&(r._egr_flex_ctr_pkt_attr_selector_key), 2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEYr'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_0), 2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_0), 2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_1), 2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_1), 2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_2), 2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_2), 2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3.
 */
#define READ_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r_OFFSET,0,(r._egr_flex_ctr_pkt_attr_selector_key_3), 2)
#define WRITE_EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r_BLKACC,2,EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r_OFFSET,0,&(r._egr_flex_ctr_pkt_attr_selector_key_3), 2)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_PKT_PRI_MAP
 * BLOCKS:   EPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_PRI_MAP.
 */
#define READ_EGR_FLEX_CTR_PKT_PRI_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_PKT_PRI_MAPm_BLKACC)+2,EGR_FLEX_CTR_PKT_PRI_MAPm_OFFSET+i,(m._egr_flex_ctr_pkt_pri_map),1)
#define WRITE_EGR_FLEX_CTR_PKT_PRI_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_PKT_PRI_MAPm_BLKACC)+2,EGR_FLEX_CTR_PKT_PRI_MAPm_OFFSET+i,&(m._egr_flex_ctr_pkt_pri_map),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_PRI_MAPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_PKT_RES_MAP
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PKT_RES_MAP.
 */
#define READ_EGR_FLEX_CTR_PKT_RES_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_PKT_RES_MAPm_BLKACC)+2,EGR_FLEX_CTR_PKT_RES_MAPm_OFFSET+i,(m._egr_flex_ctr_pkt_res_map),1)
#define WRITE_EGR_FLEX_CTR_PKT_RES_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_PKT_RES_MAPm_BLKACC)+2,EGR_FLEX_CTR_PKT_RES_MAPm_OFFSET+i,&(m._egr_flex_ctr_pkt_res_map),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PKT_RES_MAPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_PORT_MAP
 * BLOCKS:   EPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PORT_MAP.
 */
#define READ_EGR_FLEX_CTR_PORT_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_PORT_MAPm_BLKACC)+2,EGR_FLEX_CTR_PORT_MAPm_OFFSET+i,(m._egr_flex_ctr_port_map),1)
#define WRITE_EGR_FLEX_CTR_PORT_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_PORT_MAPm_BLKACC)+2,EGR_FLEX_CTR_PORT_MAPm_OFFSET+i,&(m._egr_flex_ctr_port_map),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PORT_MAPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_PRI_CNG_MAP
 * BLOCKS:   EPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_PRI_CNG_MAP.
 */
#define READ_EGR_FLEX_CTR_PRI_CNG_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_PRI_CNG_MAPm_BLKACC)+2,EGR_FLEX_CTR_PRI_CNG_MAPm_OFFSET+i,(m._egr_flex_ctr_pri_cng_map),1)
#define WRITE_EGR_FLEX_CTR_PRI_CNG_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_PRI_CNG_MAPm_BLKACC)+2,EGR_FLEX_CTR_PRI_CNG_MAPm_OFFSET+i,&(m._egr_flex_ctr_pri_cng_map),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_PRI_CNG_MAPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_FLEX_CTR_TOS_MAP
 * BLOCKS:   EPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access EGR_FLEX_CTR_TOS_MAP.
 */
#define READ_EGR_FLEX_CTR_TOS_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_TOS_MAPm_BLKACC)+2,EGR_FLEX_CTR_TOS_MAPm_OFFSET+i,(m._egr_flex_ctr_tos_map),1)
#define WRITE_EGR_FLEX_CTR_TOS_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_FLEX_CTR_TOS_MAPm_BLKACC)+2,EGR_FLEX_CTR_TOS_MAPm_OFFSET+i,&(m._egr_flex_ctr_tos_map),1)

/*******************************************************************************
 * End of 'EGR_FLEX_CTR_TOS_MAPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_FRAGMENT_ID_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access EGR_FRAGMENT_ID_TABLE.
 */
#define READ_EGR_FRAGMENT_ID_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EGR_FRAGMENT_ID_TABLEm_BLKACC,2,n,0,EGR_FRAGMENT_ID_TABLEm_OFFSET,i,(m._egr_fragment_id_table),1)
#define WRITE_EGR_FRAGMENT_ID_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FRAGMENT_ID_TABLEm_BLKACC,2,n,0,EGR_FRAGMENT_ID_TABLEm_OFFSET,i,&(m._egr_fragment_id_table),1)
#define WRITE_EGR_FRAGMENT_ID_TABLEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_FRAGMENT_ID_TABLEm_BLKACC,2,-1,0,EGR_FRAGMENT_ID_TABLEm_OFFSET,i,&(m._egr_fragment_id_table),1)

/*******************************************************************************
 * End of 'EGR_FRAGMENT_ID_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_GPP_ATTRIBUTES
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_GPP_ATTRIBUTES.
 */
#define READ_EGR_GPP_ATTRIBUTESm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_GPP_ATTRIBUTESm_BLKACC)+2,EGR_GPP_ATTRIBUTESm_OFFSET+i,(m._egr_gpp_attributes),1)
#define WRITE_EGR_GPP_ATTRIBUTESm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_GPP_ATTRIBUTESm_BLKACC)+2,EGR_GPP_ATTRIBUTESm_OFFSET+i,&(m._egr_gpp_attributes),1)

/*******************************************************************************
 * End of 'EGR_GPP_ATTRIBUTESm'
 */




/*******************************************************************************
 * MEMORY:  EGR_GPP_ATTRIBUTES_MODBASE
 * BLOCKS:   EPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access EGR_GPP_ATTRIBUTES_MODBASE.
 */
#define READ_EGR_GPP_ATTRIBUTES_MODBASEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_GPP_ATTRIBUTES_MODBASEm_BLKACC)+2,EGR_GPP_ATTRIBUTES_MODBASEm_OFFSET+i,(m._egr_gpp_attributes_modbase),1)
#define WRITE_EGR_GPP_ATTRIBUTES_MODBASEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_GPP_ATTRIBUTES_MODBASEm_BLKACC)+2,EGR_GPP_ATTRIBUTES_MODBASEm_OFFSET+i,&(m._egr_gpp_attributes_modbase),1)

/*******************************************************************************
 * End of 'EGR_GPP_ATTRIBUTES_MODBASEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_HBFC_CNTAG_ETHERTYPE_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HBFC_CNTAG_ETHERTYPE_2.
 */
#define READ_EGR_HBFC_CNTAG_ETHERTYPE_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_HBFC_CNTAG_ETHERTYPE_2r_BLKACC,2,EGR_HBFC_CNTAG_ETHERTYPE_2r_OFFSET,0,(r._egr_hbfc_cntag_ethertype_2), 1)
#define WRITE_EGR_HBFC_CNTAG_ETHERTYPE_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_HBFC_CNTAG_ETHERTYPE_2r_BLKACC,2,EGR_HBFC_CNTAG_ETHERTYPE_2r_OFFSET,0,&(r._egr_hbfc_cntag_ethertype_2), 1)

/*******************************************************************************
 * End of 'EGR_HBFC_CNTAG_ETHERTYPE_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_HG_EH_CONTROL_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_HG_EH_CONTROL_64.
 */
#define READ_EGR_HG_EH_CONTROL_64r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_HG_EH_CONTROL_64r_BLKACC,2,EGR_HG_EH_CONTROL_64r_OFFSET,0,(r._egr_hg_eh_control_64), 2)
#define WRITE_EGR_HG_EH_CONTROL_64r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_HG_EH_CONTROL_64r_BLKACC,2,EGR_HG_EH_CONTROL_64r_OFFSET,0,&(r._egr_hg_eh_control_64), 2)

/*******************************************************************************
 * End of 'EGR_HG_EH_CONTROL_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_HG_HDR_PROT_STATUS_TX_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HG_HDR_PROT_STATUS_TX_CONTROL.
 */
#define READ_EGR_HG_HDR_PROT_STATUS_TX_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_HG_HDR_PROT_STATUS_TX_CONTROLr_BLKACC,2,EGR_HG_HDR_PROT_STATUS_TX_CONTROLr_OFFSET,0,(r._egr_hg_hdr_prot_status_tx_control), 1)
#define WRITE_EGR_HG_HDR_PROT_STATUS_TX_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_HG_HDR_PROT_STATUS_TX_CONTROLr_BLKACC,2,EGR_HG_HDR_PROT_STATUS_TX_CONTROLr_OFFSET,0,&(r._egr_hg_hdr_prot_status_tx_control), 1)

/*******************************************************************************
 * End of 'EGR_HG_HDR_PROT_STATUS_TX_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_HW_RESET_CONTROL_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HW_RESET_CONTROL_0.
 */
#define READ_EGR_HW_RESET_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_HW_RESET_CONTROL_0r_BLKACC,2,EGR_HW_RESET_CONTROL_0r_OFFSET,0,(r._egr_hw_reset_control_0), 1)
#define WRITE_EGR_HW_RESET_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_HW_RESET_CONTROL_0r_BLKACC,2,EGR_HW_RESET_CONTROL_0r_OFFSET,0,&(r._egr_hw_reset_control_0), 1)

/*******************************************************************************
 * End of 'EGR_HW_RESET_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_HW_RESET_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_HW_RESET_CONTROL_1.
 */
#define READ_EGR_HW_RESET_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_HW_RESET_CONTROL_1r_BLKACC,2,n,0,EGR_HW_RESET_CONTROL_1r_OFFSET,0,(r._egr_hw_reset_control_1),1)
#define WRITE_EGR_HW_RESET_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_HW_RESET_CONTROL_1r_BLKACC,2,n,0,EGR_HW_RESET_CONTROL_1r_OFFSET,0,&(r._egr_hw_reset_control_1),1)
#define WRITE_EGR_HW_RESET_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_HW_RESET_CONTROL_1r_BLKACC,2,-1,0,EGR_HW_RESET_CONTROL_1r_OFFSET,0,&(r._egr_hw_reset_control_1),1)

/*******************************************************************************
 * End of 'EGR_HW_RESET_CONTROL_1r'
 */




/*******************************************************************************
 * MEMORY:  EGR_IM_MTP_INDEX
 * BLOCKS:   EPIPE
 * SIZE:     27
 */
/*
 * These macros can be used to access EGR_IM_MTP_INDEX.
 */
#define READ_EGR_IM_MTP_INDEXm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IM_MTP_INDEXm_BLKACC)+2,EGR_IM_MTP_INDEXm_OFFSET+i,(m._egr_im_mtp_index),1)
#define WRITE_EGR_IM_MTP_INDEXm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IM_MTP_INDEXm_BLKACC)+2,EGR_IM_MTP_INDEXm_OFFSET+i,&(m._egr_im_mtp_index),1)

/*******************************************************************************
 * End of 'EGR_IM_MTP_INDEXm'
 */




/*******************************************************************************
 * REGISTER:  EGR_INGRESS_PORT_TPID_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INGRESS_PORT_TPID_SELECT.
 */
#define READ_EGR_INGRESS_PORT_TPID_SELECTr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_INGRESS_PORT_TPID_SELECTr_BLKACC,p,EGR_INGRESS_PORT_TPID_SELECTr_OFFSET,0,(r._egr_ingress_port_tpid_select), 1)
#define WRITE_EGR_INGRESS_PORT_TPID_SELECTr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_INGRESS_PORT_TPID_SELECTr_BLKACC,p,EGR_INGRESS_PORT_TPID_SELECTr_OFFSET,0,&(r._egr_ingress_port_tpid_select), 1)

/*******************************************************************************
 * End of 'EGR_INGRESS_PORT_TPID_SELECTr'
 */




/*******************************************************************************
 * MEMORY:  EGR_ING_PORT
 * BLOCKS:   EPIPE
 * SIZE:     9
 */
/*
 * These macros can be used to access EGR_ING_PORT.
 */
#define READ_EGR_ING_PORTm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_ING_PORTm_BLKACC)+2,EGR_ING_PORTm_OFFSET+i,(m._egr_ing_port),1)
#define WRITE_EGR_ING_PORTm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_ING_PORTm_BLKACC)+2,EGR_ING_PORTm_OFFSET+i,&(m._egr_ing_port),1)

/*******************************************************************************
 * End of 'EGR_ING_PORTm'
 */




/*******************************************************************************
 * REGISTER:  EGR_INTR_ENABLE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INTR_ENABLE.
 */
#define READ_EGR_INTR_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_INTR_ENABLEr_BLKACC,2,EGR_INTR_ENABLEr_OFFSET,0,(r._egr_intr_enable), 1)
#define WRITE_EGR_INTR_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_INTR_ENABLEr_BLKACC,2,EGR_INTR_ENABLEr_OFFSET,0,&(r._egr_intr_enable), 1)

/*******************************************************************************
 * End of 'EGR_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  EGR_INTR_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_INTR_STATUS.
 */
#define READ_EGR_INTR_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_INTR_STATUSr_BLKACC,2,n,0,EGR_INTR_STATUSr_OFFSET,0,(r._egr_intr_status),1)
#define WRITE_EGR_INTR_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_INTR_STATUSr_BLKACC,2,n,0,EGR_INTR_STATUSr_OFFSET,0,&(r._egr_intr_status),1)
#define WRITE_EGR_INTR_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_INTR_STATUSr_BLKACC,2,-1,0,EGR_INTR_STATUSr_OFFSET,0,&(r._egr_intr_status),1)

/*******************************************************************************
 * End of 'EGR_INTR_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  EGR_INT_CN_TO_IP_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access EGR_INT_CN_TO_IP_MAPPING.
 */
#define READ_EGR_INT_CN_TO_IP_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_INT_CN_TO_IP_MAPPINGm_BLKACC)+2,EGR_INT_CN_TO_IP_MAPPINGm_OFFSET+i,(m._egr_int_cn_to_ip_mapping),1)
#define WRITE_EGR_INT_CN_TO_IP_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_INT_CN_TO_IP_MAPPINGm_BLKACC)+2,EGR_INT_CN_TO_IP_MAPPINGm_OFFSET+i,&(m._egr_int_cn_to_ip_mapping),1)

/*******************************************************************************
 * End of 'EGR_INT_CN_TO_IP_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  EGR_INT_CN_UPDATE
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_INT_CN_UPDATE.
 */
#define READ_EGR_INT_CN_UPDATEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_INT_CN_UPDATEm_BLKACC)+2,EGR_INT_CN_UPDATEm_OFFSET+i,(m._egr_int_cn_update),1)
#define WRITE_EGR_INT_CN_UPDATEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_INT_CN_UPDATEm_BLKACC)+2,EGR_INT_CN_UPDATEm_OFFSET+i,&(m._egr_int_cn_update),1)

/*******************************************************************************
 * End of 'EGR_INT_CN_UPDATEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_IPMC
 * BLOCKS:   EPIPE
 * SIZE:     9
 */
/*
 * These macros can be used to access EGR_IPMC.
 */
#define READ_EGR_IPMCm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IPMCm_BLKACC)+2,EGR_IPMCm_OFFSET+i,(m._egr_ipmc),1)
#define WRITE_EGR_IPMCm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IPMCm_BLKACC)+2,EGR_IPMCm_OFFSET+i,&(m._egr_ipmc),1)

/*******************************************************************************
 * End of 'EGR_IPMCm'
 */




/*******************************************************************************
 * REGISTER:  EGR_IPMC_CFG2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_IPMC_CFG2.
 */
#define READ_EGR_IPMC_CFG2r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_IPMC_CFG2r_BLKACC,p,EGR_IPMC_CFG2r_OFFSET,0,(r._egr_ipmc_cfg2), 1)
#define WRITE_EGR_IPMC_CFG2r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_IPMC_CFG2r_BLKACC,p,EGR_IPMC_CFG2r_OFFSET,0,&(r._egr_ipmc_cfg2), 1)

/*******************************************************************************
 * End of 'EGR_IPMC_CFG2r'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_CUT_THRU_CLASS
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_IP_CUT_THRU_CLASS.
 */
#define READ_EGR_IP_CUT_THRU_CLASSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_CUT_THRU_CLASSm_BLKACC)+2,EGR_IP_CUT_THRU_CLASSm_OFFSET+i,(m._egr_ip_cut_thru_class),1)
#define WRITE_EGR_IP_CUT_THRU_CLASSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_CUT_THRU_CLASSm_BLKACC)+2,EGR_IP_CUT_THRU_CLASSm_OFFSET+i,&(m._egr_ip_cut_thru_class),1)

/*******************************************************************************
 * End of 'EGR_IP_CUT_THRU_CLASSm'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_TO_INT_CN_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access EGR_IP_TO_INT_CN_MAPPING.
 */
#define READ_EGR_IP_TO_INT_CN_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_TO_INT_CN_MAPPINGm_BLKACC)+2,EGR_IP_TO_INT_CN_MAPPINGm_OFFSET+i,(m._egr_ip_to_int_cn_mapping),1)
#define WRITE_EGR_IP_TO_INT_CN_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_TO_INT_CN_MAPPINGm_BLKACC)+2,EGR_IP_TO_INT_CN_MAPPINGm_OFFSET+i,&(m._egr_ip_to_int_cn_mapping),1)

/*******************************************************************************
 * End of 'EGR_IP_TO_INT_CN_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_TUNNEL
 * BLOCKS:   EPIPE
 * SIZE:     244
 */
/*
 * These macros can be used to access EGR_IP_TUNNEL.
 */
#define READ_EGR_IP_TUNNELm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_TUNNELm_BLKACC)+2,EGR_IP_TUNNELm_OFFSET+i,(m._egr_ip_tunnel),8)
#define WRITE_EGR_IP_TUNNELm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_TUNNELm_BLKACC)+2,EGR_IP_TUNNELm_OFFSET+i,&(m._egr_ip_tunnel),8)

/*******************************************************************************
 * End of 'EGR_IP_TUNNELm'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_TUNNEL_IPV6
 * BLOCKS:   EPIPE
 * SIZE:     488
 */
/*
 * These macros can be used to access EGR_IP_TUNNEL_IPV6.
 */
#define READ_EGR_IP_TUNNEL_IPV6m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_TUNNEL_IPV6m_BLKACC)+2,EGR_IP_TUNNEL_IPV6m_OFFSET+i,(m._egr_ip_tunnel_ipv6),16)
#define WRITE_EGR_IP_TUNNEL_IPV6m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_TUNNEL_IPV6m_BLKACC)+2,EGR_IP_TUNNEL_IPV6m_OFFSET+i,&(m._egr_ip_tunnel_ipv6),16)

/*******************************************************************************
 * End of 'EGR_IP_TUNNEL_IPV6m'
 */




/*******************************************************************************
 * MEMORY:  EGR_IP_TUNNEL_MPLS
 * BLOCKS:   EPIPE
 * SIZE:     244
 */
/*
 * These macros can be used to access EGR_IP_TUNNEL_MPLS.
 */
#define READ_EGR_IP_TUNNEL_MPLSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_TUNNEL_MPLSm_BLKACC)+2,EGR_IP_TUNNEL_MPLSm_OFFSET+i,(m._egr_ip_tunnel_mpls),8)
#define WRITE_EGR_IP_TUNNEL_MPLSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_IP_TUNNEL_MPLSm_BLKACC)+2,EGR_IP_TUNNEL_MPLSm_OFFSET+i,&(m._egr_ip_tunnel_mpls),8)

/*******************************************************************************
 * End of 'EGR_IP_TUNNEL_MPLSm'
 */




/*******************************************************************************
 * REGISTER:  EGR_L1_CLK_RECOVERY_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_L1_CLK_RECOVERY_CTRL.
 */
#define READ_EGR_L1_CLK_RECOVERY_CTRLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_L1_CLK_RECOVERY_CTRLr_BLKACC,2,EGR_L1_CLK_RECOVERY_CTRLr_OFFSET,0,(r._egr_l1_clk_recovery_ctrl), 1)
#define WRITE_EGR_L1_CLK_RECOVERY_CTRLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_L1_CLK_RECOVERY_CTRLr_BLKACC,2,EGR_L1_CLK_RECOVERY_CTRLr_OFFSET,0,&(r._egr_l1_clk_recovery_ctrl), 1)

/*******************************************************************************
 * End of 'EGR_L1_CLK_RECOVERY_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_L2GRE_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_L2GRE_CONTROL.
 */
#define READ_EGR_L2GRE_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_L2GRE_CONTROLr_BLKACC,2,EGR_L2GRE_CONTROLr_OFFSET,0,(r._egr_l2gre_control), 1)
#define WRITE_EGR_L2GRE_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_L2GRE_CONTROLr_BLKACC,2,EGR_L2GRE_CONTROLr_OFFSET,0,&(r._egr_l2gre_control), 1)

/*******************************************************************************
 * End of 'EGR_L2GRE_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_L3_INTF
 * BLOCKS:   EPIPE
 * SIZE:     144
 */
/*
 * These macros can be used to access EGR_L3_INTF.
 */
#define READ_EGR_L3_INTFm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_L3_INTFm_BLKACC)+2,EGR_L3_INTFm_OFFSET+i,(m._egr_l3_intf),5)
#define WRITE_EGR_L3_INTFm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_L3_INTFm_BLKACC)+2,EGR_L3_INTFm_OFFSET+i,&(m._egr_l3_intf),5)

/*******************************************************************************
 * End of 'EGR_L3_INTFm'
 */




/*******************************************************************************
 * MEMORY:  EGR_L3_NEXT_HOP
 * BLOCKS:   EPIPE
 * SIZE:     144
 */
/*
 * These macros can be used to access EGR_L3_NEXT_HOP.
 */
#define READ_EGR_L3_NEXT_HOPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_L3_NEXT_HOPm_BLKACC)+2,EGR_L3_NEXT_HOPm_OFFSET+i,(m._egr_l3_next_hop),5)
#define WRITE_EGR_L3_NEXT_HOPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_L3_NEXT_HOPm_BLKACC)+2,EGR_L3_NEXT_HOPm_OFFSET+i,&(m._egr_l3_next_hop),5)

/*******************************************************************************
 * End of 'EGR_L3_NEXT_HOPm'
 */




/*******************************************************************************
 * REGISTER:  EGR_L3_TUNNEL_PFM_VID
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_L3_TUNNEL_PFM_VID.
 */
#define READ_EGR_L3_TUNNEL_PFM_VIDr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_L3_TUNNEL_PFM_VIDr_BLKACC,2,EGR_L3_TUNNEL_PFM_VIDr_OFFSET,0,(r._egr_l3_tunnel_pfm_vid), 1)
#define WRITE_EGR_L3_TUNNEL_PFM_VIDr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_L3_TUNNEL_PFM_VIDr_BLKACC,2,EGR_L3_TUNNEL_PFM_VIDr_OFFSET,0,&(r._egr_l3_tunnel_pfm_vid), 1)

/*******************************************************************************
 * End of 'EGR_L3_TUNNEL_PFM_VIDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_LATENCY_MODE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_LATENCY_MODE.
 */
#define READ_EGR_LATENCY_MODEr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_LATENCY_MODEr_BLKACC,2,EGR_LATENCY_MODEr_OFFSET,0,(r._egr_latency_mode), 1)
#define WRITE_EGR_LATENCY_MODEr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_LATENCY_MODEr_BLKACC,2,EGR_LATENCY_MODEr_OFFSET,0,&(r._egr_latency_mode), 1)

/*******************************************************************************
 * End of 'EGR_LATENCY_MODEr'
 */




/*******************************************************************************
 * MEMORY:  EGR_MACDA_OUI_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     24
 */
/*
 * These macros can be used to access EGR_MACDA_OUI_PROFILE.
 */
#define READ_EGR_MACDA_OUI_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MACDA_OUI_PROFILEm_BLKACC)+2,EGR_MACDA_OUI_PROFILEm_OFFSET+i,(m._egr_macda_oui_profile),1)
#define WRITE_EGR_MACDA_OUI_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MACDA_OUI_PROFILEm_BLKACC)+2,EGR_MACDA_OUI_PROFILEm_OFFSET+i,&(m._egr_macda_oui_profile),1)

/*******************************************************************************
 * End of 'EGR_MACDA_OUI_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MAC_DA_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     49
 */
/*
 * These macros can be used to access EGR_MAC_DA_PROFILE.
 */
#define READ_EGR_MAC_DA_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MAC_DA_PROFILEm_BLKACC)+2,EGR_MAC_DA_PROFILEm_OFFSET+i,(m._egr_mac_da_profile),2)
#define WRITE_EGR_MAC_DA_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MAC_DA_PROFILEm_BLKACC)+2,EGR_MAC_DA_PROFILEm_OFFSET+i,&(m._egr_mac_da_profile),2)

/*******************************************************************************
 * End of 'EGR_MAC_DA_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MAP_MH
 * BLOCKS:   EPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access EGR_MAP_MH.
 */
#define READ_EGR_MAP_MHm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MAP_MHm_BLKACC)+2,EGR_MAP_MHm_OFFSET+i,(m._egr_map_mh),1)
#define WRITE_EGR_MAP_MHm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MAP_MHm_BLKACC)+2,EGR_MAP_MHm_OFFSET+i,&(m._egr_map_mh),1)

/*******************************************************************************
 * End of 'EGR_MAP_MHm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MASK
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access EGR_MASK.
 */
#define READ_EGR_MASKm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MASKm_BLKACC)+1,EGR_MASKm_OFFSET+i,(m._egr_mask),5)
#define WRITE_EGR_MASKm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MASKm_BLKACC)+1,EGR_MASKm_OFFSET+i,&(m._egr_mask),5)

/*******************************************************************************
 * End of 'EGR_MASKm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MASK_MODBASE
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access EGR_MASK_MODBASE.
 */
#define READ_EGR_MASK_MODBASEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MASK_MODBASEm_BLKACC)+1,EGR_MASK_MODBASEm_OFFSET+i,(m._egr_mask_modbase),1)
#define WRITE_EGR_MASK_MODBASEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MASK_MODBASEm_BLKACC)+1,EGR_MASK_MODBASEm_OFFSET+i,&(m._egr_mask_modbase),1)

/*******************************************************************************
 * End of 'EGR_MASK_MODBASEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MAX_USED_ENTRIES
 * BLOCKS:   EPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access EGR_MAX_USED_ENTRIES.
 */
#define READ_EGR_MAX_USED_ENTRIESm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MAX_USED_ENTRIESm_BLKACC)+2,EGR_MAX_USED_ENTRIESm_OFFSET+i,(m._egr_max_used_entries),1)
#define WRITE_EGR_MAX_USED_ENTRIESm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MAX_USED_ENTRIESm_BLKACC)+2,EGR_MAX_USED_ENTRIESm_OFFSET+i,&(m._egr_max_used_entries),1)

/*******************************************************************************
 * End of 'EGR_MAX_USED_ENTRIESm'
 */




/*******************************************************************************
 * REGISTER:  EGR_MC_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MC_CONTROL_1.
 */
#define READ_EGR_MC_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_MC_CONTROL_1r_BLKACC,2,EGR_MC_CONTROL_1r_OFFSET,0,(r._egr_mc_control_1), 1)
#define WRITE_EGR_MC_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_MC_CONTROL_1r_BLKACC,2,EGR_MC_CONTROL_1r_OFFSET,0,&(r._egr_mc_control_1), 1)

/*******************************************************************************
 * End of 'EGR_MC_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_MC_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MC_CONTROL_2.
 */
#define READ_EGR_MC_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_MC_CONTROL_2r_BLKACC,2,EGR_MC_CONTROL_2r_OFFSET,0,(r._egr_mc_control_2), 1)
#define WRITE_EGR_MC_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_MC_CONTROL_2r_BLKACC,2,EGR_MC_CONTROL_2r_OFFSET,0,&(r._egr_mc_control_2), 1)

/*******************************************************************************
 * End of 'EGR_MC_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIM_ETHERTYPE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIM_ETHERTYPE.
 */
#define READ_EGR_MIM_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_MIM_ETHERTYPEr_BLKACC,2,EGR_MIM_ETHERTYPEr_OFFSET,0,(r._egr_mim_ethertype), 1)
#define WRITE_EGR_MIM_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_MIM_ETHERTYPEr_BLKACC,2,EGR_MIM_ETHERTYPEr_OFFSET,0,&(r._egr_mim_ethertype), 1)

/*******************************************************************************
 * End of 'EGR_MIM_ETHERTYPEr'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_ENCAP_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     7
 */
/*
 * These macros can be used to access EGR_MIRROR_ENCAP_CONTROL.
 */
#define READ_EGR_MIRROR_ENCAP_CONTROLm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MIRROR_ENCAP_CONTROLm_BLKACC)+2,EGR_MIRROR_ENCAP_CONTROLm_OFFSET+i,(m._egr_mirror_encap_control),1)
#define WRITE_EGR_MIRROR_ENCAP_CONTROLm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MIRROR_ENCAP_CONTROLm_BLKACC)+2,EGR_MIRROR_ENCAP_CONTROLm_OFFSET+i,&(m._egr_mirror_encap_control),1)

/*******************************************************************************
 * End of 'EGR_MIRROR_ENCAP_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_ENCAP_DATA_1
 * BLOCKS:   EPIPE
 * SIZE:     368
 */
/*
 * These macros can be used to access EGR_MIRROR_ENCAP_DATA_1.
 */
#define READ_EGR_MIRROR_ENCAP_DATA_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MIRROR_ENCAP_DATA_1m_BLKACC)+2,EGR_MIRROR_ENCAP_DATA_1m_OFFSET+i,(m._egr_mirror_encap_data_1),12)
#define WRITE_EGR_MIRROR_ENCAP_DATA_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MIRROR_ENCAP_DATA_1m_BLKACC)+2,EGR_MIRROR_ENCAP_DATA_1m_OFFSET+i,&(m._egr_mirror_encap_data_1),12)

/*******************************************************************************
 * End of 'EGR_MIRROR_ENCAP_DATA_1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_MIRROR_ENCAP_DATA_2
 * BLOCKS:   EPIPE
 * SIZE:     192
 */
/*
 * These macros can be used to access EGR_MIRROR_ENCAP_DATA_2.
 */
#define READ_EGR_MIRROR_ENCAP_DATA_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MIRROR_ENCAP_DATA_2m_BLKACC)+2,EGR_MIRROR_ENCAP_DATA_2m_OFFSET+i,(m._egr_mirror_encap_data_2),6)
#define WRITE_EGR_MIRROR_ENCAP_DATA_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MIRROR_ENCAP_DATA_2m_BLKACC)+2,EGR_MIRROR_ENCAP_DATA_2m_OFFSET+i,&(m._egr_mirror_encap_data_2),6)

/*******************************************************************************
 * End of 'EGR_MIRROR_ENCAP_DATA_2m'
 */




/*******************************************************************************
 * REGISTER:  EGR_MIRROR_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MIRROR_SELECT.
 */
#define READ_EGR_MIRROR_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_MIRROR_SELECTr_BLKACC,2,EGR_MIRROR_SELECTr_OFFSET,0,(r._egr_mirror_select), 1)
#define WRITE_EGR_MIRROR_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_MIRROR_SELECTr_BLKACC,2,EGR_MIRROR_SELECTr_OFFSET,0,&(r._egr_mirror_select), 1)

/*******************************************************************************
 * End of 'EGR_MIRROR_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  EGR_MISC_XMIT_START_COUNT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MISC_XMIT_START_COUNT.
 */
#define READ_EGR_MISC_XMIT_START_COUNTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_MISC_XMIT_START_COUNTr_BLKACC,2,n,0,EGR_MISC_XMIT_START_COUNTr_OFFSET,0,(r._egr_misc_xmit_start_count),1)
#define WRITE_EGR_MISC_XMIT_START_COUNTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_MISC_XMIT_START_COUNTr_BLKACC,2,n,0,EGR_MISC_XMIT_START_COUNTr_OFFSET,0,&(r._egr_misc_xmit_start_count),1)
#define WRITE_EGR_MISC_XMIT_START_COUNTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_MISC_XMIT_START_COUNTr_BLKACC,2,-1,0,EGR_MISC_XMIT_START_COUNTr_OFFSET,0,&(r._egr_misc_xmit_start_count),1)

/*******************************************************************************
 * End of 'EGR_MISC_XMIT_START_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  EGR_MMU_CELL_CREDIT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MMU_CELL_CREDIT.
 */
#define READ_EGR_MMU_CELL_CREDITr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_MMU_CELL_CREDITr_BLKACC,p,EGR_MMU_CELL_CREDITr_OFFSET,0,(r._egr_mmu_cell_credit), 1)
#define WRITE_EGR_MMU_CELL_CREDITr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_MMU_CELL_CREDITr_BLKACC,p,EGR_MMU_CELL_CREDITr_OFFSET,0,&(r._egr_mmu_cell_credit), 1)

/*******************************************************************************
 * End of 'EGR_MMU_CELL_CREDITr'
 */




/*******************************************************************************
 * MEMORY:  EGR_MMU_REQUESTS
 * BLOCKS:   EPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access EGR_MMU_REQUESTS.
 */
#define READ_EGR_MMU_REQUESTSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MMU_REQUESTSm_BLKACC)+2,EGR_MMU_REQUESTSm_OFFSET+i,(m._egr_mmu_requests),1)
#define WRITE_EGR_MMU_REQUESTSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MMU_REQUESTSm_BLKACC)+2,EGR_MMU_REQUESTSm_OFFSET+i,&(m._egr_mmu_requests),1)

/*******************************************************************************
 * End of 'EGR_MMU_REQUESTSm'
 */




/*******************************************************************************
 * REGISTER:  EGR_MODMAP_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MODMAP_CTRL.
 */
#define READ_EGR_MODMAP_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_MODMAP_CTRLr_BLKACC,p,EGR_MODMAP_CTRLr_OFFSET,0,(r._egr_modmap_ctrl), 1)
#define WRITE_EGR_MODMAP_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_MODMAP_CTRLr_BLKACC,p,EGR_MODMAP_CTRLr_OFFSET,0,&(r._egr_modmap_ctrl), 1)

/*******************************************************************************
 * End of 'EGR_MODMAP_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_MOD_MAP_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access EGR_MOD_MAP_TABLE.
 */
#define READ_EGR_MOD_MAP_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MOD_MAP_TABLEm_BLKACC)+2,EGR_MOD_MAP_TABLEm_OFFSET+i,(m._egr_mod_map_table),1)
#define WRITE_EGR_MOD_MAP_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MOD_MAP_TABLEm_BLKACC)+2,EGR_MOD_MAP_TABLEm_OFFSET+i,&(m._egr_mod_map_table),1)

/*******************************************************************************
 * End of 'EGR_MOD_MAP_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MPLS_EXP_MAPPING_1
 * BLOCKS:   EPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access EGR_MPLS_EXP_MAPPING_1.
 */
#define READ_EGR_MPLS_EXP_MAPPING_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_EXP_MAPPING_1m_BLKACC)+2,EGR_MPLS_EXP_MAPPING_1m_OFFSET+i,(m._egr_mpls_exp_mapping_1),1)
#define WRITE_EGR_MPLS_EXP_MAPPING_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_EXP_MAPPING_1m_BLKACC)+2,EGR_MPLS_EXP_MAPPING_1m_OFFSET+i,&(m._egr_mpls_exp_mapping_1),1)

/*******************************************************************************
 * End of 'EGR_MPLS_EXP_MAPPING_1m'
 */




/*******************************************************************************
 * MEMORY:  EGR_MPLS_EXP_MAPPING_2
 * BLOCKS:   EPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access EGR_MPLS_EXP_MAPPING_2.
 */
#define READ_EGR_MPLS_EXP_MAPPING_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_EXP_MAPPING_2m_BLKACC)+2,EGR_MPLS_EXP_MAPPING_2m_OFFSET+i,(m._egr_mpls_exp_mapping_2),1)
#define WRITE_EGR_MPLS_EXP_MAPPING_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_EXP_MAPPING_2m_BLKACC)+2,EGR_MPLS_EXP_MAPPING_2m_OFFSET+i,&(m._egr_mpls_exp_mapping_2),1)

/*******************************************************************************
 * End of 'EGR_MPLS_EXP_MAPPING_2m'
 */




/*******************************************************************************
 * MEMORY:  EGR_MPLS_EXP_PRI_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access EGR_MPLS_EXP_PRI_MAPPING.
 */
#define READ_EGR_MPLS_EXP_PRI_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_EXP_PRI_MAPPINGm_BLKACC)+2,EGR_MPLS_EXP_PRI_MAPPINGm_OFFSET+i,(m._egr_mpls_exp_pri_mapping),1)
#define WRITE_EGR_MPLS_EXP_PRI_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_EXP_PRI_MAPPINGm_BLKACC)+2,EGR_MPLS_EXP_PRI_MAPPINGm_OFFSET+i,&(m._egr_mpls_exp_pri_mapping),1)

/*******************************************************************************
 * End of 'EGR_MPLS_EXP_PRI_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MPLS_PRI_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access EGR_MPLS_PRI_MAPPING.
 */
#define READ_EGR_MPLS_PRI_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_PRI_MAPPINGm_BLKACC)+2,EGR_MPLS_PRI_MAPPINGm_OFFSET+i,(m._egr_mpls_pri_mapping),1)
#define WRITE_EGR_MPLS_PRI_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_PRI_MAPPINGm_BLKACC)+2,EGR_MPLS_PRI_MAPPINGm_OFFSET+i,&(m._egr_mpls_pri_mapping),1)

/*******************************************************************************
 * End of 'EGR_MPLS_PRI_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  EGR_MPLS_VC_AND_SWAP_LABEL_TABLE
 * BLOCKS:   EPIPE
 * SIZE:     82
 */
/*
 * These macros can be used to access EGR_MPLS_VC_AND_SWAP_LABEL_TABLE.
 */
#define READ_EGR_MPLS_VC_AND_SWAP_LABEL_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_VC_AND_SWAP_LABEL_TABLEm_BLKACC)+2,EGR_MPLS_VC_AND_SWAP_LABEL_TABLEm_OFFSET+i,(m._egr_mpls_vc_and_swap_label_table),3)
#define WRITE_EGR_MPLS_VC_AND_SWAP_LABEL_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_MPLS_VC_AND_SWAP_LABEL_TABLEm_BLKACC)+2,EGR_MPLS_VC_AND_SWAP_LABEL_TABLEm_OFFSET+i,&(m._egr_mpls_vc_and_swap_label_table),3)

/*******************************************************************************
 * End of 'EGR_MPLS_VC_AND_SWAP_LABEL_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_MTU
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_MTU.
 */
#define READ_EGR_MTUr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_MTUr_BLKACC,p,EGR_MTUr_OFFSET,0,(r._egr_mtu), 1)
#define WRITE_EGR_MTUr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_MTUr_BLKACC,p,EGR_MTUr_OFFSET,0,&(r._egr_mtu), 1)

/*******************************************************************************
 * End of 'EGR_MTUr'
 */




/*******************************************************************************
 * MEMORY:  EGR_NAT_PACKET_EDIT_INFO
 * BLOCKS:   EPIPE
 * SIZE:     150
 */
/*
 * These macros can be used to access EGR_NAT_PACKET_EDIT_INFO.
 */
#define READ_EGR_NAT_PACKET_EDIT_INFOm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_NAT_PACKET_EDIT_INFOm_BLKACC)+2,EGR_NAT_PACKET_EDIT_INFOm_OFFSET+i,(m._egr_nat_packet_edit_info),5)
#define WRITE_EGR_NAT_PACKET_EDIT_INFOm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_NAT_PACKET_EDIT_INFOm_BLKACC)+2,EGR_NAT_PACKET_EDIT_INFOm_OFFSET+i,&(m._egr_nat_packet_edit_info),5)

/*******************************************************************************
 * End of 'EGR_NAT_PACKET_EDIT_INFOm'
 */




/*******************************************************************************
 * REGISTER:  EGR_NIV_CONFIG
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_NIV_CONFIG.
 */
#define READ_EGR_NIV_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_NIV_CONFIGr_BLKACC,2,EGR_NIV_CONFIGr_OFFSET,0,(r._egr_niv_config), 1)
#define WRITE_EGR_NIV_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_NIV_CONFIGr_BLKACC,2,EGR_NIV_CONFIGr_OFFSET,0,&(r._egr_niv_config), 1)

/*******************************************************************************
 * End of 'EGR_NIV_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_NIV_ETHERTYPE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_NIV_ETHERTYPE.
 */
#define READ_EGR_NIV_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_NIV_ETHERTYPEr_BLKACC,2,EGR_NIV_ETHERTYPEr_OFFSET,0,(r._egr_niv_ethertype), 1)
#define WRITE_EGR_NIV_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_NIV_ETHERTYPEr_BLKACC,2,EGR_NIV_ETHERTYPEr_OFFSET,0,&(r._egr_niv_ethertype), 1)

/*******************************************************************************
 * End of 'EGR_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  EGR_NIV_ETHERTYPE_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_NIV_ETHERTYPE_2.
 */
#define READ_EGR_NIV_ETHERTYPE_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_NIV_ETHERTYPE_2r_BLKACC,2,EGR_NIV_ETHERTYPE_2r_OFFSET,0,(r._egr_niv_ethertype_2), 1)
#define WRITE_EGR_NIV_ETHERTYPE_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_NIV_ETHERTYPE_2r_BLKACC,2,EGR_NIV_ETHERTYPE_2r_OFFSET,0,&(r._egr_niv_ethertype_2), 1)

/*******************************************************************************
 * End of 'EGR_NIV_ETHERTYPE_2r'
 */




/*******************************************************************************
 * MEMORY:  EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASS
 * BLOCKS:   EPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASS.
 */
#define READ_EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASSm_BLKACC)+2,EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASSm_OFFSET+i,(m._egr_outer_pri_cfi_mapping_for_bypass),1)
#define WRITE_EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASSm_BLKACC)+2,EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASSm_OFFSET+i,&(m._egr_outer_pri_cfi_mapping_for_bypass),1)

/*******************************************************************************
 * End of 'EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASSm'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID.
 */
#define READ_EGR_OUTER_TPIDr(u,i,r) bcmbd_cmicd_reg_block_read(u,EGR_OUTER_TPIDr_BLKACC,2,EGR_OUTER_TPIDr_OFFSET,i,(r._egr_outer_tpid), 1)
#define WRITE_EGR_OUTER_TPIDr(u,i,r) bcmbd_cmicd_reg_block_write(u,EGR_OUTER_TPIDr_BLKACC,2,EGR_OUTER_TPIDr_OFFSET,i,&(r._egr_outer_tpid), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID_0.
 */
#define READ_EGR_OUTER_TPID_0r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_OUTER_TPID_0r_BLKACC,2,EGR_OUTER_TPID_0r_OFFSET,0,(r._egr_outer_tpid_0), 1)
#define WRITE_EGR_OUTER_TPID_0r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_OUTER_TPID_0r_BLKACC,2,EGR_OUTER_TPID_0r_OFFSET,0,&(r._egr_outer_tpid_0), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID_1.
 */
#define READ_EGR_OUTER_TPID_1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_OUTER_TPID_1r_BLKACC,2,EGR_OUTER_TPID_1r_OFFSET,0,(r._egr_outer_tpid_1), 1)
#define WRITE_EGR_OUTER_TPID_1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_OUTER_TPID_1r_BLKACC,2,EGR_OUTER_TPID_1r_OFFSET,0,&(r._egr_outer_tpid_1), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID_2.
 */
#define READ_EGR_OUTER_TPID_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_OUTER_TPID_2r_BLKACC,2,EGR_OUTER_TPID_2r_OFFSET,0,(r._egr_outer_tpid_2), 1)
#define WRITE_EGR_OUTER_TPID_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_OUTER_TPID_2r_BLKACC,2,EGR_OUTER_TPID_2r_OFFSET,0,&(r._egr_outer_tpid_2), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_OUTER_TPID_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_OUTER_TPID_3.
 */
#define READ_EGR_OUTER_TPID_3r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_OUTER_TPID_3r_BLKACC,2,EGR_OUTER_TPID_3r_OFFSET,0,(r._egr_outer_tpid_3), 1)
#define WRITE_EGR_OUTER_TPID_3r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_OUTER_TPID_3r_BLKACC,2,EGR_OUTER_TPID_3r_OFFSET,0,&(r._egr_outer_tpid_3), 1)

/*******************************************************************************
 * End of 'EGR_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_PERQ_CNTR_UPDATE_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PERQ_CNTR_UPDATE_CONTROL.
 */
#define READ_EGR_PERQ_CNTR_UPDATE_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_PERQ_CNTR_UPDATE_CONTROLr_BLKACC,2,n,0,EGR_PERQ_CNTR_UPDATE_CONTROLr_OFFSET,0,(r._egr_perq_cntr_update_control),1)
#define WRITE_EGR_PERQ_CNTR_UPDATE_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PERQ_CNTR_UPDATE_CONTROLr_BLKACC,2,n,0,EGR_PERQ_CNTR_UPDATE_CONTROLr_OFFSET,0,&(r._egr_perq_cntr_update_control),1)
#define WRITE_EGR_PERQ_CNTR_UPDATE_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PERQ_CNTR_UPDATE_CONTROLr_BLKACC,2,-1,0,EGR_PERQ_CNTR_UPDATE_CONTROLr_OFFSET,0,&(r._egr_perq_cntr_update_control),1)

/*******************************************************************************
 * End of 'EGR_PERQ_CNTR_UPDATE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_PERQ_EVICTION_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PERQ_EVICTION_CONTROL.
 */
#define READ_EGR_PERQ_EVICTION_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_PERQ_EVICTION_CONTROLr_BLKACC,2,n,0,EGR_PERQ_EVICTION_CONTROLr_OFFSET,0,(r._egr_perq_eviction_control),1)
#define WRITE_EGR_PERQ_EVICTION_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PERQ_EVICTION_CONTROLr_BLKACC,2,n,0,EGR_PERQ_EVICTION_CONTROLr_OFFSET,0,&(r._egr_perq_eviction_control),1)
#define WRITE_EGR_PERQ_EVICTION_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PERQ_EVICTION_CONTROLr_BLKACC,2,-1,0,EGR_PERQ_EVICTION_CONTROLr_OFFSET,0,&(r._egr_perq_eviction_control),1)

/*******************************************************************************
 * End of 'EGR_PERQ_EVICTION_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_PERQ_EVICTION_SEED
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_PERQ_EVICTION_SEED.
 */
#define READ_EGR_PERQ_EVICTION_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_PERQ_EVICTION_SEEDr_BLKACC,2,n,0,EGR_PERQ_EVICTION_SEEDr_OFFSET,0,(r._egr_perq_eviction_seed),2)
#define WRITE_EGR_PERQ_EVICTION_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PERQ_EVICTION_SEEDr_BLKACC,2,n,0,EGR_PERQ_EVICTION_SEEDr_OFFSET,0,&(r._egr_perq_eviction_seed),2)
#define WRITE_EGR_PERQ_EVICTION_SEEDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PERQ_EVICTION_SEEDr_BLKACC,2,-1,0,EGR_PERQ_EVICTION_SEEDr_OFFSET,0,&(r._egr_perq_eviction_seed),2)

/*******************************************************************************
 * End of 'EGR_PERQ_EVICTION_SEEDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_PERQ_EVICTION_THRESHOLD
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_PERQ_EVICTION_THRESHOLD.
 */
#define READ_EGR_PERQ_EVICTION_THRESHOLDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_PERQ_EVICTION_THRESHOLDr_BLKACC,2,n,0,EGR_PERQ_EVICTION_THRESHOLDr_OFFSET,0,(r._egr_perq_eviction_threshold),2)
#define WRITE_EGR_PERQ_EVICTION_THRESHOLDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PERQ_EVICTION_THRESHOLDr_BLKACC,2,n,0,EGR_PERQ_EVICTION_THRESHOLDr_OFFSET,0,&(r._egr_perq_eviction_threshold),2)
#define WRITE_EGR_PERQ_EVICTION_THRESHOLDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PERQ_EVICTION_THRESHOLDr_BLKACC,2,-1,0,EGR_PERQ_EVICTION_THRESHOLDr_OFFSET,0,&(r._egr_perq_eviction_threshold),2)

/*******************************************************************************
 * End of 'EGR_PERQ_EVICTION_THRESHOLDr'
 */




/*******************************************************************************
 * MEMORY:  EGR_PERQ_XMT_COUNTERS
 * BLOCKS:   EPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access EGR_PERQ_XMT_COUNTERS.
 */
#define READ_EGR_PERQ_XMT_COUNTERSm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EGR_PERQ_XMT_COUNTERSm_BLKACC,2,n,0,EGR_PERQ_XMT_COUNTERSm_OFFSET,i,(m._egr_perq_xmt_counters),3)
#define WRITE_EGR_PERQ_XMT_COUNTERSm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_PERQ_XMT_COUNTERSm_BLKACC,2,n,0,EGR_PERQ_XMT_COUNTERSm_OFFSET,i,&(m._egr_perq_xmt_counters),3)
#define WRITE_EGR_PERQ_XMT_COUNTERSm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_PERQ_XMT_COUNTERSm_BLKACC,2,-1,0,EGR_PERQ_XMT_COUNTERSm_OFFSET,i,&(m._egr_perq_xmt_counters),3)

/*******************************************************************************
 * End of 'EGR_PERQ_XMT_COUNTERSm'
 */




/*******************************************************************************
 * MEMORY:  EGR_PER_PORT_BUFFER_SFT_RESET
 * BLOCKS:   EPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access EGR_PER_PORT_BUFFER_SFT_RESET.
 */
#define READ_EGR_PER_PORT_BUFFER_SFT_RESETm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PER_PORT_BUFFER_SFT_RESETm_BLKACC)+2,EGR_PER_PORT_BUFFER_SFT_RESETm_OFFSET+i,(m._egr_per_port_buffer_sft_reset),1)
#define WRITE_EGR_PER_PORT_BUFFER_SFT_RESETm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PER_PORT_BUFFER_SFT_RESETm_BLKACC)+2,EGR_PER_PORT_BUFFER_SFT_RESETm_OFFSET+i,&(m._egr_per_port_buffer_sft_reset),1)

/*******************************************************************************
 * End of 'EGR_PER_PORT_BUFFER_SFT_RESETm'
 */




/*******************************************************************************
 * REGISTER:  EGR_PE_ETHERTYPE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PE_ETHERTYPE.
 */
#define READ_EGR_PE_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_PE_ETHERTYPEr_BLKACC,2,EGR_PE_ETHERTYPEr_OFFSET,0,(r._egr_pe_ethertype), 1)
#define WRITE_EGR_PE_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_PE_ETHERTYPEr_BLKACC,2,EGR_PE_ETHERTYPEr_OFFSET,0,&(r._egr_pe_ethertype), 1)

/*******************************************************************************
 * End of 'EGR_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  EGR_PE_ETHERTYPE_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PE_ETHERTYPE_2.
 */
#define READ_EGR_PE_ETHERTYPE_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_PE_ETHERTYPE_2r_BLKACC,2,EGR_PE_ETHERTYPE_2r_OFFSET,0,(r._egr_pe_ethertype_2), 1)
#define WRITE_EGR_PE_ETHERTYPE_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_PE_ETHERTYPE_2r_BLKACC,2,EGR_PE_ETHERTYPE_2r_OFFSET,0,&(r._egr_pe_ethertype_2), 1)

/*******************************************************************************
 * End of 'EGR_PE_ETHERTYPE_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_PKT_MODS_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PKT_MODS_CONTROL.
 */
#define READ_EGR_PKT_MODS_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_PKT_MODS_CONTROLr_BLKACC,2,EGR_PKT_MODS_CONTROLr_OFFSET,0,(r._egr_pkt_mods_control), 1)
#define WRITE_EGR_PKT_MODS_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_PKT_MODS_CONTROLr_BLKACC,2,EGR_PKT_MODS_CONTROLr_OFFSET,0,&(r._egr_pkt_mods_control), 1)

/*******************************************************************************
 * End of 'EGR_PKT_MODS_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_PORT
 * BLOCKS:   EPIPE
 * SIZE:     108
 */
/*
 * These macros can be used to access EGR_PORT.
 */
#define READ_EGR_PORTm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PORTm_BLKACC)+2,EGR_PORTm_OFFSET+i,(m._egr_port),4)
#define WRITE_EGR_PORTm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PORTm_BLKACC)+2,EGR_PORTm_OFFSET+i,&(m._egr_port),4)

/*******************************************************************************
 * End of 'EGR_PORTm'
 */




/*******************************************************************************
 * REGISTER:  EGR_PORT_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PORT_1.
 */
#define READ_EGR_PORT_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_PORT_1r_BLKACC,p,EGR_PORT_1r_OFFSET,0,(r._egr_port_1), 1)
#define WRITE_EGR_PORT_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_PORT_1r_BLKACC,p,EGR_PORT_1r_OFFSET,0,&(r._egr_port_1), 1)

/*******************************************************************************
 * End of 'EGR_PORT_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_PORT_BUFFER_CLK_SHUTDOWN
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PORT_BUFFER_CLK_SHUTDOWN.
 */
#define READ_EGR_PORT_BUFFER_CLK_SHUTDOWNr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_PORT_BUFFER_CLK_SHUTDOWNr_BLKACC,2,n,0,EGR_PORT_BUFFER_CLK_SHUTDOWNr_OFFSET,0,(r._egr_port_buffer_clk_shutdown),1)
#define WRITE_EGR_PORT_BUFFER_CLK_SHUTDOWNr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PORT_BUFFER_CLK_SHUTDOWNr_BLKACC,2,n,0,EGR_PORT_BUFFER_CLK_SHUTDOWNr_OFFSET,0,&(r._egr_port_buffer_clk_shutdown),1)
#define WRITE_EGR_PORT_BUFFER_CLK_SHUTDOWNr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PORT_BUFFER_CLK_SHUTDOWNr_BLKACC,2,-1,0,EGR_PORT_BUFFER_CLK_SHUTDOWNr_OFFSET,0,&(r._egr_port_buffer_clk_shutdown),1)

/*******************************************************************************
 * End of 'EGR_PORT_BUFFER_CLK_SHUTDOWNr'
 */




/*******************************************************************************
 * REGISTER:  EGR_PORT_BUFFER_SFT_RESET_0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PORT_BUFFER_SFT_RESET_0.
 */
#define READ_EGR_PORT_BUFFER_SFT_RESET_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_PORT_BUFFER_SFT_RESET_0r_BLKACC,2,n,0,EGR_PORT_BUFFER_SFT_RESET_0r_OFFSET,0,(r._egr_port_buffer_sft_reset_0),1)
#define WRITE_EGR_PORT_BUFFER_SFT_RESET_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PORT_BUFFER_SFT_RESET_0r_BLKACC,2,n,0,EGR_PORT_BUFFER_SFT_RESET_0r_OFFSET,0,&(r._egr_port_buffer_sft_reset_0),1)
#define WRITE_EGR_PORT_BUFFER_SFT_RESET_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_PORT_BUFFER_SFT_RESET_0r_BLKACC,2,-1,0,EGR_PORT_BUFFER_SFT_RESET_0r_OFFSET,0,&(r._egr_port_buffer_sft_reset_0),1)

/*******************************************************************************
 * End of 'EGR_PORT_BUFFER_SFT_RESET_0r'
 */




/*******************************************************************************
 * MEMORY:  EGR_PORT_CREDIT_RESET
 * BLOCKS:   EPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access EGR_PORT_CREDIT_RESET.
 */
#define READ_EGR_PORT_CREDIT_RESETm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PORT_CREDIT_RESETm_BLKACC)+2,EGR_PORT_CREDIT_RESETm_OFFSET+i,(m._egr_port_credit_reset),1)
#define WRITE_EGR_PORT_CREDIT_RESETm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PORT_CREDIT_RESETm_BLKACC)+2,EGR_PORT_CREDIT_RESETm_OFFSET+i,&(m._egr_port_credit_reset),1)

/*******************************************************************************
 * End of 'EGR_PORT_CREDIT_RESETm'
 */




/*******************************************************************************
 * MEMORY:  EGR_PORT_REQUESTS
 * BLOCKS:   EPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access EGR_PORT_REQUESTS.
 */
#define READ_EGR_PORT_REQUESTSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PORT_REQUESTSm_BLKACC)+2,EGR_PORT_REQUESTSm_OFFSET+i,(m._egr_port_requests),1)
#define WRITE_EGR_PORT_REQUESTSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PORT_REQUESTSm_BLKACC)+2,EGR_PORT_REQUESTSm_OFFSET+i,&(m._egr_port_requests),1)

/*******************************************************************************
 * End of 'EGR_PORT_REQUESTSm'
 */




/*******************************************************************************
 * REGISTER:  EGR_PORT_TO_NHI_MAPPING
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PORT_TO_NHI_MAPPING.
 */
#define READ_EGR_PORT_TO_NHI_MAPPINGr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_PORT_TO_NHI_MAPPINGr_BLKACC,p,EGR_PORT_TO_NHI_MAPPINGr_OFFSET,0,(r._egr_port_to_nhi_mapping), 1)
#define WRITE_EGR_PORT_TO_NHI_MAPPINGr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_PORT_TO_NHI_MAPPINGr_BLKACC,p,EGR_PORT_TO_NHI_MAPPINGr_OFFSET,0,&(r._egr_port_to_nhi_mapping), 1)

/*******************************************************************************
 * End of 'EGR_PORT_TO_NHI_MAPPINGr'
 */




/*******************************************************************************
 * MEMORY:  EGR_PRI_CNG_MAP
 * BLOCKS:   EPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access EGR_PRI_CNG_MAP.
 */
#define READ_EGR_PRI_CNG_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PRI_CNG_MAPm_BLKACC)+2,EGR_PRI_CNG_MAPm_OFFSET+i,(m._egr_pri_cng_map),1)
#define WRITE_EGR_PRI_CNG_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_PRI_CNG_MAPm_BLKACC)+2,EGR_PRI_CNG_MAPm_OFFSET+i,&(m._egr_pri_cng_map),1)

/*******************************************************************************
 * End of 'EGR_PRI_CNG_MAPm'
 */




/*******************************************************************************
 * REGISTER:  EGR_PVLAN_EPORT_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_PVLAN_EPORT_CONTROL.
 */
#define READ_EGR_PVLAN_EPORT_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_PVLAN_EPORT_CONTROLr_BLKACC,p,EGR_PVLAN_EPORT_CONTROLr_OFFSET,0,(r._egr_pvlan_eport_control), 1)
#define WRITE_EGR_PVLAN_EPORT_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_PVLAN_EPORT_CONTROLr_BLKACC,p,EGR_PVLAN_EPORT_CONTROLr_OFFSET,0,&(r._egr_pvlan_eport_control), 1)

/*******************************************************************************
 * End of 'EGR_PVLAN_EPORT_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_PW_INIT_COUNTERS
 * BLOCKS:   EPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access EGR_PW_INIT_COUNTERS.
 */
#define READ_EGR_PW_INIT_COUNTERSm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EGR_PW_INIT_COUNTERSm_BLKACC,2,n,0,EGR_PW_INIT_COUNTERSm_OFFSET,i,(m._egr_pw_init_counters),1)
#define WRITE_EGR_PW_INIT_COUNTERSm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_PW_INIT_COUNTERSm_BLKACC,2,n,0,EGR_PW_INIT_COUNTERSm_OFFSET,i,&(m._egr_pw_init_counters),1)
#define WRITE_EGR_PW_INIT_COUNTERSm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_PW_INIT_COUNTERSm_BLKACC,2,-1,0,EGR_PW_INIT_COUNTERSm_OFFSET,i,&(m._egr_pw_init_counters),1)

/*******************************************************************************
 * End of 'EGR_PW_INIT_COUNTERSm'
 */




/*******************************************************************************
 * REGISTER:  EGR_QCN_CNTAG_ETHERTYPE
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_QCN_CNTAG_ETHERTYPE.
 */
#define READ_EGR_QCN_CNTAG_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_QCN_CNTAG_ETHERTYPEr_BLKACC,2,EGR_QCN_CNTAG_ETHERTYPEr_OFFSET,0,(r._egr_qcn_cntag_ethertype), 1)
#define WRITE_EGR_QCN_CNTAG_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_QCN_CNTAG_ETHERTYPEr_BLKACC,2,EGR_QCN_CNTAG_ETHERTYPEr_OFFSET,0,&(r._egr_qcn_cntag_ethertype), 1)

/*******************************************************************************
 * End of 'EGR_QCN_CNTAG_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  EGR_QCN_CNTAG_ETHERTYPE_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_QCN_CNTAG_ETHERTYPE_2.
 */
#define READ_EGR_QCN_CNTAG_ETHERTYPE_2r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_QCN_CNTAG_ETHERTYPE_2r_BLKACC,2,EGR_QCN_CNTAG_ETHERTYPE_2r_OFFSET,0,(r._egr_qcn_cntag_ethertype_2), 1)
#define WRITE_EGR_QCN_CNTAG_ETHERTYPE_2r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_QCN_CNTAG_ETHERTYPE_2r_BLKACC,2,EGR_QCN_CNTAG_ETHERTYPE_2r_OFFSET,0,&(r._egr_qcn_cntag_ethertype_2), 1)

/*******************************************************************************
 * End of 'EGR_QCN_CNTAG_ETHERTYPE_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_Q_BEGIN
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_Q_BEGIN.
 */
#define READ_EGR_Q_BEGINr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_Q_BEGINr_BLKACC,2,EGR_Q_BEGINr_OFFSET,0,(r._egr_q_begin), 1)
#define WRITE_EGR_Q_BEGINr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_Q_BEGINr_BLKACC,2,EGR_Q_BEGINr_OFFSET,0,&(r._egr_q_begin), 1)

/*******************************************************************************
 * End of 'EGR_Q_BEGINr'
 */




/*******************************************************************************
 * REGISTER:  EGR_Q_END
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_Q_END.
 */
#define READ_EGR_Q_ENDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_Q_ENDr_BLKACC,2,n,0,EGR_Q_ENDr_OFFSET,0,(r._egr_q_end),1)
#define WRITE_EGR_Q_ENDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_Q_ENDr_BLKACC,2,n,0,EGR_Q_ENDr_OFFSET,0,&(r._egr_q_end),1)
#define WRITE_EGR_Q_ENDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_Q_ENDr_BLKACC,2,-1,0,EGR_Q_ENDr_OFFSET,0,&(r._egr_q_end),1)

/*******************************************************************************
 * End of 'EGR_Q_ENDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SBS_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SBS_CONTROL.
 */
#define READ_EGR_SBS_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_SBS_CONTROLr_BLKACC,2,EGR_SBS_CONTROLr_OFFSET,0,(r._egr_sbs_control), 1)
#define WRITE_EGR_SBS_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_SBS_CONTROLr_BLKACC,2,EGR_SBS_CONTROLr_OFFSET,0,&(r._egr_sbs_control), 1)

/*******************************************************************************
 * End of 'EGR_SBS_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_SER_FIFO
 * BLOCKS:   EPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access EGR_SER_FIFO.
 */
#define READ_EGR_SER_FIFOm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EGR_SER_FIFOm_BLKACC,2,n,0,EGR_SER_FIFOm_OFFSET,i,(m._egr_ser_fifo),2)
#define WRITE_EGR_SER_FIFOm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_SER_FIFOm_BLKACC,2,n,0,EGR_SER_FIFOm_OFFSET,i,&(m._egr_ser_fifo),2)
#define WRITE_EGR_SER_FIFOm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_SER_FIFOm_BLKACC,2,-1,0,EGR_SER_FIFOm_OFFSET,i,&(m._egr_ser_fifo),2)

/*******************************************************************************
 * End of 'EGR_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  EGR_SER_FIFO_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SER_FIFO_CTRL.
 */
#define READ_EGR_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_SER_FIFO_CTRLr_BLKACC,2,n,0,EGR_SER_FIFO_CTRLr_OFFSET,0,(r._egr_ser_fifo_ctrl),1)
#define WRITE_EGR_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_SER_FIFO_CTRLr_BLKACC,2,n,0,EGR_SER_FIFO_CTRLr_OFFSET,0,&(r._egr_ser_fifo_ctrl),1)
#define WRITE_EGR_SER_FIFO_CTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_SER_FIFO_CTRLr_BLKACC,2,-1,0,EGR_SER_FIFO_CTRLr_OFFSET,0,&(r._egr_ser_fifo_ctrl),1)

/*******************************************************************************
 * End of 'EGR_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SER_FIFO_STATUS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SER_FIFO_STATUS.
 */
#define READ_EGR_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_SER_FIFO_STATUSr_BLKACC,2,n,0,EGR_SER_FIFO_STATUSr_OFFSET,0,(r._egr_ser_fifo_status),1)
#define WRITE_EGR_SER_FIFO_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_SER_FIFO_STATUSr_BLKACC,2,n,0,EGR_SER_FIFO_STATUSr_OFFSET,0,&(r._egr_ser_fifo_status),1)
#define WRITE_EGR_SER_FIFO_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_SER_FIFO_STATUSr_BLKACC,2,-1,0,EGR_SER_FIFO_STATUSr_OFFSET,0,&(r._egr_ser_fifo_status),1)

/*******************************************************************************
 * End of 'EGR_SER_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SFLOW_CPU_COS_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SFLOW_CPU_COS_CONFIG.
 */
#define READ_EGR_SFLOW_CPU_COS_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_SFLOW_CPU_COS_CONFIGr_BLKACC,1,EGR_SFLOW_CPU_COS_CONFIGr_OFFSET,0,(r._egr_sflow_cpu_cos_config), 1)
#define WRITE_EGR_SFLOW_CPU_COS_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_SFLOW_CPU_COS_CONFIGr_BLKACC,1,EGR_SFLOW_CPU_COS_CONFIGr_OFFSET,0,&(r._egr_sflow_cpu_cos_config), 1)

/*******************************************************************************
 * End of 'EGR_SFLOW_CPU_COS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SF_SRC_MODID_CHECK
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SF_SRC_MODID_CHECK.
 */
#define READ_EGR_SF_SRC_MODID_CHECKr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_SF_SRC_MODID_CHECKr_BLKACC,p,EGR_SF_SRC_MODID_CHECKr_OFFSET,0,(r._egr_sf_src_modid_check), 1)
#define WRITE_EGR_SF_SRC_MODID_CHECKr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_SF_SRC_MODID_CHECKr_BLKACC,p,EGR_SF_SRC_MODID_CHECKr_OFFSET,0,&(r._egr_sf_src_modid_check), 1)

/*******************************************************************************
 * End of 'EGR_SF_SRC_MODID_CHECKr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SHAPING_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SHAPING_CONTROL.
 */
#define READ_EGR_SHAPING_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_SHAPING_CONTROLr_BLKACC,p,EGR_SHAPING_CONTROLr_OFFSET,0,(r._egr_shaping_control), 1)
#define WRITE_EGR_SHAPING_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_SHAPING_CONTROLr_BLKACC,p,EGR_SHAPING_CONTROLr_OFFSET,0,&(r._egr_shaping_control), 1)

/*******************************************************************************
 * End of 'EGR_SHAPING_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SPECIAL_DROP_CTRL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SPECIAL_DROP_CTRL.
 */
#define READ_EGR_SPECIAL_DROP_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_SPECIAL_DROP_CTRLr_BLKACC,2,n,0,EGR_SPECIAL_DROP_CTRLr_OFFSET,0,(r._egr_special_drop_ctrl),1)
#define WRITE_EGR_SPECIAL_DROP_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_SPECIAL_DROP_CTRLr_BLKACC,2,n,0,EGR_SPECIAL_DROP_CTRLr_OFFSET,0,&(r._egr_special_drop_ctrl),1)
#define WRITE_EGR_SPECIAL_DROP_CTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_SPECIAL_DROP_CTRLr_BLKACC,2,-1,0,EGR_SPECIAL_DROP_CTRLr_OFFSET,0,&(r._egr_special_drop_ctrl),1)

/*******************************************************************************
 * End of 'EGR_SPECIAL_DROP_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_SPECIAL_DROP_CTRL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SPECIAL_DROP_CTRL_2.
 */
#define READ_EGR_SPECIAL_DROP_CTRL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_SPECIAL_DROP_CTRL_2r_BLKACC,2,n,0,EGR_SPECIAL_DROP_CTRL_2r_OFFSET,0,(r._egr_special_drop_ctrl_2),1)
#define WRITE_EGR_SPECIAL_DROP_CTRL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_SPECIAL_DROP_CTRL_2r_BLKACC,2,n,0,EGR_SPECIAL_DROP_CTRL_2r_OFFSET,0,&(r._egr_special_drop_ctrl_2),1)
#define WRITE_EGR_SPECIAL_DROP_CTRL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_SPECIAL_DROP_CTRL_2r_BLKACC,2,-1,0,EGR_SPECIAL_DROP_CTRL_2r_OFFSET,0,&(r._egr_special_drop_ctrl_2),1)

/*******************************************************************************
 * End of 'EGR_SPECIAL_DROP_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_SYS_RSVD_VID
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_SYS_RSVD_VID.
 */
#define READ_EGR_SYS_RSVD_VIDr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_SYS_RSVD_VIDr_BLKACC,2,EGR_SYS_RSVD_VIDr_OFFSET,0,(r._egr_sys_rsvd_vid), 1)
#define WRITE_EGR_SYS_RSVD_VIDr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_SYS_RSVD_VIDr_BLKACC,2,EGR_SYS_RSVD_VIDr_OFFSET,0,&(r._egr_sys_rsvd_vid), 1)

/*******************************************************************************
 * End of 'EGR_SYS_RSVD_VIDr'
 */




/*******************************************************************************
 * REGISTER:  EGR_TDM_ERR
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TDM_ERR.
 */
#define READ_EGR_TDM_ERRr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_TDM_ERRr_BLKACC,2,n,0,EGR_TDM_ERRr_OFFSET,0,(r._egr_tdm_err),1)
#define WRITE_EGR_TDM_ERRr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_TDM_ERRr_BLKACC,2,n,0,EGR_TDM_ERRr_OFFSET,0,&(r._egr_tdm_err),1)
#define WRITE_EGR_TDM_ERRr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_TDM_ERRr_BLKACC,2,-1,0,EGR_TDM_ERRr_OFFSET,0,&(r._egr_tdm_err),1)

/*******************************************************************************
 * End of 'EGR_TDM_ERRr'
 */




/*******************************************************************************
 * REGISTER:  EGR_TRILL_HEADER_ATTRIBUTES
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TRILL_HEADER_ATTRIBUTES.
 */
#define READ_EGR_TRILL_HEADER_ATTRIBUTESr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_TRILL_HEADER_ATTRIBUTESr_BLKACC,2,EGR_TRILL_HEADER_ATTRIBUTESr_OFFSET,0,(r._egr_trill_header_attributes), 1)
#define WRITE_EGR_TRILL_HEADER_ATTRIBUTESr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_TRILL_HEADER_ATTRIBUTESr_BLKACC,2,EGR_TRILL_HEADER_ATTRIBUTESr_OFFSET,0,&(r._egr_trill_header_attributes), 1)

/*******************************************************************************
 * End of 'EGR_TRILL_HEADER_ATTRIBUTESr'
 */




/*******************************************************************************
 * MEMORY:  EGR_TRILL_PARSE_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     131
 */
/*
 * These macros can be used to access EGR_TRILL_PARSE_CONTROL.
 */
#define READ_EGR_TRILL_PARSE_CONTROLm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TRILL_PARSE_CONTROLm_BLKACC)+2,EGR_TRILL_PARSE_CONTROLm_OFFSET+i,(m._egr_trill_parse_control),5)
#define WRITE_EGR_TRILL_PARSE_CONTROLm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TRILL_PARSE_CONTROLm_BLKACC)+2,EGR_TRILL_PARSE_CONTROLm_OFFSET+i,&(m._egr_trill_parse_control),5)

/*******************************************************************************
 * End of 'EGR_TRILL_PARSE_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  EGR_TRILL_PARSE_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     66
 */
/*
 * These macros can be used to access EGR_TRILL_PARSE_CONTROL_2.
 */
#define READ_EGR_TRILL_PARSE_CONTROL_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TRILL_PARSE_CONTROL_2m_BLKACC)+2,EGR_TRILL_PARSE_CONTROL_2m_OFFSET+i,(m._egr_trill_parse_control_2),3)
#define WRITE_EGR_TRILL_PARSE_CONTROL_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TRILL_PARSE_CONTROL_2m_BLKACC)+2,EGR_TRILL_PARSE_CONTROL_2m_OFFSET+i,&(m._egr_trill_parse_control_2),3)

/*******************************************************************************
 * End of 'EGR_TRILL_PARSE_CONTROL_2m'
 */




/*******************************************************************************
 * MEMORY:  EGR_TRILL_RBRIDGE_NICKNAMES
 * BLOCKS:   EPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access EGR_TRILL_RBRIDGE_NICKNAMES.
 */
#define READ_EGR_TRILL_RBRIDGE_NICKNAMESm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TRILL_RBRIDGE_NICKNAMESm_BLKACC)+2,EGR_TRILL_RBRIDGE_NICKNAMESm_OFFSET+i,(m._egr_trill_rbridge_nicknames),1)
#define WRITE_EGR_TRILL_RBRIDGE_NICKNAMESm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TRILL_RBRIDGE_NICKNAMESm_BLKACC)+2,EGR_TRILL_RBRIDGE_NICKNAMESm_OFFSET+i,&(m._egr_trill_rbridge_nicknames),1)

/*******************************************************************************
 * End of 'EGR_TRILL_RBRIDGE_NICKNAMESm'
 */




/*******************************************************************************
 * MEMORY:  EGR_TRILL_TREE_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     22
 */
/*
 * These macros can be used to access EGR_TRILL_TREE_PROFILE.
 */
#define READ_EGR_TRILL_TREE_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TRILL_TREE_PROFILEm_BLKACC)+2,EGR_TRILL_TREE_PROFILEm_OFFSET+i,(m._egr_trill_tree_profile),1)
#define WRITE_EGR_TRILL_TREE_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TRILL_TREE_PROFILEm_BLKACC)+2,EGR_TRILL_TREE_PROFILEm_OFFSET+i,&(m._egr_trill_tree_profile),1)

/*******************************************************************************
 * End of 'EGR_TRILL_TREE_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_TRILL_TX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_TRILL_TX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64.
 */
#define READ_EGR_TRILL_TX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_TRILL_TX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r_BLKACC,p,EGR_TRILL_TX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r_OFFSET,0,(r._egr_trill_tx_access_port_trill_pkts_discarded_64), 2)
#define WRITE_EGR_TRILL_TX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_TRILL_TX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r_BLKACC,p,EGR_TRILL_TX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r_OFFSET,0,&(r._egr_trill_tx_access_port_trill_pkts_discarded_64), 2)

/*******************************************************************************
 * End of 'EGR_TRILL_TX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_TRILL_TX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_TRILL_TX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64.
 */
#define READ_EGR_TRILL_TX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_TRILL_TX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r_BLKACC,p,EGR_TRILL_TX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r_OFFSET,0,(r._egr_trill_tx_network_port_non_trill_pkts_discarded_64), 2)
#define WRITE_EGR_TRILL_TX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_TRILL_TX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r_BLKACC,p,EGR_TRILL_TX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r_OFFSET,0,&(r._egr_trill_tx_network_port_non_trill_pkts_discarded_64), 2)

/*******************************************************************************
 * End of 'EGR_TRILL_TX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_TRILL_TX_PKTS_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_TRILL_TX_PKTS_64.
 */
#define READ_EGR_TRILL_TX_PKTS_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_TRILL_TX_PKTS_64r_BLKACC,p,EGR_TRILL_TX_PKTS_64r_OFFSET,0,(r._egr_trill_tx_pkts_64), 2)
#define WRITE_EGR_TRILL_TX_PKTS_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_TRILL_TX_PKTS_64r_BLKACC,p,EGR_TRILL_TX_PKTS_64r_OFFSET,0,&(r._egr_trill_tx_pkts_64), 2)

/*******************************************************************************
 * End of 'EGR_TRILL_TX_PKTS_64r'
 */




/*******************************************************************************
 * MEMORY:  EGR_TUNNEL_ECN_ENCAP
 * BLOCKS:   EPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access EGR_TUNNEL_ECN_ENCAP.
 */
#define READ_EGR_TUNNEL_ECN_ENCAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TUNNEL_ECN_ENCAPm_BLKACC)+2,EGR_TUNNEL_ECN_ENCAPm_OFFSET+i,(m._egr_tunnel_ecn_encap),1)
#define WRITE_EGR_TUNNEL_ECN_ENCAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TUNNEL_ECN_ENCAPm_BLKACC)+2,EGR_TUNNEL_ECN_ENCAPm_OFFSET+i,&(m._egr_tunnel_ecn_encap),1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_ECN_ENCAPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_TUNNEL_ECN_ENCAP_2
 * BLOCKS:   EPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access EGR_TUNNEL_ECN_ENCAP_2.
 */
#define READ_EGR_TUNNEL_ECN_ENCAP_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TUNNEL_ECN_ENCAP_2m_BLKACC)+2,EGR_TUNNEL_ECN_ENCAP_2m_OFFSET+i,(m._egr_tunnel_ecn_encap_2),1)
#define WRITE_EGR_TUNNEL_ECN_ENCAP_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_TUNNEL_ECN_ENCAP_2m_BLKACC)+2,EGR_TUNNEL_ECN_ENCAP_2m_OFFSET+i,&(m._egr_tunnel_ecn_encap_2),1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_ECN_ENCAP_2m'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_ID_MASK
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_ID_MASK.
 */
#define READ_EGR_TUNNEL_ID_MASKr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_TUNNEL_ID_MASKr_BLKACC,2,EGR_TUNNEL_ID_MASKr_OFFSET,0,(r._egr_tunnel_id_mask), 1)
#define WRITE_EGR_TUNNEL_ID_MASKr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_TUNNEL_ID_MASKr_BLKACC,2,EGR_TUNNEL_ID_MASKr_OFFSET,0,&(r._egr_tunnel_id_mask), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_ID_MASKr'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_PIMDR1_CFG0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_PIMDR1_CFG0.
 */
#define READ_EGR_TUNNEL_PIMDR1_CFG0r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_TUNNEL_PIMDR1_CFG0r_BLKACC,2,EGR_TUNNEL_PIMDR1_CFG0r_OFFSET,0,(r._egr_tunnel_pimdr1_cfg0), 1)
#define WRITE_EGR_TUNNEL_PIMDR1_CFG0r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_TUNNEL_PIMDR1_CFG0r_BLKACC,2,EGR_TUNNEL_PIMDR1_CFG0r_OFFSET,0,&(r._egr_tunnel_pimdr1_cfg0), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_PIMDR1_CFG0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_PIMDR1_CFG1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_PIMDR1_CFG1.
 */
#define READ_EGR_TUNNEL_PIMDR1_CFG1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_TUNNEL_PIMDR1_CFG1r_BLKACC,2,EGR_TUNNEL_PIMDR1_CFG1r_OFFSET,0,(r._egr_tunnel_pimdr1_cfg1), 1)
#define WRITE_EGR_TUNNEL_PIMDR1_CFG1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_TUNNEL_PIMDR1_CFG1r_BLKACC,2,EGR_TUNNEL_PIMDR1_CFG1r_OFFSET,0,&(r._egr_tunnel_pimdr1_cfg1), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_PIMDR1_CFG1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_PIMDR2_CFG0
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_PIMDR2_CFG0.
 */
#define READ_EGR_TUNNEL_PIMDR2_CFG0r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_TUNNEL_PIMDR2_CFG0r_BLKACC,2,EGR_TUNNEL_PIMDR2_CFG0r_OFFSET,0,(r._egr_tunnel_pimdr2_cfg0), 1)
#define WRITE_EGR_TUNNEL_PIMDR2_CFG0r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_TUNNEL_PIMDR2_CFG0r_BLKACC,2,EGR_TUNNEL_PIMDR2_CFG0r_OFFSET,0,&(r._egr_tunnel_pimdr2_cfg0), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_PIMDR2_CFG0r'
 */




/*******************************************************************************
 * REGISTER:  EGR_TUNNEL_PIMDR2_CFG1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_TUNNEL_PIMDR2_CFG1.
 */
#define READ_EGR_TUNNEL_PIMDR2_CFG1r(u,r) bcmbd_cmicd_reg_block_read(u,EGR_TUNNEL_PIMDR2_CFG1r_BLKACC,2,EGR_TUNNEL_PIMDR2_CFG1r_OFFSET,0,(r._egr_tunnel_pimdr2_cfg1), 1)
#define WRITE_EGR_TUNNEL_PIMDR2_CFG1r(u,r) bcmbd_cmicd_reg_block_write(u,EGR_TUNNEL_PIMDR2_CFG1r_BLKACC,2,EGR_TUNNEL_PIMDR2_CFG1r_OFFSET,0,&(r._egr_tunnel_pimdr2_cfg1), 1)

/*******************************************************************************
 * End of 'EGR_TUNNEL_PIMDR2_CFG1r'
 */




/*******************************************************************************
 * MEMORY:  EGR_VFI
 * BLOCKS:   EPIPE
 * SIZE:     20
 */
/*
 * These macros can be used to access EGR_VFI.
 */
#define READ_EGR_VFIm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VFIm_BLKACC)+2,EGR_VFIm_OFFSET+i,(m._egr_vfi),1)
#define WRITE_EGR_VFIm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VFIm_BLKACC)+2,EGR_VFIm_OFFSET+i,&(m._egr_vfi),1)

/*******************************************************************************
 * End of 'EGR_VFIm'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN
 * BLOCKS:   EPIPE
 * SIZE:     381
 */
/*
 * These macros can be used to access EGR_VLAN.
 */
#define READ_EGR_VLANm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLANm_BLKACC)+2,EGR_VLANm_OFFSET+i,(m._egr_vlan),12)
#define WRITE_EGR_VLANm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLANm_BLKACC)+2,EGR_VLANm_OFFSET+i,&(m._egr_vlan),12)

/*******************************************************************************
 * End of 'EGR_VLANm'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_CONTROL_1
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_CONTROL_1.
 */
#define READ_EGR_VLAN_CONTROL_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_VLAN_CONTROL_1r_BLKACC,p,EGR_VLAN_CONTROL_1r_OFFSET,0,(r._egr_vlan_control_1), 1)
#define WRITE_EGR_VLAN_CONTROL_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_VLAN_CONTROL_1r_BLKACC,p,EGR_VLAN_CONTROL_1r_OFFSET,0,&(r._egr_vlan_control_1), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_CONTROL_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_CONTROL_2.
 */
#define READ_EGR_VLAN_CONTROL_2r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_VLAN_CONTROL_2r_BLKACC,p,EGR_VLAN_CONTROL_2r_OFFSET,0,(r._egr_vlan_control_2), 1)
#define WRITE_EGR_VLAN_CONTROL_2r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_VLAN_CONTROL_2r_BLKACC,p,EGR_VLAN_CONTROL_2r_OFFSET,0,&(r._egr_vlan_control_2), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_CONTROL_3
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_CONTROL_3.
 */
#define READ_EGR_VLAN_CONTROL_3r(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_VLAN_CONTROL_3r_BLKACC,p,EGR_VLAN_CONTROL_3r_OFFSET,0,(r._egr_vlan_control_3), 1)
#define WRITE_EGR_VLAN_CONTROL_3r(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_VLAN_CONTROL_3r_BLKACC,p,EGR_VLAN_CONTROL_3r_OFFSET,0,&(r._egr_vlan_control_3), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_1_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_1_64.
 */
#define READ_EGR_VLAN_RAM_CONTROL_1_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_1_64r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_1_64r_OFFSET,0,(r._egr_vlan_ram_control_1_64),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_1_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_1_64r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_1_64r_OFFSET,0,&(r._egr_vlan_ram_control_1_64),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_1_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_1_64r_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_1_64r_OFFSET,0,&(r._egr_vlan_ram_control_1_64),2)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_1_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_2_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_2_64.
 */
#define READ_EGR_VLAN_RAM_CONTROL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_2_64r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_2_64r_OFFSET,0,(r._egr_vlan_ram_control_2_64),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_2_64r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_2_64r_OFFSET,0,&(r._egr_vlan_ram_control_2_64),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_2_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_2_64r_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_2_64r_OFFSET,0,&(r._egr_vlan_ram_control_2_64),2)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_2_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_3_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_3_64.
 */
#define READ_EGR_VLAN_RAM_CONTROL_3_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_3_64r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_3_64r_OFFSET,0,(r._egr_vlan_ram_control_3_64),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_3_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_3_64r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_3_64r_OFFSET,0,&(r._egr_vlan_ram_control_3_64),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_3_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_3_64r_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_3_64r_OFFSET,0,&(r._egr_vlan_ram_control_3_64),2)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_3_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_4_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_4_64.
 */
#define READ_EGR_VLAN_RAM_CONTROL_4_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_4_64r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_4_64r_OFFSET,0,(r._egr_vlan_ram_control_4_64),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_4_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_4_64r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_4_64r_OFFSET,0,&(r._egr_vlan_ram_control_4_64),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_4_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_4_64r_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_4_64r_OFFSET,0,&(r._egr_vlan_ram_control_4_64),2)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_4_64r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_5
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_5.
 */
#define READ_EGR_VLAN_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_5r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_5r_OFFSET,0,(r._egr_vlan_ram_control_5),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_5r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_5r_OFFSET,0,&(r._egr_vlan_ram_control_5),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_5r_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_5r_OFFSET,0,&(r._egr_vlan_ram_control_5),2)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_6
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_6.
 */
#define READ_EGR_VLAN_RAM_CONTROL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_6r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_6r_OFFSET,0,(r._egr_vlan_ram_control_6),1)
#define WRITE_EGR_VLAN_RAM_CONTROL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_6r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_6r_OFFSET,0,&(r._egr_vlan_ram_control_6),1)
#define WRITE_EGR_VLAN_RAM_CONTROL_6r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_6r_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_6r_OFFSET,0,&(r._egr_vlan_ram_control_6),1)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_6r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_7
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_7.
 */
#define READ_EGR_VLAN_RAM_CONTROL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_7r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_7r_OFFSET,0,(r._egr_vlan_ram_control_7),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_7r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_7r_OFFSET,0,&(r._egr_vlan_ram_control_7),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_7r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_7r_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_7r_OFFSET,0,&(r._egr_vlan_ram_control_7),2)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_7r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_8
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_8.
 */
#define READ_EGR_VLAN_RAM_CONTROL_8r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_8r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_8r_OFFSET,0,(r._egr_vlan_ram_control_8),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_8r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_8r_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_8r_OFFSET,0,&(r._egr_vlan_ram_control_8),2)
#define WRITE_EGR_VLAN_RAM_CONTROL_8r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_8r_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_8r_OFFSET,0,&(r._egr_vlan_ram_control_8),2)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_8r'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_PDAH
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_PDAH.
 */
#define READ_EGR_VLAN_RAM_CONTROL_PDAHr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_PDAHr_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_PDAHr_OFFSET,0,(r._egr_vlan_ram_control_pdah),1)
#define WRITE_EGR_VLAN_RAM_CONTROL_PDAHr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_PDAHr_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_PDAHr_OFFSET,0,&(r._egr_vlan_ram_control_pdah),1)
#define WRITE_EGR_VLAN_RAM_CONTROL_PDAHr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_PDAHr_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_PDAHr_OFFSET,0,&(r._egr_vlan_ram_control_pdah),1)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_PDAHr'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_RAM_CONTROL_PM
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_RAM_CONTROL_PM.
 */
#define READ_EGR_VLAN_RAM_CONTROL_PMr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EGR_VLAN_RAM_CONTROL_PMr_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_PMr_OFFSET,0,(r._egr_vlan_ram_control_pm),1)
#define WRITE_EGR_VLAN_RAM_CONTROL_PMr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_PMr_BLKACC,2,n,0,EGR_VLAN_RAM_CONTROL_PMr_OFFSET,0,&(r._egr_vlan_ram_control_pm),1)
#define WRITE_EGR_VLAN_RAM_CONTROL_PMr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EGR_VLAN_RAM_CONTROL_PMr_BLKACC,2,-1,0,EGR_VLAN_RAM_CONTROL_PMr_OFFSET,0,&(r._egr_vlan_ram_control_pm),1)

/*******************************************************************************
 * End of 'EGR_VLAN_RAM_CONTROL_PMr'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_SER_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_SER_CONTROL.
 */
#define READ_EGR_VLAN_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_VLAN_SER_CONTROLr_BLKACC,2,EGR_VLAN_SER_CONTROLr_OFFSET,0,(r._egr_vlan_ser_control), 1)
#define WRITE_EGR_VLAN_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_VLAN_SER_CONTROLr_BLKACC,2,EGR_VLAN_SER_CONTROLr_OFFSET,0,&(r._egr_vlan_ser_control), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_SER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN_STG
 * BLOCKS:   EPIPE
 * SIZE:     276
 */
/*
 * These macros can be used to access EGR_VLAN_STG.
 */
#define READ_EGR_VLAN_STGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_STGm_BLKACC)+2,EGR_VLAN_STGm_OFFSET+i,(m._egr_vlan_stg),9)
#define WRITE_EGR_VLAN_STGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_STGm_BLKACC)+2,EGR_VLAN_STGm_OFFSET+i,&(m._egr_vlan_stg),9)

/*******************************************************************************
 * End of 'EGR_VLAN_STGm'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_TAG_ACTION_FOR_BYPASS
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_TAG_ACTION_FOR_BYPASS.
 */
#define READ_EGR_VLAN_TAG_ACTION_FOR_BYPASSr(u,p,r) bcmbd_cmicd_reg_port_read(u,EGR_VLAN_TAG_ACTION_FOR_BYPASSr_BLKACC,p,EGR_VLAN_TAG_ACTION_FOR_BYPASSr_OFFSET,0,(r._egr_vlan_tag_action_for_bypass), 1)
#define WRITE_EGR_VLAN_TAG_ACTION_FOR_BYPASSr(u,p,r) bcmbd_cmicd_reg_port_write(u,EGR_VLAN_TAG_ACTION_FOR_BYPASSr_BLKACC,p,EGR_VLAN_TAG_ACTION_FOR_BYPASSr_OFFSET,0,&(r._egr_vlan_tag_action_for_bypass), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_TAG_ACTION_FOR_BYPASSr'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN_TAG_ACTION_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     90
 */
/*
 * These macros can be used to access EGR_VLAN_TAG_ACTION_PROFILE.
 */
#define READ_EGR_VLAN_TAG_ACTION_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_TAG_ACTION_PROFILEm_BLKACC)+2,EGR_VLAN_TAG_ACTION_PROFILEm_OFFSET+i,(m._egr_vlan_tag_action_profile),3)
#define WRITE_EGR_VLAN_TAG_ACTION_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_TAG_ACTION_PROFILEm_BLKACC)+2,EGR_VLAN_TAG_ACTION_PROFILEm_OFFSET+i,&(m._egr_vlan_tag_action_profile),3)

/*******************************************************************************
 * End of 'EGR_VLAN_TAG_ACTION_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN_XLATE
 * BLOCKS:   EPIPE
 * SIZE:     105
 */
/*
 * These macros can be used to access EGR_VLAN_XLATE.
 */
#define READ_EGR_VLAN_XLATEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_XLATEm_BLKACC)+2,EGR_VLAN_XLATEm_OFFSET+i,(m._egr_vlan_xlate),4)
#define WRITE_EGR_VLAN_XLATEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_XLATEm_BLKACC)+2,EGR_VLAN_XLATEm_OFFSET+i,&(m._egr_vlan_xlate),4)

/*******************************************************************************
 * End of 'EGR_VLAN_XLATEm'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_XLATE_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_XLATE_CONTROL.
 */
#define READ_EGR_VLAN_XLATE_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_VLAN_XLATE_CONTROLr_BLKACC,2,EGR_VLAN_XLATE_CONTROLr_OFFSET,0,(r._egr_vlan_xlate_control), 1)
#define WRITE_EGR_VLAN_XLATE_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_VLAN_XLATE_CONTROLr_BLKACC,2,EGR_VLAN_XLATE_CONTROLr_OFFSET,0,&(r._egr_vlan_xlate_control), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_XLATE_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN_XLATE_ECC
 * BLOCKS:   EPIPE
 * SIZE:     113
 */
/*
 * These macros can be used to access EGR_VLAN_XLATE_ECC.
 */
#define READ_EGR_VLAN_XLATE_ECCm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_XLATE_ECCm_BLKACC)+2,EGR_VLAN_XLATE_ECCm_OFFSET+i,(m._egr_vlan_xlate_ecc),4)
#define WRITE_EGR_VLAN_XLATE_ECCm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_XLATE_ECCm_BLKACC)+2,EGR_VLAN_XLATE_ECCm_OFFSET+i,&(m._egr_vlan_xlate_ecc),4)

/*******************************************************************************
 * End of 'EGR_VLAN_XLATE_ECCm'
 */




/*******************************************************************************
 * REGISTER:  EGR_VLAN_XLATE_HASH_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_XLATE_HASH_CONTROL.
 */
#define READ_EGR_VLAN_XLATE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_VLAN_XLATE_HASH_CONTROLr_BLKACC,2,EGR_VLAN_XLATE_HASH_CONTROLr_OFFSET,0,(r._egr_vlan_xlate_hash_control), 1)
#define WRITE_EGR_VLAN_XLATE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_VLAN_XLATE_HASH_CONTROLr_BLKACC,2,EGR_VLAN_XLATE_HASH_CONTROLr_OFFSET,0,&(r._egr_vlan_xlate_hash_control), 1)

/*******************************************************************************
 * End of 'EGR_VLAN_XLATE_HASH_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_VLAN_XLATE_LP
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VLAN_XLATE_LP.
 */
#define READ_EGR_VLAN_XLATE_LPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_XLATE_LPm_BLKACC)+2,EGR_VLAN_XLATE_LPm_OFFSET+i,(m._egr_vlan_xlate_lp),1)
#define WRITE_EGR_VLAN_XLATE_LPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VLAN_XLATE_LPm_BLKACC)+2,EGR_VLAN_XLATE_LPm_OFFSET+i,&(m._egr_vlan_xlate_lp),1)

/*******************************************************************************
 * End of 'EGR_VLAN_XLATE_LPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_VNTAG_ETAG_PROFILE
 * BLOCKS:   EPIPE
 * SIZE:     7
 */
/*
 * These macros can be used to access EGR_VNTAG_ETAG_PROFILE.
 */
#define READ_EGR_VNTAG_ETAG_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VNTAG_ETAG_PROFILEm_BLKACC)+2,EGR_VNTAG_ETAG_PROFILEm_OFFSET+i,(m._egr_vntag_etag_profile),1)
#define WRITE_EGR_VNTAG_ETAG_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VNTAG_ETAG_PROFILEm_BLKACC)+2,EGR_VNTAG_ETAG_PROFILEm_OFFSET+i,&(m._egr_vntag_etag_profile),1)

/*******************************************************************************
 * End of 'EGR_VNTAG_ETAG_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EGR_VPLAG_GROUP
 * BLOCKS:   EPIPE
 * SIZE:     40
 */
/*
 * These macros can be used to access EGR_VPLAG_GROUP.
 */
#define READ_EGR_VPLAG_GROUPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VPLAG_GROUPm_BLKACC)+2,EGR_VPLAG_GROUPm_OFFSET+i,(m._egr_vplag_group),2)
#define WRITE_EGR_VPLAG_GROUPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VPLAG_GROUPm_BLKACC)+2,EGR_VPLAG_GROUPm_OFFSET+i,&(m._egr_vplag_group),2)

/*******************************************************************************
 * End of 'EGR_VPLAG_GROUPm'
 */




/*******************************************************************************
 * MEMORY:  EGR_VPLAG_MEMBER
 * BLOCKS:   EPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access EGR_VPLAG_MEMBER.
 */
#define READ_EGR_VPLAG_MEMBERm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VPLAG_MEMBERm_BLKACC)+2,EGR_VPLAG_MEMBERm_OFFSET+i,(m._egr_vplag_member),1)
#define WRITE_EGR_VPLAG_MEMBERm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VPLAG_MEMBERm_BLKACC)+2,EGR_VPLAG_MEMBERm_OFFSET+i,&(m._egr_vplag_member),1)

/*******************************************************************************
 * End of 'EGR_VPLAG_MEMBERm'
 */




/*******************************************************************************
 * MEMORY:  EGR_VP_VLAN_MEMBERSHIP
 * BLOCKS:   EPIPE
 * SIZE:     33
 */
/*
 * These macros can be used to access EGR_VP_VLAN_MEMBERSHIP.
 */
#define READ_EGR_VP_VLAN_MEMBERSHIPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VP_VLAN_MEMBERSHIPm_BLKACC)+2,EGR_VP_VLAN_MEMBERSHIPm_OFFSET+i,(m._egr_vp_vlan_membership),2)
#define WRITE_EGR_VP_VLAN_MEMBERSHIPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VP_VLAN_MEMBERSHIPm_BLKACC)+2,EGR_VP_VLAN_MEMBERSHIPm_OFFSET+i,&(m._egr_vp_vlan_membership),2)

/*******************************************************************************
 * End of 'EGR_VP_VLAN_MEMBERSHIPm'
 */




/*******************************************************************************
 * REGISTER:  EGR_VP_VLAN_MEMBERSHIP_HASH_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_VP_VLAN_MEMBERSHIP_HASH_CONTROL.
 */
#define READ_EGR_VP_VLAN_MEMBERSHIP_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_VP_VLAN_MEMBERSHIP_HASH_CONTROLr_BLKACC,2,EGR_VP_VLAN_MEMBERSHIP_HASH_CONTROLr_OFFSET,0,(r._egr_vp_vlan_membership_hash_control), 1)
#define WRITE_EGR_VP_VLAN_MEMBERSHIP_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_VP_VLAN_MEMBERSHIP_HASH_CONTROLr_BLKACC,2,EGR_VP_VLAN_MEMBERSHIP_HASH_CONTROLr_OFFSET,0,&(r._egr_vp_vlan_membership_hash_control), 1)

/*******************************************************************************
 * End of 'EGR_VP_VLAN_MEMBERSHIP_HASH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  EGR_VXLAN_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VXLAN_CONTROL.
 */
#define READ_EGR_VXLAN_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_VXLAN_CONTROLr_BLKACC,2,EGR_VXLAN_CONTROLr_OFFSET,0,(r._egr_vxlan_control), 2)
#define WRITE_EGR_VXLAN_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_VXLAN_CONTROLr_BLKACC,2,EGR_VXLAN_CONTROLr_OFFSET,0,&(r._egr_vxlan_control), 2)

/*******************************************************************************
 * End of 'EGR_VXLAN_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_VXLT_ACTION_TABLE_A
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VXLT_ACTION_TABLE_A.
 */
#define READ_EGR_VXLT_ACTION_TABLE_Am(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VXLT_ACTION_TABLE_Am_BLKACC)+2,EGR_VXLT_ACTION_TABLE_Am_OFFSET+i,(m._egr_vxlt_action_table_a),2)
#define WRITE_EGR_VXLT_ACTION_TABLE_Am(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VXLT_ACTION_TABLE_Am_BLKACC)+2,EGR_VXLT_ACTION_TABLE_Am_OFFSET+i,&(m._egr_vxlt_action_table_a),2)

/*******************************************************************************
 * End of 'EGR_VXLT_ACTION_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  EGR_VXLT_ACTION_TABLE_B
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access EGR_VXLT_ACTION_TABLE_B.
 */
#define READ_EGR_VXLT_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VXLT_ACTION_TABLE_Bm_BLKACC)+2,EGR_VXLT_ACTION_TABLE_Bm_OFFSET+i,(m._egr_vxlt_action_table_b),2)
#define WRITE_EGR_VXLT_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VXLT_ACTION_TABLE_Bm_BLKACC)+2,EGR_VXLT_ACTION_TABLE_Bm_OFFSET+i,&(m._egr_vxlt_action_table_b),2)

/*******************************************************************************
 * End of 'EGR_VXLT_ACTION_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  EGR_VXLT_REMAP_TABLE_A
 * BLOCKS:   EPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access EGR_VXLT_REMAP_TABLE_A.
 */
#define READ_EGR_VXLT_REMAP_TABLE_Am(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VXLT_REMAP_TABLE_Am_BLKACC)+2,EGR_VXLT_REMAP_TABLE_Am_OFFSET+i,(m._egr_vxlt_remap_table_a),1)
#define WRITE_EGR_VXLT_REMAP_TABLE_Am(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VXLT_REMAP_TABLE_Am_BLKACC)+2,EGR_VXLT_REMAP_TABLE_Am_OFFSET+i,&(m._egr_vxlt_remap_table_a),1)

/*******************************************************************************
 * End of 'EGR_VXLT_REMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  EGR_VXLT_REMAP_TABLE_B
 * BLOCKS:   EPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access EGR_VXLT_REMAP_TABLE_B.
 */
#define READ_EGR_VXLT_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VXLT_REMAP_TABLE_Bm_BLKACC)+2,EGR_VXLT_REMAP_TABLE_Bm_OFFSET+i,(m._egr_vxlt_remap_table_b),1)
#define WRITE_EGR_VXLT_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EGR_VXLT_REMAP_TABLE_Bm_BLKACC)+2,EGR_VXLT_REMAP_TABLE_Bm_OFFSET+i,&(m._egr_vxlt_remap_table_b),1)

/*******************************************************************************
 * End of 'EGR_VXLT_REMAP_TABLE_Bm'
 */




/*******************************************************************************
 * REGISTER:  EGR_WESP_PROTO_CONTROL
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EGR_WESP_PROTO_CONTROL.
 */
#define READ_EGR_WESP_PROTO_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,EGR_WESP_PROTO_CONTROLr_BLKACC,2,EGR_WESP_PROTO_CONTROLr_OFFSET,0,(r._egr_wesp_proto_control), 1)
#define WRITE_EGR_WESP_PROTO_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,EGR_WESP_PROTO_CONTROLr_BLKACC,2,EGR_WESP_PROTO_CONTROLr_OFFSET,0,&(r._egr_wesp_proto_control), 1)

/*******************************************************************************
 * End of 'EGR_WESP_PROTO_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  EGR_XMIT_START_COUNT
 * BLOCKS:   EPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access EGR_XMIT_START_COUNT.
 */
#define READ_EGR_XMIT_START_COUNTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EGR_XMIT_START_COUNTm_BLKACC,2,n,0,EGR_XMIT_START_COUNTm_OFFSET,i,(m._egr_xmit_start_count),1)
#define WRITE_EGR_XMIT_START_COUNTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_XMIT_START_COUNTm_BLKACC,2,n,0,EGR_XMIT_START_COUNTm_OFFSET,i,&(m._egr_xmit_start_count),1)
#define WRITE_EGR_XMIT_START_COUNTm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EGR_XMIT_START_COUNTm_BLKACC,2,-1,0,EGR_XMIT_START_COUNTm_OFFSET,i,&(m._egr_xmit_start_count),1)

/*******************************************************************************
 * End of 'EGR_XMIT_START_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  EH_MASK_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EH_MASK_PROFILE.
 */
#define READ_EH_MASK_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EH_MASK_PROFILEm_BLKACC,1,n,0,EH_MASK_PROFILEm_OFFSET,i,(m._eh_mask_profile),1)
#define WRITE_EH_MASK_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EH_MASK_PROFILEm_BLKACC,1,n,0,EH_MASK_PROFILEm_OFFSET,i,&(m._eh_mask_profile),1)
#define WRITE_EH_MASK_PROFILEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EH_MASK_PROFILEm_BLKACC,1,-1,0,EH_MASK_PROFILEm_OFFSET,i,&(m._eh_mask_profile),1)

/*******************************************************************************
 * End of 'EH_MASK_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EMIRROR_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access EMIRROR_CONTROL.
 */
#define READ_EMIRROR_CONTROLm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EMIRROR_CONTROLm_BLKACC)+1,EMIRROR_CONTROLm_OFFSET+i,(m._emirror_control),5)
#define WRITE_EMIRROR_CONTROLm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EMIRROR_CONTROLm_BLKACC)+1,EMIRROR_CONTROLm_OFFSET+i,&(m._emirror_control),5)

/*******************************************************************************
 * End of 'EMIRROR_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  EMIRROR_CONTROL1
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access EMIRROR_CONTROL1.
 */
#define READ_EMIRROR_CONTROL1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EMIRROR_CONTROL1m_BLKACC)+1,EMIRROR_CONTROL1m_OFFSET+i,(m._emirror_control1),5)
#define WRITE_EMIRROR_CONTROL1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EMIRROR_CONTROL1m_BLKACC)+1,EMIRROR_CONTROL1m_OFFSET+i,&(m._emirror_control1),5)

/*******************************************************************************
 * End of 'EMIRROR_CONTROL1m'
 */




/*******************************************************************************
 * MEMORY:  EMIRROR_CONTROL2
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access EMIRROR_CONTROL2.
 */
#define READ_EMIRROR_CONTROL2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EMIRROR_CONTROL2m_BLKACC)+1,EMIRROR_CONTROL2m_OFFSET+i,(m._emirror_control2),5)
#define WRITE_EMIRROR_CONTROL2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EMIRROR_CONTROL2m_BLKACC)+1,EMIRROR_CONTROL2m_OFFSET+i,&(m._emirror_control2),5)

/*******************************************************************************
 * End of 'EMIRROR_CONTROL2m'
 */




/*******************************************************************************
 * MEMORY:  EMIRROR_CONTROL3
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access EMIRROR_CONTROL3.
 */
#define READ_EMIRROR_CONTROL3m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EMIRROR_CONTROL3m_BLKACC)+1,EMIRROR_CONTROL3m_OFFSET+i,(m._emirror_control3),5)
#define WRITE_EMIRROR_CONTROL3m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EMIRROR_CONTROL3m_BLKACC)+1,EMIRROR_CONTROL3m_OFFSET+i,&(m._emirror_control3),5)

/*******************************************************************************
 * End of 'EMIRROR_CONTROL3m'
 */




/*******************************************************************************
 * MEMORY:  EM_MTP_INDEX
 * BLOCKS:   IPIPE
 * SIZE:     135
 */
/*
 * These macros can be used to access EM_MTP_INDEX.
 */
#define READ_EM_MTP_INDEXm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EM_MTP_INDEXm_BLKACC)+1,EM_MTP_INDEXm_OFFSET+i,(m._em_mtp_index),5)
#define WRITE_EM_MTP_INDEXm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EM_MTP_INDEXm_BLKACC)+1,EM_MTP_INDEXm_OFFSET+i,&(m._em_mtp_index),5)

/*******************************************************************************
 * End of 'EM_MTP_INDEXm'
 */




/*******************************************************************************
 * REGISTER:  ENQS_ASF_ERROR
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access ENQS_ASF_ERROR.
 */
#define READ_ENQS_ASF_ERRORr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,ENQS_ASF_ERRORr_BLKACC,4,0,p,ENQS_ASF_ERRORr_OFFSET,0,(r._enqs_asf_error),2)
#define WRITE_ENQS_ASF_ERRORr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,ENQS_ASF_ERRORr_BLKACC,4,0,p,ENQS_ASF_ERRORr_OFFSET,0,&(r._enqs_asf_error),2)

/*******************************************************************************
 * End of 'ENQS_ASF_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  ENQS_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access ENQS_CONFIG.
 */
#define READ_ENQS_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,ENQS_CONFIGr_BLKACC,4,0,p,ENQS_CONFIGr_OFFSET,0,(r._enqs_config),1)
#define WRITE_ENQS_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,ENQS_CONFIGr_BLKACC,4,0,p,ENQS_CONFIGr_OFFSET,0,&(r._enqs_config),1)

/*******************************************************************************
 * End of 'ENQS_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  EPC_LINK_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access EPC_LINK_BMAP.
 */
#define READ_EPC_LINK_BMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EPC_LINK_BMAPm_BLKACC)+1,EPC_LINK_BMAPm_OFFSET+i,(m._epc_link_bmap),5)
#define WRITE_EPC_LINK_BMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EPC_LINK_BMAPm_BLKACC)+1,EPC_LINK_BMAPm_OFFSET+i,&(m._epc_link_bmap),5)

/*******************************************************************************
 * End of 'EPC_LINK_BMAPm'
 */




/*******************************************************************************
 * REGISTER:  ETAG_MULTICAST_RANGE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETAG_MULTICAST_RANGE.
 */
#define READ_ETAG_MULTICAST_RANGEr(u,r) bcmbd_cmicd_reg_block_read(u,ETAG_MULTICAST_RANGEr_BLKACC,1,ETAG_MULTICAST_RANGEr_OFFSET,0,(r._etag_multicast_range), 1)
#define WRITE_ETAG_MULTICAST_RANGEr(u,r) bcmbd_cmicd_reg_block_write(u,ETAG_MULTICAST_RANGEr_BLKACC,1,ETAG_MULTICAST_RANGEr_OFFSET,0,&(r._etag_multicast_range), 1)

/*******************************************************************************
 * End of 'ETAG_MULTICAST_RANGEr'
 */




/*******************************************************************************
 * REGISTER:  ETHERTYPE_MAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ETHERTYPE_MAP.
 */
#define READ_ETHERTYPE_MAPr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,ETHERTYPE_MAPr_BLKACC,1,n,0,ETHERTYPE_MAPr_OFFSET,i,(r._ethertype_map),1)
#define WRITE_ETHERTYPE_MAPr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,ETHERTYPE_MAPr_BLKACC,1,n,0,ETHERTYPE_MAPr_OFFSET,i,&(r._ethertype_map),1)
#define WRITE_ETHERTYPE_MAPr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,ETHERTYPE_MAPr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,ETHERTYPE_MAPr_OFFSET,i,&(r._ethertype_map),1)

/*******************************************************************************
 * End of 'ETHERTYPE_MAPr'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_2
 * BLOCKS:   IPIPE
 * SIZE:     211
 */
/*
 * These macros can be used to access EXACT_MATCH_2.
 */
#define READ_EXACT_MATCH_2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_2m_BLKACC,1,n,0,EXACT_MATCH_2m_OFFSET,i,(m._exact_match_2),7)
#define WRITE_EXACT_MATCH_2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_2m_BLKACC,1,n,0,EXACT_MATCH_2m_OFFSET,i,&(m._exact_match_2),7)
#define WRITE_EXACT_MATCH_2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_2m_BLKACC,1,-1,0,EXACT_MATCH_2m_OFFSET,i,&(m._exact_match_2),7)

/*******************************************************************************
 * End of 'EXACT_MATCH_2m'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_2_ENTRY_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     210
 */
/*
 * These macros can be used to access EXACT_MATCH_2_ENTRY_ONLY.
 */
#define READ_EXACT_MATCH_2_ENTRY_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_2_ENTRY_ONLYm_BLKACC,1,n,0,EXACT_MATCH_2_ENTRY_ONLYm_OFFSET,i,(m._exact_match_2_entry_only),7)
#define WRITE_EXACT_MATCH_2_ENTRY_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_2_ENTRY_ONLYm_BLKACC,1,n,0,EXACT_MATCH_2_ENTRY_ONLYm_OFFSET,i,&(m._exact_match_2_entry_only),7)
#define WRITE_EXACT_MATCH_2_ENTRY_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_2_ENTRY_ONLYm_BLKACC,1,-1,0,EXACT_MATCH_2_ENTRY_ONLYm_OFFSET,i,&(m._exact_match_2_entry_only),7)

/*******************************************************************************
 * End of 'EXACT_MATCH_2_ENTRY_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_4
 * BLOCKS:   IPIPE
 * SIZE:     422
 */
/*
 * These macros can be used to access EXACT_MATCH_4.
 */
#define READ_EXACT_MATCH_4m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_4m_BLKACC,1,n,0,EXACT_MATCH_4m_OFFSET,i,(m._exact_match_4),14)
#define WRITE_EXACT_MATCH_4m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_4m_BLKACC,1,n,0,EXACT_MATCH_4m_OFFSET,i,&(m._exact_match_4),14)
#define WRITE_EXACT_MATCH_4m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_4m_BLKACC,1,-1,0,EXACT_MATCH_4m_OFFSET,i,&(m._exact_match_4),14)

/*******************************************************************************
 * End of 'EXACT_MATCH_4m'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_4_ENTRY_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     420
 */
/*
 * These macros can be used to access EXACT_MATCH_4_ENTRY_ONLY.
 */
#define READ_EXACT_MATCH_4_ENTRY_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_4_ENTRY_ONLYm_BLKACC,1,n,0,EXACT_MATCH_4_ENTRY_ONLYm_OFFSET,i,(m._exact_match_4_entry_only),14)
#define WRITE_EXACT_MATCH_4_ENTRY_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_4_ENTRY_ONLYm_BLKACC,1,n,0,EXACT_MATCH_4_ENTRY_ONLYm_OFFSET,i,&(m._exact_match_4_entry_only),14)
#define WRITE_EXACT_MATCH_4_ENTRY_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_4_ENTRY_ONLYm_BLKACC,1,-1,0,EXACT_MATCH_4_ENTRY_ONLYm_OFFSET,i,&(m._exact_match_4_entry_only),14)

/*******************************************************************************
 * End of 'EXACT_MATCH_4_ENTRY_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_ACTION_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access EXACT_MATCH_ACTION_PROFILE.
 */
#define READ_EXACT_MATCH_ACTION_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_ACTION_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_ACTION_PROFILEm_OFFSET,i,(m._exact_match_action_profile),1)
#define WRITE_EXACT_MATCH_ACTION_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_ACTION_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_ACTION_PROFILEm_OFFSET,i,&(m._exact_match_action_profile),1)
#define WRITE_EXACT_MATCH_ACTION_PROFILEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_ACTION_PROFILEm_BLKACC,1,-1,0,EXACT_MATCH_ACTION_PROFILEm_OFFSET,i,&(m._exact_match_action_profile),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_ACTION_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_DEFAULT_POLICY
 * BLOCKS:   IPIPE
 * SIZE:     84
 */
/*
 * These macros can be used to access EXACT_MATCH_DEFAULT_POLICY.
 */
#define READ_EXACT_MATCH_DEFAULT_POLICYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_DEFAULT_POLICYm_BLKACC,1,n,0,EXACT_MATCH_DEFAULT_POLICYm_OFFSET,i,(m._exact_match_default_policy),3)
#define WRITE_EXACT_MATCH_DEFAULT_POLICYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_DEFAULT_POLICYm_BLKACC,1,n,0,EXACT_MATCH_DEFAULT_POLICYm_OFFSET,i,&(m._exact_match_default_policy),3)
#define WRITE_EXACT_MATCH_DEFAULT_POLICYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_DEFAULT_POLICYm_BLKACC,1,-1,0,EXACT_MATCH_DEFAULT_POLICYm_OFFSET,i,&(m._exact_match_default_policy),3)

/*******************************************************************************
 * End of 'EXACT_MATCH_DEFAULT_POLICYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access EXACT_MATCH_HIT_ONLY.
 */
#define READ_EXACT_MATCH_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(EXACT_MATCH_HIT_ONLYm_BLKACC)+1,EXACT_MATCH_HIT_ONLYm_OFFSET+i,(m._exact_match_hit_only),1)
#define WRITE_EXACT_MATCH_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(EXACT_MATCH_HIT_ONLYm_BLKACC)+1,EXACT_MATCH_HIT_ONLYm_OFFSET+i,&(m._exact_match_hit_only),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_HIT_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_KEY_GEN_MASK
 * BLOCKS:   IPIPE
 * SIZE:     160
 */
/*
 * These macros can be used to access EXACT_MATCH_KEY_GEN_MASK.
 */
#define READ_EXACT_MATCH_KEY_GEN_MASKm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_KEY_GEN_MASKm_BLKACC,1,n,0,EXACT_MATCH_KEY_GEN_MASKm_OFFSET,i,(m._exact_match_key_gen_mask),5)
#define WRITE_EXACT_MATCH_KEY_GEN_MASKm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_KEY_GEN_MASKm_BLKACC,1,n,0,EXACT_MATCH_KEY_GEN_MASKm_OFFSET,i,&(m._exact_match_key_gen_mask),5)
#define WRITE_EXACT_MATCH_KEY_GEN_MASKm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_KEY_GEN_MASKm_BLKACC,1,-1,0,EXACT_MATCH_KEY_GEN_MASKm_OFFSET,i,&(m._exact_match_key_gen_mask),5)

/*******************************************************************************
 * End of 'EXACT_MATCH_KEY_GEN_MASKm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_KEY_GEN_PROGRAM_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     387
 */
/*
 * These macros can be used to access EXACT_MATCH_KEY_GEN_PROGRAM_PROFILE.
 */
#define READ_EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,(m._exact_match_key_gen_program_profile),13)
#define WRITE_EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,&(m._exact_match_key_gen_program_profile),13)
#define WRITE_EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,-1,0,EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,&(m._exact_match_key_gen_program_profile),13)

/*******************************************************************************
 * End of 'EXACT_MATCH_KEY_GEN_PROGRAM_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_LOGICAL_TABLE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     218
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECTm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECTm_OFFSET,i,(m._exact_match_logical_table_select),7)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECTm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECTm_OFFSET,i,&(m._exact_match_logical_table_select),7)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECTm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECTm_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECTm_OFFSET,i,&(m._exact_match_logical_table_select),7)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECTm'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_OFFSET,0,(r._exact_match_logical_table_select_cam_bist_config),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_config),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_config),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATA.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_OFFSET,0,(r._exact_match_logical_table_select_cam_bist_dbg_data),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_dbg_data),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUS.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,(r._exact_match_logical_table_select_cam_bist_status),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_status),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,&(r._exact_match_logical_table_select_cam_bist_status),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRL.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,(r._exact_match_logical_table_select_cam_dbgctrl),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,&(r._exact_match_logical_table_select_cam_dbgctrl),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,&(r._exact_match_logical_table_select_cam_dbgctrl),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIG.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,(r._exact_match_logical_table_select_config),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,&(r._exact_match_logical_table_select_config),1)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,&(r._exact_match_logical_table_select_config),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     57
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLY.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,(m._exact_match_logical_table_select_data_only),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,&(m._exact_match_logical_table_select_data_only),2)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,&(m._exact_match_logical_table_select_data_only),2)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     161
 */
/*
 * These macros can be used to access EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLY.
 */
#define READ_EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,(m._exact_match_logical_table_select_tcam_only),6)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,n,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,&(m._exact_match_logical_table_select_tcam_only),6)
#define WRITE_EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,-1,0,EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,&(m._exact_match_logical_table_select_tcam_only),6)

/*******************************************************************************
 * End of 'EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  EXACT_MATCH_QOS_ACTIONS_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     110
 */
/*
 * These macros can be used to access EXACT_MATCH_QOS_ACTIONS_PROFILE.
 */
#define READ_EXACT_MATCH_QOS_ACTIONS_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,EXACT_MATCH_QOS_ACTIONS_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_QOS_ACTIONS_PROFILEm_OFFSET,i,(m._exact_match_qos_actions_profile),4)
#define WRITE_EXACT_MATCH_QOS_ACTIONS_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_QOS_ACTIONS_PROFILEm_BLKACC,1,n,0,EXACT_MATCH_QOS_ACTIONS_PROFILEm_OFFSET,i,&(m._exact_match_qos_actions_profile),4)
#define WRITE_EXACT_MATCH_QOS_ACTIONS_PROFILEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,EXACT_MATCH_QOS_ACTIONS_PROFILEm_BLKACC,1,-1,0,EXACT_MATCH_QOS_ACTIONS_PROFILEm_OFFSET,i,&(m._exact_match_qos_actions_profile),4)

/*******************************************************************************
 * End of 'EXACT_MATCH_QOS_ACTIONS_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  EXACT_MATCH_QOS_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access EXACT_MATCH_QOS_CONTROL.
 */
#define READ_EXACT_MATCH_QOS_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,EXACT_MATCH_QOS_CONTROLr_BLKACC,1,n,0,EXACT_MATCH_QOS_CONTROLr_OFFSET,0,(r._exact_match_qos_control),1)
#define WRITE_EXACT_MATCH_QOS_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_QOS_CONTROLr_BLKACC,1,n,0,EXACT_MATCH_QOS_CONTROLr_OFFSET,0,&(r._exact_match_qos_control),1)
#define WRITE_EXACT_MATCH_QOS_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,EXACT_MATCH_QOS_CONTROLr_BLKACC,1,-1,0,EXACT_MATCH_QOS_CONTROLr_OFFSET,0,&(r._exact_match_qos_control),1)

/*******************************************************************************
 * End of 'EXACT_MATCH_QOS_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  FAST_TRUNK_GROUP
 * BLOCKS:   IPIPE
 * SIZE:     142
 */
/*
 * These macros can be used to access FAST_TRUNK_GROUP.
 */
#define READ_FAST_TRUNK_GROUPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(FAST_TRUNK_GROUPm_BLKACC)+1,FAST_TRUNK_GROUPm_OFFSET+i,(m._fast_trunk_group),5)
#define WRITE_FAST_TRUNK_GROUPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(FAST_TRUNK_GROUPm_BLKACC)+1,FAST_TRUNK_GROUPm_OFFSET+i,&(m._fast_trunk_group),5)

/*******************************************************************************
 * End of 'FAST_TRUNK_GROUPm'
 */




/*******************************************************************************
 * REGISTER:  FLEXIBLE_IPV6_EXT_HDR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FLEXIBLE_IPV6_EXT_HDR.
 */
#define READ_FLEXIBLE_IPV6_EXT_HDRr(u,r) bcmbd_cmicd_reg_block_read(u,FLEXIBLE_IPV6_EXT_HDRr_BLKACC,1,FLEXIBLE_IPV6_EXT_HDRr_OFFSET,0,(r._flexible_ipv6_ext_hdr), 1)
#define WRITE_FLEXIBLE_IPV6_EXT_HDRr(u,r) bcmbd_cmicd_reg_block_write(u,FLEXIBLE_IPV6_EXT_HDRr_BLKACC,1,FLEXIBLE_IPV6_EXT_HDRr_OFFSET,0,&(r._flexible_ipv6_ext_hdr), 1)

/*******************************************************************************
 * End of 'FLEXIBLE_IPV6_EXT_HDRr'
 */




/*******************************************************************************
 * REGISTER:  FPEM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FPEM_CONTROL.
 */
#define READ_FPEM_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,FPEM_CONTROLr_BLKACC,1,FPEM_CONTROLr_OFFSET,0,(r._fpem_control), 1)
#define WRITE_FPEM_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,FPEM_CONTROLr_BLKACC,1,FPEM_CONTROLr_OFFSET,0,&(r._fpem_control), 1)

/*******************************************************************************
 * End of 'FPEM_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  FPEM_ECC
 * BLOCKS:   IPIPE
 * SIZE:     113
 */
/*
 * These macros can be used to access FPEM_ECC.
 */
#define READ_FPEM_ECCm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,FPEM_ECCm_BLKACC,1,n,0,FPEM_ECCm_OFFSET,i,(m._fpem_ecc),4)
#define WRITE_FPEM_ECCm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,FPEM_ECCm_BLKACC,1,n,0,FPEM_ECCm_OFFSET,i,&(m._fpem_ecc),4)
#define WRITE_FPEM_ECCm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,FPEM_ECCm_BLKACC,1,-1,0,FPEM_ECCm_OFFSET,i,&(m._fpem_ecc),4)

/*******************************************************************************
 * End of 'FPEM_ECCm'
 */




/*******************************************************************************
 * MEMORY:  FPEM_LP
 * BLOCKS:   IPIPE
 * SIZE:     44
 */
/*
 * These macros can be used to access FPEM_LP.
 */
#define READ_FPEM_LPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(FPEM_LPm_BLKACC)+1,FPEM_LPm_OFFSET+i,(m._fpem_lp),2)
#define WRITE_FPEM_LPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(FPEM_LPm_BLKACC)+1,FPEM_LPm_OFFSET+i,&(m._fpem_lp),2)

/*******************************************************************************
 * End of 'FPEM_LPm'
 */




/*******************************************************************************
 * REGISTER:  FP_METER_TM0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FP_METER_TM0.
 */
#define READ_FP_METER_TM0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,FP_METER_TM0r_BLKACC,1,n,0,FP_METER_TM0r_OFFSET,0,(r._fp_meter_tm0),1)
#define WRITE_FP_METER_TM0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,FP_METER_TM0r_BLKACC,1,n,0,FP_METER_TM0r_OFFSET,0,&(r._fp_meter_tm0),1)
#define WRITE_FP_METER_TM0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,FP_METER_TM0r_BLKACC,1,-1,0,FP_METER_TM0r_OFFSET,0,&(r._fp_meter_tm0),1)

/*******************************************************************************
 * End of 'FP_METER_TM0r'
 */




/*******************************************************************************
 * REGISTER:  FP_METER_TM1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FP_METER_TM1.
 */
#define READ_FP_METER_TM1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,FP_METER_TM1r_BLKACC,1,n,0,FP_METER_TM1r_OFFSET,0,(r._fp_meter_tm1),1)
#define WRITE_FP_METER_TM1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,FP_METER_TM1r_BLKACC,1,n,0,FP_METER_TM1r_OFFSET,0,&(r._fp_meter_tm1),1)
#define WRITE_FP_METER_TM1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,FP_METER_TM1r_BLKACC,1,-1,0,FP_METER_TM1r_OFFSET,0,&(r._fp_meter_tm1),1)

/*******************************************************************************
 * End of 'FP_METER_TM1r'
 */




/*******************************************************************************
 * REGISTER:  FP_METER_TM2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FP_METER_TM2.
 */
#define READ_FP_METER_TM2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,FP_METER_TM2r_BLKACC,1,n,0,FP_METER_TM2r_OFFSET,0,(r._fp_meter_tm2),1)
#define WRITE_FP_METER_TM2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,FP_METER_TM2r_BLKACC,1,n,0,FP_METER_TM2r_OFFSET,0,&(r._fp_meter_tm2),1)
#define WRITE_FP_METER_TM2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,FP_METER_TM2r_BLKACC,1,-1,0,FP_METER_TM2r_OFFSET,0,&(r._fp_meter_tm2),1)

/*******************************************************************************
 * End of 'FP_METER_TM2r'
 */




/*******************************************************************************
 * REGISTER:  FP_METER_TM3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FP_METER_TM3.
 */
#define READ_FP_METER_TM3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,FP_METER_TM3r_BLKACC,1,n,0,FP_METER_TM3r_OFFSET,0,(r._fp_meter_tm3),1)
#define WRITE_FP_METER_TM3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,FP_METER_TM3r_BLKACC,1,n,0,FP_METER_TM3r_OFFSET,0,&(r._fp_meter_tm3),1)
#define WRITE_FP_METER_TM3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,FP_METER_TM3r_BLKACC,1,-1,0,FP_METER_TM3r_OFFSET,0,&(r._fp_meter_tm3),1)

/*******************************************************************************
 * End of 'FP_METER_TM3r'
 */




/*******************************************************************************
 * REGISTER:  FP_POLICY_LVM
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FP_POLICY_LVM.
 */
#define READ_FP_POLICY_LVMr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,FP_POLICY_LVMr_BLKACC,1,n,0,FP_POLICY_LVMr_OFFSET,0,(r._fp_policy_lvm),1)
#define WRITE_FP_POLICY_LVMr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,FP_POLICY_LVMr_BLKACC,1,n,0,FP_POLICY_LVMr_OFFSET,0,&(r._fp_policy_lvm),1)
#define WRITE_FP_POLICY_LVMr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,FP_POLICY_LVMr_BLKACC,1,-1,0,FP_POLICY_LVMr_OFFSET,0,&(r._fp_policy_lvm),1)

/*******************************************************************************
 * End of 'FP_POLICY_LVMr'
 */




/*******************************************************************************
 * REGISTER:  FP_POLICY_PDA_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FP_POLICY_PDA_64.
 */
#define READ_FP_POLICY_PDA_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,FP_POLICY_PDA_64r_BLKACC,1,n,0,FP_POLICY_PDA_64r_OFFSET,0,(r._fp_policy_pda_64),2)
#define WRITE_FP_POLICY_PDA_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,FP_POLICY_PDA_64r_BLKACC,1,n,0,FP_POLICY_PDA_64r_OFFSET,0,&(r._fp_policy_pda_64),2)
#define WRITE_FP_POLICY_PDA_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,FP_POLICY_PDA_64r_BLKACC,1,-1,0,FP_POLICY_PDA_64r_OFFSET,0,&(r._fp_policy_pda_64),2)

/*******************************************************************************
 * End of 'FP_POLICY_PDA_64r'
 */




/*******************************************************************************
 * REGISTER:  FP_POLICY_TM
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FP_POLICY_TM.
 */
#define READ_FP_POLICY_TMr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,FP_POLICY_TMr_BLKACC,1,n,0,FP_POLICY_TMr_OFFSET,0,(r._fp_policy_tm),2)
#define WRITE_FP_POLICY_TMr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,FP_POLICY_TMr_BLKACC,1,n,0,FP_POLICY_TMr_OFFSET,0,&(r._fp_policy_tm),2)
#define WRITE_FP_POLICY_TMr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,FP_POLICY_TMr_BLKACC,1,-1,0,FP_POLICY_TMr_OFFSET,0,&(r._fp_policy_tm),2)

/*******************************************************************************
 * End of 'FP_POLICY_TMr'
 */




/*******************************************************************************
 * MEMORY:  FP_UDF_OFFSET
 * BLOCKS:   IPIPE
 * SIZE:     191
 */
/*
 * These macros can be used to access FP_UDF_OFFSET.
 */
#define READ_FP_UDF_OFFSETm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,FP_UDF_OFFSETm_BLKACC,1,n,0,FP_UDF_OFFSETm_OFFSET,i,(m._fp_udf_offset),6)
#define WRITE_FP_UDF_OFFSETm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,FP_UDF_OFFSETm_BLKACC,1,n,0,FP_UDF_OFFSETm_OFFSET,i,&(m._fp_udf_offset),6)
#define WRITE_FP_UDF_OFFSETm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,FP_UDF_OFFSETm_BLKACC,1,-1,0,FP_UDF_OFFSETm_OFFSET,i,&(m._fp_udf_offset),6)

/*******************************************************************************
 * End of 'FP_UDF_OFFSETm'
 */




/*******************************************************************************
 * MEMORY:  FP_UDF_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     161
 */
/*
 * These macros can be used to access FP_UDF_TCAM.
 */
#define READ_FP_UDF_TCAMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,FP_UDF_TCAMm_BLKACC,1,n,0,FP_UDF_TCAMm_OFFSET,i,(m._fp_udf_tcam),6)
#define WRITE_FP_UDF_TCAMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,FP_UDF_TCAMm_BLKACC,1,n,0,FP_UDF_TCAMm_OFFSET,i,&(m._fp_udf_tcam),6)
#define WRITE_FP_UDF_TCAMm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,FP_UDF_TCAMm_BLKACC,1,-1,0,FP_UDF_TCAMm_OFFSET,i,&(m._fp_udf_tcam),6)

/*******************************************************************************
 * End of 'FP_UDF_TCAMm'
 */




/*******************************************************************************
 * REGISTER:  FREE_LIST_DEBUG_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FREE_LIST_DEBUG_TM.
 */
#define READ_FREE_LIST_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,FREE_LIST_DEBUG_TMr_BLKACC,3,0,p,FREE_LIST_DEBUG_TMr_OFFSET,0,(r._free_list_debug_tm),1)
#define WRITE_FREE_LIST_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,FREE_LIST_DEBUG_TMr_BLKACC,3,0,p,FREE_LIST_DEBUG_TMr_OFFSET,0,&(r._free_list_debug_tm),1)

/*******************************************************************************
 * End of 'FREE_LIST_DEBUG_TMr'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_DA
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_DA.
 */
#define READ_FROM_REMOTE_CPU_DAr(u,i,r) bcmbd_cmicd_reg_block_read(u,FROM_REMOTE_CPU_DAr_BLKACC,1,FROM_REMOTE_CPU_DAr_OFFSET,i,(r._from_remote_cpu_da), 2)
#define WRITE_FROM_REMOTE_CPU_DAr(u,i,r) bcmbd_cmicd_reg_block_write(u,FROM_REMOTE_CPU_DAr_BLKACC,1,FROM_REMOTE_CPU_DAr_OFFSET,i,&(r._from_remote_cpu_da), 2)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_DAr'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_DA0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_DA0.
 */
#define READ_FROM_REMOTE_CPU_DA0r(u,r) bcmbd_cmicd_reg_block_read(u,FROM_REMOTE_CPU_DA0r_BLKACC,1,FROM_REMOTE_CPU_DA0r_OFFSET,0,(r._from_remote_cpu_da0), 2)
#define WRITE_FROM_REMOTE_CPU_DA0r(u,r) bcmbd_cmicd_reg_block_write(u,FROM_REMOTE_CPU_DA0r_BLKACC,1,FROM_REMOTE_CPU_DA0r_OFFSET,0,&(r._from_remote_cpu_da0), 2)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_DA0r'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_DA1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_DA1.
 */
#define READ_FROM_REMOTE_CPU_DA1r(u,r) bcmbd_cmicd_reg_block_read(u,FROM_REMOTE_CPU_DA1r_BLKACC,1,FROM_REMOTE_CPU_DA1r_OFFSET,0,(r._from_remote_cpu_da1), 2)
#define WRITE_FROM_REMOTE_CPU_DA1r(u,r) bcmbd_cmicd_reg_block_write(u,FROM_REMOTE_CPU_DA1r_BLKACC,1,FROM_REMOTE_CPU_DA1r_OFFSET,0,&(r._from_remote_cpu_da1), 2)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_DA1r'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_ETHERTYPE.
 */
#define READ_FROM_REMOTE_CPU_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,FROM_REMOTE_CPU_ETHERTYPEr_BLKACC,1,FROM_REMOTE_CPU_ETHERTYPEr_OFFSET,0,(r._from_remote_cpu_ethertype), 1)
#define WRITE_FROM_REMOTE_CPU_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,FROM_REMOTE_CPU_ETHERTYPEr_BLKACC,1,FROM_REMOTE_CPU_ETHERTYPEr_OFFSET,0,&(r._from_remote_cpu_ethertype), 1)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  FROM_REMOTE_CPU_SIGNATURE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access FROM_REMOTE_CPU_SIGNATURE.
 */
#define READ_FROM_REMOTE_CPU_SIGNATUREr(u,r) bcmbd_cmicd_reg_block_read(u,FROM_REMOTE_CPU_SIGNATUREr_BLKACC,1,FROM_REMOTE_CPU_SIGNATUREr_OFFSET,0,(r._from_remote_cpu_signature), 1)
#define WRITE_FROM_REMOTE_CPU_SIGNATUREr(u,r) bcmbd_cmicd_reg_block_write(u,FROM_REMOTE_CPU_SIGNATUREr_BLKACC,1,FROM_REMOTE_CPU_SIGNATUREr_OFFSET,0,&(r._from_remote_cpu_signature), 1)

/*******************************************************************************
 * End of 'FROM_REMOTE_CPU_SIGNATUREr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_1_LOWER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_1_LOWER.
 */
#define READ_GLOBAL_MPLS_RANGE_1_LOWERr(u,r) bcmbd_cmicd_reg_block_read(u,GLOBAL_MPLS_RANGE_1_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_1_LOWERr_OFFSET,0,(r._global_mpls_range_1_lower), 1)
#define WRITE_GLOBAL_MPLS_RANGE_1_LOWERr(u,r) bcmbd_cmicd_reg_block_write(u,GLOBAL_MPLS_RANGE_1_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_1_LOWERr_OFFSET,0,&(r._global_mpls_range_1_lower), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_1_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_1_UPPER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_1_UPPER.
 */
#define READ_GLOBAL_MPLS_RANGE_1_UPPERr(u,r) bcmbd_cmicd_reg_block_read(u,GLOBAL_MPLS_RANGE_1_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_1_UPPERr_OFFSET,0,(r._global_mpls_range_1_upper), 1)
#define WRITE_GLOBAL_MPLS_RANGE_1_UPPERr(u,r) bcmbd_cmicd_reg_block_write(u,GLOBAL_MPLS_RANGE_1_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_1_UPPERr_OFFSET,0,&(r._global_mpls_range_1_upper), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_1_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_2_LOWER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_2_LOWER.
 */
#define READ_GLOBAL_MPLS_RANGE_2_LOWERr(u,r) bcmbd_cmicd_reg_block_read(u,GLOBAL_MPLS_RANGE_2_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_2_LOWERr_OFFSET,0,(r._global_mpls_range_2_lower), 1)
#define WRITE_GLOBAL_MPLS_RANGE_2_LOWERr(u,r) bcmbd_cmicd_reg_block_write(u,GLOBAL_MPLS_RANGE_2_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_2_LOWERr_OFFSET,0,&(r._global_mpls_range_2_lower), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_2_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_2_UPPER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_2_UPPER.
 */
#define READ_GLOBAL_MPLS_RANGE_2_UPPERr(u,r) bcmbd_cmicd_reg_block_read(u,GLOBAL_MPLS_RANGE_2_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_2_UPPERr_OFFSET,0,(r._global_mpls_range_2_upper), 1)
#define WRITE_GLOBAL_MPLS_RANGE_2_UPPERr(u,r) bcmbd_cmicd_reg_block_write(u,GLOBAL_MPLS_RANGE_2_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_2_UPPERr_OFFSET,0,&(r._global_mpls_range_2_upper), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_2_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_LOWER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_LOWER.
 */
#define READ_GLOBAL_MPLS_RANGE_LOWERr(u,i,r) bcmbd_cmicd_reg_block_read(u,GLOBAL_MPLS_RANGE_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_LOWERr_OFFSET,(i)*2,(r._global_mpls_range_lower), 1)
#define WRITE_GLOBAL_MPLS_RANGE_LOWERr(u,i,r) bcmbd_cmicd_reg_block_write(u,GLOBAL_MPLS_RANGE_LOWERr_BLKACC,1,GLOBAL_MPLS_RANGE_LOWERr_OFFSET,(i)*2,&(r._global_mpls_range_lower), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  GLOBAL_MPLS_RANGE_UPPER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access GLOBAL_MPLS_RANGE_UPPER.
 */
#define READ_GLOBAL_MPLS_RANGE_UPPERr(u,i,r) bcmbd_cmicd_reg_block_read(u,GLOBAL_MPLS_RANGE_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_UPPERr_OFFSET,(i)*2,(r._global_mpls_range_upper), 1)
#define WRITE_GLOBAL_MPLS_RANGE_UPPERr(u,i,r) bcmbd_cmicd_reg_block_write(u,GLOBAL_MPLS_RANGE_UPPERr_BLKACC,1,GLOBAL_MPLS_RANGE_UPPERr_OFFSET,(i)*2,&(r._global_mpls_range_upper), 1)

/*******************************************************************************
 * End of 'GLOBAL_MPLS_RANGE_UPPERr'
 */




/*******************************************************************************
 * MEMORY:  GTP_PORT_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     35
 */
/*
 * These macros can be used to access GTP_PORT_TABLE.
 */
#define READ_GTP_PORT_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(GTP_PORT_TABLEm_BLKACC)+1,GTP_PORT_TABLEm_OFFSET+i,(m._gtp_port_table),2)
#define WRITE_GTP_PORT_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(GTP_PORT_TABLEm_BLKACC)+1,GTP_PORT_TABLEm_OFFSET+i,&(m._gtp_port_table),2)

/*******************************************************************************
 * End of 'GTP_PORT_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access HASH_CONTROL.
 */
#define READ_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,HASH_CONTROLr_BLKACC,1,HASH_CONTROLr_OFFSET,0,(r._hash_control), 1)
#define WRITE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,HASH_CONTROLr_BLKACC,1,HASH_CONTROLr_OFFSET,0,&(r._hash_control), 1)

/*******************************************************************************
 * End of 'HASH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  HG_EH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access HG_EH_CONTROL.
 */
#define READ_HG_EH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,HG_EH_CONTROLr_BLKACC,1,HG_EH_CONTROLr_OFFSET,0,(r._hg_eh_control), 1)
#define WRITE_HG_EH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,HG_EH_CONTROLr_BLKACC,1,HG_EH_CONTROLr_OFFSET,0,&(r._hg_eh_control), 1)

/*******************************************************************************
 * End of 'HG_EH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  HG_LOOKUP_DESTINATION
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access HG_LOOKUP_DESTINATION.
 */
#define READ_HG_LOOKUP_DESTINATIONr(u,p,r) bcmbd_cmicd_reg_port_read(u,HG_LOOKUP_DESTINATIONr_BLKACC,p,HG_LOOKUP_DESTINATIONr_OFFSET,0,(r._hg_lookup_destination), 1)
#define WRITE_HG_LOOKUP_DESTINATIONr(u,p,r) bcmbd_cmicd_reg_port_write(u,HG_LOOKUP_DESTINATIONr_BLKACC,p,HG_LOOKUP_DESTINATIONr_OFFSET,0,&(r._hg_lookup_destination), 1)

/*******************************************************************************
 * End of 'HG_LOOKUP_DESTINATIONr'
 */




/*******************************************************************************
 * MEMORY:  HG_TRUNK_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access HG_TRUNK_BITMAP.
 */
#define READ_HG_TRUNK_BITMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_BITMAPm_BLKACC)+1,HG_TRUNK_BITMAPm_OFFSET+i,(m._hg_trunk_bitmap),5)
#define WRITE_HG_TRUNK_BITMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_BITMAPm_BLKACC)+1,HG_TRUNK_BITMAPm_OFFSET+i,&(m._hg_trunk_bitmap),5)

/*******************************************************************************
 * End of 'HG_TRUNK_BITMAPm'
 */




/*******************************************************************************
 * MEMORY:  HG_TRUNK_FAILOVER_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access HG_TRUNK_FAILOVER_ENABLE.
 */
#define READ_HG_TRUNK_FAILOVER_ENABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_FAILOVER_ENABLEm_BLKACC)+1,HG_TRUNK_FAILOVER_ENABLEm_OFFSET+i,(m._hg_trunk_failover_enable),5)
#define WRITE_HG_TRUNK_FAILOVER_ENABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_FAILOVER_ENABLEm_BLKACC)+1,HG_TRUNK_FAILOVER_ENABLEm_OFFSET+i,&(m._hg_trunk_failover_enable),5)

/*******************************************************************************
 * End of 'HG_TRUNK_FAILOVER_ENABLEm'
 */




/*******************************************************************************
 * MEMORY:  HG_TRUNK_FAILOVER_SET
 * BLOCKS:   IPIPE
 * SIZE:     70
 */
/*
 * These macros can be used to access HG_TRUNK_FAILOVER_SET.
 */
#define READ_HG_TRUNK_FAILOVER_SETm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_FAILOVER_SETm_BLKACC)+1,HG_TRUNK_FAILOVER_SETm_OFFSET+i,(m._hg_trunk_failover_set),3)
#define WRITE_HG_TRUNK_FAILOVER_SETm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_FAILOVER_SETm_BLKACC)+1,HG_TRUNK_FAILOVER_SETm_OFFSET+i,&(m._hg_trunk_failover_set),3)

/*******************************************************************************
 * End of 'HG_TRUNK_FAILOVER_SETm'
 */




/*******************************************************************************
 * MEMORY:  HG_TRUNK_GROUP
 * BLOCKS:   IPIPE
 * SIZE:     25
 */
/*
 * These macros can be used to access HG_TRUNK_GROUP.
 */
#define READ_HG_TRUNK_GROUPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_GROUPm_BLKACC)+1,HG_TRUNK_GROUPm_OFFSET+i,(m._hg_trunk_group),1)
#define WRITE_HG_TRUNK_GROUPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_GROUPm_BLKACC)+1,HG_TRUNK_GROUPm_OFFSET+i,&(m._hg_trunk_group),1)

/*******************************************************************************
 * End of 'HG_TRUNK_GROUPm'
 */




/*******************************************************************************
 * MEMORY:  HG_TRUNK_MEMBER
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access HG_TRUNK_MEMBER.
 */
#define READ_HG_TRUNK_MEMBERm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_MEMBERm_BLKACC)+1,HG_TRUNK_MEMBERm_OFFSET+i,(m._hg_trunk_member),1)
#define WRITE_HG_TRUNK_MEMBERm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_MEMBERm_BLKACC)+1,HG_TRUNK_MEMBERm_OFFSET+i,&(m._hg_trunk_member),1)

/*******************************************************************************
 * End of 'HG_TRUNK_MEMBERm'
 */




/*******************************************************************************
 * MEMORY:  HG_TRUNK_MODE
 * BLOCKS:   IPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access HG_TRUNK_MODE.
 */
#define READ_HG_TRUNK_MODEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_MODEm_BLKACC)+1,HG_TRUNK_MODEm_OFFSET+i,(m._hg_trunk_mode),1)
#define WRITE_HG_TRUNK_MODEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(HG_TRUNK_MODEm_BLKACC)+1,HG_TRUNK_MODEm_OFFSET+i,&(m._hg_trunk_mode),1)

/*******************************************************************************
 * End of 'HG_TRUNK_MODEm'
 */




/*******************************************************************************
 * REGISTER:  HG_TRUNK_RAND_LB_SEED
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access HG_TRUNK_RAND_LB_SEED.
 */
#define READ_HG_TRUNK_RAND_LB_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,HG_TRUNK_RAND_LB_SEEDr_BLKACC,1,n,0,HG_TRUNK_RAND_LB_SEEDr_OFFSET,0,(r._hg_trunk_rand_lb_seed),1)
#define WRITE_HG_TRUNK_RAND_LB_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,HG_TRUNK_RAND_LB_SEEDr_BLKACC,1,n,0,HG_TRUNK_RAND_LB_SEEDr_OFFSET,0,&(r._hg_trunk_rand_lb_seed),1)
#define WRITE_HG_TRUNK_RAND_LB_SEEDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,HG_TRUNK_RAND_LB_SEEDr_BLKACC,1,-1,0,HG_TRUNK_RAND_LB_SEEDr_OFFSET,0,&(r._hg_trunk_rand_lb_seed),1)

/*******************************************************************************
 * End of 'HG_TRUNK_RAND_LB_SEEDr'
 */




/*******************************************************************************
 * MEMORY:  HG_TRUNK_RR_CNT
 * BLOCKS:   IPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access HG_TRUNK_RR_CNT.
 */
#define READ_HG_TRUNK_RR_CNTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,HG_TRUNK_RR_CNTm_BLKACC,1,n,0,HG_TRUNK_RR_CNTm_OFFSET,i,(m._hg_trunk_rr_cnt),1)
#define WRITE_HG_TRUNK_RR_CNTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,HG_TRUNK_RR_CNTm_BLKACC,1,n,0,HG_TRUNK_RR_CNTm_OFFSET,i,&(m._hg_trunk_rr_cnt),1)
#define WRITE_HG_TRUNK_RR_CNTm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,HG_TRUNK_RR_CNTm_BLKACC,1,-1,0,HG_TRUNK_RR_CNTm_OFFSET,i,&(m._hg_trunk_rr_cnt),1)

/*******************************************************************************
 * End of 'HG_TRUNK_RR_CNTm'
 */




/*******************************************************************************
 * MEMORY:  HIGIG_TRUNK_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access HIGIG_TRUNK_CONTROL.
 */
#define READ_HIGIG_TRUNK_CONTROLm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(HIGIG_TRUNK_CONTROLm_BLKACC)+1,HIGIG_TRUNK_CONTROLm_OFFSET+i,(m._higig_trunk_control),5)
#define WRITE_HIGIG_TRUNK_CONTROLm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(HIGIG_TRUNK_CONTROLm_BLKACC)+1,HIGIG_TRUNK_CONTROLm_OFFSET+i,&(m._higig_trunk_control),5)

/*******************************************************************************
 * End of 'HIGIG_TRUNK_CONTROLm'
 */




/*******************************************************************************
 * REGISTER:  IBCAST_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IBCAST_64.
 */
#define READ_IBCAST_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,IBCAST_64r_BLKACC,p,IBCAST_64r_OFFSET,0,(r._ibcast_64), 2)
#define WRITE_IBCAST_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,IBCAST_64r_BLKACC,p,IBCAST_64r_OFFSET,0,&(r._ibcast_64), 2)

/*******************************************************************************
 * End of 'IBCAST_64r'
 */




/*******************************************************************************
 * REGISTER:  ICFG_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ICFG_EN_COR_ERR_RPT.
 */
#define READ_ICFG_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_read(u,ICFG_EN_COR_ERR_RPTr_BLKACC,1,ICFG_EN_COR_ERR_RPTr_OFFSET,0,(r._icfg_en_cor_err_rpt), 1)
#define WRITE_ICFG_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_write(u,ICFG_EN_COR_ERR_RPTr_BLKACC,1,ICFG_EN_COR_ERR_RPTr_OFFSET,0,&(r._icfg_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'ICFG_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  ICMP_ERROR_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ICMP_ERROR_TYPE.
 */
#define READ_ICMP_ERROR_TYPEr(u,r) bcmbd_cmicd_reg_block_read(u,ICMP_ERROR_TYPEr_BLKACC,1,ICMP_ERROR_TYPEr_OFFSET,0,(r._icmp_error_type), 1)
#define WRITE_ICMP_ERROR_TYPEr(u,r) bcmbd_cmicd_reg_block_write(u,ICMP_ERROR_TYPEr_BLKACC,1,ICMP_ERROR_TYPEr_OFFSET,0,&(r._icmp_error_type), 1)

/*******************************************************************************
 * End of 'ICMP_ERROR_TYPEr'
 */




/*******************************************************************************
 * MEMORY:  ICONTROL_OPCODE_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access ICONTROL_OPCODE_BITMAP.
 */
#define READ_ICONTROL_OPCODE_BITMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ICONTROL_OPCODE_BITMAPm_BLKACC)+1,ICONTROL_OPCODE_BITMAPm_OFFSET+i,(m._icontrol_opcode_bitmap),5)
#define WRITE_ICONTROL_OPCODE_BITMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ICONTROL_OPCODE_BITMAPm_BLKACC)+1,ICONTROL_OPCODE_BITMAPm_OFFSET+i,&(m._icontrol_opcode_bitmap),5)

/*******************************************************************************
 * End of 'ICONTROL_OPCODE_BITMAPm'
 */




/*******************************************************************************
 * REGISTER:  ICTRL_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ICTRL_64.
 */
#define READ_ICTRL_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,ICTRL_64r_BLKACC,p,ICTRL_64r_OFFSET,0,(r._ictrl_64), 2)
#define WRITE_ICTRL_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,ICTRL_64r_BLKACC,p,ICTRL_64r_OFFSET,0,&(r._ictrl_64), 2)

/*******************************************************************************
 * End of 'ICTRL_64r'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_CPU_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_CPU_CONTROL.
 */
#define READ_IDB_CA_CPU_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_CPU_CONTROLr_BLKACC,1,n,0,IDB_CA_CPU_CONTROLr_OFFSET,0,(r._idb_ca_cpu_control),1)
#define WRITE_IDB_CA_CPU_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_CONTROLr_BLKACC,1,n,0,IDB_CA_CPU_CONTROLr_OFFSET,0,&(r._idb_ca_cpu_control),1)
#define WRITE_IDB_CA_CPU_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_CONTROLr_BLKACC,1,-1,0,IDB_CA_CPU_CONTROLr_OFFSET,0,&(r._idb_ca_cpu_control),1)

/*******************************************************************************
 * End of 'IDB_CA_CPU_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_CPU_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_CPU_CT_CONTROL.
 */
#define READ_IDB_CA_CPU_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_CPU_CT_CONTROLr_BLKACC,1,n,0,IDB_CA_CPU_CT_CONTROLr_OFFSET,0,(r._idb_ca_cpu_ct_control),1)
#define WRITE_IDB_CA_CPU_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_CT_CONTROLr_BLKACC,1,n,0,IDB_CA_CPU_CT_CONTROLr_OFFSET,0,&(r._idb_ca_cpu_ct_control),1)
#define WRITE_IDB_CA_CPU_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_CT_CONTROLr_BLKACC,1,-1,0,IDB_CA_CPU_CT_CONTROLr_OFFSET,0,&(r._idb_ca_cpu_ct_control),1)

/*******************************************************************************
 * End of 'IDB_CA_CPU_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_CPU_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_CPU_ECC_STATUS.
 */
#define READ_IDB_CA_CPU_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_CPU_ECC_STATUSr_BLKACC,1,n,0,IDB_CA_CPU_ECC_STATUSr_OFFSET,0,(r._idb_ca_cpu_ecc_status),1)
#define WRITE_IDB_CA_CPU_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_ECC_STATUSr_BLKACC,1,n,0,IDB_CA_CPU_ECC_STATUSr_OFFSET,0,&(r._idb_ca_cpu_ecc_status),1)
#define WRITE_IDB_CA_CPU_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_ECC_STATUSr_BLKACC,1,-1,0,IDB_CA_CPU_ECC_STATUSr_OFFSET,0,&(r._idb_ca_cpu_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_CA_CPU_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_CPU_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_CPU_HW_CONTROL.
 */
#define READ_IDB_CA_CPU_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_CPU_HW_CONTROLr_BLKACC,1,n,0,IDB_CA_CPU_HW_CONTROLr_OFFSET,0,(r._idb_ca_cpu_hw_control),1)
#define WRITE_IDB_CA_CPU_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_HW_CONTROLr_BLKACC,1,n,0,IDB_CA_CPU_HW_CONTROLr_OFFSET,0,&(r._idb_ca_cpu_hw_control),1)
#define WRITE_IDB_CA_CPU_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_HW_CONTROLr_BLKACC,1,-1,0,IDB_CA_CPU_HW_CONTROLr_OFFSET,0,&(r._idb_ca_cpu_hw_control),1)

/*******************************************************************************
 * End of 'IDB_CA_CPU_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_CPU_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_CPU_HW_STATUS.
 */
#define READ_IDB_CA_CPU_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_CPU_HW_STATUSr_BLKACC,1,n,0,IDB_CA_CPU_HW_STATUSr_OFFSET,0,(r._idb_ca_cpu_hw_status),1)
#define WRITE_IDB_CA_CPU_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_HW_STATUSr_BLKACC,1,n,0,IDB_CA_CPU_HW_STATUSr_OFFSET,0,&(r._idb_ca_cpu_hw_status),1)
#define WRITE_IDB_CA_CPU_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_CPU_HW_STATUSr_BLKACC,1,-1,0,IDB_CA_CPU_HW_STATUSr_OFFSET,0,&(r._idb_ca_cpu_hw_status),1)

/*******************************************************************************
 * End of 'IDB_CA_CPU_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_LPBK_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_LPBK_CONTROL.
 */
#define READ_IDB_CA_LPBK_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_LPBK_CONTROLr_BLKACC,1,n,0,IDB_CA_LPBK_CONTROLr_OFFSET,0,(r._idb_ca_lpbk_control),1)
#define WRITE_IDB_CA_LPBK_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_CONTROLr_BLKACC,1,n,0,IDB_CA_LPBK_CONTROLr_OFFSET,0,&(r._idb_ca_lpbk_control),1)
#define WRITE_IDB_CA_LPBK_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_CONTROLr_BLKACC,1,-1,0,IDB_CA_LPBK_CONTROLr_OFFSET,0,&(r._idb_ca_lpbk_control),1)

/*******************************************************************************
 * End of 'IDB_CA_LPBK_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_LPBK_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_LPBK_CT_CONTROL.
 */
#define READ_IDB_CA_LPBK_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_LPBK_CT_CONTROLr_BLKACC,1,n,0,IDB_CA_LPBK_CT_CONTROLr_OFFSET,0,(r._idb_ca_lpbk_ct_control),1)
#define WRITE_IDB_CA_LPBK_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_CT_CONTROLr_BLKACC,1,n,0,IDB_CA_LPBK_CT_CONTROLr_OFFSET,0,&(r._idb_ca_lpbk_ct_control),1)
#define WRITE_IDB_CA_LPBK_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_CT_CONTROLr_BLKACC,1,-1,0,IDB_CA_LPBK_CT_CONTROLr_OFFSET,0,&(r._idb_ca_lpbk_ct_control),1)

/*******************************************************************************
 * End of 'IDB_CA_LPBK_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_LPBK_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_LPBK_ECC_STATUS.
 */
#define READ_IDB_CA_LPBK_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_LPBK_ECC_STATUSr_BLKACC,1,n,0,IDB_CA_LPBK_ECC_STATUSr_OFFSET,0,(r._idb_ca_lpbk_ecc_status),1)
#define WRITE_IDB_CA_LPBK_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_ECC_STATUSr_BLKACC,1,n,0,IDB_CA_LPBK_ECC_STATUSr_OFFSET,0,&(r._idb_ca_lpbk_ecc_status),1)
#define WRITE_IDB_CA_LPBK_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_ECC_STATUSr_BLKACC,1,-1,0,IDB_CA_LPBK_ECC_STATUSr_OFFSET,0,&(r._idb_ca_lpbk_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_CA_LPBK_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_LPBK_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_LPBK_HW_CONTROL.
 */
#define READ_IDB_CA_LPBK_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_LPBK_HW_CONTROLr_BLKACC,1,n,0,IDB_CA_LPBK_HW_CONTROLr_OFFSET,0,(r._idb_ca_lpbk_hw_control),1)
#define WRITE_IDB_CA_LPBK_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_HW_CONTROLr_BLKACC,1,n,0,IDB_CA_LPBK_HW_CONTROLr_OFFSET,0,&(r._idb_ca_lpbk_hw_control),1)
#define WRITE_IDB_CA_LPBK_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_HW_CONTROLr_BLKACC,1,-1,0,IDB_CA_LPBK_HW_CONTROLr_OFFSET,0,&(r._idb_ca_lpbk_hw_control),1)

/*******************************************************************************
 * End of 'IDB_CA_LPBK_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_CA_LPBK_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_CA_LPBK_HW_STATUS.
 */
#define READ_IDB_CA_LPBK_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_CA_LPBK_HW_STATUSr_BLKACC,1,n,0,IDB_CA_LPBK_HW_STATUSr_OFFSET,0,(r._idb_ca_lpbk_hw_status),1)
#define WRITE_IDB_CA_LPBK_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_HW_STATUSr_BLKACC,1,n,0,IDB_CA_LPBK_HW_STATUSr_OFFSET,0,&(r._idb_ca_lpbk_hw_status),1)
#define WRITE_IDB_CA_LPBK_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_CA_LPBK_HW_STATUSr_BLKACC,1,-1,0,IDB_CA_LPBK_HW_STATUSr_OFFSET,0,&(r._idb_ca_lpbk_hw_status),1)

/*******************************************************************************
 * End of 'IDB_CA_LPBK_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_DBG_B
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_DBG_B.
 */
#define READ_IDB_DBG_Br(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_DBG_Br_BLKACC,1,n,0,IDB_DBG_Br_OFFSET,0,(r._idb_dbg_b),1)
#define WRITE_IDB_DBG_Br(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_DBG_Br_BLKACC,1,n,0,IDB_DBG_Br_OFFSET,0,&(r._idb_dbg_b),1)
#define WRITE_IDB_DBG_Br_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_DBG_Br_BLKACC,1,-1,0,IDB_DBG_Br_OFFSET,0,&(r._idb_dbg_b),1)

/*******************************************************************************
 * End of 'IDB_DBG_Br'
 */




/*******************************************************************************
 * REGISTER:  IDB_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_HW_CONTROL.
 */
#define READ_IDB_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_HW_CONTROLr_BLKACC,1,n,0,IDB_HW_CONTROLr_OFFSET,0,(r._idb_hw_control),1)
#define WRITE_IDB_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_HW_CONTROLr_BLKACC,1,n,0,IDB_HW_CONTROLr_OFFSET,0,&(r._idb_hw_control),1)
#define WRITE_IDB_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_HW_CONTROLr_BLKACC,1,-1,0,IDB_HW_CONTROLr_OFFSET,0,&(r._idb_hw_control),1)

/*******************************************************************************
 * End of 'IDB_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_IS_TDM_CAL_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_IS_TDM_CAL_ECC_STATUS.
 */
#define READ_IDB_IS_TDM_CAL_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_IS_TDM_CAL_ECC_STATUSr_BLKACC,1,n,0,IDB_IS_TDM_CAL_ECC_STATUSr_OFFSET,0,(r._idb_is_tdm_cal_ecc_status),1)
#define WRITE_IDB_IS_TDM_CAL_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_IS_TDM_CAL_ECC_STATUSr_BLKACC,1,n,0,IDB_IS_TDM_CAL_ECC_STATUSr_OFFSET,0,&(r._idb_is_tdm_cal_ecc_status),1)
#define WRITE_IDB_IS_TDM_CAL_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_IS_TDM_CAL_ECC_STATUSr_BLKACC,1,-1,0,IDB_IS_TDM_CAL_ECC_STATUSr_OFFSET,0,&(r._idb_is_tdm_cal_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_IS_TDM_CAL_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_BANK_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_BANK_CONFIG.
 */
#define READ_IDB_OBM0_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM0_BANK_CONFIGr_OFFSET,0,(r._idb_obm0_bank_config),1)
#define WRITE_IDB_OBM0_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM0_BANK_CONFIGr_OFFSET,0,&(r._idb_obm0_bank_config),1)
#define WRITE_IDB_OBM0_BANK_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_BANK_CONFIGr_BLKACC,1,-1,0,IDB_OBM0_BANK_CONFIGr_OFFSET,0,&(r._idb_obm0_bank_config),1)

/*******************************************************************************
 * End of 'IDB_OBM0_BANK_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CA_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_CA_CONTROL.
 */
#define READ_IDB_OBM0_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM0_CA_CONTROLr_OFFSET,0,(r._idb_obm0_ca_control),1)
#define WRITE_IDB_OBM0_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM0_CA_CONTROLr_OFFSET,0,&(r._idb_obm0_ca_control),1)
#define WRITE_IDB_OBM0_CA_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_CONTROLr_BLKACC,1,-1,0,IDB_OBM0_CA_CONTROLr_OFFSET,0,&(r._idb_obm0_ca_control),1)

/*******************************************************************************
 * End of 'IDB_OBM0_CA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CA_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_CA_CT_CONTROL.
 */
#define READ_IDB_OBM0_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM0_CA_CT_CONTROLr_OFFSET,0,(r._idb_obm0_ca_ct_control),1)
#define WRITE_IDB_OBM0_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM0_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm0_ca_ct_control),1)
#define WRITE_IDB_OBM0_CA_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_CT_CONTROLr_BLKACC,1,-1,0,IDB_OBM0_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm0_ca_ct_control),1)

/*******************************************************************************
 * End of 'IDB_OBM0_CA_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_CA_ECC_STATUS.
 */
#define READ_IDB_OBM0_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM0_CA_ECC_STATUSr_OFFSET,0,(r._idb_obm0_ca_ecc_status),1)
#define WRITE_IDB_OBM0_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM0_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_ca_ecc_status),1)
#define WRITE_IDB_OBM0_CA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM0_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_ca_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM0_CA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CA_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_CA_HW_CONTROL.
 */
#define READ_IDB_OBM0_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM0_CA_HW_CONTROLr_OFFSET,0,(r._idb_obm0_ca_hw_control),1)
#define WRITE_IDB_OBM0_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM0_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm0_ca_hw_control),1)
#define WRITE_IDB_OBM0_CA_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_HW_CONTROLr_BLKACC,1,-1,0,IDB_OBM0_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm0_ca_hw_control),1)

/*******************************************************************************
 * End of 'IDB_OBM0_CA_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CA_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_CA_HW_STATUS.
 */
#define READ_IDB_OBM0_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM0_CA_HW_STATUSr_OFFSET,0,(r._idb_obm0_ca_hw_status),2)
#define WRITE_IDB_OBM0_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM0_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm0_ca_hw_status),2)
#define WRITE_IDB_OBM0_CA_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_HW_STATUSr_BLKACC,1,-1,0,IDB_OBM0_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm0_ca_hw_status),2)

/*******************************************************************************
 * End of 'IDB_OBM0_CA_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CA_POINTER_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_CA_POINTER_STATUS.
 */
#define READ_IDB_OBM0_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM0_CA_POINTER_STATUSr_OFFSET,0,(r._idb_obm0_ca_pointer_status),2)
#define WRITE_IDB_OBM0_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM0_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm0_ca_pointer_status),2)
#define WRITE_IDB_OBM0_CA_POINTER_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CA_POINTER_STATUSr_BLKACC,1,-1,0,IDB_OBM0_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm0_ca_pointer_status),2)

/*******************************************************************************
 * End of 'IDB_OBM0_CA_POINTER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_CONTROL.
 */
#define READ_IDB_OBM0_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_CONTROLr_BLKACC,1,n,0,IDB_OBM0_CONTROLr_OFFSET,0,(r._idb_obm0_control),1)
#define WRITE_IDB_OBM0_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CONTROLr_BLKACC,1,n,0,IDB_OBM0_CONTROLr_OFFSET,0,&(r._idb_obm0_control),1)
#define WRITE_IDB_OBM0_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CONTROLr_BLKACC,1,-1,0,IDB_OBM0_CONTROLr_OFFSET,0,&(r._idb_obm0_control),1)

/*******************************************************************************
 * End of 'IDB_OBM0_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_CT_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_CT_THRESHOLD.
 */
#define READ_IDB_OBM0_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM0_CT_THRESHOLDr_OFFSET,i,(r._idb_obm0_ct_threshold),2)
#define WRITE_IDB_OBM0_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM0_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm0_ct_threshold),2)
#define WRITE_IDB_OBM0_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_CT_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM0_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm0_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM0_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_DATA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM0_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM0_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm0_data_ecc_status),1)
#define WRITE_IDB_OBM0_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM0_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_data_ecc_status),1)
#define WRITE_IDB_OBM0_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_DATA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM0_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_DBG_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DBG_A.
 */
#define READ_IDB_OBM0_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_DBG_Ar_BLKACC,1,n,0,IDB_OBM0_DBG_Ar_OFFSET,i,(r._idb_obm0_dbg_a),1)
#define WRITE_IDB_OBM0_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_DBG_Ar_BLKACC,1,n,0,IDB_OBM0_DBG_Ar_OFFSET,i,&(r._idb_obm0_dbg_a),1)
#define WRITE_IDB_OBM0_DBG_Ar_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_DBG_Ar_BLKACC,1,-1,0,IDB_OBM0_DBG_Ar_OFFSET,i,&(r._idb_obm0_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DBG_Ar'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_DSCP_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM0_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM0_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm0_dscp_map_port0),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM0_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_dscp_map_port0),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM0_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_DSCP_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM0_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM0_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm0_dscp_map_port1),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM0_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_dscp_map_port1),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM0_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_DSCP_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM0_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM0_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm0_dscp_map_port2),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM0_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_dscp_map_port2),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM0_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_DSCP_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM0_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM0_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm0_dscp_map_port3),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM0_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_dscp_map_port3),1)
#define WRITE_IDB_OBM0_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_DSCP_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM0_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM0_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_ETAG_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM0_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM0_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm0_etag_map_port0),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM0_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_etag_map_port0),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM0_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_ETAG_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM0_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM0_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm0_etag_map_port1),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM0_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_etag_map_port1),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM0_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_ETAG_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM0_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM0_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm0_etag_map_port2),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM0_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_etag_map_port2),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM0_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM0_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_ETAG_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM0_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM0_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM0_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm0_etag_map_port3),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM0_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_etag_map_port3),1)
#define WRITE_IDB_OBM0_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_ETAG_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM0_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM0_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_FC_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_FC_THRESHOLD.
 */
#define READ_IDB_OBM0_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM0_FC_THRESHOLDr_OFFSET,i,(r._idb_obm0_fc_threshold),2)
#define WRITE_IDB_OBM0_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM0_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm0_fc_threshold),2)
#define WRITE_IDB_OBM0_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_FC_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM0_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm0_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM0_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_FLOW_CONTROL_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM0_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM0_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm0_flow_control_config),2)
#define WRITE_IDB_OBM0_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM0_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm0_flow_control_config),2)
#define WRITE_IDB_OBM0_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_FLOW_CONTROL_CONFIGr_BLKACC,1,-1,0,IDB_OBM0_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm0_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM0_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm0_flow_control_event_count),2)
#define WRITE_IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm0_flow_control_event_count),2)
#define WRITE_IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,-1,0,IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm0_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_INNER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_INNER_TPID.
 */
#define READ_IDB_OBM0_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM0_INNER_TPIDr_OFFSET,0,(r._idb_obm0_inner_tpid),1)
#define WRITE_IDB_OBM0_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM0_INNER_TPIDr_OFFSET,0,&(r._idb_obm0_inner_tpid),1)
#define WRITE_IDB_OBM0_INNER_TPIDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_INNER_TPIDr_BLKACC,1,-1,0,IDB_OBM0_INNER_TPIDr_OFFSET,0,&(r._idb_obm0_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM0_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless0_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossless1_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_hi_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm0_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm0_lossy_lo_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM0_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_MAX_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_MAX_USAGE.
 */
#define READ_IDB_OBM0_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM0_MAX_USAGEr_OFFSET,0,(r._idb_obm0_max_usage),2)
#define WRITE_IDB_OBM0_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM0_MAX_USAGEr_OFFSET,0,&(r._idb_obm0_max_usage),2)
#define WRITE_IDB_OBM0_MAX_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_MAX_USAGEr_BLKACC,1,-1,0,IDB_OBM0_MAX_USAGEr_OFFSET,0,&(r._idb_obm0_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM0_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_MAX_USAGE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM0_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM0_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm0_max_usage_select),1)
#define WRITE_IDB_OBM0_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM0_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm0_max_usage_select),1)
#define WRITE_IDB_OBM0_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_MAX_USAGE_SELECTr_BLKACC,1,-1,0,IDB_OBM0_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm0_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM0_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_NIV_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM0_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM0_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm0_niv_ethertype),1)
#define WRITE_IDB_OBM0_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM0_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_niv_ethertype),1)
#define WRITE_IDB_OBM0_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_NIV_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM0_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM0_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID.
 */
#define READ_IDB_OBM0_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM0_OUTER_TPIDr_OFFSET,i,(r._idb_obm0_outer_tpid),1)
#define WRITE_IDB_OBM0_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM0_OUTER_TPIDr_OFFSET,i,&(r._idb_obm0_outer_tpid),1)
#define WRITE_IDB_OBM0_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPIDr_BLKACC,1,-1,0,IDB_OBM0_OUTER_TPIDr_OFFSET,i,&(r._idb_obm0_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID_0.
 */
#define READ_IDB_OBM0_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM0_OUTER_TPID_0r_OFFSET,0,(r._idb_obm0_outer_tpid_0),1)
#define WRITE_IDB_OBM0_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM0_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm0_outer_tpid_0),1)
#define WRITE_IDB_OBM0_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_0r_BLKACC,1,-1,0,IDB_OBM0_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm0_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID_1.
 */
#define READ_IDB_OBM0_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM0_OUTER_TPID_1r_OFFSET,0,(r._idb_obm0_outer_tpid_1),1)
#define WRITE_IDB_OBM0_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM0_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm0_outer_tpid_1),1)
#define WRITE_IDB_OBM0_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_1r_BLKACC,1,-1,0,IDB_OBM0_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm0_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID_2.
 */
#define READ_IDB_OBM0_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM0_OUTER_TPID_2r_OFFSET,0,(r._idb_obm0_outer_tpid_2),1)
#define WRITE_IDB_OBM0_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM0_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm0_outer_tpid_2),1)
#define WRITE_IDB_OBM0_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_2r_BLKACC,1,-1,0,IDB_OBM0_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm0_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OUTER_TPID_3.
 */
#define READ_IDB_OBM0_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM0_OUTER_TPID_3r_OFFSET,0,(r._idb_obm0_outer_tpid_3),1)
#define WRITE_IDB_OBM0_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM0_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm0_outer_tpid_3),1)
#define WRITE_IDB_OBM0_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OUTER_TPID_3r_BLKACC,1,-1,0,IDB_OBM0_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm0_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_OVERSUB_MON_PARITY_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_OVERSUB_MON_PARITY_STATUS.
 */
#define READ_IDB_OBM0_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM0_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,(r._idb_obm0_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM0_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM0_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm0_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM0_OVERSUB_MON_PARITY_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,-1,0,IDB_OBM0_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm0_oversub_mon_parity_status),1)

/*******************************************************************************
 * End of 'IDB_OBM0_OVERSUB_MON_PARITY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_PE_ETHERTYPE.
 */
#define READ_IDB_OBM0_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM0_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm0_pe_ethertype),1)
#define WRITE_IDB_OBM0_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM0_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_pe_ethertype),1)
#define WRITE_IDB_OBM0_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PE_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM0_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm0_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PORT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_PORT_CONFIG.
 */
#define READ_IDB_OBM0_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM0_PORT_CONFIGr_OFFSET,i,(r._idb_obm0_port_config),1)
#define WRITE_IDB_OBM0_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM0_PORT_CONFIGr_OFFSET,i,&(r._idb_obm0_port_config),1)
#define WRITE_IDB_OBM0_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PORT_CONFIGr_BLKACC,1,-1,0,IDB_OBM0_PORT_CONFIGr_OFFSET,i,&(r._idb_obm0_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_PRI_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM0_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM0_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm0_pri_map_port0),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM0_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_pri_map_port0),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM0_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm0_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_PRI_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM0_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM0_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm0_pri_map_port1),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM0_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_pri_map_port1),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM0_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm0_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_PRI_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM0_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM0_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm0_pri_map_port2),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM0_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_pri_map_port2),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM0_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm0_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM0_PRI_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM0_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM0_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM0_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm0_pri_map_port3),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM0_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_pri_map_port3),1)
#define WRITE_IDB_OBM0_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM0_PRI_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM0_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm0_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM0_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PROTOCOL_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM0_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM0_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm0_protocol_control_0),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM0_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm0_protocol_control_0),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_0r_BLKACC,1,-1,0,IDB_OBM0_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm0_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM0_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PROTOCOL_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM0_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM0_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm0_protocol_control_1),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM0_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm0_protocol_control_1),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_1r_BLKACC,1,-1,0,IDB_OBM0_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm0_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM0_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_PROTOCOL_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM0_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM0_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm0_protocol_control_2),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM0_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm0_protocol_control_2),2)
#define WRITE_IDB_OBM0_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_PROTOCOL_CONTROL_2r_BLKACC,1,-1,0,IDB_OBM0_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm0_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM0_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_QUEUE_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_QUEUE_ECC_STATUS.
 */
#define READ_IDB_OBM0_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM0_QUEUE_ECC_STATUSr_OFFSET,0,(r._idb_obm0_queue_ecc_status),1)
#define WRITE_IDB_OBM0_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM0_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_queue_ecc_status),1)
#define WRITE_IDB_OBM0_QUEUE_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_QUEUE_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM0_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm0_queue_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM0_QUEUE_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_QUEUE_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_QUEUE_SER_CONTROL.
 */
#define READ_IDB_OBM0_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM0_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM0_QUEUE_SER_CONTROLr_OFFSET,0,(r._idb_obm0_queue_ser_control), 1)
#define WRITE_IDB_OBM0_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM0_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM0_QUEUE_SER_CONTROLr_OFFSET,0,&(r._idb_obm0_queue_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM0_QUEUE_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_RAM_CONTROL.
 */
#define READ_IDB_OBM0_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM0_RAM_CONTROLr_OFFSET,0,(r._idb_obm0_ram_control),1)
#define WRITE_IDB_OBM0_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM0_RAM_CONTROLr_OFFSET,0,&(r._idb_obm0_ram_control),1)
#define WRITE_IDB_OBM0_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_RAM_CONTROLr_BLKACC,1,-1,0,IDB_OBM0_RAM_CONTROLr_OFFSET,0,&(r._idb_obm0_ram_control),1)

/*******************************************************************************
 * End of 'IDB_OBM0_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_SER_CONTROL.
 */
#define READ_IDB_OBM0_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM0_SER_CONTROLr_BLKACC,1,IDB_OBM0_SER_CONTROLr_OFFSET,0,(r._idb_obm0_ser_control), 1)
#define WRITE_IDB_OBM0_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM0_SER_CONTROLr_BLKACC,1,IDB_OBM0_SER_CONTROLr_OFFSET,0,&(r._idb_obm0_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM0_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_SHARED_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_SHARED_CONFIG.
 */
#define READ_IDB_OBM0_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM0_SHARED_CONFIGr_OFFSET,0,(r._idb_obm0_shared_config),1)
#define WRITE_IDB_OBM0_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM0_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm0_shared_config),1)
#define WRITE_IDB_OBM0_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_SHARED_CONFIGr_BLKACC,1,-1,0,IDB_OBM0_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm0_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM0_SHARED_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_SHARED_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM0_SHARED_USAGE.
 */
#define READ_IDB_OBM0_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM0_SHARED_USAGEr_OFFSET,0,(r._idb_obm0_shared_usage),1)
#define WRITE_IDB_OBM0_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM0_SHARED_USAGEr_OFFSET,0,&(r._idb_obm0_shared_usage),1)
#define WRITE_IDB_OBM0_SHARED_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_SHARED_USAGEr_BLKACC,1,-1,0,IDB_OBM0_SHARED_USAGEr_OFFSET,0,&(r._idb_obm0_shared_usage),1)

/*******************************************************************************
 * End of 'IDB_OBM0_SHARED_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_THRESHOLD.
 */
#define READ_IDB_OBM0_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_THRESHOLDr_BLKACC,1,n,0,IDB_OBM0_THRESHOLDr_OFFSET,i,(r._idb_obm0_threshold),2)
#define WRITE_IDB_OBM0_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_THRESHOLDr_BLKACC,1,n,0,IDB_OBM0_THRESHOLDr_OFFSET,i,&(r._idb_obm0_threshold),2)
#define WRITE_IDB_OBM0_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM0_THRESHOLDr_OFFSET,i,&(r._idb_obm0_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM0_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM0_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM0_USAGE.
 */
#define READ_IDB_OBM0_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM0_USAGEr_BLKACC,1,n,0,IDB_OBM0_USAGEr_OFFSET,i,(r._idb_obm0_usage),2)
#define WRITE_IDB_OBM0_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_USAGEr_BLKACC,1,n,0,IDB_OBM0_USAGEr_OFFSET,i,&(r._idb_obm0_usage),2)
#define WRITE_IDB_OBM0_USAGEr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM0_USAGEr_BLKACC,1,-1,0,IDB_OBM0_USAGEr_OFFSET,i,&(r._idb_obm0_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM0_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_BANK_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_BANK_CONFIG.
 */
#define READ_IDB_OBM1_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM1_BANK_CONFIGr_OFFSET,0,(r._idb_obm1_bank_config),1)
#define WRITE_IDB_OBM1_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM1_BANK_CONFIGr_OFFSET,0,&(r._idb_obm1_bank_config),1)
#define WRITE_IDB_OBM1_BANK_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_BANK_CONFIGr_BLKACC,1,-1,0,IDB_OBM1_BANK_CONFIGr_OFFSET,0,&(r._idb_obm1_bank_config),1)

/*******************************************************************************
 * End of 'IDB_OBM1_BANK_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CA_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_CA_CONTROL.
 */
#define READ_IDB_OBM1_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM1_CA_CONTROLr_OFFSET,0,(r._idb_obm1_ca_control),1)
#define WRITE_IDB_OBM1_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM1_CA_CONTROLr_OFFSET,0,&(r._idb_obm1_ca_control),1)
#define WRITE_IDB_OBM1_CA_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_CONTROLr_BLKACC,1,-1,0,IDB_OBM1_CA_CONTROLr_OFFSET,0,&(r._idb_obm1_ca_control),1)

/*******************************************************************************
 * End of 'IDB_OBM1_CA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CA_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_CA_CT_CONTROL.
 */
#define READ_IDB_OBM1_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM1_CA_CT_CONTROLr_OFFSET,0,(r._idb_obm1_ca_ct_control),1)
#define WRITE_IDB_OBM1_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM1_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm1_ca_ct_control),1)
#define WRITE_IDB_OBM1_CA_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_CT_CONTROLr_BLKACC,1,-1,0,IDB_OBM1_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm1_ca_ct_control),1)

/*******************************************************************************
 * End of 'IDB_OBM1_CA_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_CA_ECC_STATUS.
 */
#define READ_IDB_OBM1_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM1_CA_ECC_STATUSr_OFFSET,0,(r._idb_obm1_ca_ecc_status),1)
#define WRITE_IDB_OBM1_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM1_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_ca_ecc_status),1)
#define WRITE_IDB_OBM1_CA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM1_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_ca_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM1_CA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CA_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_CA_HW_CONTROL.
 */
#define READ_IDB_OBM1_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM1_CA_HW_CONTROLr_OFFSET,0,(r._idb_obm1_ca_hw_control),1)
#define WRITE_IDB_OBM1_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM1_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm1_ca_hw_control),1)
#define WRITE_IDB_OBM1_CA_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_HW_CONTROLr_BLKACC,1,-1,0,IDB_OBM1_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm1_ca_hw_control),1)

/*******************************************************************************
 * End of 'IDB_OBM1_CA_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CA_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_CA_HW_STATUS.
 */
#define READ_IDB_OBM1_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM1_CA_HW_STATUSr_OFFSET,0,(r._idb_obm1_ca_hw_status),2)
#define WRITE_IDB_OBM1_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM1_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm1_ca_hw_status),2)
#define WRITE_IDB_OBM1_CA_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_HW_STATUSr_BLKACC,1,-1,0,IDB_OBM1_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm1_ca_hw_status),2)

/*******************************************************************************
 * End of 'IDB_OBM1_CA_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CA_POINTER_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_CA_POINTER_STATUS.
 */
#define READ_IDB_OBM1_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM1_CA_POINTER_STATUSr_OFFSET,0,(r._idb_obm1_ca_pointer_status),2)
#define WRITE_IDB_OBM1_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM1_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm1_ca_pointer_status),2)
#define WRITE_IDB_OBM1_CA_POINTER_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CA_POINTER_STATUSr_BLKACC,1,-1,0,IDB_OBM1_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm1_ca_pointer_status),2)

/*******************************************************************************
 * End of 'IDB_OBM1_CA_POINTER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_CONTROL.
 */
#define READ_IDB_OBM1_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_CONTROLr_BLKACC,1,n,0,IDB_OBM1_CONTROLr_OFFSET,0,(r._idb_obm1_control),1)
#define WRITE_IDB_OBM1_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CONTROLr_BLKACC,1,n,0,IDB_OBM1_CONTROLr_OFFSET,0,&(r._idb_obm1_control),1)
#define WRITE_IDB_OBM1_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CONTROLr_BLKACC,1,-1,0,IDB_OBM1_CONTROLr_OFFSET,0,&(r._idb_obm1_control),1)

/*******************************************************************************
 * End of 'IDB_OBM1_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_CT_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_CT_THRESHOLD.
 */
#define READ_IDB_OBM1_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM1_CT_THRESHOLDr_OFFSET,i,(r._idb_obm1_ct_threshold),2)
#define WRITE_IDB_OBM1_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM1_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm1_ct_threshold),2)
#define WRITE_IDB_OBM1_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_CT_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM1_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm1_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM1_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_DATA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM1_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM1_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm1_data_ecc_status),1)
#define WRITE_IDB_OBM1_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM1_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_data_ecc_status),1)
#define WRITE_IDB_OBM1_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_DATA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM1_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_DBG_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DBG_A.
 */
#define READ_IDB_OBM1_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_DBG_Ar_BLKACC,1,n,0,IDB_OBM1_DBG_Ar_OFFSET,i,(r._idb_obm1_dbg_a),1)
#define WRITE_IDB_OBM1_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_DBG_Ar_BLKACC,1,n,0,IDB_OBM1_DBG_Ar_OFFSET,i,&(r._idb_obm1_dbg_a),1)
#define WRITE_IDB_OBM1_DBG_Ar_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_DBG_Ar_BLKACC,1,-1,0,IDB_OBM1_DBG_Ar_OFFSET,i,&(r._idb_obm1_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DBG_Ar'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_DSCP_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM1_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM1_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm1_dscp_map_port0),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM1_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_dscp_map_port0),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM1_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_DSCP_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM1_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM1_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm1_dscp_map_port1),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM1_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_dscp_map_port1),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM1_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_DSCP_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM1_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM1_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm1_dscp_map_port2),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM1_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_dscp_map_port2),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM1_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_DSCP_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM1_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM1_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm1_dscp_map_port3),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM1_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_dscp_map_port3),1)
#define WRITE_IDB_OBM1_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_DSCP_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM1_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM1_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_ETAG_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM1_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM1_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm1_etag_map_port0),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM1_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_etag_map_port0),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM1_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_ETAG_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM1_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM1_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm1_etag_map_port1),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM1_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_etag_map_port1),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM1_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_ETAG_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM1_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM1_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm1_etag_map_port2),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM1_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_etag_map_port2),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM1_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM1_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_ETAG_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM1_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM1_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM1_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm1_etag_map_port3),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM1_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_etag_map_port3),1)
#define WRITE_IDB_OBM1_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_ETAG_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM1_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM1_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_FC_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_FC_THRESHOLD.
 */
#define READ_IDB_OBM1_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM1_FC_THRESHOLDr_OFFSET,i,(r._idb_obm1_fc_threshold),2)
#define WRITE_IDB_OBM1_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM1_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm1_fc_threshold),2)
#define WRITE_IDB_OBM1_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_FC_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM1_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm1_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM1_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_FLOW_CONTROL_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM1_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM1_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm1_flow_control_config),2)
#define WRITE_IDB_OBM1_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM1_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm1_flow_control_config),2)
#define WRITE_IDB_OBM1_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_FLOW_CONTROL_CONFIGr_BLKACC,1,-1,0,IDB_OBM1_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm1_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM1_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm1_flow_control_event_count),2)
#define WRITE_IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm1_flow_control_event_count),2)
#define WRITE_IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,-1,0,IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm1_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_INNER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_INNER_TPID.
 */
#define READ_IDB_OBM1_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM1_INNER_TPIDr_OFFSET,0,(r._idb_obm1_inner_tpid),1)
#define WRITE_IDB_OBM1_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM1_INNER_TPIDr_OFFSET,0,&(r._idb_obm1_inner_tpid),1)
#define WRITE_IDB_OBM1_INNER_TPIDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_INNER_TPIDr_BLKACC,1,-1,0,IDB_OBM1_INNER_TPIDr_OFFSET,0,&(r._idb_obm1_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM1_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless0_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossless1_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_hi_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm1_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm1_lossy_lo_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM1_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_MAX_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_MAX_USAGE.
 */
#define READ_IDB_OBM1_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM1_MAX_USAGEr_OFFSET,0,(r._idb_obm1_max_usage),2)
#define WRITE_IDB_OBM1_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM1_MAX_USAGEr_OFFSET,0,&(r._idb_obm1_max_usage),2)
#define WRITE_IDB_OBM1_MAX_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_MAX_USAGEr_BLKACC,1,-1,0,IDB_OBM1_MAX_USAGEr_OFFSET,0,&(r._idb_obm1_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM1_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_MAX_USAGE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM1_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM1_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm1_max_usage_select),1)
#define WRITE_IDB_OBM1_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM1_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm1_max_usage_select),1)
#define WRITE_IDB_OBM1_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_MAX_USAGE_SELECTr_BLKACC,1,-1,0,IDB_OBM1_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm1_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM1_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_NIV_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM1_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM1_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm1_niv_ethertype),1)
#define WRITE_IDB_OBM1_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM1_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_niv_ethertype),1)
#define WRITE_IDB_OBM1_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_NIV_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM1_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM1_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID.
 */
#define READ_IDB_OBM1_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM1_OUTER_TPIDr_OFFSET,i,(r._idb_obm1_outer_tpid),1)
#define WRITE_IDB_OBM1_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM1_OUTER_TPIDr_OFFSET,i,&(r._idb_obm1_outer_tpid),1)
#define WRITE_IDB_OBM1_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPIDr_BLKACC,1,-1,0,IDB_OBM1_OUTER_TPIDr_OFFSET,i,&(r._idb_obm1_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID_0.
 */
#define READ_IDB_OBM1_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM1_OUTER_TPID_0r_OFFSET,0,(r._idb_obm1_outer_tpid_0),1)
#define WRITE_IDB_OBM1_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM1_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm1_outer_tpid_0),1)
#define WRITE_IDB_OBM1_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_0r_BLKACC,1,-1,0,IDB_OBM1_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm1_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID_1.
 */
#define READ_IDB_OBM1_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM1_OUTER_TPID_1r_OFFSET,0,(r._idb_obm1_outer_tpid_1),1)
#define WRITE_IDB_OBM1_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM1_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm1_outer_tpid_1),1)
#define WRITE_IDB_OBM1_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_1r_BLKACC,1,-1,0,IDB_OBM1_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm1_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID_2.
 */
#define READ_IDB_OBM1_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM1_OUTER_TPID_2r_OFFSET,0,(r._idb_obm1_outer_tpid_2),1)
#define WRITE_IDB_OBM1_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM1_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm1_outer_tpid_2),1)
#define WRITE_IDB_OBM1_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_2r_BLKACC,1,-1,0,IDB_OBM1_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm1_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OUTER_TPID_3.
 */
#define READ_IDB_OBM1_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM1_OUTER_TPID_3r_OFFSET,0,(r._idb_obm1_outer_tpid_3),1)
#define WRITE_IDB_OBM1_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM1_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm1_outer_tpid_3),1)
#define WRITE_IDB_OBM1_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OUTER_TPID_3r_BLKACC,1,-1,0,IDB_OBM1_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm1_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_OVERSUB_MON_PARITY_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_OVERSUB_MON_PARITY_STATUS.
 */
#define READ_IDB_OBM1_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM1_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,(r._idb_obm1_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM1_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM1_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm1_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM1_OVERSUB_MON_PARITY_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,-1,0,IDB_OBM1_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm1_oversub_mon_parity_status),1)

/*******************************************************************************
 * End of 'IDB_OBM1_OVERSUB_MON_PARITY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_PE_ETHERTYPE.
 */
#define READ_IDB_OBM1_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM1_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm1_pe_ethertype),1)
#define WRITE_IDB_OBM1_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM1_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_pe_ethertype),1)
#define WRITE_IDB_OBM1_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PE_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM1_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm1_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PORT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_PORT_CONFIG.
 */
#define READ_IDB_OBM1_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM1_PORT_CONFIGr_OFFSET,i,(r._idb_obm1_port_config),1)
#define WRITE_IDB_OBM1_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM1_PORT_CONFIGr_OFFSET,i,&(r._idb_obm1_port_config),1)
#define WRITE_IDB_OBM1_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PORT_CONFIGr_BLKACC,1,-1,0,IDB_OBM1_PORT_CONFIGr_OFFSET,i,&(r._idb_obm1_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_PRI_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM1_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM1_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm1_pri_map_port0),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM1_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_pri_map_port0),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM1_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm1_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_PRI_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM1_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM1_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm1_pri_map_port1),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM1_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_pri_map_port1),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM1_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm1_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_PRI_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM1_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM1_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm1_pri_map_port2),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM1_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_pri_map_port2),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM1_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm1_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM1_PRI_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM1_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM1_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM1_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm1_pri_map_port3),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM1_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_pri_map_port3),1)
#define WRITE_IDB_OBM1_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM1_PRI_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM1_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm1_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM1_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PROTOCOL_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM1_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM1_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm1_protocol_control_0),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM1_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm1_protocol_control_0),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_0r_BLKACC,1,-1,0,IDB_OBM1_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm1_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM1_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PROTOCOL_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM1_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM1_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm1_protocol_control_1),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM1_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm1_protocol_control_1),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_1r_BLKACC,1,-1,0,IDB_OBM1_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm1_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM1_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_PROTOCOL_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM1_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM1_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm1_protocol_control_2),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM1_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm1_protocol_control_2),2)
#define WRITE_IDB_OBM1_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_PROTOCOL_CONTROL_2r_BLKACC,1,-1,0,IDB_OBM1_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm1_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM1_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_QUEUE_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_QUEUE_ECC_STATUS.
 */
#define READ_IDB_OBM1_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM1_QUEUE_ECC_STATUSr_OFFSET,0,(r._idb_obm1_queue_ecc_status),1)
#define WRITE_IDB_OBM1_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM1_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_queue_ecc_status),1)
#define WRITE_IDB_OBM1_QUEUE_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_QUEUE_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM1_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm1_queue_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM1_QUEUE_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_QUEUE_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_QUEUE_SER_CONTROL.
 */
#define READ_IDB_OBM1_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM1_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM1_QUEUE_SER_CONTROLr_OFFSET,0,(r._idb_obm1_queue_ser_control), 1)
#define WRITE_IDB_OBM1_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM1_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM1_QUEUE_SER_CONTROLr_OFFSET,0,&(r._idb_obm1_queue_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM1_QUEUE_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_RAM_CONTROL.
 */
#define READ_IDB_OBM1_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM1_RAM_CONTROLr_OFFSET,0,(r._idb_obm1_ram_control),1)
#define WRITE_IDB_OBM1_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM1_RAM_CONTROLr_OFFSET,0,&(r._idb_obm1_ram_control),1)
#define WRITE_IDB_OBM1_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_RAM_CONTROLr_BLKACC,1,-1,0,IDB_OBM1_RAM_CONTROLr_OFFSET,0,&(r._idb_obm1_ram_control),1)

/*******************************************************************************
 * End of 'IDB_OBM1_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_SER_CONTROL.
 */
#define READ_IDB_OBM1_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM1_SER_CONTROLr_BLKACC,1,IDB_OBM1_SER_CONTROLr_OFFSET,0,(r._idb_obm1_ser_control), 1)
#define WRITE_IDB_OBM1_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM1_SER_CONTROLr_BLKACC,1,IDB_OBM1_SER_CONTROLr_OFFSET,0,&(r._idb_obm1_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM1_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_SHARED_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_SHARED_CONFIG.
 */
#define READ_IDB_OBM1_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM1_SHARED_CONFIGr_OFFSET,0,(r._idb_obm1_shared_config),1)
#define WRITE_IDB_OBM1_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM1_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm1_shared_config),1)
#define WRITE_IDB_OBM1_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_SHARED_CONFIGr_BLKACC,1,-1,0,IDB_OBM1_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm1_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM1_SHARED_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_SHARED_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM1_SHARED_USAGE.
 */
#define READ_IDB_OBM1_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM1_SHARED_USAGEr_OFFSET,0,(r._idb_obm1_shared_usage),1)
#define WRITE_IDB_OBM1_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM1_SHARED_USAGEr_OFFSET,0,&(r._idb_obm1_shared_usage),1)
#define WRITE_IDB_OBM1_SHARED_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_SHARED_USAGEr_BLKACC,1,-1,0,IDB_OBM1_SHARED_USAGEr_OFFSET,0,&(r._idb_obm1_shared_usage),1)

/*******************************************************************************
 * End of 'IDB_OBM1_SHARED_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_THRESHOLD.
 */
#define READ_IDB_OBM1_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_THRESHOLDr_BLKACC,1,n,0,IDB_OBM1_THRESHOLDr_OFFSET,i,(r._idb_obm1_threshold),2)
#define WRITE_IDB_OBM1_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_THRESHOLDr_BLKACC,1,n,0,IDB_OBM1_THRESHOLDr_OFFSET,i,&(r._idb_obm1_threshold),2)
#define WRITE_IDB_OBM1_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM1_THRESHOLDr_OFFSET,i,&(r._idb_obm1_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM1_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM1_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM1_USAGE.
 */
#define READ_IDB_OBM1_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM1_USAGEr_BLKACC,1,n,0,IDB_OBM1_USAGEr_OFFSET,i,(r._idb_obm1_usage),2)
#define WRITE_IDB_OBM1_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_USAGEr_BLKACC,1,n,0,IDB_OBM1_USAGEr_OFFSET,i,&(r._idb_obm1_usage),2)
#define WRITE_IDB_OBM1_USAGEr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM1_USAGEr_BLKACC,1,-1,0,IDB_OBM1_USAGEr_OFFSET,i,&(r._idb_obm1_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM1_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_BANK_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_BANK_CONFIG.
 */
#define READ_IDB_OBM2_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM2_BANK_CONFIGr_OFFSET,0,(r._idb_obm2_bank_config),1)
#define WRITE_IDB_OBM2_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM2_BANK_CONFIGr_OFFSET,0,&(r._idb_obm2_bank_config),1)
#define WRITE_IDB_OBM2_BANK_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_BANK_CONFIGr_BLKACC,1,-1,0,IDB_OBM2_BANK_CONFIGr_OFFSET,0,&(r._idb_obm2_bank_config),1)

/*******************************************************************************
 * End of 'IDB_OBM2_BANK_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CA_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_CA_CONTROL.
 */
#define READ_IDB_OBM2_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM2_CA_CONTROLr_OFFSET,0,(r._idb_obm2_ca_control),1)
#define WRITE_IDB_OBM2_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM2_CA_CONTROLr_OFFSET,0,&(r._idb_obm2_ca_control),1)
#define WRITE_IDB_OBM2_CA_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_CONTROLr_BLKACC,1,-1,0,IDB_OBM2_CA_CONTROLr_OFFSET,0,&(r._idb_obm2_ca_control),1)

/*******************************************************************************
 * End of 'IDB_OBM2_CA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CA_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_CA_CT_CONTROL.
 */
#define READ_IDB_OBM2_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM2_CA_CT_CONTROLr_OFFSET,0,(r._idb_obm2_ca_ct_control),1)
#define WRITE_IDB_OBM2_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM2_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm2_ca_ct_control),1)
#define WRITE_IDB_OBM2_CA_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_CT_CONTROLr_BLKACC,1,-1,0,IDB_OBM2_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm2_ca_ct_control),1)

/*******************************************************************************
 * End of 'IDB_OBM2_CA_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_CA_ECC_STATUS.
 */
#define READ_IDB_OBM2_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM2_CA_ECC_STATUSr_OFFSET,0,(r._idb_obm2_ca_ecc_status),1)
#define WRITE_IDB_OBM2_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM2_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_ca_ecc_status),1)
#define WRITE_IDB_OBM2_CA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM2_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_ca_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM2_CA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CA_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_CA_HW_CONTROL.
 */
#define READ_IDB_OBM2_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM2_CA_HW_CONTROLr_OFFSET,0,(r._idb_obm2_ca_hw_control),1)
#define WRITE_IDB_OBM2_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM2_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm2_ca_hw_control),1)
#define WRITE_IDB_OBM2_CA_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_HW_CONTROLr_BLKACC,1,-1,0,IDB_OBM2_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm2_ca_hw_control),1)

/*******************************************************************************
 * End of 'IDB_OBM2_CA_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CA_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_CA_HW_STATUS.
 */
#define READ_IDB_OBM2_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM2_CA_HW_STATUSr_OFFSET,0,(r._idb_obm2_ca_hw_status),2)
#define WRITE_IDB_OBM2_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM2_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm2_ca_hw_status),2)
#define WRITE_IDB_OBM2_CA_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_HW_STATUSr_BLKACC,1,-1,0,IDB_OBM2_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm2_ca_hw_status),2)

/*******************************************************************************
 * End of 'IDB_OBM2_CA_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CA_POINTER_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_CA_POINTER_STATUS.
 */
#define READ_IDB_OBM2_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM2_CA_POINTER_STATUSr_OFFSET,0,(r._idb_obm2_ca_pointer_status),2)
#define WRITE_IDB_OBM2_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM2_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm2_ca_pointer_status),2)
#define WRITE_IDB_OBM2_CA_POINTER_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CA_POINTER_STATUSr_BLKACC,1,-1,0,IDB_OBM2_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm2_ca_pointer_status),2)

/*******************************************************************************
 * End of 'IDB_OBM2_CA_POINTER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_CONTROL.
 */
#define READ_IDB_OBM2_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_CONTROLr_BLKACC,1,n,0,IDB_OBM2_CONTROLr_OFFSET,0,(r._idb_obm2_control),1)
#define WRITE_IDB_OBM2_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CONTROLr_BLKACC,1,n,0,IDB_OBM2_CONTROLr_OFFSET,0,&(r._idb_obm2_control),1)
#define WRITE_IDB_OBM2_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CONTROLr_BLKACC,1,-1,0,IDB_OBM2_CONTROLr_OFFSET,0,&(r._idb_obm2_control),1)

/*******************************************************************************
 * End of 'IDB_OBM2_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_CT_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_CT_THRESHOLD.
 */
#define READ_IDB_OBM2_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM2_CT_THRESHOLDr_OFFSET,i,(r._idb_obm2_ct_threshold),2)
#define WRITE_IDB_OBM2_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM2_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm2_ct_threshold),2)
#define WRITE_IDB_OBM2_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_CT_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM2_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm2_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM2_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_DATA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM2_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM2_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm2_data_ecc_status),1)
#define WRITE_IDB_OBM2_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM2_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_data_ecc_status),1)
#define WRITE_IDB_OBM2_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_DATA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM2_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_DBG_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DBG_A.
 */
#define READ_IDB_OBM2_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_DBG_Ar_BLKACC,1,n,0,IDB_OBM2_DBG_Ar_OFFSET,i,(r._idb_obm2_dbg_a),1)
#define WRITE_IDB_OBM2_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_DBG_Ar_BLKACC,1,n,0,IDB_OBM2_DBG_Ar_OFFSET,i,&(r._idb_obm2_dbg_a),1)
#define WRITE_IDB_OBM2_DBG_Ar_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_DBG_Ar_BLKACC,1,-1,0,IDB_OBM2_DBG_Ar_OFFSET,i,&(r._idb_obm2_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DBG_Ar'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_DSCP_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM2_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM2_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm2_dscp_map_port0),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM2_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_dscp_map_port0),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM2_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_DSCP_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM2_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM2_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm2_dscp_map_port1),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM2_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_dscp_map_port1),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM2_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_DSCP_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM2_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM2_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm2_dscp_map_port2),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM2_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_dscp_map_port2),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM2_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_DSCP_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM2_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM2_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm2_dscp_map_port3),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM2_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_dscp_map_port3),1)
#define WRITE_IDB_OBM2_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_DSCP_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM2_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM2_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_ETAG_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM2_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM2_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm2_etag_map_port0),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM2_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_etag_map_port0),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM2_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_ETAG_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM2_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM2_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm2_etag_map_port1),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM2_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_etag_map_port1),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM2_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_ETAG_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM2_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM2_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm2_etag_map_port2),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM2_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_etag_map_port2),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM2_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM2_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_ETAG_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM2_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM2_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM2_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm2_etag_map_port3),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM2_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_etag_map_port3),1)
#define WRITE_IDB_OBM2_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_ETAG_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM2_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM2_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_FC_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_FC_THRESHOLD.
 */
#define READ_IDB_OBM2_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM2_FC_THRESHOLDr_OFFSET,i,(r._idb_obm2_fc_threshold),2)
#define WRITE_IDB_OBM2_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM2_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm2_fc_threshold),2)
#define WRITE_IDB_OBM2_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_FC_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM2_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm2_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM2_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_FLOW_CONTROL_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM2_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM2_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm2_flow_control_config),2)
#define WRITE_IDB_OBM2_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM2_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm2_flow_control_config),2)
#define WRITE_IDB_OBM2_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_FLOW_CONTROL_CONFIGr_BLKACC,1,-1,0,IDB_OBM2_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm2_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM2_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm2_flow_control_event_count),2)
#define WRITE_IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm2_flow_control_event_count),2)
#define WRITE_IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,-1,0,IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm2_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_INNER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_INNER_TPID.
 */
#define READ_IDB_OBM2_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM2_INNER_TPIDr_OFFSET,0,(r._idb_obm2_inner_tpid),1)
#define WRITE_IDB_OBM2_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM2_INNER_TPIDr_OFFSET,0,&(r._idb_obm2_inner_tpid),1)
#define WRITE_IDB_OBM2_INNER_TPIDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_INNER_TPIDr_BLKACC,1,-1,0,IDB_OBM2_INNER_TPIDr_OFFSET,0,&(r._idb_obm2_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM2_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless0_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossless1_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_hi_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm2_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm2_lossy_lo_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM2_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_MAX_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_MAX_USAGE.
 */
#define READ_IDB_OBM2_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM2_MAX_USAGEr_OFFSET,0,(r._idb_obm2_max_usage),2)
#define WRITE_IDB_OBM2_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM2_MAX_USAGEr_OFFSET,0,&(r._idb_obm2_max_usage),2)
#define WRITE_IDB_OBM2_MAX_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_MAX_USAGEr_BLKACC,1,-1,0,IDB_OBM2_MAX_USAGEr_OFFSET,0,&(r._idb_obm2_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM2_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_MAX_USAGE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM2_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM2_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm2_max_usage_select),1)
#define WRITE_IDB_OBM2_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM2_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm2_max_usage_select),1)
#define WRITE_IDB_OBM2_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_MAX_USAGE_SELECTr_BLKACC,1,-1,0,IDB_OBM2_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm2_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM2_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_NIV_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM2_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM2_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm2_niv_ethertype),1)
#define WRITE_IDB_OBM2_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM2_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_niv_ethertype),1)
#define WRITE_IDB_OBM2_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_NIV_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM2_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM2_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID.
 */
#define READ_IDB_OBM2_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM2_OUTER_TPIDr_OFFSET,i,(r._idb_obm2_outer_tpid),1)
#define WRITE_IDB_OBM2_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM2_OUTER_TPIDr_OFFSET,i,&(r._idb_obm2_outer_tpid),1)
#define WRITE_IDB_OBM2_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPIDr_BLKACC,1,-1,0,IDB_OBM2_OUTER_TPIDr_OFFSET,i,&(r._idb_obm2_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID_0.
 */
#define READ_IDB_OBM2_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM2_OUTER_TPID_0r_OFFSET,0,(r._idb_obm2_outer_tpid_0),1)
#define WRITE_IDB_OBM2_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM2_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm2_outer_tpid_0),1)
#define WRITE_IDB_OBM2_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_0r_BLKACC,1,-1,0,IDB_OBM2_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm2_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID_1.
 */
#define READ_IDB_OBM2_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM2_OUTER_TPID_1r_OFFSET,0,(r._idb_obm2_outer_tpid_1),1)
#define WRITE_IDB_OBM2_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM2_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm2_outer_tpid_1),1)
#define WRITE_IDB_OBM2_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_1r_BLKACC,1,-1,0,IDB_OBM2_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm2_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID_2.
 */
#define READ_IDB_OBM2_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM2_OUTER_TPID_2r_OFFSET,0,(r._idb_obm2_outer_tpid_2),1)
#define WRITE_IDB_OBM2_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM2_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm2_outer_tpid_2),1)
#define WRITE_IDB_OBM2_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_2r_BLKACC,1,-1,0,IDB_OBM2_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm2_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OUTER_TPID_3.
 */
#define READ_IDB_OBM2_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM2_OUTER_TPID_3r_OFFSET,0,(r._idb_obm2_outer_tpid_3),1)
#define WRITE_IDB_OBM2_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM2_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm2_outer_tpid_3),1)
#define WRITE_IDB_OBM2_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OUTER_TPID_3r_BLKACC,1,-1,0,IDB_OBM2_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm2_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_OVERSUB_MON_PARITY_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_OVERSUB_MON_PARITY_STATUS.
 */
#define READ_IDB_OBM2_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM2_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,(r._idb_obm2_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM2_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM2_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm2_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM2_OVERSUB_MON_PARITY_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,-1,0,IDB_OBM2_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm2_oversub_mon_parity_status),1)

/*******************************************************************************
 * End of 'IDB_OBM2_OVERSUB_MON_PARITY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_PE_ETHERTYPE.
 */
#define READ_IDB_OBM2_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM2_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm2_pe_ethertype),1)
#define WRITE_IDB_OBM2_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM2_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_pe_ethertype),1)
#define WRITE_IDB_OBM2_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PE_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM2_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm2_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PORT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_PORT_CONFIG.
 */
#define READ_IDB_OBM2_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM2_PORT_CONFIGr_OFFSET,i,(r._idb_obm2_port_config),1)
#define WRITE_IDB_OBM2_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM2_PORT_CONFIGr_OFFSET,i,&(r._idb_obm2_port_config),1)
#define WRITE_IDB_OBM2_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PORT_CONFIGr_BLKACC,1,-1,0,IDB_OBM2_PORT_CONFIGr_OFFSET,i,&(r._idb_obm2_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_PRI_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM2_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM2_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm2_pri_map_port0),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM2_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_pri_map_port0),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM2_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm2_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_PRI_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM2_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM2_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm2_pri_map_port1),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM2_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_pri_map_port1),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM2_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm2_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_PRI_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM2_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM2_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm2_pri_map_port2),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM2_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_pri_map_port2),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM2_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm2_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM2_PRI_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM2_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM2_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM2_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm2_pri_map_port3),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM2_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_pri_map_port3),1)
#define WRITE_IDB_OBM2_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM2_PRI_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM2_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm2_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM2_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PROTOCOL_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM2_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM2_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm2_protocol_control_0),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM2_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm2_protocol_control_0),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_0r_BLKACC,1,-1,0,IDB_OBM2_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm2_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM2_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PROTOCOL_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM2_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM2_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm2_protocol_control_1),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM2_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm2_protocol_control_1),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_1r_BLKACC,1,-1,0,IDB_OBM2_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm2_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM2_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_PROTOCOL_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM2_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM2_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm2_protocol_control_2),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM2_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm2_protocol_control_2),2)
#define WRITE_IDB_OBM2_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_PROTOCOL_CONTROL_2r_BLKACC,1,-1,0,IDB_OBM2_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm2_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM2_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_QUEUE_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_QUEUE_ECC_STATUS.
 */
#define READ_IDB_OBM2_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM2_QUEUE_ECC_STATUSr_OFFSET,0,(r._idb_obm2_queue_ecc_status),1)
#define WRITE_IDB_OBM2_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM2_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_queue_ecc_status),1)
#define WRITE_IDB_OBM2_QUEUE_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_QUEUE_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM2_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm2_queue_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM2_QUEUE_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_QUEUE_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_QUEUE_SER_CONTROL.
 */
#define READ_IDB_OBM2_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM2_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM2_QUEUE_SER_CONTROLr_OFFSET,0,(r._idb_obm2_queue_ser_control), 1)
#define WRITE_IDB_OBM2_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM2_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM2_QUEUE_SER_CONTROLr_OFFSET,0,&(r._idb_obm2_queue_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM2_QUEUE_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_RAM_CONTROL.
 */
#define READ_IDB_OBM2_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM2_RAM_CONTROLr_OFFSET,0,(r._idb_obm2_ram_control),1)
#define WRITE_IDB_OBM2_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM2_RAM_CONTROLr_OFFSET,0,&(r._idb_obm2_ram_control),1)
#define WRITE_IDB_OBM2_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_RAM_CONTROLr_BLKACC,1,-1,0,IDB_OBM2_RAM_CONTROLr_OFFSET,0,&(r._idb_obm2_ram_control),1)

/*******************************************************************************
 * End of 'IDB_OBM2_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_SER_CONTROL.
 */
#define READ_IDB_OBM2_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM2_SER_CONTROLr_BLKACC,1,IDB_OBM2_SER_CONTROLr_OFFSET,0,(r._idb_obm2_ser_control), 1)
#define WRITE_IDB_OBM2_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM2_SER_CONTROLr_BLKACC,1,IDB_OBM2_SER_CONTROLr_OFFSET,0,&(r._idb_obm2_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM2_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_SHARED_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_SHARED_CONFIG.
 */
#define READ_IDB_OBM2_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM2_SHARED_CONFIGr_OFFSET,0,(r._idb_obm2_shared_config),1)
#define WRITE_IDB_OBM2_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM2_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm2_shared_config),1)
#define WRITE_IDB_OBM2_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_SHARED_CONFIGr_BLKACC,1,-1,0,IDB_OBM2_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm2_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM2_SHARED_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_SHARED_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM2_SHARED_USAGE.
 */
#define READ_IDB_OBM2_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM2_SHARED_USAGEr_OFFSET,0,(r._idb_obm2_shared_usage),1)
#define WRITE_IDB_OBM2_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM2_SHARED_USAGEr_OFFSET,0,&(r._idb_obm2_shared_usage),1)
#define WRITE_IDB_OBM2_SHARED_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_SHARED_USAGEr_BLKACC,1,-1,0,IDB_OBM2_SHARED_USAGEr_OFFSET,0,&(r._idb_obm2_shared_usage),1)

/*******************************************************************************
 * End of 'IDB_OBM2_SHARED_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_THRESHOLD.
 */
#define READ_IDB_OBM2_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_THRESHOLDr_BLKACC,1,n,0,IDB_OBM2_THRESHOLDr_OFFSET,i,(r._idb_obm2_threshold),2)
#define WRITE_IDB_OBM2_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_THRESHOLDr_BLKACC,1,n,0,IDB_OBM2_THRESHOLDr_OFFSET,i,&(r._idb_obm2_threshold),2)
#define WRITE_IDB_OBM2_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM2_THRESHOLDr_OFFSET,i,&(r._idb_obm2_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM2_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM2_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM2_USAGE.
 */
#define READ_IDB_OBM2_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM2_USAGEr_BLKACC,1,n,0,IDB_OBM2_USAGEr_OFFSET,i,(r._idb_obm2_usage),2)
#define WRITE_IDB_OBM2_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_USAGEr_BLKACC,1,n,0,IDB_OBM2_USAGEr_OFFSET,i,&(r._idb_obm2_usage),2)
#define WRITE_IDB_OBM2_USAGEr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM2_USAGEr_BLKACC,1,-1,0,IDB_OBM2_USAGEr_OFFSET,i,&(r._idb_obm2_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM2_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_BANK_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_BANK_CONFIG.
 */
#define READ_IDB_OBM3_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM3_BANK_CONFIGr_OFFSET,0,(r._idb_obm3_bank_config),1)
#define WRITE_IDB_OBM3_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM3_BANK_CONFIGr_OFFSET,0,&(r._idb_obm3_bank_config),1)
#define WRITE_IDB_OBM3_BANK_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_BANK_CONFIGr_BLKACC,1,-1,0,IDB_OBM3_BANK_CONFIGr_OFFSET,0,&(r._idb_obm3_bank_config),1)

/*******************************************************************************
 * End of 'IDB_OBM3_BANK_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CA_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_CA_CONTROL.
 */
#define READ_IDB_OBM3_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM3_CA_CONTROLr_OFFSET,0,(r._idb_obm3_ca_control),1)
#define WRITE_IDB_OBM3_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM3_CA_CONTROLr_OFFSET,0,&(r._idb_obm3_ca_control),1)
#define WRITE_IDB_OBM3_CA_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_CONTROLr_BLKACC,1,-1,0,IDB_OBM3_CA_CONTROLr_OFFSET,0,&(r._idb_obm3_ca_control),1)

/*******************************************************************************
 * End of 'IDB_OBM3_CA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CA_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_CA_CT_CONTROL.
 */
#define READ_IDB_OBM3_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM3_CA_CT_CONTROLr_OFFSET,0,(r._idb_obm3_ca_ct_control),1)
#define WRITE_IDB_OBM3_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM3_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm3_ca_ct_control),1)
#define WRITE_IDB_OBM3_CA_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_CT_CONTROLr_BLKACC,1,-1,0,IDB_OBM3_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm3_ca_ct_control),1)

/*******************************************************************************
 * End of 'IDB_OBM3_CA_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_CA_ECC_STATUS.
 */
#define READ_IDB_OBM3_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM3_CA_ECC_STATUSr_OFFSET,0,(r._idb_obm3_ca_ecc_status),1)
#define WRITE_IDB_OBM3_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM3_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_ca_ecc_status),1)
#define WRITE_IDB_OBM3_CA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM3_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_ca_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM3_CA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CA_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_CA_HW_CONTROL.
 */
#define READ_IDB_OBM3_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM3_CA_HW_CONTROLr_OFFSET,0,(r._idb_obm3_ca_hw_control),1)
#define WRITE_IDB_OBM3_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM3_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm3_ca_hw_control),1)
#define WRITE_IDB_OBM3_CA_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_HW_CONTROLr_BLKACC,1,-1,0,IDB_OBM3_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm3_ca_hw_control),1)

/*******************************************************************************
 * End of 'IDB_OBM3_CA_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CA_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_CA_HW_STATUS.
 */
#define READ_IDB_OBM3_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM3_CA_HW_STATUSr_OFFSET,0,(r._idb_obm3_ca_hw_status),2)
#define WRITE_IDB_OBM3_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM3_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm3_ca_hw_status),2)
#define WRITE_IDB_OBM3_CA_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_HW_STATUSr_BLKACC,1,-1,0,IDB_OBM3_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm3_ca_hw_status),2)

/*******************************************************************************
 * End of 'IDB_OBM3_CA_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CA_POINTER_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_CA_POINTER_STATUS.
 */
#define READ_IDB_OBM3_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM3_CA_POINTER_STATUSr_OFFSET,0,(r._idb_obm3_ca_pointer_status),2)
#define WRITE_IDB_OBM3_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM3_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm3_ca_pointer_status),2)
#define WRITE_IDB_OBM3_CA_POINTER_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CA_POINTER_STATUSr_BLKACC,1,-1,0,IDB_OBM3_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm3_ca_pointer_status),2)

/*******************************************************************************
 * End of 'IDB_OBM3_CA_POINTER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_CONTROL.
 */
#define READ_IDB_OBM3_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_CONTROLr_BLKACC,1,n,0,IDB_OBM3_CONTROLr_OFFSET,0,(r._idb_obm3_control),1)
#define WRITE_IDB_OBM3_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CONTROLr_BLKACC,1,n,0,IDB_OBM3_CONTROLr_OFFSET,0,&(r._idb_obm3_control),1)
#define WRITE_IDB_OBM3_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CONTROLr_BLKACC,1,-1,0,IDB_OBM3_CONTROLr_OFFSET,0,&(r._idb_obm3_control),1)

/*******************************************************************************
 * End of 'IDB_OBM3_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_CT_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_CT_THRESHOLD.
 */
#define READ_IDB_OBM3_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM3_CT_THRESHOLDr_OFFSET,i,(r._idb_obm3_ct_threshold),2)
#define WRITE_IDB_OBM3_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM3_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm3_ct_threshold),2)
#define WRITE_IDB_OBM3_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_CT_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM3_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm3_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM3_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_DATA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM3_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM3_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm3_data_ecc_status),1)
#define WRITE_IDB_OBM3_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM3_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_data_ecc_status),1)
#define WRITE_IDB_OBM3_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_DATA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM3_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_DBG_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DBG_A.
 */
#define READ_IDB_OBM3_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_DBG_Ar_BLKACC,1,n,0,IDB_OBM3_DBG_Ar_OFFSET,i,(r._idb_obm3_dbg_a),1)
#define WRITE_IDB_OBM3_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_DBG_Ar_BLKACC,1,n,0,IDB_OBM3_DBG_Ar_OFFSET,i,&(r._idb_obm3_dbg_a),1)
#define WRITE_IDB_OBM3_DBG_Ar_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_DBG_Ar_BLKACC,1,-1,0,IDB_OBM3_DBG_Ar_OFFSET,i,&(r._idb_obm3_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DBG_Ar'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_DSCP_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM3_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM3_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm3_dscp_map_port0),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM3_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_dscp_map_port0),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM3_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_DSCP_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM3_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM3_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm3_dscp_map_port1),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM3_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_dscp_map_port1),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM3_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_DSCP_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM3_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM3_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm3_dscp_map_port2),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM3_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_dscp_map_port2),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM3_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_DSCP_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM3_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM3_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm3_dscp_map_port3),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM3_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_dscp_map_port3),1)
#define WRITE_IDB_OBM3_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_DSCP_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM3_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM3_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_ETAG_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM3_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM3_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm3_etag_map_port0),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM3_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_etag_map_port0),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM3_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_ETAG_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM3_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM3_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm3_etag_map_port1),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM3_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_etag_map_port1),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM3_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_ETAG_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM3_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM3_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm3_etag_map_port2),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM3_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_etag_map_port2),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM3_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM3_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_ETAG_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM3_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM3_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM3_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm3_etag_map_port3),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM3_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_etag_map_port3),1)
#define WRITE_IDB_OBM3_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_ETAG_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM3_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM3_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_FC_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_FC_THRESHOLD.
 */
#define READ_IDB_OBM3_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM3_FC_THRESHOLDr_OFFSET,i,(r._idb_obm3_fc_threshold),2)
#define WRITE_IDB_OBM3_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM3_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm3_fc_threshold),2)
#define WRITE_IDB_OBM3_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_FC_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM3_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm3_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM3_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_FLOW_CONTROL_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM3_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM3_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm3_flow_control_config),2)
#define WRITE_IDB_OBM3_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM3_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm3_flow_control_config),2)
#define WRITE_IDB_OBM3_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_FLOW_CONTROL_CONFIGr_BLKACC,1,-1,0,IDB_OBM3_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm3_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM3_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm3_flow_control_event_count),2)
#define WRITE_IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm3_flow_control_event_count),2)
#define WRITE_IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,-1,0,IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm3_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_INNER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_INNER_TPID.
 */
#define READ_IDB_OBM3_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM3_INNER_TPIDr_OFFSET,0,(r._idb_obm3_inner_tpid),1)
#define WRITE_IDB_OBM3_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM3_INNER_TPIDr_OFFSET,0,&(r._idb_obm3_inner_tpid),1)
#define WRITE_IDB_OBM3_INNER_TPIDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_INNER_TPIDr_BLKACC,1,-1,0,IDB_OBM3_INNER_TPIDr_OFFSET,0,&(r._idb_obm3_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM3_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless0_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossless1_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_hi_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm3_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm3_lossy_lo_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM3_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_MAX_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_MAX_USAGE.
 */
#define READ_IDB_OBM3_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM3_MAX_USAGEr_OFFSET,0,(r._idb_obm3_max_usage),2)
#define WRITE_IDB_OBM3_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM3_MAX_USAGEr_OFFSET,0,&(r._idb_obm3_max_usage),2)
#define WRITE_IDB_OBM3_MAX_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_MAX_USAGEr_BLKACC,1,-1,0,IDB_OBM3_MAX_USAGEr_OFFSET,0,&(r._idb_obm3_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM3_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_MAX_USAGE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM3_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM3_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm3_max_usage_select),1)
#define WRITE_IDB_OBM3_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM3_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm3_max_usage_select),1)
#define WRITE_IDB_OBM3_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_MAX_USAGE_SELECTr_BLKACC,1,-1,0,IDB_OBM3_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm3_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM3_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_NIV_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM3_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM3_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm3_niv_ethertype),1)
#define WRITE_IDB_OBM3_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM3_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_niv_ethertype),1)
#define WRITE_IDB_OBM3_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_NIV_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM3_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM3_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID.
 */
#define READ_IDB_OBM3_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM3_OUTER_TPIDr_OFFSET,i,(r._idb_obm3_outer_tpid),1)
#define WRITE_IDB_OBM3_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM3_OUTER_TPIDr_OFFSET,i,&(r._idb_obm3_outer_tpid),1)
#define WRITE_IDB_OBM3_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPIDr_BLKACC,1,-1,0,IDB_OBM3_OUTER_TPIDr_OFFSET,i,&(r._idb_obm3_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID_0.
 */
#define READ_IDB_OBM3_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM3_OUTER_TPID_0r_OFFSET,0,(r._idb_obm3_outer_tpid_0),1)
#define WRITE_IDB_OBM3_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM3_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm3_outer_tpid_0),1)
#define WRITE_IDB_OBM3_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_0r_BLKACC,1,-1,0,IDB_OBM3_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm3_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID_1.
 */
#define READ_IDB_OBM3_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM3_OUTER_TPID_1r_OFFSET,0,(r._idb_obm3_outer_tpid_1),1)
#define WRITE_IDB_OBM3_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM3_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm3_outer_tpid_1),1)
#define WRITE_IDB_OBM3_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_1r_BLKACC,1,-1,0,IDB_OBM3_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm3_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID_2.
 */
#define READ_IDB_OBM3_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM3_OUTER_TPID_2r_OFFSET,0,(r._idb_obm3_outer_tpid_2),1)
#define WRITE_IDB_OBM3_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM3_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm3_outer_tpid_2),1)
#define WRITE_IDB_OBM3_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_2r_BLKACC,1,-1,0,IDB_OBM3_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm3_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OUTER_TPID_3.
 */
#define READ_IDB_OBM3_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM3_OUTER_TPID_3r_OFFSET,0,(r._idb_obm3_outer_tpid_3),1)
#define WRITE_IDB_OBM3_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM3_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm3_outer_tpid_3),1)
#define WRITE_IDB_OBM3_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OUTER_TPID_3r_BLKACC,1,-1,0,IDB_OBM3_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm3_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_OVERSUB_MON_PARITY_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_OVERSUB_MON_PARITY_STATUS.
 */
#define READ_IDB_OBM3_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM3_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,(r._idb_obm3_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM3_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM3_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm3_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM3_OVERSUB_MON_PARITY_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,-1,0,IDB_OBM3_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm3_oversub_mon_parity_status),1)

/*******************************************************************************
 * End of 'IDB_OBM3_OVERSUB_MON_PARITY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_PE_ETHERTYPE.
 */
#define READ_IDB_OBM3_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM3_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm3_pe_ethertype),1)
#define WRITE_IDB_OBM3_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM3_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_pe_ethertype),1)
#define WRITE_IDB_OBM3_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PE_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM3_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm3_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PORT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_PORT_CONFIG.
 */
#define READ_IDB_OBM3_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM3_PORT_CONFIGr_OFFSET,i,(r._idb_obm3_port_config),1)
#define WRITE_IDB_OBM3_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM3_PORT_CONFIGr_OFFSET,i,&(r._idb_obm3_port_config),1)
#define WRITE_IDB_OBM3_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PORT_CONFIGr_BLKACC,1,-1,0,IDB_OBM3_PORT_CONFIGr_OFFSET,i,&(r._idb_obm3_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_PRI_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM3_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM3_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm3_pri_map_port0),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM3_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_pri_map_port0),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM3_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm3_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_PRI_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM3_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM3_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm3_pri_map_port1),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM3_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_pri_map_port1),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM3_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm3_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_PRI_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM3_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM3_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm3_pri_map_port2),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM3_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_pri_map_port2),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM3_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm3_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM3_PRI_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM3_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM3_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM3_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm3_pri_map_port3),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM3_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_pri_map_port3),1)
#define WRITE_IDB_OBM3_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM3_PRI_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM3_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm3_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM3_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PROTOCOL_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM3_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM3_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm3_protocol_control_0),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM3_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm3_protocol_control_0),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_0r_BLKACC,1,-1,0,IDB_OBM3_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm3_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM3_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PROTOCOL_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM3_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM3_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm3_protocol_control_1),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM3_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm3_protocol_control_1),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_1r_BLKACC,1,-1,0,IDB_OBM3_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm3_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM3_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_PROTOCOL_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM3_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM3_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm3_protocol_control_2),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM3_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm3_protocol_control_2),2)
#define WRITE_IDB_OBM3_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_PROTOCOL_CONTROL_2r_BLKACC,1,-1,0,IDB_OBM3_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm3_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM3_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_QUEUE_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_QUEUE_ECC_STATUS.
 */
#define READ_IDB_OBM3_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM3_QUEUE_ECC_STATUSr_OFFSET,0,(r._idb_obm3_queue_ecc_status),1)
#define WRITE_IDB_OBM3_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM3_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_queue_ecc_status),1)
#define WRITE_IDB_OBM3_QUEUE_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_QUEUE_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM3_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm3_queue_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM3_QUEUE_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_QUEUE_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_QUEUE_SER_CONTROL.
 */
#define READ_IDB_OBM3_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM3_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM3_QUEUE_SER_CONTROLr_OFFSET,0,(r._idb_obm3_queue_ser_control), 1)
#define WRITE_IDB_OBM3_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM3_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM3_QUEUE_SER_CONTROLr_OFFSET,0,&(r._idb_obm3_queue_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM3_QUEUE_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_RAM_CONTROL.
 */
#define READ_IDB_OBM3_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM3_RAM_CONTROLr_OFFSET,0,(r._idb_obm3_ram_control),1)
#define WRITE_IDB_OBM3_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM3_RAM_CONTROLr_OFFSET,0,&(r._idb_obm3_ram_control),1)
#define WRITE_IDB_OBM3_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_RAM_CONTROLr_BLKACC,1,-1,0,IDB_OBM3_RAM_CONTROLr_OFFSET,0,&(r._idb_obm3_ram_control),1)

/*******************************************************************************
 * End of 'IDB_OBM3_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_SER_CONTROL.
 */
#define READ_IDB_OBM3_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM3_SER_CONTROLr_BLKACC,1,IDB_OBM3_SER_CONTROLr_OFFSET,0,(r._idb_obm3_ser_control), 1)
#define WRITE_IDB_OBM3_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM3_SER_CONTROLr_BLKACC,1,IDB_OBM3_SER_CONTROLr_OFFSET,0,&(r._idb_obm3_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM3_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_SHARED_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_SHARED_CONFIG.
 */
#define READ_IDB_OBM3_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM3_SHARED_CONFIGr_OFFSET,0,(r._idb_obm3_shared_config),1)
#define WRITE_IDB_OBM3_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM3_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm3_shared_config),1)
#define WRITE_IDB_OBM3_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_SHARED_CONFIGr_BLKACC,1,-1,0,IDB_OBM3_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm3_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM3_SHARED_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_SHARED_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM3_SHARED_USAGE.
 */
#define READ_IDB_OBM3_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM3_SHARED_USAGEr_OFFSET,0,(r._idb_obm3_shared_usage),1)
#define WRITE_IDB_OBM3_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM3_SHARED_USAGEr_OFFSET,0,&(r._idb_obm3_shared_usage),1)
#define WRITE_IDB_OBM3_SHARED_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_SHARED_USAGEr_BLKACC,1,-1,0,IDB_OBM3_SHARED_USAGEr_OFFSET,0,&(r._idb_obm3_shared_usage),1)

/*******************************************************************************
 * End of 'IDB_OBM3_SHARED_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_THRESHOLD.
 */
#define READ_IDB_OBM3_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_THRESHOLDr_BLKACC,1,n,0,IDB_OBM3_THRESHOLDr_OFFSET,i,(r._idb_obm3_threshold),2)
#define WRITE_IDB_OBM3_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_THRESHOLDr_BLKACC,1,n,0,IDB_OBM3_THRESHOLDr_OFFSET,i,&(r._idb_obm3_threshold),2)
#define WRITE_IDB_OBM3_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM3_THRESHOLDr_OFFSET,i,&(r._idb_obm3_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM3_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM3_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM3_USAGE.
 */
#define READ_IDB_OBM3_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM3_USAGEr_BLKACC,1,n,0,IDB_OBM3_USAGEr_OFFSET,i,(r._idb_obm3_usage),2)
#define WRITE_IDB_OBM3_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_USAGEr_BLKACC,1,n,0,IDB_OBM3_USAGEr_OFFSET,i,&(r._idb_obm3_usage),2)
#define WRITE_IDB_OBM3_USAGEr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM3_USAGEr_BLKACC,1,-1,0,IDB_OBM3_USAGEr_OFFSET,i,&(r._idb_obm3_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM3_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_BANK_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_BANK_CONFIG.
 */
#define READ_IDB_OBM4_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM4_BANK_CONFIGr_OFFSET,0,(r._idb_obm4_bank_config),1)
#define WRITE_IDB_OBM4_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM4_BANK_CONFIGr_OFFSET,0,&(r._idb_obm4_bank_config),1)
#define WRITE_IDB_OBM4_BANK_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_BANK_CONFIGr_BLKACC,1,-1,0,IDB_OBM4_BANK_CONFIGr_OFFSET,0,&(r._idb_obm4_bank_config),1)

/*******************************************************************************
 * End of 'IDB_OBM4_BANK_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_CA_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_CA_CONTROL.
 */
#define READ_IDB_OBM4_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM4_CA_CONTROLr_OFFSET,0,(r._idb_obm4_ca_control),1)
#define WRITE_IDB_OBM4_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM4_CA_CONTROLr_OFFSET,0,&(r._idb_obm4_ca_control),1)
#define WRITE_IDB_OBM4_CA_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_CONTROLr_BLKACC,1,-1,0,IDB_OBM4_CA_CONTROLr_OFFSET,0,&(r._idb_obm4_ca_control),1)

/*******************************************************************************
 * End of 'IDB_OBM4_CA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_CA_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_CA_CT_CONTROL.
 */
#define READ_IDB_OBM4_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM4_CA_CT_CONTROLr_OFFSET,0,(r._idb_obm4_ca_ct_control),1)
#define WRITE_IDB_OBM4_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM4_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm4_ca_ct_control),1)
#define WRITE_IDB_OBM4_CA_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_CT_CONTROLr_BLKACC,1,-1,0,IDB_OBM4_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm4_ca_ct_control),1)

/*******************************************************************************
 * End of 'IDB_OBM4_CA_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_CA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_CA_ECC_STATUS.
 */
#define READ_IDB_OBM4_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM4_CA_ECC_STATUSr_OFFSET,0,(r._idb_obm4_ca_ecc_status),1)
#define WRITE_IDB_OBM4_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM4_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm4_ca_ecc_status),1)
#define WRITE_IDB_OBM4_CA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM4_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm4_ca_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM4_CA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_CA_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_CA_HW_CONTROL.
 */
#define READ_IDB_OBM4_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM4_CA_HW_CONTROLr_OFFSET,0,(r._idb_obm4_ca_hw_control),1)
#define WRITE_IDB_OBM4_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM4_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm4_ca_hw_control),1)
#define WRITE_IDB_OBM4_CA_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_HW_CONTROLr_BLKACC,1,-1,0,IDB_OBM4_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm4_ca_hw_control),1)

/*******************************************************************************
 * End of 'IDB_OBM4_CA_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_CA_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_CA_HW_STATUS.
 */
#define READ_IDB_OBM4_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM4_CA_HW_STATUSr_OFFSET,0,(r._idb_obm4_ca_hw_status),2)
#define WRITE_IDB_OBM4_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM4_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm4_ca_hw_status),2)
#define WRITE_IDB_OBM4_CA_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_HW_STATUSr_BLKACC,1,-1,0,IDB_OBM4_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm4_ca_hw_status),2)

/*******************************************************************************
 * End of 'IDB_OBM4_CA_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_CA_POINTER_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_CA_POINTER_STATUS.
 */
#define READ_IDB_OBM4_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM4_CA_POINTER_STATUSr_OFFSET,0,(r._idb_obm4_ca_pointer_status),2)
#define WRITE_IDB_OBM4_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM4_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm4_ca_pointer_status),2)
#define WRITE_IDB_OBM4_CA_POINTER_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CA_POINTER_STATUSr_BLKACC,1,-1,0,IDB_OBM4_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm4_ca_pointer_status),2)

/*******************************************************************************
 * End of 'IDB_OBM4_CA_POINTER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_CONTROL.
 */
#define READ_IDB_OBM4_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_CONTROLr_BLKACC,1,n,0,IDB_OBM4_CONTROLr_OFFSET,0,(r._idb_obm4_control),1)
#define WRITE_IDB_OBM4_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CONTROLr_BLKACC,1,n,0,IDB_OBM4_CONTROLr_OFFSET,0,&(r._idb_obm4_control),1)
#define WRITE_IDB_OBM4_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CONTROLr_BLKACC,1,-1,0,IDB_OBM4_CONTROLr_OFFSET,0,&(r._idb_obm4_control),1)

/*******************************************************************************
 * End of 'IDB_OBM4_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_CT_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_CT_THRESHOLD.
 */
#define READ_IDB_OBM4_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM4_CT_THRESHOLDr_OFFSET,i,(r._idb_obm4_ct_threshold),2)
#define WRITE_IDB_OBM4_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM4_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm4_ct_threshold),2)
#define WRITE_IDB_OBM4_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_CT_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM4_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm4_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM4_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_DATA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM4_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM4_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm4_data_ecc_status),1)
#define WRITE_IDB_OBM4_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM4_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm4_data_ecc_status),1)
#define WRITE_IDB_OBM4_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_DATA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM4_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm4_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM4_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_DBG_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_DBG_A.
 */
#define READ_IDB_OBM4_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_DBG_Ar_BLKACC,1,n,0,IDB_OBM4_DBG_Ar_OFFSET,i,(r._idb_obm4_dbg_a),1)
#define WRITE_IDB_OBM4_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_DBG_Ar_BLKACC,1,n,0,IDB_OBM4_DBG_Ar_OFFSET,i,&(r._idb_obm4_dbg_a),1)
#define WRITE_IDB_OBM4_DBG_Ar_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_DBG_Ar_BLKACC,1,-1,0,IDB_OBM4_DBG_Ar_OFFSET,i,&(r._idb_obm4_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM4_DBG_Ar'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_DSCP_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM4_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM4_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm4_dscp_map_port0),1)
#define WRITE_IDB_OBM4_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM4_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm4_dscp_map_port0),1)
#define WRITE_IDB_OBM4_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_DSCP_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM4_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm4_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM4_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_DSCP_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM4_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM4_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm4_dscp_map_port1),1)
#define WRITE_IDB_OBM4_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM4_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm4_dscp_map_port1),1)
#define WRITE_IDB_OBM4_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_DSCP_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM4_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm4_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM4_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_DSCP_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM4_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM4_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm4_dscp_map_port2),1)
#define WRITE_IDB_OBM4_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM4_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm4_dscp_map_port2),1)
#define WRITE_IDB_OBM4_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_DSCP_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM4_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm4_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM4_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_DSCP_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM4_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM4_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm4_dscp_map_port3),1)
#define WRITE_IDB_OBM4_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM4_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm4_dscp_map_port3),1)
#define WRITE_IDB_OBM4_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_DSCP_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM4_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm4_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM4_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_ETAG_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM4_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM4_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM4_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm4_etag_map_port0),1)
#define WRITE_IDB_OBM4_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM4_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm4_etag_map_port0),1)
#define WRITE_IDB_OBM4_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_ETAG_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM4_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm4_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM4_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_ETAG_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM4_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM4_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM4_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm4_etag_map_port1),1)
#define WRITE_IDB_OBM4_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM4_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm4_etag_map_port1),1)
#define WRITE_IDB_OBM4_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_ETAG_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM4_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm4_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM4_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_ETAG_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM4_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM4_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM4_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm4_etag_map_port2),1)
#define WRITE_IDB_OBM4_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM4_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm4_etag_map_port2),1)
#define WRITE_IDB_OBM4_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_ETAG_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM4_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm4_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM4_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_ETAG_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM4_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM4_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM4_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm4_etag_map_port3),1)
#define WRITE_IDB_OBM4_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM4_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm4_etag_map_port3),1)
#define WRITE_IDB_OBM4_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_ETAG_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM4_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm4_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM4_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_FC_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_FC_THRESHOLD.
 */
#define READ_IDB_OBM4_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM4_FC_THRESHOLDr_OFFSET,i,(r._idb_obm4_fc_threshold),2)
#define WRITE_IDB_OBM4_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM4_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm4_fc_threshold),2)
#define WRITE_IDB_OBM4_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_FC_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM4_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm4_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM4_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_FLOW_CONTROL_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM4_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM4_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm4_flow_control_config),2)
#define WRITE_IDB_OBM4_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM4_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm4_flow_control_config),2)
#define WRITE_IDB_OBM4_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_FLOW_CONTROL_CONFIGr_BLKACC,1,-1,0,IDB_OBM4_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm4_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM4_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm4_flow_control_event_count),2)
#define WRITE_IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm4_flow_control_event_count),2)
#define WRITE_IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,-1,0,IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm4_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM4_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_INNER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_INNER_TPID.
 */
#define READ_IDB_OBM4_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM4_INNER_TPIDr_OFFSET,0,(r._idb_obm4_inner_tpid),1)
#define WRITE_IDB_OBM4_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM4_INNER_TPIDr_OFFSET,0,&(r._idb_obm4_inner_tpid),1)
#define WRITE_IDB_OBM4_INNER_TPIDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_INNER_TPIDr_BLKACC,1,-1,0,IDB_OBM4_INNER_TPIDr_OFFSET,0,&(r._idb_obm4_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM4_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm4_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM4_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm4_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossless0_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM4_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm4_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM4_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm4_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossless1_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM4_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm4_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM4_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm4_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossy_hi_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM4_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm4_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM4_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm4_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm4_lossy_lo_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM4_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_MAX_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_MAX_USAGE.
 */
#define READ_IDB_OBM4_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM4_MAX_USAGEr_OFFSET,0,(r._idb_obm4_max_usage),2)
#define WRITE_IDB_OBM4_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM4_MAX_USAGEr_OFFSET,0,&(r._idb_obm4_max_usage),2)
#define WRITE_IDB_OBM4_MAX_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_MAX_USAGEr_BLKACC,1,-1,0,IDB_OBM4_MAX_USAGEr_OFFSET,0,&(r._idb_obm4_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM4_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_MAX_USAGE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM4_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM4_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm4_max_usage_select),1)
#define WRITE_IDB_OBM4_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM4_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm4_max_usage_select),1)
#define WRITE_IDB_OBM4_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_MAX_USAGE_SELECTr_BLKACC,1,-1,0,IDB_OBM4_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm4_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM4_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_NIV_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM4_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM4_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm4_niv_ethertype),1)
#define WRITE_IDB_OBM4_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM4_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm4_niv_ethertype),1)
#define WRITE_IDB_OBM4_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_NIV_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM4_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm4_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM4_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_OUTER_TPID.
 */
#define READ_IDB_OBM4_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM4_OUTER_TPIDr_OFFSET,i,(r._idb_obm4_outer_tpid),1)
#define WRITE_IDB_OBM4_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM4_OUTER_TPIDr_OFFSET,i,&(r._idb_obm4_outer_tpid),1)
#define WRITE_IDB_OBM4_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPIDr_BLKACC,1,-1,0,IDB_OBM4_OUTER_TPIDr_OFFSET,i,&(r._idb_obm4_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM4_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_OUTER_TPID_0.
 */
#define READ_IDB_OBM4_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM4_OUTER_TPID_0r_OFFSET,0,(r._idb_obm4_outer_tpid_0),1)
#define WRITE_IDB_OBM4_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM4_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm4_outer_tpid_0),1)
#define WRITE_IDB_OBM4_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPID_0r_BLKACC,1,-1,0,IDB_OBM4_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm4_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM4_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_OUTER_TPID_1.
 */
#define READ_IDB_OBM4_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM4_OUTER_TPID_1r_OFFSET,0,(r._idb_obm4_outer_tpid_1),1)
#define WRITE_IDB_OBM4_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM4_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm4_outer_tpid_1),1)
#define WRITE_IDB_OBM4_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPID_1r_BLKACC,1,-1,0,IDB_OBM4_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm4_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM4_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_OUTER_TPID_2.
 */
#define READ_IDB_OBM4_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM4_OUTER_TPID_2r_OFFSET,0,(r._idb_obm4_outer_tpid_2),1)
#define WRITE_IDB_OBM4_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM4_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm4_outer_tpid_2),1)
#define WRITE_IDB_OBM4_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPID_2r_BLKACC,1,-1,0,IDB_OBM4_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm4_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM4_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_OUTER_TPID_3.
 */
#define READ_IDB_OBM4_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM4_OUTER_TPID_3r_OFFSET,0,(r._idb_obm4_outer_tpid_3),1)
#define WRITE_IDB_OBM4_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM4_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm4_outer_tpid_3),1)
#define WRITE_IDB_OBM4_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OUTER_TPID_3r_BLKACC,1,-1,0,IDB_OBM4_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm4_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM4_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_OVERSUB_MON_PARITY_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_OVERSUB_MON_PARITY_STATUS.
 */
#define READ_IDB_OBM4_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM4_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,(r._idb_obm4_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM4_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM4_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm4_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM4_OVERSUB_MON_PARITY_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,-1,0,IDB_OBM4_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm4_oversub_mon_parity_status),1)

/*******************************************************************************
 * End of 'IDB_OBM4_OVERSUB_MON_PARITY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_PE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_PE_ETHERTYPE.
 */
#define READ_IDB_OBM4_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM4_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm4_pe_ethertype),1)
#define WRITE_IDB_OBM4_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM4_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm4_pe_ethertype),1)
#define WRITE_IDB_OBM4_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PE_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM4_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm4_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM4_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_PORT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_PORT_CONFIG.
 */
#define READ_IDB_OBM4_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM4_PORT_CONFIGr_OFFSET,i,(r._idb_obm4_port_config),1)
#define WRITE_IDB_OBM4_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM4_PORT_CONFIGr_OFFSET,i,&(r._idb_obm4_port_config),1)
#define WRITE_IDB_OBM4_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PORT_CONFIGr_BLKACC,1,-1,0,IDB_OBM4_PORT_CONFIGr_OFFSET,i,&(r._idb_obm4_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM4_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_PRI_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM4_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM4_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm4_pri_map_port0),1)
#define WRITE_IDB_OBM4_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM4_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm4_pri_map_port0),1)
#define WRITE_IDB_OBM4_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_PRI_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM4_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm4_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM4_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_PRI_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM4_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM4_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm4_pri_map_port1),1)
#define WRITE_IDB_OBM4_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM4_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm4_pri_map_port1),1)
#define WRITE_IDB_OBM4_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_PRI_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM4_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm4_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM4_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_PRI_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM4_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM4_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm4_pri_map_port2),1)
#define WRITE_IDB_OBM4_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM4_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm4_pri_map_port2),1)
#define WRITE_IDB_OBM4_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_PRI_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM4_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm4_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM4_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM4_PRI_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM4_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM4_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM4_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm4_pri_map_port3),1)
#define WRITE_IDB_OBM4_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM4_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm4_pri_map_port3),1)
#define WRITE_IDB_OBM4_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM4_PRI_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM4_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm4_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM4_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_PROTOCOL_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM4_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM4_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm4_protocol_control_0),2)
#define WRITE_IDB_OBM4_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM4_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm4_protocol_control_0),2)
#define WRITE_IDB_OBM4_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PROTOCOL_CONTROL_0r_BLKACC,1,-1,0,IDB_OBM4_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm4_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM4_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_PROTOCOL_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM4_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM4_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm4_protocol_control_1),2)
#define WRITE_IDB_OBM4_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM4_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm4_protocol_control_1),2)
#define WRITE_IDB_OBM4_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PROTOCOL_CONTROL_1r_BLKACC,1,-1,0,IDB_OBM4_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm4_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM4_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_PROTOCOL_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM4_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM4_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm4_protocol_control_2),2)
#define WRITE_IDB_OBM4_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM4_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm4_protocol_control_2),2)
#define WRITE_IDB_OBM4_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_PROTOCOL_CONTROL_2r_BLKACC,1,-1,0,IDB_OBM4_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm4_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM4_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_QUEUE_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_QUEUE_ECC_STATUS.
 */
#define READ_IDB_OBM4_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM4_QUEUE_ECC_STATUSr_OFFSET,0,(r._idb_obm4_queue_ecc_status),1)
#define WRITE_IDB_OBM4_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM4_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm4_queue_ecc_status),1)
#define WRITE_IDB_OBM4_QUEUE_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_QUEUE_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM4_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm4_queue_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM4_QUEUE_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_QUEUE_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_QUEUE_SER_CONTROL.
 */
#define READ_IDB_OBM4_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM4_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM4_QUEUE_SER_CONTROLr_OFFSET,0,(r._idb_obm4_queue_ser_control), 1)
#define WRITE_IDB_OBM4_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM4_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM4_QUEUE_SER_CONTROLr_OFFSET,0,&(r._idb_obm4_queue_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM4_QUEUE_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_RAM_CONTROL.
 */
#define READ_IDB_OBM4_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM4_RAM_CONTROLr_OFFSET,0,(r._idb_obm4_ram_control),1)
#define WRITE_IDB_OBM4_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM4_RAM_CONTROLr_OFFSET,0,&(r._idb_obm4_ram_control),1)
#define WRITE_IDB_OBM4_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_RAM_CONTROLr_BLKACC,1,-1,0,IDB_OBM4_RAM_CONTROLr_OFFSET,0,&(r._idb_obm4_ram_control),1)

/*******************************************************************************
 * End of 'IDB_OBM4_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_SER_CONTROL.
 */
#define READ_IDB_OBM4_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM4_SER_CONTROLr_BLKACC,1,IDB_OBM4_SER_CONTROLr_OFFSET,0,(r._idb_obm4_ser_control), 1)
#define WRITE_IDB_OBM4_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM4_SER_CONTROLr_BLKACC,1,IDB_OBM4_SER_CONTROLr_OFFSET,0,&(r._idb_obm4_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM4_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_SHARED_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_SHARED_CONFIG.
 */
#define READ_IDB_OBM4_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM4_SHARED_CONFIGr_OFFSET,0,(r._idb_obm4_shared_config),1)
#define WRITE_IDB_OBM4_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM4_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm4_shared_config),1)
#define WRITE_IDB_OBM4_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_SHARED_CONFIGr_BLKACC,1,-1,0,IDB_OBM4_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm4_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM4_SHARED_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_SHARED_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM4_SHARED_USAGE.
 */
#define READ_IDB_OBM4_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM4_SHARED_USAGEr_OFFSET,0,(r._idb_obm4_shared_usage),1)
#define WRITE_IDB_OBM4_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM4_SHARED_USAGEr_OFFSET,0,&(r._idb_obm4_shared_usage),1)
#define WRITE_IDB_OBM4_SHARED_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_SHARED_USAGEr_BLKACC,1,-1,0,IDB_OBM4_SHARED_USAGEr_OFFSET,0,&(r._idb_obm4_shared_usage),1)

/*******************************************************************************
 * End of 'IDB_OBM4_SHARED_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_THRESHOLD.
 */
#define READ_IDB_OBM4_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_THRESHOLDr_BLKACC,1,n,0,IDB_OBM4_THRESHOLDr_OFFSET,i,(r._idb_obm4_threshold),2)
#define WRITE_IDB_OBM4_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_THRESHOLDr_BLKACC,1,n,0,IDB_OBM4_THRESHOLDr_OFFSET,i,&(r._idb_obm4_threshold),2)
#define WRITE_IDB_OBM4_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM4_THRESHOLDr_OFFSET,i,&(r._idb_obm4_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM4_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM4_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM4_USAGE.
 */
#define READ_IDB_OBM4_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM4_USAGEr_BLKACC,1,n,0,IDB_OBM4_USAGEr_OFFSET,i,(r._idb_obm4_usage),2)
#define WRITE_IDB_OBM4_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_USAGEr_BLKACC,1,n,0,IDB_OBM4_USAGEr_OFFSET,i,&(r._idb_obm4_usage),2)
#define WRITE_IDB_OBM4_USAGEr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM4_USAGEr_BLKACC,1,-1,0,IDB_OBM4_USAGEr_OFFSET,i,&(r._idb_obm4_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM4_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_BANK_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_BANK_CONFIG.
 */
#define READ_IDB_OBM5_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM5_BANK_CONFIGr_OFFSET,0,(r._idb_obm5_bank_config),1)
#define WRITE_IDB_OBM5_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM5_BANK_CONFIGr_OFFSET,0,&(r._idb_obm5_bank_config),1)
#define WRITE_IDB_OBM5_BANK_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_BANK_CONFIGr_BLKACC,1,-1,0,IDB_OBM5_BANK_CONFIGr_OFFSET,0,&(r._idb_obm5_bank_config),1)

/*******************************************************************************
 * End of 'IDB_OBM5_BANK_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_CA_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_CA_CONTROL.
 */
#define READ_IDB_OBM5_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM5_CA_CONTROLr_OFFSET,0,(r._idb_obm5_ca_control),1)
#define WRITE_IDB_OBM5_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM5_CA_CONTROLr_OFFSET,0,&(r._idb_obm5_ca_control),1)
#define WRITE_IDB_OBM5_CA_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_CONTROLr_BLKACC,1,-1,0,IDB_OBM5_CA_CONTROLr_OFFSET,0,&(r._idb_obm5_ca_control),1)

/*******************************************************************************
 * End of 'IDB_OBM5_CA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_CA_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_CA_CT_CONTROL.
 */
#define READ_IDB_OBM5_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM5_CA_CT_CONTROLr_OFFSET,0,(r._idb_obm5_ca_ct_control),1)
#define WRITE_IDB_OBM5_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM5_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm5_ca_ct_control),1)
#define WRITE_IDB_OBM5_CA_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_CT_CONTROLr_BLKACC,1,-1,0,IDB_OBM5_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm5_ca_ct_control),1)

/*******************************************************************************
 * End of 'IDB_OBM5_CA_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_CA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_CA_ECC_STATUS.
 */
#define READ_IDB_OBM5_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM5_CA_ECC_STATUSr_OFFSET,0,(r._idb_obm5_ca_ecc_status),1)
#define WRITE_IDB_OBM5_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM5_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm5_ca_ecc_status),1)
#define WRITE_IDB_OBM5_CA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM5_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm5_ca_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM5_CA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_CA_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_CA_HW_CONTROL.
 */
#define READ_IDB_OBM5_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM5_CA_HW_CONTROLr_OFFSET,0,(r._idb_obm5_ca_hw_control),1)
#define WRITE_IDB_OBM5_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM5_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm5_ca_hw_control),1)
#define WRITE_IDB_OBM5_CA_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_HW_CONTROLr_BLKACC,1,-1,0,IDB_OBM5_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm5_ca_hw_control),1)

/*******************************************************************************
 * End of 'IDB_OBM5_CA_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_CA_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_CA_HW_STATUS.
 */
#define READ_IDB_OBM5_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM5_CA_HW_STATUSr_OFFSET,0,(r._idb_obm5_ca_hw_status),2)
#define WRITE_IDB_OBM5_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM5_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm5_ca_hw_status),2)
#define WRITE_IDB_OBM5_CA_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_HW_STATUSr_BLKACC,1,-1,0,IDB_OBM5_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm5_ca_hw_status),2)

/*******************************************************************************
 * End of 'IDB_OBM5_CA_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_CA_POINTER_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_CA_POINTER_STATUS.
 */
#define READ_IDB_OBM5_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM5_CA_POINTER_STATUSr_OFFSET,0,(r._idb_obm5_ca_pointer_status),2)
#define WRITE_IDB_OBM5_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM5_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm5_ca_pointer_status),2)
#define WRITE_IDB_OBM5_CA_POINTER_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CA_POINTER_STATUSr_BLKACC,1,-1,0,IDB_OBM5_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm5_ca_pointer_status),2)

/*******************************************************************************
 * End of 'IDB_OBM5_CA_POINTER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_CONTROL.
 */
#define READ_IDB_OBM5_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_CONTROLr_BLKACC,1,n,0,IDB_OBM5_CONTROLr_OFFSET,0,(r._idb_obm5_control),1)
#define WRITE_IDB_OBM5_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CONTROLr_BLKACC,1,n,0,IDB_OBM5_CONTROLr_OFFSET,0,&(r._idb_obm5_control),1)
#define WRITE_IDB_OBM5_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CONTROLr_BLKACC,1,-1,0,IDB_OBM5_CONTROLr_OFFSET,0,&(r._idb_obm5_control),1)

/*******************************************************************************
 * End of 'IDB_OBM5_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_CT_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_CT_THRESHOLD.
 */
#define READ_IDB_OBM5_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM5_CT_THRESHOLDr_OFFSET,i,(r._idb_obm5_ct_threshold),2)
#define WRITE_IDB_OBM5_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM5_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm5_ct_threshold),2)
#define WRITE_IDB_OBM5_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_CT_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM5_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm5_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM5_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_DATA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM5_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM5_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm5_data_ecc_status),1)
#define WRITE_IDB_OBM5_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM5_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm5_data_ecc_status),1)
#define WRITE_IDB_OBM5_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_DATA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM5_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm5_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM5_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_DBG_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_DBG_A.
 */
#define READ_IDB_OBM5_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_DBG_Ar_BLKACC,1,n,0,IDB_OBM5_DBG_Ar_OFFSET,i,(r._idb_obm5_dbg_a),1)
#define WRITE_IDB_OBM5_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_DBG_Ar_BLKACC,1,n,0,IDB_OBM5_DBG_Ar_OFFSET,i,&(r._idb_obm5_dbg_a),1)
#define WRITE_IDB_OBM5_DBG_Ar_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_DBG_Ar_BLKACC,1,-1,0,IDB_OBM5_DBG_Ar_OFFSET,i,&(r._idb_obm5_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM5_DBG_Ar'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_DSCP_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM5_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM5_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm5_dscp_map_port0),1)
#define WRITE_IDB_OBM5_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM5_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm5_dscp_map_port0),1)
#define WRITE_IDB_OBM5_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_DSCP_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM5_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm5_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM5_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_DSCP_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM5_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM5_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm5_dscp_map_port1),1)
#define WRITE_IDB_OBM5_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM5_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm5_dscp_map_port1),1)
#define WRITE_IDB_OBM5_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_DSCP_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM5_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm5_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM5_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_DSCP_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM5_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM5_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm5_dscp_map_port2),1)
#define WRITE_IDB_OBM5_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM5_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm5_dscp_map_port2),1)
#define WRITE_IDB_OBM5_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_DSCP_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM5_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm5_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM5_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_DSCP_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM5_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM5_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm5_dscp_map_port3),1)
#define WRITE_IDB_OBM5_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM5_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm5_dscp_map_port3),1)
#define WRITE_IDB_OBM5_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_DSCP_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM5_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm5_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM5_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_ETAG_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM5_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM5_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM5_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm5_etag_map_port0),1)
#define WRITE_IDB_OBM5_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM5_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm5_etag_map_port0),1)
#define WRITE_IDB_OBM5_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_ETAG_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM5_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm5_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM5_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_ETAG_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM5_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM5_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM5_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm5_etag_map_port1),1)
#define WRITE_IDB_OBM5_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM5_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm5_etag_map_port1),1)
#define WRITE_IDB_OBM5_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_ETAG_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM5_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm5_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM5_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_ETAG_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM5_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM5_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM5_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm5_etag_map_port2),1)
#define WRITE_IDB_OBM5_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM5_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm5_etag_map_port2),1)
#define WRITE_IDB_OBM5_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_ETAG_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM5_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm5_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM5_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_ETAG_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM5_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM5_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM5_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm5_etag_map_port3),1)
#define WRITE_IDB_OBM5_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM5_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm5_etag_map_port3),1)
#define WRITE_IDB_OBM5_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_ETAG_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM5_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm5_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM5_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_FC_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_FC_THRESHOLD.
 */
#define READ_IDB_OBM5_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM5_FC_THRESHOLDr_OFFSET,i,(r._idb_obm5_fc_threshold),2)
#define WRITE_IDB_OBM5_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM5_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm5_fc_threshold),2)
#define WRITE_IDB_OBM5_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_FC_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM5_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm5_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM5_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_FLOW_CONTROL_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM5_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM5_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm5_flow_control_config),2)
#define WRITE_IDB_OBM5_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM5_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm5_flow_control_config),2)
#define WRITE_IDB_OBM5_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_FLOW_CONTROL_CONFIGr_BLKACC,1,-1,0,IDB_OBM5_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm5_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM5_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm5_flow_control_event_count),2)
#define WRITE_IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm5_flow_control_event_count),2)
#define WRITE_IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,-1,0,IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm5_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM5_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_INNER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_INNER_TPID.
 */
#define READ_IDB_OBM5_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM5_INNER_TPIDr_OFFSET,0,(r._idb_obm5_inner_tpid),1)
#define WRITE_IDB_OBM5_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM5_INNER_TPIDr_OFFSET,0,&(r._idb_obm5_inner_tpid),1)
#define WRITE_IDB_OBM5_INNER_TPIDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_INNER_TPIDr_BLKACC,1,-1,0,IDB_OBM5_INNER_TPIDr_OFFSET,0,&(r._idb_obm5_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM5_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm5_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM5_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm5_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossless0_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM5_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm5_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM5_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm5_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossless1_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM5_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm5_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM5_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm5_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossy_hi_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM5_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm5_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM5_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm5_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm5_lossy_lo_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM5_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_MAX_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_MAX_USAGE.
 */
#define READ_IDB_OBM5_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM5_MAX_USAGEr_OFFSET,0,(r._idb_obm5_max_usage),2)
#define WRITE_IDB_OBM5_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM5_MAX_USAGEr_OFFSET,0,&(r._idb_obm5_max_usage),2)
#define WRITE_IDB_OBM5_MAX_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_MAX_USAGEr_BLKACC,1,-1,0,IDB_OBM5_MAX_USAGEr_OFFSET,0,&(r._idb_obm5_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM5_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_MAX_USAGE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM5_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM5_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm5_max_usage_select),1)
#define WRITE_IDB_OBM5_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM5_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm5_max_usage_select),1)
#define WRITE_IDB_OBM5_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_MAX_USAGE_SELECTr_BLKACC,1,-1,0,IDB_OBM5_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm5_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM5_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_NIV_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM5_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM5_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm5_niv_ethertype),1)
#define WRITE_IDB_OBM5_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM5_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm5_niv_ethertype),1)
#define WRITE_IDB_OBM5_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_NIV_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM5_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm5_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM5_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_OUTER_TPID.
 */
#define READ_IDB_OBM5_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM5_OUTER_TPIDr_OFFSET,i,(r._idb_obm5_outer_tpid),1)
#define WRITE_IDB_OBM5_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM5_OUTER_TPIDr_OFFSET,i,&(r._idb_obm5_outer_tpid),1)
#define WRITE_IDB_OBM5_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPIDr_BLKACC,1,-1,0,IDB_OBM5_OUTER_TPIDr_OFFSET,i,&(r._idb_obm5_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM5_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_OUTER_TPID_0.
 */
#define READ_IDB_OBM5_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM5_OUTER_TPID_0r_OFFSET,0,(r._idb_obm5_outer_tpid_0),1)
#define WRITE_IDB_OBM5_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM5_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm5_outer_tpid_0),1)
#define WRITE_IDB_OBM5_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPID_0r_BLKACC,1,-1,0,IDB_OBM5_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm5_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM5_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_OUTER_TPID_1.
 */
#define READ_IDB_OBM5_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM5_OUTER_TPID_1r_OFFSET,0,(r._idb_obm5_outer_tpid_1),1)
#define WRITE_IDB_OBM5_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM5_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm5_outer_tpid_1),1)
#define WRITE_IDB_OBM5_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPID_1r_BLKACC,1,-1,0,IDB_OBM5_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm5_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM5_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_OUTER_TPID_2.
 */
#define READ_IDB_OBM5_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM5_OUTER_TPID_2r_OFFSET,0,(r._idb_obm5_outer_tpid_2),1)
#define WRITE_IDB_OBM5_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM5_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm5_outer_tpid_2),1)
#define WRITE_IDB_OBM5_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPID_2r_BLKACC,1,-1,0,IDB_OBM5_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm5_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM5_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_OUTER_TPID_3.
 */
#define READ_IDB_OBM5_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM5_OUTER_TPID_3r_OFFSET,0,(r._idb_obm5_outer_tpid_3),1)
#define WRITE_IDB_OBM5_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM5_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm5_outer_tpid_3),1)
#define WRITE_IDB_OBM5_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OUTER_TPID_3r_BLKACC,1,-1,0,IDB_OBM5_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm5_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM5_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_OVERSUB_MON_PARITY_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_OVERSUB_MON_PARITY_STATUS.
 */
#define READ_IDB_OBM5_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM5_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,(r._idb_obm5_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM5_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM5_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm5_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM5_OVERSUB_MON_PARITY_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,-1,0,IDB_OBM5_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm5_oversub_mon_parity_status),1)

/*******************************************************************************
 * End of 'IDB_OBM5_OVERSUB_MON_PARITY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_PE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_PE_ETHERTYPE.
 */
#define READ_IDB_OBM5_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM5_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm5_pe_ethertype),1)
#define WRITE_IDB_OBM5_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM5_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm5_pe_ethertype),1)
#define WRITE_IDB_OBM5_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PE_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM5_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm5_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM5_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_PORT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_PORT_CONFIG.
 */
#define READ_IDB_OBM5_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM5_PORT_CONFIGr_OFFSET,i,(r._idb_obm5_port_config),1)
#define WRITE_IDB_OBM5_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM5_PORT_CONFIGr_OFFSET,i,&(r._idb_obm5_port_config),1)
#define WRITE_IDB_OBM5_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PORT_CONFIGr_BLKACC,1,-1,0,IDB_OBM5_PORT_CONFIGr_OFFSET,i,&(r._idb_obm5_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM5_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_PRI_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM5_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM5_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm5_pri_map_port0),1)
#define WRITE_IDB_OBM5_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM5_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm5_pri_map_port0),1)
#define WRITE_IDB_OBM5_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_PRI_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM5_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm5_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM5_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_PRI_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM5_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM5_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm5_pri_map_port1),1)
#define WRITE_IDB_OBM5_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM5_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm5_pri_map_port1),1)
#define WRITE_IDB_OBM5_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_PRI_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM5_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm5_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM5_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_PRI_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM5_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM5_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm5_pri_map_port2),1)
#define WRITE_IDB_OBM5_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM5_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm5_pri_map_port2),1)
#define WRITE_IDB_OBM5_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_PRI_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM5_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm5_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM5_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM5_PRI_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM5_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM5_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM5_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm5_pri_map_port3),1)
#define WRITE_IDB_OBM5_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM5_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm5_pri_map_port3),1)
#define WRITE_IDB_OBM5_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM5_PRI_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM5_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm5_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM5_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_PROTOCOL_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM5_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM5_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm5_protocol_control_0),2)
#define WRITE_IDB_OBM5_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM5_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm5_protocol_control_0),2)
#define WRITE_IDB_OBM5_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PROTOCOL_CONTROL_0r_BLKACC,1,-1,0,IDB_OBM5_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm5_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM5_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_PROTOCOL_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM5_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM5_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm5_protocol_control_1),2)
#define WRITE_IDB_OBM5_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM5_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm5_protocol_control_1),2)
#define WRITE_IDB_OBM5_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PROTOCOL_CONTROL_1r_BLKACC,1,-1,0,IDB_OBM5_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm5_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM5_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_PROTOCOL_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM5_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM5_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm5_protocol_control_2),2)
#define WRITE_IDB_OBM5_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM5_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm5_protocol_control_2),2)
#define WRITE_IDB_OBM5_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_PROTOCOL_CONTROL_2r_BLKACC,1,-1,0,IDB_OBM5_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm5_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM5_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_QUEUE_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_QUEUE_ECC_STATUS.
 */
#define READ_IDB_OBM5_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM5_QUEUE_ECC_STATUSr_OFFSET,0,(r._idb_obm5_queue_ecc_status),1)
#define WRITE_IDB_OBM5_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM5_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm5_queue_ecc_status),1)
#define WRITE_IDB_OBM5_QUEUE_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_QUEUE_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM5_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm5_queue_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM5_QUEUE_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_QUEUE_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_QUEUE_SER_CONTROL.
 */
#define READ_IDB_OBM5_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM5_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM5_QUEUE_SER_CONTROLr_OFFSET,0,(r._idb_obm5_queue_ser_control), 1)
#define WRITE_IDB_OBM5_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM5_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM5_QUEUE_SER_CONTROLr_OFFSET,0,&(r._idb_obm5_queue_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM5_QUEUE_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_RAM_CONTROL.
 */
#define READ_IDB_OBM5_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM5_RAM_CONTROLr_OFFSET,0,(r._idb_obm5_ram_control),1)
#define WRITE_IDB_OBM5_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM5_RAM_CONTROLr_OFFSET,0,&(r._idb_obm5_ram_control),1)
#define WRITE_IDB_OBM5_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_RAM_CONTROLr_BLKACC,1,-1,0,IDB_OBM5_RAM_CONTROLr_OFFSET,0,&(r._idb_obm5_ram_control),1)

/*******************************************************************************
 * End of 'IDB_OBM5_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_SER_CONTROL.
 */
#define READ_IDB_OBM5_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM5_SER_CONTROLr_BLKACC,1,IDB_OBM5_SER_CONTROLr_OFFSET,0,(r._idb_obm5_ser_control), 1)
#define WRITE_IDB_OBM5_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM5_SER_CONTROLr_BLKACC,1,IDB_OBM5_SER_CONTROLr_OFFSET,0,&(r._idb_obm5_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM5_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_SHARED_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_SHARED_CONFIG.
 */
#define READ_IDB_OBM5_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM5_SHARED_CONFIGr_OFFSET,0,(r._idb_obm5_shared_config),1)
#define WRITE_IDB_OBM5_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM5_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm5_shared_config),1)
#define WRITE_IDB_OBM5_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_SHARED_CONFIGr_BLKACC,1,-1,0,IDB_OBM5_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm5_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM5_SHARED_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_SHARED_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM5_SHARED_USAGE.
 */
#define READ_IDB_OBM5_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM5_SHARED_USAGEr_OFFSET,0,(r._idb_obm5_shared_usage),1)
#define WRITE_IDB_OBM5_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM5_SHARED_USAGEr_OFFSET,0,&(r._idb_obm5_shared_usage),1)
#define WRITE_IDB_OBM5_SHARED_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_SHARED_USAGEr_BLKACC,1,-1,0,IDB_OBM5_SHARED_USAGEr_OFFSET,0,&(r._idb_obm5_shared_usage),1)

/*******************************************************************************
 * End of 'IDB_OBM5_SHARED_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_THRESHOLD.
 */
#define READ_IDB_OBM5_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_THRESHOLDr_BLKACC,1,n,0,IDB_OBM5_THRESHOLDr_OFFSET,i,(r._idb_obm5_threshold),2)
#define WRITE_IDB_OBM5_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_THRESHOLDr_BLKACC,1,n,0,IDB_OBM5_THRESHOLDr_OFFSET,i,&(r._idb_obm5_threshold),2)
#define WRITE_IDB_OBM5_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM5_THRESHOLDr_OFFSET,i,&(r._idb_obm5_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM5_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM5_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM5_USAGE.
 */
#define READ_IDB_OBM5_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM5_USAGEr_BLKACC,1,n,0,IDB_OBM5_USAGEr_OFFSET,i,(r._idb_obm5_usage),2)
#define WRITE_IDB_OBM5_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_USAGEr_BLKACC,1,n,0,IDB_OBM5_USAGEr_OFFSET,i,&(r._idb_obm5_usage),2)
#define WRITE_IDB_OBM5_USAGEr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM5_USAGEr_BLKACC,1,-1,0,IDB_OBM5_USAGEr_OFFSET,i,&(r._idb_obm5_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM5_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_BANK_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_BANK_CONFIG.
 */
#define READ_IDB_OBM6_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM6_BANK_CONFIGr_OFFSET,0,(r._idb_obm6_bank_config),1)
#define WRITE_IDB_OBM6_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM6_BANK_CONFIGr_OFFSET,0,&(r._idb_obm6_bank_config),1)
#define WRITE_IDB_OBM6_BANK_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_BANK_CONFIGr_BLKACC,1,-1,0,IDB_OBM6_BANK_CONFIGr_OFFSET,0,&(r._idb_obm6_bank_config),1)

/*******************************************************************************
 * End of 'IDB_OBM6_BANK_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_CA_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_CA_CONTROL.
 */
#define READ_IDB_OBM6_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM6_CA_CONTROLr_OFFSET,0,(r._idb_obm6_ca_control),1)
#define WRITE_IDB_OBM6_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM6_CA_CONTROLr_OFFSET,0,&(r._idb_obm6_ca_control),1)
#define WRITE_IDB_OBM6_CA_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_CONTROLr_BLKACC,1,-1,0,IDB_OBM6_CA_CONTROLr_OFFSET,0,&(r._idb_obm6_ca_control),1)

/*******************************************************************************
 * End of 'IDB_OBM6_CA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_CA_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_CA_CT_CONTROL.
 */
#define READ_IDB_OBM6_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM6_CA_CT_CONTROLr_OFFSET,0,(r._idb_obm6_ca_ct_control),1)
#define WRITE_IDB_OBM6_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM6_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm6_ca_ct_control),1)
#define WRITE_IDB_OBM6_CA_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_CT_CONTROLr_BLKACC,1,-1,0,IDB_OBM6_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm6_ca_ct_control),1)

/*******************************************************************************
 * End of 'IDB_OBM6_CA_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_CA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_CA_ECC_STATUS.
 */
#define READ_IDB_OBM6_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM6_CA_ECC_STATUSr_OFFSET,0,(r._idb_obm6_ca_ecc_status),1)
#define WRITE_IDB_OBM6_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM6_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm6_ca_ecc_status),1)
#define WRITE_IDB_OBM6_CA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM6_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm6_ca_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM6_CA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_CA_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_CA_HW_CONTROL.
 */
#define READ_IDB_OBM6_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM6_CA_HW_CONTROLr_OFFSET,0,(r._idb_obm6_ca_hw_control),1)
#define WRITE_IDB_OBM6_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM6_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm6_ca_hw_control),1)
#define WRITE_IDB_OBM6_CA_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_HW_CONTROLr_BLKACC,1,-1,0,IDB_OBM6_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm6_ca_hw_control),1)

/*******************************************************************************
 * End of 'IDB_OBM6_CA_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_CA_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_CA_HW_STATUS.
 */
#define READ_IDB_OBM6_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM6_CA_HW_STATUSr_OFFSET,0,(r._idb_obm6_ca_hw_status),2)
#define WRITE_IDB_OBM6_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM6_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm6_ca_hw_status),2)
#define WRITE_IDB_OBM6_CA_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_HW_STATUSr_BLKACC,1,-1,0,IDB_OBM6_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm6_ca_hw_status),2)

/*******************************************************************************
 * End of 'IDB_OBM6_CA_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_CA_POINTER_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_CA_POINTER_STATUS.
 */
#define READ_IDB_OBM6_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM6_CA_POINTER_STATUSr_OFFSET,0,(r._idb_obm6_ca_pointer_status),2)
#define WRITE_IDB_OBM6_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM6_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm6_ca_pointer_status),2)
#define WRITE_IDB_OBM6_CA_POINTER_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CA_POINTER_STATUSr_BLKACC,1,-1,0,IDB_OBM6_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm6_ca_pointer_status),2)

/*******************************************************************************
 * End of 'IDB_OBM6_CA_POINTER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_CONTROL.
 */
#define READ_IDB_OBM6_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_CONTROLr_BLKACC,1,n,0,IDB_OBM6_CONTROLr_OFFSET,0,(r._idb_obm6_control),1)
#define WRITE_IDB_OBM6_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CONTROLr_BLKACC,1,n,0,IDB_OBM6_CONTROLr_OFFSET,0,&(r._idb_obm6_control),1)
#define WRITE_IDB_OBM6_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CONTROLr_BLKACC,1,-1,0,IDB_OBM6_CONTROLr_OFFSET,0,&(r._idb_obm6_control),1)

/*******************************************************************************
 * End of 'IDB_OBM6_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_CT_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_CT_THRESHOLD.
 */
#define READ_IDB_OBM6_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM6_CT_THRESHOLDr_OFFSET,i,(r._idb_obm6_ct_threshold),2)
#define WRITE_IDB_OBM6_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM6_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm6_ct_threshold),2)
#define WRITE_IDB_OBM6_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_CT_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM6_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm6_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM6_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_DATA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM6_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM6_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm6_data_ecc_status),1)
#define WRITE_IDB_OBM6_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM6_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm6_data_ecc_status),1)
#define WRITE_IDB_OBM6_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_DATA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM6_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm6_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM6_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_DBG_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_DBG_A.
 */
#define READ_IDB_OBM6_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_DBG_Ar_BLKACC,1,n,0,IDB_OBM6_DBG_Ar_OFFSET,i,(r._idb_obm6_dbg_a),1)
#define WRITE_IDB_OBM6_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_DBG_Ar_BLKACC,1,n,0,IDB_OBM6_DBG_Ar_OFFSET,i,&(r._idb_obm6_dbg_a),1)
#define WRITE_IDB_OBM6_DBG_Ar_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_DBG_Ar_BLKACC,1,-1,0,IDB_OBM6_DBG_Ar_OFFSET,i,&(r._idb_obm6_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM6_DBG_Ar'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_DSCP_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM6_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM6_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm6_dscp_map_port0),1)
#define WRITE_IDB_OBM6_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM6_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm6_dscp_map_port0),1)
#define WRITE_IDB_OBM6_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_DSCP_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM6_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm6_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM6_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_DSCP_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM6_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM6_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm6_dscp_map_port1),1)
#define WRITE_IDB_OBM6_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM6_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm6_dscp_map_port1),1)
#define WRITE_IDB_OBM6_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_DSCP_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM6_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm6_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM6_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_DSCP_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM6_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM6_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm6_dscp_map_port2),1)
#define WRITE_IDB_OBM6_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM6_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm6_dscp_map_port2),1)
#define WRITE_IDB_OBM6_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_DSCP_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM6_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm6_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM6_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_DSCP_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM6_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM6_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm6_dscp_map_port3),1)
#define WRITE_IDB_OBM6_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM6_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm6_dscp_map_port3),1)
#define WRITE_IDB_OBM6_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_DSCP_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM6_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm6_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM6_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_ETAG_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM6_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM6_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM6_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm6_etag_map_port0),1)
#define WRITE_IDB_OBM6_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM6_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm6_etag_map_port0),1)
#define WRITE_IDB_OBM6_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_ETAG_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM6_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm6_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM6_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_ETAG_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM6_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM6_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM6_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm6_etag_map_port1),1)
#define WRITE_IDB_OBM6_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM6_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm6_etag_map_port1),1)
#define WRITE_IDB_OBM6_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_ETAG_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM6_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm6_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM6_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_ETAG_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM6_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM6_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM6_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm6_etag_map_port2),1)
#define WRITE_IDB_OBM6_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM6_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm6_etag_map_port2),1)
#define WRITE_IDB_OBM6_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_ETAG_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM6_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm6_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM6_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_ETAG_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM6_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM6_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM6_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm6_etag_map_port3),1)
#define WRITE_IDB_OBM6_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM6_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm6_etag_map_port3),1)
#define WRITE_IDB_OBM6_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_ETAG_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM6_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm6_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM6_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_FC_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_FC_THRESHOLD.
 */
#define READ_IDB_OBM6_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM6_FC_THRESHOLDr_OFFSET,i,(r._idb_obm6_fc_threshold),2)
#define WRITE_IDB_OBM6_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM6_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm6_fc_threshold),2)
#define WRITE_IDB_OBM6_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_FC_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM6_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm6_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM6_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_FLOW_CONTROL_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM6_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM6_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm6_flow_control_config),2)
#define WRITE_IDB_OBM6_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM6_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm6_flow_control_config),2)
#define WRITE_IDB_OBM6_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_FLOW_CONTROL_CONFIGr_BLKACC,1,-1,0,IDB_OBM6_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm6_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM6_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm6_flow_control_event_count),2)
#define WRITE_IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm6_flow_control_event_count),2)
#define WRITE_IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,-1,0,IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm6_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM6_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_INNER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_INNER_TPID.
 */
#define READ_IDB_OBM6_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM6_INNER_TPIDr_OFFSET,0,(r._idb_obm6_inner_tpid),1)
#define WRITE_IDB_OBM6_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM6_INNER_TPIDr_OFFSET,0,&(r._idb_obm6_inner_tpid),1)
#define WRITE_IDB_OBM6_INNER_TPIDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_INNER_TPIDr_BLKACC,1,-1,0,IDB_OBM6_INNER_TPIDr_OFFSET,0,&(r._idb_obm6_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM6_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm6_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM6_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm6_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossless0_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM6_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm6_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM6_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm6_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossless1_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM6_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm6_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM6_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm6_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossy_hi_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM6_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm6_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM6_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm6_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm6_lossy_lo_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM6_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_MAX_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_MAX_USAGE.
 */
#define READ_IDB_OBM6_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM6_MAX_USAGEr_OFFSET,0,(r._idb_obm6_max_usage),2)
#define WRITE_IDB_OBM6_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM6_MAX_USAGEr_OFFSET,0,&(r._idb_obm6_max_usage),2)
#define WRITE_IDB_OBM6_MAX_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_MAX_USAGEr_BLKACC,1,-1,0,IDB_OBM6_MAX_USAGEr_OFFSET,0,&(r._idb_obm6_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM6_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_MAX_USAGE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM6_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM6_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm6_max_usage_select),1)
#define WRITE_IDB_OBM6_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM6_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm6_max_usage_select),1)
#define WRITE_IDB_OBM6_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_MAX_USAGE_SELECTr_BLKACC,1,-1,0,IDB_OBM6_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm6_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM6_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_NIV_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM6_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM6_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm6_niv_ethertype),1)
#define WRITE_IDB_OBM6_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM6_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm6_niv_ethertype),1)
#define WRITE_IDB_OBM6_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_NIV_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM6_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm6_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM6_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_OUTER_TPID.
 */
#define READ_IDB_OBM6_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM6_OUTER_TPIDr_OFFSET,i,(r._idb_obm6_outer_tpid),1)
#define WRITE_IDB_OBM6_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM6_OUTER_TPIDr_OFFSET,i,&(r._idb_obm6_outer_tpid),1)
#define WRITE_IDB_OBM6_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPIDr_BLKACC,1,-1,0,IDB_OBM6_OUTER_TPIDr_OFFSET,i,&(r._idb_obm6_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM6_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_OUTER_TPID_0.
 */
#define READ_IDB_OBM6_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM6_OUTER_TPID_0r_OFFSET,0,(r._idb_obm6_outer_tpid_0),1)
#define WRITE_IDB_OBM6_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM6_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm6_outer_tpid_0),1)
#define WRITE_IDB_OBM6_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPID_0r_BLKACC,1,-1,0,IDB_OBM6_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm6_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM6_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_OUTER_TPID_1.
 */
#define READ_IDB_OBM6_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM6_OUTER_TPID_1r_OFFSET,0,(r._idb_obm6_outer_tpid_1),1)
#define WRITE_IDB_OBM6_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM6_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm6_outer_tpid_1),1)
#define WRITE_IDB_OBM6_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPID_1r_BLKACC,1,-1,0,IDB_OBM6_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm6_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM6_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_OUTER_TPID_2.
 */
#define READ_IDB_OBM6_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM6_OUTER_TPID_2r_OFFSET,0,(r._idb_obm6_outer_tpid_2),1)
#define WRITE_IDB_OBM6_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM6_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm6_outer_tpid_2),1)
#define WRITE_IDB_OBM6_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPID_2r_BLKACC,1,-1,0,IDB_OBM6_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm6_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM6_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_OUTER_TPID_3.
 */
#define READ_IDB_OBM6_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM6_OUTER_TPID_3r_OFFSET,0,(r._idb_obm6_outer_tpid_3),1)
#define WRITE_IDB_OBM6_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM6_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm6_outer_tpid_3),1)
#define WRITE_IDB_OBM6_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OUTER_TPID_3r_BLKACC,1,-1,0,IDB_OBM6_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm6_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM6_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_OVERSUB_MON_PARITY_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_OVERSUB_MON_PARITY_STATUS.
 */
#define READ_IDB_OBM6_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM6_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,(r._idb_obm6_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM6_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM6_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm6_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM6_OVERSUB_MON_PARITY_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,-1,0,IDB_OBM6_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm6_oversub_mon_parity_status),1)

/*******************************************************************************
 * End of 'IDB_OBM6_OVERSUB_MON_PARITY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_PE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_PE_ETHERTYPE.
 */
#define READ_IDB_OBM6_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM6_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm6_pe_ethertype),1)
#define WRITE_IDB_OBM6_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM6_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm6_pe_ethertype),1)
#define WRITE_IDB_OBM6_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PE_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM6_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm6_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM6_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_PORT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_PORT_CONFIG.
 */
#define READ_IDB_OBM6_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM6_PORT_CONFIGr_OFFSET,i,(r._idb_obm6_port_config),1)
#define WRITE_IDB_OBM6_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM6_PORT_CONFIGr_OFFSET,i,&(r._idb_obm6_port_config),1)
#define WRITE_IDB_OBM6_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PORT_CONFIGr_BLKACC,1,-1,0,IDB_OBM6_PORT_CONFIGr_OFFSET,i,&(r._idb_obm6_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM6_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_PRI_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM6_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM6_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm6_pri_map_port0),1)
#define WRITE_IDB_OBM6_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM6_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm6_pri_map_port0),1)
#define WRITE_IDB_OBM6_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_PRI_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM6_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm6_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM6_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_PRI_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM6_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM6_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm6_pri_map_port1),1)
#define WRITE_IDB_OBM6_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM6_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm6_pri_map_port1),1)
#define WRITE_IDB_OBM6_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_PRI_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM6_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm6_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM6_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_PRI_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM6_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM6_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm6_pri_map_port2),1)
#define WRITE_IDB_OBM6_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM6_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm6_pri_map_port2),1)
#define WRITE_IDB_OBM6_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_PRI_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM6_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm6_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM6_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM6_PRI_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM6_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM6_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM6_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm6_pri_map_port3),1)
#define WRITE_IDB_OBM6_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM6_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm6_pri_map_port3),1)
#define WRITE_IDB_OBM6_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM6_PRI_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM6_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm6_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM6_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_PROTOCOL_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM6_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM6_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm6_protocol_control_0),2)
#define WRITE_IDB_OBM6_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM6_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm6_protocol_control_0),2)
#define WRITE_IDB_OBM6_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PROTOCOL_CONTROL_0r_BLKACC,1,-1,0,IDB_OBM6_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm6_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM6_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_PROTOCOL_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM6_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM6_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm6_protocol_control_1),2)
#define WRITE_IDB_OBM6_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM6_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm6_protocol_control_1),2)
#define WRITE_IDB_OBM6_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PROTOCOL_CONTROL_1r_BLKACC,1,-1,0,IDB_OBM6_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm6_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM6_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_PROTOCOL_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM6_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM6_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm6_protocol_control_2),2)
#define WRITE_IDB_OBM6_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM6_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm6_protocol_control_2),2)
#define WRITE_IDB_OBM6_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_PROTOCOL_CONTROL_2r_BLKACC,1,-1,0,IDB_OBM6_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm6_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM6_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_QUEUE_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_QUEUE_ECC_STATUS.
 */
#define READ_IDB_OBM6_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM6_QUEUE_ECC_STATUSr_OFFSET,0,(r._idb_obm6_queue_ecc_status),1)
#define WRITE_IDB_OBM6_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM6_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm6_queue_ecc_status),1)
#define WRITE_IDB_OBM6_QUEUE_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_QUEUE_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM6_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm6_queue_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM6_QUEUE_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_QUEUE_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_QUEUE_SER_CONTROL.
 */
#define READ_IDB_OBM6_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM6_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM6_QUEUE_SER_CONTROLr_OFFSET,0,(r._idb_obm6_queue_ser_control), 1)
#define WRITE_IDB_OBM6_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM6_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM6_QUEUE_SER_CONTROLr_OFFSET,0,&(r._idb_obm6_queue_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM6_QUEUE_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_RAM_CONTROL.
 */
#define READ_IDB_OBM6_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM6_RAM_CONTROLr_OFFSET,0,(r._idb_obm6_ram_control),1)
#define WRITE_IDB_OBM6_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM6_RAM_CONTROLr_OFFSET,0,&(r._idb_obm6_ram_control),1)
#define WRITE_IDB_OBM6_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_RAM_CONTROLr_BLKACC,1,-1,0,IDB_OBM6_RAM_CONTROLr_OFFSET,0,&(r._idb_obm6_ram_control),1)

/*******************************************************************************
 * End of 'IDB_OBM6_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_SER_CONTROL.
 */
#define READ_IDB_OBM6_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM6_SER_CONTROLr_BLKACC,1,IDB_OBM6_SER_CONTROLr_OFFSET,0,(r._idb_obm6_ser_control), 1)
#define WRITE_IDB_OBM6_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM6_SER_CONTROLr_BLKACC,1,IDB_OBM6_SER_CONTROLr_OFFSET,0,&(r._idb_obm6_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM6_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_SHARED_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_SHARED_CONFIG.
 */
#define READ_IDB_OBM6_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM6_SHARED_CONFIGr_OFFSET,0,(r._idb_obm6_shared_config),1)
#define WRITE_IDB_OBM6_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM6_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm6_shared_config),1)
#define WRITE_IDB_OBM6_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_SHARED_CONFIGr_BLKACC,1,-1,0,IDB_OBM6_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm6_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM6_SHARED_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_SHARED_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM6_SHARED_USAGE.
 */
#define READ_IDB_OBM6_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM6_SHARED_USAGEr_OFFSET,0,(r._idb_obm6_shared_usage),1)
#define WRITE_IDB_OBM6_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM6_SHARED_USAGEr_OFFSET,0,&(r._idb_obm6_shared_usage),1)
#define WRITE_IDB_OBM6_SHARED_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_SHARED_USAGEr_BLKACC,1,-1,0,IDB_OBM6_SHARED_USAGEr_OFFSET,0,&(r._idb_obm6_shared_usage),1)

/*******************************************************************************
 * End of 'IDB_OBM6_SHARED_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_THRESHOLD.
 */
#define READ_IDB_OBM6_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_THRESHOLDr_BLKACC,1,n,0,IDB_OBM6_THRESHOLDr_OFFSET,i,(r._idb_obm6_threshold),2)
#define WRITE_IDB_OBM6_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_THRESHOLDr_BLKACC,1,n,0,IDB_OBM6_THRESHOLDr_OFFSET,i,&(r._idb_obm6_threshold),2)
#define WRITE_IDB_OBM6_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM6_THRESHOLDr_OFFSET,i,&(r._idb_obm6_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM6_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM6_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM6_USAGE.
 */
#define READ_IDB_OBM6_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM6_USAGEr_BLKACC,1,n,0,IDB_OBM6_USAGEr_OFFSET,i,(r._idb_obm6_usage),2)
#define WRITE_IDB_OBM6_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_USAGEr_BLKACC,1,n,0,IDB_OBM6_USAGEr_OFFSET,i,&(r._idb_obm6_usage),2)
#define WRITE_IDB_OBM6_USAGEr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM6_USAGEr_BLKACC,1,-1,0,IDB_OBM6_USAGEr_OFFSET,i,&(r._idb_obm6_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM6_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_BANK_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_BANK_CONFIG.
 */
#define READ_IDB_OBM7_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM7_BANK_CONFIGr_OFFSET,0,(r._idb_obm7_bank_config),1)
#define WRITE_IDB_OBM7_BANK_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_BANK_CONFIGr_BLKACC,1,n,0,IDB_OBM7_BANK_CONFIGr_OFFSET,0,&(r._idb_obm7_bank_config),1)
#define WRITE_IDB_OBM7_BANK_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_BANK_CONFIGr_BLKACC,1,-1,0,IDB_OBM7_BANK_CONFIGr_OFFSET,0,&(r._idb_obm7_bank_config),1)

/*******************************************************************************
 * End of 'IDB_OBM7_BANK_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_CA_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_CA_CONTROL.
 */
#define READ_IDB_OBM7_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM7_CA_CONTROLr_OFFSET,0,(r._idb_obm7_ca_control),1)
#define WRITE_IDB_OBM7_CA_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_CONTROLr_BLKACC,1,n,0,IDB_OBM7_CA_CONTROLr_OFFSET,0,&(r._idb_obm7_ca_control),1)
#define WRITE_IDB_OBM7_CA_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_CONTROLr_BLKACC,1,-1,0,IDB_OBM7_CA_CONTROLr_OFFSET,0,&(r._idb_obm7_ca_control),1)

/*******************************************************************************
 * End of 'IDB_OBM7_CA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_CA_CT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_CA_CT_CONTROL.
 */
#define READ_IDB_OBM7_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM7_CA_CT_CONTROLr_OFFSET,0,(r._idb_obm7_ca_ct_control),1)
#define WRITE_IDB_OBM7_CA_CT_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_CT_CONTROLr_BLKACC,1,n,0,IDB_OBM7_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm7_ca_ct_control),1)
#define WRITE_IDB_OBM7_CA_CT_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_CT_CONTROLr_BLKACC,1,-1,0,IDB_OBM7_CA_CT_CONTROLr_OFFSET,0,&(r._idb_obm7_ca_ct_control),1)

/*******************************************************************************
 * End of 'IDB_OBM7_CA_CT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_CA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_CA_ECC_STATUS.
 */
#define READ_IDB_OBM7_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM7_CA_ECC_STATUSr_OFFSET,0,(r._idb_obm7_ca_ecc_status),1)
#define WRITE_IDB_OBM7_CA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM7_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm7_ca_ecc_status),1)
#define WRITE_IDB_OBM7_CA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM7_CA_ECC_STATUSr_OFFSET,0,&(r._idb_obm7_ca_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM7_CA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_CA_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_CA_HW_CONTROL.
 */
#define READ_IDB_OBM7_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM7_CA_HW_CONTROLr_OFFSET,0,(r._idb_obm7_ca_hw_control),1)
#define WRITE_IDB_OBM7_CA_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM7_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm7_ca_hw_control),1)
#define WRITE_IDB_OBM7_CA_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_HW_CONTROLr_BLKACC,1,-1,0,IDB_OBM7_CA_HW_CONTROLr_OFFSET,0,&(r._idb_obm7_ca_hw_control),1)

/*******************************************************************************
 * End of 'IDB_OBM7_CA_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_CA_HW_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_CA_HW_STATUS.
 */
#define READ_IDB_OBM7_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM7_CA_HW_STATUSr_OFFSET,0,(r._idb_obm7_ca_hw_status),2)
#define WRITE_IDB_OBM7_CA_HW_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_HW_STATUSr_BLKACC,1,n,0,IDB_OBM7_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm7_ca_hw_status),2)
#define WRITE_IDB_OBM7_CA_HW_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_HW_STATUSr_BLKACC,1,-1,0,IDB_OBM7_CA_HW_STATUSr_OFFSET,0,&(r._idb_obm7_ca_hw_status),2)

/*******************************************************************************
 * End of 'IDB_OBM7_CA_HW_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_CA_POINTER_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_CA_POINTER_STATUS.
 */
#define READ_IDB_OBM7_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM7_CA_POINTER_STATUSr_OFFSET,0,(r._idb_obm7_ca_pointer_status),2)
#define WRITE_IDB_OBM7_CA_POINTER_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_POINTER_STATUSr_BLKACC,1,n,0,IDB_OBM7_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm7_ca_pointer_status),2)
#define WRITE_IDB_OBM7_CA_POINTER_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CA_POINTER_STATUSr_BLKACC,1,-1,0,IDB_OBM7_CA_POINTER_STATUSr_OFFSET,0,&(r._idb_obm7_ca_pointer_status),2)

/*******************************************************************************
 * End of 'IDB_OBM7_CA_POINTER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_CONTROL.
 */
#define READ_IDB_OBM7_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_CONTROLr_BLKACC,1,n,0,IDB_OBM7_CONTROLr_OFFSET,0,(r._idb_obm7_control),1)
#define WRITE_IDB_OBM7_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CONTROLr_BLKACC,1,n,0,IDB_OBM7_CONTROLr_OFFSET,0,&(r._idb_obm7_control),1)
#define WRITE_IDB_OBM7_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CONTROLr_BLKACC,1,-1,0,IDB_OBM7_CONTROLr_OFFSET,0,&(r._idb_obm7_control),1)

/*******************************************************************************
 * End of 'IDB_OBM7_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_CT_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_CT_THRESHOLD.
 */
#define READ_IDB_OBM7_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM7_CT_THRESHOLDr_OFFSET,i,(r._idb_obm7_ct_threshold),2)
#define WRITE_IDB_OBM7_CT_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CT_THRESHOLDr_BLKACC,1,n,0,IDB_OBM7_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm7_ct_threshold),2)
#define WRITE_IDB_OBM7_CT_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_CT_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM7_CT_THRESHOLDr_OFFSET,i,&(r._idb_obm7_ct_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM7_CT_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_DATA_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_DATA_ECC_STATUS.
 */
#define READ_IDB_OBM7_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM7_DATA_ECC_STATUSr_OFFSET,0,(r._idb_obm7_data_ecc_status),1)
#define WRITE_IDB_OBM7_DATA_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_DATA_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM7_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm7_data_ecc_status),1)
#define WRITE_IDB_OBM7_DATA_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_DATA_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM7_DATA_ECC_STATUSr_OFFSET,0,&(r._idb_obm7_data_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM7_DATA_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_DBG_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_DBG_A.
 */
#define READ_IDB_OBM7_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_DBG_Ar_BLKACC,1,n,0,IDB_OBM7_DBG_Ar_OFFSET,i,(r._idb_obm7_dbg_a),1)
#define WRITE_IDB_OBM7_DBG_Ar(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_DBG_Ar_BLKACC,1,n,0,IDB_OBM7_DBG_Ar_OFFSET,i,&(r._idb_obm7_dbg_a),1)
#define WRITE_IDB_OBM7_DBG_Ar_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_DBG_Ar_BLKACC,1,-1,0,IDB_OBM7_DBG_Ar_OFFSET,i,&(r._idb_obm7_dbg_a),1)

/*******************************************************************************
 * End of 'IDB_OBM7_DBG_Ar'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_DSCP_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_DSCP_MAP_PORT0.
 */
#define READ_IDB_OBM7_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM7_DSCP_MAP_PORT0m_OFFSET,i,(m._idb_obm7_dscp_map_port0),1)
#define WRITE_IDB_OBM7_DSCP_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_DSCP_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM7_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm7_dscp_map_port0),1)
#define WRITE_IDB_OBM7_DSCP_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_DSCP_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM7_DSCP_MAP_PORT0m_OFFSET,i,&(m._idb_obm7_dscp_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM7_DSCP_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_DSCP_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_DSCP_MAP_PORT1.
 */
#define READ_IDB_OBM7_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM7_DSCP_MAP_PORT1m_OFFSET,i,(m._idb_obm7_dscp_map_port1),1)
#define WRITE_IDB_OBM7_DSCP_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_DSCP_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM7_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm7_dscp_map_port1),1)
#define WRITE_IDB_OBM7_DSCP_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_DSCP_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM7_DSCP_MAP_PORT1m_OFFSET,i,&(m._idb_obm7_dscp_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM7_DSCP_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_DSCP_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_DSCP_MAP_PORT2.
 */
#define READ_IDB_OBM7_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM7_DSCP_MAP_PORT2m_OFFSET,i,(m._idb_obm7_dscp_map_port2),1)
#define WRITE_IDB_OBM7_DSCP_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_DSCP_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM7_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm7_dscp_map_port2),1)
#define WRITE_IDB_OBM7_DSCP_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_DSCP_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM7_DSCP_MAP_PORT2m_OFFSET,i,&(m._idb_obm7_dscp_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM7_DSCP_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_DSCP_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_DSCP_MAP_PORT3.
 */
#define READ_IDB_OBM7_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM7_DSCP_MAP_PORT3m_OFFSET,i,(m._idb_obm7_dscp_map_port3),1)
#define WRITE_IDB_OBM7_DSCP_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_DSCP_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM7_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm7_dscp_map_port3),1)
#define WRITE_IDB_OBM7_DSCP_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_DSCP_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM7_DSCP_MAP_PORT3m_OFFSET,i,&(m._idb_obm7_dscp_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM7_DSCP_MAP_PORT3m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_ETAG_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM7_ETAG_MAP_PORT0.
 */
#define READ_IDB_OBM7_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM7_ETAG_MAP_PORT0m_OFFSET,i,(m._idb_obm7_etag_map_port0),1)
#define WRITE_IDB_OBM7_ETAG_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_ETAG_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM7_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm7_etag_map_port0),1)
#define WRITE_IDB_OBM7_ETAG_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_ETAG_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM7_ETAG_MAP_PORT0m_OFFSET,i,&(m._idb_obm7_etag_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM7_ETAG_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_ETAG_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM7_ETAG_MAP_PORT1.
 */
#define READ_IDB_OBM7_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM7_ETAG_MAP_PORT1m_OFFSET,i,(m._idb_obm7_etag_map_port1),1)
#define WRITE_IDB_OBM7_ETAG_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_ETAG_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM7_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm7_etag_map_port1),1)
#define WRITE_IDB_OBM7_ETAG_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_ETAG_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM7_ETAG_MAP_PORT1m_OFFSET,i,&(m._idb_obm7_etag_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM7_ETAG_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_ETAG_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM7_ETAG_MAP_PORT2.
 */
#define READ_IDB_OBM7_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM7_ETAG_MAP_PORT2m_OFFSET,i,(m._idb_obm7_etag_map_port2),1)
#define WRITE_IDB_OBM7_ETAG_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_ETAG_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM7_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm7_etag_map_port2),1)
#define WRITE_IDB_OBM7_ETAG_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_ETAG_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM7_ETAG_MAP_PORT2m_OFFSET,i,&(m._idb_obm7_etag_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM7_ETAG_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_ETAG_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     16
 */
/*
 * These macros can be used to access IDB_OBM7_ETAG_MAP_PORT3.
 */
#define READ_IDB_OBM7_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM7_ETAG_MAP_PORT3m_OFFSET,i,(m._idb_obm7_etag_map_port3),1)
#define WRITE_IDB_OBM7_ETAG_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_ETAG_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM7_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm7_etag_map_port3),1)
#define WRITE_IDB_OBM7_ETAG_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_ETAG_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM7_ETAG_MAP_PORT3m_OFFSET,i,&(m._idb_obm7_etag_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM7_ETAG_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_FC_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_FC_THRESHOLD.
 */
#define READ_IDB_OBM7_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM7_FC_THRESHOLDr_OFFSET,i,(r._idb_obm7_fc_threshold),2)
#define WRITE_IDB_OBM7_FC_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_FC_THRESHOLDr_BLKACC,1,n,0,IDB_OBM7_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm7_fc_threshold),2)
#define WRITE_IDB_OBM7_FC_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_FC_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM7_FC_THRESHOLDr_OFFSET,i,&(r._idb_obm7_fc_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM7_FC_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_FLOW_CONTROL_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_FLOW_CONTROL_CONFIG.
 */
#define READ_IDB_OBM7_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM7_FLOW_CONTROL_CONFIGr_OFFSET,i,(r._idb_obm7_flow_control_config),2)
#define WRITE_IDB_OBM7_FLOW_CONTROL_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_FLOW_CONTROL_CONFIGr_BLKACC,1,n,0,IDB_OBM7_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm7_flow_control_config),2)
#define WRITE_IDB_OBM7_FLOW_CONTROL_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_FLOW_CONTROL_CONFIGr_BLKACC,1,-1,0,IDB_OBM7_FLOW_CONTROL_CONFIGr_OFFSET,i,&(r._idb_obm7_flow_control_config),2)

/*******************************************************************************
 * End of 'IDB_OBM7_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_FLOW_CONTROL_EVENT_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_FLOW_CONTROL_EVENT_COUNT.
 */
#define READ_IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,(r._idb_obm7_flow_control_event_count),2)
#define WRITE_IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,n,0,IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm7_flow_control_event_count),2)
#define WRITE_IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr_BLKACC,1,-1,0,IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr_OFFSET,i,&(r._idb_obm7_flow_control_event_count),2)

/*******************************************************************************
 * End of 'IDB_OBM7_FLOW_CONTROL_EVENT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_INNER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_INNER_TPID.
 */
#define READ_IDB_OBM7_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM7_INNER_TPIDr_OFFSET,0,(r._idb_obm7_inner_tpid),1)
#define WRITE_IDB_OBM7_INNER_TPIDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_INNER_TPIDr_BLKACC,1,n,0,IDB_OBM7_INNER_TPIDr_OFFSET,0,&(r._idb_obm7_inner_tpid),1)
#define WRITE_IDB_OBM7_INNER_TPIDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_INNER_TPIDr_BLKACC,1,-1,0,IDB_OBM7_INNER_TPIDr_OFFSET,0,&(r._idb_obm7_inner_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM7_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm7_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossless0_byte_drop_count),2)
#define WRITE_IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossless0_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM7_LOSSLESS0_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_LOSSLESS0_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_LOSSLESS0_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm7_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossless0_pkt_drop_count),1)
#define WRITE_IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossless0_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM7_LOSSLESS0_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm7_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossless1_byte_drop_count),2)
#define WRITE_IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossless1_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM7_LOSSLESS1_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_LOSSLESS1_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_LOSSLESS1_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm7_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossless1_pkt_drop_count),1)
#define WRITE_IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossless1_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM7_LOSSLESS1_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm7_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossy_hi_byte_drop_count),2)
#define WRITE_IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossy_hi_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM7_LOSSY_HI_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_LOSSY_HI_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_LOSSY_HI_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm7_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossy_hi_pkt_drop_count),1)
#define WRITE_IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossy_hi_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM7_LOSSY_HI_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNT.
 */
#define READ_IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,(r._idb_obm7_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossy_lo_byte_drop_count),2)
#define WRITE_IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossy_lo_byte_drop_count),2)

/*******************************************************************************
 * End of 'IDB_OBM7_LOSSY_LO_BYTE_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_LOSSY_LO_PKT_DROP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_LOSSY_LO_PKT_DROP_COUNT.
 */
#define READ_IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,(r._idb_obm7_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,n,0,IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossy_lo_pkt_drop_count),1)
#define WRITE_IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr_BLKACC,1,-1,0,IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr_OFFSET,i,&(r._idb_obm7_lossy_lo_pkt_drop_count),1)

/*******************************************************************************
 * End of 'IDB_OBM7_LOSSY_LO_PKT_DROP_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_MAX_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_MAX_USAGE.
 */
#define READ_IDB_OBM7_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM7_MAX_USAGEr_OFFSET,0,(r._idb_obm7_max_usage),2)
#define WRITE_IDB_OBM7_MAX_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_MAX_USAGEr_BLKACC,1,n,0,IDB_OBM7_MAX_USAGEr_OFFSET,0,&(r._idb_obm7_max_usage),2)
#define WRITE_IDB_OBM7_MAX_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_MAX_USAGEr_BLKACC,1,-1,0,IDB_OBM7_MAX_USAGEr_OFFSET,0,&(r._idb_obm7_max_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM7_MAX_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_MAX_USAGE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_MAX_USAGE_SELECT.
 */
#define READ_IDB_OBM7_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM7_MAX_USAGE_SELECTr_OFFSET,0,(r._idb_obm7_max_usage_select),1)
#define WRITE_IDB_OBM7_MAX_USAGE_SELECTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_MAX_USAGE_SELECTr_BLKACC,1,n,0,IDB_OBM7_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm7_max_usage_select),1)
#define WRITE_IDB_OBM7_MAX_USAGE_SELECTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_MAX_USAGE_SELECTr_BLKACC,1,-1,0,IDB_OBM7_MAX_USAGE_SELECTr_OFFSET,0,&(r._idb_obm7_max_usage_select),1)

/*******************************************************************************
 * End of 'IDB_OBM7_MAX_USAGE_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_NIV_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_NIV_ETHERTYPE.
 */
#define READ_IDB_OBM7_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM7_NIV_ETHERTYPEr_OFFSET,0,(r._idb_obm7_niv_ethertype),1)
#define WRITE_IDB_OBM7_NIV_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_NIV_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM7_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm7_niv_ethertype),1)
#define WRITE_IDB_OBM7_NIV_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_NIV_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM7_NIV_ETHERTYPEr_OFFSET,0,&(r._idb_obm7_niv_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM7_NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_OUTER_TPID.
 */
#define READ_IDB_OBM7_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM7_OUTER_TPIDr_OFFSET,i,(r._idb_obm7_outer_tpid),1)
#define WRITE_IDB_OBM7_OUTER_TPIDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPIDr_BLKACC,1,n,0,IDB_OBM7_OUTER_TPIDr_OFFSET,i,&(r._idb_obm7_outer_tpid),1)
#define WRITE_IDB_OBM7_OUTER_TPIDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPIDr_BLKACC,1,-1,0,IDB_OBM7_OUTER_TPIDr_OFFSET,i,&(r._idb_obm7_outer_tpid),1)

/*******************************************************************************
 * End of 'IDB_OBM7_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_OUTER_TPID_0.
 */
#define READ_IDB_OBM7_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM7_OUTER_TPID_0r_OFFSET,0,(r._idb_obm7_outer_tpid_0),1)
#define WRITE_IDB_OBM7_OUTER_TPID_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPID_0r_BLKACC,1,n,0,IDB_OBM7_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm7_outer_tpid_0),1)
#define WRITE_IDB_OBM7_OUTER_TPID_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPID_0r_BLKACC,1,-1,0,IDB_OBM7_OUTER_TPID_0r_OFFSET,0,&(r._idb_obm7_outer_tpid_0),1)

/*******************************************************************************
 * End of 'IDB_OBM7_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_OUTER_TPID_1.
 */
#define READ_IDB_OBM7_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM7_OUTER_TPID_1r_OFFSET,0,(r._idb_obm7_outer_tpid_1),1)
#define WRITE_IDB_OBM7_OUTER_TPID_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPID_1r_BLKACC,1,n,0,IDB_OBM7_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm7_outer_tpid_1),1)
#define WRITE_IDB_OBM7_OUTER_TPID_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPID_1r_BLKACC,1,-1,0,IDB_OBM7_OUTER_TPID_1r_OFFSET,0,&(r._idb_obm7_outer_tpid_1),1)

/*******************************************************************************
 * End of 'IDB_OBM7_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_OUTER_TPID_2.
 */
#define READ_IDB_OBM7_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM7_OUTER_TPID_2r_OFFSET,0,(r._idb_obm7_outer_tpid_2),1)
#define WRITE_IDB_OBM7_OUTER_TPID_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPID_2r_BLKACC,1,n,0,IDB_OBM7_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm7_outer_tpid_2),1)
#define WRITE_IDB_OBM7_OUTER_TPID_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPID_2r_BLKACC,1,-1,0,IDB_OBM7_OUTER_TPID_2r_OFFSET,0,&(r._idb_obm7_outer_tpid_2),1)

/*******************************************************************************
 * End of 'IDB_OBM7_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_OUTER_TPID_3.
 */
#define READ_IDB_OBM7_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM7_OUTER_TPID_3r_OFFSET,0,(r._idb_obm7_outer_tpid_3),1)
#define WRITE_IDB_OBM7_OUTER_TPID_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPID_3r_BLKACC,1,n,0,IDB_OBM7_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm7_outer_tpid_3),1)
#define WRITE_IDB_OBM7_OUTER_TPID_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OUTER_TPID_3r_BLKACC,1,-1,0,IDB_OBM7_OUTER_TPID_3r_OFFSET,0,&(r._idb_obm7_outer_tpid_3),1)

/*******************************************************************************
 * End of 'IDB_OBM7_OUTER_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_OVERSUB_MON_PARITY_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_OVERSUB_MON_PARITY_STATUS.
 */
#define READ_IDB_OBM7_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM7_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,(r._idb_obm7_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM7_OVERSUB_MON_PARITY_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,n,0,IDB_OBM7_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm7_oversub_mon_parity_status),1)
#define WRITE_IDB_OBM7_OVERSUB_MON_PARITY_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_OVERSUB_MON_PARITY_STATUSr_BLKACC,1,-1,0,IDB_OBM7_OVERSUB_MON_PARITY_STATUSr_OFFSET,0,&(r._idb_obm7_oversub_mon_parity_status),1)

/*******************************************************************************
 * End of 'IDB_OBM7_OVERSUB_MON_PARITY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_PE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_PE_ETHERTYPE.
 */
#define READ_IDB_OBM7_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM7_PE_ETHERTYPEr_OFFSET,0,(r._idb_obm7_pe_ethertype),1)
#define WRITE_IDB_OBM7_PE_ETHERTYPEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PE_ETHERTYPEr_BLKACC,1,n,0,IDB_OBM7_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm7_pe_ethertype),1)
#define WRITE_IDB_OBM7_PE_ETHERTYPEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PE_ETHERTYPEr_BLKACC,1,-1,0,IDB_OBM7_PE_ETHERTYPEr_OFFSET,0,&(r._idb_obm7_pe_ethertype),1)

/*******************************************************************************
 * End of 'IDB_OBM7_PE_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_PORT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_PORT_CONFIG.
 */
#define READ_IDB_OBM7_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM7_PORT_CONFIGr_OFFSET,i,(r._idb_obm7_port_config),1)
#define WRITE_IDB_OBM7_PORT_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PORT_CONFIGr_BLKACC,1,n,0,IDB_OBM7_PORT_CONFIGr_OFFSET,i,&(r._idb_obm7_port_config),1)
#define WRITE_IDB_OBM7_PORT_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PORT_CONFIGr_BLKACC,1,-1,0,IDB_OBM7_PORT_CONFIGr_OFFSET,i,&(r._idb_obm7_port_config),1)

/*******************************************************************************
 * End of 'IDB_OBM7_PORT_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_PRI_MAP_PORT0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_PRI_MAP_PORT0.
 */
#define READ_IDB_OBM7_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM7_PRI_MAP_PORT0m_OFFSET,i,(m._idb_obm7_pri_map_port0),1)
#define WRITE_IDB_OBM7_PRI_MAP_PORT0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_PRI_MAP_PORT0m_BLKACC,1,n,0,IDB_OBM7_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm7_pri_map_port0),1)
#define WRITE_IDB_OBM7_PRI_MAP_PORT0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_PRI_MAP_PORT0m_BLKACC,1,-1,0,IDB_OBM7_PRI_MAP_PORT0m_OFFSET,i,&(m._idb_obm7_pri_map_port0),1)

/*******************************************************************************
 * End of 'IDB_OBM7_PRI_MAP_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_PRI_MAP_PORT1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_PRI_MAP_PORT1.
 */
#define READ_IDB_OBM7_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM7_PRI_MAP_PORT1m_OFFSET,i,(m._idb_obm7_pri_map_port1),1)
#define WRITE_IDB_OBM7_PRI_MAP_PORT1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_PRI_MAP_PORT1m_BLKACC,1,n,0,IDB_OBM7_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm7_pri_map_port1),1)
#define WRITE_IDB_OBM7_PRI_MAP_PORT1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_PRI_MAP_PORT1m_BLKACC,1,-1,0,IDB_OBM7_PRI_MAP_PORT1m_OFFSET,i,&(m._idb_obm7_pri_map_port1),1)

/*******************************************************************************
 * End of 'IDB_OBM7_PRI_MAP_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_PRI_MAP_PORT2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_PRI_MAP_PORT2.
 */
#define READ_IDB_OBM7_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM7_PRI_MAP_PORT2m_OFFSET,i,(m._idb_obm7_pri_map_port2),1)
#define WRITE_IDB_OBM7_PRI_MAP_PORT2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_PRI_MAP_PORT2m_BLKACC,1,n,0,IDB_OBM7_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm7_pri_map_port2),1)
#define WRITE_IDB_OBM7_PRI_MAP_PORT2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_PRI_MAP_PORT2m_BLKACC,1,-1,0,IDB_OBM7_PRI_MAP_PORT2m_OFFSET,i,&(m._idb_obm7_pri_map_port2),1)

/*******************************************************************************
 * End of 'IDB_OBM7_PRI_MAP_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  IDB_OBM7_PRI_MAP_PORT3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_PRI_MAP_PORT3.
 */
#define READ_IDB_OBM7_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IDB_OBM7_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM7_PRI_MAP_PORT3m_OFFSET,i,(m._idb_obm7_pri_map_port3),1)
#define WRITE_IDB_OBM7_PRI_MAP_PORT3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_PRI_MAP_PORT3m_BLKACC,1,n,0,IDB_OBM7_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm7_pri_map_port3),1)
#define WRITE_IDB_OBM7_PRI_MAP_PORT3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IDB_OBM7_PRI_MAP_PORT3m_BLKACC,1,-1,0,IDB_OBM7_PRI_MAP_PORT3m_OFFSET,i,&(m._idb_obm7_pri_map_port3),1)

/*******************************************************************************
 * End of 'IDB_OBM7_PRI_MAP_PORT3m'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_PROTOCOL_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_PROTOCOL_CONTROL_0.
 */
#define READ_IDB_OBM7_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM7_PROTOCOL_CONTROL_0r_OFFSET,i,(r._idb_obm7_protocol_control_0),2)
#define WRITE_IDB_OBM7_PROTOCOL_CONTROL_0r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PROTOCOL_CONTROL_0r_BLKACC,1,n,0,IDB_OBM7_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm7_protocol_control_0),2)
#define WRITE_IDB_OBM7_PROTOCOL_CONTROL_0r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PROTOCOL_CONTROL_0r_BLKACC,1,-1,0,IDB_OBM7_PROTOCOL_CONTROL_0r_OFFSET,i,&(r._idb_obm7_protocol_control_0),2)

/*******************************************************************************
 * End of 'IDB_OBM7_PROTOCOL_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_PROTOCOL_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_PROTOCOL_CONTROL_1.
 */
#define READ_IDB_OBM7_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM7_PROTOCOL_CONTROL_1r_OFFSET,i,(r._idb_obm7_protocol_control_1),2)
#define WRITE_IDB_OBM7_PROTOCOL_CONTROL_1r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PROTOCOL_CONTROL_1r_BLKACC,1,n,0,IDB_OBM7_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm7_protocol_control_1),2)
#define WRITE_IDB_OBM7_PROTOCOL_CONTROL_1r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PROTOCOL_CONTROL_1r_BLKACC,1,-1,0,IDB_OBM7_PROTOCOL_CONTROL_1r_OFFSET,i,&(r._idb_obm7_protocol_control_1),2)

/*******************************************************************************
 * End of 'IDB_OBM7_PROTOCOL_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_PROTOCOL_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_PROTOCOL_CONTROL_2.
 */
#define READ_IDB_OBM7_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM7_PROTOCOL_CONTROL_2r_OFFSET,i,(r._idb_obm7_protocol_control_2),2)
#define WRITE_IDB_OBM7_PROTOCOL_CONTROL_2r(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PROTOCOL_CONTROL_2r_BLKACC,1,n,0,IDB_OBM7_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm7_protocol_control_2),2)
#define WRITE_IDB_OBM7_PROTOCOL_CONTROL_2r_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_PROTOCOL_CONTROL_2r_BLKACC,1,-1,0,IDB_OBM7_PROTOCOL_CONTROL_2r_OFFSET,i,&(r._idb_obm7_protocol_control_2),2)

/*******************************************************************************
 * End of 'IDB_OBM7_PROTOCOL_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_QUEUE_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_QUEUE_ECC_STATUS.
 */
#define READ_IDB_OBM7_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM7_QUEUE_ECC_STATUSr_OFFSET,0,(r._idb_obm7_queue_ecc_status),1)
#define WRITE_IDB_OBM7_QUEUE_ECC_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_QUEUE_ECC_STATUSr_BLKACC,1,n,0,IDB_OBM7_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm7_queue_ecc_status),1)
#define WRITE_IDB_OBM7_QUEUE_ECC_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_QUEUE_ECC_STATUSr_BLKACC,1,-1,0,IDB_OBM7_QUEUE_ECC_STATUSr_OFFSET,0,&(r._idb_obm7_queue_ecc_status),1)

/*******************************************************************************
 * End of 'IDB_OBM7_QUEUE_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_QUEUE_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_QUEUE_SER_CONTROL.
 */
#define READ_IDB_OBM7_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM7_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM7_QUEUE_SER_CONTROLr_OFFSET,0,(r._idb_obm7_queue_ser_control), 1)
#define WRITE_IDB_OBM7_QUEUE_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM7_QUEUE_SER_CONTROLr_BLKACC,1,IDB_OBM7_QUEUE_SER_CONTROLr_OFFSET,0,&(r._idb_obm7_queue_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM7_QUEUE_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_RAM_CONTROL.
 */
#define READ_IDB_OBM7_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM7_RAM_CONTROLr_OFFSET,0,(r._idb_obm7_ram_control),1)
#define WRITE_IDB_OBM7_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_RAM_CONTROLr_BLKACC,1,n,0,IDB_OBM7_RAM_CONTROLr_OFFSET,0,&(r._idb_obm7_ram_control),1)
#define WRITE_IDB_OBM7_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_RAM_CONTROLr_BLKACC,1,-1,0,IDB_OBM7_RAM_CONTROLr_OFFSET,0,&(r._idb_obm7_ram_control),1)

/*******************************************************************************
 * End of 'IDB_OBM7_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_SER_CONTROL.
 */
#define READ_IDB_OBM7_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_OBM7_SER_CONTROLr_BLKACC,1,IDB_OBM7_SER_CONTROLr_OFFSET,0,(r._idb_obm7_ser_control), 1)
#define WRITE_IDB_OBM7_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_OBM7_SER_CONTROLr_BLKACC,1,IDB_OBM7_SER_CONTROLr_OFFSET,0,&(r._idb_obm7_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_OBM7_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_SHARED_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_SHARED_CONFIG.
 */
#define READ_IDB_OBM7_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM7_SHARED_CONFIGr_OFFSET,0,(r._idb_obm7_shared_config),1)
#define WRITE_IDB_OBM7_SHARED_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_SHARED_CONFIGr_BLKACC,1,n,0,IDB_OBM7_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm7_shared_config),1)
#define WRITE_IDB_OBM7_SHARED_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_SHARED_CONFIGr_BLKACC,1,-1,0,IDB_OBM7_SHARED_CONFIGr_OFFSET,0,&(r._idb_obm7_shared_config),1)

/*******************************************************************************
 * End of 'IDB_OBM7_SHARED_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_SHARED_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM7_SHARED_USAGE.
 */
#define READ_IDB_OBM7_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM7_SHARED_USAGEr_OFFSET,0,(r._idb_obm7_shared_usage),1)
#define WRITE_IDB_OBM7_SHARED_USAGEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_SHARED_USAGEr_BLKACC,1,n,0,IDB_OBM7_SHARED_USAGEr_OFFSET,0,&(r._idb_obm7_shared_usage),1)
#define WRITE_IDB_OBM7_SHARED_USAGEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_SHARED_USAGEr_BLKACC,1,-1,0,IDB_OBM7_SHARED_USAGEr_OFFSET,0,&(r._idb_obm7_shared_usage),1)

/*******************************************************************************
 * End of 'IDB_OBM7_SHARED_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_THRESHOLD.
 */
#define READ_IDB_OBM7_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_THRESHOLDr_BLKACC,1,n,0,IDB_OBM7_THRESHOLDr_OFFSET,i,(r._idb_obm7_threshold),2)
#define WRITE_IDB_OBM7_THRESHOLDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_THRESHOLDr_BLKACC,1,n,0,IDB_OBM7_THRESHOLDr_OFFSET,i,&(r._idb_obm7_threshold),2)
#define WRITE_IDB_OBM7_THRESHOLDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_THRESHOLDr_BLKACC,1,-1,0,IDB_OBM7_THRESHOLDr_OFFSET,i,&(r._idb_obm7_threshold),2)

/*******************************************************************************
 * End of 'IDB_OBM7_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM7_USAGE
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IDB_OBM7_USAGE.
 */
#define READ_IDB_OBM7_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM7_USAGEr_BLKACC,1,n,0,IDB_OBM7_USAGEr_OFFSET,i,(r._idb_obm7_usage),2)
#define WRITE_IDB_OBM7_USAGEr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_USAGEr_BLKACC,1,n,0,IDB_OBM7_USAGEr_OFFSET,i,&(r._idb_obm7_usage),2)
#define WRITE_IDB_OBM7_USAGEr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM7_USAGEr_BLKACC,1,-1,0,IDB_OBM7_USAGEr_OFFSET,i,&(r._idb_obm7_usage),2)

/*******************************************************************************
 * End of 'IDB_OBM7_USAGEr'
 */




/*******************************************************************************
 * REGISTER:  IDB_OBM_MON_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_OBM_MON_HW_CONTROL.
 */
#define READ_IDB_OBM_MON_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_OBM_MON_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM_MON_HW_CONTROLr_OFFSET,0,(r._idb_obm_mon_hw_control),1)
#define WRITE_IDB_OBM_MON_HW_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM_MON_HW_CONTROLr_BLKACC,1,n,0,IDB_OBM_MON_HW_CONTROLr_OFFSET,0,&(r._idb_obm_mon_hw_control),1)
#define WRITE_IDB_OBM_MON_HW_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_OBM_MON_HW_CONTROLr_BLKACC,1,-1,0,IDB_OBM_MON_HW_CONTROLr_OFFSET,0,&(r._idb_obm_mon_hw_control),1)

/*******************************************************************************
 * End of 'IDB_OBM_MON_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IDB_SBUS_TIMER
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_SBUS_TIMER.
 */
#define READ_IDB_SBUS_TIMERr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IDB_SBUS_TIMERr_BLKACC,1,n,0,IDB_SBUS_TIMERr_OFFSET,0,(r._idb_sbus_timer),1)
#define WRITE_IDB_SBUS_TIMERr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_SBUS_TIMERr_BLKACC,1,n,0,IDB_SBUS_TIMERr_OFFSET,0,&(r._idb_sbus_timer),1)
#define WRITE_IDB_SBUS_TIMERr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IDB_SBUS_TIMERr_BLKACC,1,-1,0,IDB_SBUS_TIMERr_OFFSET,0,&(r._idb_sbus_timer),1)

/*******************************************************************************
 * End of 'IDB_SBUS_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  IDB_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IDB_SER_CONTROL.
 */
#define READ_IDB_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IDB_SER_CONTROLr_BLKACC,1,IDB_SER_CONTROLr_OFFSET,0,(r._idb_ser_control), 1)
#define WRITE_IDB_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IDB_SER_CONTROLr_BLKACC,1,IDB_SER_CONTROLr_OFFSET,0,&(r._idb_ser_control), 1)

/*******************************************************************************
 * End of 'IDB_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_BIST_CAM_MODE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_BIST_CAM_MODE.
 */
#define READ_IFP_BIST_CAM_MODEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_BIST_CAM_MODEr_BLKACC,1,n,0,IFP_BIST_CAM_MODEr_OFFSET,0,(r._ifp_bist_cam_mode),1)
#define WRITE_IFP_BIST_CAM_MODEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_BIST_CAM_MODEr_BLKACC,1,n,0,IFP_BIST_CAM_MODEr_OFFSET,0,&(r._ifp_bist_cam_mode),1)
#define WRITE_IFP_BIST_CAM_MODEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_BIST_CAM_MODEr_BLKACC,1,-1,0,IFP_BIST_CAM_MODEr_OFFSET,0,&(r._ifp_bist_cam_mode),1)

/*******************************************************************************
 * End of 'IFP_BIST_CAM_MODEr'
 */




/*******************************************************************************
 * REGISTER:  IFP_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_CONFIG.
 */
#define READ_IFP_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_CONFIGr_BLKACC,1,n,0,IFP_CONFIGr_OFFSET,i,(r._ifp_config),1)
#define WRITE_IFP_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_CONFIGr_BLKACC,1,n,0,IFP_CONFIGr_OFFSET,i,&(r._ifp_config),1)
#define WRITE_IFP_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_CONFIGr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,IFP_CONFIGr_OFFSET,i,&(r._ifp_config),1)

/*******************************************************************************
 * End of 'IFP_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IFP_COS_MAP
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access IFP_COS_MAP.
 */
#define READ_IFP_COS_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_COS_MAPm_BLKACC)+1,IFP_COS_MAPm_OFFSET+i,(m._ifp_cos_map),1)
#define WRITE_IFP_COS_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_COS_MAPm_BLKACC)+1,IFP_COS_MAPm_OFFSET+i,&(m._ifp_cos_map),1)

/*******************************************************************************
 * End of 'IFP_COS_MAPm'
 */




/*******************************************************************************
 * REGISTER:  IFP_ECMP_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_ECMP_HASH_CONTROL.
 */
#define READ_IFP_ECMP_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IFP_ECMP_HASH_CONTROLr_BLKACC,1,IFP_ECMP_HASH_CONTROLr_OFFSET,0,(r._ifp_ecmp_hash_control), 1)
#define WRITE_IFP_ECMP_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IFP_ECMP_HASH_CONTROLr_BLKACC,1,IFP_ECMP_HASH_CONTROLr_OFFSET,0,&(r._ifp_ecmp_hash_control), 1)

/*******************************************************************************
 * End of 'IFP_ECMP_HASH_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  IFP_HG_CLASSID_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access IFP_HG_CLASSID_SELECT.
 */
#define READ_IFP_HG_CLASSID_SELECTm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_HG_CLASSID_SELECTm_BLKACC)+1,IFP_HG_CLASSID_SELECTm_OFFSET+i,(m._ifp_hg_classid_select),1)
#define WRITE_IFP_HG_CLASSID_SELECTm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_HG_CLASSID_SELECTm_BLKACC)+1,IFP_HG_CLASSID_SELECTm_OFFSET+i,&(m._ifp_hg_classid_select),1)

/*******************************************************************************
 * End of 'IFP_HG_CLASSID_SELECTm'
 */




/*******************************************************************************
 * MEMORY:  IFP_I2E_CLASSID_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access IFP_I2E_CLASSID_SELECT.
 */
#define READ_IFP_I2E_CLASSID_SELECTm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_I2E_CLASSID_SELECTm_BLKACC)+1,IFP_I2E_CLASSID_SELECTm_OFFSET+i,(m._ifp_i2e_classid_select),1)
#define WRITE_IFP_I2E_CLASSID_SELECTm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_I2E_CLASSID_SELECTm_BLKACC)+1,IFP_I2E_CLASSID_SELECTm_OFFSET+i,&(m._ifp_i2e_classid_select),1)

/*******************************************************************************
 * End of 'IFP_I2E_CLASSID_SELECTm'
 */




/*******************************************************************************
 * REGISTER:  IFP_ING_DVP_2_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_ING_DVP_2_CONTROL.
 */
#define READ_IFP_ING_DVP_2_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_ING_DVP_2_CONTROLr_BLKACC,1,n,0,IFP_ING_DVP_2_CONTROLr_OFFSET,0,(r._ifp_ing_dvp_2_control),1)
#define WRITE_IFP_ING_DVP_2_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_ING_DVP_2_CONTROLr_BLKACC,1,n,0,IFP_ING_DVP_2_CONTROLr_OFFSET,0,&(r._ifp_ing_dvp_2_control),1)
#define WRITE_IFP_ING_DVP_2_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_ING_DVP_2_CONTROLr_BLKACC,1,-1,0,IFP_ING_DVP_2_CONTROLr_OFFSET,0,&(r._ifp_ing_dvp_2_control),1)

/*******************************************************************************
 * End of 'IFP_ING_DVP_2_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  IFP_KEY_GEN_PROGRAM_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     387
 */
/*
 * These macros can be used to access IFP_KEY_GEN_PROGRAM_PROFILE.
 */
#define READ_IFP_KEY_GEN_PROGRAM_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,(m._ifp_key_gen_program_profile),13)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,&(m._ifp_key_gen_program_profile),13)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILEm_BLKACC,1,-1,0,IFP_KEY_GEN_PROGRAM_PROFILEm_OFFSET,i,&(m._ifp_key_gen_program_profile),13)

/*******************************************************************************
 * End of 'IFP_KEY_GEN_PROGRAM_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  IFP_KEY_GEN_PROGRAM_PROFILE2
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access IFP_KEY_GEN_PROGRAM_PROFILE2.
 */
#define READ_IFP_KEY_GEN_PROGRAM_PROFILE2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_KEY_GEN_PROGRAM_PROFILE2m_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILE2m_OFFSET,i,(m._ifp_key_gen_program_profile2),1)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILE2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILE2m_BLKACC,1,n,0,IFP_KEY_GEN_PROGRAM_PROFILE2m_OFFSET,i,&(m._ifp_key_gen_program_profile2),1)
#define WRITE_IFP_KEY_GEN_PROGRAM_PROFILE2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_KEY_GEN_PROGRAM_PROFILE2m_BLKACC,1,-1,0,IFP_KEY_GEN_PROGRAM_PROFILE2m_OFFSET,i,&(m._ifp_key_gen_program_profile2),1)

/*******************************************************************************
 * End of 'IFP_KEY_GEN_PROGRAM_PROFILE2m'
 */




/*******************************************************************************
 * MEMORY:  IFP_LOGICAL_TABLE_ACTION_PRIORITY
 * BLOCKS:   IPIPE
 * SIZE:     160
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_ACTION_PRIORITY.
 */
#define READ_IFP_LOGICAL_TABLE_ACTION_PRIORITYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_OFFSET,i,(m._ifp_logical_table_action_priority),5)
#define WRITE_IFP_LOGICAL_TABLE_ACTION_PRIORITYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_OFFSET,i,&(m._ifp_logical_table_action_priority),5)
#define WRITE_IFP_LOGICAL_TABLE_ACTION_PRIORITYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_ACTION_PRIORITYm_OFFSET,i,&(m._ifp_logical_table_action_priority),5)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_ACTION_PRIORITYm'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_CONFIG.
 */
#define READ_IFP_LOGICAL_TABLE_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_LOGICAL_TABLE_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_CONFIGr_OFFSET,i,(r._ifp_logical_table_config),2)
#define WRITE_IFP_LOGICAL_TABLE_CONFIGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_CONFIGr_OFFSET,i,&(r._ifp_logical_table_config),2)
#define WRITE_IFP_LOGICAL_TABLE_CONFIGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_CONFIGr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,IFP_LOGICAL_TABLE_CONFIGr_OFFSET,i,&(r._ifp_logical_table_config),2)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  IFP_LOGICAL_TABLE_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     262
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT.
 */
#define READ_IFP_LOGICAL_TABLE_SELECTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_LOGICAL_TABLE_SELECTm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECTm_OFFSET,i,(m._ifp_logical_table_select),9)
#define WRITE_IFP_LOGICAL_TABLE_SELECTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECTm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECTm_OFFSET,i,&(m._ifp_logical_table_select),9)
#define WRITE_IFP_LOGICAL_TABLE_SELECTm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECTm_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECTm_OFFSET,i,&(m._ifp_logical_table_select),9)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECTm'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIG.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_OFFSET,0,(r._ifp_logical_table_select_cam_bist_config),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_config),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_config),1)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATA.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_OFFSET,0,(r._ifp_logical_table_select_cam_bist_dbg_data),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_dbg_data),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUS.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,(r._ifp_logical_table_select_cam_bist_status),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_status),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr_OFFSET,0,&(r._ifp_logical_table_select_cam_bist_status),1)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRL.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,(r._ifp_logical_table_select_cam_dbgctrl),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,&(r._ifp_logical_table_select_cam_dbgctrl),2)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr_OFFSET,0,&(r._ifp_logical_table_select_cam_dbgctrl),2)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_CONFIG.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,(r._ifp_logical_table_select_config),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,&(r._ifp_logical_table_select_config),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_CONFIGr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,IFP_LOGICAL_TABLE_SELECT_CONFIGr_OFFSET,0,&(r._ifp_logical_table_select_config),1)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_LOGICAL_TABLE_SELECT_DATA_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_DATA_CTRL.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_OFFSET,0,(r._ifp_logical_table_select_data_ctrl),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_OFFSET,0,&(r._ifp_logical_table_select_data_ctrl),1)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr_OFFSET,0,&(r._ifp_logical_table_select_data_ctrl),1)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_DATA_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  IFP_LOGICAL_TABLE_SELECT_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     69
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_DATA_ONLY.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,(m._ifp_logical_table_select_data_only),3)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,&(m._ifp_logical_table_select_data_only),3)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm_OFFSET,i,&(m._ifp_logical_table_select_data_only),3)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  IFP_LOGICAL_TABLE_SELECT_TCAM_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     193
 */
/*
 * These macros can be used to access IFP_LOGICAL_TABLE_SELECT_TCAM_ONLY.
 */
#define READ_IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,(m._ifp_logical_table_select_tcam_only),7)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,n,0,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,&(m._ifp_logical_table_select_tcam_only),7)
#define WRITE_IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_BLKACC,1,-1,0,IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm_OFFSET,i,&(m._ifp_logical_table_select_tcam_only),7)

/*******************************************************************************
 * End of 'IFP_LOGICAL_TABLE_SELECT_TCAM_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  IFP_METER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_METER_CONTROL.
 */
#define READ_IFP_METER_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_read(u,IFP_METER_CONTROLr_BLKACC,p,IFP_METER_CONTROLr_OFFSET,0,(r._ifp_meter_control), 1)
#define WRITE_IFP_METER_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_write(u,IFP_METER_CONTROLr_BLKACC,p,IFP_METER_CONTROLr_OFFSET,0,&(r._ifp_meter_control), 1)

/*******************************************************************************
 * End of 'IFP_METER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  IFP_METER_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     70
 */
/*
 * These macros can be used to access IFP_METER_TABLE.
 */
#define READ_IFP_METER_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_METER_TABLEm_BLKACC,1,n,0,IFP_METER_TABLEm_OFFSET,i,(m._ifp_meter_table),3)
#define WRITE_IFP_METER_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_METER_TABLEm_BLKACC,1,n,0,IFP_METER_TABLEm_OFFSET,i,&(m._ifp_meter_table),3)
#define WRITE_IFP_METER_TABLEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_METER_TABLEm_BLKACC,1,-1,0,IFP_METER_TABLEm_OFFSET,i,&(m._ifp_meter_table),3)

/*******************************************************************************
 * End of 'IFP_METER_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  IFP_PARITY_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_PARITY_CONTROL.
 */
#define READ_IFP_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IFP_PARITY_CONTROLr_BLKACC,1,IFP_PARITY_CONTROLr_OFFSET,0,(r._ifp_parity_control), 1)
#define WRITE_IFP_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IFP_PARITY_CONTROLr_BLKACC,1,IFP_PARITY_CONTROLr_OFFSET,0,&(r._ifp_parity_control), 1)

/*******************************************************************************
 * End of 'IFP_PARITY_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  IFP_POLICY_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     303
 */
/*
 * These macros can be used to access IFP_POLICY_TABLE.
 */
#define READ_IFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_POLICY_TABLEm_BLKACC,1,n,0,IFP_POLICY_TABLEm_OFFSET,i,(m._ifp_policy_table),10)
#define WRITE_IFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_POLICY_TABLEm_BLKACC,1,n,0,IFP_POLICY_TABLEm_OFFSET,i,&(m._ifp_policy_table),10)
#define WRITE_IFP_POLICY_TABLEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_POLICY_TABLEm_BLKACC,1,-1,0,IFP_POLICY_TABLEm_OFFSET,i,&(m._ifp_policy_table),10)

/*******************************************************************************
 * End of 'IFP_POLICY_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  IFP_PORT_METER_MAP
 * BLOCKS:   IPIPE
 * SIZE:     24
 */
/*
 * These macros can be used to access IFP_PORT_METER_MAP.
 */
#define READ_IFP_PORT_METER_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_PORT_METER_MAPm_BLKACC)+1,IFP_PORT_METER_MAPm_OFFSET+i,(m._ifp_port_meter_map),1)
#define WRITE_IFP_PORT_METER_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_PORT_METER_MAPm_BLKACC)+1,IFP_PORT_METER_MAPm_OFFSET+i,&(m._ifp_port_meter_map),1)

/*******************************************************************************
 * End of 'IFP_PORT_METER_MAPm'
 */




/*******************************************************************************
 * MEMORY:  IFP_RANGE_CHECK
 * BLOCKS:   IPIPE
 * SIZE:     52
 */
/*
 * These macros can be used to access IFP_RANGE_CHECK.
 */
#define READ_IFP_RANGE_CHECKm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_RANGE_CHECKm_BLKACC,1,n,0,IFP_RANGE_CHECKm_OFFSET,i,(m._ifp_range_check),2)
#define WRITE_IFP_RANGE_CHECKm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_RANGE_CHECKm_BLKACC,1,n,0,IFP_RANGE_CHECKm_OFFSET,i,&(m._ifp_range_check),2)
#define WRITE_IFP_RANGE_CHECKm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_RANGE_CHECKm_BLKACC,1,-1,0,IFP_RANGE_CHECKm_OFFSET,i,&(m._ifp_range_check),2)

/*******************************************************************************
 * End of 'IFP_RANGE_CHECKm'
 */




/*******************************************************************************
 * MEMORY:  IFP_REDIRECTION_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     147
 */
/*
 * These macros can be used to access IFP_REDIRECTION_PROFILE.
 */
#define READ_IFP_REDIRECTION_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_REDIRECTION_PROFILEm_BLKACC)+1,IFP_REDIRECTION_PROFILEm_OFFSET+i,(m._ifp_redirection_profile),5)
#define WRITE_IFP_REDIRECTION_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_REDIRECTION_PROFILEm_BLKACC)+1,IFP_REDIRECTION_PROFILEm_OFFSET+i,&(m._ifp_redirection_profile),5)

/*******************************************************************************
 * End of 'IFP_REDIRECTION_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  IFP_SLICE_METER_MAP_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_SLICE_METER_MAP_ENABLE.
 */
#define READ_IFP_SLICE_METER_MAP_ENABLEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_SLICE_METER_MAP_ENABLEr_BLKACC,1,n,0,IFP_SLICE_METER_MAP_ENABLEr_OFFSET,0,(r._ifp_slice_meter_map_enable),1)
#define WRITE_IFP_SLICE_METER_MAP_ENABLEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_SLICE_METER_MAP_ENABLEr_BLKACC,1,n,0,IFP_SLICE_METER_MAP_ENABLEr_OFFSET,0,&(r._ifp_slice_meter_map_enable),1)
#define WRITE_IFP_SLICE_METER_MAP_ENABLEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_SLICE_METER_MAP_ENABLEr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,IFP_SLICE_METER_MAP_ENABLEr_OFFSET,0,&(r._ifp_slice_meter_map_enable),1)

/*******************************************************************************
 * End of 'IFP_SLICE_METER_MAP_ENABLEr'
 */




/*******************************************************************************
 * MEMORY:  IFP_STORM_CONTROL_METERS
 * BLOCKS:   IPIPE
 * SIZE:     60
 */
/*
 * These macros can be used to access IFP_STORM_CONTROL_METERS.
 */
#define READ_IFP_STORM_CONTROL_METERSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_STORM_CONTROL_METERSm_BLKACC)+1,IFP_STORM_CONTROL_METERSm_OFFSET+i,(m._ifp_storm_control_meters),2)
#define WRITE_IFP_STORM_CONTROL_METERSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IFP_STORM_CONTROL_METERSm_BLKACC)+1,IFP_STORM_CONTROL_METERSm_OFFSET+i,&(m._ifp_storm_control_meters),2)

/*******************************************************************************
 * End of 'IFP_STORM_CONTROL_METERSm'
 */




/*******************************************************************************
 * MEMORY:  IFP_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     161
 */
/*
 * These macros can be used to access IFP_TCAM.
 */
#define READ_IFP_TCAMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_TCAMm_BLKACC,1,n,0,IFP_TCAMm_OFFSET,i,(m._ifp_tcam),6)
#define WRITE_IFP_TCAMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_TCAMm_BLKACC,1,n,0,IFP_TCAMm_OFFSET,i,&(m._ifp_tcam),6)
#define WRITE_IFP_TCAMm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_TCAMm_BLKACC,1,-1,0,IFP_TCAMm_OFFSET,i,&(m._ifp_tcam),6)

/*******************************************************************************
 * End of 'IFP_TCAMm'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM0_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM0_DBGCTRL.
 */
#define READ_IFP_TCAM0_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM0_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM0_DBGCTRLr_OFFSET,0,(r._ifp_tcam0_dbgctrl),1)
#define WRITE_IFP_TCAM0_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM0_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM0_DBGCTRLr_OFFSET,0,&(r._ifp_tcam0_dbgctrl),1)
#define WRITE_IFP_TCAM0_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM0_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM0_DBGCTRLr_OFFSET,0,&(r._ifp_tcam0_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM0_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM10_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM10_DBGCTRL.
 */
#define READ_IFP_TCAM10_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM10_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM10_DBGCTRLr_OFFSET,0,(r._ifp_tcam10_dbgctrl),1)
#define WRITE_IFP_TCAM10_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM10_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM10_DBGCTRLr_OFFSET,0,&(r._ifp_tcam10_dbgctrl),1)
#define WRITE_IFP_TCAM10_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM10_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM10_DBGCTRLr_OFFSET,0,&(r._ifp_tcam10_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM10_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM11_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM11_DBGCTRL.
 */
#define READ_IFP_TCAM11_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM11_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM11_DBGCTRLr_OFFSET,0,(r._ifp_tcam11_dbgctrl),1)
#define WRITE_IFP_TCAM11_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM11_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM11_DBGCTRLr_OFFSET,0,&(r._ifp_tcam11_dbgctrl),1)
#define WRITE_IFP_TCAM11_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM11_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM11_DBGCTRLr_OFFSET,0,&(r._ifp_tcam11_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM11_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM1_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM1_DBGCTRL.
 */
#define READ_IFP_TCAM1_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM1_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM1_DBGCTRLr_OFFSET,0,(r._ifp_tcam1_dbgctrl),1)
#define WRITE_IFP_TCAM1_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM1_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM1_DBGCTRLr_OFFSET,0,&(r._ifp_tcam1_dbgctrl),1)
#define WRITE_IFP_TCAM1_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM1_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM1_DBGCTRLr_OFFSET,0,&(r._ifp_tcam1_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM1_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM2_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM2_DBGCTRL.
 */
#define READ_IFP_TCAM2_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM2_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM2_DBGCTRLr_OFFSET,0,(r._ifp_tcam2_dbgctrl),1)
#define WRITE_IFP_TCAM2_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM2_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM2_DBGCTRLr_OFFSET,0,&(r._ifp_tcam2_dbgctrl),1)
#define WRITE_IFP_TCAM2_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM2_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM2_DBGCTRLr_OFFSET,0,&(r._ifp_tcam2_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM2_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM3_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM3_DBGCTRL.
 */
#define READ_IFP_TCAM3_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM3_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM3_DBGCTRLr_OFFSET,0,(r._ifp_tcam3_dbgctrl),1)
#define WRITE_IFP_TCAM3_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM3_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM3_DBGCTRLr_OFFSET,0,&(r._ifp_tcam3_dbgctrl),1)
#define WRITE_IFP_TCAM3_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM3_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM3_DBGCTRLr_OFFSET,0,&(r._ifp_tcam3_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM3_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM4_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM4_DBGCTRL.
 */
#define READ_IFP_TCAM4_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM4_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM4_DBGCTRLr_OFFSET,0,(r._ifp_tcam4_dbgctrl),1)
#define WRITE_IFP_TCAM4_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM4_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM4_DBGCTRLr_OFFSET,0,&(r._ifp_tcam4_dbgctrl),1)
#define WRITE_IFP_TCAM4_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM4_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM4_DBGCTRLr_OFFSET,0,&(r._ifp_tcam4_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM4_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM5_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM5_DBGCTRL.
 */
#define READ_IFP_TCAM5_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM5_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM5_DBGCTRLr_OFFSET,0,(r._ifp_tcam5_dbgctrl),1)
#define WRITE_IFP_TCAM5_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM5_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM5_DBGCTRLr_OFFSET,0,&(r._ifp_tcam5_dbgctrl),1)
#define WRITE_IFP_TCAM5_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM5_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM5_DBGCTRLr_OFFSET,0,&(r._ifp_tcam5_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM5_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM6_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM6_DBGCTRL.
 */
#define READ_IFP_TCAM6_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM6_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM6_DBGCTRLr_OFFSET,0,(r._ifp_tcam6_dbgctrl),1)
#define WRITE_IFP_TCAM6_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM6_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM6_DBGCTRLr_OFFSET,0,&(r._ifp_tcam6_dbgctrl),1)
#define WRITE_IFP_TCAM6_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM6_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM6_DBGCTRLr_OFFSET,0,&(r._ifp_tcam6_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM6_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM7_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM7_DBGCTRL.
 */
#define READ_IFP_TCAM7_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM7_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM7_DBGCTRLr_OFFSET,0,(r._ifp_tcam7_dbgctrl),1)
#define WRITE_IFP_TCAM7_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM7_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM7_DBGCTRLr_OFFSET,0,&(r._ifp_tcam7_dbgctrl),1)
#define WRITE_IFP_TCAM7_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM7_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM7_DBGCTRLr_OFFSET,0,&(r._ifp_tcam7_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM7_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM8_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM8_DBGCTRL.
 */
#define READ_IFP_TCAM8_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM8_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM8_DBGCTRLr_OFFSET,0,(r._ifp_tcam8_dbgctrl),1)
#define WRITE_IFP_TCAM8_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM8_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM8_DBGCTRLr_OFFSET,0,&(r._ifp_tcam8_dbgctrl),1)
#define WRITE_IFP_TCAM8_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM8_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM8_DBGCTRLr_OFFSET,0,&(r._ifp_tcam8_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM8_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM9_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM9_DBGCTRL.
 */
#define READ_IFP_TCAM9_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM9_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM9_DBGCTRLr_OFFSET,0,(r._ifp_tcam9_dbgctrl),1)
#define WRITE_IFP_TCAM9_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM9_DBGCTRLr_BLKACC,1,n,0,IFP_TCAM9_DBGCTRLr_OFFSET,0,&(r._ifp_tcam9_dbgctrl),1)
#define WRITE_IFP_TCAM9_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM9_DBGCTRLr_BLKACC,1,-1,0,IFP_TCAM9_DBGCTRLr_OFFSET,0,&(r._ifp_tcam9_dbgctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM9_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL0_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL0_BIST_CONFIG.
 */
#define READ_IFP_TCAM_3M_POOL0_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL0_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_3M_POOL0_BIST_CONFIGr_OFFSET,0,(r._ifp_tcam_3m_pool0_bist_config),1)
#define WRITE_IFP_TCAM_3M_POOL0_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL0_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_3M_POOL0_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_3m_pool0_bist_config),1)
#define WRITE_IFP_TCAM_3M_POOL0_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL0_BIST_CONFIGr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL0_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_3m_pool0_bist_config),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL0_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL0_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL0_BIST_DBG_DATA.
 */
#define READ_IFP_TCAM_3M_POOL0_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL0_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_3M_POOL0_BIST_DBG_DATAr_OFFSET,0,(r._ifp_tcam_3m_pool0_bist_dbg_data),1)
#define WRITE_IFP_TCAM_3M_POOL0_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL0_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_3M_POOL0_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_3m_pool0_bist_dbg_data),1)
#define WRITE_IFP_TCAM_3M_POOL0_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL0_BIST_DBG_DATAr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL0_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_3m_pool0_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL0_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL0_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL0_BIST_STATUS.
 */
#define READ_IFP_TCAM_3M_POOL0_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL0_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_3M_POOL0_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_3m_pool0_bist_status),1)
#define WRITE_IFP_TCAM_3M_POOL0_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL0_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_3M_POOL0_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_3m_pool0_bist_status),1)
#define WRITE_IFP_TCAM_3M_POOL0_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL0_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL0_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_3m_pool0_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL0_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL1_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL1_BIST_CONFIG.
 */
#define READ_IFP_TCAM_3M_POOL1_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL1_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_3M_POOL1_BIST_CONFIGr_OFFSET,0,(r._ifp_tcam_3m_pool1_bist_config),1)
#define WRITE_IFP_TCAM_3M_POOL1_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL1_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_3M_POOL1_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_3m_pool1_bist_config),1)
#define WRITE_IFP_TCAM_3M_POOL1_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL1_BIST_CONFIGr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL1_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_3m_pool1_bist_config),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL1_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL1_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL1_BIST_DBG_DATA.
 */
#define READ_IFP_TCAM_3M_POOL1_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL1_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_3M_POOL1_BIST_DBG_DATAr_OFFSET,0,(r._ifp_tcam_3m_pool1_bist_dbg_data),1)
#define WRITE_IFP_TCAM_3M_POOL1_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL1_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_3M_POOL1_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_3m_pool1_bist_dbg_data),1)
#define WRITE_IFP_TCAM_3M_POOL1_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL1_BIST_DBG_DATAr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL1_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_3m_pool1_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL1_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL1_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL1_BIST_STATUS.
 */
#define READ_IFP_TCAM_3M_POOL1_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL1_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_3M_POOL1_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_3m_pool1_bist_status),1)
#define WRITE_IFP_TCAM_3M_POOL1_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL1_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_3M_POOL1_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_3m_pool1_bist_status),1)
#define WRITE_IFP_TCAM_3M_POOL1_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL1_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL1_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_3m_pool1_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL1_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL2_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL2_BIST_CONFIG.
 */
#define READ_IFP_TCAM_3M_POOL2_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL2_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_3M_POOL2_BIST_CONFIGr_OFFSET,0,(r._ifp_tcam_3m_pool2_bist_config),1)
#define WRITE_IFP_TCAM_3M_POOL2_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL2_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_3M_POOL2_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_3m_pool2_bist_config),1)
#define WRITE_IFP_TCAM_3M_POOL2_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL2_BIST_CONFIGr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL2_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_3m_pool2_bist_config),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL2_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL2_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL2_BIST_DBG_DATA.
 */
#define READ_IFP_TCAM_3M_POOL2_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL2_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_3M_POOL2_BIST_DBG_DATAr_OFFSET,0,(r._ifp_tcam_3m_pool2_bist_dbg_data),1)
#define WRITE_IFP_TCAM_3M_POOL2_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL2_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_3M_POOL2_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_3m_pool2_bist_dbg_data),1)
#define WRITE_IFP_TCAM_3M_POOL2_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL2_BIST_DBG_DATAr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL2_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_3m_pool2_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL2_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL2_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL2_BIST_STATUS.
 */
#define READ_IFP_TCAM_3M_POOL2_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL2_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_3M_POOL2_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_3m_pool2_bist_status),1)
#define WRITE_IFP_TCAM_3M_POOL2_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL2_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_3M_POOL2_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_3m_pool2_bist_status),1)
#define WRITE_IFP_TCAM_3M_POOL2_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL2_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL2_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_3m_pool2_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL2_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL3_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL3_BIST_CONFIG.
 */
#define READ_IFP_TCAM_3M_POOL3_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL3_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_3M_POOL3_BIST_CONFIGr_OFFSET,0,(r._ifp_tcam_3m_pool3_bist_config),1)
#define WRITE_IFP_TCAM_3M_POOL3_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL3_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_3M_POOL3_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_3m_pool3_bist_config),1)
#define WRITE_IFP_TCAM_3M_POOL3_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL3_BIST_CONFIGr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL3_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_3m_pool3_bist_config),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL3_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL3_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL3_BIST_DBG_DATA.
 */
#define READ_IFP_TCAM_3M_POOL3_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL3_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_3M_POOL3_BIST_DBG_DATAr_OFFSET,0,(r._ifp_tcam_3m_pool3_bist_dbg_data),1)
#define WRITE_IFP_TCAM_3M_POOL3_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL3_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_3M_POOL3_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_3m_pool3_bist_dbg_data),1)
#define WRITE_IFP_TCAM_3M_POOL3_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL3_BIST_DBG_DATAr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL3_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_3m_pool3_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL3_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_3M_POOL3_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_3M_POOL3_BIST_STATUS.
 */
#define READ_IFP_TCAM_3M_POOL3_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_3M_POOL3_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_3M_POOL3_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_3m_pool3_bist_status),1)
#define WRITE_IFP_TCAM_3M_POOL3_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL3_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_3M_POOL3_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_3m_pool3_bist_status),1)
#define WRITE_IFP_TCAM_3M_POOL3_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_3M_POOL3_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_3M_POOL3_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_3m_pool3_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_3M_POOL3_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL0_BISTCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL0_BISTCTRL.
 */
#define READ_IFP_TCAM_POOL0_BISTCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL0_BISTCTRLr_BLKACC,1,n,0,IFP_TCAM_POOL0_BISTCTRLr_OFFSET,0,(r._ifp_tcam_pool0_bistctrl),1)
#define WRITE_IFP_TCAM_POOL0_BISTCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL0_BISTCTRLr_BLKACC,1,n,0,IFP_TCAM_POOL0_BISTCTRLr_OFFSET,0,&(r._ifp_tcam_pool0_bistctrl),1)
#define WRITE_IFP_TCAM_POOL0_BISTCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL0_BISTCTRLr_BLKACC,1,-1,0,IFP_TCAM_POOL0_BISTCTRLr_OFFSET,0,&(r._ifp_tcam_pool0_bistctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL0_BISTCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL0_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL0_BIST_CONFIG.
 */
#define READ_IFP_TCAM_POOL0_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL0_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_POOL0_BIST_CONFIGr_OFFSET,0,(r._ifp_tcam_pool0_bist_config),1)
#define WRITE_IFP_TCAM_POOL0_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL0_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_POOL0_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_pool0_bist_config),1)
#define WRITE_IFP_TCAM_POOL0_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL0_BIST_CONFIGr_BLKACC,1,-1,0,IFP_TCAM_POOL0_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_pool0_bist_config),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL0_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL0_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL0_BIST_DBG_DATA.
 */
#define READ_IFP_TCAM_POOL0_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL0_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_POOL0_BIST_DBG_DATAr_OFFSET,0,(r._ifp_tcam_pool0_bist_dbg_data),1)
#define WRITE_IFP_TCAM_POOL0_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL0_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_POOL0_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_pool0_bist_dbg_data),1)
#define WRITE_IFP_TCAM_POOL0_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL0_BIST_DBG_DATAr_BLKACC,1,-1,0,IFP_TCAM_POOL0_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_pool0_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL0_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL0_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL0_BIST_STATUS.
 */
#define READ_IFP_TCAM_POOL0_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL0_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL0_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_pool0_bist_status),1)
#define WRITE_IFP_TCAM_POOL0_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL0_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL0_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool0_bist_status),1)
#define WRITE_IFP_TCAM_POOL0_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL0_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_POOL0_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool0_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL0_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL1_BISTCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL1_BISTCTRL.
 */
#define READ_IFP_TCAM_POOL1_BISTCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL1_BISTCTRLr_BLKACC,1,n,0,IFP_TCAM_POOL1_BISTCTRLr_OFFSET,0,(r._ifp_tcam_pool1_bistctrl),1)
#define WRITE_IFP_TCAM_POOL1_BISTCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL1_BISTCTRLr_BLKACC,1,n,0,IFP_TCAM_POOL1_BISTCTRLr_OFFSET,0,&(r._ifp_tcam_pool1_bistctrl),1)
#define WRITE_IFP_TCAM_POOL1_BISTCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL1_BISTCTRLr_BLKACC,1,-1,0,IFP_TCAM_POOL1_BISTCTRLr_OFFSET,0,&(r._ifp_tcam_pool1_bistctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL1_BISTCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL1_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL1_BIST_CONFIG.
 */
#define READ_IFP_TCAM_POOL1_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL1_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_POOL1_BIST_CONFIGr_OFFSET,0,(r._ifp_tcam_pool1_bist_config),1)
#define WRITE_IFP_TCAM_POOL1_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL1_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_POOL1_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_pool1_bist_config),1)
#define WRITE_IFP_TCAM_POOL1_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL1_BIST_CONFIGr_BLKACC,1,-1,0,IFP_TCAM_POOL1_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_pool1_bist_config),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL1_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL1_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL1_BIST_DBG_DATA.
 */
#define READ_IFP_TCAM_POOL1_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL1_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_POOL1_BIST_DBG_DATAr_OFFSET,0,(r._ifp_tcam_pool1_bist_dbg_data),1)
#define WRITE_IFP_TCAM_POOL1_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL1_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_POOL1_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_pool1_bist_dbg_data),1)
#define WRITE_IFP_TCAM_POOL1_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL1_BIST_DBG_DATAr_BLKACC,1,-1,0,IFP_TCAM_POOL1_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_pool1_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL1_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL1_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL1_BIST_STATUS.
 */
#define READ_IFP_TCAM_POOL1_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL1_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL1_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_pool1_bist_status),1)
#define WRITE_IFP_TCAM_POOL1_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL1_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL1_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool1_bist_status),1)
#define WRITE_IFP_TCAM_POOL1_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL1_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_POOL1_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool1_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL1_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL2_BISTCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL2_BISTCTRL.
 */
#define READ_IFP_TCAM_POOL2_BISTCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL2_BISTCTRLr_BLKACC,1,n,0,IFP_TCAM_POOL2_BISTCTRLr_OFFSET,0,(r._ifp_tcam_pool2_bistctrl),1)
#define WRITE_IFP_TCAM_POOL2_BISTCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL2_BISTCTRLr_BLKACC,1,n,0,IFP_TCAM_POOL2_BISTCTRLr_OFFSET,0,&(r._ifp_tcam_pool2_bistctrl),1)
#define WRITE_IFP_TCAM_POOL2_BISTCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL2_BISTCTRLr_BLKACC,1,-1,0,IFP_TCAM_POOL2_BISTCTRLr_OFFSET,0,&(r._ifp_tcam_pool2_bistctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL2_BISTCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL2_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL2_BIST_CONFIG.
 */
#define READ_IFP_TCAM_POOL2_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL2_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_POOL2_BIST_CONFIGr_OFFSET,0,(r._ifp_tcam_pool2_bist_config),1)
#define WRITE_IFP_TCAM_POOL2_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL2_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_POOL2_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_pool2_bist_config),1)
#define WRITE_IFP_TCAM_POOL2_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL2_BIST_CONFIGr_BLKACC,1,-1,0,IFP_TCAM_POOL2_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_pool2_bist_config),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL2_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL2_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL2_BIST_DBG_DATA.
 */
#define READ_IFP_TCAM_POOL2_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL2_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_POOL2_BIST_DBG_DATAr_OFFSET,0,(r._ifp_tcam_pool2_bist_dbg_data),1)
#define WRITE_IFP_TCAM_POOL2_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL2_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_POOL2_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_pool2_bist_dbg_data),1)
#define WRITE_IFP_TCAM_POOL2_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL2_BIST_DBG_DATAr_BLKACC,1,-1,0,IFP_TCAM_POOL2_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_pool2_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL2_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL2_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL2_BIST_STATUS.
 */
#define READ_IFP_TCAM_POOL2_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL2_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL2_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_pool2_bist_status),1)
#define WRITE_IFP_TCAM_POOL2_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL2_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL2_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool2_bist_status),1)
#define WRITE_IFP_TCAM_POOL2_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL2_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_POOL2_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool2_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL2_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL3_BISTCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL3_BISTCTRL.
 */
#define READ_IFP_TCAM_POOL3_BISTCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL3_BISTCTRLr_BLKACC,1,n,0,IFP_TCAM_POOL3_BISTCTRLr_OFFSET,0,(r._ifp_tcam_pool3_bistctrl),1)
#define WRITE_IFP_TCAM_POOL3_BISTCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL3_BISTCTRLr_BLKACC,1,n,0,IFP_TCAM_POOL3_BISTCTRLr_OFFSET,0,&(r._ifp_tcam_pool3_bistctrl),1)
#define WRITE_IFP_TCAM_POOL3_BISTCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL3_BISTCTRLr_BLKACC,1,-1,0,IFP_TCAM_POOL3_BISTCTRLr_OFFSET,0,&(r._ifp_tcam_pool3_bistctrl),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL3_BISTCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL3_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL3_BIST_CONFIG.
 */
#define READ_IFP_TCAM_POOL3_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL3_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_POOL3_BIST_CONFIGr_OFFSET,0,(r._ifp_tcam_pool3_bist_config),1)
#define WRITE_IFP_TCAM_POOL3_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL3_BIST_CONFIGr_BLKACC,1,n,0,IFP_TCAM_POOL3_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_pool3_bist_config),1)
#define WRITE_IFP_TCAM_POOL3_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL3_BIST_CONFIGr_BLKACC,1,-1,0,IFP_TCAM_POOL3_BIST_CONFIGr_OFFSET,0,&(r._ifp_tcam_pool3_bist_config),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL3_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL3_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL3_BIST_DBG_DATA.
 */
#define READ_IFP_TCAM_POOL3_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL3_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_POOL3_BIST_DBG_DATAr_OFFSET,0,(r._ifp_tcam_pool3_bist_dbg_data),1)
#define WRITE_IFP_TCAM_POOL3_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL3_BIST_DBG_DATAr_BLKACC,1,n,0,IFP_TCAM_POOL3_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_pool3_bist_dbg_data),1)
#define WRITE_IFP_TCAM_POOL3_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL3_BIST_DBG_DATAr_BLKACC,1,-1,0,IFP_TCAM_POOL3_BIST_DBG_DATAr_OFFSET,0,&(r._ifp_tcam_pool3_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL3_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IFP_TCAM_POOL3_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFP_TCAM_POOL3_BIST_STATUS.
 */
#define READ_IFP_TCAM_POOL3_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IFP_TCAM_POOL3_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL3_BIST_STATUSr_OFFSET,0,(r._ifp_tcam_pool3_bist_status),1)
#define WRITE_IFP_TCAM_POOL3_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL3_BIST_STATUSr_BLKACC,1,n,0,IFP_TCAM_POOL3_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool3_bist_status),1)
#define WRITE_IFP_TCAM_POOL3_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IFP_TCAM_POOL3_BIST_STATUSr_BLKACC,1,-1,0,IFP_TCAM_POOL3_BIST_STATUSr_OFFSET,0,&(r._ifp_tcam_pool3_bist_status),1)

/*******************************************************************************
 * End of 'IFP_TCAM_POOL3_BIST_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  IFP_TCAM_WIDE
 * BLOCKS:   IPIPE
 * SIZE:     322
 */
/*
 * These macros can be used to access IFP_TCAM_WIDE.
 */
#define READ_IFP_TCAM_WIDEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IFP_TCAM_WIDEm_BLKACC,1,n,0,IFP_TCAM_WIDEm_OFFSET,i,(m._ifp_tcam_wide),11)
#define WRITE_IFP_TCAM_WIDEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_TCAM_WIDEm_BLKACC,1,n,0,IFP_TCAM_WIDEm_OFFSET,i,&(m._ifp_tcam_wide),11)
#define WRITE_IFP_TCAM_WIDEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IFP_TCAM_WIDEm_BLKACC,1,-1,0,IFP_TCAM_WIDEm_OFFSET,i,&(m._ifp_tcam_wide),11)

/*******************************************************************************
 * End of 'IFP_TCAM_WIDEm'
 */




/*******************************************************************************
 * REGISTER:  IFWD_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFWD_EN_COR_ERR_RPT.
 */
#define READ_IFWD_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_read(u,IFWD_EN_COR_ERR_RPTr_BLKACC,1,IFWD_EN_COR_ERR_RPTr_OFFSET,0,(r._ifwd_en_cor_err_rpt), 1)
#define WRITE_IFWD_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_write(u,IFWD_EN_COR_ERR_RPTr_BLKACC,1,IFWD_EN_COR_ERR_RPTr_OFFSET,0,&(r._ifwd_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'IFWD_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  IFWD_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IFWD_SER_CONTROL.
 */
#define READ_IFWD_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IFWD_SER_CONTROLr_BLKACC,1,IFWD_SER_CONTROLr_OFFSET,0,(r._ifwd_ser_control), 1)
#define WRITE_IFWD_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IFWD_SER_CONTROLr_BLKACC,1,IFWD_SER_CONTROLr_OFFSET,0,&(r._ifwd_ser_control), 1)

/*******************************************************************************
 * End of 'IFWD_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IGMP_MLD_PKT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IGMP_MLD_PKT_CONTROL.
 */
#define READ_IGMP_MLD_PKT_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_read(u,IGMP_MLD_PKT_CONTROLr_BLKACC,1,IGMP_MLD_PKT_CONTROLr_OFFSET,i,(r._igmp_mld_pkt_control), 1)
#define WRITE_IGMP_MLD_PKT_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_write(u,IGMP_MLD_PKT_CONTROLr_BLKACC,1,IGMP_MLD_PKT_CONTROLr_OFFSET,i,&(r._igmp_mld_pkt_control), 1)

/*******************************************************************************
 * End of 'IGMP_MLD_PKT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IHG_LOOKUP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IHG_LOOKUP.
 */
#define READ_IHG_LOOKUPr(u,p,r) bcmbd_cmicd_reg_port_read(u,IHG_LOOKUPr_BLKACC,p,IHG_LOOKUPr_OFFSET,0,(r._ihg_lookup), 1)
#define WRITE_IHG_LOOKUPr(u,p,r) bcmbd_cmicd_reg_port_write(u,IHG_LOOKUPr_BLKACC,p,IHG_LOOKUPr_OFFSET,0,&(r._ihg_lookup), 1)

/*******************************************************************************
 * End of 'IHG_LOOKUPr'
 */




/*******************************************************************************
 * REGISTER:  IIPMC_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IIPMC_64.
 */
#define READ_IIPMC_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,IIPMC_64r_BLKACC,p,IIPMC_64r_OFFSET,0,(r._iipmc_64), 2)
#define WRITE_IIPMC_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,IIPMC_64r_BLKACC,p,IIPMC_64r_OFFSET,0,&(r._iipmc_64), 2)

/*******************************************************************************
 * End of 'IIPMC_64r'
 */




/*******************************************************************************
 * REGISTER:  ILPM_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ILPM_SER_CONTROL.
 */
#define READ_ILPM_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ILPM_SER_CONTROLr_BLKACC,1,ILPM_SER_CONTROLr_OFFSET,0,(r._ilpm_ser_control), 1)
#define WRITE_ILPM_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ILPM_SER_CONTROLr_BLKACC,1,ILPM_SER_CONTROLr_OFFSET,0,&(r._ilpm_ser_control), 1)

/*******************************************************************************
 * End of 'ILPM_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ILTOMC_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ILTOMC_64.
 */
#define READ_ILTOMC_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,ILTOMC_64r_BLKACC,p,ILTOMC_64r_OFFSET,0,(r._iltomc_64), 2)
#define WRITE_ILTOMC_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,ILTOMC_64r_BLKACC,p,ILTOMC_64r_OFFSET,0,&(r._iltomc_64), 2)

/*******************************************************************************
 * End of 'ILTOMC_64r'
 */




/*******************************************************************************
 * MEMORY:  IMIRROR_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access IMIRROR_BITMAP.
 */
#define READ_IMIRROR_BITMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IMIRROR_BITMAPm_BLKACC)+1,IMIRROR_BITMAPm_OFFSET+i,(m._imirror_bitmap),1)
#define WRITE_IMIRROR_BITMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IMIRROR_BITMAPm_BLKACC)+1,IMIRROR_BITMAPm_OFFSET+i,&(m._imirror_bitmap),1)

/*******************************************************************************
 * End of 'IMIRROR_BITMAPm'
 */




/*******************************************************************************
 * REGISTER:  IMRP4
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IMRP4.
 */
#define READ_IMRP4r(u,p,r) bcmbd_cmicd_reg_port_read(u,IMRP4r_BLKACC,p,IMRP4r_OFFSET,0,(r._imrp4), 2)
#define WRITE_IMRP4r(u,p,r) bcmbd_cmicd_reg_port_write(u,IMRP4r_BLKACC,p,IMRP4r_OFFSET,0,&(r._imrp4), 2)

/*******************************************************************************
 * End of 'IMRP4r'
 */




/*******************************************************************************
 * REGISTER:  IMRP6
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IMRP6.
 */
#define READ_IMRP6r(u,p,r) bcmbd_cmicd_reg_port_read(u,IMRP6r_BLKACC,p,IMRP6r_OFFSET,0,(r._imrp6), 2)
#define WRITE_IMRP6r(u,p,r) bcmbd_cmicd_reg_port_write(u,IMRP6r_BLKACC,p,IMRP6r_OFFSET,0,&(r._imrp6), 2)

/*******************************************************************************
 * End of 'IMRP6r'
 */




/*******************************************************************************
 * MEMORY:  IM_MTP_INDEX
 * BLOCKS:   IPIPE
 * SIZE:     135
 */
/*
 * These macros can be used to access IM_MTP_INDEX.
 */
#define READ_IM_MTP_INDEXm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IM_MTP_INDEXm_BLKACC)+1,IM_MTP_INDEXm_OFFSET+i,(m._im_mtp_index),5)
#define WRITE_IM_MTP_INDEXm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IM_MTP_INDEXm_BLKACC)+1,IM_MTP_INDEXm_OFFSET+i,&(m._im_mtp_index),5)

/*******************************************************************************
 * End of 'IM_MTP_INDEXm'
 */




/*******************************************************************************
 * MEMORY:  ING_1588_INGRESS_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     33
 */
/*
 * These macros can be used to access ING_1588_INGRESS_CTRL.
 */
#define READ_ING_1588_INGRESS_CTRLm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_1588_INGRESS_CTRLm_BLKACC)+1,ING_1588_INGRESS_CTRLm_OFFSET+i,(m._ing_1588_ingress_ctrl),2)
#define WRITE_ING_1588_INGRESS_CTRLm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_1588_INGRESS_CTRLm_BLKACC)+1,ING_1588_INGRESS_CTRLm_OFFSET+i,&(m._ing_1588_ingress_ctrl),2)

/*******************************************************************************
 * End of 'ING_1588_INGRESS_CTRLm'
 */




/*******************************************************************************
 * REGISTER:  ING_1588_PARSING_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_1588_PARSING_CONTROL.
 */
#define READ_ING_1588_PARSING_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ING_1588_PARSING_CONTROLr_BLKACC,1,ING_1588_PARSING_CONTROLr_OFFSET,0,(r._ing_1588_parsing_control), 1)
#define WRITE_ING_1588_PARSING_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ING_1588_PARSING_CONTROLr_BLKACC,1,ING_1588_PARSING_CONTROLr_OFFSET,0,&(r._ing_1588_parsing_control), 1)

/*******************************************************************************
 * End of 'ING_1588_PARSING_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ING_ACTIVE_L3_IIF_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     65
 */
/*
 * These macros can be used to access ING_ACTIVE_L3_IIF_PROFILE.
 */
#define READ_ING_ACTIVE_L3_IIF_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_ACTIVE_L3_IIF_PROFILEm_BLKACC)+1,ING_ACTIVE_L3_IIF_PROFILEm_OFFSET+i,(m._ing_active_l3_iif_profile),3)
#define WRITE_ING_ACTIVE_L3_IIF_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_ACTIVE_L3_IIF_PROFILEm_BLKACC)+1,ING_ACTIVE_L3_IIF_PROFILEm_OFFSET+i,&(m._ing_active_l3_iif_profile),3)

/*******************************************************************************
 * End of 'ING_ACTIVE_L3_IIF_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  ING_CONFIG_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_CONFIG_64.
 */
#define READ_ING_CONFIG_64r(u,r) bcmbd_cmicd_reg_block_read(u,ING_CONFIG_64r_BLKACC,1,ING_CONFIG_64r_OFFSET,0,(r._ing_config_64), 2)
#define WRITE_ING_CONFIG_64r(u,r) bcmbd_cmicd_reg_block_write(u,ING_CONFIG_64r_BLKACC,1,ING_CONFIG_64r_OFFSET,0,&(r._ing_config_64), 2)

/*******************************************************************************
 * End of 'ING_CONFIG_64r'
 */




/*******************************************************************************
 * REGISTER:  ING_COS_MODE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_COS_MODE.
 */
#define READ_ING_COS_MODEr(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_COS_MODEr_BLKACC,p,ING_COS_MODEr_OFFSET,0,(r._ing_cos_mode), 1)
#define WRITE_ING_COS_MODEr(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_COS_MODEr_BLKACC,p,ING_COS_MODEr_OFFSET,0,&(r._ing_cos_mode), 1)

/*******************************************************************************
 * End of 'ING_COS_MODEr'
 */




/*******************************************************************************
 * MEMORY:  ING_DNAT_ADDRESS_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access ING_DNAT_ADDRESS_TYPE.
 */
#define READ_ING_DNAT_ADDRESS_TYPEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_DNAT_ADDRESS_TYPEm_BLKACC)+1,ING_DNAT_ADDRESS_TYPEm_OFFSET+i,(m._ing_dnat_address_type),2)
#define WRITE_ING_DNAT_ADDRESS_TYPEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_DNAT_ADDRESS_TYPEm_BLKACC)+1,ING_DNAT_ADDRESS_TYPEm_OFFSET+i,&(m._ing_dnat_address_type),2)

/*******************************************************************************
 * End of 'ING_DNAT_ADDRESS_TYPEm'
 */




/*******************************************************************************
 * REGISTER:  ING_DNAT_ADDRESS_TYPE_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DNAT_ADDRESS_TYPE_HASH_CONTROL.
 */
#define READ_ING_DNAT_ADDRESS_TYPE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ING_DNAT_ADDRESS_TYPE_HASH_CONTROLr_BLKACC,1,ING_DNAT_ADDRESS_TYPE_HASH_CONTROLr_OFFSET,0,(r._ing_dnat_address_type_hash_control), 1)
#define WRITE_ING_DNAT_ADDRESS_TYPE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ING_DNAT_ADDRESS_TYPE_HASH_CONTROLr_BLKACC,1,ING_DNAT_ADDRESS_TYPE_HASH_CONTROLr_OFFSET,0,&(r._ing_dnat_address_type_hash_control), 1)

/*******************************************************************************
 * End of 'ING_DNAT_ADDRESS_TYPE_HASH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_DNAT_ADDRESS_TYPE_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_DNAT_ADDRESS_TYPE_RAM_CONTROL.
 */
#define READ_ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr_BLKACC,1,n,0,ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr_OFFSET,0,(r._ing_dnat_address_type_ram_control),1)
#define WRITE_ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr_BLKACC,1,n,0,ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr_OFFSET,0,&(r._ing_dnat_address_type_ram_control),1)
#define WRITE_ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr_BLKACC,1,-1,0,ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr_OFFSET,0,&(r._ing_dnat_address_type_ram_control),1)

/*******************************************************************************
 * End of 'ING_DNAT_ADDRESS_TYPE_RAM_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ING_DVP_2_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     25
 */
/*
 * These macros can be used to access ING_DVP_2_TABLE.
 */
#define READ_ING_DVP_2_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_DVP_2_TABLEm_BLKACC)+1,ING_DVP_2_TABLEm_OFFSET+i,(m._ing_dvp_2_table),1)
#define WRITE_ING_DVP_2_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_DVP_2_TABLEm_BLKACC)+1,ING_DVP_2_TABLEm_OFFSET+i,&(m._ing_dvp_2_table),1)

/*******************************************************************************
 * End of 'ING_DVP_2_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  ING_DVP_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     46
 */
/*
 * These macros can be used to access ING_DVP_TABLE.
 */
#define READ_ING_DVP_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_DVP_TABLEm_BLKACC)+1,ING_DVP_TABLEm_OFFSET+i,(m._ing_dvp_table),2)
#define WRITE_ING_DVP_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_DVP_TABLEm_BLKACC)+1,ING_DVP_TABLEm_OFFSET+i,&(m._ing_dvp_table),2)

/*******************************************************************************
 * End of 'ING_DVP_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  ING_ECN_COUNTER_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_ECN_COUNTER_64.
 */
#define READ_ING_ECN_COUNTER_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_ECN_COUNTER_64r_BLKACC,p,ING_ECN_COUNTER_64r_OFFSET,0,(r._ing_ecn_counter_64), 2)
#define WRITE_ING_ECN_COUNTER_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_ECN_COUNTER_64r_BLKACC,p,ING_ECN_COUNTER_64r_OFFSET,0,&(r._ing_ecn_counter_64), 2)

/*******************************************************************************
 * End of 'ING_ECN_COUNTER_64r'
 */




/*******************************************************************************
 * MEMORY:  ING_EGRMSKBMAP
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access ING_EGRMSKBMAP.
 */
#define READ_ING_EGRMSKBMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_EGRMSKBMAPm_BLKACC)+1,ING_EGRMSKBMAPm_OFFSET+i,(m._ing_egrmskbmap),5)
#define WRITE_ING_EGRMSKBMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_EGRMSKBMAPm_BLKACC)+1,ING_EGRMSKBMAPm_OFFSET+i,&(m._ing_egrmskbmap),5)

/*******************************************************************************
 * End of 'ING_EGRMSKBMAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_EN_EFILTER_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access ING_EN_EFILTER_BITMAP.
 */
#define READ_ING_EN_EFILTER_BITMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_EN_EFILTER_BITMAPm_BLKACC)+1,ING_EN_EFILTER_BITMAPm_OFFSET+i,(m._ing_en_efilter_bitmap),5)
#define WRITE_ING_EN_EFILTER_BITMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_EN_EFILTER_BITMAPm_BLKACC)+1,ING_EN_EFILTER_BITMAPm_OFFSET+i,&(m._ing_en_efilter_bitmap),5)

/*******************************************************************************
 * End of 'ING_EN_EFILTER_BITMAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_ETAG_PCP_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access ING_ETAG_PCP_MAPPING.
 */
#define READ_ING_ETAG_PCP_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_ETAG_PCP_MAPPINGm_BLKACC)+1,ING_ETAG_PCP_MAPPINGm_OFFSET+i,(m._ing_etag_pcp_mapping),1)
#define WRITE_ING_ETAG_PCP_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_ETAG_PCP_MAPPINGm_BLKACC)+1,ING_ETAG_PCP_MAPPINGm_OFFSET+i,&(m._ing_etag_pcp_mapping),1)

/*******************************************************************************
 * End of 'ING_ETAG_PCP_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRL.
 */
#define READ_ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr_BLKACC,1,n,0,ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr_OFFSET,0,(r._ing_etag_pcp_mapping_control_dbgctrl),1)
#define WRITE_ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr_BLKACC,1,n,0,ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr_OFFSET,0,&(r._ing_etag_pcp_mapping_control_dbgctrl),1)
#define WRITE_ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr_BLKACC,1,-1,0,ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr_OFFSET,0,&(r._ing_etag_pcp_mapping_control_dbgctrl),1)

/*******************************************************************************
 * End of 'ING_ETAG_PCP_MAPPING_CONTROL_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  ING_EVENT_DEBUG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_EVENT_DEBUG.
 */
#define READ_ING_EVENT_DEBUGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_EVENT_DEBUGr_BLKACC,1,n,0,ING_EVENT_DEBUGr_OFFSET,0,(r._ing_event_debug),1)
#define WRITE_ING_EVENT_DEBUGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_EVENT_DEBUGr_BLKACC,1,n,0,ING_EVENT_DEBUGr_OFFSET,0,&(r._ing_event_debug),1)
#define WRITE_ING_EVENT_DEBUGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_EVENT_DEBUGr_BLKACC,1,-1,0,ING_EVENT_DEBUGr_OFFSET,0,&(r._ing_event_debug),1)

/*******************************************************************************
 * End of 'ING_EVENT_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  ING_EVENT_DEBUG_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_EVENT_DEBUG_2.
 */
#define READ_ING_EVENT_DEBUG_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_EVENT_DEBUG_2r_BLKACC,1,n,0,ING_EVENT_DEBUG_2r_OFFSET,0,(r._ing_event_debug_2),1)
#define WRITE_ING_EVENT_DEBUG_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_EVENT_DEBUG_2r_BLKACC,1,n,0,ING_EVENT_DEBUG_2r_OFFSET,0,&(r._ing_event_debug_2),1)
#define WRITE_ING_EVENT_DEBUG_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_EVENT_DEBUG_2r_BLKACC,1,-1,0,ING_EVENT_DEBUG_2r_OFFSET,0,&(r._ing_event_debug_2),1)

/*******************************************************************************
 * End of 'ING_EVENT_DEBUG_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_EVENT_DEBUG_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_EVENT_DEBUG_3.
 */
#define READ_ING_EVENT_DEBUG_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_EVENT_DEBUG_3r_BLKACC,1,n,0,ING_EVENT_DEBUG_3r_OFFSET,0,(r._ing_event_debug_3),1)
#define WRITE_ING_EVENT_DEBUG_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_EVENT_DEBUG_3r_BLKACC,1,n,0,ING_EVENT_DEBUG_3r_OFFSET,0,&(r._ing_event_debug_3),1)
#define WRITE_ING_EVENT_DEBUG_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_EVENT_DEBUG_3r_BLKACC,1,-1,0,ING_EVENT_DEBUG_3r_OFFSET,0,&(r._ing_event_debug_3),1)

/*******************************************************************************
 * End of 'ING_EVENT_DEBUG_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_FCOE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FCOE_ETHERTYPE.
 */
#define READ_ING_FCOE_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,ING_FCOE_ETHERTYPEr_BLKACC,1,ING_FCOE_ETHERTYPEr_OFFSET,0,(r._ing_fcoe_ethertype), 1)
#define WRITE_ING_FCOE_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,ING_FCOE_ETHERTYPEr_BLKACC,1,ING_FCOE_ETHERTYPEr_OFFSET,0,&(r._ing_fcoe_ethertype), 1)

/*******************************************************************************
 * End of 'ING_FCOE_ETHERTYPEr'
 */




/*******************************************************************************
 * MEMORY:  ING_FC_HEADER_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access ING_FC_HEADER_TYPE.
 */
#define READ_ING_FC_HEADER_TYPEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FC_HEADER_TYPEm_BLKACC)+1,ING_FC_HEADER_TYPEm_OFFSET+i,(m._ing_fc_header_type),1)
#define WRITE_ING_FC_HEADER_TYPEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FC_HEADER_TYPEm_BLKACC)+1,ING_FC_HEADER_TYPEm_OFFSET+i,&(m._ing_fc_header_type),1)

/*******************************************************************************
 * End of 'ING_FC_HEADER_TYPEm'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_0
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_0.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_0m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_0m_OFFSET,i,(m._ing_flex_ctr_counter_table_0),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_0m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_0m_OFFSET,i,&(m._ing_flex_ctr_counter_table_0),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_0m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_0m_OFFSET,i,&(m._ing_flex_ctr_counter_table_0),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_0m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_1
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_1.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_1m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_1m_OFFSET,i,(m._ing_flex_ctr_counter_table_1),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_1m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_1m_OFFSET,i,&(m._ing_flex_ctr_counter_table_1),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_1m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_1m_OFFSET,i,&(m._ing_flex_ctr_counter_table_1),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_1m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_10
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_10.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_10m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_10m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_10m_OFFSET,i,(m._ing_flex_ctr_counter_table_10),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_10m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_10m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_10m_OFFSET,i,&(m._ing_flex_ctr_counter_table_10),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_10m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_10m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_10m_OFFSET,i,&(m._ing_flex_ctr_counter_table_10),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_10m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_11
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_11.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_11m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_11m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_11m_OFFSET,i,(m._ing_flex_ctr_counter_table_11),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_11m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_11m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_11m_OFFSET,i,&(m._ing_flex_ctr_counter_table_11),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_11m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_11m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_11m_OFFSET,i,&(m._ing_flex_ctr_counter_table_11),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_11m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_12
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_12.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_12m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_12m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_12m_OFFSET,i,(m._ing_flex_ctr_counter_table_12),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_12m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_12m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_12m_OFFSET,i,&(m._ing_flex_ctr_counter_table_12),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_12m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_12m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_12m_OFFSET,i,&(m._ing_flex_ctr_counter_table_12),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_12m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_13
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_13.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_13m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_13m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_13m_OFFSET,i,(m._ing_flex_ctr_counter_table_13),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_13m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_13m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_13m_OFFSET,i,&(m._ing_flex_ctr_counter_table_13),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_13m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_13m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_13m_OFFSET,i,&(m._ing_flex_ctr_counter_table_13),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_13m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_14
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_14.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_14m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_14m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_14m_OFFSET,i,(m._ing_flex_ctr_counter_table_14),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_14m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_14m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_14m_OFFSET,i,&(m._ing_flex_ctr_counter_table_14),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_14m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_14m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_14m_OFFSET,i,&(m._ing_flex_ctr_counter_table_14),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_14m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_15
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_15.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_15m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_15m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_15m_OFFSET,i,(m._ing_flex_ctr_counter_table_15),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_15m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_15m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_15m_OFFSET,i,&(m._ing_flex_ctr_counter_table_15),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_15m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_15m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_15m_OFFSET,i,&(m._ing_flex_ctr_counter_table_15),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_15m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_16
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_16.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_16m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_16m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_16m_OFFSET,i,(m._ing_flex_ctr_counter_table_16),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_16m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_16m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_16m_OFFSET,i,&(m._ing_flex_ctr_counter_table_16),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_16m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_16m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_16m_OFFSET,i,&(m._ing_flex_ctr_counter_table_16),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_16m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_17
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_17.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_17m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_17m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_17m_OFFSET,i,(m._ing_flex_ctr_counter_table_17),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_17m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_17m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_17m_OFFSET,i,&(m._ing_flex_ctr_counter_table_17),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_17m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_17m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_17m_OFFSET,i,&(m._ing_flex_ctr_counter_table_17),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_17m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_18
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_18.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_18m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_18m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_18m_OFFSET,i,(m._ing_flex_ctr_counter_table_18),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_18m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_18m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_18m_OFFSET,i,&(m._ing_flex_ctr_counter_table_18),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_18m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_18m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_18m_OFFSET,i,&(m._ing_flex_ctr_counter_table_18),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_18m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_19
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_19.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_19m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_19m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_19m_OFFSET,i,(m._ing_flex_ctr_counter_table_19),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_19m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_19m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_19m_OFFSET,i,&(m._ing_flex_ctr_counter_table_19),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_19m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_19m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_19m_OFFSET,i,&(m._ing_flex_ctr_counter_table_19),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_19m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_2
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_2.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_2m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_2m_OFFSET,i,(m._ing_flex_ctr_counter_table_2),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_2m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_2m_OFFSET,i,&(m._ing_flex_ctr_counter_table_2),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_2m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_2m_OFFSET,i,&(m._ing_flex_ctr_counter_table_2),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_2m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_3
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_3.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_3m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_3m_OFFSET,i,(m._ing_flex_ctr_counter_table_3),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_3m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_3m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_3m_OFFSET,i,&(m._ing_flex_ctr_counter_table_3),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_3m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_3m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_3m_OFFSET,i,&(m._ing_flex_ctr_counter_table_3),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_3m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_4
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_4.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_4m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_4m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_4m_OFFSET,i,(m._ing_flex_ctr_counter_table_4),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_4m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_4m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_4m_OFFSET,i,&(m._ing_flex_ctr_counter_table_4),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_4m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_4m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_4m_OFFSET,i,&(m._ing_flex_ctr_counter_table_4),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_4m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_5
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_5.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_5m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_5m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_5m_OFFSET,i,(m._ing_flex_ctr_counter_table_5),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_5m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_5m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_5m_OFFSET,i,&(m._ing_flex_ctr_counter_table_5),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_5m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_5m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_5m_OFFSET,i,&(m._ing_flex_ctr_counter_table_5),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_5m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_6
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_6.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_6m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_6m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_6m_OFFSET,i,(m._ing_flex_ctr_counter_table_6),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_6m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_6m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_6m_OFFSET,i,&(m._ing_flex_ctr_counter_table_6),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_6m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_6m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_6m_OFFSET,i,&(m._ing_flex_ctr_counter_table_6),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_6m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_7
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_7.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_7m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_7m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_7m_OFFSET,i,(m._ing_flex_ctr_counter_table_7),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_7m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_7m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_7m_OFFSET,i,&(m._ing_flex_ctr_counter_table_7),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_7m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_7m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_7m_OFFSET,i,&(m._ing_flex_ctr_counter_table_7),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_7m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_8
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_8.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_8m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_8m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_8m_OFFSET,i,(m._ing_flex_ctr_counter_table_8),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_8m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_8m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_8m_OFFSET,i,&(m._ing_flex_ctr_counter_table_8),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_8m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_8m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_8m_OFFSET,i,&(m._ing_flex_ctr_counter_table_8),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_8m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_COUNTER_TABLE_9
 * BLOCKS:   IPIPE
 * SIZE:     68
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_9.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_9m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_9m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_9m_OFFSET,i,(m._ing_flex_ctr_counter_table_9),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_9m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_9m_BLKACC,1,n,0,ING_FLEX_CTR_COUNTER_TABLE_9m_OFFSET,i,&(m._ing_flex_ctr_counter_table_9),3)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_9m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_9m_BLKACC,1,-1,0,ING_FLEX_CTR_COUNTER_TABLE_9m_OFFSET,i,&(m._ing_flex_ctr_counter_table_9),3)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_9m'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_0.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_0r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_0r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_0), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_0r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_0r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_0), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_1.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_1r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_1r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_1), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_1r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_1r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_1), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_10
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_10.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_10r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_10r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_10r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_10), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_10r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_10r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_10r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_10), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_10r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_11
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_11.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_11r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_11r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_11r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_11), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_11r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_11r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_11r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_11), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_11r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_12
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_12.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_12r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_12r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_12r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_12), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_12r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_12r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_12r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_12), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_12r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_13
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_13.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_13r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_13r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_13r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_13), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_13r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_13r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_13r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_13), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_13r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_14
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_14.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_14r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_14r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_14r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_14), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_14r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_14r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_14r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_14), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_14r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_15
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_15.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_15r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_15r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_15r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_15), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_15r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_15r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_15r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_15), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_15r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_16
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_16.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_16r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_16r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_16r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_16), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_16r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_16r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_16r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_16), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_16r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_17
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_17.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_17r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_17r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_17r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_17), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_17r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_17r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_17r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_17), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_17r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_18
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_18.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_18r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_18r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_18r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_18), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_18r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_18r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_18r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_18), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_18r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_19
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_19.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_19r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_19r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_19r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_19), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_19r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_19r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_19r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_19), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_19r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_2.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_2r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_2r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_2), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_2r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_2r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_2), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_3.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_3r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_3r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_3), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_3r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_3r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_3), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_4.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_4r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_4r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_4), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_4r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_4r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_4), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_5.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_5r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_5r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_5r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_5), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_5r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_5r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_5r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_5), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_6
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_6.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_6r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_6r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_6r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_6), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_6r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_6r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_6r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_6), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_6r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_7
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_7.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_7r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_7r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_7r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_7), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_7r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_7r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_7r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_7), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_7r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_8
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_8.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_8r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_8r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_8r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_8), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_8r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_8r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_8r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_8), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_8r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_TABLE_CONTROL_9
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_TABLE_CONTROL_9.
 */
#define READ_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_9r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_9r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_9r_OFFSET,0,(r._ing_flex_ctr_counter_table_control_9), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_TABLE_CONTROL_9r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_9r_BLKACC,1,ING_FLEX_CTR_COUNTER_TABLE_CONTROL_9r_OFFSET,0,&(r._ing_flex_ctr_counter_table_control_9), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_TABLE_CONTROL_9r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_0.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_0), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_0), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_1.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_1), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_1), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_10
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_10.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_10r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_10r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_10r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_10), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_10r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_10r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_10r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_10), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_10r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_11
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_11.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_11r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_11r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_11r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_11), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_11r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_11r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_11r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_11), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_11r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_12
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_12.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_12r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_12r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_12r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_12), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_12r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_12r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_12r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_12), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_12r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_13
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_13.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_13r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_13r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_13r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_13), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_13r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_13r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_13r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_13), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_13r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_14
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_14.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_14r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_14r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_14r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_14), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_14r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_14r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_14r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_14), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_14r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_15
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_15.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_15r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_15r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_15r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_15), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_15r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_15r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_15r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_15), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_15r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_16
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_16.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_16r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_16r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_16r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_16), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_16r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_16r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_16r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_16), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_16r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_17
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_17.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_17r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_17r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_17r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_17), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_17r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_17r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_17r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_17), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_17r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_18
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_18.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_18r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_18r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_18r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_18), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_18r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_18r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_18r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_18), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_18r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_19
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_19.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_19r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_19r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_19r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_19), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_19r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_19r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_19r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_19), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_19r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_2.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_2), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_2), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_3.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_3), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_3), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_4.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_4r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_4r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_4), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_4r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_4r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_4), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_5.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_5r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_5r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_5r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_5), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_5r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_5r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_5r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_5), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_6
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_6.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_6r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_6r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_6r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_6), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_6r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_6r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_6r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_6), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_6r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_7
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_7.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_7r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_7r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_7r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_7), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_7r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_7r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_7r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_7), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_7r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_8
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_8.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_8r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_8r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_8r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_8), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_8r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_8r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_8r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_8), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_8r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_9
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_9.
 */
#define READ_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_9r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_9r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_9r_OFFSET,0,(r._ing_flex_ctr_counter_update_control_9), 1)
#define WRITE_ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_9r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_9r_BLKACC,1,ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_9r_OFFSET,0,&(r._ing_flex_ctr_counter_update_control_9), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_COUNTER_UPDATE_CONTROL_9r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_0.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_0),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_0),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_0),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_1.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_1),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_1),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_1),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_10
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_10.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_10),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_10),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_10),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_10r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_11
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_11.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_11),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_11),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_11),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_11r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_12
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_12.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_12),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_12),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_12),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_12r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_13
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_13.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_13),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_13),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_13),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_13r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_14
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_14.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_14),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_14),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_14),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_14r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_15
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_15.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_15),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_15),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_15),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_15r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_16
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_16.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_16),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_16),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_16),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_16r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_17
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_17.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_17),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_17),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_17),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_17r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_18
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_18.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_18),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_18),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_18),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_18r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_19
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_19.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_19),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_19),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_19),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_19r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_2.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_2),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_2),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_2),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_3.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_3),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_3),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_3),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_4.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_4),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_4),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_4),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_4r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_5.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_5),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_5),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_5),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_5r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_6
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_6.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_6),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_6),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_6),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_6r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_7
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_7.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_7),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_7),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_7),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_7r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_8
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_8.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_8),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_8),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_8),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_8r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_CONTROL_POOL_9
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_CONTROL_POOL_9.
 */
#define READ_ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r_OFFSET,0,(r._ing_flex_ctr_eviction_control_pool_9),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_9),1)
#define WRITE_ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r_OFFSET,0,&(r._ing_flex_ctr_eviction_control_pool_9),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_CONTROL_POOL_9r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_0),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_0),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_0),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_1),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_1),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_1),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_10),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_10),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_10),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_10r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_11),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_11),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_11),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_11r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_12),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_12),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_12),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_12r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_13),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_13),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_13),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_13r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_14),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_14),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_14),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_14r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_15),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_15),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_15),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_15r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_16),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_16),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_16),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_16r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_17),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_17),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_17),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_17r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_18),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_18),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_18),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_18r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_19),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_19),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_19),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_19r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_2),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_2),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_2),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_3),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_3),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_3),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_4),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_4),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_4),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_4r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_5),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_5),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_5),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_5r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_6),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_6),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_6),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_6r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_7),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_7),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_7),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_7r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_8),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_8),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_8),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_8r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9.
 */
#define READ_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r_OFFSET,0,(r._ing_flex_ctr_eviction_lfsr_seed_pool_9),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r_BLKACC,1,n,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_9),2)
#define WRITE_ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r_BLKACC,1,-1,0,ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r_OFFSET,0,&(r._ing_flex_ctr_eviction_lfsr_seed_pool_9),2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_LFSR_SEED_POOL_9r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_0.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_0), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_0), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_1.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_1), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_1), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_10
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_10.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_10r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_10r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_10r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_10), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_10r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_10r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_10r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_10), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_10r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_11
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_11.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_11r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_11r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_11r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_11), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_11r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_11r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_11r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_11), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_11r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_12
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_12.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_12r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_12r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_12r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_12), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_12r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_12r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_12r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_12), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_12r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_13
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_13.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_13r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_13r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_13r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_13), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_13r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_13r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_13r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_13), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_13r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_14
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_14.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_14r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_14r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_14r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_14), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_14r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_14r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_14r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_14), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_14r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_15
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_15.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_15r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_15r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_15r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_15), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_15r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_15r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_15r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_15), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_15r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_16
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_16.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_16r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_16r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_16r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_16), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_16r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_16r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_16r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_16), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_16r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_17
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_17.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_17r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_17r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_17r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_17), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_17r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_17r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_17r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_17), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_17r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_18
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_18.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_18r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_18r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_18r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_18), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_18r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_18r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_18r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_18), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_18r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_19
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_19.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_19r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_19r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_19r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_19), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_19r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_19r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_19r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_19), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_19r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_2.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_2), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_2), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_3.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_3), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_3), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_4
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_4.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_4r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_4r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_4r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_4), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_4r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_4r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_4r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_4), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_4r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_5
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_5.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_5r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_5r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_5r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_5), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_5r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_5r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_5r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_5), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_5r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_6
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_6.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_6r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_6r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_6r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_6), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_6r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_6r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_6r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_6), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_6r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_7
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_7.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_7r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_7r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_7r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_7), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_7r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_7r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_7r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_7), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_7r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_8
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_8.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_8r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_8r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_8r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_8), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_8r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_8r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_8r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_8), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_8r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_9
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_9.
 */
#define READ_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_9r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_9r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_9r_OFFSET,0,(r._ing_flex_ctr_eviction_threshold_pool_9), 2)
#define WRITE_ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_9r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_9r_BLKACC,1,ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_9r_OFFSET,0,&(r._ing_flex_ctr_eviction_threshold_pool_9), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_EVICTION_THRESHOLD_POOL_9r'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_0
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_0.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_0m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_0m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_0m_OFFSET+i,(m._ing_flex_ctr_offset_table_0),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_0m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_0m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_0m_OFFSET+i,&(m._ing_flex_ctr_offset_table_0),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_0m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_1
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_1.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_1m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_1m_OFFSET+i,(m._ing_flex_ctr_offset_table_1),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_1m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_1m_OFFSET+i,&(m._ing_flex_ctr_offset_table_1),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_1m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_10
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_10.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_10m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_10m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_10m_OFFSET+i,(m._ing_flex_ctr_offset_table_10),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_10m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_10m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_10m_OFFSET+i,&(m._ing_flex_ctr_offset_table_10),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_10m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_11
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_11.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_11m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_11m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_11m_OFFSET+i,(m._ing_flex_ctr_offset_table_11),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_11m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_11m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_11m_OFFSET+i,&(m._ing_flex_ctr_offset_table_11),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_11m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_12
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_12.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_12m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_12m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_12m_OFFSET+i,(m._ing_flex_ctr_offset_table_12),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_12m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_12m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_12m_OFFSET+i,&(m._ing_flex_ctr_offset_table_12),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_12m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_13
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_13.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_13m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_13m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_13m_OFFSET+i,(m._ing_flex_ctr_offset_table_13),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_13m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_13m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_13m_OFFSET+i,&(m._ing_flex_ctr_offset_table_13),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_13m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_14
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_14.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_14m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_14m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_14m_OFFSET+i,(m._ing_flex_ctr_offset_table_14),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_14m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_14m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_14m_OFFSET+i,&(m._ing_flex_ctr_offset_table_14),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_14m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_15
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_15.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_15m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_15m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_15m_OFFSET+i,(m._ing_flex_ctr_offset_table_15),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_15m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_15m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_15m_OFFSET+i,&(m._ing_flex_ctr_offset_table_15),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_15m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_16
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_16.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_16m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_16m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_16m_OFFSET+i,(m._ing_flex_ctr_offset_table_16),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_16m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_16m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_16m_OFFSET+i,&(m._ing_flex_ctr_offset_table_16),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_16m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_17
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_17.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_17m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_17m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_17m_OFFSET+i,(m._ing_flex_ctr_offset_table_17),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_17m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_17m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_17m_OFFSET+i,&(m._ing_flex_ctr_offset_table_17),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_17m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_18
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_18.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_18m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_18m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_18m_OFFSET+i,(m._ing_flex_ctr_offset_table_18),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_18m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_18m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_18m_OFFSET+i,&(m._ing_flex_ctr_offset_table_18),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_18m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_19
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_19.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_19m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_19m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_19m_OFFSET+i,(m._ing_flex_ctr_offset_table_19),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_19m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_19m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_19m_OFFSET+i,&(m._ing_flex_ctr_offset_table_19),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_19m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_2
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_2.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_2m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_2m_OFFSET+i,(m._ing_flex_ctr_offset_table_2),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_2m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_2m_OFFSET+i,&(m._ing_flex_ctr_offset_table_2),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_2m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_3
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_3.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_3m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_3m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_3m_OFFSET+i,(m._ing_flex_ctr_offset_table_3),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_3m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_3m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_3m_OFFSET+i,&(m._ing_flex_ctr_offset_table_3),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_3m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_4
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_4.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_4m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_4m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_4m_OFFSET+i,(m._ing_flex_ctr_offset_table_4),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_4m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_4m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_4m_OFFSET+i,&(m._ing_flex_ctr_offset_table_4),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_4m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_5
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_5.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_5m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_5m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_5m_OFFSET+i,(m._ing_flex_ctr_offset_table_5),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_5m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_5m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_5m_OFFSET+i,&(m._ing_flex_ctr_offset_table_5),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_5m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_6
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_6.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_6m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_6m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_6m_OFFSET+i,(m._ing_flex_ctr_offset_table_6),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_6m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_6m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_6m_OFFSET+i,&(m._ing_flex_ctr_offset_table_6),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_6m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_7
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_7.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_7m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_7m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_7m_OFFSET+i,(m._ing_flex_ctr_offset_table_7),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_7m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_7m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_7m_OFFSET+i,&(m._ing_flex_ctr_offset_table_7),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_7m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_8
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_8.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_8m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_8m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_8m_OFFSET+i,(m._ing_flex_ctr_offset_table_8),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_8m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_8m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_8m_OFFSET+i,&(m._ing_flex_ctr_offset_table_8),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_8m'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_OFFSET_TABLE_9
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_9.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_9m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_9m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_9m_OFFSET+i,(m._ing_flex_ctr_offset_table_9),1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_9m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_OFFSET_TABLE_9m_BLKACC)+1,ING_FLEX_CTR_OFFSET_TABLE_9m_OFFSET+i,&(m._ing_flex_ctr_offset_table_9),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_9m'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_0), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_0), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_1), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_1), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_10
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_10.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_10r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_10r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_10r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_10), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_10r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_10r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_10r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_10), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_10r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_11
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_11.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_11r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_11r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_11r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_11), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_11r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_11r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_11r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_11), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_11r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_12
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_12.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_12r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_12r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_12r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_12), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_12r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_12r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_12r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_12), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_12r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_13
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_13.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_13r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_13r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_13r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_13), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_13r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_13r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_13r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_13), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_13r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_14
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_14.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_14r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_14r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_14r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_14), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_14r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_14r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_14r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_14), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_14r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_15
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_15.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_15r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_15r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_15r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_15), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_15r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_15r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_15r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_15), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_15r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_16
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_16.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_16r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_16r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_16r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_16), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_16r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_16r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_16r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_16), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_16r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_17
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_17.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_17r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_17r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_17r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_17), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_17r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_17r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_17r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_17), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_17r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_18
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_18.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_18r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_18r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_18r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_18), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_18r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_18r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_18r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_18), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_18r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_19
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_19.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_19r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_19r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_19r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_19), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_19r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_19r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_19r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_19), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_19r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_2), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_2), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_3.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_3r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_3r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_3), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_3r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_3r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_3), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_4.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_4r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_4r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_4), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_4r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_4r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_4), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_5.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_5r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_5r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_5r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_5), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_5r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_5r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_5r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_5), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_6
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_6.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_6r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_6r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_6r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_6), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_6r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_6r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_6r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_6), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_6r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_7
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_7.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_7r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_7r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_7r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_7), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_7r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_7r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_7r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_7), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_7r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_8
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_8.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_8r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_8r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_8r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_8), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_8r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_8r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_8r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_8), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_8r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_OFFSET_TABLE_CONTROL_9
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_FLEX_CTR_OFFSET_TABLE_CONTROL_9.
 */
#define READ_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_9r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_9r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_9r_OFFSET,0,(r._ing_flex_ctr_offset_table_control_9), 1)
#define WRITE_ING_FLEX_CTR_OFFSET_TABLE_CONTROL_9r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_9r_BLKACC,1,ING_FLEX_CTR_OFFSET_TABLE_CONTROL_9r_OFFSET,0,&(r._ing_flex_ctr_offset_table_control_9), 1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_OFFSET_TABLE_CONTROL_9r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_0), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_0), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_1), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_1), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_10
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_10.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_10r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_10r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_10r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_10), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_10r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_10r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_10r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_10), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_10r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_11
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_11.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_11r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_11r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_11r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_11), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_11r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_11r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_11r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_11), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_11r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_12
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_12.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_12r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_12r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_12r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_12), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_12r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_12r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_12r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_12), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_12r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_13
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_13.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_13r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_13r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_13r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_13), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_13r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_13r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_13r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_13), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_13r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_14
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_14.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_14r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_14r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_14r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_14), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_14r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_14r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_14r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_14), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_14r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_15
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_15.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_15r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_15r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_15r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_15), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_15r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_15r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_15r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_15), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_15r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_16
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_16.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_16r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_16r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_16r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_16), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_16r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_16r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_16r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_16), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_16r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_17
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_17.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_17r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_17r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_17r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_17), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_17r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_17r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_17r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_17), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_17r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_18
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_18.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_18r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_18r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_18r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_18), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_18r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_18r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_18r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_18), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_18r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_19
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_19.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_19r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_19r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_19r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_19), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_19r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_19r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_19r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_19), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_19r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_2), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_2), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_3), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_3), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_4
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_4.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_4r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_4r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_4r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_4), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_4r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_4r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_4r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_4), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_4r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_5
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_5.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_5r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_5r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_5r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_5), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_5r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_5r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_5r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_5), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_5r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_6
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_6.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_6r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_6r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_6r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_6), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_6r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_6r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_6r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_6), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_6r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_7
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_7.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_7r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_7r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_7r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_7), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_7r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_7r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_7r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_7), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_7r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_8
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_8.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_8r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_8r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_8r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_8), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_8r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_8r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_8r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_8), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_8r'
 */




/*******************************************************************************
 * REGISTER:  ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_9
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_9.
 */
#define READ_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_9r(u,r) bcmbd_cmicd_reg_block_read(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_9r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_9r_OFFSET,0,(r._ing_flex_ctr_pkt_attr_selector_key_9), 2)
#define WRITE_ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_9r(u,r) bcmbd_cmicd_reg_block_write(u,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_9r_BLKACC,1,ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_9r_OFFSET,0,&(r._ing_flex_ctr_pkt_attr_selector_key_9), 2)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_ATTR_SELECTOR_KEY_9r'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_PKT_PRI_MAP
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_PRI_MAP.
 */
#define READ_ING_FLEX_CTR_PKT_PRI_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_PKT_PRI_MAPm_BLKACC)+1,ING_FLEX_CTR_PKT_PRI_MAPm_OFFSET+i,(m._ing_flex_ctr_pkt_pri_map),1)
#define WRITE_ING_FLEX_CTR_PKT_PRI_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_PKT_PRI_MAPm_BLKACC)+1,ING_FLEX_CTR_PKT_PRI_MAPm_OFFSET+i,&(m._ing_flex_ctr_pkt_pri_map),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_PRI_MAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_PKT_RES_MAP
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PKT_RES_MAP.
 */
#define READ_ING_FLEX_CTR_PKT_RES_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_PKT_RES_MAPm_BLKACC)+1,ING_FLEX_CTR_PKT_RES_MAPm_OFFSET+i,(m._ing_flex_ctr_pkt_res_map),1)
#define WRITE_ING_FLEX_CTR_PKT_RES_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_PKT_RES_MAPm_BLKACC)+1,ING_FLEX_CTR_PKT_RES_MAPm_OFFSET+i,&(m._ing_flex_ctr_pkt_res_map),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PKT_RES_MAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_PORT_MAP
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PORT_MAP.
 */
#define READ_ING_FLEX_CTR_PORT_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_PORT_MAPm_BLKACC)+1,ING_FLEX_CTR_PORT_MAPm_OFFSET+i,(m._ing_flex_ctr_port_map),1)
#define WRITE_ING_FLEX_CTR_PORT_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_PORT_MAPm_BLKACC)+1,ING_FLEX_CTR_PORT_MAPm_OFFSET+i,&(m._ing_flex_ctr_port_map),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PORT_MAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_PRI_CNG_MAP
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access ING_FLEX_CTR_PRI_CNG_MAP.
 */
#define READ_ING_FLEX_CTR_PRI_CNG_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_PRI_CNG_MAPm_BLKACC)+1,ING_FLEX_CTR_PRI_CNG_MAPm_OFFSET+i,(m._ing_flex_ctr_pri_cng_map),1)
#define WRITE_ING_FLEX_CTR_PRI_CNG_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_PRI_CNG_MAPm_BLKACC)+1,ING_FLEX_CTR_PRI_CNG_MAPm_OFFSET+i,&(m._ing_flex_ctr_pri_cng_map),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_PRI_CNG_MAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_FLEX_CTR_TOS_MAP
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access ING_FLEX_CTR_TOS_MAP.
 */
#define READ_ING_FLEX_CTR_TOS_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_TOS_MAPm_BLKACC)+1,ING_FLEX_CTR_TOS_MAPm_OFFSET+i,(m._ing_flex_ctr_tos_map),1)
#define WRITE_ING_FLEX_CTR_TOS_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_FLEX_CTR_TOS_MAPm_BLKACC)+1,ING_FLEX_CTR_TOS_MAPm_OFFSET+i,&(m._ing_flex_ctr_tos_map),1)

/*******************************************************************************
 * End of 'ING_FLEX_CTR_TOS_MAPm'
 */




/*******************************************************************************
 * REGISTER:  ING_GTP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_GTP_CONTROL.
 */
#define READ_ING_GTP_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ING_GTP_CONTROLr_BLKACC,1,ING_GTP_CONTROLr_OFFSET,0,(r._ing_gtp_control), 1)
#define WRITE_ING_GTP_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ING_GTP_CONTROLr_BLKACC,1,ING_GTP_CONTROLr_OFFSET,0,&(r._ing_gtp_control), 1)

/*******************************************************************************
 * End of 'ING_GTP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_HASH_CONFIG_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_HASH_CONFIG_0.
 */
#define READ_ING_HASH_CONFIG_0r(u,r) bcmbd_cmicd_reg_block_read(u,ING_HASH_CONFIG_0r_BLKACC,1,ING_HASH_CONFIG_0r_OFFSET,0,(r._ing_hash_config_0), 1)
#define WRITE_ING_HASH_CONFIG_0r(u,r) bcmbd_cmicd_reg_block_write(u,ING_HASH_CONFIG_0r_BLKACC,1,ING_HASH_CONFIG_0r_OFFSET,0,&(r._ing_hash_config_0), 1)

/*******************************************************************************
 * End of 'ING_HASH_CONFIG_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_HBFC_CNTAG_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_HBFC_CNTAG_ETHERTYPE.
 */
#define READ_ING_HBFC_CNTAG_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,ING_HBFC_CNTAG_ETHERTYPEr_BLKACC,1,ING_HBFC_CNTAG_ETHERTYPEr_OFFSET,0,(r._ing_hbfc_cntag_ethertype), 1)
#define WRITE_ING_HBFC_CNTAG_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,ING_HBFC_CNTAG_ETHERTYPEr_BLKACC,1,ING_HBFC_CNTAG_ETHERTYPEr_OFFSET,0,&(r._ing_hbfc_cntag_ethertype), 1)

/*******************************************************************************
 * End of 'ING_HBFC_CNTAG_ETHERTYPEr'
 */




/*******************************************************************************
 * MEMORY:  ING_HIGIG_TRUNK_OVERRIDE_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     66
 */
/*
 * These macros can be used to access ING_HIGIG_TRUNK_OVERRIDE_PROFILE.
 */
#define READ_ING_HIGIG_TRUNK_OVERRIDE_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_HIGIG_TRUNK_OVERRIDE_PROFILEm_BLKACC)+1,ING_HIGIG_TRUNK_OVERRIDE_PROFILEm_OFFSET+i,(m._ing_higig_trunk_override_profile),3)
#define WRITE_ING_HIGIG_TRUNK_OVERRIDE_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_HIGIG_TRUNK_OVERRIDE_PROFILEm_BLKACC)+1,ING_HIGIG_TRUNK_OVERRIDE_PROFILEm_OFFSET+i,&(m._ing_higig_trunk_override_profile),3)

/*******************************************************************************
 * End of 'ING_HIGIG_TRUNK_OVERRIDE_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  ING_HW_RESET_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_HW_RESET_CONTROL_1.
 */
#define READ_ING_HW_RESET_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,ING_HW_RESET_CONTROL_1r_BLKACC,1,ING_HW_RESET_CONTROL_1r_OFFSET,0,(r._ing_hw_reset_control_1), 1)
#define WRITE_ING_HW_RESET_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,ING_HW_RESET_CONTROL_1r_BLKACC,1,ING_HW_RESET_CONTROL_1r_OFFSET,0,&(r._ing_hw_reset_control_1), 1)

/*******************************************************************************
 * End of 'ING_HW_RESET_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_HW_RESET_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_HW_RESET_CONTROL_2.
 */
#define READ_ING_HW_RESET_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_HW_RESET_CONTROL_2r_BLKACC,1,n,0,ING_HW_RESET_CONTROL_2r_OFFSET,0,(r._ing_hw_reset_control_2),1)
#define WRITE_ING_HW_RESET_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_HW_RESET_CONTROL_2r_BLKACC,1,n,0,ING_HW_RESET_CONTROL_2r_OFFSET,0,&(r._ing_hw_reset_control_2),1)
#define WRITE_ING_HW_RESET_CONTROL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_HW_RESET_CONTROL_2r_BLKACC,1,-1,0,ING_HW_RESET_CONTROL_2r_OFFSET,0,&(r._ing_hw_reset_control_2),1)

/*******************************************************************************
 * End of 'ING_HW_RESET_CONTROL_2r'
 */




/*******************************************************************************
 * MEMORY:  ING_IDB_TO_DEV_MAP
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access ING_IDB_TO_DEV_MAP.
 */
#define READ_ING_IDB_TO_DEV_MAPm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_IDB_TO_DEV_MAPm_BLKACC,1,n,0,ING_IDB_TO_DEV_MAPm_OFFSET,i,(m._ing_idb_to_dev_map),1)
#define WRITE_ING_IDB_TO_DEV_MAPm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_IDB_TO_DEV_MAPm_BLKACC,1,n,0,ING_IDB_TO_DEV_MAPm_OFFSET,i,&(m._ing_idb_to_dev_map),1)
#define WRITE_ING_IDB_TO_DEV_MAPm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_IDB_TO_DEV_MAPm_BLKACC,1,-1,0,ING_IDB_TO_DEV_MAPm_OFFSET,i,&(m._ing_idb_to_dev_map),1)

/*******************************************************************************
 * End of 'ING_IDB_TO_DEV_MAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_IPV6_MC_RESERVED_ADDRESS
 * BLOCKS:   IPIPE
 * SIZE:     256
 */
/*
 * These macros can be used to access ING_IPV6_MC_RESERVED_ADDRESS.
 */
#define READ_ING_IPV6_MC_RESERVED_ADDRESSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_IPV6_MC_RESERVED_ADDRESSm_BLKACC)+1,ING_IPV6_MC_RESERVED_ADDRESSm_OFFSET+i,(m._ing_ipv6_mc_reserved_address),8)
#define WRITE_ING_IPV6_MC_RESERVED_ADDRESSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_IPV6_MC_RESERVED_ADDRESSm_BLKACC)+1,ING_IPV6_MC_RESERVED_ADDRESSm_OFFSET+i,&(m._ing_ipv6_mc_reserved_address),8)

/*******************************************************************************
 * End of 'ING_IPV6_MC_RESERVED_ADDRESSm'
 */




/*******************************************************************************
 * REGISTER:  ING_L2_TUNNEL_PARSE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_L2_TUNNEL_PARSE_CONTROL.
 */
#define READ_ING_L2_TUNNEL_PARSE_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ING_L2_TUNNEL_PARSE_CONTROLr_BLKACC,1,ING_L2_TUNNEL_PARSE_CONTROLr_OFFSET,0,(r._ing_l2_tunnel_parse_control), 1)
#define WRITE_ING_L2_TUNNEL_PARSE_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ING_L2_TUNNEL_PARSE_CONTROLr_BLKACC,1,ING_L2_TUNNEL_PARSE_CONTROLr_OFFSET,0,&(r._ing_l2_tunnel_parse_control), 1)

/*******************************************************************************
 * End of 'ING_L2_TUNNEL_PARSE_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ING_L3_NEXT_HOP
 * BLOCKS:   IPIPE
 * SIZE:     61
 */
/*
 * These macros can be used to access ING_L3_NEXT_HOP.
 */
#define READ_ING_L3_NEXT_HOPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_L3_NEXT_HOPm_BLKACC)+1,ING_L3_NEXT_HOPm_OFFSET+i,(m._ing_l3_next_hop),2)
#define WRITE_ING_L3_NEXT_HOPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_L3_NEXT_HOPm_BLKACC)+1,ING_L3_NEXT_HOPm_OFFSET+i,&(m._ing_l3_next_hop),2)

/*******************************************************************************
 * End of 'ING_L3_NEXT_HOPm'
 */




/*******************************************************************************
 * REGISTER:  ING_LATENCY_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_LATENCY_CONTROL.
 */
#define READ_ING_LATENCY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ING_LATENCY_CONTROLr_BLKACC,1,ING_LATENCY_CONTROLr_OFFSET,0,(r._ing_latency_control), 1)
#define WRITE_ING_LATENCY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ING_LATENCY_CONTROLr_BLKACC,1,ING_LATENCY_CONTROLr_OFFSET,0,&(r._ing_latency_control), 1)

/*******************************************************************************
 * End of 'ING_LATENCY_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_MIRROR_COS_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MIRROR_COS_CONTROL.
 */
#define READ_ING_MIRROR_COS_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ING_MIRROR_COS_CONTROLr_BLKACC,1,ING_MIRROR_COS_CONTROLr_OFFSET,0,(r._ing_mirror_cos_control), 1)
#define WRITE_ING_MIRROR_COS_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ING_MIRROR_COS_CONTROLr_BLKACC,1,ING_MIRROR_COS_CONTROLr_OFFSET,0,&(r._ing_mirror_cos_control), 1)

/*******************************************************************************
 * End of 'ING_MIRROR_COS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_MISC_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MISC_CONFIG.
 */
#define READ_ING_MISC_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,ING_MISC_CONFIGr_BLKACC,1,ING_MISC_CONFIGr_OFFSET,0,(r._ing_misc_config), 1)
#define WRITE_ING_MISC_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,ING_MISC_CONFIGr_BLKACC,1,ING_MISC_CONFIGr_OFFSET,0,&(r._ing_misc_config), 1)

/*******************************************************************************
 * End of 'ING_MISC_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ING_MISC_CONFIG2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MISC_CONFIG2.
 */
#define READ_ING_MISC_CONFIG2r(u,r) bcmbd_cmicd_reg_block_read(u,ING_MISC_CONFIG2r_BLKACC,1,ING_MISC_CONFIG2r_OFFSET,0,(r._ing_misc_config2), 1)
#define WRITE_ING_MISC_CONFIG2r(u,r) bcmbd_cmicd_reg_block_write(u,ING_MISC_CONFIG2r_BLKACC,1,ING_MISC_CONFIG2r_OFFSET,0,&(r._ing_misc_config2), 1)

/*******************************************************************************
 * End of 'ING_MISC_CONFIG2r'
 */




/*******************************************************************************
 * REGISTER:  ING_MODMAP_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MODMAP_CTRL.
 */
#define READ_ING_MODMAP_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_MODMAP_CTRLr_BLKACC,p,ING_MODMAP_CTRLr_OFFSET,0,(r._ing_modmap_ctrl), 1)
#define WRITE_ING_MODMAP_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_MODMAP_CTRLr_BLKACC,p,ING_MODMAP_CTRLr_OFFSET,0,&(r._ing_modmap_ctrl), 1)

/*******************************************************************************
 * End of 'ING_MODMAP_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  ING_MOD_MAP_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     89
 */
/*
 * These macros can be used to access ING_MOD_MAP_TABLE.
 */
#define READ_ING_MOD_MAP_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MOD_MAP_TABLEm_BLKACC)+1,ING_MOD_MAP_TABLEm_OFFSET+i,(m._ing_mod_map_table),3)
#define WRITE_ING_MOD_MAP_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MOD_MAP_TABLEm_BLKACC)+1,ING_MOD_MAP_TABLEm_OFFSET+i,&(m._ing_mod_map_table),3)

/*******************************************************************************
 * End of 'ING_MOD_MAP_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  ING_MPLS_ENTRY_ACTION_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_MPLS_ENTRY_ACTION_TABLE_A.
 */
#define READ_ING_MPLS_ENTRY_ACTION_TABLE_Am(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_ENTRY_ACTION_TABLE_Am_BLKACC)+1,ING_MPLS_ENTRY_ACTION_TABLE_Am_OFFSET+i,(m._ing_mpls_entry_action_table_a),2)
#define WRITE_ING_MPLS_ENTRY_ACTION_TABLE_Am(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_ENTRY_ACTION_TABLE_Am_BLKACC)+1,ING_MPLS_ENTRY_ACTION_TABLE_Am_OFFSET+i,&(m._ing_mpls_entry_action_table_a),2)

/*******************************************************************************
 * End of 'ING_MPLS_ENTRY_ACTION_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  ING_MPLS_ENTRY_ACTION_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_MPLS_ENTRY_ACTION_TABLE_B.
 */
#define READ_ING_MPLS_ENTRY_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_ENTRY_ACTION_TABLE_Bm_BLKACC)+1,ING_MPLS_ENTRY_ACTION_TABLE_Bm_OFFSET+i,(m._ing_mpls_entry_action_table_b),2)
#define WRITE_ING_MPLS_ENTRY_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_ENTRY_ACTION_TABLE_Bm_BLKACC)+1,ING_MPLS_ENTRY_ACTION_TABLE_Bm_OFFSET+i,&(m._ing_mpls_entry_action_table_b),2)

/*******************************************************************************
 * End of 'ING_MPLS_ENTRY_ACTION_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  ING_MPLS_ENTRY_REMAP_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access ING_MPLS_ENTRY_REMAP_TABLE_A.
 */
#define READ_ING_MPLS_ENTRY_REMAP_TABLE_Am(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_ENTRY_REMAP_TABLE_Am_BLKACC)+1,ING_MPLS_ENTRY_REMAP_TABLE_Am_OFFSET+i,(m._ing_mpls_entry_remap_table_a),1)
#define WRITE_ING_MPLS_ENTRY_REMAP_TABLE_Am(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_ENTRY_REMAP_TABLE_Am_BLKACC)+1,ING_MPLS_ENTRY_REMAP_TABLE_Am_OFFSET+i,&(m._ing_mpls_entry_remap_table_a),1)

/*******************************************************************************
 * End of 'ING_MPLS_ENTRY_REMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  ING_MPLS_ENTRY_REMAP_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access ING_MPLS_ENTRY_REMAP_TABLE_B.
 */
#define READ_ING_MPLS_ENTRY_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_ENTRY_REMAP_TABLE_Bm_BLKACC)+1,ING_MPLS_ENTRY_REMAP_TABLE_Bm_OFFSET+i,(m._ing_mpls_entry_remap_table_b),1)
#define WRITE_ING_MPLS_ENTRY_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_ENTRY_REMAP_TABLE_Bm_BLKACC)+1,ING_MPLS_ENTRY_REMAP_TABLE_Bm_OFFSET+i,&(m._ing_mpls_entry_remap_table_b),1)

/*******************************************************************************
 * End of 'ING_MPLS_ENTRY_REMAP_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  ING_MPLS_EXP_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     13
 */
/*
 * These macros can be used to access ING_MPLS_EXP_MAPPING.
 */
#define READ_ING_MPLS_EXP_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_EXP_MAPPINGm_BLKACC)+1,ING_MPLS_EXP_MAPPINGm_OFFSET+i,(m._ing_mpls_exp_mapping),1)
#define WRITE_ING_MPLS_EXP_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_MPLS_EXP_MAPPINGm_BLKACC)+1,ING_MPLS_EXP_MAPPINGm_OFFSET+i,&(m._ing_mpls_exp_mapping),1)

/*******************************************************************************
 * End of 'ING_MPLS_EXP_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  ING_MPLS_INNER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MPLS_INNER_TPID.
 */
#define READ_ING_MPLS_INNER_TPIDr(u,r) bcmbd_cmicd_reg_block_read(u,ING_MPLS_INNER_TPIDr_BLKACC,1,ING_MPLS_INNER_TPIDr_OFFSET,0,(r._ing_mpls_inner_tpid), 1)
#define WRITE_ING_MPLS_INNER_TPIDr(u,r) bcmbd_cmicd_reg_block_write(u,ING_MPLS_INNER_TPIDr_BLKACC,1,ING_MPLS_INNER_TPIDr_OFFSET,0,&(r._ing_mpls_inner_tpid), 1)

/*******************************************************************************
 * End of 'ING_MPLS_INNER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  ING_MPLS_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MPLS_TPID.
 */
#define READ_ING_MPLS_TPIDr(u,i,r) bcmbd_cmicd_reg_block_read(u,ING_MPLS_TPIDr_BLKACC,1,ING_MPLS_TPIDr_OFFSET,i,(r._ing_mpls_tpid), 1)
#define WRITE_ING_MPLS_TPIDr(u,i,r) bcmbd_cmicd_reg_block_write(u,ING_MPLS_TPIDr_BLKACC,1,ING_MPLS_TPIDr_OFFSET,i,&(r._ing_mpls_tpid), 1)

/*******************************************************************************
 * End of 'ING_MPLS_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  ING_MPLS_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MPLS_TPID_0.
 */
#define READ_ING_MPLS_TPID_0r(u,r) bcmbd_cmicd_reg_block_read(u,ING_MPLS_TPID_0r_BLKACC,1,ING_MPLS_TPID_0r_OFFSET,0,(r._ing_mpls_tpid_0), 1)
#define WRITE_ING_MPLS_TPID_0r(u,r) bcmbd_cmicd_reg_block_write(u,ING_MPLS_TPID_0r_BLKACC,1,ING_MPLS_TPID_0r_OFFSET,0,&(r._ing_mpls_tpid_0), 1)

/*******************************************************************************
 * End of 'ING_MPLS_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_MPLS_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MPLS_TPID_1.
 */
#define READ_ING_MPLS_TPID_1r(u,r) bcmbd_cmicd_reg_block_read(u,ING_MPLS_TPID_1r_BLKACC,1,ING_MPLS_TPID_1r_OFFSET,0,(r._ing_mpls_tpid_1), 1)
#define WRITE_ING_MPLS_TPID_1r(u,r) bcmbd_cmicd_reg_block_write(u,ING_MPLS_TPID_1r_BLKACC,1,ING_MPLS_TPID_1r_OFFSET,0,&(r._ing_mpls_tpid_1), 1)

/*******************************************************************************
 * End of 'ING_MPLS_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_MPLS_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MPLS_TPID_2.
 */
#define READ_ING_MPLS_TPID_2r(u,r) bcmbd_cmicd_reg_block_read(u,ING_MPLS_TPID_2r_BLKACC,1,ING_MPLS_TPID_2r_OFFSET,0,(r._ing_mpls_tpid_2), 1)
#define WRITE_ING_MPLS_TPID_2r(u,r) bcmbd_cmicd_reg_block_write(u,ING_MPLS_TPID_2r_BLKACC,1,ING_MPLS_TPID_2r_OFFSET,0,&(r._ing_mpls_tpid_2), 1)

/*******************************************************************************
 * End of 'ING_MPLS_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_MPLS_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_MPLS_TPID_3.
 */
#define READ_ING_MPLS_TPID_3r(u,r) bcmbd_cmicd_reg_block_read(u,ING_MPLS_TPID_3r_BLKACC,1,ING_MPLS_TPID_3r_OFFSET,0,(r._ing_mpls_tpid_3), 1)
#define WRITE_ING_MPLS_TPID_3r(u,r) bcmbd_cmicd_reg_block_write(u,ING_MPLS_TPID_3r_BLKACC,1,ING_MPLS_TPID_3r_OFFSET,0,&(r._ing_mpls_tpid_3), 1)

/*******************************************************************************
 * End of 'ING_MPLS_TPID_3r'
 */




/*******************************************************************************
 * REGISTER:  ING_NIV_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_NIV_CONFIG.
 */
#define READ_ING_NIV_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,ING_NIV_CONFIGr_BLKACC,1,ING_NIV_CONFIGr_OFFSET,0,(r._ing_niv_config), 1)
#define WRITE_ING_NIV_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,ING_NIV_CONFIGr_BLKACC,1,ING_NIV_CONFIGr_OFFSET,0,&(r._ing_niv_config), 1)

/*******************************************************************************
 * End of 'ING_NIV_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ING_NIV_RX_FRAMES_ERROR_DROP_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_NIV_RX_FRAMES_ERROR_DROP_64.
 */
#define READ_ING_NIV_RX_FRAMES_ERROR_DROP_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_NIV_RX_FRAMES_ERROR_DROP_64r_BLKACC,p,ING_NIV_RX_FRAMES_ERROR_DROP_64r_OFFSET,0,(r._ing_niv_rx_frames_error_drop_64), 2)
#define WRITE_ING_NIV_RX_FRAMES_ERROR_DROP_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_NIV_RX_FRAMES_ERROR_DROP_64r_BLKACC,p,ING_NIV_RX_FRAMES_ERROR_DROP_64r_OFFSET,0,&(r._ing_niv_rx_frames_error_drop_64), 2)

/*******************************************************************************
 * End of 'ING_NIV_RX_FRAMES_ERROR_DROP_64r'
 */




/*******************************************************************************
 * REGISTER:  ING_NIV_RX_FRAMES_FORWARDING_DROP_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_NIV_RX_FRAMES_FORWARDING_DROP_64.
 */
#define READ_ING_NIV_RX_FRAMES_FORWARDING_DROP_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_NIV_RX_FRAMES_FORWARDING_DROP_64r_BLKACC,p,ING_NIV_RX_FRAMES_FORWARDING_DROP_64r_OFFSET,0,(r._ing_niv_rx_frames_forwarding_drop_64), 2)
#define WRITE_ING_NIV_RX_FRAMES_FORWARDING_DROP_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_NIV_RX_FRAMES_FORWARDING_DROP_64r_BLKACC,p,ING_NIV_RX_FRAMES_FORWARDING_DROP_64r_OFFSET,0,&(r._ing_niv_rx_frames_forwarding_drop_64), 2)

/*******************************************************************************
 * End of 'ING_NIV_RX_FRAMES_FORWARDING_DROP_64r'
 */




/*******************************************************************************
 * REGISTER:  ING_NIV_RX_FRAMES_VLAN_TAGGED_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_NIV_RX_FRAMES_VLAN_TAGGED_64.
 */
#define READ_ING_NIV_RX_FRAMES_VLAN_TAGGED_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_NIV_RX_FRAMES_VLAN_TAGGED_64r_BLKACC,p,ING_NIV_RX_FRAMES_VLAN_TAGGED_64r_OFFSET,0,(r._ing_niv_rx_frames_vlan_tagged_64), 2)
#define WRITE_ING_NIV_RX_FRAMES_VLAN_TAGGED_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_NIV_RX_FRAMES_VLAN_TAGGED_64r_BLKACC,p,ING_NIV_RX_FRAMES_VLAN_TAGGED_64r_OFFSET,0,&(r._ing_niv_rx_frames_vlan_tagged_64), 2)

/*******************************************************************************
 * End of 'ING_NIV_RX_FRAMES_VLAN_TAGGED_64r'
 */




/*******************************************************************************
 * MEMORY:  ING_OUTER_DOT1P_MAPPING_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access ING_OUTER_DOT1P_MAPPING_TABLE.
 */
#define READ_ING_OUTER_DOT1P_MAPPING_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_OUTER_DOT1P_MAPPING_TABLEm_BLKACC)+1,ING_OUTER_DOT1P_MAPPING_TABLEm_OFFSET+i,(m._ing_outer_dot1p_mapping_table),1)
#define WRITE_ING_OUTER_DOT1P_MAPPING_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_OUTER_DOT1P_MAPPING_TABLEm_BLKACC)+1,ING_OUTER_DOT1P_MAPPING_TABLEm_OFFSET+i,&(m._ing_outer_dot1p_mapping_table),1)

/*******************************************************************************
 * End of 'ING_OUTER_DOT1P_MAPPING_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID.
 */
#define READ_ING_OUTER_TPIDr(u,i,r) bcmbd_cmicd_reg_block_read(u,ING_OUTER_TPIDr_BLKACC,1,ING_OUTER_TPIDr_OFFSET,i,(r._ing_outer_tpid), 1)
#define WRITE_ING_OUTER_TPIDr(u,i,r) bcmbd_cmicd_reg_block_write(u,ING_OUTER_TPIDr_BLKACC,1,ING_OUTER_TPIDr_OFFSET,i,&(r._ing_outer_tpid), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPIDr'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID_0.
 */
#define READ_ING_OUTER_TPID_0r(u,r) bcmbd_cmicd_reg_block_read(u,ING_OUTER_TPID_0r_BLKACC,1,ING_OUTER_TPID_0r_OFFSET,0,(r._ing_outer_tpid_0), 1)
#define WRITE_ING_OUTER_TPID_0r(u,r) bcmbd_cmicd_reg_block_write(u,ING_OUTER_TPID_0r_BLKACC,1,ING_OUTER_TPID_0r_OFFSET,0,&(r._ing_outer_tpid_0), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPID_0r'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID_1.
 */
#define READ_ING_OUTER_TPID_1r(u,r) bcmbd_cmicd_reg_block_read(u,ING_OUTER_TPID_1r_BLKACC,1,ING_OUTER_TPID_1r_OFFSET,0,(r._ing_outer_tpid_1), 1)
#define WRITE_ING_OUTER_TPID_1r(u,r) bcmbd_cmicd_reg_block_write(u,ING_OUTER_TPID_1r_BLKACC,1,ING_OUTER_TPID_1r_OFFSET,0,&(r._ing_outer_tpid_1), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPID_1r'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID_2.
 */
#define READ_ING_OUTER_TPID_2r(u,r) bcmbd_cmicd_reg_block_read(u,ING_OUTER_TPID_2r_BLKACC,1,ING_OUTER_TPID_2r_OFFSET,0,(r._ing_outer_tpid_2), 1)
#define WRITE_ING_OUTER_TPID_2r(u,r) bcmbd_cmicd_reg_block_write(u,ING_OUTER_TPID_2r_BLKACC,1,ING_OUTER_TPID_2r_OFFSET,0,&(r._ing_outer_tpid_2), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPID_2r'
 */




/*******************************************************************************
 * REGISTER:  ING_OUTER_TPID_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_OUTER_TPID_3.
 */
#define READ_ING_OUTER_TPID_3r(u,r) bcmbd_cmicd_reg_block_read(u,ING_OUTER_TPID_3r_BLKACC,1,ING_OUTER_TPID_3r_OFFSET,0,(r._ing_outer_tpid_3), 1)
#define WRITE_ING_OUTER_TPID_3r(u,r) bcmbd_cmicd_reg_block_write(u,ING_OUTER_TPID_3r_BLKACC,1,ING_OUTER_TPID_3r_OFFSET,0,&(r._ing_outer_tpid_3), 1)

/*******************************************************************************
 * End of 'ING_OUTER_TPID_3r'
 */




/*******************************************************************************
 * MEMORY:  ING_PRI_CNG_MAP
 * BLOCKS:   IPIPE
 * SIZE:     7
 */
/*
 * These macros can be used to access ING_PRI_CNG_MAP.
 */
#define READ_ING_PRI_CNG_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_PRI_CNG_MAPm_BLKACC)+1,ING_PRI_CNG_MAPm_OFFSET+i,(m._ing_pri_cng_map),1)
#define WRITE_ING_PRI_CNG_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_PRI_CNG_MAPm_BLKACC)+1,ING_PRI_CNG_MAPm_OFFSET+i,&(m._ing_pri_cng_map),1)

/*******************************************************************************
 * End of 'ING_PRI_CNG_MAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_PW_TERM_SEQ_NUM
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access ING_PW_TERM_SEQ_NUM.
 */
#define READ_ING_PW_TERM_SEQ_NUMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_PW_TERM_SEQ_NUMm_BLKACC,1,n,0,ING_PW_TERM_SEQ_NUMm_OFFSET,i,(m._ing_pw_term_seq_num),1)
#define WRITE_ING_PW_TERM_SEQ_NUMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_PW_TERM_SEQ_NUMm_BLKACC,1,n,0,ING_PW_TERM_SEQ_NUMm_OFFSET,i,&(m._ing_pw_term_seq_num),1)
#define WRITE_ING_PW_TERM_SEQ_NUMm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_PW_TERM_SEQ_NUMm_BLKACC,1,-1,0,ING_PW_TERM_SEQ_NUMm_OFFSET,i,&(m._ing_pw_term_seq_num),1)

/*******************************************************************************
 * End of 'ING_PW_TERM_SEQ_NUMm'
 */




/*******************************************************************************
 * REGISTER:  ING_QCN_CNTAG_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_QCN_CNTAG_ETHERTYPE.
 */
#define READ_ING_QCN_CNTAG_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,ING_QCN_CNTAG_ETHERTYPEr_BLKACC,1,ING_QCN_CNTAG_ETHERTYPEr_OFFSET,0,(r._ing_qcn_cntag_ethertype), 1)
#define WRITE_ING_QCN_CNTAG_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,ING_QCN_CNTAG_ETHERTYPEr_BLKACC,1,ING_QCN_CNTAG_ETHERTYPEr_OFFSET,0,&(r._ing_qcn_cntag_ethertype), 1)

/*******************************************************************************
 * End of 'ING_QCN_CNTAG_ETHERTYPEr'
 */




/*******************************************************************************
 * REGISTER:  ING_Q_BEGIN
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_Q_BEGIN.
 */
#define READ_ING_Q_BEGINr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_Q_BEGINr_BLKACC,1,n,0,ING_Q_BEGINr_OFFSET,0,(r._ing_q_begin),1)
#define WRITE_ING_Q_BEGINr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_Q_BEGINr_BLKACC,1,n,0,ING_Q_BEGINr_OFFSET,0,&(r._ing_q_begin),1)
#define WRITE_ING_Q_BEGINr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_Q_BEGINr_BLKACC,1,-1,0,ING_Q_BEGINr_OFFSET,0,&(r._ing_q_begin),1)

/*******************************************************************************
 * End of 'ING_Q_BEGINr'
 */




/*******************************************************************************
 * MEMORY:  ING_ROUTED_INT_PRI_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access ING_ROUTED_INT_PRI_MAPPING.
 */
#define READ_ING_ROUTED_INT_PRI_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_ROUTED_INT_PRI_MAPPINGm_BLKACC)+1,ING_ROUTED_INT_PRI_MAPPINGm_OFFSET+i,(m._ing_routed_int_pri_mapping),1)
#define WRITE_ING_ROUTED_INT_PRI_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_ROUTED_INT_PRI_MAPPINGm_BLKACC)+1,ING_ROUTED_INT_PRI_MAPPINGm_OFFSET+i,&(m._ing_routed_int_pri_mapping),1)

/*******************************************************************************
 * End of 'ING_ROUTED_INT_PRI_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  ING_SCTP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SCTP_CONTROL.
 */
#define READ_ING_SCTP_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ING_SCTP_CONTROLr_BLKACC,1,ING_SCTP_CONTROLr_OFFSET,0,(r._ing_sctp_control), 1)
#define WRITE_ING_SCTP_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ING_SCTP_CONTROLr_BLKACC,1,ING_SCTP_CONTROLr_OFFSET,0,&(r._ing_sctp_control), 1)

/*******************************************************************************
 * End of 'ING_SCTP_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ING_SER_FIFO
 * BLOCKS:   IPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access ING_SER_FIFO.
 */
#define READ_ING_SER_FIFOm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,ING_SER_FIFOm_BLKACC,1,n,0,ING_SER_FIFOm_OFFSET,i,(m._ing_ser_fifo),2)
#define WRITE_ING_SER_FIFOm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_SER_FIFOm_BLKACC,1,n,0,ING_SER_FIFOm_OFFSET,i,&(m._ing_ser_fifo),2)
#define WRITE_ING_SER_FIFOm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,ING_SER_FIFOm_BLKACC,1,-1,0,ING_SER_FIFOm_OFFSET,i,&(m._ing_ser_fifo),2)

/*******************************************************************************
 * End of 'ING_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  ING_SER_FIFO_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SER_FIFO_CTRL.
 */
#define READ_ING_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_SER_FIFO_CTRLr_BLKACC,1,n,0,ING_SER_FIFO_CTRLr_OFFSET,0,(r._ing_ser_fifo_ctrl),1)
#define WRITE_ING_SER_FIFO_CTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SER_FIFO_CTRLr_BLKACC,1,n,0,ING_SER_FIFO_CTRLr_OFFSET,0,&(r._ing_ser_fifo_ctrl),1)
#define WRITE_ING_SER_FIFO_CTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SER_FIFO_CTRLr_BLKACC,1,-1,0,ING_SER_FIFO_CTRLr_OFFSET,0,&(r._ing_ser_fifo_ctrl),1)

/*******************************************************************************
 * End of 'ING_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  ING_SNAT
 * BLOCKS:   IPIPE
 * SIZE:     177
 */
/*
 * These macros can be used to access ING_SNAT.
 */
#define READ_ING_SNATm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_SNATm_BLKACC)+1,ING_SNATm_OFFSET+i,(m._ing_snat),6)
#define WRITE_ING_SNATm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_SNATm_BLKACC)+1,ING_SNATm_OFFSET+i,&(m._ing_snat),6)

/*******************************************************************************
 * End of 'ING_SNATm'
 */




/*******************************************************************************
 * REGISTER:  ING_SNAT_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SNAT_CAM_BIST_CONFIG.
 */
#define READ_ING_SNAT_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_SNAT_CAM_BIST_CONFIGr_BLKACC,1,n,0,ING_SNAT_CAM_BIST_CONFIGr_OFFSET,0,(r._ing_snat_cam_bist_config),1)
#define WRITE_ING_SNAT_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SNAT_CAM_BIST_CONFIGr_BLKACC,1,n,0,ING_SNAT_CAM_BIST_CONFIGr_OFFSET,0,&(r._ing_snat_cam_bist_config),1)
#define WRITE_ING_SNAT_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SNAT_CAM_BIST_CONFIGr_BLKACC,1,-1,0,ING_SNAT_CAM_BIST_CONFIGr_OFFSET,0,&(r._ing_snat_cam_bist_config),1)

/*******************************************************************************
 * End of 'ING_SNAT_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ING_SNAT_CAM_BIST_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SNAT_CAM_BIST_CONTROL.
 */
#define READ_ING_SNAT_CAM_BIST_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_SNAT_CAM_BIST_CONTROLr_BLKACC,1,n,0,ING_SNAT_CAM_BIST_CONTROLr_OFFSET,0,(r._ing_snat_cam_bist_control),1)
#define WRITE_ING_SNAT_CAM_BIST_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SNAT_CAM_BIST_CONTROLr_BLKACC,1,n,0,ING_SNAT_CAM_BIST_CONTROLr_OFFSET,0,&(r._ing_snat_cam_bist_control),1)
#define WRITE_ING_SNAT_CAM_BIST_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SNAT_CAM_BIST_CONTROLr_BLKACC,1,-1,0,ING_SNAT_CAM_BIST_CONTROLr_OFFSET,0,&(r._ing_snat_cam_bist_control),1)

/*******************************************************************************
 * End of 'ING_SNAT_CAM_BIST_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ING_SNAT_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SNAT_CAM_BIST_DBG_DATA.
 */
#define READ_ING_SNAT_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_SNAT_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,ING_SNAT_CAM_BIST_DBG_DATAr_OFFSET,0,(r._ing_snat_cam_bist_dbg_data),1)
#define WRITE_ING_SNAT_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SNAT_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,ING_SNAT_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._ing_snat_cam_bist_dbg_data),1)
#define WRITE_ING_SNAT_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SNAT_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,ING_SNAT_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._ing_snat_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'ING_SNAT_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  ING_SNAT_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SNAT_CAM_BIST_STATUS.
 */
#define READ_ING_SNAT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_SNAT_CAM_BIST_STATUSr_BLKACC,1,n,0,ING_SNAT_CAM_BIST_STATUSr_OFFSET,0,(r._ing_snat_cam_bist_status),1)
#define WRITE_ING_SNAT_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SNAT_CAM_BIST_STATUSr_BLKACC,1,n,0,ING_SNAT_CAM_BIST_STATUSr_OFFSET,0,&(r._ing_snat_cam_bist_status),1)
#define WRITE_ING_SNAT_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_SNAT_CAM_BIST_STATUSr_BLKACC,1,-1,0,ING_SNAT_CAM_BIST_STATUSr_OFFSET,0,&(r._ing_snat_cam_bist_status),1)

/*******************************************************************************
 * End of 'ING_SNAT_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  ING_SNAT_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access ING_SNAT_DATA_ONLY.
 */
#define READ_ING_SNAT_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_SNAT_DATA_ONLYm_BLKACC)+1,ING_SNAT_DATA_ONLYm_OFFSET+i,(m._ing_snat_data_only),1)
#define WRITE_ING_SNAT_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_SNAT_DATA_ONLYm_BLKACC)+1,ING_SNAT_DATA_ONLYm_OFFSET+i,&(m._ing_snat_data_only),1)

/*******************************************************************************
 * End of 'ING_SNAT_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  ING_SNAT_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access ING_SNAT_HIT_ONLY.
 */
#define READ_ING_SNAT_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_SNAT_HIT_ONLYm_BLKACC)+1,ING_SNAT_HIT_ONLYm_OFFSET+i,(m._ing_snat_hit_only),1)
#define WRITE_ING_SNAT_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_SNAT_HIT_ONLYm_BLKACC)+1,ING_SNAT_HIT_ONLYm_OFFSET+i,&(m._ing_snat_hit_only),1)

/*******************************************************************************
 * End of 'ING_SNAT_HIT_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  ING_SNAT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     161
 */
/*
 * These macros can be used to access ING_SNAT_ONLY.
 */
#define READ_ING_SNAT_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_SNAT_ONLYm_BLKACC)+1,ING_SNAT_ONLYm_OFFSET+i,(m._ing_snat_only),6)
#define WRITE_ING_SNAT_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_SNAT_ONLYm_BLKACC)+1,ING_SNAT_ONLYm_OFFSET+i,&(m._ing_snat_only),6)

/*******************************************************************************
 * End of 'ING_SNAT_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  ING_SYS_RSVD_VID
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_SYS_RSVD_VID.
 */
#define READ_ING_SYS_RSVD_VIDr(u,r) bcmbd_cmicd_reg_block_read(u,ING_SYS_RSVD_VIDr_BLKACC,1,ING_SYS_RSVD_VIDr_OFFSET,0,(r._ing_sys_rsvd_vid), 1)
#define WRITE_ING_SYS_RSVD_VIDr(u,r) bcmbd_cmicd_reg_block_write(u,ING_SYS_RSVD_VIDr_BLKACC,1,ING_SYS_RSVD_VIDr_OFFSET,0,&(r._ing_sys_rsvd_vid), 1)

/*******************************************************************************
 * End of 'ING_SYS_RSVD_VIDr'
 */




/*******************************************************************************
 * REGISTER:  ING_TRILL_ADJACENCY
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_TRILL_ADJACENCY.
 */
#define READ_ING_TRILL_ADJACENCYr(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_TRILL_ADJACENCYr_BLKACC,p,ING_TRILL_ADJACENCYr_OFFSET,0,(r._ing_trill_adjacency), 2)
#define WRITE_ING_TRILL_ADJACENCYr(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_TRILL_ADJACENCYr_BLKACC,p,ING_TRILL_ADJACENCYr_OFFSET,0,&(r._ing_trill_adjacency), 2)

/*******************************************************************************
 * End of 'ING_TRILL_ADJACENCYr'
 */




/*******************************************************************************
 * MEMORY:  ING_TRILL_PARSE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     139
 */
/*
 * These macros can be used to access ING_TRILL_PARSE_CONTROL.
 */
#define READ_ING_TRILL_PARSE_CONTROLm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_TRILL_PARSE_CONTROLm_BLKACC)+1,ING_TRILL_PARSE_CONTROLm_OFFSET+i,(m._ing_trill_parse_control),5)
#define WRITE_ING_TRILL_PARSE_CONTROLm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_TRILL_PARSE_CONTROLm_BLKACC)+1,ING_TRILL_PARSE_CONTROLm_OFFSET+i,&(m._ing_trill_parse_control),5)

/*******************************************************************************
 * End of 'ING_TRILL_PARSE_CONTROLm'
 */




/*******************************************************************************
 * MEMORY:  ING_TRILL_PAYLOAD_PARSE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     53
 */
/*
 * These macros can be used to access ING_TRILL_PAYLOAD_PARSE_CONTROL.
 */
#define READ_ING_TRILL_PAYLOAD_PARSE_CONTROLm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_TRILL_PAYLOAD_PARSE_CONTROLm_BLKACC)+1,ING_TRILL_PAYLOAD_PARSE_CONTROLm_OFFSET+i,(m._ing_trill_payload_parse_control),2)
#define WRITE_ING_TRILL_PAYLOAD_PARSE_CONTROLm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_TRILL_PAYLOAD_PARSE_CONTROLm_BLKACC)+1,ING_TRILL_PAYLOAD_PARSE_CONTROLm_OFFSET+i,&(m._ing_trill_payload_parse_control),2)

/*******************************************************************************
 * End of 'ING_TRILL_PAYLOAD_PARSE_CONTROLm'
 */




/*******************************************************************************
 * REGISTER:  ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64.
 */
#define READ_ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r_BLKACC,p,ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r_OFFSET,0,(r._ing_trill_rx_access_port_trill_pkts_discarded_64), 2)
#define WRITE_ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r_BLKACC,p,ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r_OFFSET,0,&(r._ing_trill_rx_access_port_trill_pkts_discarded_64), 2)

/*******************************************************************************
 * End of 'ING_TRILL_RX_ACCESS_PORT_TRILL_PKTS_DISCARDED_64r'
 */




/*******************************************************************************
 * REGISTER:  ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64.
 */
#define READ_ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r_BLKACC,p,ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r_OFFSET,0,(r._ing_trill_rx_network_port_non_trill_pkts_discarded_64), 2)
#define WRITE_ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r_BLKACC,p,ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r_OFFSET,0,&(r._ing_trill_rx_network_port_non_trill_pkts_discarded_64), 2)

/*******************************************************************************
 * End of 'ING_TRILL_RX_NETWORK_PORT_NON_TRILL_PKTS_DISCARDED_64r'
 */




/*******************************************************************************
 * REGISTER:  ING_TRILL_RX_PKTS_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_TRILL_RX_PKTS_64.
 */
#define READ_ING_TRILL_RX_PKTS_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,ING_TRILL_RX_PKTS_64r_BLKACC,p,ING_TRILL_RX_PKTS_64r_OFFSET,0,(r._ing_trill_rx_pkts_64), 2)
#define WRITE_ING_TRILL_RX_PKTS_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,ING_TRILL_RX_PKTS_64r_BLKACC,p,ING_TRILL_RX_PKTS_64r_OFFSET,0,&(r._ing_trill_rx_pkts_64), 2)

/*******************************************************************************
 * End of 'ING_TRILL_RX_PKTS_64r'
 */




/*******************************************************************************
 * MEMORY:  ING_TUNNEL_ECN_DECAP
 * BLOCKS:   IPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access ING_TUNNEL_ECN_DECAP.
 */
#define READ_ING_TUNNEL_ECN_DECAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_TUNNEL_ECN_DECAPm_BLKACC)+1,ING_TUNNEL_ECN_DECAPm_OFFSET+i,(m._ing_tunnel_ecn_decap),1)
#define WRITE_ING_TUNNEL_ECN_DECAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_TUNNEL_ECN_DECAPm_BLKACC)+1,ING_TUNNEL_ECN_DECAPm_OFFSET+i,&(m._ing_tunnel_ecn_decap),1)

/*******************************************************************************
 * End of 'ING_TUNNEL_ECN_DECAPm'
 */




/*******************************************************************************
 * MEMORY:  ING_TUNNEL_ECN_DECAP_2
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access ING_TUNNEL_ECN_DECAP_2.
 */
#define READ_ING_TUNNEL_ECN_DECAP_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_TUNNEL_ECN_DECAP_2m_BLKACC)+1,ING_TUNNEL_ECN_DECAP_2m_OFFSET+i,(m._ing_tunnel_ecn_decap_2),1)
#define WRITE_ING_TUNNEL_ECN_DECAP_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_TUNNEL_ECN_DECAP_2m_BLKACC)+1,ING_TUNNEL_ECN_DECAP_2m_OFFSET+i,&(m._ing_tunnel_ecn_decap_2),1)

/*******************************************************************************
 * End of 'ING_TUNNEL_ECN_DECAP_2m'
 */




/*******************************************************************************
 * MEMORY:  ING_UNTAGGED_PHB
 * BLOCKS:   IPIPE
 * SIZE:     6
 */
/*
 * These macros can be used to access ING_UNTAGGED_PHB.
 */
#define READ_ING_UNTAGGED_PHBm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_UNTAGGED_PHBm_BLKACC)+1,ING_UNTAGGED_PHBm_OFFSET+i,(m._ing_untagged_phb),1)
#define WRITE_ING_UNTAGGED_PHBm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_UNTAGGED_PHBm_BLKACC)+1,ING_UNTAGGED_PHBm_OFFSET+i,&(m._ing_untagged_phb),1)

/*******************************************************************************
 * End of 'ING_UNTAGGED_PHBm'
 */




/*******************************************************************************
 * MEMORY:  ING_VLAN_RANGE
 * BLOCKS:   IPIPE
 * SIZE:     193
 */
/*
 * These macros can be used to access ING_VLAN_RANGE.
 */
#define READ_ING_VLAN_RANGEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VLAN_RANGEm_BLKACC)+1,ING_VLAN_RANGEm_OFFSET+i,(m._ing_vlan_range),7)
#define WRITE_ING_VLAN_RANGEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VLAN_RANGEm_BLKACC)+1,ING_VLAN_RANGEm_OFFSET+i,&(m._ing_vlan_range),7)

/*******************************************************************************
 * End of 'ING_VLAN_RANGEm'
 */




/*******************************************************************************
 * MEMORY:  ING_VLAN_TAG_ACTION_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     90
 */
/*
 * These macros can be used to access ING_VLAN_TAG_ACTION_PROFILE.
 */
#define READ_ING_VLAN_TAG_ACTION_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VLAN_TAG_ACTION_PROFILEm_BLKACC)+1,ING_VLAN_TAG_ACTION_PROFILEm_OFFSET+i,(m._ing_vlan_tag_action_profile),3)
#define WRITE_ING_VLAN_TAG_ACTION_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VLAN_TAG_ACTION_PROFILEm_BLKACC)+1,ING_VLAN_TAG_ACTION_PROFILEm_OFFSET+i,&(m._ing_vlan_tag_action_profile),3)

/*******************************************************************************
 * End of 'ING_VLAN_TAG_ACTION_PROFILEm'
 */




/*******************************************************************************
 * REGISTER:  ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRL.
 */
#define READ_ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr_BLKACC,1,n,0,ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr_OFFSET,0,(r._ing_vlan_tag_action_profile_control_dbgctrl),1)
#define WRITE_ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr_BLKACC,1,n,0,ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr_OFFSET,0,&(r._ing_vlan_tag_action_profile_control_dbgctrl),1)
#define WRITE_ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr_BLKACC,1,-1,0,ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr_OFFSET,0,&(r._ing_vlan_tag_action_profile_control_dbgctrl),1)

/*******************************************************************************
 * End of 'ING_VLAN_TAG_ACTION_PROFILE_CONTROL_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  ING_VP_VLAN_MEMBERSHIP
 * BLOCKS:   IPIPE
 * SIZE:     33
 */
/*
 * These macros can be used to access ING_VP_VLAN_MEMBERSHIP.
 */
#define READ_ING_VP_VLAN_MEMBERSHIPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VP_VLAN_MEMBERSHIPm_BLKACC)+1,ING_VP_VLAN_MEMBERSHIPm_OFFSET+i,(m._ing_vp_vlan_membership),2)
#define WRITE_ING_VP_VLAN_MEMBERSHIPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VP_VLAN_MEMBERSHIPm_BLKACC)+1,ING_VP_VLAN_MEMBERSHIPm_OFFSET+i,&(m._ing_vp_vlan_membership),2)

/*******************************************************************************
 * End of 'ING_VP_VLAN_MEMBERSHIPm'
 */




/*******************************************************************************
 * REGISTER:  ING_VP_VLAN_MEMBERSHIP_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_VP_VLAN_MEMBERSHIP_HASH_CONTROL.
 */
#define READ_ING_VP_VLAN_MEMBERSHIP_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ING_VP_VLAN_MEMBERSHIP_HASH_CONTROLr_BLKACC,1,ING_VP_VLAN_MEMBERSHIP_HASH_CONTROLr_OFFSET,0,(r._ing_vp_vlan_membership_hash_control), 1)
#define WRITE_ING_VP_VLAN_MEMBERSHIP_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ING_VP_VLAN_MEMBERSHIP_HASH_CONTROLr_BLKACC,1,ING_VP_VLAN_MEMBERSHIP_HASH_CONTROLr_OFFSET,0,&(r._ing_vp_vlan_membership_hash_control), 1)

/*******************************************************************************
 * End of 'ING_VP_VLAN_MEMBERSHIP_HASH_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  ING_VXLT_ACTION_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_VXLT_ACTION_TABLE_A.
 */
#define READ_ING_VXLT_ACTION_TABLE_Am(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VXLT_ACTION_TABLE_Am_BLKACC)+1,ING_VXLT_ACTION_TABLE_Am_OFFSET+i,(m._ing_vxlt_action_table_a),2)
#define WRITE_ING_VXLT_ACTION_TABLE_Am(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VXLT_ACTION_TABLE_Am_BLKACC)+1,ING_VXLT_ACTION_TABLE_Am_OFFSET+i,&(m._ing_vxlt_action_table_a),2)

/*******************************************************************************
 * End of 'ING_VXLT_ACTION_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  ING_VXLT_ACTION_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ING_VXLT_ACTION_TABLE_B.
 */
#define READ_ING_VXLT_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VXLT_ACTION_TABLE_Bm_BLKACC)+1,ING_VXLT_ACTION_TABLE_Bm_OFFSET+i,(m._ing_vxlt_action_table_b),2)
#define WRITE_ING_VXLT_ACTION_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VXLT_ACTION_TABLE_Bm_BLKACC)+1,ING_VXLT_ACTION_TABLE_Bm_OFFSET+i,&(m._ing_vxlt_action_table_b),2)

/*******************************************************************************
 * End of 'ING_VXLT_ACTION_TABLE_Bm'
 */




/*******************************************************************************
 * MEMORY:  ING_VXLT_REMAP_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access ING_VXLT_REMAP_TABLE_A.
 */
#define READ_ING_VXLT_REMAP_TABLE_Am(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VXLT_REMAP_TABLE_Am_BLKACC)+1,ING_VXLT_REMAP_TABLE_Am_OFFSET+i,(m._ing_vxlt_remap_table_a),1)
#define WRITE_ING_VXLT_REMAP_TABLE_Am(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VXLT_REMAP_TABLE_Am_BLKACC)+1,ING_VXLT_REMAP_TABLE_Am_OFFSET+i,&(m._ing_vxlt_remap_table_a),1)

/*******************************************************************************
 * End of 'ING_VXLT_REMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  ING_VXLT_REMAP_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access ING_VXLT_REMAP_TABLE_B.
 */
#define READ_ING_VXLT_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VXLT_REMAP_TABLE_Bm_BLKACC)+1,ING_VXLT_REMAP_TABLE_Bm_OFFSET+i,(m._ing_vxlt_remap_table_b),1)
#define WRITE_ING_VXLT_REMAP_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(ING_VXLT_REMAP_TABLE_Bm_BLKACC)+1,ING_VXLT_REMAP_TABLE_Bm_OFFSET+i,&(m._ing_vxlt_remap_table_b),1)

/*******************************************************************************
 * End of 'ING_VXLT_REMAP_TABLE_Bm'
 */




/*******************************************************************************
 * REGISTER:  ING_WESP_PROTO_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ING_WESP_PROTO_CONTROL.
 */
#define READ_ING_WESP_PROTO_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ING_WESP_PROTO_CONTROLr_BLKACC,1,ING_WESP_PROTO_CONTROLr_OFFSET,0,(r._ing_wesp_proto_control), 1)
#define WRITE_ING_WESP_PROTO_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ING_WESP_PROTO_CONTROLr_BLKACC,1,ING_WESP_PROTO_CONTROLr_OFFSET,0,&(r._ing_wesp_proto_control), 1)

/*******************************************************************************
 * End of 'ING_WESP_PROTO_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  INITIAL_ING_L3_NEXT_HOP
 * BLOCKS:   IPIPE
 * SIZE:     21
 */
/*
 * These macros can be used to access INITIAL_ING_L3_NEXT_HOP.
 */
#define READ_INITIAL_ING_L3_NEXT_HOPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_ING_L3_NEXT_HOPm_BLKACC)+1,INITIAL_ING_L3_NEXT_HOPm_OFFSET+i,(m._initial_ing_l3_next_hop),1)
#define WRITE_INITIAL_ING_L3_NEXT_HOPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_ING_L3_NEXT_HOPm_BLKACC)+1,INITIAL_ING_L3_NEXT_HOPm_OFFSET+i,&(m._initial_ing_l3_next_hop),1)

/*******************************************************************************
 * End of 'INITIAL_ING_L3_NEXT_HOPm'
 */




/*******************************************************************************
 * MEMORY:  INITIAL_L3_ECMP
 * BLOCKS:   IPIPE
 * SIZE:     18
 */
/*
 * These macros can be used to access INITIAL_L3_ECMP.
 */
#define READ_INITIAL_L3_ECMPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_L3_ECMPm_BLKACC)+1,INITIAL_L3_ECMPm_OFFSET+i,(m._initial_l3_ecmp),1)
#define WRITE_INITIAL_L3_ECMPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_L3_ECMPm_BLKACC)+1,INITIAL_L3_ECMPm_OFFSET+i,&(m._initial_l3_ecmp),1)

/*******************************************************************************
 * End of 'INITIAL_L3_ECMPm'
 */




/*******************************************************************************
 * MEMORY:  INITIAL_L3_ECMP_GROUP
 * BLOCKS:   IPIPE
 * SIZE:     30
 */
/*
 * These macros can be used to access INITIAL_L3_ECMP_GROUP.
 */
#define READ_INITIAL_L3_ECMP_GROUPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_L3_ECMP_GROUPm_BLKACC)+1,INITIAL_L3_ECMP_GROUPm_OFFSET+i,(m._initial_l3_ecmp_group),1)
#define WRITE_INITIAL_L3_ECMP_GROUPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_L3_ECMP_GROUPm_BLKACC)+1,INITIAL_L3_ECMP_GROUPm_OFFSET+i,&(m._initial_l3_ecmp_group),1)

/*******************************************************************************
 * End of 'INITIAL_L3_ECMP_GROUPm'
 */




/*******************************************************************************
 * MEMORY:  INITIAL_PROT_GROUP_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access INITIAL_PROT_GROUP_TABLE.
 */
#define READ_INITIAL_PROT_GROUP_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_PROT_GROUP_TABLEm_BLKACC)+1,INITIAL_PROT_GROUP_TABLEm_OFFSET+i,(m._initial_prot_group_table),1)
#define WRITE_INITIAL_PROT_GROUP_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_PROT_GROUP_TABLEm_BLKACC)+1,INITIAL_PROT_GROUP_TABLEm_OFFSET+i,&(m._initial_prot_group_table),1)

/*******************************************************************************
 * End of 'INITIAL_PROT_GROUP_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  INITIAL_PROT_NHI_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     28
 */
/*
 * These macros can be used to access INITIAL_PROT_NHI_TABLE.
 */
#define READ_INITIAL_PROT_NHI_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_PROT_NHI_TABLEm_BLKACC)+1,INITIAL_PROT_NHI_TABLEm_OFFSET+i,(m._initial_prot_nhi_table),1)
#define WRITE_INITIAL_PROT_NHI_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(INITIAL_PROT_NHI_TABLEm_BLKACC)+1,INITIAL_PROT_NHI_TABLEm_OFFSET+i,&(m._initial_prot_nhi_table),1)

/*******************************************************************************
 * End of 'INITIAL_PROT_NHI_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  INSTRUMENTATION_TRIGGERS_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access INSTRUMENTATION_TRIGGERS_ENABLE.
 */
#define READ_INSTRUMENTATION_TRIGGERS_ENABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(INSTRUMENTATION_TRIGGERS_ENABLEm_BLKACC)+1,INSTRUMENTATION_TRIGGERS_ENABLEm_OFFSET+i,(m._instrumentation_triggers_enable),5)
#define WRITE_INSTRUMENTATION_TRIGGERS_ENABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(INSTRUMENTATION_TRIGGERS_ENABLEm_BLKACC)+1,INSTRUMENTATION_TRIGGERS_ENABLEm_OFFSET+i,&(m._instrumentation_triggers_enable),5)

/*******************************************************************************
 * End of 'INSTRUMENTATION_TRIGGERS_ENABLEm'
 */




/*******************************************************************************
 * REGISTER:  INSTRUMENT_CPU_COS_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access INSTRUMENT_CPU_COS_CONFIG.
 */
#define READ_INSTRUMENT_CPU_COS_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,INSTRUMENT_CPU_COS_CONFIGr_BLKACC,1,INSTRUMENT_CPU_COS_CONFIGr_OFFSET,0,(r._instrument_cpu_cos_config), 1)
#define WRITE_INSTRUMENT_CPU_COS_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,INSTRUMENT_CPU_COS_CONFIGr_BLKACC,1,INSTRUMENT_CPU_COS_CONFIGr_OFFSET,0,&(r._instrument_cpu_cos_config), 1)

/*******************************************************************************
 * End of 'INSTRUMENT_CPU_COS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_CONGST_ST
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access INTFO_CONGST_ST.
 */
#define READ_INTFO_CONGST_STr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_CONGST_STr_BLKACC,5,0,p,INTFO_CONGST_STr_OFFSET,i,(r._intfo_congst_st),2)
#define WRITE_INTFO_CONGST_STr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_CONGST_STr_BLKACC,5,0,p,INTFO_CONGST_STr_OFFSET,i,&(r._intfo_congst_st),2)

/*******************************************************************************
 * End of 'INTFO_CONGST_STr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_EN_COR_ERR_RPT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_EN_COR_ERR_RPT.
 */
#define READ_INTFO_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_EN_COR_ERR_RPTr_BLKACC,5,0,p,INTFO_EN_COR_ERR_RPTr_OFFSET,0,(r._intfo_en_cor_err_rpt),1)
#define WRITE_INTFO_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_EN_COR_ERR_RPTr_BLKACC,5,0,p,INTFO_EN_COR_ERR_RPTr_OFFSET,0,&(r._intfo_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'INTFO_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_FCN_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_FCN_EN.
 */
#define READ_INTFO_FCN_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_FCN_ENr_BLKACC,5,0,p,INTFO_FCN_ENr_OFFSET,0,(r._intfo_fcn_en),1)
#define WRITE_INTFO_FCN_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_FCN_ENr_BLKACC,5,0,p,INTFO_FCN_ENr_OFFSET,0,&(r._intfo_fcn_en),1)

/*******************************************************************************
 * End of 'INTFO_FCN_ENr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_HW_UPDATE_DIS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_HW_UPDATE_DIS.
 */
#define READ_INTFO_HW_UPDATE_DISr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_HW_UPDATE_DISr_BLKACC,5,0,p,INTFO_HW_UPDATE_DISr_OFFSET,0,(r._intfo_hw_update_dis),1)
#define WRITE_INTFO_HW_UPDATE_DISr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_HW_UPDATE_DISr_BLKACC,5,0,p,INTFO_HW_UPDATE_DISr_OFFSET,0,&(r._intfo_hw_update_dis),1)

/*******************************************************************************
 * End of 'INTFO_HW_UPDATE_DISr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_MEM_TM
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_MEM_TM.
 */
#define READ_INTFO_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_MEM_TMr_BLKACC,5,0,p,INTFO_MEM_TMr_OFFSET,0,(r._intfo_mem_tm),1)
#define WRITE_INTFO_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_MEM_TMr_BLKACC,5,0,p,INTFO_MEM_TMr_OFFSET,0,&(r._intfo_mem_tm),1)

/*******************************************************************************
 * End of 'INTFO_MEM_TMr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_MERGE_MCQ_POOL
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_MERGE_MCQ_POOL.
 */
#define READ_INTFO_MERGE_MCQ_POOLr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_MERGE_MCQ_POOLr_BLKACC,5,0,p,INTFO_MERGE_MCQ_POOLr_OFFSET,0,(r._intfo_merge_mcq_pool),1)
#define WRITE_INTFO_MERGE_MCQ_POOLr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_MERGE_MCQ_POOLr_BLKACC,5,0,p,INTFO_MERGE_MCQ_POOLr_OFFSET,0,&(r._intfo_merge_mcq_pool),1)

/*******************************************************************************
 * End of 'INTFO_MERGE_MCQ_POOLr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_MERGE_RQE_POOL
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_MERGE_RQE_POOL.
 */
#define READ_INTFO_MERGE_RQE_POOLr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_MERGE_RQE_POOLr_BLKACC,5,0,p,INTFO_MERGE_RQE_POOLr_OFFSET,0,(r._intfo_merge_rqe_pool),1)
#define WRITE_INTFO_MERGE_RQE_POOLr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_MERGE_RQE_POOLr_BLKACC,5,0,p,INTFO_MERGE_RQE_POOLr_OFFSET,0,&(r._intfo_merge_rqe_pool),1)

/*******************************************************************************
 * End of 'INTFO_MERGE_RQE_POOLr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_OOBFC_MSG_RX_FAILED_CNT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_OOBFC_MSG_RX_FAILED_CNT.
 */
#define READ_INTFO_OOBFC_MSG_RX_FAILED_CNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_OOBFC_MSG_RX_FAILED_CNTr_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNTr_OFFSET,i,(r._intfo_oobfc_msg_rx_failed_cnt),1)
#define WRITE_INTFO_OOBFC_MSG_RX_FAILED_CNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_OOBFC_MSG_RX_FAILED_CNTr_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNTr_OFFSET,i,&(r._intfo_oobfc_msg_rx_failed_cnt),1)

/*******************************************************************************
 * End of 'INTFO_OOBFC_MSG_RX_FAILED_CNTr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_OOBFC_MSG_RX_FAILED_CNT0
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_OOBFC_MSG_RX_FAILED_CNT0.
 */
#define READ_INTFO_OOBFC_MSG_RX_FAILED_CNT0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_OOBFC_MSG_RX_FAILED_CNT0r_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNT0r_OFFSET,0,(r._intfo_oobfc_msg_rx_failed_cnt0),1)
#define WRITE_INTFO_OOBFC_MSG_RX_FAILED_CNT0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_OOBFC_MSG_RX_FAILED_CNT0r_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNT0r_OFFSET,0,&(r._intfo_oobfc_msg_rx_failed_cnt0),1)

/*******************************************************************************
 * End of 'INTFO_OOBFC_MSG_RX_FAILED_CNT0r'
 */




/*******************************************************************************
 * REGISTER:  INTFO_OOBFC_MSG_RX_FAILED_CNT1
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_OOBFC_MSG_RX_FAILED_CNT1.
 */
#define READ_INTFO_OOBFC_MSG_RX_FAILED_CNT1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_OOBFC_MSG_RX_FAILED_CNT1r_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNT1r_OFFSET,0,(r._intfo_oobfc_msg_rx_failed_cnt1),1)
#define WRITE_INTFO_OOBFC_MSG_RX_FAILED_CNT1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_OOBFC_MSG_RX_FAILED_CNT1r_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNT1r_OFFSET,0,&(r._intfo_oobfc_msg_rx_failed_cnt1),1)

/*******************************************************************************
 * End of 'INTFO_OOBFC_MSG_RX_FAILED_CNT1r'
 */




/*******************************************************************************
 * REGISTER:  INTFO_OOBFC_MSG_RX_FAILED_CNT2
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_OOBFC_MSG_RX_FAILED_CNT2.
 */
#define READ_INTFO_OOBFC_MSG_RX_FAILED_CNT2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_OOBFC_MSG_RX_FAILED_CNT2r_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNT2r_OFFSET,0,(r._intfo_oobfc_msg_rx_failed_cnt2),1)
#define WRITE_INTFO_OOBFC_MSG_RX_FAILED_CNT2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_OOBFC_MSG_RX_FAILED_CNT2r_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNT2r_OFFSET,0,&(r._intfo_oobfc_msg_rx_failed_cnt2),1)

/*******************************************************************************
 * End of 'INTFO_OOBFC_MSG_RX_FAILED_CNT2r'
 */




/*******************************************************************************
 * REGISTER:  INTFO_OOBFC_MSG_RX_FAILED_CNT3
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_OOBFC_MSG_RX_FAILED_CNT3.
 */
#define READ_INTFO_OOBFC_MSG_RX_FAILED_CNT3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_OOBFC_MSG_RX_FAILED_CNT3r_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNT3r_OFFSET,0,(r._intfo_oobfc_msg_rx_failed_cnt3),1)
#define WRITE_INTFO_OOBFC_MSG_RX_FAILED_CNT3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_OOBFC_MSG_RX_FAILED_CNT3r_BLKACC,5,0,p,INTFO_OOBFC_MSG_RX_FAILED_CNT3r_OFFSET,0,&(r._intfo_oobfc_msg_rx_failed_cnt3),1)

/*******************************************************************************
 * End of 'INTFO_OOBFC_MSG_RX_FAILED_CNT3r'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_MSG_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_MSG_FF_STATUS.
 */
#define READ_INTFO_STAT_MSG_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_MSG_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_MSG_FF_STATUSr_OFFSET,0,(r._intfo_stat_msg_ff_status),1)
#define WRITE_INTFO_STAT_MSG_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_MSG_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_MSG_FF_STATUSr_OFFSET,0,&(r._intfo_stat_msg_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_MSG_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_QS_CMD_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_QS_CMD_FF_STATUS.
 */
#define READ_INTFO_STAT_QS_CMD_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_QS_CMD_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_QS_CMD_FF_STATUSr_OFFSET,0,(r._intfo_stat_qs_cmd_ff_status),1)
#define WRITE_INTFO_STAT_QS_CMD_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_QS_CMD_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_QS_CMD_FF_STATUSr_OFFSET,0,&(r._intfo_stat_qs_cmd_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_QS_CMD_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_QS_RX_R_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_QS_RX_R_FF_STATUS.
 */
#define READ_INTFO_STAT_QS_RX_R_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_QS_RX_R_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_QS_RX_R_FF_STATUSr_OFFSET,0,(r._intfo_stat_qs_rx_r_ff_status),1)
#define WRITE_INTFO_STAT_QS_RX_R_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_QS_RX_R_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_QS_RX_R_FF_STATUSr_OFFSET,0,&(r._intfo_stat_qs_rx_r_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_QS_RX_R_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_QS_RX_S_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_QS_RX_S_FF_STATUS.
 */
#define READ_INTFO_STAT_QS_RX_S_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_QS_RX_S_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_QS_RX_S_FF_STATUSr_OFFSET,0,(r._intfo_stat_qs_rx_s_ff_status),1)
#define WRITE_INTFO_STAT_QS_RX_S_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_QS_RX_S_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_QS_RX_S_FF_STATUSr_OFFSET,0,&(r._intfo_stat_qs_rx_s_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_QS_RX_S_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_SP_CMD_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_SP_CMD_FF_STATUS.
 */
#define READ_INTFO_STAT_SP_CMD_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_SP_CMD_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_SP_CMD_FF_STATUSr_OFFSET,0,(r._intfo_stat_sp_cmd_ff_status),1)
#define WRITE_INTFO_STAT_SP_CMD_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_SP_CMD_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_SP_CMD_FF_STATUSr_OFFSET,0,&(r._intfo_stat_sp_cmd_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_SP_CMD_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_THDI_SP_RX_RA_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_THDI_SP_RX_RA_FF_STATUS.
 */
#define READ_INTFO_STAT_THDI_SP_RX_RA_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_THDI_SP_RX_RA_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDI_SP_RX_RA_FF_STATUSr_OFFSET,0,(r._intfo_stat_thdi_sp_rx_ra_ff_status),1)
#define WRITE_INTFO_STAT_THDI_SP_RX_RA_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_THDI_SP_RX_RA_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDI_SP_RX_RA_FF_STATUSr_OFFSET,0,&(r._intfo_stat_thdi_sp_rx_ra_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_THDI_SP_RX_RA_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_THDI_SP_RX_RB_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_THDI_SP_RX_RB_FF_STATUS.
 */
#define READ_INTFO_STAT_THDI_SP_RX_RB_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_THDI_SP_RX_RB_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDI_SP_RX_RB_FF_STATUSr_OFFSET,0,(r._intfo_stat_thdi_sp_rx_rb_ff_status),1)
#define WRITE_INTFO_STAT_THDI_SP_RX_RB_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_THDI_SP_RX_RB_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDI_SP_RX_RB_FF_STATUSr_OFFSET,0,&(r._intfo_stat_thdi_sp_rx_rb_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_THDI_SP_RX_RB_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_THDI_SP_RX_SA_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_THDI_SP_RX_SA_FF_STATUS.
 */
#define READ_INTFO_STAT_THDI_SP_RX_SA_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_THDI_SP_RX_SA_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDI_SP_RX_SA_FF_STATUSr_OFFSET,0,(r._intfo_stat_thdi_sp_rx_sa_ff_status),1)
#define WRITE_INTFO_STAT_THDI_SP_RX_SA_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_THDI_SP_RX_SA_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDI_SP_RX_SA_FF_STATUSr_OFFSET,0,&(r._intfo_stat_thdi_sp_rx_sa_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_THDI_SP_RX_SA_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_THDI_SP_RX_SB_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_THDI_SP_RX_SB_FF_STATUS.
 */
#define READ_INTFO_STAT_THDI_SP_RX_SB_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_THDI_SP_RX_SB_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDI_SP_RX_SB_FF_STATUSr_OFFSET,0,(r._intfo_stat_thdi_sp_rx_sb_ff_status),1)
#define WRITE_INTFO_STAT_THDI_SP_RX_SB_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_THDI_SP_RX_SB_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDI_SP_RX_SB_FF_STATUSr_OFFSET,0,&(r._intfo_stat_thdi_sp_rx_sb_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_THDI_SP_RX_SB_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_THDM_SP_RX_RA_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_THDM_SP_RX_RA_FF_STATUS.
 */
#define READ_INTFO_STAT_THDM_SP_RX_RA_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_THDM_SP_RX_RA_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDM_SP_RX_RA_FF_STATUSr_OFFSET,0,(r._intfo_stat_thdm_sp_rx_ra_ff_status),1)
#define WRITE_INTFO_STAT_THDM_SP_RX_RA_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_THDM_SP_RX_RA_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDM_SP_RX_RA_FF_STATUSr_OFFSET,0,&(r._intfo_stat_thdm_sp_rx_ra_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_THDM_SP_RX_RA_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_THDM_SP_RX_RB_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_THDM_SP_RX_RB_FF_STATUS.
 */
#define READ_INTFO_STAT_THDM_SP_RX_RB_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_THDM_SP_RX_RB_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDM_SP_RX_RB_FF_STATUSr_OFFSET,0,(r._intfo_stat_thdm_sp_rx_rb_ff_status),1)
#define WRITE_INTFO_STAT_THDM_SP_RX_RB_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_THDM_SP_RX_RB_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDM_SP_RX_RB_FF_STATUSr_OFFSET,0,&(r._intfo_stat_thdm_sp_rx_rb_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_THDM_SP_RX_RB_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_THDM_SP_RX_SA_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_THDM_SP_RX_SA_FF_STATUS.
 */
#define READ_INTFO_STAT_THDM_SP_RX_SA_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_THDM_SP_RX_SA_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDM_SP_RX_SA_FF_STATUSr_OFFSET,0,(r._intfo_stat_thdm_sp_rx_sa_ff_status),1)
#define WRITE_INTFO_STAT_THDM_SP_RX_SA_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_THDM_SP_RX_SA_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDM_SP_RX_SA_FF_STATUSr_OFFSET,0,&(r._intfo_stat_thdm_sp_rx_sa_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_THDM_SP_RX_SA_FF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  INTFO_STAT_THDM_SP_RX_SB_FF_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access INTFO_STAT_THDM_SP_RX_SB_FF_STATUS.
 */
#define READ_INTFO_STAT_THDM_SP_RX_SB_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,INTFO_STAT_THDM_SP_RX_SB_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDM_SP_RX_SB_FF_STATUSr_OFFSET,0,(r._intfo_stat_thdm_sp_rx_sb_ff_status),1)
#define WRITE_INTFO_STAT_THDM_SP_RX_SB_FF_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,INTFO_STAT_THDM_SP_RX_SB_FF_STATUSr_BLKACC,5,0,p,INTFO_STAT_THDM_SP_RX_SB_FF_STATUSr_OFFSET,0,&(r._intfo_stat_thdm_sp_rx_sb_ff_status),1)

/*******************************************************************************
 * End of 'INTFO_STAT_THDM_SP_RX_SB_FF_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  INT_CN_TO_MMUIF_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access INT_CN_TO_MMUIF_MAPPING.
 */
#define READ_INT_CN_TO_MMUIF_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(INT_CN_TO_MMUIF_MAPPINGm_BLKACC)+1,INT_CN_TO_MMUIF_MAPPINGm_OFFSET+i,(m._int_cn_to_mmuif_mapping),1)
#define WRITE_INT_CN_TO_MMUIF_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(INT_CN_TO_MMUIF_MAPPINGm_BLKACC)+1,INT_CN_TO_MMUIF_MAPPINGm_OFFSET+i,&(m._int_cn_to_mmuif_mapping),1)

/*******************************************************************************
 * End of 'INT_CN_TO_MMUIF_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  IP0_INTR_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP0_INTR_ENABLE.
 */
#define READ_IP0_INTR_ENABLEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IP0_INTR_ENABLEr_BLKACC,1,n,0,IP0_INTR_ENABLEr_OFFSET,0,(r._ip0_intr_enable),1)
#define WRITE_IP0_INTR_ENABLEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IP0_INTR_ENABLEr_BLKACC,1,n,0,IP0_INTR_ENABLEr_OFFSET,0,&(r._ip0_intr_enable),1)
#define WRITE_IP0_INTR_ENABLEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IP0_INTR_ENABLEr_BLKACC,1,-1,0,IP0_INTR_ENABLEr_OFFSET,0,&(r._ip0_intr_enable),1)

/*******************************************************************************
 * End of 'IP0_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  IP0_INTR_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP0_INTR_STATUS.
 */
#define READ_IP0_INTR_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IP0_INTR_STATUSr_BLKACC,1,n,0,IP0_INTR_STATUSr_OFFSET,0,(r._ip0_intr_status),1)
#define WRITE_IP0_INTR_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IP0_INTR_STATUSr_BLKACC,1,n,0,IP0_INTR_STATUSr_OFFSET,0,&(r._ip0_intr_status),1)
#define WRITE_IP0_INTR_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IP0_INTR_STATUSr_BLKACC,1,-1,0,IP0_INTR_STATUSr_OFFSET,0,&(r._ip0_intr_status),1)

/*******************************************************************************
 * End of 'IP0_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  IPARS_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IPARS_EN_COR_ERR_RPT.
 */
#define READ_IPARS_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_read(u,IPARS_EN_COR_ERR_RPTr_BLKACC,1,IPARS_EN_COR_ERR_RPTr_OFFSET,0,(r._ipars_en_cor_err_rpt), 1)
#define WRITE_IPARS_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_write(u,IPARS_EN_COR_ERR_RPTr_BLKACC,1,IPARS_EN_COR_ERR_RPTr_OFFSET,0,&(r._ipars_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'IPARS_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  IPARS_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IPARS_SER_CONTROL.
 */
#define READ_IPARS_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IPARS_SER_CONTROLr_BLKACC,1,IPARS_SER_CONTROLr_OFFSET,0,(r._ipars_ser_control), 1)
#define WRITE_IPARS_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IPARS_SER_CONTROLr_BLKACC,1,IPARS_SER_CONTROLr_OFFSET,0,&(r._ipars_ser_control), 1)

/*******************************************************************************
 * End of 'IPARS_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IPMC_MEMORY_DEBUG_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IPMC_MEMORY_DEBUG_TM.
 */
#define READ_IPMC_MEMORY_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,IPMC_MEMORY_DEBUG_TMr_BLKACC,3,0,p,IPMC_MEMORY_DEBUG_TMr_OFFSET,0,(r._ipmc_memory_debug_tm),1)
#define WRITE_IPMC_MEMORY_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,IPMC_MEMORY_DEBUG_TMr_BLKACC,3,0,p,IPMC_MEMORY_DEBUG_TMr_OFFSET,0,&(r._ipmc_memory_debug_tm),1)

/*******************************************************************************
 * End of 'IPMC_MEMORY_DEBUG_TMr'
 */




/*******************************************************************************
 * MEMORY:  IPV4_IN_IPV6_PREFIX_MATCH_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     97
 */
/*
 * These macros can be used to access IPV4_IN_IPV6_PREFIX_MATCH_TABLE.
 */
#define READ_IPV4_IN_IPV6_PREFIX_MATCH_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IPV4_IN_IPV6_PREFIX_MATCH_TABLEm_BLKACC)+1,IPV4_IN_IPV6_PREFIX_MATCH_TABLEm_OFFSET+i,(m._ipv4_in_ipv6_prefix_match_table),4)
#define WRITE_IPV4_IN_IPV6_PREFIX_MATCH_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IPV4_IN_IPV6_PREFIX_MATCH_TABLEm_BLKACC)+1,IPV4_IN_IPV6_PREFIX_MATCH_TABLEm_OFFSET+i,&(m._ipv4_in_ipv6_prefix_match_table),4)

/*******************************************************************************
 * End of 'IPV4_IN_IPV6_PREFIX_MATCH_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  IPV6_MIN_FRAG_SIZE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IPV6_MIN_FRAG_SIZE.
 */
#define READ_IPV6_MIN_FRAG_SIZEr(u,r) bcmbd_cmicd_reg_block_read(u,IPV6_MIN_FRAG_SIZEr_BLKACC,1,IPV6_MIN_FRAG_SIZEr_OFFSET,0,(r._ipv6_min_frag_size), 1)
#define WRITE_IPV6_MIN_FRAG_SIZEr(u,r) bcmbd_cmicd_reg_block_write(u,IPV6_MIN_FRAG_SIZEr_BLKACC,1,IPV6_MIN_FRAG_SIZEr_OFFSET,0,&(r._ipv6_min_frag_size), 1)

/*******************************************************************************
 * End of 'IPV6_MIN_FRAG_SIZEr'
 */




/*******************************************************************************
 * MEMORY:  IP_MULTICAST_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     281
 */
/*
 * These macros can be used to access IP_MULTICAST_TCAM.
 */
#define READ_IP_MULTICAST_TCAMm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IP_MULTICAST_TCAMm_BLKACC)+1,IP_MULTICAST_TCAMm_OFFSET+i,(m._ip_multicast_tcam),9)
#define WRITE_IP_MULTICAST_TCAMm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IP_MULTICAST_TCAMm_BLKACC)+1,IP_MULTICAST_TCAMm_OFFSET+i,&(m._ip_multicast_tcam),9)

/*******************************************************************************
 * End of 'IP_MULTICAST_TCAMm'
 */




/*******************************************************************************
 * REGISTER:  IP_MULTICAST_TCAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP_MULTICAST_TCAM_BIST_CONFIG.
 */
#define READ_IP_MULTICAST_TCAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IP_MULTICAST_TCAM_BIST_CONFIGr_BLKACC,1,n,0,IP_MULTICAST_TCAM_BIST_CONFIGr_OFFSET,0,(r._ip_multicast_tcam_bist_config),1)
#define WRITE_IP_MULTICAST_TCAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IP_MULTICAST_TCAM_BIST_CONFIGr_BLKACC,1,n,0,IP_MULTICAST_TCAM_BIST_CONFIGr_OFFSET,0,&(r._ip_multicast_tcam_bist_config),1)
#define WRITE_IP_MULTICAST_TCAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IP_MULTICAST_TCAM_BIST_CONFIGr_BLKACC,1,-1,0,IP_MULTICAST_TCAM_BIST_CONFIGr_OFFSET,0,&(r._ip_multicast_tcam_bist_config),1)

/*******************************************************************************
 * End of 'IP_MULTICAST_TCAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IP_MULTICAST_TCAM_BIST_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP_MULTICAST_TCAM_BIST_CONTROL.
 */
#define READ_IP_MULTICAST_TCAM_BIST_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IP_MULTICAST_TCAM_BIST_CONTROLr_BLKACC,1,n,0,IP_MULTICAST_TCAM_BIST_CONTROLr_OFFSET,0,(r._ip_multicast_tcam_bist_control),1)
#define WRITE_IP_MULTICAST_TCAM_BIST_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IP_MULTICAST_TCAM_BIST_CONTROLr_BLKACC,1,n,0,IP_MULTICAST_TCAM_BIST_CONTROLr_OFFSET,0,&(r._ip_multicast_tcam_bist_control),1)
#define WRITE_IP_MULTICAST_TCAM_BIST_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IP_MULTICAST_TCAM_BIST_CONTROLr_BLKACC,1,-1,0,IP_MULTICAST_TCAM_BIST_CONTROLr_OFFSET,0,&(r._ip_multicast_tcam_bist_control),1)

/*******************************************************************************
 * End of 'IP_MULTICAST_TCAM_BIST_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IP_MULTICAST_TCAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP_MULTICAST_TCAM_BIST_DBG_DATA.
 */
#define READ_IP_MULTICAST_TCAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IP_MULTICAST_TCAM_BIST_DBG_DATAr_BLKACC,1,n,0,IP_MULTICAST_TCAM_BIST_DBG_DATAr_OFFSET,0,(r._ip_multicast_tcam_bist_dbg_data),1)
#define WRITE_IP_MULTICAST_TCAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IP_MULTICAST_TCAM_BIST_DBG_DATAr_BLKACC,1,n,0,IP_MULTICAST_TCAM_BIST_DBG_DATAr_OFFSET,0,&(r._ip_multicast_tcam_bist_dbg_data),1)
#define WRITE_IP_MULTICAST_TCAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IP_MULTICAST_TCAM_BIST_DBG_DATAr_BLKACC,1,-1,0,IP_MULTICAST_TCAM_BIST_DBG_DATAr_OFFSET,0,&(r._ip_multicast_tcam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'IP_MULTICAST_TCAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  IP_MULTICAST_TCAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IP_MULTICAST_TCAM_BIST_STATUS.
 */
#define READ_IP_MULTICAST_TCAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IP_MULTICAST_TCAM_BIST_STATUSr_BLKACC,1,n,0,IP_MULTICAST_TCAM_BIST_STATUSr_OFFSET,0,(r._ip_multicast_tcam_bist_status),1)
#define WRITE_IP_MULTICAST_TCAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IP_MULTICAST_TCAM_BIST_STATUSr_BLKACC,1,n,0,IP_MULTICAST_TCAM_BIST_STATUSr_OFFSET,0,&(r._ip_multicast_tcam_bist_status),1)
#define WRITE_IP_MULTICAST_TCAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IP_MULTICAST_TCAM_BIST_STATUSr_BLKACC,1,-1,0,IP_MULTICAST_TCAM_BIST_STATUSr_OFFSET,0,&(r._ip_multicast_tcam_bist_status),1)

/*******************************************************************************
 * End of 'IP_MULTICAST_TCAM_BIST_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  IP_OPTION_CONTROL_PROFILE_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access IP_OPTION_CONTROL_PROFILE_TABLE.
 */
#define READ_IP_OPTION_CONTROL_PROFILE_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IP_OPTION_CONTROL_PROFILE_TABLEm_BLKACC)+1,IP_OPTION_CONTROL_PROFILE_TABLEm_OFFSET+i,(m._ip_option_control_profile_table),1)
#define WRITE_IP_OPTION_CONTROL_PROFILE_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IP_OPTION_CONTROL_PROFILE_TABLEm_BLKACC)+1,IP_OPTION_CONTROL_PROFILE_TABLEm_OFFSET+i,&(m._ip_option_control_profile_table),1)

/*******************************************************************************
 * End of 'IP_OPTION_CONTROL_PROFILE_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  IP_PROTO_MAP
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access IP_PROTO_MAP.
 */
#define READ_IP_PROTO_MAPm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IP_PROTO_MAPm_BLKACC,1,n,0,IP_PROTO_MAPm_OFFSET,i,(m._ip_proto_map),1)
#define WRITE_IP_PROTO_MAPm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IP_PROTO_MAPm_BLKACC,1,n,0,IP_PROTO_MAPm_OFFSET,i,&(m._ip_proto_map),1)
#define WRITE_IP_PROTO_MAPm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IP_PROTO_MAPm_BLKACC,1,-1,0,IP_PROTO_MAPm_OFFSET,i,&(m._ip_proto_map),1)

/*******************************************************************************
 * End of 'IP_PROTO_MAPm'
 */




/*******************************************************************************
 * MEMORY:  IP_TO_INT_CN_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access IP_TO_INT_CN_MAPPING.
 */
#define READ_IP_TO_INT_CN_MAPPINGm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(IP_TO_INT_CN_MAPPINGm_BLKACC)+1,IP_TO_INT_CN_MAPPINGm_OFFSET+i,(m._ip_to_int_cn_mapping),1)
#define WRITE_IP_TO_INT_CN_MAPPINGm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(IP_TO_INT_CN_MAPPINGm_BLKACC)+1,IP_TO_INT_CN_MAPPINGm_OFFSET+i,&(m._ip_to_int_cn_mapping),1)

/*******************************************************************************
 * End of 'IP_TO_INT_CN_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  IRSEL1_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IRSEL1_SER_CONTROL.
 */
#define READ_IRSEL1_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IRSEL1_SER_CONTROLr_BLKACC,1,IRSEL1_SER_CONTROLr_OFFSET,0,(r._irsel1_ser_control), 1)
#define WRITE_IRSEL1_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IRSEL1_SER_CONTROLr_BLKACC,1,IRSEL1_SER_CONTROLr_OFFSET,0,&(r._irsel1_ser_control), 1)

/*******************************************************************************
 * End of 'IRSEL1_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  IRSEL2_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IRSEL2_SER_CONTROL.
 */
#define READ_IRSEL2_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IRSEL2_SER_CONTROLr_BLKACC,1,IRSEL2_SER_CONTROLr_OFFSET,0,(r._irsel2_ser_control), 1)
#define WRITE_IRSEL2_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IRSEL2_SER_CONTROLr_BLKACC,1,IRSEL2_SER_CONTROLr_OFFSET,0,&(r._irsel2_ser_control), 1)

/*******************************************************************************
 * End of 'IRSEL2_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ISS_BANK_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_BANK_CONFIG.
 */
#define READ_ISS_BANK_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,ISS_BANK_CONFIGr_BLKACC,1,ISS_BANK_CONFIGr_OFFSET,0,(r._iss_bank_config), 1)
#define WRITE_ISS_BANK_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,ISS_BANK_CONFIGr_BLKACC,1,ISS_BANK_CONFIGr_OFFSET,0,&(r._iss_bank_config), 1)

/*******************************************************************************
 * End of 'ISS_BANK_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  ISS_LOG_TO_PHY_BANK_MAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_LOG_TO_PHY_BANK_MAP.
 */
#define READ_ISS_LOG_TO_PHY_BANK_MAPr(u,r) bcmbd_cmicd_reg_block_read(u,ISS_LOG_TO_PHY_BANK_MAPr_BLKACC,1,ISS_LOG_TO_PHY_BANK_MAPr_OFFSET,0,(r._iss_log_to_phy_bank_map), 1)
#define WRITE_ISS_LOG_TO_PHY_BANK_MAPr(u,r) bcmbd_cmicd_reg_block_write(u,ISS_LOG_TO_PHY_BANK_MAPr_BLKACC,1,ISS_LOG_TO_PHY_BANK_MAPr_OFFSET,0,&(r._iss_log_to_phy_bank_map), 1)

/*******************************************************************************
 * End of 'ISS_LOG_TO_PHY_BANK_MAPr'
 */




/*******************************************************************************
 * REGISTER:  ISS_LOG_TO_PHY_BANK_MAP_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_LOG_TO_PHY_BANK_MAP_2.
 */
#define READ_ISS_LOG_TO_PHY_BANK_MAP_2r(u,r) bcmbd_cmicd_reg_block_read(u,ISS_LOG_TO_PHY_BANK_MAP_2r_BLKACC,1,ISS_LOG_TO_PHY_BANK_MAP_2r_OFFSET,0,(r._iss_log_to_phy_bank_map_2), 1)
#define WRITE_ISS_LOG_TO_PHY_BANK_MAP_2r(u,r) bcmbd_cmicd_reg_block_write(u,ISS_LOG_TO_PHY_BANK_MAP_2r_BLKACC,1,ISS_LOG_TO_PHY_BANK_MAP_2r_OFFSET,0,&(r._iss_log_to_phy_bank_map_2), 1)

/*******************************************************************************
 * End of 'ISS_LOG_TO_PHY_BANK_MAP_2r'
 */




/*******************************************************************************
 * REGISTER:  ISS_LOG_TO_PHY_BANK_MAP_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_LOG_TO_PHY_BANK_MAP_3.
 */
#define READ_ISS_LOG_TO_PHY_BANK_MAP_3r(u,r) bcmbd_cmicd_reg_block_read(u,ISS_LOG_TO_PHY_BANK_MAP_3r_BLKACC,1,ISS_LOG_TO_PHY_BANK_MAP_3r_OFFSET,0,(r._iss_log_to_phy_bank_map_3), 1)
#define WRITE_ISS_LOG_TO_PHY_BANK_MAP_3r(u,r) bcmbd_cmicd_reg_block_write(u,ISS_LOG_TO_PHY_BANK_MAP_3r_BLKACC,1,ISS_LOG_TO_PHY_BANK_MAP_3r_OFFSET,0,&(r._iss_log_to_phy_bank_map_3), 1)

/*******************************************************************************
 * End of 'ISS_LOG_TO_PHY_BANK_MAP_3r'
 */




/*******************************************************************************
 * REGISTER:  ISS_MEMORY_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_MEMORY_CONTROL_0.
 */
#define READ_ISS_MEMORY_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ISS_MEMORY_CONTROL_0r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_0r_OFFSET,0,(r._iss_memory_control_0),1)
#define WRITE_ISS_MEMORY_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_0r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_0r_OFFSET,0,&(r._iss_memory_control_0),1)
#define WRITE_ISS_MEMORY_CONTROL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_0r_BLKACC,1,-1,0,ISS_MEMORY_CONTROL_0r_OFFSET,0,&(r._iss_memory_control_0),1)

/*******************************************************************************
 * End of 'ISS_MEMORY_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  ISS_MEMORY_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_MEMORY_CONTROL_1.
 */
#define READ_ISS_MEMORY_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ISS_MEMORY_CONTROL_1r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_1r_OFFSET,0,(r._iss_memory_control_1),1)
#define WRITE_ISS_MEMORY_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_1r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_1r_OFFSET,0,&(r._iss_memory_control_1),1)
#define WRITE_ISS_MEMORY_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_1r_BLKACC,1,-1,0,ISS_MEMORY_CONTROL_1r_OFFSET,0,&(r._iss_memory_control_1),1)

/*******************************************************************************
 * End of 'ISS_MEMORY_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  ISS_MEMORY_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_MEMORY_CONTROL_2.
 */
#define READ_ISS_MEMORY_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ISS_MEMORY_CONTROL_2r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_2r_OFFSET,0,(r._iss_memory_control_2),1)
#define WRITE_ISS_MEMORY_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_2r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_2r_OFFSET,0,&(r._iss_memory_control_2),1)
#define WRITE_ISS_MEMORY_CONTROL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_2r_BLKACC,1,-1,0,ISS_MEMORY_CONTROL_2r_OFFSET,0,&(r._iss_memory_control_2),1)

/*******************************************************************************
 * End of 'ISS_MEMORY_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  ISS_MEMORY_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_MEMORY_CONTROL_3.
 */
#define READ_ISS_MEMORY_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ISS_MEMORY_CONTROL_3r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_3r_OFFSET,0,(r._iss_memory_control_3),1)
#define WRITE_ISS_MEMORY_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_3r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_3r_OFFSET,0,&(r._iss_memory_control_3),1)
#define WRITE_ISS_MEMORY_CONTROL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_3r_BLKACC,1,-1,0,ISS_MEMORY_CONTROL_3r_OFFSET,0,&(r._iss_memory_control_3),1)

/*******************************************************************************
 * End of 'ISS_MEMORY_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  ISS_MEMORY_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_MEMORY_CONTROL_4.
 */
#define READ_ISS_MEMORY_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ISS_MEMORY_CONTROL_4r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_4r_OFFSET,0,(r._iss_memory_control_4),1)
#define WRITE_ISS_MEMORY_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_4r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_4r_OFFSET,0,&(r._iss_memory_control_4),1)
#define WRITE_ISS_MEMORY_CONTROL_4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_4r_BLKACC,1,-1,0,ISS_MEMORY_CONTROL_4r_OFFSET,0,&(r._iss_memory_control_4),1)

/*******************************************************************************
 * End of 'ISS_MEMORY_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  ISS_MEMORY_CONTROL_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_MEMORY_CONTROL_5.
 */
#define READ_ISS_MEMORY_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ISS_MEMORY_CONTROL_5r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_5r_OFFSET,0,(r._iss_memory_control_5),1)
#define WRITE_ISS_MEMORY_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_5r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_5r_OFFSET,0,&(r._iss_memory_control_5),1)
#define WRITE_ISS_MEMORY_CONTROL_5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_5r_BLKACC,1,-1,0,ISS_MEMORY_CONTROL_5r_OFFSET,0,&(r._iss_memory_control_5),1)

/*******************************************************************************
 * End of 'ISS_MEMORY_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  ISS_MEMORY_CONTROL_84
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISS_MEMORY_CONTROL_84.
 */
#define READ_ISS_MEMORY_CONTROL_84r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,ISS_MEMORY_CONTROL_84r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_84r_OFFSET,0,(r._iss_memory_control_84),1)
#define WRITE_ISS_MEMORY_CONTROL_84r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_84r_BLKACC,1,n,0,ISS_MEMORY_CONTROL_84r_OFFSET,0,&(r._iss_memory_control_84),1)
#define WRITE_ISS_MEMORY_CONTROL_84r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,ISS_MEMORY_CONTROL_84r_BLKACC,1,-1,0,ISS_MEMORY_CONTROL_84r_OFFSET,0,&(r._iss_memory_control_84),1)

/*******************************************************************************
 * End of 'ISS_MEMORY_CONTROL_84r'
 */




/*******************************************************************************
 * REGISTER:  ISW1_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISW1_SER_CONTROL.
 */
#define READ_ISW1_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,ISW1_SER_CONTROLr_BLKACC,1,ISW1_SER_CONTROLr_OFFSET,0,(r._isw1_ser_control), 1)
#define WRITE_ISW1_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,ISW1_SER_CONTROLr_BLKACC,1,ISW1_SER_CONTROLr_OFFSET,0,&(r._isw1_ser_control), 1)

/*******************************************************************************
 * End of 'ISW1_SER_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  ISW2_SER_CONTROL_0_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access ISW2_SER_CONTROL_0_64.
 */
#define READ_ISW2_SER_CONTROL_0_64r(u,r) bcmbd_cmicd_reg_block_read(u,ISW2_SER_CONTROL_0_64r_BLKACC,1,ISW2_SER_CONTROL_0_64r_OFFSET,0,(r._isw2_ser_control_0_64), 2)
#define WRITE_ISW2_SER_CONTROL_0_64r(u,r) bcmbd_cmicd_reg_block_write(u,ISW2_SER_CONTROL_0_64r_BLKACC,1,ISW2_SER_CONTROL_0_64r_OFFSET,0,&(r._isw2_ser_control_0_64), 2)

/*******************************************************************************
 * End of 'ISW2_SER_CONTROL_0_64r'
 */




/*******************************************************************************
 * REGISTER:  ISW2_SER_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISW2_SER_CONTROL_1.
 */
#define READ_ISW2_SER_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,ISW2_SER_CONTROL_1r_BLKACC,1,ISW2_SER_CONTROL_1r_OFFSET,0,(r._isw2_ser_control_1), 1)
#define WRITE_ISW2_SER_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,ISW2_SER_CONTROL_1r_BLKACC,1,ISW2_SER_CONTROL_1r_OFFSET,0,&(r._isw2_ser_control_1), 1)

/*******************************************************************************
 * End of 'ISW2_SER_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  ISW2_SER_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISW2_SER_CONTROL_2.
 */
#define READ_ISW2_SER_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,ISW2_SER_CONTROL_2r_BLKACC,1,ISW2_SER_CONTROL_2r_OFFSET,0,(r._isw2_ser_control_2), 1)
#define WRITE_ISW2_SER_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,ISW2_SER_CONTROL_2r_BLKACC,1,ISW2_SER_CONTROL_2r_OFFSET,0,&(r._isw2_ser_control_2), 1)

/*******************************************************************************
 * End of 'ISW2_SER_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  ISW3_SER_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISW3_SER_CONTROL_1.
 */
#define READ_ISW3_SER_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,ISW3_SER_CONTROL_1r_BLKACC,1,ISW3_SER_CONTROL_1r_OFFSET,0,(r._isw3_ser_control_1), 1)
#define WRITE_ISW3_SER_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,ISW3_SER_CONTROL_1r_BLKACC,1,ISW3_SER_CONTROL_1r_OFFSET,0,&(r._isw3_ser_control_1), 1)

/*******************************************************************************
 * End of 'ISW3_SER_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  ISW3_SER_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access ISW3_SER_CONTROL_2.
 */
#define READ_ISW3_SER_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,ISW3_SER_CONTROL_2r_BLKACC,1,ISW3_SER_CONTROL_2r_OFFSET,0,(r._isw3_ser_control_2), 1)
#define WRITE_ISW3_SER_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,ISW3_SER_CONTROL_2r_BLKACC,1,ISW3_SER_CONTROL_2r_OFFSET,0,&(r._isw3_ser_control_2), 1)

/*******************************************************************************
 * End of 'ISW3_SER_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  IS_CPU_LB_OPP_CFG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_CPU_LB_OPP_CFG.
 */
#define READ_IS_CPU_LB_OPP_CFGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IS_CPU_LB_OPP_CFGr_BLKACC,1,n,0,IS_CPU_LB_OPP_CFGr_OFFSET,0,(r._is_cpu_lb_opp_cfg),1)
#define WRITE_IS_CPU_LB_OPP_CFGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IS_CPU_LB_OPP_CFGr_BLKACC,1,n,0,IS_CPU_LB_OPP_CFGr_OFFSET,0,&(r._is_cpu_lb_opp_cfg),1)
#define WRITE_IS_CPU_LB_OPP_CFGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IS_CPU_LB_OPP_CFGr_BLKACC,1,-1,0,IS_CPU_LB_OPP_CFGr_OFFSET,0,&(r._is_cpu_lb_opp_cfg),1)

/*******************************************************************************
 * End of 'IS_CPU_LB_OPP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  IS_OPP_SCHED_CFG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OPP_SCHED_CFG.
 */
#define READ_IS_OPP_SCHED_CFGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OPP_SCHED_CFGr_BLKACC,1,n,0,IS_OPP_SCHED_CFGr_OFFSET,0,(r._is_opp_sched_cfg),1)
#define WRITE_IS_OPP_SCHED_CFGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OPP_SCHED_CFGr_BLKACC,1,n,0,IS_OPP_SCHED_CFGr_OFFSET,0,&(r._is_opp_sched_cfg),1)
#define WRITE_IS_OPP_SCHED_CFGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OPP_SCHED_CFGr_BLKACC,1,-1,0,IS_OPP_SCHED_CFGr_OFFSET,0,&(r._is_opp_sched_cfg),1)

/*******************************************************************************
 * End of 'IS_OPP_SCHED_CFGr'
 */




/*******************************************************************************
 * REGISTER:  IS_OVR_SUB_GRP0_TBL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OVR_SUB_GRP0_TBL.
 */
#define READ_IS_OVR_SUB_GRP0_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OVR_SUB_GRP0_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP0_TBLr_OFFSET,i,(r._is_ovr_sub_grp0_tbl),1)
#define WRITE_IS_OVR_SUB_GRP0_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP0_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP0_TBLr_OFFSET,i,&(r._is_ovr_sub_grp0_tbl),1)
#define WRITE_IS_OVR_SUB_GRP0_TBLr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP0_TBLr_BLKACC,1,-1,0,IS_OVR_SUB_GRP0_TBLr_OFFSET,i,&(r._is_ovr_sub_grp0_tbl),1)

/*******************************************************************************
 * End of 'IS_OVR_SUB_GRP0_TBLr'
 */




/*******************************************************************************
 * REGISTER:  IS_OVR_SUB_GRP1_TBL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OVR_SUB_GRP1_TBL.
 */
#define READ_IS_OVR_SUB_GRP1_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OVR_SUB_GRP1_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP1_TBLr_OFFSET,i,(r._is_ovr_sub_grp1_tbl),1)
#define WRITE_IS_OVR_SUB_GRP1_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP1_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP1_TBLr_OFFSET,i,&(r._is_ovr_sub_grp1_tbl),1)
#define WRITE_IS_OVR_SUB_GRP1_TBLr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP1_TBLr_BLKACC,1,-1,0,IS_OVR_SUB_GRP1_TBLr_OFFSET,i,&(r._is_ovr_sub_grp1_tbl),1)

/*******************************************************************************
 * End of 'IS_OVR_SUB_GRP1_TBLr'
 */




/*******************************************************************************
 * REGISTER:  IS_OVR_SUB_GRP2_TBL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OVR_SUB_GRP2_TBL.
 */
#define READ_IS_OVR_SUB_GRP2_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OVR_SUB_GRP2_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP2_TBLr_OFFSET,i,(r._is_ovr_sub_grp2_tbl),1)
#define WRITE_IS_OVR_SUB_GRP2_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP2_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP2_TBLr_OFFSET,i,&(r._is_ovr_sub_grp2_tbl),1)
#define WRITE_IS_OVR_SUB_GRP2_TBLr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP2_TBLr_BLKACC,1,-1,0,IS_OVR_SUB_GRP2_TBLr_OFFSET,i,&(r._is_ovr_sub_grp2_tbl),1)

/*******************************************************************************
 * End of 'IS_OVR_SUB_GRP2_TBLr'
 */




/*******************************************************************************
 * REGISTER:  IS_OVR_SUB_GRP3_TBL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OVR_SUB_GRP3_TBL.
 */
#define READ_IS_OVR_SUB_GRP3_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OVR_SUB_GRP3_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP3_TBLr_OFFSET,i,(r._is_ovr_sub_grp3_tbl),1)
#define WRITE_IS_OVR_SUB_GRP3_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP3_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP3_TBLr_OFFSET,i,&(r._is_ovr_sub_grp3_tbl),1)
#define WRITE_IS_OVR_SUB_GRP3_TBLr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP3_TBLr_BLKACC,1,-1,0,IS_OVR_SUB_GRP3_TBLr_OFFSET,i,&(r._is_ovr_sub_grp3_tbl),1)

/*******************************************************************************
 * End of 'IS_OVR_SUB_GRP3_TBLr'
 */




/*******************************************************************************
 * REGISTER:  IS_OVR_SUB_GRP4_TBL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OVR_SUB_GRP4_TBL.
 */
#define READ_IS_OVR_SUB_GRP4_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OVR_SUB_GRP4_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP4_TBLr_OFFSET,i,(r._is_ovr_sub_grp4_tbl),1)
#define WRITE_IS_OVR_SUB_GRP4_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP4_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP4_TBLr_OFFSET,i,&(r._is_ovr_sub_grp4_tbl),1)
#define WRITE_IS_OVR_SUB_GRP4_TBLr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP4_TBLr_BLKACC,1,-1,0,IS_OVR_SUB_GRP4_TBLr_OFFSET,i,&(r._is_ovr_sub_grp4_tbl),1)

/*******************************************************************************
 * End of 'IS_OVR_SUB_GRP4_TBLr'
 */




/*******************************************************************************
 * REGISTER:  IS_OVR_SUB_GRP5_TBL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OVR_SUB_GRP5_TBL.
 */
#define READ_IS_OVR_SUB_GRP5_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OVR_SUB_GRP5_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP5_TBLr_OFFSET,i,(r._is_ovr_sub_grp5_tbl),1)
#define WRITE_IS_OVR_SUB_GRP5_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP5_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP5_TBLr_OFFSET,i,&(r._is_ovr_sub_grp5_tbl),1)
#define WRITE_IS_OVR_SUB_GRP5_TBLr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP5_TBLr_BLKACC,1,-1,0,IS_OVR_SUB_GRP5_TBLr_OFFSET,i,&(r._is_ovr_sub_grp5_tbl),1)

/*******************************************************************************
 * End of 'IS_OVR_SUB_GRP5_TBLr'
 */




/*******************************************************************************
 * REGISTER:  IS_OVR_SUB_GRP6_TBL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OVR_SUB_GRP6_TBL.
 */
#define READ_IS_OVR_SUB_GRP6_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OVR_SUB_GRP6_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP6_TBLr_OFFSET,i,(r._is_ovr_sub_grp6_tbl),1)
#define WRITE_IS_OVR_SUB_GRP6_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP6_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP6_TBLr_OFFSET,i,&(r._is_ovr_sub_grp6_tbl),1)
#define WRITE_IS_OVR_SUB_GRP6_TBLr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP6_TBLr_BLKACC,1,-1,0,IS_OVR_SUB_GRP6_TBLr_OFFSET,i,&(r._is_ovr_sub_grp6_tbl),1)

/*******************************************************************************
 * End of 'IS_OVR_SUB_GRP6_TBLr'
 */




/*******************************************************************************
 * REGISTER:  IS_OVR_SUB_GRP7_TBL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OVR_SUB_GRP7_TBL.
 */
#define READ_IS_OVR_SUB_GRP7_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OVR_SUB_GRP7_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP7_TBLr_OFFSET,i,(r._is_ovr_sub_grp7_tbl),1)
#define WRITE_IS_OVR_SUB_GRP7_TBLr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP7_TBLr_BLKACC,1,n,0,IS_OVR_SUB_GRP7_TBLr_OFFSET,i,&(r._is_ovr_sub_grp7_tbl),1)
#define WRITE_IS_OVR_SUB_GRP7_TBLr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP7_TBLr_BLKACC,1,-1,0,IS_OVR_SUB_GRP7_TBLr_OFFSET,i,&(r._is_ovr_sub_grp7_tbl),1)

/*******************************************************************************
 * End of 'IS_OVR_SUB_GRP7_TBLr'
 */




/*******************************************************************************
 * REGISTER:  IS_OVR_SUB_GRP_CFG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_OVR_SUB_GRP_CFG.
 */
#define READ_IS_OVR_SUB_GRP_CFGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_OVR_SUB_GRP_CFGr_BLKACC,1,n,0,IS_OVR_SUB_GRP_CFGr_OFFSET,i,(r._is_ovr_sub_grp_cfg),1)
#define WRITE_IS_OVR_SUB_GRP_CFGr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP_CFGr_BLKACC,1,n,0,IS_OVR_SUB_GRP_CFGr_OFFSET,i,&(r._is_ovr_sub_grp_cfg),1)
#define WRITE_IS_OVR_SUB_GRP_CFGr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_OVR_SUB_GRP_CFGr_BLKACC,1,-1,0,IS_OVR_SUB_GRP_CFGr_OFFSET,i,&(r._is_ovr_sub_grp_cfg),1)

/*******************************************************************************
 * End of 'IS_OVR_SUB_GRP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  IS_PBLK0_CALENDAR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PBLK0_CALENDAR.
 */
#define READ_IS_PBLK0_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_PBLK0_CALENDARr_BLKACC,1,n,0,IS_PBLK0_CALENDARr_OFFSET,i,(r._is_pblk0_calendar),1)
#define WRITE_IS_PBLK0_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK0_CALENDARr_BLKACC,1,n,0,IS_PBLK0_CALENDARr_OFFSET,i,&(r._is_pblk0_calendar),1)
#define WRITE_IS_PBLK0_CALENDARr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK0_CALENDARr_BLKACC,1,-1,0,IS_PBLK0_CALENDARr_OFFSET,i,&(r._is_pblk0_calendar),1)

/*******************************************************************************
 * End of 'IS_PBLK0_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  IS_PBLK1_CALENDAR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PBLK1_CALENDAR.
 */
#define READ_IS_PBLK1_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_PBLK1_CALENDARr_BLKACC,1,n,0,IS_PBLK1_CALENDARr_OFFSET,i,(r._is_pblk1_calendar),1)
#define WRITE_IS_PBLK1_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK1_CALENDARr_BLKACC,1,n,0,IS_PBLK1_CALENDARr_OFFSET,i,&(r._is_pblk1_calendar),1)
#define WRITE_IS_PBLK1_CALENDARr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK1_CALENDARr_BLKACC,1,-1,0,IS_PBLK1_CALENDARr_OFFSET,i,&(r._is_pblk1_calendar),1)

/*******************************************************************************
 * End of 'IS_PBLK1_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  IS_PBLK2_CALENDAR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PBLK2_CALENDAR.
 */
#define READ_IS_PBLK2_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_PBLK2_CALENDARr_BLKACC,1,n,0,IS_PBLK2_CALENDARr_OFFSET,i,(r._is_pblk2_calendar),1)
#define WRITE_IS_PBLK2_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK2_CALENDARr_BLKACC,1,n,0,IS_PBLK2_CALENDARr_OFFSET,i,&(r._is_pblk2_calendar),1)
#define WRITE_IS_PBLK2_CALENDARr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK2_CALENDARr_BLKACC,1,-1,0,IS_PBLK2_CALENDARr_OFFSET,i,&(r._is_pblk2_calendar),1)

/*******************************************************************************
 * End of 'IS_PBLK2_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  IS_PBLK3_CALENDAR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PBLK3_CALENDAR.
 */
#define READ_IS_PBLK3_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_PBLK3_CALENDARr_BLKACC,1,n,0,IS_PBLK3_CALENDARr_OFFSET,i,(r._is_pblk3_calendar),1)
#define WRITE_IS_PBLK3_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK3_CALENDARr_BLKACC,1,n,0,IS_PBLK3_CALENDARr_OFFSET,i,&(r._is_pblk3_calendar),1)
#define WRITE_IS_PBLK3_CALENDARr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK3_CALENDARr_BLKACC,1,-1,0,IS_PBLK3_CALENDARr_OFFSET,i,&(r._is_pblk3_calendar),1)

/*******************************************************************************
 * End of 'IS_PBLK3_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  IS_PBLK4_CALENDAR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PBLK4_CALENDAR.
 */
#define READ_IS_PBLK4_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_PBLK4_CALENDARr_BLKACC,1,n,0,IS_PBLK4_CALENDARr_OFFSET,i,(r._is_pblk4_calendar),1)
#define WRITE_IS_PBLK4_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK4_CALENDARr_BLKACC,1,n,0,IS_PBLK4_CALENDARr_OFFSET,i,&(r._is_pblk4_calendar),1)
#define WRITE_IS_PBLK4_CALENDARr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK4_CALENDARr_BLKACC,1,-1,0,IS_PBLK4_CALENDARr_OFFSET,i,&(r._is_pblk4_calendar),1)

/*******************************************************************************
 * End of 'IS_PBLK4_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  IS_PBLK5_CALENDAR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PBLK5_CALENDAR.
 */
#define READ_IS_PBLK5_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_PBLK5_CALENDARr_BLKACC,1,n,0,IS_PBLK5_CALENDARr_OFFSET,i,(r._is_pblk5_calendar),1)
#define WRITE_IS_PBLK5_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK5_CALENDARr_BLKACC,1,n,0,IS_PBLK5_CALENDARr_OFFSET,i,&(r._is_pblk5_calendar),1)
#define WRITE_IS_PBLK5_CALENDARr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK5_CALENDARr_BLKACC,1,-1,0,IS_PBLK5_CALENDARr_OFFSET,i,&(r._is_pblk5_calendar),1)

/*******************************************************************************
 * End of 'IS_PBLK5_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  IS_PBLK6_CALENDAR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PBLK6_CALENDAR.
 */
#define READ_IS_PBLK6_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_PBLK6_CALENDARr_BLKACC,1,n,0,IS_PBLK6_CALENDARr_OFFSET,i,(r._is_pblk6_calendar),1)
#define WRITE_IS_PBLK6_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK6_CALENDARr_BLKACC,1,n,0,IS_PBLK6_CALENDARr_OFFSET,i,&(r._is_pblk6_calendar),1)
#define WRITE_IS_PBLK6_CALENDARr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK6_CALENDARr_BLKACC,1,-1,0,IS_PBLK6_CALENDARr_OFFSET,i,&(r._is_pblk6_calendar),1)

/*******************************************************************************
 * End of 'IS_PBLK6_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  IS_PBLK7_CALENDAR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_PBLK7_CALENDAR.
 */
#define READ_IS_PBLK7_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,IS_PBLK7_CALENDARr_BLKACC,1,n,0,IS_PBLK7_CALENDARr_OFFSET,i,(r._is_pblk7_calendar),1)
#define WRITE_IS_PBLK7_CALENDARr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK7_CALENDARr_BLKACC,1,n,0,IS_PBLK7_CALENDARr_OFFSET,i,&(r._is_pblk7_calendar),1)
#define WRITE_IS_PBLK7_CALENDARr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,IS_PBLK7_CALENDARr_BLKACC,1,-1,0,IS_PBLK7_CALENDARr_OFFSET,i,&(r._is_pblk7_calendar),1)

/*******************************************************************************
 * End of 'IS_PBLK7_CALENDARr'
 */




/*******************************************************************************
 * MEMORY:  IS_TDM_CALENDAR0
 * BLOCKS:   IPIPE
 * SIZE:     27
 */
/*
 * These macros can be used to access IS_TDM_CALENDAR0.
 */
#define READ_IS_TDM_CALENDAR0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IS_TDM_CALENDAR0m_BLKACC,1,n,0,IS_TDM_CALENDAR0m_OFFSET,i,(m._is_tdm_calendar0),1)
#define WRITE_IS_TDM_CALENDAR0m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IS_TDM_CALENDAR0m_BLKACC,1,n,0,IS_TDM_CALENDAR0m_OFFSET,i,&(m._is_tdm_calendar0),1)
#define WRITE_IS_TDM_CALENDAR0m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IS_TDM_CALENDAR0m_BLKACC,1,-1,0,IS_TDM_CALENDAR0m_OFFSET,i,&(m._is_tdm_calendar0),1)

/*******************************************************************************
 * End of 'IS_TDM_CALENDAR0m'
 */




/*******************************************************************************
 * MEMORY:  IS_TDM_CALENDAR1
 * BLOCKS:   IPIPE
 * SIZE:     27
 */
/*
 * These macros can be used to access IS_TDM_CALENDAR1.
 */
#define READ_IS_TDM_CALENDAR1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,IS_TDM_CALENDAR1m_BLKACC,1,n,0,IS_TDM_CALENDAR1m_OFFSET,i,(m._is_tdm_calendar1),1)
#define WRITE_IS_TDM_CALENDAR1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,IS_TDM_CALENDAR1m_BLKACC,1,n,0,IS_TDM_CALENDAR1m_OFFSET,i,&(m._is_tdm_calendar1),1)
#define WRITE_IS_TDM_CALENDAR1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,IS_TDM_CALENDAR1m_BLKACC,1,-1,0,IS_TDM_CALENDAR1m_OFFSET,i,&(m._is_tdm_calendar1),1)

/*******************************************************************************
 * End of 'IS_TDM_CALENDAR1m'
 */




/*******************************************************************************
 * REGISTER:  IS_TDM_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_TDM_CONFIG.
 */
#define READ_IS_TDM_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IS_TDM_CONFIGr_BLKACC,1,n,0,IS_TDM_CONFIGr_OFFSET,0,(r._is_tdm_config),1)
#define WRITE_IS_TDM_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IS_TDM_CONFIGr_BLKACC,1,n,0,IS_TDM_CONFIGr_OFFSET,0,&(r._is_tdm_config),1)
#define WRITE_IS_TDM_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IS_TDM_CONFIGr_BLKACC,1,-1,0,IS_TDM_CONFIGr_OFFSET,0,&(r._is_tdm_config),1)

/*******************************************************************************
 * End of 'IS_TDM_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  IS_TDM_DFT_REG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_TDM_DFT_REG.
 */
#define READ_IS_TDM_DFT_REGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IS_TDM_DFT_REGr_BLKACC,1,n,0,IS_TDM_DFT_REGr_OFFSET,0,(r._is_tdm_dft_reg),1)
#define WRITE_IS_TDM_DFT_REGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IS_TDM_DFT_REGr_BLKACC,1,n,0,IS_TDM_DFT_REGr_OFFSET,0,&(r._is_tdm_dft_reg),1)
#define WRITE_IS_TDM_DFT_REGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IS_TDM_DFT_REGr_BLKACC,1,-1,0,IS_TDM_DFT_REGr_OFFSET,0,&(r._is_tdm_dft_reg),1)

/*******************************************************************************
 * End of 'IS_TDM_DFT_REGr'
 */




/*******************************************************************************
 * REGISTER:  IS_TDM_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_TDM_EN_COR_ERR_RPT.
 */
#define READ_IS_TDM_EN_COR_ERR_RPTr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IS_TDM_EN_COR_ERR_RPTr_BLKACC,1,n,0,IS_TDM_EN_COR_ERR_RPTr_OFFSET,0,(r._is_tdm_en_cor_err_rpt),1)
#define WRITE_IS_TDM_EN_COR_ERR_RPTr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IS_TDM_EN_COR_ERR_RPTr_BLKACC,1,n,0,IS_TDM_EN_COR_ERR_RPTr_OFFSET,0,&(r._is_tdm_en_cor_err_rpt),1)
#define WRITE_IS_TDM_EN_COR_ERR_RPTr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IS_TDM_EN_COR_ERR_RPTr_BLKACC,1,-1,0,IS_TDM_EN_COR_ERR_RPTr_OFFSET,0,&(r._is_tdm_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'IS_TDM_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  IS_TDM_HSP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IS_TDM_HSP.
 */
#define READ_IS_TDM_HSPr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IS_TDM_HSPr_BLKACC,1,n,0,IS_TDM_HSPr_OFFSET,0,(r._is_tdm_hsp),1)
#define WRITE_IS_TDM_HSPr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IS_TDM_HSPr_BLKACC,1,n,0,IS_TDM_HSPr_OFFSET,0,&(r._is_tdm_hsp),1)
#define WRITE_IS_TDM_HSPr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IS_TDM_HSPr_BLKACC,1,-1,0,IS_TDM_HSPr_OFFSET,0,&(r._is_tdm_hsp),1)

/*******************************************************************************
 * End of 'IS_TDM_HSPr'
 */




/*******************************************************************************
 * REGISTER:  IUNHGI_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IUNHGI_64.
 */
#define READ_IUNHGI_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,IUNHGI_64r_BLKACC,p,IUNHGI_64r_OFFSET,0,(r._iunhgi_64), 2)
#define WRITE_IUNHGI_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,IUNHGI_64r_BLKACC,p,IUNHGI_64r_OFFSET,0,&(r._iunhgi_64), 2)

/*******************************************************************************
 * End of 'IUNHGI_64r'
 */




/*******************************************************************************
 * REGISTER:  IUNKOPC_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access IUNKOPC_64.
 */
#define READ_IUNKOPC_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,IUNKOPC_64r_BLKACC,p,IUNKOPC_64r_OFFSET,0,(r._iunkopc_64), 2)
#define WRITE_IUNKOPC_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,IUNKOPC_64r_BLKACC,p,IUNKOPC_64r_OFFSET,0,&(r._iunkopc_64), 2)

/*******************************************************************************
 * End of 'IUNKOPC_64r'
 */




/*******************************************************************************
 * REGISTER:  IVP_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IVP_EN_COR_ERR_RPT.
 */
#define READ_IVP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_read(u,IVP_EN_COR_ERR_RPTr_BLKACC,1,IVP_EN_COR_ERR_RPTr_OFFSET,0,(r._ivp_en_cor_err_rpt), 1)
#define WRITE_IVP_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_write(u,IVP_EN_COR_ERR_RPTr_BLKACC,1,IVP_EN_COR_ERR_RPTr_OFFSET,0,&(r._ivp_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'IVP_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  IVXLT_EN_COR_ERR_RPT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IVXLT_EN_COR_ERR_RPT.
 */
#define READ_IVXLT_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_read(u,IVXLT_EN_COR_ERR_RPTr_BLKACC,1,IVXLT_EN_COR_ERR_RPTr_OFFSET,0,(r._ivxlt_en_cor_err_rpt), 1)
#define WRITE_IVXLT_EN_COR_ERR_RPTr(u,r) bcmbd_cmicd_reg_block_write(u,IVXLT_EN_COR_ERR_RPTr_BLKACC,1,IVXLT_EN_COR_ERR_RPTr_OFFSET,0,&(r._ivxlt_en_cor_err_rpt), 1)

/*******************************************************************************
 * End of 'IVXLT_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  IVXLT_PT_HWY_RAM_CONTROL_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IVXLT_PT_HWY_RAM_CONTROL_DBGCTRL.
 */
#define READ_IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr_BLKACC,1,n,0,IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr_OFFSET,0,(r._ivxlt_pt_hwy_ram_control_dbgctrl),1)
#define WRITE_IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr_BLKACC,1,n,0,IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr_OFFSET,0,&(r._ivxlt_pt_hwy_ram_control_dbgctrl),1)
#define WRITE_IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr_BLKACC,1,-1,0,IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr_OFFSET,0,&(r._ivxlt_pt_hwy_ram_control_dbgctrl),1)

/*******************************************************************************
 * End of 'IVXLT_PT_HWY_RAM_CONTROL_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  IVXLT_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access IVXLT_SER_CONTROL.
 */
#define READ_IVXLT_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,IVXLT_SER_CONTROLr_BLKACC,1,IVXLT_SER_CONTROLr_OFFSET,0,(r._ivxlt_ser_control), 1)
#define WRITE_IVXLT_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,IVXLT_SER_CONTROLr_BLKACC,1,IVXLT_SER_CONTROLr_OFFSET,0,&(r._ivxlt_ser_control), 1)

/*******************************************************************************
 * End of 'IVXLT_SER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  KNOWN_MCAST_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access KNOWN_MCAST_BLOCK_MASK.
 */
#define READ_KNOWN_MCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(KNOWN_MCAST_BLOCK_MASKm_BLKACC)+1,KNOWN_MCAST_BLOCK_MASKm_OFFSET+i,(m._known_mcast_block_mask),5)
#define WRITE_KNOWN_MCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(KNOWN_MCAST_BLOCK_MASKm_BLKACC)+1,KNOWN_MCAST_BLOCK_MASKm_OFFSET+i,&(m._known_mcast_block_mask),5)

/*******************************************************************************
 * End of 'KNOWN_MCAST_BLOCK_MASKm'
 */




/*******************************************************************************
 * REGISTER:  L2GRE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2GRE_CONTROL.
 */
#define READ_L2GRE_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L2GRE_CONTROLr_BLKACC,1,L2GRE_CONTROLr_OFFSET,0,(r._l2gre_control), 1)
#define WRITE_L2GRE_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L2GRE_CONTROLr_BLKACC,1,L2GRE_CONTROLr_OFFSET,0,&(r._l2gre_control), 1)

/*******************************************************************************
 * End of 'L2GRE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  L2GRE_DEFAULT_NETWORK_SVP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2GRE_DEFAULT_NETWORK_SVP.
 */
#define READ_L2GRE_DEFAULT_NETWORK_SVPr(u,r) bcmbd_cmicd_reg_block_read(u,L2GRE_DEFAULT_NETWORK_SVPr_BLKACC,1,L2GRE_DEFAULT_NETWORK_SVPr_OFFSET,0,(r._l2gre_default_network_svp), 1)
#define WRITE_L2GRE_DEFAULT_NETWORK_SVPr(u,r) bcmbd_cmicd_reg_block_write(u,L2GRE_DEFAULT_NETWORK_SVPr_BLKACC,1,L2GRE_DEFAULT_NETWORK_SVPr_OFFSET,0,&(r._l2gre_default_network_svp), 1)

/*******************************************************************************
 * End of 'L2GRE_DEFAULT_NETWORK_SVPr'
 */




/*******************************************************************************
 * MEMORY:  L2MC
 * BLOCKS:   IPIPE
 * SIZE:     162
 */
/*
 * These macros can be used to access L2MC.
 */
#define READ_L2MCm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2MCm_BLKACC)+1,L2MCm_OFFSET+i,(m._l2mc),6)
#define WRITE_L2MCm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2MCm_BLKACC)+1,L2MCm_OFFSET+i,&(m._l2mc),6)

/*******************************************************************************
 * End of 'L2MCm'
 */




/*******************************************************************************
 * MEMORY:  L2X
 * BLOCKS:   IPIPE
 * SIZE:     108
 */
/*
 * These macros can be used to access L2X.
 */
#define READ_L2Xm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2Xm_BLKACC)+1,L2Xm_OFFSET+i,(m._l2x),4)
#define WRITE_L2Xm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2Xm_BLKACC)+1,L2Xm_OFFSET+i,&(m._l2x),4)

/*******************************************************************************
 * End of 'L2Xm'
 */




/*******************************************************************************
 * MEMORY:  L2_BULK
 * BLOCKS:   IPIPE
 * SIZE:     108
 */
/*
 * These macros can be used to access L2_BULK.
 */
#define READ_L2_BULKm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_BULKm_BLKACC)+1,L2_BULKm_OFFSET+i,(m._l2_bulk),4)
#define WRITE_L2_BULKm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_BULKm_BLKACC)+1,L2_BULKm_OFFSET+i,&(m._l2_bulk),4)

/*******************************************************************************
 * End of 'L2_BULKm'
 */




/*******************************************************************************
 * REGISTER:  L2_BULK_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_BULK_CONTROL.
 */
#define READ_L2_BULK_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L2_BULK_CONTROLr_BLKACC,1,L2_BULK_CONTROLr_OFFSET,0,(r._l2_bulk_control), 1)
#define WRITE_L2_BULK_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L2_BULK_CONTROLr_BLKACC,1,L2_BULK_CONTROLr_OFFSET,0,&(r._l2_bulk_control), 1)

/*******************************************************************************
 * End of 'L2_BULK_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  L2_BULK_ECC_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_BULK_ECC_STATUS.
 */
#define READ_L2_BULK_ECC_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,L2_BULK_ECC_STATUSr_BLKACC,1,L2_BULK_ECC_STATUSr_OFFSET,0,(r._l2_bulk_ecc_status), 1)
#define WRITE_L2_BULK_ECC_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,L2_BULK_ECC_STATUSr_BLKACC,1,L2_BULK_ECC_STATUSr_OFFSET,0,&(r._l2_bulk_ecc_status), 1)

/*******************************************************************************
 * End of 'L2_BULK_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  L2_ENTRY_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_ENTRY_CONTROL_0.
 */
#define READ_L2_ENTRY_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L2_ENTRY_CONTROL_0r_BLKACC,1,n,0,L2_ENTRY_CONTROL_0r_OFFSET,0,(r._l2_entry_control_0),1)
#define WRITE_L2_ENTRY_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L2_ENTRY_CONTROL_0r_BLKACC,1,n,0,L2_ENTRY_CONTROL_0r_OFFSET,0,&(r._l2_entry_control_0),1)
#define WRITE_L2_ENTRY_CONTROL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L2_ENTRY_CONTROL_0r_BLKACC,1,-1,0,L2_ENTRY_CONTROL_0r_OFFSET,0,&(r._l2_entry_control_0),1)

/*******************************************************************************
 * End of 'L2_ENTRY_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  L2_ENTRY_CONTROL_6
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_ENTRY_CONTROL_6.
 */
#define READ_L2_ENTRY_CONTROL_6r(u,r) bcmbd_cmicd_reg_block_read(u,L2_ENTRY_CONTROL_6r_BLKACC,1,L2_ENTRY_CONTROL_6r_OFFSET,0,(r._l2_entry_control_6), 1)
#define WRITE_L2_ENTRY_CONTROL_6r(u,r) bcmbd_cmicd_reg_block_write(u,L2_ENTRY_CONTROL_6r_BLKACC,1,L2_ENTRY_CONTROL_6r_OFFSET,0,&(r._l2_entry_control_6), 1)

/*******************************************************************************
 * End of 'L2_ENTRY_CONTROL_6r'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_ISS_LP
 * BLOCKS:   IPIPE
 * SIZE:     44
 */
/*
 * These macros can be used to access L2_ENTRY_ISS_LP.
 */
#define READ_L2_ENTRY_ISS_LPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_ISS_LPm_BLKACC)+1,L2_ENTRY_ISS_LPm_OFFSET+i,(m._l2_entry_iss_lp),2)
#define WRITE_L2_ENTRY_ISS_LPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_ISS_LPm_BLKACC)+1,L2_ENTRY_ISS_LPm_OFFSET+i,&(m._l2_entry_iss_lp),2)

/*******************************************************************************
 * End of 'L2_ENTRY_ISS_LPm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_LP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_ENTRY_LP.
 */
#define READ_L2_ENTRY_LPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_LPm_BLKACC)+1,L2_ENTRY_LPm_OFFSET+i,(m._l2_entry_lp),1)
#define WRITE_L2_ENTRY_LPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_LPm_BLKACC)+1,L2_ENTRY_LPm_OFFSET+i,&(m._l2_entry_lp),1)

/*******************************************************************************
 * End of 'L2_ENTRY_LPm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_ONLY_ECC
 * BLOCKS:   IPIPE
 * SIZE:     113
 */
/*
 * These macros can be used to access L2_ENTRY_ONLY_ECC.
 */
#define READ_L2_ENTRY_ONLY_ECCm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_ONLY_ECCm_BLKACC)+1,L2_ENTRY_ONLY_ECCm_OFFSET+i,(m._l2_entry_only_ecc),4)
#define WRITE_L2_ENTRY_ONLY_ECCm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_ONLY_ECCm_BLKACC)+1,L2_ENTRY_ONLY_ECCm_OFFSET+i,&(m._l2_entry_only_ecc),4)

/*******************************************************************************
 * End of 'L2_ENTRY_ONLY_ECCm'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_ONLY_TILE
 * BLOCKS:   IPIPE
 * SIZE:     105
 */
/*
 * These macros can be used to access L2_ENTRY_ONLY_TILE.
 */
#define READ_L2_ENTRY_ONLY_TILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_ONLY_TILEm_BLKACC)+1,L2_ENTRY_ONLY_TILEm_OFFSET+i,(m._l2_entry_only_tile),4)
#define WRITE_L2_ENTRY_ONLY_TILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_ONLY_TILEm_BLKACC)+1,L2_ENTRY_ONLY_TILEm_OFFSET+i,&(m._l2_entry_only_tile),4)

/*******************************************************************************
 * End of 'L2_ENTRY_ONLY_TILEm'
 */




/*******************************************************************************
 * REGISTER:  L2_ENTRY_PARITY_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_ENTRY_PARITY_CONTROL.
 */
#define READ_L2_ENTRY_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L2_ENTRY_PARITY_CONTROLr_BLKACC,1,L2_ENTRY_PARITY_CONTROLr_OFFSET,0,(r._l2_entry_parity_control), 1)
#define WRITE_L2_ENTRY_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L2_ENTRY_PARITY_CONTROLr_BLKACC,1,L2_ENTRY_PARITY_CONTROLr_OFFSET,0,&(r._l2_entry_parity_control), 1)

/*******************************************************************************
 * End of 'L2_ENTRY_PARITY_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  L2_ENTRY_TILE
 * BLOCKS:   IPIPE
 * SIZE:     108
 */
/*
 * These macros can be used to access L2_ENTRY_TILE.
 */
#define READ_L2_ENTRY_TILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_TILEm_BLKACC)+1,L2_ENTRY_TILEm_OFFSET+i,(m._l2_entry_tile),4)
#define WRITE_L2_ENTRY_TILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_ENTRY_TILEm_BLKACC)+1,L2_ENTRY_TILEm_OFFSET+i,&(m._l2_entry_tile),4)

/*******************************************************************************
 * End of 'L2_ENTRY_TILEm'
 */




/*******************************************************************************
 * MEMORY:  L2_HITDA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access L2_HITDA_ONLY.
 */
#define READ_L2_HITDA_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_HITDA_ONLYm_BLKACC)+1,L2_HITDA_ONLYm_OFFSET+i,(m._l2_hitda_only),1)
#define WRITE_L2_HITDA_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_HITDA_ONLYm_BLKACC)+1,L2_HITDA_ONLYm_OFFSET+i,&(m._l2_hitda_only),1)

/*******************************************************************************
 * End of 'L2_HITDA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L2_HITSA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access L2_HITSA_ONLY.
 */
#define READ_L2_HITSA_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_HITSA_ONLYm_BLKACC)+1,L2_HITSA_ONLYm_OFFSET+i,(m._l2_hitsa_only),1)
#define WRITE_L2_HITSA_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_HITSA_ONLYm_BLKACC)+1,L2_HITSA_ONLYm_OFFSET+i,&(m._l2_hitsa_only),1)

/*******************************************************************************
 * End of 'L2_HITSA_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  L2_HIT_DBGCTRL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_HIT_DBGCTRL_0.
 */
#define READ_L2_HIT_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L2_HIT_DBGCTRL_0r_BLKACC,1,n,0,L2_HIT_DBGCTRL_0r_OFFSET,0,(r._l2_hit_dbgctrl_0),1)
#define WRITE_L2_HIT_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L2_HIT_DBGCTRL_0r_BLKACC,1,n,0,L2_HIT_DBGCTRL_0r_OFFSET,0,&(r._l2_hit_dbgctrl_0),1)
#define WRITE_L2_HIT_DBGCTRL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L2_HIT_DBGCTRL_0r_BLKACC,1,-1,0,L2_HIT_DBGCTRL_0r_OFFSET,0,&(r._l2_hit_dbgctrl_0),1)

/*******************************************************************************
 * End of 'L2_HIT_DBGCTRL_0r'
 */




/*******************************************************************************
 * MEMORY:  L2_LEARN_INSERT_FAILURE
 * BLOCKS:   IPIPE
 * SIZE:     108
 */
/*
 * These macros can be used to access L2_LEARN_INSERT_FAILURE.
 */
#define READ_L2_LEARN_INSERT_FAILUREm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_LEARN_INSERT_FAILUREm_BLKACC)+1,L2_LEARN_INSERT_FAILUREm_OFFSET+i,(m._l2_learn_insert_failure),4)
#define WRITE_L2_LEARN_INSERT_FAILUREm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_LEARN_INSERT_FAILUREm_BLKACC)+1,L2_LEARN_INSERT_FAILUREm_OFFSET+i,&(m._l2_learn_insert_failure),4)

/*******************************************************************************
 * End of 'L2_LEARN_INSERT_FAILUREm'
 */




/*******************************************************************************
 * REGISTER:  L2_LP_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_LP_CONTROL_0.
 */
#define READ_L2_LP_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L2_LP_CONTROL_0r_BLKACC,1,n,0,L2_LP_CONTROL_0r_OFFSET,0,(r._l2_lp_control_0),1)
#define WRITE_L2_LP_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L2_LP_CONTROL_0r_BLKACC,1,n,0,L2_LP_CONTROL_0r_OFFSET,0,&(r._l2_lp_control_0),1)
#define WRITE_L2_LP_CONTROL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L2_LP_CONTROL_0r_BLKACC,1,-1,0,L2_LP_CONTROL_0r_OFFSET,0,&(r._l2_lp_control_0),1)

/*******************************************************************************
 * End of 'L2_LP_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  L2_MGMT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MGMT_CONTROL.
 */
#define READ_L2_MGMT_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MGMT_CONTROLr_BLKACC,1,L2_MGMT_CONTROLr_OFFSET,0,(r._l2_mgmt_control), 1)
#define WRITE_L2_MGMT_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MGMT_CONTROLr_BLKACC,1,L2_MGMT_CONTROLr_OFFSET,0,&(r._l2_mgmt_control), 1)

/*******************************************************************************
 * End of 'L2_MGMT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  L2_MGMT_HW_RESET_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MGMT_HW_RESET_CONTROL_0.
 */
#define READ_L2_MGMT_HW_RESET_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,L2_MGMT_HW_RESET_CONTROL_0r_BLKACC,1,L2_MGMT_HW_RESET_CONTROL_0r_OFFSET,0,(r._l2_mgmt_hw_reset_control_0), 1)
#define WRITE_L2_MGMT_HW_RESET_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,L2_MGMT_HW_RESET_CONTROL_0r_BLKACC,1,L2_MGMT_HW_RESET_CONTROL_0r_OFFSET,0,&(r._l2_mgmt_hw_reset_control_0), 1)

/*******************************************************************************
 * End of 'L2_MGMT_HW_RESET_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  L2_MGMT_HW_RESET_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MGMT_HW_RESET_CONTROL_1.
 */
#define READ_L2_MGMT_HW_RESET_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,L2_MGMT_HW_RESET_CONTROL_1r_BLKACC,1,L2_MGMT_HW_RESET_CONTROL_1r_OFFSET,0,(r._l2_mgmt_hw_reset_control_1), 1)
#define WRITE_L2_MGMT_HW_RESET_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,L2_MGMT_HW_RESET_CONTROL_1r_BLKACC,1,L2_MGMT_HW_RESET_CONTROL_1r_OFFSET,0,&(r._l2_mgmt_hw_reset_control_1), 1)

/*******************************************************************************
 * End of 'L2_MGMT_HW_RESET_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  L2_MGMT_INTR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MGMT_INTR.
 */
#define READ_L2_MGMT_INTRr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MGMT_INTRr_BLKACC,1,L2_MGMT_INTRr_OFFSET,0,(r._l2_mgmt_intr), 1)
#define WRITE_L2_MGMT_INTRr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MGMT_INTRr_BLKACC,1,L2_MGMT_INTRr_OFFSET,0,&(r._l2_mgmt_intr), 1)

/*******************************************************************************
 * End of 'L2_MGMT_INTRr'
 */




/*******************************************************************************
 * REGISTER:  L2_MGMT_INTR_MASK
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MGMT_INTR_MASK.
 */
#define READ_L2_MGMT_INTR_MASKr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MGMT_INTR_MASKr_BLKACC,1,L2_MGMT_INTR_MASKr_OFFSET,0,(r._l2_mgmt_intr_mask), 1)
#define WRITE_L2_MGMT_INTR_MASKr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MGMT_INTR_MASKr_BLKACC,1,L2_MGMT_INTR_MASKr_OFFSET,0,&(r._l2_mgmt_intr_mask), 1)

/*******************************************************************************
 * End of 'L2_MGMT_INTR_MASKr'
 */




/*******************************************************************************
 * MEMORY:  L2_MGMT_SER_FIFO
 * BLOCKS:   IPIPE
 * SIZE:     50
 */
/*
 * These macros can be used to access L2_MGMT_SER_FIFO.
 */
#define READ_L2_MGMT_SER_FIFOm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_MGMT_SER_FIFOm_BLKACC)+1,L2_MGMT_SER_FIFOm_OFFSET+i,(m._l2_mgmt_ser_fifo),2)
#define WRITE_L2_MGMT_SER_FIFOm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_MGMT_SER_FIFOm_BLKACC)+1,L2_MGMT_SER_FIFOm_OFFSET+i,&(m._l2_mgmt_ser_fifo),2)

/*******************************************************************************
 * End of 'L2_MGMT_SER_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  L2_MGMT_SER_FIFO_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MGMT_SER_FIFO_CTRL.
 */
#define READ_L2_MGMT_SER_FIFO_CTRLr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MGMT_SER_FIFO_CTRLr_BLKACC,1,L2_MGMT_SER_FIFO_CTRLr_OFFSET,0,(r._l2_mgmt_ser_fifo_ctrl), 1)
#define WRITE_L2_MGMT_SER_FIFO_CTRLr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MGMT_SER_FIFO_CTRLr_BLKACC,1,L2_MGMT_SER_FIFO_CTRLr_OFFSET,0,&(r._l2_mgmt_ser_fifo_ctrl), 1)

/*******************************************************************************
 * End of 'L2_MGMT_SER_FIFO_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  L2_MOD_FIFO
 * BLOCKS:   IPIPE
 * SIZE:     195
 */
/*
 * These macros can be used to access L2_MOD_FIFO.
 */
#define READ_L2_MOD_FIFOm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_MOD_FIFOm_BLKACC)+1,L2_MOD_FIFOm_OFFSET+i,(m._l2_mod_fifo),7)
#define WRITE_L2_MOD_FIFOm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_MOD_FIFOm_BLKACC)+1,L2_MOD_FIFOm_OFFSET+i,&(m._l2_mod_fifo),7)

/*******************************************************************************
 * End of 'L2_MOD_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  L2_MOD_FIFO_CLAIM_AVAIL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MOD_FIFO_CLAIM_AVAIL.
 */
#define READ_L2_MOD_FIFO_CLAIM_AVAILr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MOD_FIFO_CLAIM_AVAILr_BLKACC,1,L2_MOD_FIFO_CLAIM_AVAILr_OFFSET,0,(r._l2_mod_fifo_claim_avail), 1)
#define WRITE_L2_MOD_FIFO_CLAIM_AVAILr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MOD_FIFO_CLAIM_AVAILr_BLKACC,1,L2_MOD_FIFO_CLAIM_AVAILr_OFFSET,0,&(r._l2_mod_fifo_claim_avail), 1)

/*******************************************************************************
 * End of 'L2_MOD_FIFO_CLAIM_AVAILr'
 */




/*******************************************************************************
 * REGISTER:  L2_MOD_FIFO_CNT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MOD_FIFO_CNT.
 */
#define READ_L2_MOD_FIFO_CNTr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MOD_FIFO_CNTr_BLKACC,1,L2_MOD_FIFO_CNTr_OFFSET,0,(r._l2_mod_fifo_cnt), 1)
#define WRITE_L2_MOD_FIFO_CNTr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MOD_FIFO_CNTr_BLKACC,1,L2_MOD_FIFO_CNTr_OFFSET,0,&(r._l2_mod_fifo_cnt), 1)

/*******************************************************************************
 * End of 'L2_MOD_FIFO_CNTr'
 */




/*******************************************************************************
 * REGISTER:  L2_MOD_FIFO_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MOD_FIFO_ENABLE.
 */
#define READ_L2_MOD_FIFO_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MOD_FIFO_ENABLEr_BLKACC,1,L2_MOD_FIFO_ENABLEr_OFFSET,0,(r._l2_mod_fifo_enable), 1)
#define WRITE_L2_MOD_FIFO_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MOD_FIFO_ENABLEr_BLKACC,1,L2_MOD_FIFO_ENABLEr_OFFSET,0,&(r._l2_mod_fifo_enable), 1)

/*******************************************************************************
 * End of 'L2_MOD_FIFO_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  L2_MOD_FIFO_MEMORY_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MOD_FIFO_MEMORY_CONTROL_0.
 */
#define READ_L2_MOD_FIFO_MEMORY_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_read(u,L2_MOD_FIFO_MEMORY_CONTROL_0r_BLKACC,1,L2_MOD_FIFO_MEMORY_CONTROL_0r_OFFSET,0,(r._l2_mod_fifo_memory_control_0), 1)
#define WRITE_L2_MOD_FIFO_MEMORY_CONTROL_0r(u,r) bcmbd_cmicd_reg_block_write(u,L2_MOD_FIFO_MEMORY_CONTROL_0r_BLKACC,1,L2_MOD_FIFO_MEMORY_CONTROL_0r_OFFSET,0,&(r._l2_mod_fifo_memory_control_0), 1)

/*******************************************************************************
 * End of 'L2_MOD_FIFO_MEMORY_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  L2_MOD_FIFO_PARITY_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MOD_FIFO_PARITY_CONTROL.
 */
#define READ_L2_MOD_FIFO_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MOD_FIFO_PARITY_CONTROLr_BLKACC,1,L2_MOD_FIFO_PARITY_CONTROLr_OFFSET,0,(r._l2_mod_fifo_parity_control), 1)
#define WRITE_L2_MOD_FIFO_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MOD_FIFO_PARITY_CONTROLr_BLKACC,1,L2_MOD_FIFO_PARITY_CONTROLr_OFFSET,0,&(r._l2_mod_fifo_parity_control), 1)

/*******************************************************************************
 * End of 'L2_MOD_FIFO_PARITY_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  L2_MOD_FIFO_RD_PTR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MOD_FIFO_RD_PTR.
 */
#define READ_L2_MOD_FIFO_RD_PTRr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MOD_FIFO_RD_PTRr_BLKACC,1,L2_MOD_FIFO_RD_PTRr_OFFSET,0,(r._l2_mod_fifo_rd_ptr), 1)
#define WRITE_L2_MOD_FIFO_RD_PTRr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MOD_FIFO_RD_PTRr_BLKACC,1,L2_MOD_FIFO_RD_PTRr_OFFSET,0,&(r._l2_mod_fifo_rd_ptr), 1)

/*******************************************************************************
 * End of 'L2_MOD_FIFO_RD_PTRr'
 */




/*******************************************************************************
 * REGISTER:  L2_MOD_FIFO_WR_PTR
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_MOD_FIFO_WR_PTR.
 */
#define READ_L2_MOD_FIFO_WR_PTRr(u,r) bcmbd_cmicd_reg_block_read(u,L2_MOD_FIFO_WR_PTRr_BLKACC,1,L2_MOD_FIFO_WR_PTRr_OFFSET,0,(r._l2_mod_fifo_wr_ptr), 1)
#define WRITE_L2_MOD_FIFO_WR_PTRr(u,r) bcmbd_cmicd_reg_block_write(u,L2_MOD_FIFO_WR_PTRr_BLKACC,1,L2_MOD_FIFO_WR_PTRr_OFFSET,0,&(r._l2_mod_fifo_wr_ptr), 1)

/*******************************************************************************
 * End of 'L2_MOD_FIFO_WR_PTRr'
 */




/*******************************************************************************
 * REGISTER:  L2_TABLE_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_TABLE_HASH_CONTROL.
 */
#define READ_L2_TABLE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L2_TABLE_HASH_CONTROLr_BLKACC,1,L2_TABLE_HASH_CONTROLr_OFFSET,0,(r._l2_table_hash_control), 1)
#define WRITE_L2_TABLE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L2_TABLE_HASH_CONTROLr_BLKACC,1,L2_TABLE_HASH_CONTROLr_OFFSET,0,&(r._l2_table_hash_control), 1)

/*******************************************************************************
 * End of 'L2_TABLE_HASH_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  L2_USER_ENTRY
 * BLOCKS:   IPIPE
 * SIZE:     200
 */
/*
 * These macros can be used to access L2_USER_ENTRY.
 */
#define READ_L2_USER_ENTRYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_USER_ENTRYm_BLKACC)+1,L2_USER_ENTRYm_OFFSET+i,(m._l2_user_entry),7)
#define WRITE_L2_USER_ENTRYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_USER_ENTRYm_BLKACC)+1,L2_USER_ENTRYm_OFFSET+i,&(m._l2_user_entry),7)

/*******************************************************************************
 * End of 'L2_USER_ENTRYm'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_USER_ENTRY_CAM_BIST_CONFIG.
 */
#define READ_L2_USER_ENTRY_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L2_USER_ENTRY_CAM_BIST_CONFIGr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_CONFIGr_OFFSET,0,(r._l2_user_entry_cam_bist_config),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_CONFIGr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_CONFIGr_OFFSET,0,&(r._l2_user_entry_cam_bist_config),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_CONFIGr_BLKACC,1,-1,0,L2_USER_ENTRY_CAM_BIST_CONFIGr_OFFSET,0,&(r._l2_user_entry_cam_bist_config),1)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_CAM_BIST_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_USER_ENTRY_CAM_BIST_DBGCTRL.
 */
#define READ_L2_USER_ENTRY_CAM_BIST_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L2_USER_ENTRY_CAM_BIST_DBGCTRLr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_DBGCTRLr_OFFSET,0,(r._l2_user_entry_cam_bist_dbgctrl),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_DBGCTRLr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_DBGCTRLr_OFFSET,0,&(r._l2_user_entry_cam_bist_dbgctrl),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_DBGCTRLr_BLKACC,1,-1,0,L2_USER_ENTRY_CAM_BIST_DBGCTRLr_OFFSET,0,&(r._l2_user_entry_cam_bist_dbgctrl),1)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_CAM_BIST_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_USER_ENTRY_CAM_BIST_DBG_DATA.
 */
#define READ_L2_USER_ENTRY_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L2_USER_ENTRY_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_DBG_DATAr_OFFSET,0,(r._l2_user_entry_cam_bist_dbg_data),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._l2_user_entry_cam_bist_dbg_data),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,L2_USER_ENTRY_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._l2_user_entry_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_USER_ENTRY_CAM_BIST_STATUS.
 */
#define READ_L2_USER_ENTRY_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L2_USER_ENTRY_CAM_BIST_STATUSr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_STATUSr_OFFSET,0,(r._l2_user_entry_cam_bist_status),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_STATUSr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_BIST_STATUSr_OFFSET,0,&(r._l2_user_entry_cam_bist_status),1)
#define WRITE_L2_USER_ENTRY_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_BIST_STATUSr_BLKACC,1,-1,0,L2_USER_ENTRY_CAM_BIST_STATUSr_OFFSET,0,&(r._l2_user_entry_cam_bist_status),1)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_USER_ENTRY_CAM_DBGCTRL.
 */
#define READ_L2_USER_ENTRY_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L2_USER_ENTRY_CAM_DBGCTRLr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_DBGCTRLr_OFFSET,0,(r._l2_user_entry_cam_dbgctrl),1)
#define WRITE_L2_USER_ENTRY_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_DBGCTRLr_BLKACC,1,n,0,L2_USER_ENTRY_CAM_DBGCTRLr_OFFSET,0,&(r._l2_user_entry_cam_dbgctrl),1)
#define WRITE_L2_USER_ENTRY_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_CAM_DBGCTRLr_BLKACC,1,-1,0,L2_USER_ENTRY_CAM_DBGCTRLr_OFFSET,0,&(r._l2_user_entry_cam_dbgctrl),1)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_DATA_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_USER_ENTRY_DATA_DBGCTRL.
 */
#define READ_L2_USER_ENTRY_DATA_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L2_USER_ENTRY_DATA_DBGCTRLr_BLKACC,1,n,0,L2_USER_ENTRY_DATA_DBGCTRLr_OFFSET,0,(r._l2_user_entry_data_dbgctrl),1)
#define WRITE_L2_USER_ENTRY_DATA_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_DATA_DBGCTRLr_BLKACC,1,n,0,L2_USER_ENTRY_DATA_DBGCTRLr_OFFSET,0,&(r._l2_user_entry_data_dbgctrl),1)
#define WRITE_L2_USER_ENTRY_DATA_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L2_USER_ENTRY_DATA_DBGCTRLr_BLKACC,1,-1,0,L2_USER_ENTRY_DATA_DBGCTRLr_OFFSET,0,&(r._l2_user_entry_data_dbgctrl),1)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_DATA_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  L2_USER_ENTRY_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     39
 */
/*
 * These macros can be used to access L2_USER_ENTRY_DATA_ONLY.
 */
#define READ_L2_USER_ENTRY_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_USER_ENTRY_DATA_ONLYm_BLKACC)+1,L2_USER_ENTRY_DATA_ONLYm_OFFSET+i,(m._l2_user_entry_data_only),2)
#define WRITE_L2_USER_ENTRY_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_USER_ENTRY_DATA_ONLYm_BLKACC)+1,L2_USER_ENTRY_DATA_ONLYm_OFFSET+i,&(m._l2_user_entry_data_only),2)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_DATA_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  L2_USER_ENTRY_DATA_PARITY_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L2_USER_ENTRY_DATA_PARITY_CONTROL.
 */
#define READ_L2_USER_ENTRY_DATA_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L2_USER_ENTRY_DATA_PARITY_CONTROLr_BLKACC,1,L2_USER_ENTRY_DATA_PARITY_CONTROLr_OFFSET,0,(r._l2_user_entry_data_parity_control), 1)
#define WRITE_L2_USER_ENTRY_DATA_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L2_USER_ENTRY_DATA_PARITY_CONTROLr_BLKACC,1,L2_USER_ENTRY_DATA_PARITY_CONTROLr_OFFSET,0,&(r._l2_user_entry_data_parity_control), 1)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_DATA_PARITY_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  L2_USER_ENTRY_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     161
 */
/*
 * These macros can be used to access L2_USER_ENTRY_ONLY.
 */
#define READ_L2_USER_ENTRY_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L2_USER_ENTRY_ONLYm_BLKACC)+1,L2_USER_ENTRY_ONLYm_OFFSET+i,(m._l2_user_entry_only),6)
#define WRITE_L2_USER_ENTRY_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L2_USER_ENTRY_ONLYm_BLKACC)+1,L2_USER_ENTRY_ONLYm_OFFSET+i,&(m._l2_user_entry_only),6)

/*******************************************************************************
 * End of 'L2_USER_ENTRY_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP
 * BLOCKS:   IPIPE
 * SIZE:     365
 */
/*
 * These macros can be used to access L3_DEFIP.
 */
#define READ_L3_DEFIPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIPm_BLKACC)+1,L3_DEFIPm_OFFSET+i,(m._l3_defip),12)
#define WRITE_L3_DEFIPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIPm_BLKACC)+1,L3_DEFIPm_OFFSET+i,&(m._l3_defip),12)

/*******************************************************************************
 * End of 'L3_DEFIPm'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ASSOC_DATA_FULL
 * BLOCKS:
 * SIZE:     46
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ASSOC_DATA_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ASSOC_DATA_REDUCED
 * BLOCKS:
 * SIZE:     28
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ASSOC_DATA_REDUCED'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_ALPM_CFG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_CFG.
 */
#define READ_L3_DEFIP_ALPM_CFGr(u,r) bcmbd_cmicd_reg_block_read(u,L3_DEFIP_ALPM_CFGr_BLKACC,1,L3_DEFIP_ALPM_CFGr_OFFSET,0,(r._l3_defip_alpm_cfg), 1)
#define WRITE_L3_DEFIP_ALPM_CFGr(u,r) bcmbd_cmicd_reg_block_write(u,L3_DEFIP_ALPM_CFGr_BLKACC,1,L3_DEFIP_ALPM_CFGr_OFFSET,0,&(r._l3_defip_alpm_cfg), 1)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_CFGr'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_ECC
 * BLOCKS:   IPIPE
 * SIZE:     113
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_ECC.
 */
#define READ_L3_DEFIP_ALPM_ECCm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_ECCm_BLKACC)+1,L3_DEFIP_ALPM_ECCm_OFFSET+i,(m._l3_defip_alpm_ecc),4)
#define WRITE_L3_DEFIP_ALPM_ECCm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_ECCm_BLKACC)+1,L3_DEFIP_ALPM_ECCm_OFFSET+i,&(m._l3_defip_alpm_ecc),4)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ECCm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_HIT_ONLY.
 */
#define READ_L3_DEFIP_ALPM_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_HIT_ONLYm_BLKACC)+1,L3_DEFIP_ALPM_HIT_ONLYm_OFFSET+i,(m._l3_defip_alpm_hit_only),1)
#define WRITE_L3_DEFIP_ALPM_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_HIT_ONLYm_BLKACC)+1,L3_DEFIP_ALPM_HIT_ONLYm_OFFSET+i,&(m._l3_defip_alpm_hit_only),1)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_HIT_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_IPV4
 * BLOCKS:   IPIPE
 * SIZE:     71
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_IPV4.
 */
#define READ_L3_DEFIP_ALPM_IPV4m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV4m_BLKACC)+1,L3_DEFIP_ALPM_IPV4m_OFFSET+i,(m._l3_defip_alpm_ipv4),3)
#define WRITE_L3_DEFIP_ALPM_IPV4m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV4m_BLKACC)+1,L3_DEFIP_ALPM_IPV4m_OFFSET+i,&(m._l3_defip_alpm_ipv4),3)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_IPV4m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_IPV4_1
 * BLOCKS:   IPIPE
 * SIZE:     106
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_IPV4_1.
 */
#define READ_L3_DEFIP_ALPM_IPV4_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV4_1m_BLKACC)+1,L3_DEFIP_ALPM_IPV4_1m_OFFSET+i,(m._l3_defip_alpm_ipv4_1),4)
#define WRITE_L3_DEFIP_ALPM_IPV4_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV4_1m_BLKACC)+1,L3_DEFIP_ALPM_IPV4_1m_OFFSET+i,&(m._l3_defip_alpm_ipv4_1),4)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_IPV4_1m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_IPV6_128
 * BLOCKS:   IPIPE
 * SIZE:     211
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_IPV6_128.
 */
#define READ_L3_DEFIP_ALPM_IPV6_128m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV6_128m_BLKACC)+1,L3_DEFIP_ALPM_IPV6_128m_OFFSET+i,(m._l3_defip_alpm_ipv6_128),7)
#define WRITE_L3_DEFIP_ALPM_IPV6_128m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV6_128m_BLKACC)+1,L3_DEFIP_ALPM_IPV6_128m_OFFSET+i,&(m._l3_defip_alpm_ipv6_128),7)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_IPV6_128m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_IPV6_64
 * BLOCKS:   IPIPE
 * SIZE:     106
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_IPV6_64.
 */
#define READ_L3_DEFIP_ALPM_IPV6_64m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV6_64m_BLKACC)+1,L3_DEFIP_ALPM_IPV6_64m_OFFSET+i,(m._l3_defip_alpm_ipv6_64),4)
#define WRITE_L3_DEFIP_ALPM_IPV6_64m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV6_64m_BLKACC)+1,L3_DEFIP_ALPM_IPV6_64m_OFFSET+i,&(m._l3_defip_alpm_ipv6_64),4)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_IPV6_64m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_IPV6_64_1
 * BLOCKS:   IPIPE
 * SIZE:     141
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_IPV6_64_1.
 */
#define READ_L3_DEFIP_ALPM_IPV6_64_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV6_64_1m_BLKACC)+1,L3_DEFIP_ALPM_IPV6_64_1m_OFFSET+i,(m._l3_defip_alpm_ipv6_64_1),5)
#define WRITE_L3_DEFIP_ALPM_IPV6_64_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_IPV6_64_1m_BLKACC)+1,L3_DEFIP_ALPM_IPV6_64_1m_OFFSET+i,&(m._l3_defip_alpm_ipv6_64_1),5)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_IPV6_64_1m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ALPM_RAW
 * BLOCKS:   IPIPE
 * SIZE:     420
 */
/*
 * These macros can be used to access L3_DEFIP_ALPM_RAW.
 */
#define READ_L3_DEFIP_ALPM_RAWm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_RAWm_BLKACC)+1,L3_DEFIP_ALPM_RAWm_OFFSET+i,(m._l3_defip_alpm_raw),14)
#define WRITE_L3_DEFIP_ALPM_RAWm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ALPM_RAWm_BLKACC)+1,L3_DEFIP_ALPM_RAWm_OFFSET+i,&(m._l3_defip_alpm_raw),14)

/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_RAWm'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT1
 * BLOCKS:
 * SIZE:     70
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT1'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT1_FULL
 * BLOCKS:
 * SIZE:     420
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT1_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT2
 * BLOCKS:
 * SIZE:     105
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT2'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT2_FULL
 * BLOCKS:
 * SIZE:     420
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT2_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT3
 * BLOCKS:
 * SIZE:     105
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT3'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT3_FULL
 * BLOCKS:
 * SIZE:     420
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT3_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT4
 * BLOCKS:
 * SIZE:     140
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT4'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT4_FULL
 * BLOCKS:
 * SIZE:     420
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT4_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT5
 * BLOCKS:
 * SIZE:     210
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT5'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ALPM_ROUTE_FMT5_FULL
 * BLOCKS:
 * SIZE:     420
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ALPM_ROUTE_FMT5_FULL'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ASSOC_DATA_1
 * BLOCKS:
 * SIZE:     16
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ASSOC_DATA_1'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ASSOC_DATA_2
 * BLOCKS:
 * SIZE:     12
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ASSOC_DATA_2'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_ASSOC_DATA_3
 * BLOCKS:
 * SIZE:     18
 */
/*******************************************************************************
 * End of 'L3_DEFIP_ASSOC_DATA_3'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_AUX_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_AUX_CTRL.
 */
#define READ_L3_DEFIP_AUX_CTRLr(u,r) bcmbd_cmicd_reg_block_read(u,L3_DEFIP_AUX_CTRLr_BLKACC,1,L3_DEFIP_AUX_CTRLr_OFFSET,0,(r._l3_defip_aux_ctrl), 1)
#define WRITE_L3_DEFIP_AUX_CTRLr(u,r) bcmbd_cmicd_reg_block_write(u,L3_DEFIP_AUX_CTRLr_BLKACC,1,L3_DEFIP_AUX_CTRLr_OFFSET,0,&(r._l3_defip_aux_ctrl), 1)

/*******************************************************************************
 * End of 'L3_DEFIP_AUX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_AUX_CTRL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_AUX_CTRL_1.
 */
#define READ_L3_DEFIP_AUX_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,L3_DEFIP_AUX_CTRL_1r_BLKACC,1,L3_DEFIP_AUX_CTRL_1r_OFFSET,0,(r._l3_defip_aux_ctrl_1), 1)
#define WRITE_L3_DEFIP_AUX_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,L3_DEFIP_AUX_CTRL_1r_BLKACC,1,L3_DEFIP_AUX_CTRL_1r_OFFSET,0,&(r._l3_defip_aux_ctrl_1), 1)

/*******************************************************************************
 * End of 'L3_DEFIP_AUX_CTRL_1r'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_AUX_HITBIT_UPDATE
 * BLOCKS:   IPIPE
 * SIZE:     37
 */
/*
 * These macros can be used to access L3_DEFIP_AUX_HITBIT_UPDATE.
 */
#define READ_L3_DEFIP_AUX_HITBIT_UPDATEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_AUX_HITBIT_UPDATEm_BLKACC)+1,L3_DEFIP_AUX_HITBIT_UPDATEm_OFFSET+i,(m._l3_defip_aux_hitbit_update),2)
#define WRITE_L3_DEFIP_AUX_HITBIT_UPDATEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_AUX_HITBIT_UPDATEm_BLKACC)+1,L3_DEFIP_AUX_HITBIT_UPDATEm_OFFSET+i,&(m._l3_defip_aux_hitbit_update),2)

/*******************************************************************************
 * End of 'L3_DEFIP_AUX_HITBIT_UPDATEm'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_AUX_RAM_CTRL_0_32
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_AUX_RAM_CTRL_0_32.
 */
#define READ_L3_DEFIP_AUX_RAM_CTRL_0_32r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_AUX_RAM_CTRL_0_32r_BLKACC,1,n,0,L3_DEFIP_AUX_RAM_CTRL_0_32r_OFFSET,0,(r._l3_defip_aux_ram_ctrl_0_32),1)
#define WRITE_L3_DEFIP_AUX_RAM_CTRL_0_32r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_AUX_RAM_CTRL_0_32r_BLKACC,1,n,0,L3_DEFIP_AUX_RAM_CTRL_0_32r_OFFSET,0,&(r._l3_defip_aux_ram_ctrl_0_32),1)
#define WRITE_L3_DEFIP_AUX_RAM_CTRL_0_32r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_AUX_RAM_CTRL_0_32r_BLKACC,1,-1,0,L3_DEFIP_AUX_RAM_CTRL_0_32r_OFFSET,0,&(r._l3_defip_aux_ram_ctrl_0_32),1)

/*******************************************************************************
 * End of 'L3_DEFIP_AUX_RAM_CTRL_0_32r'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_AUX_SCRATCH
 * BLOCKS:   IPIPE
 * SIZE:     234
 */
/*
 * These macros can be used to access L3_DEFIP_AUX_SCRATCH.
 */
#define READ_L3_DEFIP_AUX_SCRATCHm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_AUX_SCRATCHm_BLKACC)+1,L3_DEFIP_AUX_SCRATCHm_OFFSET+i,(m._l3_defip_aux_scratch),8)
#define WRITE_L3_DEFIP_AUX_SCRATCHm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_AUX_SCRATCHm_BLKACC)+1,L3_DEFIP_AUX_SCRATCHm_OFFSET+i,&(m._l3_defip_aux_scratch),8)

/*******************************************************************************
 * End of 'L3_DEFIP_AUX_SCRATCHm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_AUX_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     133
 */
/*
 * These macros can be used to access L3_DEFIP_AUX_TABLE.
 */
#define READ_L3_DEFIP_AUX_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_AUX_TABLEm_BLKACC)+1,L3_DEFIP_AUX_TABLEm_OFFSET+i,(m._l3_defip_aux_table),5)
#define WRITE_L3_DEFIP_AUX_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_AUX_TABLEm_BLKACC)+1,L3_DEFIP_AUX_TABLEm_OFFSET+i,&(m._l3_defip_aux_table),5)

/*******************************************************************************
 * End of 'L3_DEFIP_AUX_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_BIST_CONFIG.
 */
#define READ_L3_DEFIP_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_CAM_BIST_CONFIGr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_CONFIGr_OFFSET,0,(r._l3_defip_cam_bist_config),1)
#define WRITE_L3_DEFIP_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_CONFIGr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_CONFIGr_OFFSET,0,&(r._l3_defip_cam_bist_config),1)
#define WRITE_L3_DEFIP_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_CONFIGr_BLKACC,1,-1,0,L3_DEFIP_CAM_BIST_CONFIGr_OFFSET,0,&(r._l3_defip_cam_bist_config),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_BIST_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_BIST_DBGCTRL.
 */
#define READ_L3_DEFIP_CAM_BIST_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_CAM_BIST_DBGCTRLr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_DBGCTRLr_OFFSET,0,(r._l3_defip_cam_bist_dbgctrl),1)
#define WRITE_L3_DEFIP_CAM_BIST_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_DBGCTRLr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_DBGCTRLr_OFFSET,0,&(r._l3_defip_cam_bist_dbgctrl),1)
#define WRITE_L3_DEFIP_CAM_BIST_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_DBGCTRLr_BLKACC,1,-1,0,L3_DEFIP_CAM_BIST_DBGCTRLr_OFFSET,0,&(r._l3_defip_cam_bist_dbgctrl),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_BIST_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_BIST_DBG_DATA.
 */
#define READ_L3_DEFIP_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_DBG_DATAr_OFFSET,0,(r._l3_defip_cam_bist_dbg_data),1)
#define WRITE_L3_DEFIP_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._l3_defip_cam_bist_dbg_data),1)
#define WRITE_L3_DEFIP_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,L3_DEFIP_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._l3_defip_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_BIST_STATUS.
 */
#define READ_L3_DEFIP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_STATUSr_OFFSET,0,(r._l3_defip_cam_bist_status),1)
#define WRITE_L3_DEFIP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_DEFIP_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_defip_cam_bist_status),1)
#define WRITE_L3_DEFIP_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_BIST_STATUSr_BLKACC,1,-1,0,L3_DEFIP_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_defip_cam_bist_status),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_DBGCTRL0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_DBGCTRL0.
 */
#define READ_L3_DEFIP_CAM_DBGCTRL0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_CAM_DBGCTRL0r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL0r_OFFSET,0,(r._l3_defip_cam_dbgctrl0),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL0r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL0r_OFFSET,0,&(r._l3_defip_cam_dbgctrl0),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL0r_BLKACC,1,-1,0,L3_DEFIP_CAM_DBGCTRL0r_OFFSET,0,&(r._l3_defip_cam_dbgctrl0),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_DBGCTRL0r'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_DBGCTRL2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_DBGCTRL2.
 */
#define READ_L3_DEFIP_CAM_DBGCTRL2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_CAM_DBGCTRL2r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL2r_OFFSET,0,(r._l3_defip_cam_dbgctrl2),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL2r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL2r_OFFSET,0,&(r._l3_defip_cam_dbgctrl2),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL2r_BLKACC,1,-1,0,L3_DEFIP_CAM_DBGCTRL2r_OFFSET,0,&(r._l3_defip_cam_dbgctrl2),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_DBGCTRL2r'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_DBGCTRL3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_DBGCTRL3.
 */
#define READ_L3_DEFIP_CAM_DBGCTRL3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_CAM_DBGCTRL3r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL3r_OFFSET,0,(r._l3_defip_cam_dbgctrl3),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL3r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL3r_OFFSET,0,&(r._l3_defip_cam_dbgctrl3),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL3r_BLKACC,1,-1,0,L3_DEFIP_CAM_DBGCTRL3r_OFFSET,0,&(r._l3_defip_cam_dbgctrl3),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_DBGCTRL3r'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_DBGCTRL4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_DBGCTRL4.
 */
#define READ_L3_DEFIP_CAM_DBGCTRL4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_CAM_DBGCTRL4r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL4r_OFFSET,0,(r._l3_defip_cam_dbgctrl4),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL4r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL4r_OFFSET,0,&(r._l3_defip_cam_dbgctrl4),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL4r_BLKACC,1,-1,0,L3_DEFIP_CAM_DBGCTRL4r_OFFSET,0,&(r._l3_defip_cam_dbgctrl4),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_DBGCTRL4r'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_DBGCTRL5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_DBGCTRL5.
 */
#define READ_L3_DEFIP_CAM_DBGCTRL5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_CAM_DBGCTRL5r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL5r_OFFSET,0,(r._l3_defip_cam_dbgctrl5),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL5r_BLKACC,1,n,0,L3_DEFIP_CAM_DBGCTRL5r_OFFSET,0,&(r._l3_defip_cam_dbgctrl5),1)
#define WRITE_L3_DEFIP_CAM_DBGCTRL5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_CAM_DBGCTRL5r_BLKACC,1,-1,0,L3_DEFIP_CAM_DBGCTRL5r_OFFSET,0,&(r._l3_defip_cam_dbgctrl5),1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_DBGCTRL5r'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_CAM_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_CAM_ENABLE.
 */
#define READ_L3_DEFIP_CAM_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,L3_DEFIP_CAM_ENABLEr_BLKACC,1,L3_DEFIP_CAM_ENABLEr_OFFSET,0,(r._l3_defip_cam_enable), 1)
#define WRITE_L3_DEFIP_CAM_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,L3_DEFIP_CAM_ENABLEr_BLKACC,1,L3_DEFIP_CAM_ENABLEr_OFFSET,0,&(r._l3_defip_cam_enable), 1)

/*******************************************************************************
 * End of 'L3_DEFIP_CAM_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_DATA_DBGCTRL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_DATA_DBGCTRL_0.
 */
#define READ_L3_DEFIP_DATA_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_DEFIP_DATA_DBGCTRL_0r_BLKACC,1,n,0,L3_DEFIP_DATA_DBGCTRL_0r_OFFSET,0,(r._l3_defip_data_dbgctrl_0),1)
#define WRITE_L3_DEFIP_DATA_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_DATA_DBGCTRL_0r_BLKACC,1,n,0,L3_DEFIP_DATA_DBGCTRL_0r_OFFSET,0,&(r._l3_defip_data_dbgctrl_0),1)
#define WRITE_L3_DEFIP_DATA_DBGCTRL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_DEFIP_DATA_DBGCTRL_0r_BLKACC,1,-1,0,L3_DEFIP_DATA_DBGCTRL_0r_OFFSET,0,&(r._l3_defip_data_dbgctrl_0),1)

/*******************************************************************************
 * End of 'L3_DEFIP_DATA_DBGCTRL_0r'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     169
 */
/*
 * These macros can be used to access L3_DEFIP_DATA_ONLY.
 */
#define READ_L3_DEFIP_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_DATA_ONLYm_BLKACC)+1,L3_DEFIP_DATA_ONLYm_OFFSET+i,(m._l3_defip_data_only),6)
#define WRITE_L3_DEFIP_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_DATA_ONLYm_BLKACC)+1,L3_DEFIP_DATA_ONLYm_OFFSET+i,&(m._l3_defip_data_only),6)

/*******************************************************************************
 * End of 'L3_DEFIP_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access L3_DEFIP_HIT_ONLY.
 */
#define READ_L3_DEFIP_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_HIT_ONLYm_BLKACC)+1,L3_DEFIP_HIT_ONLYm_OFFSET+i,(m._l3_defip_hit_only),1)
#define WRITE_L3_DEFIP_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_HIT_ONLYm_BLKACC)+1,L3_DEFIP_HIT_ONLYm_OFFSET+i,&(m._l3_defip_hit_only),1)

/*******************************************************************************
 * End of 'L3_DEFIP_HIT_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_KEY_SEL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_KEY_SEL.
 */
#define READ_L3_DEFIP_KEY_SELr(u,r) bcmbd_cmicd_reg_block_read(u,L3_DEFIP_KEY_SELr_BLKACC,1,L3_DEFIP_KEY_SELr_OFFSET,0,(r._l3_defip_key_sel), 1)
#define WRITE_L3_DEFIP_KEY_SELr(u,r) bcmbd_cmicd_reg_block_write(u,L3_DEFIP_KEY_SELr_BLKACC,1,L3_DEFIP_KEY_SELr_OFFSET,0,&(r._l3_defip_key_sel), 1)

/*******************************************************************************
 * End of 'L3_DEFIP_KEY_SELr'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     194
 */
/*
 * These macros can be used to access L3_DEFIP_ONLY.
 */
#define READ_L3_DEFIP_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ONLYm_BLKACC)+1,L3_DEFIP_ONLYm_OFFSET+i,(m._l3_defip_only),7)
#define WRITE_L3_DEFIP_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_ONLYm_BLKACC)+1,L3_DEFIP_ONLYm_OFFSET+i,&(m._l3_defip_only),7)

/*******************************************************************************
 * End of 'L3_DEFIP_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_PAIR_128
 * BLOCKS:   IPIPE
 * SIZE:     474
 */
/*
 * These macros can be used to access L3_DEFIP_PAIR_128.
 */
#define READ_L3_DEFIP_PAIR_128m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_PAIR_128m_BLKACC)+1,L3_DEFIP_PAIR_128m_OFFSET+i,(m._l3_defip_pair_128),15)
#define WRITE_L3_DEFIP_PAIR_128m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_PAIR_128m_BLKACC)+1,L3_DEFIP_PAIR_128m_OFFSET+i,&(m._l3_defip_pair_128),15)

/*******************************************************************************
 * End of 'L3_DEFIP_PAIR_128m'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_PAIR_128_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     85
 */
/*
 * These macros can be used to access L3_DEFIP_PAIR_128_DATA_ONLY.
 */
#define READ_L3_DEFIP_PAIR_128_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_PAIR_128_DATA_ONLYm_BLKACC)+1,L3_DEFIP_PAIR_128_DATA_ONLYm_OFFSET+i,(m._l3_defip_pair_128_data_only),3)
#define WRITE_L3_DEFIP_PAIR_128_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_PAIR_128_DATA_ONLYm_BLKACC)+1,L3_DEFIP_PAIR_128_DATA_ONLYm_OFFSET+i,&(m._l3_defip_pair_128_data_only),3)

/*******************************************************************************
 * End of 'L3_DEFIP_PAIR_128_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_PAIR_128_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     1
 */
/*
 * These macros can be used to access L3_DEFIP_PAIR_128_HIT_ONLY.
 */
#define READ_L3_DEFIP_PAIR_128_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_PAIR_128_HIT_ONLYm_BLKACC)+1,L3_DEFIP_PAIR_128_HIT_ONLYm_OFFSET+i,(m._l3_defip_pair_128_hit_only),1)
#define WRITE_L3_DEFIP_PAIR_128_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_PAIR_128_HIT_ONLYm_BLKACC)+1,L3_DEFIP_PAIR_128_HIT_ONLYm_OFFSET+i,&(m._l3_defip_pair_128_hit_only),1)

/*******************************************************************************
 * End of 'L3_DEFIP_PAIR_128_HIT_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_DEFIP_PAIR_128_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     388
 */
/*
 * These macros can be used to access L3_DEFIP_PAIR_128_ONLY.
 */
#define READ_L3_DEFIP_PAIR_128_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_PAIR_128_ONLYm_BLKACC)+1,L3_DEFIP_PAIR_128_ONLYm_OFFSET+i,(m._l3_defip_pair_128_only),13)
#define WRITE_L3_DEFIP_PAIR_128_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_DEFIP_PAIR_128_ONLYm_BLKACC)+1,L3_DEFIP_PAIR_128_ONLYm_OFFSET+i,&(m._l3_defip_pair_128_only),13)

/*******************************************************************************
 * End of 'L3_DEFIP_PAIR_128_ONLYm'
 */




/*******************************************************************************
 * SWFORMAT:  L3_DEFIP_REPLACE_DATA
 * BLOCKS:
 * SIZE:     67
 */
/*******************************************************************************
 * End of 'L3_DEFIP_REPLACE_DATA'
 */




/*******************************************************************************
 * REGISTER:  L3_DEFIP_RPF_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_DEFIP_RPF_CONTROL.
 */
#define READ_L3_DEFIP_RPF_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L3_DEFIP_RPF_CONTROLr_BLKACC,1,L3_DEFIP_RPF_CONTROLr_OFFSET,0,(r._l3_defip_rpf_control), 1)
#define WRITE_L3_DEFIP_RPF_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L3_DEFIP_RPF_CONTROLr_BLKACC,1,L3_DEFIP_RPF_CONTROLr_OFFSET,0,&(r._l3_defip_rpf_control), 1)

/*******************************************************************************
 * End of 'L3_DEFIP_RPF_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  L3_ECMP
 * BLOCKS:   IPIPE
 * SIZE:     34
 */
/*
 * These macros can be used to access L3_ECMP.
 */
#define READ_L3_ECMPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ECMPm_BLKACC)+1,L3_ECMPm_OFFSET+i,(m._l3_ecmp),2)
#define WRITE_L3_ECMPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ECMPm_BLKACC)+1,L3_ECMPm_OFFSET+i,&(m._l3_ecmp),2)

/*******************************************************************************
 * End of 'L3_ECMPm'
 */




/*******************************************************************************
 * MEMORY:  L3_ECMP_COUNT
 * BLOCKS:   IPIPE
 * SIZE:     157
 */
/*
 * These macros can be used to access L3_ECMP_COUNT.
 */
#define READ_L3_ECMP_COUNTm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ECMP_COUNTm_BLKACC)+1,L3_ECMP_COUNTm_OFFSET+i,(m._l3_ecmp_count),5)
#define WRITE_L3_ECMP_COUNTm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ECMP_COUNTm_BLKACC)+1,L3_ECMP_COUNTm_OFFSET+i,&(m._l3_ecmp_count),5)

/*******************************************************************************
 * End of 'L3_ECMP_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  L3_ECMP_RRLB_CNT
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access L3_ECMP_RRLB_CNT.
 */
#define READ_L3_ECMP_RRLB_CNTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,L3_ECMP_RRLB_CNTm_BLKACC,1,n,0,L3_ECMP_RRLB_CNTm_OFFSET,i,(m._l3_ecmp_rrlb_cnt),1)
#define WRITE_L3_ECMP_RRLB_CNTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,L3_ECMP_RRLB_CNTm_BLKACC,1,n,0,L3_ECMP_RRLB_CNTm_OFFSET,i,&(m._l3_ecmp_rrlb_cnt),1)
#define WRITE_L3_ECMP_RRLB_CNTm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,L3_ECMP_RRLB_CNTm_BLKACC,1,-1,0,L3_ECMP_RRLB_CNTm_OFFSET,i,&(m._l3_ecmp_rrlb_cnt),1)

/*******************************************************************************
 * End of 'L3_ECMP_RRLB_CNTm'
 */




/*******************************************************************************
 * REGISTER:  L3_ENTRY_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_ENTRY_CONTROL_0.
 */
#define READ_L3_ENTRY_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_ENTRY_CONTROL_0r_BLKACC,1,n,0,L3_ENTRY_CONTROL_0r_OFFSET,0,(r._l3_entry_control_0),1)
#define WRITE_L3_ENTRY_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_ENTRY_CONTROL_0r_BLKACC,1,n,0,L3_ENTRY_CONTROL_0r_OFFSET,0,&(r._l3_entry_control_0),1)
#define WRITE_L3_ENTRY_CONTROL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_ENTRY_CONTROL_0r_BLKACC,1,-1,0,L3_ENTRY_CONTROL_0r_OFFSET,0,&(r._l3_entry_control_0),1)

/*******************************************************************************
 * End of 'L3_ENTRY_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  L3_ENTRY_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_ENTRY_CONTROL_1.
 */
#define READ_L3_ENTRY_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_ENTRY_CONTROL_1r_BLKACC,1,n,0,L3_ENTRY_CONTROL_1r_OFFSET,0,(r._l3_entry_control_1),1)
#define WRITE_L3_ENTRY_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_ENTRY_CONTROL_1r_BLKACC,1,n,0,L3_ENTRY_CONTROL_1r_OFFSET,0,&(r._l3_entry_control_1),1)
#define WRITE_L3_ENTRY_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_ENTRY_CONTROL_1r_BLKACC,1,-1,0,L3_ENTRY_CONTROL_1r_OFFSET,0,&(r._l3_entry_control_1),1)

/*******************************************************************************
 * End of 'L3_ENTRY_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  L3_ENTRY_CONTROL_10
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_ENTRY_CONTROL_10.
 */
#define READ_L3_ENTRY_CONTROL_10r(u,r) bcmbd_cmicd_reg_block_read(u,L3_ENTRY_CONTROL_10r_BLKACC,1,L3_ENTRY_CONTROL_10r_OFFSET,0,(r._l3_entry_control_10), 1)
#define WRITE_L3_ENTRY_CONTROL_10r(u,r) bcmbd_cmicd_reg_block_write(u,L3_ENTRY_CONTROL_10r_BLKACC,1,L3_ENTRY_CONTROL_10r_OFFSET,0,&(r._l3_entry_control_10), 1)

/*******************************************************************************
 * End of 'L3_ENTRY_CONTROL_10r'
 */




/*******************************************************************************
 * MEMORY:  L3_ENTRY_HIT_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     4
 */
/*
 * These macros can be used to access L3_ENTRY_HIT_ONLY.
 */
#define READ_L3_ENTRY_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_HIT_ONLYm_BLKACC)+1,L3_ENTRY_HIT_ONLYm_OFFSET+i,(m._l3_entry_hit_only),1)
#define WRITE_L3_ENTRY_HIT_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_HIT_ONLYm_BLKACC)+1,L3_ENTRY_HIT_ONLYm_OFFSET+i,&(m._l3_entry_hit_only),1)

/*******************************************************************************
 * End of 'L3_ENTRY_HIT_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_ENTRY_IPV4_MULTICAST
 * BLOCKS:   IPIPE
 * SIZE:     212
 */
/*
 * These macros can be used to access L3_ENTRY_IPV4_MULTICAST.
 */
#define READ_L3_ENTRY_IPV4_MULTICASTm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_IPV4_MULTICASTm_BLKACC)+1,L3_ENTRY_IPV4_MULTICASTm_OFFSET+i,(m._l3_entry_ipv4_multicast),7)
#define WRITE_L3_ENTRY_IPV4_MULTICASTm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_IPV4_MULTICASTm_BLKACC)+1,L3_ENTRY_IPV4_MULTICASTm_OFFSET+i,&(m._l3_entry_ipv4_multicast),7)

/*******************************************************************************
 * End of 'L3_ENTRY_IPV4_MULTICASTm'
 */




/*******************************************************************************
 * MEMORY:  L3_ENTRY_IPV4_UNICAST
 * BLOCKS:   IPIPE
 * SIZE:     106
 */
/*
 * These macros can be used to access L3_ENTRY_IPV4_UNICAST.
 */
#define READ_L3_ENTRY_IPV4_UNICASTm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_IPV4_UNICASTm_BLKACC)+1,L3_ENTRY_IPV4_UNICASTm_OFFSET+i,(m._l3_entry_ipv4_unicast),4)
#define WRITE_L3_ENTRY_IPV4_UNICASTm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_IPV4_UNICASTm_BLKACC)+1,L3_ENTRY_IPV4_UNICASTm_OFFSET+i,&(m._l3_entry_ipv4_unicast),4)

/*******************************************************************************
 * End of 'L3_ENTRY_IPV4_UNICASTm'
 */




/*******************************************************************************
 * MEMORY:  L3_ENTRY_IPV6_MULTICAST
 * BLOCKS:   IPIPE
 * SIZE:     424
 */
/*
 * These macros can be used to access L3_ENTRY_IPV6_MULTICAST.
 */
#define READ_L3_ENTRY_IPV6_MULTICASTm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_IPV6_MULTICASTm_BLKACC)+1,L3_ENTRY_IPV6_MULTICASTm_OFFSET+i,(m._l3_entry_ipv6_multicast),14)
#define WRITE_L3_ENTRY_IPV6_MULTICASTm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_IPV6_MULTICASTm_BLKACC)+1,L3_ENTRY_IPV6_MULTICASTm_OFFSET+i,&(m._l3_entry_ipv6_multicast),14)

/*******************************************************************************
 * End of 'L3_ENTRY_IPV6_MULTICASTm'
 */




/*******************************************************************************
 * MEMORY:  L3_ENTRY_IPV6_UNICAST
 * BLOCKS:   IPIPE
 * SIZE:     212
 */
/*
 * These macros can be used to access L3_ENTRY_IPV6_UNICAST.
 */
#define READ_L3_ENTRY_IPV6_UNICASTm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_IPV6_UNICASTm_BLKACC)+1,L3_ENTRY_IPV6_UNICASTm_OFFSET+i,(m._l3_entry_ipv6_unicast),7)
#define WRITE_L3_ENTRY_IPV6_UNICASTm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_IPV6_UNICASTm_BLKACC)+1,L3_ENTRY_IPV6_UNICASTm_OFFSET+i,&(m._l3_entry_ipv6_unicast),7)

/*******************************************************************************
 * End of 'L3_ENTRY_IPV6_UNICASTm'
 */




/*******************************************************************************
 * MEMORY:  L3_ENTRY_ISS_LP
 * BLOCKS:   IPIPE
 * SIZE:     44
 */
/*
 * These macros can be used to access L3_ENTRY_ISS_LP.
 */
#define READ_L3_ENTRY_ISS_LPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_ISS_LPm_BLKACC)+1,L3_ENTRY_ISS_LPm_OFFSET+i,(m._l3_entry_iss_lp),2)
#define WRITE_L3_ENTRY_ISS_LPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_ISS_LPm_BLKACC)+1,L3_ENTRY_ISS_LPm_OFFSET+i,&(m._l3_entry_iss_lp),2)

/*******************************************************************************
 * End of 'L3_ENTRY_ISS_LPm'
 */




/*******************************************************************************
 * MEMORY:  L3_ENTRY_LP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_ENTRY_LP.
 */
#define READ_L3_ENTRY_LPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_LPm_BLKACC)+1,L3_ENTRY_LPm_OFFSET+i,(m._l3_entry_lp),1)
#define WRITE_L3_ENTRY_LPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_LPm_BLKACC)+1,L3_ENTRY_LPm_OFFSET+i,&(m._l3_entry_lp),1)

/*******************************************************************************
 * End of 'L3_ENTRY_LPm'
 */




/*******************************************************************************
 * MEMORY:  L3_ENTRY_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     105
 */
/*
 * These macros can be used to access L3_ENTRY_ONLY.
 */
#define READ_L3_ENTRY_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_ONLYm_BLKACC)+1,L3_ENTRY_ONLYm_OFFSET+i,(m._l3_entry_only),4)
#define WRITE_L3_ENTRY_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_ONLYm_BLKACC)+1,L3_ENTRY_ONLYm_OFFSET+i,&(m._l3_entry_only),4)

/*******************************************************************************
 * End of 'L3_ENTRY_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_ENTRY_ONLY_ECC
 * BLOCKS:   IPIPE
 * SIZE:     113
 */
/*
 * These macros can be used to access L3_ENTRY_ONLY_ECC.
 */
#define READ_L3_ENTRY_ONLY_ECCm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_ONLY_ECCm_BLKACC)+1,L3_ENTRY_ONLY_ECCm_OFFSET+i,(m._l3_entry_only_ecc),4)
#define WRITE_L3_ENTRY_ONLY_ECCm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_ENTRY_ONLY_ECCm_BLKACC)+1,L3_ENTRY_ONLY_ECCm_OFFSET+i,&(m._l3_entry_only_ecc),4)

/*******************************************************************************
 * End of 'L3_ENTRY_ONLY_ECCm'
 */




/*******************************************************************************
 * REGISTER:  L3_ENTRY_PARITY_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_ENTRY_PARITY_CONTROL.
 */
#define READ_L3_ENTRY_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L3_ENTRY_PARITY_CONTROLr_BLKACC,1,L3_ENTRY_PARITY_CONTROLr_OFFSET,0,(r._l3_entry_parity_control), 1)
#define WRITE_L3_ENTRY_PARITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L3_ENTRY_PARITY_CONTROLr_BLKACC,1,L3_ENTRY_PARITY_CONTROLr_OFFSET,0,&(r._l3_entry_parity_control), 1)

/*******************************************************************************
 * End of 'L3_ENTRY_PARITY_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  L3_IIF
 * BLOCKS:   IPIPE
 * SIZE:     82
 */
/*
 * These macros can be used to access L3_IIF.
 */
#define READ_L3_IIFm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_IIFm_BLKACC)+1,L3_IIFm_OFFSET+i,(m._l3_iif),3)
#define WRITE_L3_IIFm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_IIFm_BLKACC)+1,L3_IIFm_OFFSET+i,&(m._l3_iif),3)

/*******************************************************************************
 * End of 'L3_IIFm'
 */




/*******************************************************************************
 * MEMORY:  L3_IIF_PROFILE
 * BLOCKS:   IPIPE
 * SIZE:     30
 */
/*
 * These macros can be used to access L3_IIF_PROFILE.
 */
#define READ_L3_IIF_PROFILEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_IIF_PROFILEm_BLKACC)+1,L3_IIF_PROFILEm_OFFSET+i,(m._l3_iif_profile),1)
#define WRITE_L3_IIF_PROFILEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_IIF_PROFILEm_BLKACC)+1,L3_IIF_PROFILEm_OFFSET+i,&(m._l3_iif_profile),1)

/*******************************************************************************
 * End of 'L3_IIF_PROFILEm'
 */




/*******************************************************************************
 * MEMORY:  L3_IPMC
 * BLOCKS:   IPIPE
 * SIZE:     333
 */
/*
 * These macros can be used to access L3_IPMC.
 */
#define READ_L3_IPMCm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_IPMCm_BLKACC)+1,L3_IPMCm_OFFSET+i,(m._l3_ipmc),11)
#define WRITE_L3_IPMCm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_IPMCm_BLKACC)+1,L3_IPMCm_OFFSET+i,&(m._l3_ipmc),11)

/*******************************************************************************
 * End of 'L3_IPMCm'
 */




/*******************************************************************************
 * MEMORY:  L3_IPMC_REMAP
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access L3_IPMC_REMAP.
 */
#define READ_L3_IPMC_REMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_IPMC_REMAPm_BLKACC)+1,L3_IPMC_REMAPm_OFFSET+i,(m._l3_ipmc_remap),1)
#define WRITE_L3_IPMC_REMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_IPMC_REMAPm_BLKACC)+1,L3_IPMC_REMAPm_OFFSET+i,&(m._l3_ipmc_remap),1)

/*******************************************************************************
 * End of 'L3_IPMC_REMAPm'
 */




/*******************************************************************************
 * REGISTER:  L3_LP_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_LP_CONTROL_0.
 */
#define READ_L3_LP_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_LP_CONTROL_0r_BLKACC,1,n,0,L3_LP_CONTROL_0r_OFFSET,0,(r._l3_lp_control_0),1)
#define WRITE_L3_LP_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_LP_CONTROL_0r_BLKACC,1,n,0,L3_LP_CONTROL_0r_OFFSET,0,&(r._l3_lp_control_0),1)
#define WRITE_L3_LP_CONTROL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_LP_CONTROL_0r_BLKACC,1,-1,0,L3_LP_CONTROL_0r_OFFSET,0,&(r._l3_lp_control_0),1)

/*******************************************************************************
 * End of 'L3_LP_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  L3_LP_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_LP_CONTROL_1.
 */
#define READ_L3_LP_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_LP_CONTROL_1r_BLKACC,1,n,0,L3_LP_CONTROL_1r_OFFSET,0,(r._l3_lp_control_1),1)
#define WRITE_L3_LP_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_LP_CONTROL_1r_BLKACC,1,n,0,L3_LP_CONTROL_1r_OFFSET,0,&(r._l3_lp_control_1),1)
#define WRITE_L3_LP_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_LP_CONTROL_1r_BLKACC,1,-1,0,L3_LP_CONTROL_1r_OFFSET,0,&(r._l3_lp_control_1),1)

/*******************************************************************************
 * End of 'L3_LP_CONTROL_1r'
 */




/*******************************************************************************
 * MEMORY:  L3_MTU_VALUES
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access L3_MTU_VALUES.
 */
#define READ_L3_MTU_VALUESm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_MTU_VALUESm_BLKACC)+1,L3_MTU_VALUESm_OFFSET+i,(m._l3_mtu_values),1)
#define WRITE_L3_MTU_VALUESm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_MTU_VALUESm_BLKACC)+1,L3_MTU_VALUESm_OFFSET+i,&(m._l3_mtu_values),1)

/*******************************************************************************
 * End of 'L3_MTU_VALUESm'
 */




/*******************************************************************************
 * REGISTER:  L3_TABLE_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_TABLE_HASH_CONTROL.
 */
#define READ_L3_TABLE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,L3_TABLE_HASH_CONTROLr_BLKACC,1,L3_TABLE_HASH_CONTROLr_OFFSET,0,(r._l3_table_hash_control), 1)
#define WRITE_L3_TABLE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,L3_TABLE_HASH_CONTROLr_BLKACC,1,L3_TABLE_HASH_CONTROLr_OFFSET,0,&(r._l3_table_hash_control), 1)

/*******************************************************************************
 * End of 'L3_TABLE_HASH_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL
 * BLOCKS:   IPIPE
 * SIZE:     400
 */
/*
 * These macros can be used to access L3_TUNNEL.
 */
#define READ_L3_TUNNELm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_TUNNELm_BLKACC)+1,L3_TUNNELm_OFFSET+i,(m._l3_tunnel),13)
#define WRITE_L3_TUNNELm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_TUNNELm_BLKACC)+1,L3_TUNNELm_OFFSET+i,&(m._l3_tunnel),13)

/*******************************************************************************
 * End of 'L3_TUNNELm'
 */




/*******************************************************************************
 * REGISTER:  L3_TUNNEL_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_TUNNEL_CAM_BIST_CONFIG.
 */
#define READ_L3_TUNNEL_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_TUNNEL_CAM_BIST_CONFIGr_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_CONFIGr_OFFSET,0,(r._l3_tunnel_cam_bist_config),1)
#define WRITE_L3_TUNNEL_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_CONFIGr_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_CONFIGr_OFFSET,0,&(r._l3_tunnel_cam_bist_config),1)
#define WRITE_L3_TUNNEL_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_CONFIGr_BLKACC,1,-1,0,L3_TUNNEL_CAM_BIST_CONFIGr_OFFSET,0,&(r._l3_tunnel_cam_bist_config),1)

/*******************************************************************************
 * End of 'L3_TUNNEL_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  L3_TUNNEL_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_TUNNEL_CAM_BIST_DBG_DATA.
 */
#define READ_L3_TUNNEL_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_TUNNEL_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_DBG_DATAr_OFFSET,0,(r._l3_tunnel_cam_bist_dbg_data),1)
#define WRITE_L3_TUNNEL_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._l3_tunnel_cam_bist_dbg_data),1)
#define WRITE_L3_TUNNEL_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,L3_TUNNEL_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._l3_tunnel_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'L3_TUNNEL_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  L3_TUNNEL_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L3_TUNNEL_CAM_BIST_STATUS.
 */
#define READ_L3_TUNNEL_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_TUNNEL_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_STATUSr_OFFSET,0,(r._l3_tunnel_cam_bist_status),1)
#define WRITE_L3_TUNNEL_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_STATUSr_BLKACC,1,n,0,L3_TUNNEL_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_tunnel_cam_bist_status),1)
#define WRITE_L3_TUNNEL_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_TUNNEL_CAM_BIST_STATUSr_BLKACC,1,-1,0,L3_TUNNEL_CAM_BIST_STATUSr_OFFSET,0,&(r._l3_tunnel_cam_bist_status),1)

/*******************************************************************************
 * End of 'L3_TUNNEL_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  L3_TUNNEL_CAM_DBGCTRL_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access L3_TUNNEL_CAM_DBGCTRL_64.
 */
#define READ_L3_TUNNEL_CAM_DBGCTRL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,L3_TUNNEL_CAM_DBGCTRL_64r_BLKACC,1,n,0,L3_TUNNEL_CAM_DBGCTRL_64r_OFFSET,0,(r._l3_tunnel_cam_dbgctrl_64),2)
#define WRITE_L3_TUNNEL_CAM_DBGCTRL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,L3_TUNNEL_CAM_DBGCTRL_64r_BLKACC,1,n,0,L3_TUNNEL_CAM_DBGCTRL_64r_OFFSET,0,&(r._l3_tunnel_cam_dbgctrl_64),2)
#define WRITE_L3_TUNNEL_CAM_DBGCTRL_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,L3_TUNNEL_CAM_DBGCTRL_64r_BLKACC,1,-1,0,L3_TUNNEL_CAM_DBGCTRL_64r_OFFSET,0,&(r._l3_tunnel_cam_dbgctrl_64),2)

/*******************************************************************************
 * End of 'L3_TUNNEL_CAM_DBGCTRL_64r'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     189
 */
/*
 * These macros can be used to access L3_TUNNEL_DATA_ONLY.
 */
#define READ_L3_TUNNEL_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_TUNNEL_DATA_ONLYm_BLKACC)+1,L3_TUNNEL_DATA_ONLYm_OFFSET+i,(m._l3_tunnel_data_only),6)
#define WRITE_L3_TUNNEL_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_TUNNEL_DATA_ONLYm_BLKACC)+1,L3_TUNNEL_DATA_ONLYm_OFFSET+i,&(m._l3_tunnel_data_only),6)

/*******************************************************************************
 * End of 'L3_TUNNEL_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  L3_TUNNEL_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     211
 */
/*
 * These macros can be used to access L3_TUNNEL_ONLY.
 */
#define READ_L3_TUNNEL_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(L3_TUNNEL_ONLYm_BLKACC)+1,L3_TUNNEL_ONLYm_OFFSET+i,(m._l3_tunnel_only),7)
#define WRITE_L3_TUNNEL_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(L3_TUNNEL_ONLYm_BLKACC)+1,L3_TUNNEL_ONLYm_OFFSET+i,&(m._l3_tunnel_only),7)

/*******************************************************************************
 * End of 'L3_TUNNEL_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  L4_DST_PORT_MAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L4_DST_PORT_MAP.
 */
#define READ_L4_DST_PORT_MAPr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,L4_DST_PORT_MAPr_BLKACC,1,n,0,L4_DST_PORT_MAPr_OFFSET,i,(r._l4_dst_port_map),1)
#define WRITE_L4_DST_PORT_MAPr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,L4_DST_PORT_MAPr_BLKACC,1,n,0,L4_DST_PORT_MAPr_OFFSET,i,&(r._l4_dst_port_map),1)
#define WRITE_L4_DST_PORT_MAPr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,L4_DST_PORT_MAPr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,L4_DST_PORT_MAPr_OFFSET,i,&(r._l4_dst_port_map),1)

/*******************************************************************************
 * End of 'L4_DST_PORT_MAPr'
 */




/*******************************************************************************
 * REGISTER:  L4_SRC_PORT_MAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access L4_SRC_PORT_MAP.
 */
#define READ_L4_SRC_PORT_MAPr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,L4_SRC_PORT_MAPr_BLKACC,1,n,0,L4_SRC_PORT_MAPr_OFFSET,i,(r._l4_src_port_map),1)
#define WRITE_L4_SRC_PORT_MAPr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,L4_SRC_PORT_MAPr_BLKACC,1,n,0,L4_SRC_PORT_MAPr_OFFSET,i,&(r._l4_src_port_map),1)
#define WRITE_L4_SRC_PORT_MAPr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,L4_SRC_PORT_MAPr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,L4_SRC_PORT_MAPr_OFFSET,i,&(r._l4_src_port_map),1)

/*******************************************************************************
 * End of 'L4_SRC_PORT_MAPr'
 */




/*******************************************************************************
 * REGISTER:  LEARN_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access LEARN_CONTROL.
 */
#define READ_LEARN_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,LEARN_CONTROLr_BLKACC,1,LEARN_CONTROLr_OFFSET,0,(r._learn_control), 1)
#define WRITE_LEARN_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,LEARN_CONTROLr_BLKACC,1,LEARN_CONTROLr_OFFSET,0,&(r._learn_control), 1)

/*******************************************************************************
 * End of 'LEARN_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  LEARN_FIFO_ECC_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access LEARN_FIFO_ECC_CONTROL.
 */
#define READ_LEARN_FIFO_ECC_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,LEARN_FIFO_ECC_CONTROLr_BLKACC,1,LEARN_FIFO_ECC_CONTROLr_OFFSET,0,(r._learn_fifo_ecc_control), 1)
#define WRITE_LEARN_FIFO_ECC_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,LEARN_FIFO_ECC_CONTROLr_BLKACC,1,LEARN_FIFO_ECC_CONTROLr_OFFSET,0,&(r._learn_fifo_ecc_control), 1)

/*******************************************************************************
 * End of 'LEARN_FIFO_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  LINK_LIST_DEBUG_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access LINK_LIST_DEBUG_TM.
 */
#define READ_LINK_LIST_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,LINK_LIST_DEBUG_TMr_BLKACC,3,0,p,LINK_LIST_DEBUG_TMr_OFFSET,0,(r._link_list_debug_tm),1)
#define WRITE_LINK_LIST_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,LINK_LIST_DEBUG_TMr_BLKACC,3,0,p,LINK_LIST_DEBUG_TMr_OFFSET,0,&(r._link_list_debug_tm),1)

/*******************************************************************************
 * End of 'LINK_LIST_DEBUG_TMr'
 */




/*******************************************************************************
 * MEMORY:  LINK_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access LINK_STATUS.
 */
#define READ_LINK_STATUSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(LINK_STATUSm_BLKACC)+1,LINK_STATUSm_OFFSET+i,(m._link_status),5)
#define WRITE_LINK_STATUSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(LINK_STATUSm_BLKACC)+1,LINK_STATUSm_OFFSET+i,&(m._link_status),5)

/*******************************************************************************
 * End of 'LINK_STATUSm'
 */




/*******************************************************************************
 * REGISTER:  LOCAL_SW_DISABLE_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access LOCAL_SW_DISABLE_CTRL.
 */
#define READ_LOCAL_SW_DISABLE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,LOCAL_SW_DISABLE_CTRLr_BLKACC,p,LOCAL_SW_DISABLE_CTRLr_OFFSET,0,(r._local_sw_disable_ctrl), 1)
#define WRITE_LOCAL_SW_DISABLE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,LOCAL_SW_DISABLE_CTRLr_BLKACC,p,LOCAL_SW_DISABLE_CTRLr_OFFSET,0,&(r._local_sw_disable_ctrl), 1)

/*******************************************************************************
 * End of 'LOCAL_SW_DISABLE_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  LOCAL_SW_DISABLE_DEFAULT_PBM
 * BLOCKS:   IPIPE
 * SIZE:     145
 */
/*
 * These macros can be used to access LOCAL_SW_DISABLE_DEFAULT_PBM.
 */
#define READ_LOCAL_SW_DISABLE_DEFAULT_PBMm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(LOCAL_SW_DISABLE_DEFAULT_PBMm_BLKACC)+1,LOCAL_SW_DISABLE_DEFAULT_PBMm_OFFSET+i,(m._local_sw_disable_default_pbm),5)
#define WRITE_LOCAL_SW_DISABLE_DEFAULT_PBMm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(LOCAL_SW_DISABLE_DEFAULT_PBMm_BLKACC)+1,LOCAL_SW_DISABLE_DEFAULT_PBMm_OFFSET+i,&(m._local_sw_disable_default_pbm),5)

/*******************************************************************************
 * End of 'LOCAL_SW_DISABLE_DEFAULT_PBMm'
 */




/*******************************************************************************
 * MEMORY:  LOCAL_SW_DISABLE_DEFAULT_PBM_MIRR
 * BLOCKS:   IPIPE
 * SIZE:     9
 */
/*
 * These macros can be used to access LOCAL_SW_DISABLE_DEFAULT_PBM_MIRR.
 */
#define READ_LOCAL_SW_DISABLE_DEFAULT_PBM_MIRRm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(LOCAL_SW_DISABLE_DEFAULT_PBM_MIRRm_BLKACC)+1,LOCAL_SW_DISABLE_DEFAULT_PBM_MIRRm_OFFSET+i,(m._local_sw_disable_default_pbm_mirr),1)
#define WRITE_LOCAL_SW_DISABLE_DEFAULT_PBM_MIRRm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(LOCAL_SW_DISABLE_DEFAULT_PBM_MIRRm_BLKACC)+1,LOCAL_SW_DISABLE_DEFAULT_PBM_MIRRm_OFFSET+i,&(m._local_sw_disable_default_pbm_mirr),1)

/*******************************************************************************
 * End of 'LOCAL_SW_DISABLE_DEFAULT_PBM_MIRRm'
 */




/*******************************************************************************
 * MEMORY:  LPORT_TAB
 * BLOCKS:   IPIPE
 * SIZE:     424
 */
/*
 * These macros can be used to access LPORT_TAB.
 */
#define READ_LPORT_TABm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(LPORT_TABm_BLKACC)+1,LPORT_TABm_OFFSET+i,(m._lport_tab),14)
#define WRITE_LPORT_TABm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(LPORT_TABm_BLKACC)+1,LPORT_TABm_OFFSET+i,&(m._lport_tab),14)

/*******************************************************************************
 * End of 'LPORT_TABm'
 */




/*******************************************************************************
 * MEMORY:  MAC_BLOCK
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access MAC_BLOCK.
 */
#define READ_MAC_BLOCKm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MAC_BLOCKm_BLKACC)+1,MAC_BLOCKm_OFFSET+i,(m._mac_block),5)
#define WRITE_MAC_BLOCKm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MAC_BLOCKm_BLKACC)+1,MAC_BLOCKm_OFFSET+i,&(m._mac_block),5)

/*******************************************************************************
 * End of 'MAC_BLOCKm'
 */




/*******************************************************************************
 * REGISTER:  MB_MEMDEBUG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MB_MEMDEBUG.
 */
#define READ_MB_MEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MB_MEMDEBUGr_BLKACC,4,0,p,MB_MEMDEBUGr_OFFSET,0,(r._mb_memdebug),1)
#define WRITE_MB_MEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MB_MEMDEBUGr_BLKACC,4,0,p,MB_MEMDEBUGr_OFFSET,0,&(r._mb_memdebug),1)

/*******************************************************************************
 * End of 'MB_MEMDEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MCFP_MEM_DEBUG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MCFP_MEM_DEBUG.
 */
#define READ_MCFP_MEM_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MCFP_MEM_DEBUGr_BLKACC,4,0,p,MCFP_MEM_DEBUGr_OFFSET,0,(r._mcfp_mem_debug),1)
#define WRITE_MCFP_MEM_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MCFP_MEM_DEBUGr_BLKACC,4,0,p,MCFP_MEM_DEBUGr_OFFSET,0,&(r._mcfp_mem_debug),1)

/*******************************************************************************
 * End of 'MCFP_MEM_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MCQE_MEM_DEBUG_TM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MCQE_MEM_DEBUG_TM.
 */
#define READ_MCQE_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MCQE_MEM_DEBUG_TMr_BLKACC,4,0,p,MCQE_MEM_DEBUG_TMr_OFFSET,0,(r._mcqe_mem_debug_tm),1)
#define WRITE_MCQE_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MCQE_MEM_DEBUG_TMr_BLKACC,4,0,p,MCQE_MEM_DEBUG_TMr_OFFSET,0,&(r._mcqe_mem_debug_tm),1)

/*******************************************************************************
 * End of 'MCQE_MEM_DEBUG_TMr'
 */




/*******************************************************************************
 * REGISTER:  MCQN_MEM_DEBUG_TM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MCQN_MEM_DEBUG_TM.
 */
#define READ_MCQN_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MCQN_MEM_DEBUG_TMr_BLKACC,4,0,p,MCQN_MEM_DEBUG_TMr_OFFSET,0,(r._mcqn_mem_debug_tm),1)
#define WRITE_MCQN_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MCQN_MEM_DEBUG_TMr_BLKACC,4,0,p,MCQN_MEM_DEBUG_TMr_OFFSET,0,&(r._mcqn_mem_debug_tm),1)

/*******************************************************************************
 * End of 'MCQN_MEM_DEBUG_TMr'
 */




/*******************************************************************************
 * REGISTER:  MC_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MC_CONTROL_1.
 */
#define READ_MC_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,MC_CONTROL_1r_BLKACC,1,MC_CONTROL_1r_OFFSET,0,(r._mc_control_1), 1)
#define WRITE_MC_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,MC_CONTROL_1r_BLKACC,1,MC_CONTROL_1r_OFFSET,0,&(r._mc_control_1), 1)

/*******************************************************************************
 * End of 'MC_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  MC_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MC_CONTROL_2.
 */
#define READ_MC_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,MC_CONTROL_2r_BLKACC,1,MC_CONTROL_2r_OFFSET,0,(r._mc_control_2), 1)
#define WRITE_MC_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,MC_CONTROL_2r_BLKACC,1,MC_CONTROL_2r_OFFSET,0,&(r._mc_control_2), 1)

/*******************************************************************************
 * End of 'MC_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  MC_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MC_CONTROL_3.
 */
#define READ_MC_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,MC_CONTROL_3r_BLKACC,1,MC_CONTROL_3r_OFFSET,0,(r._mc_control_3), 1)
#define WRITE_MC_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,MC_CONTROL_3r_BLKACC,1,MC_CONTROL_3r_OFFSET,0,&(r._mc_control_3), 1)

/*******************************************************************************
 * End of 'MC_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  MC_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MC_CONTROL_4.
 */
#define READ_MC_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_read(u,MC_CONTROL_4r_BLKACC,1,MC_CONTROL_4r_OFFSET,0,(r._mc_control_4), 1)
#define WRITE_MC_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_write(u,MC_CONTROL_4r_BLKACC,1,MC_CONTROL_4r_OFFSET,0,&(r._mc_control_4), 1)

/*******************************************************************************
 * End of 'MC_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  MC_CONTROL_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MC_CONTROL_5.
 */
#define READ_MC_CONTROL_5r(u,r) bcmbd_cmicd_reg_block_read(u,MC_CONTROL_5r_BLKACC,1,MC_CONTROL_5r_OFFSET,0,(r._mc_control_5), 1)
#define WRITE_MC_CONTROL_5r(u,r) bcmbd_cmicd_reg_block_write(u,MC_CONTROL_5r_BLKACC,1,MC_CONTROL_5r_OFFSET,0,&(r._mc_control_5), 1)

/*******************************************************************************
 * End of 'MC_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  MIM_DEFAULT_NETWORK_SVP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MIM_DEFAULT_NETWORK_SVP.
 */
#define READ_MIM_DEFAULT_NETWORK_SVPr(u,r) bcmbd_cmicd_reg_block_read(u,MIM_DEFAULT_NETWORK_SVPr_BLKACC,1,MIM_DEFAULT_NETWORK_SVPr_OFFSET,0,(r._mim_default_network_svp), 1)
#define WRITE_MIM_DEFAULT_NETWORK_SVPr(u,r) bcmbd_cmicd_reg_block_write(u,MIM_DEFAULT_NETWORK_SVPr_BLKACC,1,MIM_DEFAULT_NETWORK_SVPr_OFFSET,0,&(r._mim_default_network_svp), 1)

/*******************************************************************************
 * End of 'MIM_DEFAULT_NETWORK_SVPr'
 */




/*******************************************************************************
 * REGISTER:  MIM_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MIM_ETHERTYPE.
 */
#define READ_MIM_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,MIM_ETHERTYPEr_BLKACC,1,MIM_ETHERTYPEr_OFFSET,0,(r._mim_ethertype), 1)
#define WRITE_MIM_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,MIM_ETHERTYPEr_BLKACC,1,MIM_ETHERTYPEr_OFFSET,0,&(r._mim_ethertype), 1)

/*******************************************************************************
 * End of 'MIM_ETHERTYPEr'
 */




/*******************************************************************************
 * MEMORY:  MIRROR_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access MIRROR_CONTROL.
 */
#define READ_MIRROR_CONTROLm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MIRROR_CONTROLm_BLKACC)+1,MIRROR_CONTROLm_OFFSET+i,(m._mirror_control),1)
#define WRITE_MIRROR_CONTROLm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MIRROR_CONTROLm_BLKACC)+1,MIRROR_CONTROLm_OFFSET+i,&(m._mirror_control),1)

/*******************************************************************************
 * End of 'MIRROR_CONTROLm'
 */




/*******************************************************************************
 * REGISTER:  MIRROR_CPU_COS_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MIRROR_CPU_COS_CONFIG.
 */
#define READ_MIRROR_CPU_COS_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,MIRROR_CPU_COS_CONFIGr_BLKACC,1,MIRROR_CPU_COS_CONFIGr_OFFSET,0,(r._mirror_cpu_cos_config), 1)
#define WRITE_MIRROR_CPU_COS_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,MIRROR_CPU_COS_CONFIGr_BLKACC,1,MIRROR_CPU_COS_CONFIGr_OFFSET,0,&(r._mirror_cpu_cos_config), 1)

/*******************************************************************************
 * End of 'MIRROR_CPU_COS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MIRROR_RQE_Q_NUM
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MIRROR_RQE_Q_NUM.
 */
#define READ_MIRROR_RQE_Q_NUMr(u,r) bcmbd_cmicd_reg_block_read(u,MIRROR_RQE_Q_NUMr_BLKACC,1,MIRROR_RQE_Q_NUMr_OFFSET,0,(r._mirror_rqe_q_num), 1)
#define WRITE_MIRROR_RQE_Q_NUMr(u,r) bcmbd_cmicd_reg_block_write(u,MIRROR_RQE_Q_NUMr_BLKACC,1,MIRROR_RQE_Q_NUMr_OFFSET,0,&(r._mirror_rqe_q_num), 1)

/*******************************************************************************
 * End of 'MIRROR_RQE_Q_NUMr'
 */




/*******************************************************************************
 * REGISTER:  MIRROR_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MIRROR_SELECT.
 */
#define READ_MIRROR_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,MIRROR_SELECTr_BLKACC,1,MIRROR_SELECTr_OFFSET,0,(r._mirror_select), 1)
#define WRITE_MIRROR_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,MIRROR_SELECTr_BLKACC,1,MIRROR_SELECTr_OFFSET,0,&(r._mirror_select), 1)

/*******************************************************************************
 * End of 'MIRROR_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  MMRP_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMRP_CONTROL_1.
 */
#define READ_MMRP_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,MMRP_CONTROL_1r_BLKACC,1,MMRP_CONTROL_1r_OFFSET,0,(r._mmrp_control_1), 1)
#define WRITE_MMRP_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,MMRP_CONTROL_1r_BLKACC,1,MMRP_CONTROL_1r_OFFSET,0,&(r._mmrp_control_1), 1)

/*******************************************************************************
 * End of 'MMRP_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  MMRP_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMRP_CONTROL_2.
 */
#define READ_MMRP_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,MMRP_CONTROL_2r_BLKACC,1,MMRP_CONTROL_2r_OFFSET,0,(r._mmrp_control_2), 1)
#define WRITE_MMRP_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,MMRP_CONTROL_2r_BLKACC,1,MMRP_CONTROL_2r_OFFSET,0,&(r._mmrp_control_2), 1)

/*******************************************************************************
 * End of 'MMRP_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_1DBG_A
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_1DBG_A.
 */
#define READ_MMU_1DBG_Ar(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_1DBG_Ar_BLKACC,4,0,p,MMU_1DBG_Ar_OFFSET,0,(r._mmu_1dbg_a),1)
#define WRITE_MMU_1DBG_Ar(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_1DBG_Ar_BLKACC,4,0,p,MMU_1DBG_Ar_OFFSET,0,&(r._mmu_1dbg_a),1)

/*******************************************************************************
 * End of 'MMU_1DBG_Ar'
 */




/*******************************************************************************
 * REGISTER:  MMU_1DBG_C
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_1DBG_C.
 */
#define READ_MMU_1DBG_Cr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_1DBG_Cr_BLKACC,4,0,p,MMU_1DBG_Cr_OFFSET,0,(r._mmu_1dbg_c),1)
#define WRITE_MMU_1DBG_Cr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_1DBG_Cr_BLKACC,4,0,p,MMU_1DBG_Cr_OFFSET,0,&(r._mmu_1dbg_c),1)

/*******************************************************************************
 * End of 'MMU_1DBG_Cr'
 */




/*******************************************************************************
 * REGISTER:  MMU_2DBG_C_0
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_2DBG_C_0.
 */
#define READ_MMU_2DBG_C_0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_2DBG_C_0r_BLKACC,4,0,p,MMU_2DBG_C_0r_OFFSET,0,(r._mmu_2dbg_c_0),1)
#define WRITE_MMU_2DBG_C_0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_2DBG_C_0r_BLKACC,4,0,p,MMU_2DBG_C_0r_OFFSET,0,&(r._mmu_2dbg_c_0),1)

/*******************************************************************************
 * End of 'MMU_2DBG_C_0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_2DBG_C_1
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_2DBG_C_1.
 */
#define READ_MMU_2DBG_C_1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_2DBG_C_1r_BLKACC,4,0,p,MMU_2DBG_C_1r_OFFSET,0,(r._mmu_2dbg_c_1),1)
#define WRITE_MMU_2DBG_C_1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_2DBG_C_1r_BLKACC,4,0,p,MMU_2DBG_C_1r_OFFSET,0,&(r._mmu_2dbg_c_1),1)

/*******************************************************************************
 * End of 'MMU_2DBG_C_1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_3DBG_C
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_3DBG_C.
 */
#define READ_MMU_3DBG_Cr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_3DBG_Cr_BLKACC,4,0,p,MMU_3DBG_Cr_OFFSET,0,(r._mmu_3dbg_c),1)
#define WRITE_MMU_3DBG_Cr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_3DBG_Cr_BLKACC,4,0,p,MMU_3DBG_Cr_OFFSET,0,&(r._mmu_3dbg_c),1)

/*******************************************************************************
 * End of 'MMU_3DBG_Cr'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData0
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData0.
 */
#define READ_MMU_CBPDATA0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA0m_BLKACC,4,0,p,MMU_CBPDATA0m_OFFSET,i,(m._mmu_cbpdata0),14)
#define WRITE_MMU_CBPDATA0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA0m_BLKACC,4,0,p,MMU_CBPDATA0m_OFFSET,i,&(m._mmu_cbpdata0),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData1
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData1.
 */
#define READ_MMU_CBPDATA1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA1m_BLKACC,4,0,p,MMU_CBPDATA1m_OFFSET,i,(m._mmu_cbpdata1),14)
#define WRITE_MMU_CBPDATA1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA1m_BLKACC,4,0,p,MMU_CBPDATA1m_OFFSET,i,&(m._mmu_cbpdata1),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData10
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData10.
 */
#define READ_MMU_CBPDATA10m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA10m_BLKACC,4,0,p,MMU_CBPDATA10m_OFFSET,i,(m._mmu_cbpdata10),14)
#define WRITE_MMU_CBPDATA10m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA10m_BLKACC,4,0,p,MMU_CBPDATA10m_OFFSET,i,&(m._mmu_cbpdata10),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA10m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData11
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData11.
 */
#define READ_MMU_CBPDATA11m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA11m_BLKACC,4,0,p,MMU_CBPDATA11m_OFFSET,i,(m._mmu_cbpdata11),14)
#define WRITE_MMU_CBPDATA11m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA11m_BLKACC,4,0,p,MMU_CBPDATA11m_OFFSET,i,&(m._mmu_cbpdata11),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA11m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData12
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData12.
 */
#define READ_MMU_CBPDATA12m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA12m_BLKACC,4,0,p,MMU_CBPDATA12m_OFFSET,i,(m._mmu_cbpdata12),14)
#define WRITE_MMU_CBPDATA12m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA12m_BLKACC,4,0,p,MMU_CBPDATA12m_OFFSET,i,&(m._mmu_cbpdata12),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA12m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData13
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData13.
 */
#define READ_MMU_CBPDATA13m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA13m_BLKACC,4,0,p,MMU_CBPDATA13m_OFFSET,i,(m._mmu_cbpdata13),14)
#define WRITE_MMU_CBPDATA13m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA13m_BLKACC,4,0,p,MMU_CBPDATA13m_OFFSET,i,&(m._mmu_cbpdata13),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA13m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData14
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData14.
 */
#define READ_MMU_CBPDATA14m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA14m_BLKACC,4,0,p,MMU_CBPDATA14m_OFFSET,i,(m._mmu_cbpdata14),14)
#define WRITE_MMU_CBPDATA14m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA14m_BLKACC,4,0,p,MMU_CBPDATA14m_OFFSET,i,&(m._mmu_cbpdata14),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA14m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData15
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData15.
 */
#define READ_MMU_CBPDATA15m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA15m_BLKACC,4,0,p,MMU_CBPDATA15m_OFFSET,i,(m._mmu_cbpdata15),14)
#define WRITE_MMU_CBPDATA15m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA15m_BLKACC,4,0,p,MMU_CBPDATA15m_OFFSET,i,&(m._mmu_cbpdata15),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA15m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData16
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData16.
 */
#define READ_MMU_CBPDATA16m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA16m_BLKACC,4,0,p,MMU_CBPDATA16m_OFFSET,i,(m._mmu_cbpdata16),14)
#define WRITE_MMU_CBPDATA16m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA16m_BLKACC,4,0,p,MMU_CBPDATA16m_OFFSET,i,&(m._mmu_cbpdata16),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA16m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData17
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData17.
 */
#define READ_MMU_CBPDATA17m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA17m_BLKACC,4,0,p,MMU_CBPDATA17m_OFFSET,i,(m._mmu_cbpdata17),14)
#define WRITE_MMU_CBPDATA17m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA17m_BLKACC,4,0,p,MMU_CBPDATA17m_OFFSET,i,&(m._mmu_cbpdata17),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA17m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData18
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData18.
 */
#define READ_MMU_CBPDATA18m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA18m_BLKACC,4,0,p,MMU_CBPDATA18m_OFFSET,i,(m._mmu_cbpdata18),14)
#define WRITE_MMU_CBPDATA18m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA18m_BLKACC,4,0,p,MMU_CBPDATA18m_OFFSET,i,&(m._mmu_cbpdata18),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA18m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData19
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData19.
 */
#define READ_MMU_CBPDATA19m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA19m_BLKACC,4,0,p,MMU_CBPDATA19m_OFFSET,i,(m._mmu_cbpdata19),14)
#define WRITE_MMU_CBPDATA19m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA19m_BLKACC,4,0,p,MMU_CBPDATA19m_OFFSET,i,&(m._mmu_cbpdata19),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA19m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData2
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData2.
 */
#define READ_MMU_CBPDATA2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA2m_BLKACC,4,0,p,MMU_CBPDATA2m_OFFSET,i,(m._mmu_cbpdata2),14)
#define WRITE_MMU_CBPDATA2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA2m_BLKACC,4,0,p,MMU_CBPDATA2m_OFFSET,i,&(m._mmu_cbpdata2),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData20
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData20.
 */
#define READ_MMU_CBPDATA20m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA20m_BLKACC,4,0,p,MMU_CBPDATA20m_OFFSET,i,(m._mmu_cbpdata20),14)
#define WRITE_MMU_CBPDATA20m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA20m_BLKACC,4,0,p,MMU_CBPDATA20m_OFFSET,i,&(m._mmu_cbpdata20),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA20m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData21
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData21.
 */
#define READ_MMU_CBPDATA21m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA21m_BLKACC,4,0,p,MMU_CBPDATA21m_OFFSET,i,(m._mmu_cbpdata21),14)
#define WRITE_MMU_CBPDATA21m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA21m_BLKACC,4,0,p,MMU_CBPDATA21m_OFFSET,i,&(m._mmu_cbpdata21),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA21m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData22
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData22.
 */
#define READ_MMU_CBPDATA22m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA22m_BLKACC,4,0,p,MMU_CBPDATA22m_OFFSET,i,(m._mmu_cbpdata22),14)
#define WRITE_MMU_CBPDATA22m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA22m_BLKACC,4,0,p,MMU_CBPDATA22m_OFFSET,i,&(m._mmu_cbpdata22),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA22m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData23
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData23.
 */
#define READ_MMU_CBPDATA23m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA23m_BLKACC,4,0,p,MMU_CBPDATA23m_OFFSET,i,(m._mmu_cbpdata23),14)
#define WRITE_MMU_CBPDATA23m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA23m_BLKACC,4,0,p,MMU_CBPDATA23m_OFFSET,i,&(m._mmu_cbpdata23),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA23m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData24
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData24.
 */
#define READ_MMU_CBPDATA24m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA24m_BLKACC,4,0,p,MMU_CBPDATA24m_OFFSET,i,(m._mmu_cbpdata24),14)
#define WRITE_MMU_CBPDATA24m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA24m_BLKACC,4,0,p,MMU_CBPDATA24m_OFFSET,i,&(m._mmu_cbpdata24),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA24m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData25
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData25.
 */
#define READ_MMU_CBPDATA25m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA25m_BLKACC,4,0,p,MMU_CBPDATA25m_OFFSET,i,(m._mmu_cbpdata25),14)
#define WRITE_MMU_CBPDATA25m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA25m_BLKACC,4,0,p,MMU_CBPDATA25m_OFFSET,i,&(m._mmu_cbpdata25),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA25m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData26
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData26.
 */
#define READ_MMU_CBPDATA26m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA26m_BLKACC,4,0,p,MMU_CBPDATA26m_OFFSET,i,(m._mmu_cbpdata26),14)
#define WRITE_MMU_CBPDATA26m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA26m_BLKACC,4,0,p,MMU_CBPDATA26m_OFFSET,i,&(m._mmu_cbpdata26),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA26m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData27
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData27.
 */
#define READ_MMU_CBPDATA27m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA27m_BLKACC,4,0,p,MMU_CBPDATA27m_OFFSET,i,(m._mmu_cbpdata27),14)
#define WRITE_MMU_CBPDATA27m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA27m_BLKACC,4,0,p,MMU_CBPDATA27m_OFFSET,i,&(m._mmu_cbpdata27),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA27m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData28
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData28.
 */
#define READ_MMU_CBPDATA28m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA28m_BLKACC,4,0,p,MMU_CBPDATA28m_OFFSET,i,(m._mmu_cbpdata28),14)
#define WRITE_MMU_CBPDATA28m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA28m_BLKACC,4,0,p,MMU_CBPDATA28m_OFFSET,i,&(m._mmu_cbpdata28),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA28m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData29
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData29.
 */
#define READ_MMU_CBPDATA29m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA29m_BLKACC,4,0,p,MMU_CBPDATA29m_OFFSET,i,(m._mmu_cbpdata29),14)
#define WRITE_MMU_CBPDATA29m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA29m_BLKACC,4,0,p,MMU_CBPDATA29m_OFFSET,i,&(m._mmu_cbpdata29),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA29m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData3
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData3.
 */
#define READ_MMU_CBPDATA3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA3m_BLKACC,4,0,p,MMU_CBPDATA3m_OFFSET,i,(m._mmu_cbpdata3),14)
#define WRITE_MMU_CBPDATA3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA3m_BLKACC,4,0,p,MMU_CBPDATA3m_OFFSET,i,&(m._mmu_cbpdata3),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData30
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData30.
 */
#define READ_MMU_CBPDATA30m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA30m_BLKACC,4,0,p,MMU_CBPDATA30m_OFFSET,i,(m._mmu_cbpdata30),14)
#define WRITE_MMU_CBPDATA30m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA30m_BLKACC,4,0,p,MMU_CBPDATA30m_OFFSET,i,&(m._mmu_cbpdata30),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA30m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData31
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData31.
 */
#define READ_MMU_CBPDATA31m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA31m_BLKACC,4,0,p,MMU_CBPDATA31m_OFFSET,i,(m._mmu_cbpdata31),14)
#define WRITE_MMU_CBPDATA31m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA31m_BLKACC,4,0,p,MMU_CBPDATA31m_OFFSET,i,&(m._mmu_cbpdata31),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA31m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData32
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData32.
 */
#define READ_MMU_CBPDATA32m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA32m_BLKACC,4,0,p,MMU_CBPDATA32m_OFFSET,i,(m._mmu_cbpdata32),14)
#define WRITE_MMU_CBPDATA32m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA32m_BLKACC,4,0,p,MMU_CBPDATA32m_OFFSET,i,&(m._mmu_cbpdata32),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA32m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData33
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData33.
 */
#define READ_MMU_CBPDATA33m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA33m_BLKACC,4,0,p,MMU_CBPDATA33m_OFFSET,i,(m._mmu_cbpdata33),14)
#define WRITE_MMU_CBPDATA33m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA33m_BLKACC,4,0,p,MMU_CBPDATA33m_OFFSET,i,&(m._mmu_cbpdata33),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA33m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData34
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData34.
 */
#define READ_MMU_CBPDATA34m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA34m_BLKACC,4,0,p,MMU_CBPDATA34m_OFFSET,i,(m._mmu_cbpdata34),14)
#define WRITE_MMU_CBPDATA34m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA34m_BLKACC,4,0,p,MMU_CBPDATA34m_OFFSET,i,&(m._mmu_cbpdata34),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA34m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData35
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData35.
 */
#define READ_MMU_CBPDATA35m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA35m_BLKACC,4,0,p,MMU_CBPDATA35m_OFFSET,i,(m._mmu_cbpdata35),14)
#define WRITE_MMU_CBPDATA35m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA35m_BLKACC,4,0,p,MMU_CBPDATA35m_OFFSET,i,&(m._mmu_cbpdata35),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA35m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData36
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData36.
 */
#define READ_MMU_CBPDATA36m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA36m_BLKACC,4,0,p,MMU_CBPDATA36m_OFFSET,i,(m._mmu_cbpdata36),14)
#define WRITE_MMU_CBPDATA36m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA36m_BLKACC,4,0,p,MMU_CBPDATA36m_OFFSET,i,&(m._mmu_cbpdata36),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA36m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData37
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData37.
 */
#define READ_MMU_CBPDATA37m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA37m_BLKACC,4,0,p,MMU_CBPDATA37m_OFFSET,i,(m._mmu_cbpdata37),14)
#define WRITE_MMU_CBPDATA37m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA37m_BLKACC,4,0,p,MMU_CBPDATA37m_OFFSET,i,&(m._mmu_cbpdata37),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA37m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData38
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData38.
 */
#define READ_MMU_CBPDATA38m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA38m_BLKACC,4,0,p,MMU_CBPDATA38m_OFFSET,i,(m._mmu_cbpdata38),14)
#define WRITE_MMU_CBPDATA38m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA38m_BLKACC,4,0,p,MMU_CBPDATA38m_OFFSET,i,&(m._mmu_cbpdata38),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA38m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData39
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData39.
 */
#define READ_MMU_CBPDATA39m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA39m_BLKACC,4,0,p,MMU_CBPDATA39m_OFFSET,i,(m._mmu_cbpdata39),14)
#define WRITE_MMU_CBPDATA39m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA39m_BLKACC,4,0,p,MMU_CBPDATA39m_OFFSET,i,&(m._mmu_cbpdata39),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA39m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData4
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData4.
 */
#define READ_MMU_CBPDATA4m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA4m_BLKACC,4,0,p,MMU_CBPDATA4m_OFFSET,i,(m._mmu_cbpdata4),14)
#define WRITE_MMU_CBPDATA4m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA4m_BLKACC,4,0,p,MMU_CBPDATA4m_OFFSET,i,&(m._mmu_cbpdata4),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData40
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData40.
 */
#define READ_MMU_CBPDATA40m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA40m_BLKACC,4,0,p,MMU_CBPDATA40m_OFFSET,i,(m._mmu_cbpdata40),14)
#define WRITE_MMU_CBPDATA40m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA40m_BLKACC,4,0,p,MMU_CBPDATA40m_OFFSET,i,&(m._mmu_cbpdata40),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA40m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData41
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData41.
 */
#define READ_MMU_CBPDATA41m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA41m_BLKACC,4,0,p,MMU_CBPDATA41m_OFFSET,i,(m._mmu_cbpdata41),14)
#define WRITE_MMU_CBPDATA41m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA41m_BLKACC,4,0,p,MMU_CBPDATA41m_OFFSET,i,&(m._mmu_cbpdata41),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA41m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData42
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData42.
 */
#define READ_MMU_CBPDATA42m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA42m_BLKACC,4,0,p,MMU_CBPDATA42m_OFFSET,i,(m._mmu_cbpdata42),14)
#define WRITE_MMU_CBPDATA42m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA42m_BLKACC,4,0,p,MMU_CBPDATA42m_OFFSET,i,&(m._mmu_cbpdata42),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA42m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData43
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData43.
 */
#define READ_MMU_CBPDATA43m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA43m_BLKACC,4,0,p,MMU_CBPDATA43m_OFFSET,i,(m._mmu_cbpdata43),14)
#define WRITE_MMU_CBPDATA43m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA43m_BLKACC,4,0,p,MMU_CBPDATA43m_OFFSET,i,&(m._mmu_cbpdata43),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA43m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData44
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData44.
 */
#define READ_MMU_CBPDATA44m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA44m_BLKACC,4,0,p,MMU_CBPDATA44m_OFFSET,i,(m._mmu_cbpdata44),14)
#define WRITE_MMU_CBPDATA44m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA44m_BLKACC,4,0,p,MMU_CBPDATA44m_OFFSET,i,&(m._mmu_cbpdata44),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA44m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData45
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData45.
 */
#define READ_MMU_CBPDATA45m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA45m_BLKACC,4,0,p,MMU_CBPDATA45m_OFFSET,i,(m._mmu_cbpdata45),14)
#define WRITE_MMU_CBPDATA45m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA45m_BLKACC,4,0,p,MMU_CBPDATA45m_OFFSET,i,&(m._mmu_cbpdata45),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA45m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData46
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData46.
 */
#define READ_MMU_CBPDATA46m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA46m_BLKACC,4,0,p,MMU_CBPDATA46m_OFFSET,i,(m._mmu_cbpdata46),14)
#define WRITE_MMU_CBPDATA46m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA46m_BLKACC,4,0,p,MMU_CBPDATA46m_OFFSET,i,&(m._mmu_cbpdata46),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA46m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData47
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData47.
 */
#define READ_MMU_CBPDATA47m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA47m_BLKACC,4,0,p,MMU_CBPDATA47m_OFFSET,i,(m._mmu_cbpdata47),14)
#define WRITE_MMU_CBPDATA47m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA47m_BLKACC,4,0,p,MMU_CBPDATA47m_OFFSET,i,&(m._mmu_cbpdata47),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA47m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData48
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData48.
 */
#define READ_MMU_CBPDATA48m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA48m_BLKACC,4,0,p,MMU_CBPDATA48m_OFFSET,i,(m._mmu_cbpdata48),14)
#define WRITE_MMU_CBPDATA48m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA48m_BLKACC,4,0,p,MMU_CBPDATA48m_OFFSET,i,&(m._mmu_cbpdata48),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA48m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData49
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData49.
 */
#define READ_MMU_CBPDATA49m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA49m_BLKACC,4,0,p,MMU_CBPDATA49m_OFFSET,i,(m._mmu_cbpdata49),14)
#define WRITE_MMU_CBPDATA49m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA49m_BLKACC,4,0,p,MMU_CBPDATA49m_OFFSET,i,&(m._mmu_cbpdata49),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA49m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData5
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData5.
 */
#define READ_MMU_CBPDATA5m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA5m_BLKACC,4,0,p,MMU_CBPDATA5m_OFFSET,i,(m._mmu_cbpdata5),14)
#define WRITE_MMU_CBPDATA5m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA5m_BLKACC,4,0,p,MMU_CBPDATA5m_OFFSET,i,&(m._mmu_cbpdata5),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData50
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData50.
 */
#define READ_MMU_CBPDATA50m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA50m_BLKACC,4,0,p,MMU_CBPDATA50m_OFFSET,i,(m._mmu_cbpdata50),14)
#define WRITE_MMU_CBPDATA50m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA50m_BLKACC,4,0,p,MMU_CBPDATA50m_OFFSET,i,&(m._mmu_cbpdata50),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA50m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData51
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData51.
 */
#define READ_MMU_CBPDATA51m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA51m_BLKACC,4,0,p,MMU_CBPDATA51m_OFFSET,i,(m._mmu_cbpdata51),14)
#define WRITE_MMU_CBPDATA51m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA51m_BLKACC,4,0,p,MMU_CBPDATA51m_OFFSET,i,&(m._mmu_cbpdata51),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA51m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData52
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData52.
 */
#define READ_MMU_CBPDATA52m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA52m_BLKACC,4,0,p,MMU_CBPDATA52m_OFFSET,i,(m._mmu_cbpdata52),14)
#define WRITE_MMU_CBPDATA52m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA52m_BLKACC,4,0,p,MMU_CBPDATA52m_OFFSET,i,&(m._mmu_cbpdata52),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA52m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData53
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData53.
 */
#define READ_MMU_CBPDATA53m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA53m_BLKACC,4,0,p,MMU_CBPDATA53m_OFFSET,i,(m._mmu_cbpdata53),14)
#define WRITE_MMU_CBPDATA53m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA53m_BLKACC,4,0,p,MMU_CBPDATA53m_OFFSET,i,&(m._mmu_cbpdata53),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA53m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData54
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData54.
 */
#define READ_MMU_CBPDATA54m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA54m_BLKACC,4,0,p,MMU_CBPDATA54m_OFFSET,i,(m._mmu_cbpdata54),14)
#define WRITE_MMU_CBPDATA54m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA54m_BLKACC,4,0,p,MMU_CBPDATA54m_OFFSET,i,&(m._mmu_cbpdata54),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA54m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData55
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData55.
 */
#define READ_MMU_CBPDATA55m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA55m_BLKACC,4,0,p,MMU_CBPDATA55m_OFFSET,i,(m._mmu_cbpdata55),14)
#define WRITE_MMU_CBPDATA55m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA55m_BLKACC,4,0,p,MMU_CBPDATA55m_OFFSET,i,&(m._mmu_cbpdata55),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA55m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData56
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData56.
 */
#define READ_MMU_CBPDATA56m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA56m_BLKACC,4,0,p,MMU_CBPDATA56m_OFFSET,i,(m._mmu_cbpdata56),14)
#define WRITE_MMU_CBPDATA56m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA56m_BLKACC,4,0,p,MMU_CBPDATA56m_OFFSET,i,&(m._mmu_cbpdata56),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA56m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData57
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData57.
 */
#define READ_MMU_CBPDATA57m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA57m_BLKACC,4,0,p,MMU_CBPDATA57m_OFFSET,i,(m._mmu_cbpdata57),14)
#define WRITE_MMU_CBPDATA57m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA57m_BLKACC,4,0,p,MMU_CBPDATA57m_OFFSET,i,&(m._mmu_cbpdata57),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA57m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData58
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData58.
 */
#define READ_MMU_CBPDATA58m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA58m_BLKACC,4,0,p,MMU_CBPDATA58m_OFFSET,i,(m._mmu_cbpdata58),14)
#define WRITE_MMU_CBPDATA58m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA58m_BLKACC,4,0,p,MMU_CBPDATA58m_OFFSET,i,&(m._mmu_cbpdata58),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA58m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData59
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData59.
 */
#define READ_MMU_CBPDATA59m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA59m_BLKACC,4,0,p,MMU_CBPDATA59m_OFFSET,i,(m._mmu_cbpdata59),14)
#define WRITE_MMU_CBPDATA59m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA59m_BLKACC,4,0,p,MMU_CBPDATA59m_OFFSET,i,&(m._mmu_cbpdata59),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA59m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData6
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData6.
 */
#define READ_MMU_CBPDATA6m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA6m_BLKACC,4,0,p,MMU_CBPDATA6m_OFFSET,i,(m._mmu_cbpdata6),14)
#define WRITE_MMU_CBPDATA6m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA6m_BLKACC,4,0,p,MMU_CBPDATA6m_OFFSET,i,&(m._mmu_cbpdata6),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData7
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData7.
 */
#define READ_MMU_CBPDATA7m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA7m_BLKACC,4,0,p,MMU_CBPDATA7m_OFFSET,i,(m._mmu_cbpdata7),14)
#define WRITE_MMU_CBPDATA7m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA7m_BLKACC,4,0,p,MMU_CBPDATA7m_OFFSET,i,&(m._mmu_cbpdata7),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData8
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData8.
 */
#define READ_MMU_CBPDATA8m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA8m_BLKACC,4,0,p,MMU_CBPDATA8m_OFFSET,i,(m._mmu_cbpdata8),14)
#define WRITE_MMU_CBPDATA8m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA8m_BLKACC,4,0,p,MMU_CBPDATA8m_OFFSET,i,&(m._mmu_cbpdata8),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA8m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CBPData9
 * BLOCKS:   MMU_SC
 * SIZE:     419
 */
/*
 * These macros can be used to access MMU_CBPData9.
 */
#define READ_MMU_CBPDATA9m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CBPDATA9m_BLKACC,4,0,p,MMU_CBPDATA9m_OFFSET,i,(m._mmu_cbpdata9),14)
#define WRITE_MMU_CBPDATA9m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CBPDATA9m_BLKACC,4,0,p,MMU_CBPDATA9m_OFFSET,i,&(m._mmu_cbpdata9),14)

/*******************************************************************************
 * End of 'MMU_CBPDATA9m'
 */




/*******************************************************************************
 * REGISTER:  MMU_CCP_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CCP_ENABLE_ECCP_MEM.
 */
#define READ_MMU_CCP_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_CCP_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_CCP_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_ccp_enable_eccp_mem),1)
#define WRITE_MMU_CCP_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_CCP_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_CCP_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_ccp_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_CCP_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CCP_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CCP_EN_COR_ERR_RPT.
 */
#define READ_MMU_CCP_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_CCP_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_CCP_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_ccp_en_cor_err_rpt),1)
#define WRITE_MMU_CCP_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_CCP_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_CCP_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_ccp_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_CCP_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     22
 */
/*
 * These macros can be used to access MMU_CCP_MEM.
 */
#define READ_MMU_CCP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_MEMm_BLKACC,3,0,p,MMU_CCP_MEMm_OFFSET,i,(m._mmu_ccp_mem),1)
#define WRITE_MMU_CCP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_MEMm_BLKACC,3,0,p,MMU_CCP_MEMm_OFFSET,i,&(m._mmu_ccp_mem),1)

/*******************************************************************************
 * End of 'MMU_CCP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_RESEQ_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     79
 */
/*
 * These macros can be used to access MMU_CCP_RESEQ_MEM.
 */
#define READ_MMU_CCP_RESEQ_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_RESEQ_MEMm_BLKACC,3,n,p,MMU_CCP_RESEQ_MEMm_OFFSET,i,(m._mmu_ccp_reseq_mem),3)
#define WRITE_MMU_CCP_RESEQ_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEMm_BLKACC,3,n,p,MMU_CCP_RESEQ_MEMm_OFFSET,i,&(m._mmu_ccp_reseq_mem),3)
#define WRITE_MMU_CCP_RESEQ_MEMm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEMm_BLKACC,3,-1,p,MMU_CCP_RESEQ_MEMm_OFFSET,i,&(m._mmu_ccp_reseq_mem),3)

/*******************************************************************************
 * End of 'MMU_CCP_RESEQ_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     79
 */
/*
 * These macros can be used to access MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_ccp_reseq_mem_mmu_xpe0_epipe0),3)
#define WRITE_MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_ccp_reseq_mem_mmu_xpe0_epipe0),3)

/*******************************************************************************
 * End of 'MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     79
 */
/*
 * These macros can be used to access MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_ccp_reseq_mem_mmu_xpe0_epipe1),3)
#define WRITE_MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_ccp_reseq_mem_mmu_xpe0_epipe1),3)

/*******************************************************************************
 * End of 'MMU_CCP_RESEQ_MEM_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     79
 */
/*
 * These macros can be used to access MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_ccp_reseq_mem_mmu_xpe1_epipe2),3)
#define WRITE_MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_ccp_reseq_mem_mmu_xpe1_epipe2),3)

/*******************************************************************************
 * End of 'MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     79
 */
/*
 * These macros can be used to access MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_ccp_reseq_mem_mmu_xpe1_epipe3),3)
#define WRITE_MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_ccp_reseq_mem_mmu_xpe1_epipe3),3)

/*******************************************************************************
 * End of 'MMU_CCP_RESEQ_MEM_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     79
 */
/*
 * These macros can be used to access MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_ccp_reseq_mem_mmu_xpe2_epipe0),3)
#define WRITE_MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_ccp_reseq_mem_mmu_xpe2_epipe0),3)

/*******************************************************************************
 * End of 'MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     79
 */
/*
 * These macros can be used to access MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_ccp_reseq_mem_mmu_xpe2_epipe1),3)
#define WRITE_MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_ccp_reseq_mem_mmu_xpe2_epipe1),3)

/*******************************************************************************
 * End of 'MMU_CCP_RESEQ_MEM_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     79
 */
/*
 * These macros can be used to access MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_ccp_reseq_mem_mmu_xpe3_epipe2),3)
#define WRITE_MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_ccp_reseq_mem_mmu_xpe3_epipe2),3)

/*******************************************************************************
 * End of 'MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     79
 */
/*
 * These macros can be used to access MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_ccp_reseq_mem_mmu_xpe3_epipe3),3)
#define WRITE_MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_ccp_reseq_mem_mmu_xpe3_epipe3),3)

/*******************************************************************************
 * End of 'MMU_CCP_RESEQ_MEM_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CELL_LINK
 * BLOCKS:   MMU_SC
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_CELL_LINK.
 */
#define READ_MMU_CELL_LINKm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CELL_LINKm_BLKACC,4,0,p,MMU_CELL_LINKm_OFFSET,i,(m._mmu_cell_link),1)
#define WRITE_MMU_CELL_LINKm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CELL_LINKm_BLKACC,4,0,p,MMU_CELL_LINKm_OFFSET,i,&(m._mmu_cell_link),1)

/*******************************************************************************
 * End of 'MMU_CELL_LINKm'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK0
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK0.
 */
#define READ_MMU_CFAP_BANK0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK0m_BLKACC,4,0,p,MMU_CFAP_BANK0m_OFFSET,i,(m._mmu_cfap_bank0),1)
#define WRITE_MMU_CFAP_BANK0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK0m_BLKACC,4,0,p,MMU_CFAP_BANK0m_OFFSET,i,&(m._mmu_cfap_bank0),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK1
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK1.
 */
#define READ_MMU_CFAP_BANK1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK1m_BLKACC,4,0,p,MMU_CFAP_BANK1m_OFFSET,i,(m._mmu_cfap_bank1),1)
#define WRITE_MMU_CFAP_BANK1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK1m_BLKACC,4,0,p,MMU_CFAP_BANK1m_OFFSET,i,&(m._mmu_cfap_bank1),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK10
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK10.
 */
#define READ_MMU_CFAP_BANK10m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK10m_BLKACC,4,0,p,MMU_CFAP_BANK10m_OFFSET,i,(m._mmu_cfap_bank10),1)
#define WRITE_MMU_CFAP_BANK10m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK10m_BLKACC,4,0,p,MMU_CFAP_BANK10m_OFFSET,i,&(m._mmu_cfap_bank10),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK10m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK11
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK11.
 */
#define READ_MMU_CFAP_BANK11m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK11m_BLKACC,4,0,p,MMU_CFAP_BANK11m_OFFSET,i,(m._mmu_cfap_bank11),1)
#define WRITE_MMU_CFAP_BANK11m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK11m_BLKACC,4,0,p,MMU_CFAP_BANK11m_OFFSET,i,&(m._mmu_cfap_bank11),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK11m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK12
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK12.
 */
#define READ_MMU_CFAP_BANK12m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK12m_BLKACC,4,0,p,MMU_CFAP_BANK12m_OFFSET,i,(m._mmu_cfap_bank12),1)
#define WRITE_MMU_CFAP_BANK12m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK12m_BLKACC,4,0,p,MMU_CFAP_BANK12m_OFFSET,i,&(m._mmu_cfap_bank12),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK12m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK13
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK13.
 */
#define READ_MMU_CFAP_BANK13m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK13m_BLKACC,4,0,p,MMU_CFAP_BANK13m_OFFSET,i,(m._mmu_cfap_bank13),1)
#define WRITE_MMU_CFAP_BANK13m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK13m_BLKACC,4,0,p,MMU_CFAP_BANK13m_OFFSET,i,&(m._mmu_cfap_bank13),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK13m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK14
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK14.
 */
#define READ_MMU_CFAP_BANK14m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK14m_BLKACC,4,0,p,MMU_CFAP_BANK14m_OFFSET,i,(m._mmu_cfap_bank14),1)
#define WRITE_MMU_CFAP_BANK14m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK14m_BLKACC,4,0,p,MMU_CFAP_BANK14m_OFFSET,i,&(m._mmu_cfap_bank14),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK14m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK2
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK2.
 */
#define READ_MMU_CFAP_BANK2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK2m_BLKACC,4,0,p,MMU_CFAP_BANK2m_OFFSET,i,(m._mmu_cfap_bank2),1)
#define WRITE_MMU_CFAP_BANK2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK2m_BLKACC,4,0,p,MMU_CFAP_BANK2m_OFFSET,i,&(m._mmu_cfap_bank2),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK3
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK3.
 */
#define READ_MMU_CFAP_BANK3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK3m_BLKACC,4,0,p,MMU_CFAP_BANK3m_OFFSET,i,(m._mmu_cfap_bank3),1)
#define WRITE_MMU_CFAP_BANK3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK3m_BLKACC,4,0,p,MMU_CFAP_BANK3m_OFFSET,i,&(m._mmu_cfap_bank3),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK4
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK4.
 */
#define READ_MMU_CFAP_BANK4m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK4m_BLKACC,4,0,p,MMU_CFAP_BANK4m_OFFSET,i,(m._mmu_cfap_bank4),1)
#define WRITE_MMU_CFAP_BANK4m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK4m_BLKACC,4,0,p,MMU_CFAP_BANK4m_OFFSET,i,&(m._mmu_cfap_bank4),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK5
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK5.
 */
#define READ_MMU_CFAP_BANK5m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK5m_BLKACC,4,0,p,MMU_CFAP_BANK5m_OFFSET,i,(m._mmu_cfap_bank5),1)
#define WRITE_MMU_CFAP_BANK5m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK5m_BLKACC,4,0,p,MMU_CFAP_BANK5m_OFFSET,i,&(m._mmu_cfap_bank5),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK6
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK6.
 */
#define READ_MMU_CFAP_BANK6m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK6m_BLKACC,4,0,p,MMU_CFAP_BANK6m_OFFSET,i,(m._mmu_cfap_bank6),1)
#define WRITE_MMU_CFAP_BANK6m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK6m_BLKACC,4,0,p,MMU_CFAP_BANK6m_OFFSET,i,&(m._mmu_cfap_bank6),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK7
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK7.
 */
#define READ_MMU_CFAP_BANK7m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK7m_BLKACC,4,0,p,MMU_CFAP_BANK7m_OFFSET,i,(m._mmu_cfap_bank7),1)
#define WRITE_MMU_CFAP_BANK7m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK7m_BLKACC,4,0,p,MMU_CFAP_BANK7m_OFFSET,i,&(m._mmu_cfap_bank7),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK8
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK8.
 */
#define READ_MMU_CFAP_BANK8m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK8m_BLKACC,4,0,p,MMU_CFAP_BANK8m_OFFSET,i,(m._mmu_cfap_bank8),1)
#define WRITE_MMU_CFAP_BANK8m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK8m_BLKACC,4,0,p,MMU_CFAP_BANK8m_OFFSET,i,&(m._mmu_cfap_bank8),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK8m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CFAP_BANK9
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_CFAP_BANK9.
 */
#define READ_MMU_CFAP_BANK9m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CFAP_BANK9m_BLKACC,4,0,p,MMU_CFAP_BANK9m_OFFSET,i,(m._mmu_cfap_bank9),1)
#define WRITE_MMU_CFAP_BANK9m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CFAP_BANK9m_BLKACC,4,0,p,MMU_CFAP_BANK9m_OFFSET,i,&(m._mmu_cfap_bank9),1)

/*******************************************************************************
 * End of 'MMU_CFAP_BANK9m'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_COLLISION
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_COLLISION.
 */
#define READ_MMU_CFAP_COLLISIONr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_CFAP_COLLISIONr_BLKACC,3,0,p,MMU_CFAP_COLLISIONr_OFFSET,0,(r._mmu_cfap_collision),2)
#define WRITE_MMU_CFAP_COLLISIONr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_CFAP_COLLISIONr_BLKACC,3,0,p,MMU_CFAP_COLLISIONr_OFFSET,0,&(r._mmu_cfap_collision),2)

/*******************************************************************************
 * End of 'MMU_CFAP_COLLISIONr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_ENABLE_ECCP_MEM.
 */
#define READ_MMU_CFAP_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_CFAP_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MMU_CFAP_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_cfap_enable_eccp_mem),1)
#define WRITE_MMU_CFAP_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_CFAP_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MMU_CFAP_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_cfap_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_CFAP_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_EN_COR_ERR_RPT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CFAP_EN_COR_ERR_RPT.
 */
#define READ_MMU_CFAP_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_CFAP_EN_COR_ERR_RPTr_BLKACC,4,0,p,MMU_CFAP_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_cfap_en_cor_err_rpt),1)
#define WRITE_MMU_CFAP_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_CFAP_EN_COR_ERR_RPTr_BLKACC,4,0,p,MMU_CFAP_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_cfap_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_CFAP_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_CFAP_FULL
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_CFAP_FULL.
 */
#define READ_MMU_CFAP_FULLr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_CFAP_FULLr_BLKACC,3,0,p,MMU_CFAP_FULLr_OFFSET,0,(r._mmu_cfap_full),2)
#define WRITE_MMU_CFAP_FULLr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_CFAP_FULLr_BLKACC,3,0,p,MMU_CFAP_FULLr_OFFSET,0,&(r._mmu_cfap_full),2)

/*******************************************************************************
 * End of 'MMU_CFAP_FULLr'
 */




/*******************************************************************************
 * MEMORY:  MMU_CHFC_SYSPORT_MAPPING
 * BLOCKS:   MMU_GLB
 * SIZE:     8
 */
/*
 * These macros can be used to access MMU_CHFC_SYSPORT_MAPPING.
 */
#define READ_MMU_CHFC_SYSPORT_MAPPINGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CHFC_SYSPORT_MAPPINGm_BLKACC,5,0,p,MMU_CHFC_SYSPORT_MAPPINGm_OFFSET,i,(m._mmu_chfc_sysport_mapping),1)
#define WRITE_MMU_CHFC_SYSPORT_MAPPINGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CHFC_SYSPORT_MAPPINGm_BLKACC,5,0,p,MMU_CHFC_SYSPORT_MAPPINGm_OFFSET,i,&(m._mmu_chfc_sysport_mapping),1)

/*******************************************************************************
 * End of 'MMU_CHFC_SYSPORT_MAPPINGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_COLOR_DROP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_COLOR_DROP_MEM.
 */
#define READ_MMU_CTR_COLOR_DROP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_COLOR_DROP_MEMm_BLKACC,3,0,p,MMU_CTR_COLOR_DROP_MEMm_OFFSET,i,(m._mmu_ctr_color_drop_mem),2)
#define WRITE_MMU_CTR_COLOR_DROP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_COLOR_DROP_MEMm_BLKACC,3,0,p,MMU_CTR_COLOR_DROP_MEMm_OFFSET,i,&(m._mmu_ctr_color_drop_mem),2)

/*******************************************************************************
 * End of 'MMU_CTR_COLOR_DROP_MEMm'
 */




/*******************************************************************************
 * REGISTER:  MMU_CTR_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_CTR_ENABLE_ECCP_MEM.
 */
#define READ_MMU_CTR_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_CTR_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_CTR_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_ctr_enable_eccp_mem),1)
#define WRITE_MMU_CTR_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_CTR_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_CTR_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_ctr_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_CTR_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_ING_DROP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     71
 */
/*
 * These macros can be used to access MMU_CTR_ING_DROP_MEM.
 */
#define READ_MMU_CTR_ING_DROP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_ING_DROP_MEMm_BLKACC,3,0,p,MMU_CTR_ING_DROP_MEMm_OFFSET,i,(m._mmu_ctr_ing_drop_mem),3)
#define WRITE_MMU_CTR_ING_DROP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_ING_DROP_MEMm_BLKACC,3,0,p,MMU_CTR_ING_DROP_MEMm_OFFSET,i,&(m._mmu_ctr_ing_drop_mem),3)

/*******************************************************************************
 * End of 'MMU_CTR_ING_DROP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_MC_DROP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_MC_DROP_MEM.
 */
#define READ_MMU_CTR_MC_DROP_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_MC_DROP_MEMm_BLKACC,3,n,p,MMU_CTR_MC_DROP_MEMm_OFFSET,i,(m._mmu_ctr_mc_drop_mem),3)
#define WRITE_MMU_CTR_MC_DROP_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEMm_BLKACC,3,n,p,MMU_CTR_MC_DROP_MEMm_OFFSET,i,&(m._mmu_ctr_mc_drop_mem),3)
#define WRITE_MMU_CTR_MC_DROP_MEMm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEMm_BLKACC,3,-1,p,MMU_CTR_MC_DROP_MEMm_OFFSET,i,&(m._mmu_ctr_mc_drop_mem),3)

/*******************************************************************************
 * End of 'MMU_CTR_MC_DROP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_ctr_mc_drop_mem_mmu_xpe0_epipe0),3)
#define WRITE_MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_ctr_mc_drop_mem_mmu_xpe0_epipe0),3)

/*******************************************************************************
 * End of 'MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_ctr_mc_drop_mem_mmu_xpe0_epipe1),3)
#define WRITE_MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_ctr_mc_drop_mem_mmu_xpe0_epipe1),3)

/*******************************************************************************
 * End of 'MMU_CTR_MC_DROP_MEM_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_ctr_mc_drop_mem_mmu_xpe1_epipe2),3)
#define WRITE_MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_ctr_mc_drop_mem_mmu_xpe1_epipe2),3)

/*******************************************************************************
 * End of 'MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_ctr_mc_drop_mem_mmu_xpe1_epipe3),3)
#define WRITE_MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_ctr_mc_drop_mem_mmu_xpe1_epipe3),3)

/*******************************************************************************
 * End of 'MMU_CTR_MC_DROP_MEM_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_ctr_mc_drop_mem_mmu_xpe2_epipe0),3)
#define WRITE_MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_ctr_mc_drop_mem_mmu_xpe2_epipe0),3)

/*******************************************************************************
 * End of 'MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_ctr_mc_drop_mem_mmu_xpe2_epipe1),3)
#define WRITE_MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_ctr_mc_drop_mem_mmu_xpe2_epipe1),3)

/*******************************************************************************
 * End of 'MMU_CTR_MC_DROP_MEM_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_ctr_mc_drop_mem_mmu_xpe3_epipe2),3)
#define WRITE_MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_ctr_mc_drop_mem_mmu_xpe3_epipe2),3)

/*******************************************************************************
 * End of 'MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_ctr_mc_drop_mem_mmu_xpe3_epipe3),3)
#define WRITE_MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_ctr_mc_drop_mem_mmu_xpe3_epipe3),3)

/*******************************************************************************
 * End of 'MMU_CTR_MC_DROP_MEM_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_UC_DROP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_UC_DROP_MEM.
 */
#define READ_MMU_CTR_UC_DROP_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_UC_DROP_MEMm_BLKACC,3,n,p,MMU_CTR_UC_DROP_MEMm_OFFSET,i,(m._mmu_ctr_uc_drop_mem),3)
#define WRITE_MMU_CTR_UC_DROP_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEMm_BLKACC,3,n,p,MMU_CTR_UC_DROP_MEMm_OFFSET,i,&(m._mmu_ctr_uc_drop_mem),3)
#define WRITE_MMU_CTR_UC_DROP_MEMm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEMm_BLKACC,3,-1,p,MMU_CTR_UC_DROP_MEMm_OFFSET,i,&(m._mmu_ctr_uc_drop_mem),3)

/*******************************************************************************
 * End of 'MMU_CTR_UC_DROP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_ctr_uc_drop_mem_mmu_xpe0_epipe0),3)
#define WRITE_MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_ctr_uc_drop_mem_mmu_xpe0_epipe0),3)

/*******************************************************************************
 * End of 'MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_ctr_uc_drop_mem_mmu_xpe0_epipe1),3)
#define WRITE_MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_ctr_uc_drop_mem_mmu_xpe0_epipe1),3)

/*******************************************************************************
 * End of 'MMU_CTR_UC_DROP_MEM_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_ctr_uc_drop_mem_mmu_xpe1_epipe2),3)
#define WRITE_MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_ctr_uc_drop_mem_mmu_xpe1_epipe2),3)

/*******************************************************************************
 * End of 'MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_ctr_uc_drop_mem_mmu_xpe1_epipe3),3)
#define WRITE_MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_ctr_uc_drop_mem_mmu_xpe1_epipe3),3)

/*******************************************************************************
 * End of 'MMU_CTR_UC_DROP_MEM_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_ctr_uc_drop_mem_mmu_xpe2_epipe0),3)
#define WRITE_MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_ctr_uc_drop_mem_mmu_xpe2_epipe0),3)

/*******************************************************************************
 * End of 'MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_ctr_uc_drop_mem_mmu_xpe2_epipe1),3)
#define WRITE_MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_ctr_uc_drop_mem_mmu_xpe2_epipe1),3)

/*******************************************************************************
 * End of 'MMU_CTR_UC_DROP_MEM_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_ctr_uc_drop_mem_mmu_xpe3_epipe2),3)
#define WRITE_MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_ctr_uc_drop_mem_mmu_xpe3_epipe2),3)

/*******************************************************************************
 * End of 'MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     81
 */
/*
 * These macros can be used to access MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_ctr_uc_drop_mem_mmu_xpe3_epipe3),3)
#define WRITE_MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_ctr_uc_drop_mem_mmu_xpe3_epipe3),3)

/*******************************************************************************
 * End of 'MMU_CTR_UC_DROP_MEM_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_WRED_DROP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_WRED_DROP_MEM.
 */
#define READ_MMU_CTR_WRED_DROP_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_WRED_DROP_MEMm_BLKACC,3,n,p,MMU_CTR_WRED_DROP_MEMm_OFFSET,i,(m._mmu_ctr_wred_drop_mem),2)
#define WRITE_MMU_CTR_WRED_DROP_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEMm_BLKACC,3,n,p,MMU_CTR_WRED_DROP_MEMm_OFFSET,i,&(m._mmu_ctr_wred_drop_mem),2)
#define WRITE_MMU_CTR_WRED_DROP_MEMm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEMm_BLKACC,3,-1,p,MMU_CTR_WRED_DROP_MEMm_OFFSET,i,&(m._mmu_ctr_wred_drop_mem),2)

/*******************************************************************************
 * End of 'MMU_CTR_WRED_DROP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_ctr_wred_drop_mem_mmu_xpe0_epipe0),2)
#define WRITE_MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_ctr_wred_drop_mem_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_ctr_wred_drop_mem_mmu_xpe0_epipe1),2)
#define WRITE_MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_ctr_wred_drop_mem_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_CTR_WRED_DROP_MEM_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_ctr_wred_drop_mem_mmu_xpe1_epipe2),2)
#define WRITE_MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_ctr_wred_drop_mem_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_ctr_wred_drop_mem_mmu_xpe1_epipe3),2)
#define WRITE_MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_ctr_wred_drop_mem_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_CTR_WRED_DROP_MEM_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_ctr_wred_drop_mem_mmu_xpe2_epipe0),2)
#define WRITE_MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_ctr_wred_drop_mem_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_ctr_wred_drop_mem_mmu_xpe2_epipe1),2)
#define WRITE_MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_ctr_wred_drop_mem_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_CTR_WRED_DROP_MEM_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_ctr_wred_drop_mem_mmu_xpe3_epipe2),2)
#define WRITE_MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_ctr_wred_drop_mem_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_ctr_wred_drop_mem_mmu_xpe3_epipe3),2)
#define WRITE_MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_ctr_wred_drop_mem_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_CTR_WRED_DROP_MEM_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_DI_THR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_DI_THR.
 */
#define READ_MMU_DI_THRr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_DI_THRr_BLKACC,4,0,p,MMU_DI_THRr_OFFSET,0,(r._mmu_di_thr),1)
#define WRITE_MMU_DI_THRr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_DI_THRr_BLKACC,4,0,p,MMU_DI_THRr_OFFSET,0,&(r._mmu_di_thr),1)

/*******************************************************************************
 * End of 'MMU_DI_THRr'
 */




/*******************************************************************************
 * REGISTER:  MMU_DQS_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_DQS_ENABLE_ECCP_MEM.
 */
#define READ_MMU_DQS_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_DQS_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MMU_DQS_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_dqs_enable_eccp_mem),1)
#define WRITE_MMU_DQS_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_DQS_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MMU_DQS_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_dqs_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_DQS_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_DQS_EN_COR_ERR_RPT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_DQS_EN_COR_ERR_RPT.
 */
#define READ_MMU_DQS_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_DQS_EN_COR_ERR_RPTr_BLKACC,4,0,p,MMU_DQS_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_dqs_en_cor_err_rpt),1)
#define WRITE_MMU_DQS_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_DQS_EN_COR_ERR_RPTr_BLKACC,4,0,p,MMU_DQS_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_dqs_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_DQS_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_DQS_REPL_PORT_AGG_MAP
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_DQS_REPL_PORT_AGG_MAP.
 */
#define READ_MMU_DQS_REPL_PORT_AGG_MAPr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_DQS_REPL_PORT_AGG_MAPr_BLKACC,4,0,p,MMU_DQS_REPL_PORT_AGG_MAPr_OFFSET,0,(r._mmu_dqs_repl_port_agg_map),1)
#define WRITE_MMU_DQS_REPL_PORT_AGG_MAPr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_DQS_REPL_PORT_AGG_MAPr_BLKACC,4,0,p,MMU_DQS_REPL_PORT_AGG_MAPr_OFFSET,0,&(r._mmu_dqs_repl_port_agg_map),1)

/*******************************************************************************
 * End of 'MMU_DQS_REPL_PORT_AGG_MAPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_DQX_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_DQX_ENABLE_ECCP_MEM.
 */
#define READ_MMU_DQX_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_DQX_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_DQX_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_dqx_enable_eccp_mem),1)
#define WRITE_MMU_DQX_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_DQX_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_DQX_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_dqx_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_DQX_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_DQX_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_DQX_EN_COR_ERR_RPT.
 */
#define READ_MMU_DQX_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_DQX_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_DQX_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_dqx_en_cor_err_rpt),1)
#define WRITE_MMU_DQX_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_DQX_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_DQX_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_dqx_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_DQX_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_DQX_MB_CBI_ERR
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_DQX_MB_CBI_ERR.
 */
#define READ_MMU_DQX_MB_CBI_ERRr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_DQX_MB_CBI_ERRr_BLKACC,3,0,p,MMU_DQX_MB_CBI_ERRr_OFFSET,0,(r._mmu_dqx_mb_cbi_err),1)
#define WRITE_MMU_DQX_MB_CBI_ERRr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_DQX_MB_CBI_ERRr_BLKACC,3,0,p,MMU_DQX_MB_CBI_ERRr_OFFSET,0,&(r._mmu_dqx_mb_cbi_err),1)

/*******************************************************************************
 * End of 'MMU_DQX_MB_CBI_ERRr'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_CT_FIFO
 * BLOCKS:   MMU_SC
 * SIZE:     68
 */
/*
 * These macros can be used to access MMU_ENQS_CT_FIFO.
 */
#define READ_MMU_ENQS_CT_FIFOm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_CT_FIFOm_BLKACC,4,0,p,MMU_ENQS_CT_FIFOm_OFFSET,i,(m._mmu_enqs_ct_fifo),3)
#define WRITE_MMU_ENQS_CT_FIFOm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_CT_FIFOm_BLKACC,4,0,p,MMU_ENQS_CT_FIFOm_OFFSET,i,&(m._mmu_enqs_ct_fifo),3)

/*******************************************************************************
 * End of 'MMU_ENQS_CT_FIFOm'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQS_CT_FIFO_DFT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ENQS_CT_FIFO_DFT.
 */
#define READ_MMU_ENQS_CT_FIFO_DFTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQS_CT_FIFO_DFTr_BLKACC,4,0,p,MMU_ENQS_CT_FIFO_DFTr_OFFSET,0,(r._mmu_enqs_ct_fifo_dft),1)
#define WRITE_MMU_ENQS_CT_FIFO_DFTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQS_CT_FIFO_DFTr_BLKACC,4,0,p,MMU_ENQS_CT_FIFO_DFTr_OFFSET,0,&(r._mmu_enqs_ct_fifo_dft),1)

/*******************************************************************************
 * End of 'MMU_ENQS_CT_FIFO_DFTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQS_DEBUG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ENQS_DEBUG.
 */
#define READ_MMU_ENQS_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQS_DEBUGr_BLKACC,4,0,p,MMU_ENQS_DEBUGr_OFFSET,0,(r._mmu_enqs_debug),1)
#define WRITE_MMU_ENQS_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQS_DEBUGr_BLKACC,4,0,p,MMU_ENQS_DEBUGr_OFFSET,0,&(r._mmu_enqs_debug),1)

/*******************************************************************************
 * End of 'MMU_ENQS_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQS_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ENQS_ENABLE_ECCP_MEM.
 */
#define READ_MMU_ENQS_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQS_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MMU_ENQS_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_enqs_enable_eccp_mem),1)
#define WRITE_MMU_ENQS_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQS_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MMU_ENQS_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_enqs_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_ENQS_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQS_EN_COR_ERR_RPT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ENQS_EN_COR_ERR_RPT.
 */
#define READ_MMU_ENQS_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQS_EN_COR_ERR_RPTr_BLKACC,4,0,p,MMU_ENQS_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_enqs_en_cor_err_rpt),1)
#define WRITE_MMU_ENQS_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQS_EN_COR_ERR_RPTr_BLKACC,4,0,p,MMU_ENQS_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_enqs_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_ENQS_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQS_NO_DEST
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_ENQS_NO_DEST.
 */
#define READ_MMU_ENQS_NO_DESTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQS_NO_DESTr_BLKACC,4,0,p,MMU_ENQS_NO_DESTr_OFFSET,0,(r._mmu_enqs_no_dest),2)
#define WRITE_MMU_ENQS_NO_DESTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQS_NO_DESTr_BLKACC,4,0,p,MMU_ENQS_NO_DESTr_OFFSET,0,&(r._mmu_enqs_no_dest),2)

/*******************************************************************************
 * End of 'MMU_ENQS_NO_DESTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_PBI_DB
 * BLOCKS:   MMU_SC
 * SIZE:     288
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB.
 */
#define READ_MMU_ENQS_PBI_DBm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_PBI_DBm_BLKACC,4,n,p,MMU_ENQS_PBI_DBm_OFFSET,i,(m._mmu_enqs_pbi_db),9)
#define WRITE_MMU_ENQS_PBI_DBm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DBm_BLKACC,4,n,p,MMU_ENQS_PBI_DBm_OFFSET,i,&(m._mmu_enqs_pbi_db),9)
#define WRITE_MMU_ENQS_PBI_DBm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DBm_BLKACC,4,-1,p,MMU_ENQS_PBI_DBm_OFFSET,i,&(m._mmu_enqs_pbi_db),9)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DBm'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQS_PBI_DB_DFT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB_DFT.
 */
#define READ_MMU_ENQS_PBI_DB_DFTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQS_PBI_DB_DFTr_BLKACC,4,0,p,MMU_ENQS_PBI_DB_DFTr_OFFSET,0,(r._mmu_enqs_pbi_db_dft),1)
#define WRITE_MMU_ENQS_PBI_DB_DFTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQS_PBI_DB_DFTr_BLKACC,4,0,p,MMU_ENQS_PBI_DB_DFTr_OFFSET,0,&(r._mmu_enqs_pbi_db_dft),1)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DB_DFTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_PBI_DB_MMU_SC0_IPIPE0
 * BLOCKS:   MMU_SC
 * SIZE:     288
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB_MMU_SC0_IPIPE0.
 */
#define READ_MMU_ENQS_PBI_DB_MMU_SC0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE0m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE0m_OFFSET,i,(m._mmu_enqs_pbi_db_mmu_sc0_ipipe0),9)
#define WRITE_MMU_ENQS_PBI_DB_MMU_SC0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE0m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE0m_OFFSET,i,&(m._mmu_enqs_pbi_db_mmu_sc0_ipipe0),9)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DB_MMU_SC0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_PBI_DB_MMU_SC0_IPIPE1
 * BLOCKS:   MMU_SC
 * SIZE:     288
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB_MMU_SC0_IPIPE1.
 */
#define READ_MMU_ENQS_PBI_DB_MMU_SC0_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE1m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE1m_OFFSET,i,(m._mmu_enqs_pbi_db_mmu_sc0_ipipe1),9)
#define WRITE_MMU_ENQS_PBI_DB_MMU_SC0_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE1m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE1m_OFFSET,i,&(m._mmu_enqs_pbi_db_mmu_sc0_ipipe1),9)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DB_MMU_SC0_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_PBI_DB_MMU_SC0_IPIPE2
 * BLOCKS:   MMU_SC
 * SIZE:     288
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB_MMU_SC0_IPIPE2.
 */
#define READ_MMU_ENQS_PBI_DB_MMU_SC0_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE2m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE2m_OFFSET,i,(m._mmu_enqs_pbi_db_mmu_sc0_ipipe2),9)
#define WRITE_MMU_ENQS_PBI_DB_MMU_SC0_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE2m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE2m_OFFSET,i,&(m._mmu_enqs_pbi_db_mmu_sc0_ipipe2),9)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DB_MMU_SC0_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_PBI_DB_MMU_SC0_IPIPE3
 * BLOCKS:   MMU_SC
 * SIZE:     288
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB_MMU_SC0_IPIPE3.
 */
#define READ_MMU_ENQS_PBI_DB_MMU_SC0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE3m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE3m_OFFSET,i,(m._mmu_enqs_pbi_db_mmu_sc0_ipipe3),9)
#define WRITE_MMU_ENQS_PBI_DB_MMU_SC0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE3m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC0_IPIPE3m_OFFSET,i,&(m._mmu_enqs_pbi_db_mmu_sc0_ipipe3),9)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DB_MMU_SC0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_PBI_DB_MMU_SC1_IPIPE0
 * BLOCKS:   MMU_SC
 * SIZE:     288
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB_MMU_SC1_IPIPE0.
 */
#define READ_MMU_ENQS_PBI_DB_MMU_SC1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE0m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE0m_OFFSET,i,(m._mmu_enqs_pbi_db_mmu_sc1_ipipe0),9)
#define WRITE_MMU_ENQS_PBI_DB_MMU_SC1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE0m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE0m_OFFSET,i,&(m._mmu_enqs_pbi_db_mmu_sc1_ipipe0),9)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DB_MMU_SC1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_PBI_DB_MMU_SC1_IPIPE1
 * BLOCKS:   MMU_SC
 * SIZE:     288
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB_MMU_SC1_IPIPE1.
 */
#define READ_MMU_ENQS_PBI_DB_MMU_SC1_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE1m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE1m_OFFSET,i,(m._mmu_enqs_pbi_db_mmu_sc1_ipipe1),9)
#define WRITE_MMU_ENQS_PBI_DB_MMU_SC1_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE1m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE1m_OFFSET,i,&(m._mmu_enqs_pbi_db_mmu_sc1_ipipe1),9)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DB_MMU_SC1_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_PBI_DB_MMU_SC1_IPIPE2
 * BLOCKS:   MMU_SC
 * SIZE:     288
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB_MMU_SC1_IPIPE2.
 */
#define READ_MMU_ENQS_PBI_DB_MMU_SC1_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE2m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE2m_OFFSET,i,(m._mmu_enqs_pbi_db_mmu_sc1_ipipe2),9)
#define WRITE_MMU_ENQS_PBI_DB_MMU_SC1_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE2m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE2m_OFFSET,i,&(m._mmu_enqs_pbi_db_mmu_sc1_ipipe2),9)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DB_MMU_SC1_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQS_PBI_DB_MMU_SC1_IPIPE3
 * BLOCKS:   MMU_SC
 * SIZE:     288
 */
/*
 * These macros can be used to access MMU_ENQS_PBI_DB_MMU_SC1_IPIPE3.
 */
#define READ_MMU_ENQS_PBI_DB_MMU_SC1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE3m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE3m_OFFSET,i,(m._mmu_enqs_pbi_db_mmu_sc1_ipipe3),9)
#define WRITE_MMU_ENQS_PBI_DB_MMU_SC1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE3m_BLKACC,4,0,p,MMU_ENQS_PBI_DB_MMU_SC1_IPIPE3m_OFFSET,i,&(m._mmu_enqs_pbi_db_mmu_sc1_ipipe3),9)

/*******************************************************************************
 * End of 'MMU_ENQS_PBI_DB_MMU_SC1_IPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQS_PORT_NON_EMPTY_BMPA
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_ENQS_PORT_NON_EMPTY_BMPA.
 */
#define READ_MMU_ENQS_PORT_NON_EMPTY_BMPAr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQS_PORT_NON_EMPTY_BMPAr_BLKACC,4,0,p,MMU_ENQS_PORT_NON_EMPTY_BMPAr_OFFSET,0,(r._mmu_enqs_port_non_empty_bmpa),2)
#define WRITE_MMU_ENQS_PORT_NON_EMPTY_BMPAr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQS_PORT_NON_EMPTY_BMPAr_BLKACC,4,0,p,MMU_ENQS_PORT_NON_EMPTY_BMPAr_OFFSET,0,&(r._mmu_enqs_port_non_empty_bmpa),2)

/*******************************************************************************
 * End of 'MMU_ENQS_PORT_NON_EMPTY_BMPAr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQS_PORT_NON_EMPTY_BMPB
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_ENQS_PORT_NON_EMPTY_BMPB.
 */
#define READ_MMU_ENQS_PORT_NON_EMPTY_BMPBr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQS_PORT_NON_EMPTY_BMPBr_BLKACC,4,0,p,MMU_ENQS_PORT_NON_EMPTY_BMPBr_OFFSET,0,(r._mmu_enqs_port_non_empty_bmpb),2)
#define WRITE_MMU_ENQS_PORT_NON_EMPTY_BMPBr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQS_PORT_NON_EMPTY_BMPBr_BLKACC,4,0,p,MMU_ENQS_PORT_NON_EMPTY_BMPBr_OFFSET,0,&(r._mmu_enqs_port_non_empty_bmpb),2)

/*******************************************************************************
 * End of 'MMU_ENQS_PORT_NON_EMPTY_BMPBr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQX_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ENQX_ENABLE_ECCP_MEM.
 */
#define READ_MMU_ENQX_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQX_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_ENQX_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_enqx_enable_eccp_mem),1)
#define WRITE_MMU_ENQX_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQX_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_ENQX_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_enqx_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_ENQX_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_ENQX_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_ENQX_EN_COR_ERR_RPT.
 */
#define READ_MMU_ENQX_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_ENQX_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_ENQX_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_enqx_en_cor_err_rpt),1)
#define WRITE_MMU_ENQX_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_ENQX_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_ENQX_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_enqx_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_ENQX_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_HI
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_HI.
 */
#define READ_MMU_ENQX_PIPEMEM_HIm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_HIm_BLKACC,3,n,p,MMU_ENQX_PIPEMEM_HIm_OFFSET,i,(m._mmu_enqx_pipemem_hi),5)
#define WRITE_MMU_ENQX_PIPEMEM_HIm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HIm_BLKACC,3,n,p,MMU_ENQX_PIPEMEM_HIm_OFFSET,i,&(m._mmu_enqx_pipemem_hi),5)
#define WRITE_MMU_ENQX_PIPEMEM_HIm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HIm_BLKACC,3,-1,p,MMU_ENQX_PIPEMEM_HIm_OFFSET,i,&(m._mmu_enqx_pipemem_hi),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_HIm'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE0.
 */
#define READ_MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE0m_OFFSET,i,(m._mmu_enqx_pipemem_hi_mmu_xpe0_ipipe0),5)
#define WRITE_MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._mmu_enqx_pipemem_hi_mmu_xpe0_ipipe0),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE3.
 */
#define READ_MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE3m_OFFSET,i,(m._mmu_enqx_pipemem_hi_mmu_xpe0_ipipe3),5)
#define WRITE_MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._mmu_enqx_pipemem_hi_mmu_xpe0_ipipe3),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_HI_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE0.
 */
#define READ_MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE0m_OFFSET,i,(m._mmu_enqx_pipemem_hi_mmu_xpe1_ipipe0),5)
#define WRITE_MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._mmu_enqx_pipemem_hi_mmu_xpe1_ipipe0),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE3.
 */
#define READ_MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE3m_OFFSET,i,(m._mmu_enqx_pipemem_hi_mmu_xpe1_ipipe3),5)
#define WRITE_MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._mmu_enqx_pipemem_hi_mmu_xpe1_ipipe3),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_HI_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE1.
 */
#define READ_MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE1m_OFFSET,i,(m._mmu_enqx_pipemem_hi_mmu_xpe2_ipipe1),5)
#define WRITE_MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._mmu_enqx_pipemem_hi_mmu_xpe2_ipipe1),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE2.
 */
#define READ_MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE2m_OFFSET,i,(m._mmu_enqx_pipemem_hi_mmu_xpe2_ipipe2),5)
#define WRITE_MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._mmu_enqx_pipemem_hi_mmu_xpe2_ipipe2),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_HI_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE1.
 */
#define READ_MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE1m_OFFSET,i,(m._mmu_enqx_pipemem_hi_mmu_xpe3_ipipe1),5)
#define WRITE_MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._mmu_enqx_pipemem_hi_mmu_xpe3_ipipe1),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE2.
 */
#define READ_MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE2m_OFFSET,i,(m._mmu_enqx_pipemem_hi_mmu_xpe3_ipipe2),5)
#define WRITE_MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._mmu_enqx_pipemem_hi_mmu_xpe3_ipipe2),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_HI_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_LO
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_LO.
 */
#define READ_MMU_ENQX_PIPEMEM_LOm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_LOm_BLKACC,3,n,p,MMU_ENQX_PIPEMEM_LOm_OFFSET,i,(m._mmu_enqx_pipemem_lo),5)
#define WRITE_MMU_ENQX_PIPEMEM_LOm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LOm_BLKACC,3,n,p,MMU_ENQX_PIPEMEM_LOm_OFFSET,i,&(m._mmu_enqx_pipemem_lo),5)
#define WRITE_MMU_ENQX_PIPEMEM_LOm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LOm_BLKACC,3,-1,p,MMU_ENQX_PIPEMEM_LOm_OFFSET,i,&(m._mmu_enqx_pipemem_lo),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_LOm'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE0.
 */
#define READ_MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE0m_OFFSET,i,(m._mmu_enqx_pipemem_lo_mmu_xpe0_ipipe0),5)
#define WRITE_MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._mmu_enqx_pipemem_lo_mmu_xpe0_ipipe0),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE3.
 */
#define READ_MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE3m_OFFSET,i,(m._mmu_enqx_pipemem_lo_mmu_xpe0_ipipe3),5)
#define WRITE_MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._mmu_enqx_pipemem_lo_mmu_xpe0_ipipe3),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_LO_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE0.
 */
#define READ_MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE0m_OFFSET,i,(m._mmu_enqx_pipemem_lo_mmu_xpe1_ipipe0),5)
#define WRITE_MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._mmu_enqx_pipemem_lo_mmu_xpe1_ipipe0),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE3.
 */
#define READ_MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE3m_OFFSET,i,(m._mmu_enqx_pipemem_lo_mmu_xpe1_ipipe3),5)
#define WRITE_MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._mmu_enqx_pipemem_lo_mmu_xpe1_ipipe3),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_LO_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE1.
 */
#define READ_MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE1m_OFFSET,i,(m._mmu_enqx_pipemem_lo_mmu_xpe2_ipipe1),5)
#define WRITE_MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._mmu_enqx_pipemem_lo_mmu_xpe2_ipipe1),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE2.
 */
#define READ_MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE2m_OFFSET,i,(m._mmu_enqx_pipemem_lo_mmu_xpe2_ipipe2),5)
#define WRITE_MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._mmu_enqx_pipemem_lo_mmu_xpe2_ipipe2),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_LO_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE1.
 */
#define READ_MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE1m_OFFSET,i,(m._mmu_enqx_pipemem_lo_mmu_xpe3_ipipe1),5)
#define WRITE_MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._mmu_enqx_pipemem_lo_mmu_xpe3_ipipe1),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     144
 */
/*
 * These macros can be used to access MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE2.
 */
#define READ_MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE2m_OFFSET,i,(m._mmu_enqx_pipemem_lo_mmu_xpe3_ipipe2),5)
#define WRITE_MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._mmu_enqx_pipemem_lo_mmu_xpe3_ipipe2),5)

/*******************************************************************************
 * End of 'MMU_ENQX_PIPEMEM_LO_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * REGISTER:  MMU_EPRG_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EPRG_ENABLE_ECCP_MEM.
 */
#define READ_MMU_EPRG_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_EPRG_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_EPRG_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_eprg_enable_eccp_mem),1)
#define WRITE_MMU_EPRG_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_EPRG_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_EPRG_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_eprg_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_EPRG_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EPRG_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EPRG_EN_COR_ERR_RPT.
 */
#define READ_MMU_EPRG_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_EPRG_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_EPRG_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_eprg_en_cor_err_rpt),1)
#define WRITE_MMU_EPRG_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_EPRG_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_EPRG_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_eprg_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_EPRG_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EPRG_FIFO_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EPRG_FIFO_CONFIG.
 */
#define READ_MMU_EPRG_FIFO_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_EPRG_FIFO_CONFIGr_BLKACC,3,0,p,MMU_EPRG_FIFO_CONFIGr_OFFSET,0,(r._mmu_eprg_fifo_config),2)
#define WRITE_MMU_EPRG_FIFO_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_EPRG_FIFO_CONFIGr_BLKACC,3,0,p,MMU_EPRG_FIFO_CONFIGr_OFFSET,0,&(r._mmu_eprg_fifo_config),2)

/*******************************************************************************
 * End of 'MMU_EPRG_FIFO_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_EPRG_FIFO_STATUS
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_EPRG_FIFO_STATUS.
 */
#define READ_MMU_EPRG_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_EPRG_FIFO_STATUSr_BLKACC,3,0,p,MMU_EPRG_FIFO_STATUSr_OFFSET,0,(r._mmu_eprg_fifo_status),2)
#define WRITE_MMU_EPRG_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_EPRG_FIFO_STATUSr_BLKACC,3,0,p,MMU_EPRG_FIFO_STATUSr_OFFSET,0,&(r._mmu_eprg_fifo_status),2)

/*******************************************************************************
 * End of 'MMU_EPRG_FIFO_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_EPRG_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     47
 */
/*
 * These macros can be used to access MMU_EPRG_MEM.
 */
#define READ_MMU_EPRG_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_EPRG_MEMm_BLKACC,3,n,p,MMU_EPRG_MEMm_OFFSET,i,(m._mmu_eprg_mem),2)
#define WRITE_MMU_EPRG_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_EPRG_MEMm_BLKACC,3,n,p,MMU_EPRG_MEMm_OFFSET,i,&(m._mmu_eprg_mem),2)
#define WRITE_MMU_EPRG_MEMm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_EPRG_MEMm_BLKACC,3,-1,p,MMU_EPRG_MEMm_OFFSET,i,&(m._mmu_eprg_mem),2)

/*******************************************************************************
 * End of 'MMU_EPRG_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_EPRG_MEM_MMU_XPE0_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     47
 */
/*
 * These macros can be used to access MMU_EPRG_MEM_MMU_XPE0_XPE0.
 */
#define READ_MMU_EPRG_MEM_MMU_XPE0_XPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_EPRG_MEM_MMU_XPE0_XPE0m_BLKACC,3,0,p,MMU_EPRG_MEM_MMU_XPE0_XPE0m_OFFSET,i,(m._mmu_eprg_mem_mmu_xpe0_xpe0),2)
#define WRITE_MMU_EPRG_MEM_MMU_XPE0_XPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_EPRG_MEM_MMU_XPE0_XPE0m_BLKACC,3,0,p,MMU_EPRG_MEM_MMU_XPE0_XPE0m_OFFSET,i,&(m._mmu_eprg_mem_mmu_xpe0_xpe0),2)

/*******************************************************************************
 * End of 'MMU_EPRG_MEM_MMU_XPE0_XPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EPRG_MEM_MMU_XPE1_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     47
 */
/*
 * These macros can be used to access MMU_EPRG_MEM_MMU_XPE1_XPE1.
 */
#define READ_MMU_EPRG_MEM_MMU_XPE1_XPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_EPRG_MEM_MMU_XPE1_XPE1m_BLKACC,3,0,p,MMU_EPRG_MEM_MMU_XPE1_XPE1m_OFFSET,i,(m._mmu_eprg_mem_mmu_xpe1_xpe1),2)
#define WRITE_MMU_EPRG_MEM_MMU_XPE1_XPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_EPRG_MEM_MMU_XPE1_XPE1m_BLKACC,3,0,p,MMU_EPRG_MEM_MMU_XPE1_XPE1m_OFFSET,i,&(m._mmu_eprg_mem_mmu_xpe1_xpe1),2)

/*******************************************************************************
 * End of 'MMU_EPRG_MEM_MMU_XPE1_XPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EPRG_MEM_MMU_XPE2_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     47
 */
/*
 * These macros can be used to access MMU_EPRG_MEM_MMU_XPE2_XPE2.
 */
#define READ_MMU_EPRG_MEM_MMU_XPE2_XPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_EPRG_MEM_MMU_XPE2_XPE2m_BLKACC,3,0,p,MMU_EPRG_MEM_MMU_XPE2_XPE2m_OFFSET,i,(m._mmu_eprg_mem_mmu_xpe2_xpe2),2)
#define WRITE_MMU_EPRG_MEM_MMU_XPE2_XPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_EPRG_MEM_MMU_XPE2_XPE2m_BLKACC,3,0,p,MMU_EPRG_MEM_MMU_XPE2_XPE2m_OFFSET,i,&(m._mmu_eprg_mem_mmu_xpe2_xpe2),2)

/*******************************************************************************
 * End of 'MMU_EPRG_MEM_MMU_XPE2_XPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_EPRG_MEM_MMU_XPE3_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     47
 */
/*
 * These macros can be used to access MMU_EPRG_MEM_MMU_XPE3_XPE3.
 */
#define READ_MMU_EPRG_MEM_MMU_XPE3_XPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_EPRG_MEM_MMU_XPE3_XPE3m_BLKACC,3,0,p,MMU_EPRG_MEM_MMU_XPE3_XPE3m_OFFSET,i,(m._mmu_eprg_mem_mmu_xpe3_xpe3),2)
#define WRITE_MMU_EPRG_MEM_MMU_XPE3_XPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_EPRG_MEM_MMU_XPE3_XPE3m_BLKACC,3,0,p,MMU_EPRG_MEM_MMU_XPE3_XPE3m_OFFSET,i,&(m._mmu_eprg_mem_mmu_xpe3_xpe3),2)

/*******************************************************************************
 * End of 'MMU_EPRG_MEM_MMU_XPE3_XPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_EPRG_MEM_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_EPRG_MEM_TM.
 */
#define READ_MMU_EPRG_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_EPRG_MEM_TMr_BLKACC,3,0,p,MMU_EPRG_MEM_TMr_OFFSET,0,(r._mmu_eprg_mem_tm),1)
#define WRITE_MMU_EPRG_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_EPRG_MEM_TMr_BLKACC,3,0,p,MMU_EPRG_MEM_TMr_OFFSET,0,&(r._mmu_eprg_mem_tm),1)

/*******************************************************************************
 * End of 'MMU_EPRG_MEM_TMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_ALL_CPU_INT_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_ALL_CPU_INT_EN.
 */
#define READ_MMU_GCFG_ALL_CPU_INT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_ALL_CPU_INT_ENr_BLKACC,5,0,p,MMU_GCFG_ALL_CPU_INT_ENr_OFFSET,0,(r._mmu_gcfg_all_cpu_int_en),1)
#define WRITE_MMU_GCFG_ALL_CPU_INT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_ALL_CPU_INT_ENr_BLKACC,5,0,p,MMU_GCFG_ALL_CPU_INT_ENr_OFFSET,0,&(r._mmu_gcfg_all_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_GCFG_ALL_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_ALL_CPU_INT_STAT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_ALL_CPU_INT_STAT.
 */
#define READ_MMU_GCFG_ALL_CPU_INT_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_ALL_CPU_INT_STATr_BLKACC,5,0,p,MMU_GCFG_ALL_CPU_INT_STATr_OFFSET,0,(r._mmu_gcfg_all_cpu_int_stat),1)
#define WRITE_MMU_GCFG_ALL_CPU_INT_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_ALL_CPU_INT_STATr_BLKACC,5,0,p,MMU_GCFG_ALL_CPU_INT_STATr_OFFSET,0,&(r._mmu_gcfg_all_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_GCFG_ALL_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_BST_HW_SNAPSHOT_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_BST_HW_SNAPSHOT_EN.
 */
#define READ_MMU_GCFG_BST_HW_SNAPSHOT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_BST_HW_SNAPSHOT_ENr_BLKACC,5,0,p,MMU_GCFG_BST_HW_SNAPSHOT_ENr_OFFSET,0,(r._mmu_gcfg_bst_hw_snapshot_en),1)
#define WRITE_MMU_GCFG_BST_HW_SNAPSHOT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_BST_HW_SNAPSHOT_ENr_BLKACC,5,0,p,MMU_GCFG_BST_HW_SNAPSHOT_ENr_OFFSET,0,&(r._mmu_gcfg_bst_hw_snapshot_en),1)

/*******************************************************************************
 * End of 'MMU_GCFG_BST_HW_SNAPSHOT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_BST_SNAPSHOT_ACTION_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_BST_SNAPSHOT_ACTION_EN.
 */
#define READ_MMU_GCFG_BST_SNAPSHOT_ACTION_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_BST_SNAPSHOT_ACTION_ENr_BLKACC,5,0,p,MMU_GCFG_BST_SNAPSHOT_ACTION_ENr_OFFSET,0,(r._mmu_gcfg_bst_snapshot_action_en),1)
#define WRITE_MMU_GCFG_BST_SNAPSHOT_ACTION_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_BST_SNAPSHOT_ACTION_ENr_BLKACC,5,0,p,MMU_GCFG_BST_SNAPSHOT_ACTION_ENr_OFFSET,0,&(r._mmu_gcfg_bst_snapshot_action_en),1)

/*******************************************************************************
 * End of 'MMU_GCFG_BST_SNAPSHOT_ACTION_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_BST_TRACKING_ENABLE
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_BST_TRACKING_ENABLE.
 */
#define READ_MMU_GCFG_BST_TRACKING_ENABLEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_BST_TRACKING_ENABLEr_BLKACC,5,0,p,MMU_GCFG_BST_TRACKING_ENABLEr_OFFSET,0,(r._mmu_gcfg_bst_tracking_enable),1)
#define WRITE_MMU_GCFG_BST_TRACKING_ENABLEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_BST_TRACKING_ENABLEr_BLKACC,5,0,p,MMU_GCFG_BST_TRACKING_ENABLEr_OFFSET,0,&(r._mmu_gcfg_bst_tracking_enable),1)

/*******************************************************************************
 * End of 'MMU_GCFG_BST_TRACKING_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_ECC_SINGLE_BIT_ERRORS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_ECC_SINGLE_BIT_ERRORS.
 */
#define READ_MMU_GCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,5,0,p,MMU_GCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,(r._mmu_gcfg_ecc_single_bit_errors),1)
#define WRITE_MMU_GCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,5,0,p,MMU_GCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,&(r._mmu_gcfg_ecc_single_bit_errors),1)

/*******************************************************************************
 * End of 'MMU_GCFG_ECC_SINGLE_BIT_ERRORSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_GLB_CPU_INT_CLEAR
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_GLB_CPU_INT_CLEAR.
 */
#define READ_MMU_GCFG_GLB_CPU_INT_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_GLB_CPU_INT_CLEARr_BLKACC,5,0,p,MMU_GCFG_GLB_CPU_INT_CLEARr_OFFSET,0,(r._mmu_gcfg_glb_cpu_int_clear),1)
#define WRITE_MMU_GCFG_GLB_CPU_INT_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_GLB_CPU_INT_CLEARr_BLKACC,5,0,p,MMU_GCFG_GLB_CPU_INT_CLEARr_OFFSET,0,&(r._mmu_gcfg_glb_cpu_int_clear),1)

/*******************************************************************************
 * End of 'MMU_GCFG_GLB_CPU_INT_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_GLB_CPU_INT_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_GLB_CPU_INT_EN.
 */
#define READ_MMU_GCFG_GLB_CPU_INT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_GLB_CPU_INT_ENr_BLKACC,5,0,p,MMU_GCFG_GLB_CPU_INT_ENr_OFFSET,0,(r._mmu_gcfg_glb_cpu_int_en),1)
#define WRITE_MMU_GCFG_GLB_CPU_INT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_GLB_CPU_INT_ENr_BLKACC,5,0,p,MMU_GCFG_GLB_CPU_INT_ENr_OFFSET,0,&(r._mmu_gcfg_glb_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_GCFG_GLB_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_GLB_CPU_INT_STAT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_GLB_CPU_INT_STAT.
 */
#define READ_MMU_GCFG_GLB_CPU_INT_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_GLB_CPU_INT_STATr_BLKACC,5,0,p,MMU_GCFG_GLB_CPU_INT_STATr_OFFSET,0,(r._mmu_gcfg_glb_cpu_int_stat),1)
#define WRITE_MMU_GCFG_GLB_CPU_INT_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_GLB_CPU_INT_STATr_BLKACC,5,0,p,MMU_GCFG_GLB_CPU_INT_STATr_OFFSET,0,&(r._mmu_gcfg_glb_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_GCFG_GLB_CPU_INT_STATr'
 */




/*******************************************************************************
 * MEMORY:  MMU_GCFG_MEM_FAIL_ADDR_64
 * BLOCKS:   MMU_GLB
 * SIZE:     35
 */
/*
 * These macros can be used to access MMU_GCFG_MEM_FAIL_ADDR_64.
 */
#define READ_MMU_GCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_GCFG_MEM_FAIL_ADDR_64m_BLKACC,5,0,p,MMU_GCFG_MEM_FAIL_ADDR_64m_OFFSET,i,(m._mmu_gcfg_mem_fail_addr_64),2)
#define WRITE_MMU_GCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_GCFG_MEM_FAIL_ADDR_64m_BLKACC,5,0,p,MMU_GCFG_MEM_FAIL_ADDR_64m_OFFSET,i,&(m._mmu_gcfg_mem_fail_addr_64),2)

/*******************************************************************************
 * End of 'MMU_GCFG_MEM_FAIL_ADDR_64m'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_MEM_FAIL_INT_CTR
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_MEM_FAIL_INT_CTR.
 */
#define READ_MMU_GCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_MEM_FAIL_INT_CTRr_BLKACC,5,0,p,MMU_GCFG_MEM_FAIL_INT_CTRr_OFFSET,0,(r._mmu_gcfg_mem_fail_int_ctr),1)
#define WRITE_MMU_GCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_MEM_FAIL_INT_CTRr_BLKACC,5,0,p,MMU_GCFG_MEM_FAIL_INT_CTRr_OFFSET,0,&(r._mmu_gcfg_mem_fail_int_ctr),1)

/*******************************************************************************
 * End of 'MMU_GCFG_MEM_FAIL_INT_CTRr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_MEM_SER_FIFO_STS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_MEM_SER_FIFO_STS.
 */
#define READ_MMU_GCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_MEM_SER_FIFO_STSr_BLKACC,5,0,p,MMU_GCFG_MEM_SER_FIFO_STSr_OFFSET,0,(r._mmu_gcfg_mem_ser_fifo_sts),1)
#define WRITE_MMU_GCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_MEM_SER_FIFO_STSr_BLKACC,5,0,p,MMU_GCFG_MEM_SER_FIFO_STSr_OFFSET,0,&(r._mmu_gcfg_mem_ser_fifo_sts),1)

/*******************************************************************************
 * End of 'MMU_GCFG_MEM_SER_FIFO_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_MISCCONFIG
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_MISCCONFIG.
 */
#define READ_MMU_GCFG_MISCCONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_MISCCONFIGr_BLKACC,5,0,p,MMU_GCFG_MISCCONFIGr_OFFSET,0,(r._mmu_gcfg_miscconfig),1)
#define WRITE_MMU_GCFG_MISCCONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_MISCCONFIGr_BLKACC,5,0,p,MMU_GCFG_MISCCONFIGr_OFFSET,0,&(r._mmu_gcfg_miscconfig),1)

/*******************************************************************************
 * End of 'MMU_GCFG_MISCCONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_PARITY_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_PARITY_EN.
 */
#define READ_MMU_GCFG_PARITY_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_PARITY_ENr_BLKACC,5,0,p,MMU_GCFG_PARITY_ENr_OFFSET,0,(r._mmu_gcfg_parity_en),1)
#define WRITE_MMU_GCFG_PARITY_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_PARITY_ENr_BLKACC,5,0,p,MMU_GCFG_PARITY_ENr_OFFSET,0,&(r._mmu_gcfg_parity_en),1)

/*******************************************************************************
 * End of 'MMU_GCFG_PARITY_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_SPLITTER_RESP_STATUS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_GCFG_SPLITTER_RESP_STATUS.
 */
#define READ_MMU_GCFG_SPLITTER_RESP_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_SPLITTER_RESP_STATUSr_BLKACC,5,0,p,MMU_GCFG_SPLITTER_RESP_STATUSr_OFFSET,0,(r._mmu_gcfg_splitter_resp_status),1)
#define WRITE_MMU_GCFG_SPLITTER_RESP_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_SPLITTER_RESP_STATUSr_BLKACC,5,0,p,MMU_GCFG_SPLITTER_RESP_STATUSr_OFFSET,0,&(r._mmu_gcfg_splitter_resp_status),1)

/*******************************************************************************
 * End of 'MMU_GCFG_SPLITTER_RESP_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_GCFG_SPLITTER_SBUS_ERR_CAPTURE
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_GCFG_SPLITTER_SBUS_ERR_CAPTURE.
 */
#define READ_MMU_GCFG_SPLITTER_SBUS_ERR_CAPTUREr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_GCFG_SPLITTER_SBUS_ERR_CAPTUREr_BLKACC,5,0,p,MMU_GCFG_SPLITTER_SBUS_ERR_CAPTUREr_OFFSET,0,(r._mmu_gcfg_splitter_sbus_err_capture),2)
#define WRITE_MMU_GCFG_SPLITTER_SBUS_ERR_CAPTUREr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_GCFG_SPLITTER_SBUS_ERR_CAPTUREr_BLKACC,5,0,p,MMU_GCFG_SPLITTER_SBUS_ERR_CAPTUREr_OFFSET,0,&(r._mmu_gcfg_splitter_sbus_err_capture),2)

/*******************************************************************************
 * End of 'MMU_GCFG_SPLITTER_SBUS_ERR_CAPTUREr'
 */




/*******************************************************************************
 * REGISTER:  MMU_INTFO_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_INTFO_ENABLE_ECCP_MEM.
 */
#define READ_MMU_INTFO_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_INTFO_ENABLE_ECCP_MEMr_BLKACC,5,0,p,MMU_INTFO_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_intfo_enable_eccp_mem),1)
#define WRITE_MMU_INTFO_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_INTFO_ENABLE_ECCP_MEMr_BLKACC,5,0,p,MMU_INTFO_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_intfo_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_INTFO_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * MEMORY:  MMU_INTFO_TC2PRI_MAPPING
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_INTFO_TC2PRI_MAPPING.
 */
#define READ_MMU_INTFO_TC2PRI_MAPPINGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_INTFO_TC2PRI_MAPPINGm_BLKACC,5,0,p,MMU_INTFO_TC2PRI_MAPPINGm_OFFSET,i,(m._mmu_intfo_tc2pri_mapping),2)
#define WRITE_MMU_INTFO_TC2PRI_MAPPINGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_INTFO_TC2PRI_MAPPINGm_BLKACC,5,0,p,MMU_INTFO_TC2PRI_MAPPINGm_OFFSET,i,&(m._mmu_intfo_tc2pri_mapping),2)

/*******************************************************************************
 * End of 'MMU_INTFO_TC2PRI_MAPPINGm'
 */




/*******************************************************************************
 * REGISTER:  MMU_LLFC_TX_CONFIG_1
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_LLFC_TX_CONFIG_1.
 */
#define READ_MMU_LLFC_TX_CONFIG_1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_LLFC_TX_CONFIG_1r_BLKACC,5,0,p,MMU_LLFC_TX_CONFIG_1r_OFFSET,0,(r._mmu_llfc_tx_config_1),1)
#define WRITE_MMU_LLFC_TX_CONFIG_1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_LLFC_TX_CONFIG_1r_BLKACC,5,0,p,MMU_LLFC_TX_CONFIG_1r_OFFSET,0,&(r._mmu_llfc_tx_config_1),1)

/*******************************************************************************
 * End of 'MMU_LLFC_TX_CONFIG_1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_LLFC_TX_CONFIG_2
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_LLFC_TX_CONFIG_2.
 */
#define READ_MMU_LLFC_TX_CONFIG_2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_LLFC_TX_CONFIG_2r_BLKACC,5,0,p,MMU_LLFC_TX_CONFIG_2r_OFFSET,0,(r._mmu_llfc_tx_config_2),1)
#define WRITE_MMU_LLFC_TX_CONFIG_2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_LLFC_TX_CONFIG_2r_BLKACC,5,0,p,MMU_LLFC_TX_CONFIG_2r_OFFSET,0,&(r._mmu_llfc_tx_config_2),1)

/*******************************************************************************
 * End of 'MMU_LLFC_TX_CONFIG_2r'
 */




/*******************************************************************************
 * MEMORY:  MMU_MCFP
 * BLOCKS:   MMU_SC
 * SIZE:     28
 */
/*
 * These macros can be used to access MMU_MCFP.
 */
#define READ_MMU_MCFPm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MCFPm_BLKACC,4,0,p,MMU_MCFPm_OFFSET,i,(m._mmu_mcfp),1)
#define WRITE_MMU_MCFPm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MCFPm_BLKACC,4,0,p,MMU_MCFPm_OFFSET,i,&(m._mmu_mcfp),1)

/*******************************************************************************
 * End of 'MMU_MCFPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MCQDB_X_A
 * BLOCKS:   MMU_SC
 * SIZE:     128
 */
/*
 * These macros can be used to access MMU_MCQDB_X_A.
 */
#define READ_MMU_MCQDB_X_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MCQDB_X_Am_BLKACC,4,0,p,MMU_MCQDB_X_Am_OFFSET,i,(m._mmu_mcqdb_x_a),4)
#define WRITE_MMU_MCQDB_X_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MCQDB_X_Am_BLKACC,4,0,p,MMU_MCQDB_X_Am_OFFSET,i,&(m._mmu_mcqdb_x_a),4)

/*******************************************************************************
 * End of 'MMU_MCQDB_X_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_MCQDB_X_B
 * BLOCKS:   MMU_SC
 * SIZE:     128
 */
/*
 * These macros can be used to access MMU_MCQDB_X_B.
 */
#define READ_MMU_MCQDB_X_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MCQDB_X_Bm_BLKACC,4,0,p,MMU_MCQDB_X_Bm_OFFSET,i,(m._mmu_mcqdb_x_b),4)
#define WRITE_MMU_MCQDB_X_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MCQDB_X_Bm_BLKACC,4,0,p,MMU_MCQDB_X_Bm_OFFSET,i,&(m._mmu_mcqdb_x_b),4)

/*******************************************************************************
 * End of 'MMU_MCQDB_X_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MCQDB_Y_A
 * BLOCKS:   MMU_SC
 * SIZE:     128
 */
/*
 * These macros can be used to access MMU_MCQDB_Y_A.
 */
#define READ_MMU_MCQDB_Y_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MCQDB_Y_Am_BLKACC,4,0,p,MMU_MCQDB_Y_Am_OFFSET,i,(m._mmu_mcqdb_y_a),4)
#define WRITE_MMU_MCQDB_Y_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MCQDB_Y_Am_BLKACC,4,0,p,MMU_MCQDB_Y_Am_OFFSET,i,&(m._mmu_mcqdb_y_a),4)

/*******************************************************************************
 * End of 'MMU_MCQDB_Y_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_MCQDB_Y_B
 * BLOCKS:   MMU_SC
 * SIZE:     128
 */
/*
 * These macros can be used to access MMU_MCQDB_Y_B.
 */
#define READ_MMU_MCQDB_Y_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MCQDB_Y_Bm_BLKACC,4,0,p,MMU_MCQDB_Y_Bm_OFFSET,i,(m._mmu_mcqdb_y_b),4)
#define WRITE_MMU_MCQDB_Y_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MCQDB_Y_Bm_BLKACC,4,0,p,MMU_MCQDB_Y_Bm_OFFSET,i,&(m._mmu_mcqdb_y_b),4)

/*******************************************************************************
 * End of 'MMU_MCQDB_Y_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MCQE
 * BLOCKS:   MMU_SC
 * SIZE:     54
 */
/*
 * These macros can be used to access MMU_MCQE.
 */
#define READ_MMU_MCQEm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MCQEm_BLKACC,4,0,p,MMU_MCQEm_OFFSET,i,(m._mmu_mcqe),2)
#define WRITE_MMU_MCQEm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MCQEm_BLKACC,4,0,p,MMU_MCQEm_OFFSET,i,&(m._mmu_mcqe),2)

/*******************************************************************************
 * End of 'MMU_MCQEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MCQN
 * BLOCKS:   MMU_SC
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_MCQN.
 */
#define READ_MMU_MCQNm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MCQNm_BLKACC,4,0,p,MMU_MCQNm_OFFSET,i,(m._mmu_mcqn),1)
#define WRITE_MMU_MCQNm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MCQNm_BLKACC,4,0,p,MMU_MCQNm_OFFSET,i,&(m._mmu_mcqn),1)

/*******************************************************************************
 * End of 'MMU_MCQNm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_BUCKET_L0_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     68
 */
/*
 * These macros can be used to access MMU_MTRO_BUCKET_L0_MEM.
 */
#define READ_MMU_MTRO_BUCKET_L0_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MTRO_BUCKET_L0_MEMm_BLKACC,4,0,p,MMU_MTRO_BUCKET_L0_MEMm_OFFSET,i,(m._mmu_mtro_bucket_l0_mem),3)
#define WRITE_MMU_MTRO_BUCKET_L0_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MTRO_BUCKET_L0_MEMm_BLKACC,4,0,p,MMU_MTRO_BUCKET_L0_MEMm_OFFSET,i,&(m._mmu_mtro_bucket_l0_mem),3)

/*******************************************************************************
 * End of 'MMU_MTRO_BUCKET_L0_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_BUCKET_L1_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     68
 */
/*
 * These macros can be used to access MMU_MTRO_BUCKET_L1_MEM.
 */
#define READ_MMU_MTRO_BUCKET_L1_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MTRO_BUCKET_L1_MEMm_BLKACC,4,0,p,MMU_MTRO_BUCKET_L1_MEMm_OFFSET,i,(m._mmu_mtro_bucket_l1_mem),3)
#define WRITE_MMU_MTRO_BUCKET_L1_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MTRO_BUCKET_L1_MEMm_BLKACC,4,0,p,MMU_MTRO_BUCKET_L1_MEMm_OFFSET,i,&(m._mmu_mtro_bucket_l1_mem),3)

/*******************************************************************************
 * End of 'MMU_MTRO_BUCKET_L1_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_EGRMETERINGBUCKET_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_MTRO_EGRMETERINGBUCKET_MEM.
 */
#define READ_MMU_MTRO_EGRMETERINGBUCKET_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MTRO_EGRMETERINGBUCKET_MEMm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGBUCKET_MEMm_OFFSET,i,(m._mmu_mtro_egrmeteringbucket_mem),1)
#define WRITE_MMU_MTRO_EGRMETERINGBUCKET_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MTRO_EGRMETERINGBUCKET_MEMm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGBUCKET_MEMm_OFFSET,i,&(m._mmu_mtro_egrmeteringbucket_mem),1)

/*******************************************************************************
 * End of 'MMU_MTRO_EGRMETERINGBUCKET_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_EGRMETERINGCONFIG_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     42
 */
/*
 * These macros can be used to access MMU_MTRO_EGRMETERINGCONFIG_MEM.
 */
#define READ_MMU_MTRO_EGRMETERINGCONFIG_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MTRO_EGRMETERINGCONFIG_MEMm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGCONFIG_MEMm_OFFSET,i,(m._mmu_mtro_egrmeteringconfig_mem),2)
#define WRITE_MMU_MTRO_EGRMETERINGCONFIG_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MTRO_EGRMETERINGCONFIG_MEMm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGCONFIG_MEMm_OFFSET,i,&(m._mmu_mtro_egrmeteringconfig_mem),2)

/*******************************************************************************
 * End of 'MMU_MTRO_EGRMETERINGCONFIG_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_EGRMETERINGCONFIG_MEM_A
 * BLOCKS:   MMU_SC
 * SIZE:     42
 */
/*
 * These macros can be used to access MMU_MTRO_EGRMETERINGCONFIG_MEM_A.
 */
#define READ_MMU_MTRO_EGRMETERINGCONFIG_MEM_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MTRO_EGRMETERINGCONFIG_MEM_Am_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGCONFIG_MEM_Am_OFFSET,i,(m._mmu_mtro_egrmeteringconfig_mem_a),2)
#define WRITE_MMU_MTRO_EGRMETERINGCONFIG_MEM_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MTRO_EGRMETERINGCONFIG_MEM_Am_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGCONFIG_MEM_Am_OFFSET,i,&(m._mmu_mtro_egrmeteringconfig_mem_a),2)

/*******************************************************************************
 * End of 'MMU_MTRO_EGRMETERINGCONFIG_MEM_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_EGRMETERINGCONFIG_MEM_B
 * BLOCKS:   MMU_SC
 * SIZE:     42
 */
/*
 * These macros can be used to access MMU_MTRO_EGRMETERINGCONFIG_MEM_B.
 */
#define READ_MMU_MTRO_EGRMETERINGCONFIG_MEM_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MTRO_EGRMETERINGCONFIG_MEM_Bm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGCONFIG_MEM_Bm_OFFSET,i,(m._mmu_mtro_egrmeteringconfig_mem_b),2)
#define WRITE_MMU_MTRO_EGRMETERINGCONFIG_MEM_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MTRO_EGRMETERINGCONFIG_MEM_Bm_BLKACC,4,0,p,MMU_MTRO_EGRMETERINGCONFIG_MEM_Bm_OFFSET,i,&(m._mmu_mtro_egrmeteringconfig_mem_b),2)

/*******************************************************************************
 * End of 'MMU_MTRO_EGRMETERINGCONFIG_MEM_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_L0_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     76
 */
/*
 * These macros can be used to access MMU_MTRO_L0_MEM.
 */
#define READ_MMU_MTRO_L0_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MTRO_L0_MEMm_BLKACC,4,0,p,MMU_MTRO_L0_MEMm_OFFSET,i,(m._mmu_mtro_l0_mem),3)
#define WRITE_MMU_MTRO_L0_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MTRO_L0_MEMm_BLKACC,4,0,p,MMU_MTRO_L0_MEMm_OFFSET,i,&(m._mmu_mtro_l0_mem),3)

/*******************************************************************************
 * End of 'MMU_MTRO_L0_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_MTRO_L1_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     76
 */
/*
 * These macros can be used to access MMU_MTRO_L1_MEM.
 */
#define READ_MMU_MTRO_L1_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_MTRO_L1_MEMm_BLKACC,4,0,p,MMU_MTRO_L1_MEMm_OFFSET,i,(m._mmu_mtro_l1_mem),3)
#define WRITE_MMU_MTRO_L1_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_MTRO_L1_MEMm_BLKACC,4,0,p,MMU_MTRO_L1_MEMm_OFFSET,i,&(m._mmu_mtro_l1_mem),3)

/*******************************************************************************
 * End of 'MMU_MTRO_L1_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_PDB_X
 * BLOCKS:   MMU_SC
 * SIZE:     26
 */
/*
 * These macros can be used to access MMU_PDB_X.
 */
#define READ_MMU_PDB_Xm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PDB_Xm_BLKACC,4,0,p,MMU_PDB_Xm_OFFSET,i,(m._mmu_pdb_x),1)
#define WRITE_MMU_PDB_Xm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PDB_Xm_BLKACC,4,0,p,MMU_PDB_Xm_OFFSET,i,&(m._mmu_pdb_x),1)

/*******************************************************************************
 * End of 'MMU_PDB_Xm'
 */




/*******************************************************************************
 * MEMORY:  MMU_PDB_Y
 * BLOCKS:   MMU_SC
 * SIZE:     26
 */
/*
 * These macros can be used to access MMU_PDB_Y.
 */
#define READ_MMU_PDB_Ym(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PDB_Ym_BLKACC,4,0,p,MMU_PDB_Ym_OFFSET,i,(m._mmu_pdb_y),1)
#define WRITE_MMU_PDB_Ym(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PDB_Ym_BLKACC,4,0,p,MMU_PDB_Ym_OFFSET,i,&(m._mmu_pdb_y),1)

/*******************************************************************************
 * End of 'MMU_PDB_Ym'
 */




/*******************************************************************************
 * MEMORY:  MMU_PKTHDR
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_PKTHDR.
 */
#define READ_MMU_PKTHDRm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PKTHDRm_BLKACC,3,0,p,MMU_PKTHDRm_OFFSET,i,(m._mmu_pkthdr),1)
#define WRITE_MMU_PKTHDRm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PKTHDRm_BLKACC,3,0,p,MMU_PKTHDRm_OFFSET,i,&(m._mmu_pkthdr),1)

/*******************************************************************************
 * End of 'MMU_PKTHDRm'
 */




/*******************************************************************************
 * MEMORY:  MMU_PKT_LINK
 * BLOCKS:   MMU_SC
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PKT_LINK.
 */
#define READ_MMU_PKT_LINKm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PKT_LINKm_BLKACC,4,0,p,MMU_PKT_LINKm_OFFSET,i,(m._mmu_pkt_link),1)
#define WRITE_MMU_PKT_LINKm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PKT_LINKm_BLKACC,4,0,p,MMU_PKT_LINKm_OFFSET,i,&(m._mmu_pkt_link),1)

/*******************************************************************************
 * End of 'MMU_PKT_LINKm'
 */




/*******************************************************************************
 * MEMORY:  MMU_PORTCNT
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_PORTCNT.
 */
#define READ_MMU_PORTCNTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PORTCNTm_BLKACC,3,0,p,MMU_PORTCNTm_OFFSET,i,(m._mmu_portcnt),1)
#define WRITE_MMU_PORTCNTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PORTCNTm_BLKACC,3,0,p,MMU_PORTCNTm_OFFSET,i,&(m._mmu_portcnt),1)

/*******************************************************************************
 * End of 'MMU_PORTCNTm'
 */




/*******************************************************************************
 * REGISTER:  MMU_PORT_CREDIT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PORT_CREDIT.
 */
#define READ_MMU_PORT_CREDITr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_PORT_CREDITr_BLKACC,4,0,p,MMU_PORT_CREDITr_OFFSET,0,(r._mmu_port_credit),1)
#define WRITE_MMU_PORT_CREDITr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_PORT_CREDITr_BLKACC,4,0,p,MMU_PORT_CREDITr_OFFSET,0,&(r._mmu_port_credit),1)

/*******************************************************************************
 * End of 'MMU_PORT_CREDITr'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE0_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE0_MEM.
 */
#define READ_MMU_PQE0_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE0_MEMm_BLKACC,3,n,p,MMU_PQE0_MEMm_OFFSET,i,(m._mmu_pqe0_mem),1)
#define WRITE_MMU_PQE0_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE0_MEMm_BLKACC,3,n,p,MMU_PQE0_MEMm_OFFSET,i,&(m._mmu_pqe0_mem),1)
#define WRITE_MMU_PQE0_MEMm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE0_MEMm_BLKACC,3,-1,p,MMU_PQE0_MEMm_OFFSET,i,&(m._mmu_pqe0_mem),1)

/*******************************************************************************
 * End of 'MMU_PQE0_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE0_MEM_MMU_XPE0_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE0_MEM_MMU_XPE0_XPE0.
 */
#define READ_MMU_PQE0_MEM_MMU_XPE0_XPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE0_MEM_MMU_XPE0_XPE0m_BLKACC,3,0,p,MMU_PQE0_MEM_MMU_XPE0_XPE0m_OFFSET,i,(m._mmu_pqe0_mem_mmu_xpe0_xpe0),1)
#define WRITE_MMU_PQE0_MEM_MMU_XPE0_XPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE0_MEM_MMU_XPE0_XPE0m_BLKACC,3,0,p,MMU_PQE0_MEM_MMU_XPE0_XPE0m_OFFSET,i,&(m._mmu_pqe0_mem_mmu_xpe0_xpe0),1)

/*******************************************************************************
 * End of 'MMU_PQE0_MEM_MMU_XPE0_XPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE0_MEM_MMU_XPE1_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE0_MEM_MMU_XPE1_XPE1.
 */
#define READ_MMU_PQE0_MEM_MMU_XPE1_XPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE0_MEM_MMU_XPE1_XPE1m_BLKACC,3,0,p,MMU_PQE0_MEM_MMU_XPE1_XPE1m_OFFSET,i,(m._mmu_pqe0_mem_mmu_xpe1_xpe1),1)
#define WRITE_MMU_PQE0_MEM_MMU_XPE1_XPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE0_MEM_MMU_XPE1_XPE1m_BLKACC,3,0,p,MMU_PQE0_MEM_MMU_XPE1_XPE1m_OFFSET,i,&(m._mmu_pqe0_mem_mmu_xpe1_xpe1),1)

/*******************************************************************************
 * End of 'MMU_PQE0_MEM_MMU_XPE1_XPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE0_MEM_MMU_XPE2_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE0_MEM_MMU_XPE2_XPE2.
 */
#define READ_MMU_PQE0_MEM_MMU_XPE2_XPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE0_MEM_MMU_XPE2_XPE2m_BLKACC,3,0,p,MMU_PQE0_MEM_MMU_XPE2_XPE2m_OFFSET,i,(m._mmu_pqe0_mem_mmu_xpe2_xpe2),1)
#define WRITE_MMU_PQE0_MEM_MMU_XPE2_XPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE0_MEM_MMU_XPE2_XPE2m_BLKACC,3,0,p,MMU_PQE0_MEM_MMU_XPE2_XPE2m_OFFSET,i,&(m._mmu_pqe0_mem_mmu_xpe2_xpe2),1)

/*******************************************************************************
 * End of 'MMU_PQE0_MEM_MMU_XPE2_XPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE0_MEM_MMU_XPE3_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE0_MEM_MMU_XPE3_XPE3.
 */
#define READ_MMU_PQE0_MEM_MMU_XPE3_XPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE0_MEM_MMU_XPE3_XPE3m_BLKACC,3,0,p,MMU_PQE0_MEM_MMU_XPE3_XPE3m_OFFSET,i,(m._mmu_pqe0_mem_mmu_xpe3_xpe3),1)
#define WRITE_MMU_PQE0_MEM_MMU_XPE3_XPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE0_MEM_MMU_XPE3_XPE3m_BLKACC,3,0,p,MMU_PQE0_MEM_MMU_XPE3_XPE3m_OFFSET,i,&(m._mmu_pqe0_mem_mmu_xpe3_xpe3),1)

/*******************************************************************************
 * End of 'MMU_PQE0_MEM_MMU_XPE3_XPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE1_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE1_MEM.
 */
#define READ_MMU_PQE1_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE1_MEMm_BLKACC,3,n,p,MMU_PQE1_MEMm_OFFSET,i,(m._mmu_pqe1_mem),1)
#define WRITE_MMU_PQE1_MEMm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE1_MEMm_BLKACC,3,n,p,MMU_PQE1_MEMm_OFFSET,i,&(m._mmu_pqe1_mem),1)
#define WRITE_MMU_PQE1_MEMm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE1_MEMm_BLKACC,3,-1,p,MMU_PQE1_MEMm_OFFSET,i,&(m._mmu_pqe1_mem),1)

/*******************************************************************************
 * End of 'MMU_PQE1_MEMm'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE1_MEM_MMU_XPE0_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE1_MEM_MMU_XPE0_XPE0.
 */
#define READ_MMU_PQE1_MEM_MMU_XPE0_XPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE1_MEM_MMU_XPE0_XPE0m_BLKACC,3,0,p,MMU_PQE1_MEM_MMU_XPE0_XPE0m_OFFSET,i,(m._mmu_pqe1_mem_mmu_xpe0_xpe0),1)
#define WRITE_MMU_PQE1_MEM_MMU_XPE0_XPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE1_MEM_MMU_XPE0_XPE0m_BLKACC,3,0,p,MMU_PQE1_MEM_MMU_XPE0_XPE0m_OFFSET,i,&(m._mmu_pqe1_mem_mmu_xpe0_xpe0),1)

/*******************************************************************************
 * End of 'MMU_PQE1_MEM_MMU_XPE0_XPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE1_MEM_MMU_XPE1_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE1_MEM_MMU_XPE1_XPE1.
 */
#define READ_MMU_PQE1_MEM_MMU_XPE1_XPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE1_MEM_MMU_XPE1_XPE1m_BLKACC,3,0,p,MMU_PQE1_MEM_MMU_XPE1_XPE1m_OFFSET,i,(m._mmu_pqe1_mem_mmu_xpe1_xpe1),1)
#define WRITE_MMU_PQE1_MEM_MMU_XPE1_XPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE1_MEM_MMU_XPE1_XPE1m_BLKACC,3,0,p,MMU_PQE1_MEM_MMU_XPE1_XPE1m_OFFSET,i,&(m._mmu_pqe1_mem_mmu_xpe1_xpe1),1)

/*******************************************************************************
 * End of 'MMU_PQE1_MEM_MMU_XPE1_XPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE1_MEM_MMU_XPE2_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE1_MEM_MMU_XPE2_XPE2.
 */
#define READ_MMU_PQE1_MEM_MMU_XPE2_XPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE1_MEM_MMU_XPE2_XPE2m_BLKACC,3,0,p,MMU_PQE1_MEM_MMU_XPE2_XPE2m_OFFSET,i,(m._mmu_pqe1_mem_mmu_xpe2_xpe2),1)
#define WRITE_MMU_PQE1_MEM_MMU_XPE2_XPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE1_MEM_MMU_XPE2_XPE2m_BLKACC,3,0,p,MMU_PQE1_MEM_MMU_XPE2_XPE2m_OFFSET,i,&(m._mmu_pqe1_mem_mmu_xpe2_xpe2),1)

/*******************************************************************************
 * End of 'MMU_PQE1_MEM_MMU_XPE2_XPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_PQE1_MEM_MMU_XPE3_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     23
 */
/*
 * These macros can be used to access MMU_PQE1_MEM_MMU_XPE3_XPE3.
 */
#define READ_MMU_PQE1_MEM_MMU_XPE3_XPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_PQE1_MEM_MMU_XPE3_XPE3m_BLKACC,3,0,p,MMU_PQE1_MEM_MMU_XPE3_XPE3m_OFFSET,i,(m._mmu_pqe1_mem_mmu_xpe3_xpe3),1)
#define WRITE_MMU_PQE1_MEM_MMU_XPE3_XPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_PQE1_MEM_MMU_XPE3_XPE3m_BLKACC,3,0,p,MMU_PQE1_MEM_MMU_XPE3_XPE3m_OFFSET,i,&(m._mmu_pqe1_mem_mmu_xpe3_xpe3),1)

/*******************************************************************************
 * End of 'MMU_PQE1_MEM_MMU_XPE3_XPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_PQE_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PQE_ENABLE_ECCP_MEM.
 */
#define READ_MMU_PQE_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_PQE_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_PQE_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_pqe_enable_eccp_mem),1)
#define WRITE_MMU_PQE_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_PQE_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_PQE_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_pqe_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_PQE_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_PQE_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_PQE_EN_COR_ERR_RPT.
 */
#define READ_MMU_PQE_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_PQE_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_PQE_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_pqe_en_cor_err_rpt),1)
#define WRITE_MMU_PQE_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_PQE_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_PQE_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_pqe_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_PQE_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_GROUP_INFO_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     56
 */
/*
 * These macros can be used to access MMU_REPL_GROUP_INFO_TBL.
 */
#define READ_MMU_REPL_GROUP_INFO_TBLm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_REPL_GROUP_INFO_TBLm_BLKACC,4,0,p,MMU_REPL_GROUP_INFO_TBLm_OFFSET,i,(m._mmu_repl_group_info_tbl),2)
#define WRITE_MMU_REPL_GROUP_INFO_TBLm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_REPL_GROUP_INFO_TBLm_BLKACC,4,0,p,MMU_REPL_GROUP_INFO_TBLm_OFFSET,i,&(m._mmu_repl_group_info_tbl),2)

/*******************************************************************************
 * End of 'MMU_REPL_GROUP_INFO_TBLm'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_GROUP_INITIAL_COPY_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     149
 */
/*
 * These macros can be used to access MMU_REPL_GROUP_INITIAL_COPY_COUNT.
 */
#define READ_MMU_REPL_GROUP_INITIAL_COPY_COUNTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_REPL_GROUP_INITIAL_COPY_COUNTm_BLKACC,3,0,p,MMU_REPL_GROUP_INITIAL_COPY_COUNTm_OFFSET,i,(m._mmu_repl_group_initial_copy_count),5)
#define WRITE_MMU_REPL_GROUP_INITIAL_COPY_COUNTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_REPL_GROUP_INITIAL_COPY_COUNTm_BLKACC,3,0,p,MMU_REPL_GROUP_INITIAL_COPY_COUNTm_OFFSET,i,&(m._mmu_repl_group_initial_copy_count),5)

/*******************************************************************************
 * End of 'MMU_REPL_GROUP_INITIAL_COPY_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_GROUP_INITIAL_COPY_COUNT0
 * BLOCKS:   MMU_XPE
 * SIZE:     149
 */
/*
 * These macros can be used to access MMU_REPL_GROUP_INITIAL_COPY_COUNT0.
 */
#define READ_MMU_REPL_GROUP_INITIAL_COPY_COUNT0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_REPL_GROUP_INITIAL_COPY_COUNT0m_BLKACC,3,0,p,MMU_REPL_GROUP_INITIAL_COPY_COUNT0m_OFFSET,i,(m._mmu_repl_group_initial_copy_count0),5)
#define WRITE_MMU_REPL_GROUP_INITIAL_COPY_COUNT0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_REPL_GROUP_INITIAL_COPY_COUNT0m_BLKACC,3,0,p,MMU_REPL_GROUP_INITIAL_COPY_COUNT0m_OFFSET,i,&(m._mmu_repl_group_initial_copy_count0),5)

/*******************************************************************************
 * End of 'MMU_REPL_GROUP_INITIAL_COPY_COUNT0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_GROUP_INITIAL_COPY_COUNT1
 * BLOCKS:   MMU_XPE
 * SIZE:     149
 */
/*
 * These macros can be used to access MMU_REPL_GROUP_INITIAL_COPY_COUNT1.
 */
#define READ_MMU_REPL_GROUP_INITIAL_COPY_COUNT1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_REPL_GROUP_INITIAL_COPY_COUNT1m_BLKACC,3,0,p,MMU_REPL_GROUP_INITIAL_COPY_COUNT1m_OFFSET,i,(m._mmu_repl_group_initial_copy_count1),5)
#define WRITE_MMU_REPL_GROUP_INITIAL_COPY_COUNT1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_REPL_GROUP_INITIAL_COPY_COUNT1m_BLKACC,3,0,p,MMU_REPL_GROUP_INITIAL_COPY_COUNT1m_OFFSET,i,&(m._mmu_repl_group_initial_copy_count1),5)

/*******************************************************************************
 * End of 'MMU_REPL_GROUP_INITIAL_COPY_COUNT1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_HEAD_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     20
 */
/*
 * These macros can be used to access MMU_REPL_HEAD_TBL.
 */
#define READ_MMU_REPL_HEAD_TBLm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_REPL_HEAD_TBLm_BLKACC,4,0,p,MMU_REPL_HEAD_TBLm_OFFSET,i,(m._mmu_repl_head_tbl),1)
#define WRITE_MMU_REPL_HEAD_TBLm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_REPL_HEAD_TBLm_BLKACC,4,0,p,MMU_REPL_HEAD_TBLm_OFFSET,i,&(m._mmu_repl_head_tbl),1)

/*******************************************************************************
 * End of 'MMU_REPL_HEAD_TBLm'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_LIST_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     101
 */
/*
 * These macros can be used to access MMU_REPL_LIST_TBL.
 */
#define READ_MMU_REPL_LIST_TBLm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_REPL_LIST_TBLm_BLKACC,4,0,p,MMU_REPL_LIST_TBLm_OFFSET,i,(m._mmu_repl_list_tbl),4)
#define WRITE_MMU_REPL_LIST_TBLm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_REPL_LIST_TBLm_BLKACC,4,0,p,MMU_REPL_LIST_TBLm_OFFSET,i,&(m._mmu_repl_list_tbl),4)

/*******************************************************************************
 * End of 'MMU_REPL_LIST_TBLm'
 */




/*******************************************************************************
 * MEMORY:  MMU_REPL_STATE_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_REPL_STATE_TBL.
 */
#define READ_MMU_REPL_STATE_TBLm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_REPL_STATE_TBLm_BLKACC,4,0,p,MMU_REPL_STATE_TBLm_OFFSET,i,(m._mmu_repl_state_tbl),1)
#define WRITE_MMU_REPL_STATE_TBLm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_REPL_STATE_TBLm_BLKACC,4,0,p,MMU_REPL_STATE_TBLm_OFFSET,i,&(m._mmu_repl_state_tbl),1)

/*******************************************************************************
 * End of 'MMU_REPL_STATE_TBLm'
 */




/*******************************************************************************
 * REGISTER:  MMU_RQE_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_RQE_ENABLE_ECCP_MEM.
 */
#define READ_MMU_RQE_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_RQE_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_RQE_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_rqe_enable_eccp_mem),1)
#define WRITE_MMU_RQE_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_RQE_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_RQE_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_rqe_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_RQE_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_RXD_PKT_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_RXD_PKT_64.
 */
#define READ_MMU_RXD_PKT_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_RXD_PKT_64r_BLKACC,3,0,p,MMU_RXD_PKT_64r_OFFSET,0,(r._mmu_rxd_pkt_64),2)
#define WRITE_MMU_RXD_PKT_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_RXD_PKT_64r_BLKACC,3,0,p,MMU_RXD_PKT_64r_OFFSET,0,&(r._mmu_rxd_pkt_64),2)

/*******************************************************************************
 * End of 'MMU_RXD_PKT_64r'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_ECC_SINGLE_BIT_ERRORS
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_ECC_SINGLE_BIT_ERRORS.
 */
#define READ_MMU_SCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,4,0,p,MMU_SCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,(r._mmu_scfg_ecc_single_bit_errors),1)
#define WRITE_MMU_SCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,4,0,p,MMU_SCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,&(r._mmu_scfg_ecc_single_bit_errors),1)

/*******************************************************************************
 * End of 'MMU_SCFG_ECC_SINGLE_BIT_ERRORSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_SCFG_MEM_FAIL_ADDR_64
 * BLOCKS:   MMU_SC
 * SIZE:     35
 */
/*
 * These macros can be used to access MMU_SCFG_MEM_FAIL_ADDR_64.
 */
#define READ_MMU_SCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_SCFG_MEM_FAIL_ADDR_64m_BLKACC,4,0,p,MMU_SCFG_MEM_FAIL_ADDR_64m_OFFSET,i,(m._mmu_scfg_mem_fail_addr_64),2)
#define WRITE_MMU_SCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_SCFG_MEM_FAIL_ADDR_64m_BLKACC,4,0,p,MMU_SCFG_MEM_FAIL_ADDR_64m_OFFSET,i,&(m._mmu_scfg_mem_fail_addr_64),2)

/*******************************************************************************
 * End of 'MMU_SCFG_MEM_FAIL_ADDR_64m'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_MEM_FAIL_INT_CTR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_MEM_FAIL_INT_CTR.
 */
#define READ_MMU_SCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_MEM_FAIL_INT_CTRr_BLKACC,4,0,p,MMU_SCFG_MEM_FAIL_INT_CTRr_OFFSET,0,(r._mmu_scfg_mem_fail_int_ctr),1)
#define WRITE_MMU_SCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_MEM_FAIL_INT_CTRr_BLKACC,4,0,p,MMU_SCFG_MEM_FAIL_INT_CTRr_OFFSET,0,&(r._mmu_scfg_mem_fail_int_ctr),1)

/*******************************************************************************
 * End of 'MMU_SCFG_MEM_FAIL_INT_CTRr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_MEM_SER_FIFO_STS
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_MEM_SER_FIFO_STS.
 */
#define READ_MMU_SCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_MEM_SER_FIFO_STSr_BLKACC,4,0,p,MMU_SCFG_MEM_SER_FIFO_STSr_OFFSET,0,(r._mmu_scfg_mem_ser_fifo_sts),1)
#define WRITE_MMU_SCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_MEM_SER_FIFO_STSr_BLKACC,4,0,p,MMU_SCFG_MEM_SER_FIFO_STSr_OFFSET,0,&(r._mmu_scfg_mem_ser_fifo_sts),1)

/*******************************************************************************
 * End of 'MMU_SCFG_MEM_SER_FIFO_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_MISCCONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_MISCCONFIG.
 */
#define READ_MMU_SCFG_MISCCONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_MISCCONFIGr_BLKACC,4,0,p,MMU_SCFG_MISCCONFIGr_OFFSET,0,(r._mmu_scfg_miscconfig),1)
#define WRITE_MMU_SCFG_MISCCONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_MISCCONFIGr_BLKACC,4,0,p,MMU_SCFG_MISCCONFIGr_OFFSET,0,&(r._mmu_scfg_miscconfig),1)

/*******************************************************************************
 * End of 'MMU_SCFG_MISCCONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_PARITY_EN
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_PARITY_EN.
 */
#define READ_MMU_SCFG_PARITY_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_PARITY_ENr_BLKACC,4,0,p,MMU_SCFG_PARITY_ENr_OFFSET,0,(r._mmu_scfg_parity_en),1)
#define WRITE_MMU_SCFG_PARITY_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_PARITY_ENr_BLKACC,4,0,p,MMU_SCFG_PARITY_ENr_OFFSET,0,&(r._mmu_scfg_parity_en),1)

/*******************************************************************************
 * End of 'MMU_SCFG_PARITY_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_SC_CPU_INT_CLEAR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_SC_CPU_INT_CLEAR.
 */
#define READ_MMU_SCFG_SC_CPU_INT_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_SC_CPU_INT_CLEARr_BLKACC,4,0,p,MMU_SCFG_SC_CPU_INT_CLEARr_OFFSET,0,(r._mmu_scfg_sc_cpu_int_clear),1)
#define WRITE_MMU_SCFG_SC_CPU_INT_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_SC_CPU_INT_CLEARr_BLKACC,4,0,p,MMU_SCFG_SC_CPU_INT_CLEARr_OFFSET,0,&(r._mmu_scfg_sc_cpu_int_clear),1)

/*******************************************************************************
 * End of 'MMU_SCFG_SC_CPU_INT_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_SC_CPU_INT_EN
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_SC_CPU_INT_EN.
 */
#define READ_MMU_SCFG_SC_CPU_INT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_SC_CPU_INT_ENr_BLKACC,4,0,p,MMU_SCFG_SC_CPU_INT_ENr_OFFSET,0,(r._mmu_scfg_sc_cpu_int_en),1)
#define WRITE_MMU_SCFG_SC_CPU_INT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_SC_CPU_INT_ENr_BLKACC,4,0,p,MMU_SCFG_SC_CPU_INT_ENr_OFFSET,0,&(r._mmu_scfg_sc_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_SCFG_SC_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_SC_CPU_INT_STAT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_SC_CPU_INT_STAT.
 */
#define READ_MMU_SCFG_SC_CPU_INT_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_SC_CPU_INT_STATr_BLKACC,4,0,p,MMU_SCFG_SC_CPU_INT_STATr_OFFSET,0,(r._mmu_scfg_sc_cpu_int_stat),1)
#define WRITE_MMU_SCFG_SC_CPU_INT_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_SC_CPU_INT_STATr_BLKACC,4,0,p,MMU_SCFG_SC_CPU_INT_STATr_OFFSET,0,&(r._mmu_scfg_sc_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_SCFG_SC_CPU_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_START_BY_START_ERROR
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_SCFG_START_BY_START_ERROR.
 */
#define READ_MMU_SCFG_START_BY_START_ERRORr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_START_BY_START_ERRORr_BLKACC,4,0,p,MMU_SCFG_START_BY_START_ERRORr_OFFSET,0,(r._mmu_scfg_start_by_start_error),2)
#define WRITE_MMU_SCFG_START_BY_START_ERRORr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_START_BY_START_ERRORr_BLKACC,4,0,p,MMU_SCFG_START_BY_START_ERRORr_OFFSET,0,&(r._mmu_scfg_start_by_start_error),2)

/*******************************************************************************
 * End of 'MMU_SCFG_START_BY_START_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_TOQ_MC_CFG0
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_TOQ_MC_CFG0.
 */
#define READ_MMU_SCFG_TOQ_MC_CFG0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_TOQ_MC_CFG0r_BLKACC,4,0,p,MMU_SCFG_TOQ_MC_CFG0r_OFFSET,0,(r._mmu_scfg_toq_mc_cfg0),1)
#define WRITE_MMU_SCFG_TOQ_MC_CFG0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_TOQ_MC_CFG0r_BLKACC,4,0,p,MMU_SCFG_TOQ_MC_CFG0r_OFFSET,0,&(r._mmu_scfg_toq_mc_cfg0),1)

/*******************************************************************************
 * End of 'MMU_SCFG_TOQ_MC_CFG0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_TOQ_MC_CFG1
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_TOQ_MC_CFG1.
 */
#define READ_MMU_SCFG_TOQ_MC_CFG1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_TOQ_MC_CFG1r_BLKACC,4,0,p,MMU_SCFG_TOQ_MC_CFG1r_OFFSET,0,(r._mmu_scfg_toq_mc_cfg1),1)
#define WRITE_MMU_SCFG_TOQ_MC_CFG1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_TOQ_MC_CFG1r_BLKACC,4,0,p,MMU_SCFG_TOQ_MC_CFG1r_OFFSET,0,&(r._mmu_scfg_toq_mc_cfg1),1)

/*******************************************************************************
 * End of 'MMU_SCFG_TOQ_MC_CFG1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_SCFG_TOQ_MC_CFG2
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_SCFG_TOQ_MC_CFG2.
 */
#define READ_MMU_SCFG_TOQ_MC_CFG2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_SCFG_TOQ_MC_CFG2r_BLKACC,4,0,p,MMU_SCFG_TOQ_MC_CFG2r_OFFSET,0,(r._mmu_scfg_toq_mc_cfg2),1)
#define WRITE_MMU_SCFG_TOQ_MC_CFG2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_SCFG_TOQ_MC_CFG2r_BLKACC,4,0,p,MMU_SCFG_TOQ_MC_CFG2r_OFFSET,0,&(r._mmu_scfg_toq_mc_cfg2),1)

/*******************************************************************************
 * End of 'MMU_SCFG_TOQ_MC_CFG2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDI_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDI_ENABLE_ECCP_MEM.
 */
#define READ_MMU_THDI_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDI_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_THDI_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_thdi_enable_eccp_mem),1)
#define WRITE_MMU_THDI_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDI_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_THDI_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_thdi_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_THDI_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE.
 */
#define READ_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr_BLKACC,3,n,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr_OFFSET,i,(r._mmu_thdm_db_cpuqueue_bst_threshold_profile),1)
#define WRITE_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr_BLKACC,3,n,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr_OFFSET,i,&(r._mmu_thdm_db_cpuqueue_bst_threshold_profile),1)
#define WRITE_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr_BLKACC,3,-1,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr_OFFSET,i,&(r._mmu_thdm_db_cpuqueue_bst_threshold_profile),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0.
 */
#define READ_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r_BLKACC,3,0,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r_OFFSET,i,(r._mmu_thdm_db_cpuqueue_bst_threshold_profile_mmu_xpe0_slice0),1)
#define WRITE_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r_BLKACC,3,0,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r_OFFSET,i,&(r._mmu_thdm_db_cpuqueue_bst_threshold_profile_mmu_xpe0_slice0),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1.
 */
#define READ_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r_BLKACC,3,0,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r_OFFSET,i,(r._mmu_thdm_db_cpuqueue_bst_threshold_profile_mmu_xpe1_slice1),1)
#define WRITE_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r_BLKACC,3,0,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r_OFFSET,i,&(r._mmu_thdm_db_cpuqueue_bst_threshold_profile_mmu_xpe1_slice1),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0.
 */
#define READ_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r_BLKACC,3,0,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r_OFFSET,i,(r._mmu_thdm_db_cpuqueue_bst_threshold_profile_mmu_xpe2_slice0),1)
#define WRITE_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r_BLKACC,3,0,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r_OFFSET,i,&(r._mmu_thdm_db_cpuqueue_bst_threshold_profile_mmu_xpe2_slice0),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1.
 */
#define READ_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r_BLKACC,3,0,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r_OFFSET,i,(r._mmu_thdm_db_cpuqueue_bst_threshold_profile_mmu_xpe3_slice1),1)
#define WRITE_MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r_BLKACC,3,0,p,MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r_OFFSET,i,&(r._mmu_thdm_db_cpuqueue_bst_threshold_profile_mmu_xpe3_slice1),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_DEVICE_BST_STAT
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_DEVICE_BST_STAT.
 */
#define READ_MMU_THDM_DB_DEVICE_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_DEVICE_BST_STATr_BLKACC,3,0,p,MMU_THDM_DB_DEVICE_BST_STATr_OFFSET,0,(r._mmu_thdm_db_device_bst_stat),2)
#define WRITE_MMU_THDM_DB_DEVICE_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_DEVICE_BST_STATr_BLKACC,3,0,p,MMU_THDM_DB_DEVICE_BST_STATr_OFFSET,0,&(r._mmu_thdm_db_device_bst_stat),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_DEVICE_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_DEVICE_BYPASS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_DEVICE_BYPASS.
 */
#define READ_MMU_THDM_DB_DEVICE_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_DEVICE_BYPASSr_BLKACC,3,0,p,MMU_THDM_DB_DEVICE_BYPASSr_OFFSET,0,(r._mmu_thdm_db_device_bypass),1)
#define WRITE_MMU_THDM_DB_DEVICE_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_DEVICE_BYPASSr_BLKACC,3,0,p,MMU_THDM_DB_DEVICE_BYPASSr_OFFSET,0,&(r._mmu_thdm_db_device_bypass),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_DEVICE_BYPASSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_DEVICE_THR_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_DEVICE_THR_CONFIG.
 */
#define READ_MMU_THDM_DB_DEVICE_THR_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_DEVICE_THR_CONFIGr_BLKACC,3,0,p,MMU_THDM_DB_DEVICE_THR_CONFIGr_OFFSET,0,(r._mmu_thdm_db_device_thr_config),1)
#define WRITE_MMU_THDM_DB_DEVICE_THR_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_DEVICE_THR_CONFIGr_BLKACC,3,0,p,MMU_THDM_DB_DEVICE_THR_CONFIGr_OFFSET,0,&(r._mmu_thdm_db_device_thr_config),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_DEVICE_THR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_ENABLE_ECCP_MEM.
 */
#define READ_MMU_THDM_DB_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_THDM_DB_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_thdm_db_enable_eccp_mem),2)
#define WRITE_MMU_THDM_DB_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_THDM_DB_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_thdm_db_enable_eccp_mem),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_EN_COR_ERR_RPT.
 */
#define READ_MMU_THDM_DB_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_THDM_DB_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_thdm_db_en_cor_err_rpt),2)
#define WRITE_MMU_THDM_DB_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_THDM_DB_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_thdm_db_en_cor_err_rpt),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_MEMORY_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_MEMORY_TM.
 */
#define READ_MMU_THDM_DB_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_MEMORY_TMr_BLKACC,3,0,p,MMU_THDM_DB_MEMORY_TMr_OFFSET,0,(r._mmu_thdm_db_memory_tm),2)
#define WRITE_MMU_THDM_DB_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_MEMORY_TMr_BLKACC,3,0,p,MMU_THDM_DB_MEMORY_TMr_OFFSET,0,&(r._mmu_thdm_db_memory_tm),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_MEMORY_TMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PKTPTR_CACHE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PKTPTR_CACHE.
 */
#define READ_MMU_THDM_DB_PKTPTR_CACHEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PKTPTR_CACHEr_BLKACC,3,0,p,MMU_THDM_DB_PKTPTR_CACHEr_OFFSET,0,(r._mmu_thdm_db_pktptr_cache),1)
#define WRITE_MMU_THDM_DB_PKTPTR_CACHEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PKTPTR_CACHEr_BLKACC,3,0,p,MMU_THDM_DB_PKTPTR_CACHEr_OFFSET,0,&(r._mmu_thdm_db_pktptr_cache),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PKTPTR_CACHEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PKTPTR_CACHE_STATUS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PKTPTR_CACHE_STATUS.
 */
#define READ_MMU_THDM_DB_PKTPTR_CACHE_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PKTPTR_CACHE_STATUSr_BLKACC,3,0,p,MMU_THDM_DB_PKTPTR_CACHE_STATUSr_OFFSET,0,(r._mmu_thdm_db_pktptr_cache_status),1)
#define WRITE_MMU_THDM_DB_PKTPTR_CACHE_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PKTPTR_CACHE_STATUSr_BLKACC,3,0,p,MMU_THDM_DB_PKTPTR_CACHE_STATUSr_OFFSET,0,&(r._mmu_thdm_db_pktptr_cache_status),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PKTPTR_CACHE_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_DROP_STATES
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_DROP_STATES.
 */
#define READ_MMU_THDM_DB_POOL_DROP_STATESr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_DROP_STATESr_BLKACC,3,0,p,MMU_THDM_DB_POOL_DROP_STATESr_OFFSET,0,(r._mmu_thdm_db_pool_drop_states),1)
#define WRITE_MMU_THDM_DB_POOL_DROP_STATESr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_DROP_STATESr_BLKACC,3,0,p,MMU_THDM_DB_POOL_DROP_STATESr_OFFSET,0,&(r._mmu_thdm_db_pool_drop_states),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_DROP_STATESr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_MCUC_BST_STAT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_MCUC_BST_STAT.
 */
#define READ_MMU_THDM_DB_POOL_MCUC_BST_STATr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_MCUC_BST_STATr_BLKACC,3,0,p,MMU_THDM_DB_POOL_MCUC_BST_STATr_OFFSET,i,(r._mmu_thdm_db_pool_mcuc_bst_stat),1)
#define WRITE_MMU_THDM_DB_POOL_MCUC_BST_STATr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_MCUC_BST_STATr_BLKACC,3,0,p,MMU_THDM_DB_POOL_MCUC_BST_STATr_OFFSET,i,&(r._mmu_thdm_db_pool_mcuc_bst_stat),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_MCUC_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_MCUC_BST_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_MCUC_BST_THRESHOLD.
 */
#define READ_MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdm_db_pool_mcuc_bst_threshold),1)
#define WRITE_MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_db_pool_mcuc_bst_threshold),1)
#define WRITE_MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr_BLKACC,3,-1,p,MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_db_pool_mcuc_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_MCUC_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_MC_BST_STAT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_MC_BST_STAT.
 */
#define READ_MMU_THDM_DB_POOL_MC_BST_STATr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_MC_BST_STATr_BLKACC,3,0,p,MMU_THDM_DB_POOL_MC_BST_STATr_OFFSET,i,(r._mmu_thdm_db_pool_mc_bst_stat),1)
#define WRITE_MMU_THDM_DB_POOL_MC_BST_STATr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_MC_BST_STATr_BLKACC,3,0,p,MMU_THDM_DB_POOL_MC_BST_STATr_OFFSET,i,&(r._mmu_thdm_db_pool_mc_bst_stat),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_MC_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_MC_BST_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_MC_BST_THRESHOLD.
 */
#define READ_MMU_THDM_DB_POOL_MC_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_MC_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_DB_POOL_MC_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdm_db_pool_mc_bst_threshold),1)
#define WRITE_MMU_THDM_DB_POOL_MC_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_MC_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_DB_POOL_MC_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_db_pool_mc_bst_threshold),1)
#define WRITE_MMU_THDM_DB_POOL_MC_BST_THRESHOLDr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_MC_BST_THRESHOLDr_BLKACC,3,-1,p,MMU_THDM_DB_POOL_MC_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_db_pool_mc_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_MC_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_MC_SHARED_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_MC_SHARED_COUNT.
 */
#define READ_MMU_THDM_DB_POOL_MC_SHARED_COUNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_MC_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDM_DB_POOL_MC_SHARED_COUNTr_OFFSET,i,(r._mmu_thdm_db_pool_mc_shared_count),1)
#define WRITE_MMU_THDM_DB_POOL_MC_SHARED_COUNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_MC_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDM_DB_POOL_MC_SHARED_COUNTr_OFFSET,i,&(r._mmu_thdm_db_pool_mc_shared_count),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_MC_SHARED_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_RED_RESUME_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_RED_RESUME_LIMIT.
 */
#define READ_MMU_THDM_DB_POOL_RED_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_RED_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_RED_RESUME_LIMITr_OFFSET,i,(r._mmu_thdm_db_pool_red_resume_limit),1)
#define WRITE_MMU_THDM_DB_POOL_RED_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_RED_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_RED_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_red_resume_limit),1)
#define WRITE_MMU_THDM_DB_POOL_RED_RESUME_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_RED_RESUME_LIMITr_BLKACC,3,-1,p,MMU_THDM_DB_POOL_RED_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_red_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_RED_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_RED_SHARED_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_RED_SHARED_LIMIT.
 */
#define READ_MMU_THDM_DB_POOL_RED_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_RED_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_RED_SHARED_LIMITr_OFFSET,i,(r._mmu_thdm_db_pool_red_shared_limit),1)
#define WRITE_MMU_THDM_DB_POOL_RED_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_RED_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_RED_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_red_shared_limit),1)
#define WRITE_MMU_THDM_DB_POOL_RED_SHARED_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_RED_SHARED_LIMITr_BLKACC,3,-1,p,MMU_THDM_DB_POOL_RED_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_red_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_RED_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_RESUME_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_RESUME_LIMIT.
 */
#define READ_MMU_THDM_DB_POOL_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_RESUME_LIMITr_OFFSET,i,(r._mmu_thdm_db_pool_resume_limit),1)
#define WRITE_MMU_THDM_DB_POOL_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_resume_limit),1)
#define WRITE_MMU_THDM_DB_POOL_RESUME_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_RESUME_LIMITr_BLKACC,3,-1,p,MMU_THDM_DB_POOL_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_SHARED_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_SHARED_COUNT.
 */
#define READ_MMU_THDM_DB_POOL_SHARED_COUNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDM_DB_POOL_SHARED_COUNTr_OFFSET,i,(r._mmu_thdm_db_pool_shared_count),1)
#define WRITE_MMU_THDM_DB_POOL_SHARED_COUNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDM_DB_POOL_SHARED_COUNTr_OFFSET,i,&(r._mmu_thdm_db_pool_shared_count),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_SHARED_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_SHARED_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_SHARED_LIMIT.
 */
#define READ_MMU_THDM_DB_POOL_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_SHARED_LIMITr_OFFSET,i,(r._mmu_thdm_db_pool_shared_limit),1)
#define WRITE_MMU_THDM_DB_POOL_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_shared_limit),1)
#define WRITE_MMU_THDM_DB_POOL_SHARED_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_SHARED_LIMITr_BLKACC,3,-1,p,MMU_THDM_DB_POOL_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_YELLOW_RESUME_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_YELLOW_RESUME_LIMIT.
 */
#define READ_MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,(r._mmu_thdm_db_pool_yellow_resume_limit),1)
#define WRITE_MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_yellow_resume_limit),1)
#define WRITE_MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,-1,p,MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_yellow_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_YELLOW_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_POOL_YELLOW_SHARED_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_POOL_YELLOW_SHARED_LIMIT.
 */
#define READ_MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,(r._mmu_thdm_db_pool_yellow_shared_limit),1)
#define WRITE_MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_yellow_shared_limit),1)
#define WRITE_MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,-1,p,MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_db_pool_yellow_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_POOL_YELLOW_SHARED_LIMITr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_BST
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST.
 */
#define READ_MMU_THDM_DB_PORTSP_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_BSTm_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_BSTm_OFFSET,i,(m._mmu_thdm_db_portsp_bst),1)
#define WRITE_MMU_THDM_DB_PORTSP_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BSTm_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_BSTm_OFFSET,i,&(m._mmu_thdm_db_portsp_bst),1)
#define WRITE_MMU_THDM_DB_PORTSP_BSTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BSTm_BLKACC,3,-1,p,MMU_THDM_DB_PORTSP_BSTm_OFFSET,i,&(m._mmu_thdm_db_portsp_bst),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BSTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdm_db_portsp_bst_mmu_xpe0_epipe0),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdm_db_portsp_bst_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdm_db_portsp_bst_mmu_xpe0_epipe1),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdm_db_portsp_bst_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BST_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdm_db_portsp_bst_mmu_xpe1_epipe2),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdm_db_portsp_bst_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdm_db_portsp_bst_mmu_xpe1_epipe3),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdm_db_portsp_bst_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BST_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdm_db_portsp_bst_mmu_xpe2_epipe0),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdm_db_portsp_bst_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdm_db_portsp_bst_mmu_xpe2_epipe1),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdm_db_portsp_bst_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BST_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdm_db_portsp_bst_mmu_xpe3_epipe2),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdm_db_portsp_bst_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdm_db_portsp_bst_mmu_xpe3_epipe3),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdm_db_portsp_bst_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BST_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_BST_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_BST_THRESHOLD.
 */
#define READ_MMU_THDM_DB_PORTSP_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdm_db_portsp_bst_threshold),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_db_portsp_bst_threshold),1)
#define WRITE_MMU_THDM_DB_PORTSP_BST_THRESHOLDr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_BST_THRESHOLDr_BLKACC,3,-1,p,MMU_THDM_DB_PORTSP_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_db_portsp_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_BST_THRESHOLDr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     84
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_CONFIG.
 */
#define READ_MMU_THDM_DB_PORTSP_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_CONFIGm_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_CONFIGm_OFFSET,i,(m._mmu_thdm_db_portsp_config),3)
#define WRITE_MMU_THDM_DB_PORTSP_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_CONFIGm_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_CONFIGm_OFFSET,i,&(m._mmu_thdm_db_portsp_config),3)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_CONFIG_A
 * BLOCKS:   MMU_XPE
 * SIZE:     84
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_CONFIG_A.
 */
#define READ_MMU_THDM_DB_PORTSP_CONFIG_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_CONFIG_Am_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_CONFIG_Am_OFFSET,i,(m._mmu_thdm_db_portsp_config_a),3)
#define WRITE_MMU_THDM_DB_PORTSP_CONFIG_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_CONFIG_Am_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_CONFIG_Am_OFFSET,i,&(m._mmu_thdm_db_portsp_config_a),3)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_CONFIG_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_CONFIG_B
 * BLOCKS:   MMU_XPE
 * SIZE:     84
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_CONFIG_B.
 */
#define READ_MMU_THDM_DB_PORTSP_CONFIG_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_CONFIG_Bm_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_CONFIG_Bm_OFFSET,i,(m._mmu_thdm_db_portsp_config_b),3)
#define WRITE_MMU_THDM_DB_PORTSP_CONFIG_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_CONFIG_Bm_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_CONFIG_Bm_OFFSET,i,&(m._mmu_thdm_db_portsp_config_b),3)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_CONFIG_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_PORTSP_CONFIG_C
 * BLOCKS:   MMU_XPE
 * SIZE:     84
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_CONFIG_C.
 */
#define READ_MMU_THDM_DB_PORTSP_CONFIG_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_PORTSP_CONFIG_Cm_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_CONFIG_Cm_OFFSET,i,(m._mmu_thdm_db_portsp_config_c),3)
#define WRITE_MMU_THDM_DB_PORTSP_CONFIG_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_PORTSP_CONFIG_Cm_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_CONFIG_Cm_OFFSET,i,&(m._mmu_thdm_db_portsp_config_c),3)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_CONFIG_Cm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64.
 */
#define READ_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r_OFFSET,i,(r._mmu_thdm_db_portsp_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r_BLKACC,3,-1,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._mmu_thdm_db_portsp_drop_state_bmp_64_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64.
 */
#define READ_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r_OFFSET,i,(r._mmu_thdm_db_portsp_red_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r_BLKACC,3,-1,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._mmu_thdm_db_portsp_red_drop_state_bmp_64_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_SHARED_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_SHARED_COUNT.
 */
#define READ_MMU_THDM_DB_PORTSP_SHARED_COUNTr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_SHARED_COUNTr_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_SHARED_COUNTr_OFFSET,i,(r._mmu_thdm_db_portsp_shared_count),1)
#define WRITE_MMU_THDM_DB_PORTSP_SHARED_COUNTr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_SHARED_COUNTr_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_SHARED_COUNTr_OFFSET,i,&(r._mmu_thdm_db_portsp_shared_count),1)
#define WRITE_MMU_THDM_DB_PORTSP_SHARED_COUNTr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_SHARED_COUNTr_BLKACC,3,-1,p,MMU_THDM_DB_PORTSP_SHARED_COUNTr_OFFSET,i,&(r._mmu_thdm_db_portsp_shared_count),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_SHARED_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE0r_OFFSET,i,(r._mmu_thdm_db_portsp_shared_count_mmu_xpe0),1)
#define WRITE_MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE0r_OFFSET,i,&(r._mmu_thdm_db_portsp_shared_count_mmu_xpe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE1r_OFFSET,i,(r._mmu_thdm_db_portsp_shared_count_mmu_xpe1),1)
#define WRITE_MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE1r_OFFSET,i,&(r._mmu_thdm_db_portsp_shared_count_mmu_xpe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE2r_OFFSET,i,(r._mmu_thdm_db_portsp_shared_count_mmu_xpe2),1)
#define WRITE_MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE2r_OFFSET,i,&(r._mmu_thdm_db_portsp_shared_count_mmu_xpe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE3r_OFFSET,i,(r._mmu_thdm_db_portsp_shared_count_mmu_xpe3),1)
#define WRITE_MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE3r_OFFSET,i,&(r._mmu_thdm_db_portsp_shared_count_mmu_xpe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_SHARED_COUNT_MMU_XPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL.
 */
#define READ_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr_OFFSET,i,(r._mmu_thdm_db_portsp_threshold_profile_sel),1)
#define WRITE_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr_OFFSET,i,&(r._mmu_thdm_db_portsp_threshold_profile_sel),1)
#define WRITE_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr_BLKACC,3,-1,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr_OFFSET,i,&(r._mmu_thdm_db_portsp_threshold_profile_sel),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SELr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r_OFFSET,i,(r._mmu_thdm_db_portsp_threshold_profile_sel_mmu_xpe0),1)
#define WRITE_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r_OFFSET,i,&(r._mmu_thdm_db_portsp_threshold_profile_sel_mmu_xpe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r_OFFSET,i,(r._mmu_thdm_db_portsp_threshold_profile_sel_mmu_xpe1),1)
#define WRITE_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r_OFFSET,i,&(r._mmu_thdm_db_portsp_threshold_profile_sel_mmu_xpe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r_OFFSET,i,(r._mmu_thdm_db_portsp_threshold_profile_sel_mmu_xpe2),1)
#define WRITE_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r_OFFSET,i,&(r._mmu_thdm_db_portsp_threshold_profile_sel_mmu_xpe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r_OFFSET,i,(r._mmu_thdm_db_portsp_threshold_profile_sel_mmu_xpe3),1)
#define WRITE_MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r_OFFSET,i,&(r._mmu_thdm_db_portsp_threshold_profile_sel_mmu_xpe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64.
 */
#define READ_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r_OFFSET,i,(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r_BLKACC,3,-1,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._mmu_thdm_db_portsp_yellow_drop_state_bmp_64_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORTSP_YELLOW_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_PORT_RX_ENABLE_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_DB_PORT_RX_ENABLE_64.
 */
#define READ_MMU_THDM_DB_PORT_RX_ENABLE_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_PORT_RX_ENABLE_64r_BLKACC,3,0,p,MMU_THDM_DB_PORT_RX_ENABLE_64r_OFFSET,0,(r._mmu_thdm_db_port_rx_enable_64),2)
#define WRITE_MMU_THDM_DB_PORT_RX_ENABLE_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_PORT_RX_ENABLE_64r_BLKACC,3,0,p,MMU_THDM_DB_PORT_RX_ENABLE_64r_OFFSET,0,&(r._mmu_thdm_db_port_rx_enable_64),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_PORT_RX_ENABLE_64r'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_BST
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_BST.
 */
#define READ_MMU_THDM_DB_QUEUE_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_BSTm_BLKACC,3,n,p,MMU_THDM_DB_QUEUE_BSTm_OFFSET,i,(m._mmu_thdm_db_queue_bst),1)
#define WRITE_MMU_THDM_DB_QUEUE_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BSTm_BLKACC,3,n,p,MMU_THDM_DB_QUEUE_BSTm_OFFSET,i,&(m._mmu_thdm_db_queue_bst),1)
#define WRITE_MMU_THDM_DB_QUEUE_BSTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BSTm_BLKACC,3,-1,p,MMU_THDM_DB_QUEUE_BSTm_OFFSET,i,&(m._mmu_thdm_db_queue_bst),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_BSTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdm_db_queue_bst_mmu_xpe0_epipe0),1)
#define WRITE_MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdm_db_queue_bst_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdm_db_queue_bst_mmu_xpe0_epipe1),1)
#define WRITE_MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdm_db_queue_bst_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_BST_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdm_db_queue_bst_mmu_xpe1_epipe2),1)
#define WRITE_MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdm_db_queue_bst_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdm_db_queue_bst_mmu_xpe1_epipe3),1)
#define WRITE_MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdm_db_queue_bst_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_BST_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdm_db_queue_bst_mmu_xpe2_epipe0),1)
#define WRITE_MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdm_db_queue_bst_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdm_db_queue_bst_mmu_xpe2_epipe1),1)
#define WRITE_MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdm_db_queue_bst_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_BST_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdm_db_queue_bst_mmu_xpe3_epipe2),1)
#define WRITE_MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdm_db_queue_bst_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdm_db_queue_bst_mmu_xpe3_epipe3),1)
#define WRITE_MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdm_db_queue_bst_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_BST_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_CONFIG.
 */
#define READ_MMU_THDM_DB_QUEUE_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_CONFIGm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_CONFIGm_OFFSET,i,(m._mmu_thdm_db_queue_config),3)
#define WRITE_MMU_THDM_DB_QUEUE_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_CONFIGm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_CONFIGm_OFFSET,i,&(m._mmu_thdm_db_queue_config),3)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_CONFIG_A
 * BLOCKS:   MMU_XPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_CONFIG_A.
 */
#define READ_MMU_THDM_DB_QUEUE_CONFIG_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_CONFIG_Am_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_CONFIG_Am_OFFSET,i,(m._mmu_thdm_db_queue_config_a),3)
#define WRITE_MMU_THDM_DB_QUEUE_CONFIG_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_CONFIG_Am_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_CONFIG_Am_OFFSET,i,&(m._mmu_thdm_db_queue_config_a),3)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_CONFIG_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_CONFIG_B
 * BLOCKS:   MMU_XPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_CONFIG_B.
 */
#define READ_MMU_THDM_DB_QUEUE_CONFIG_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_CONFIG_Bm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_CONFIG_Bm_OFFSET,i,(m._mmu_thdm_db_queue_config_b),3)
#define WRITE_MMU_THDM_DB_QUEUE_CONFIG_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_CONFIG_Bm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_CONFIG_Bm_OFFSET,i,&(m._mmu_thdm_db_queue_config_b),3)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_CONFIG_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_CONFIG_C
 * BLOCKS:   MMU_XPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_CONFIG_C.
 */
#define READ_MMU_THDM_DB_QUEUE_CONFIG_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_CONFIG_Cm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_CONFIG_Cm_OFFSET,i,(m._mmu_thdm_db_queue_config_c),3)
#define WRITE_MMU_THDM_DB_QUEUE_CONFIG_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_CONFIG_Cm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_CONFIG_Cm_OFFSET,i,&(m._mmu_thdm_db_queue_config_c),3)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_CONFIG_Cm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_COUNT.
 */
#define READ_MMU_THDM_DB_QUEUE_COUNTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_COUNTm_BLKACC,3,n,p,MMU_THDM_DB_QUEUE_COUNTm_OFFSET,i,(m._mmu_thdm_db_queue_count),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNTm_BLKACC,3,n,p,MMU_THDM_DB_QUEUE_COUNTm_OFFSET,i,&(m._mmu_thdm_db_queue_count),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNTm_BLKACC,3,-1,p,MMU_THDM_DB_QUEUE_COUNTm_OFFSET,i,&(m._mmu_thdm_db_queue_count),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdm_db_queue_count_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdm_db_queue_count_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdm_db_queue_count_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdm_db_queue_count_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_COUNT_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdm_db_queue_count_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdm_db_queue_count_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdm_db_queue_count_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdm_db_queue_count_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_COUNT_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdm_db_queue_count_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdm_db_queue_count_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdm_db_queue_count_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdm_db_queue_count_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_COUNT_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdm_db_queue_count_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdm_db_queue_count_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdm_db_queue_count_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdm_db_queue_count_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_COUNT_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_QUEUE_E2E_DS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_E2E_DS.
 */
#define READ_MMU_THDM_DB_QUEUE_E2E_DSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_QUEUE_E2E_DSr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_E2E_DSr_OFFSET,0,(r._mmu_thdm_db_queue_e2e_ds),1)
#define WRITE_MMU_THDM_DB_QUEUE_E2E_DSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_QUEUE_E2E_DSr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_E2E_DSr_OFFSET,0,&(r._mmu_thdm_db_queue_e2e_ds),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_E2E_DSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_QUEUE_E2E_DS_EN
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_E2E_DS_EN.
 */
#define READ_MMU_THDM_DB_QUEUE_E2E_DS_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_QUEUE_E2E_DS_ENr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_E2E_DS_ENr_OFFSET,0,(r._mmu_thdm_db_queue_e2e_ds_en),1)
#define WRITE_MMU_THDM_DB_QUEUE_E2E_DS_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_QUEUE_E2E_DS_ENr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_E2E_DS_ENr_OFFSET,0,&(r._mmu_thdm_db_queue_e2e_ds_en),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_E2E_DS_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_QUEUE_E2E_SPID
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_E2E_SPID.
 */
#define READ_MMU_THDM_DB_QUEUE_E2E_SPIDr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_QUEUE_E2E_SPIDr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_E2E_SPIDr_OFFSET,0,(r._mmu_thdm_db_queue_e2e_spid),1)
#define WRITE_MMU_THDM_DB_QUEUE_E2E_SPIDr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_QUEUE_E2E_SPIDr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_E2E_SPIDr_OFFSET,0,&(r._mmu_thdm_db_queue_e2e_spid),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_E2E_SPIDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILE.
 */
#define READ_MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr_BLKACC,3,n,p,MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr_OFFSET,i,(r._mmu_thdm_db_queue_mc_bst_threshold_profile),1)
#define WRITE_MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr_BLKACC,3,n,p,MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr_OFFSET,i,&(r._mmu_thdm_db_queue_mc_bst_threshold_profile),1)
#define WRITE_MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr_BLKACC,3,-1,p,MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr_OFFSET,i,&(r._mmu_thdm_db_queue_mc_bst_threshold_profile),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_MC_BST_THRESHOLD_PROFILEr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_OFFSET
 * BLOCKS:   MMU_XPE
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_OFFSET.
 */
#define READ_MMU_THDM_DB_QUEUE_OFFSETm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_OFFSETm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_OFFSETm_OFFSET,i,(m._mmu_thdm_db_queue_offset),1)
#define WRITE_MMU_THDM_DB_QUEUE_OFFSETm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_OFFSETm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_OFFSETm_OFFSET,i,&(m._mmu_thdm_db_queue_offset),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_OFFSETm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_OFFSET_A
 * BLOCKS:   MMU_XPE
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_OFFSET_A.
 */
#define READ_MMU_THDM_DB_QUEUE_OFFSET_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_OFFSET_Am_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_OFFSET_Am_OFFSET,i,(m._mmu_thdm_db_queue_offset_a),1)
#define WRITE_MMU_THDM_DB_QUEUE_OFFSET_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_OFFSET_Am_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_OFFSET_Am_OFFSET,i,&(m._mmu_thdm_db_queue_offset_a),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_OFFSET_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_OFFSET_B
 * BLOCKS:   MMU_XPE
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_OFFSET_B.
 */
#define READ_MMU_THDM_DB_QUEUE_OFFSET_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_OFFSET_Bm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_OFFSET_Bm_OFFSET,i,(m._mmu_thdm_db_queue_offset_b),1)
#define WRITE_MMU_THDM_DB_QUEUE_OFFSET_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_OFFSET_Bm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_OFFSET_Bm_OFFSET,i,&(m._mmu_thdm_db_queue_offset_b),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_OFFSET_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_OFFSET_C
 * BLOCKS:   MMU_XPE
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_OFFSET_C.
 */
#define READ_MMU_THDM_DB_QUEUE_OFFSET_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_OFFSET_Cm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_OFFSET_Cm_OFFSET,i,(m._mmu_thdm_db_queue_offset_c),1)
#define WRITE_MMU_THDM_DB_QUEUE_OFFSET_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_OFFSET_Cm_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_OFFSET_Cm_OFFSET,i,&(m._mmu_thdm_db_queue_offset_c),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_OFFSET_Cm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_RESUME
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUMEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUMEm_BLKACC,3,n,p,MMU_THDM_DB_QUEUE_RESUMEm_OFFSET,i,(m._mmu_thdm_db_queue_resume),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUMEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUMEm_BLKACC,3,n,p,MMU_THDM_DB_QUEUE_RESUMEm_OFFSET,i,&(m._mmu_thdm_db_queue_resume),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUMEm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUMEm_BLKACC,3,-1,p,MMU_THDM_DB_QUEUE_RESUMEm_OFFSET,i,&(m._mmu_thdm_db_queue_resume),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUMEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdm_db_queue_resume_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdm_db_queue_resume_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdm_db_queue_resume_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdm_db_queue_resume_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdm_db_queue_resume_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdm_db_queue_resume_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdm_db_queue_resume_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdm_db_queue_resume_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdm_db_queue_resume_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdm_db_queue_resume_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdm_db_queue_resume_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdm_db_queue_resume_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdm_db_queue_resume_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdm_db_queue_resume_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdm_db_queue_resume_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdm_db_queue_resume_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_RED
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_RED.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_REDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_REDr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_REDr_OFFSET,i,(r._mmu_thdm_db_queue_resume_offset_profile_red),1)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_REDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_REDr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_REDr_OFFSET,i,&(r._mmu_thdm_db_queue_resume_offset_profile_red),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_REDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_YELLOW
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_YELLOW.
 */
#define READ_MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr_OFFSET,i,(r._mmu_thdm_db_queue_resume_offset_profile_yellow),1)
#define WRITE_MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr_BLKACC,3,0,p,MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr_OFFSET,i,&(r._mmu_thdm_db_queue_resume_offset_profile_yellow),1)

/*******************************************************************************
 * End of 'MMU_THDM_DB_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE.
 */
#define READ_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr_BLKACC,3,n,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr_OFFSET,i,(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile),1)
#define WRITE_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr_BLKACC,3,n,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr_OFFSET,i,&(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile),1)
#define WRITE_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr_BLKACC,3,-1,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr_OFFSET,i,&(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0.
 */
#define READ_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r_BLKACC,3,0,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r_OFFSET,i,(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile_mmu_xpe0_slice0),1)
#define WRITE_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r_BLKACC,3,0,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r_OFFSET,i,&(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile_mmu_xpe0_slice0),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE0_SLICE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1.
 */
#define READ_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r_BLKACC,3,0,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r_OFFSET,i,(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile_mmu_xpe1_slice1),1)
#define WRITE_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r_BLKACC,3,0,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r_OFFSET,i,&(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile_mmu_xpe1_slice1),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE1_SLICE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0.
 */
#define READ_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r_BLKACC,3,0,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r_OFFSET,i,(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile_mmu_xpe2_slice0),1)
#define WRITE_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r_BLKACC,3,0,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r_OFFSET,i,&(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile_mmu_xpe2_slice0),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE2_SLICE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1.
 */
#define READ_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r_BLKACC,3,0,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r_OFFSET,i,(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile_mmu_xpe3_slice1),1)
#define WRITE_MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r_BLKACC,3,0,p,MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r_OFFSET,i,&(r._mmu_thdm_mcqe_cpuqueue_bst_threshold_profile_mmu_xpe3_slice1),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_CPUQUEUE_BST_THRESHOLD_PROFILE_MMU_XPE3_SLICE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_DEVICE_BST_STAT
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_DEVICE_BST_STAT.
 */
#define READ_MMU_THDM_MCQE_DEVICE_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_DEVICE_BST_STATr_BLKACC,3,0,p,MMU_THDM_MCQE_DEVICE_BST_STATr_OFFSET,0,(r._mmu_thdm_mcqe_device_bst_stat),2)
#define WRITE_MMU_THDM_MCQE_DEVICE_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_DEVICE_BST_STATr_BLKACC,3,0,p,MMU_THDM_MCQE_DEVICE_BST_STATr_OFFSET,0,&(r._mmu_thdm_mcqe_device_bst_stat),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_DEVICE_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_DEVICE_BYPASS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_DEVICE_BYPASS.
 */
#define READ_MMU_THDM_MCQE_DEVICE_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_DEVICE_BYPASSr_BLKACC,3,0,p,MMU_THDM_MCQE_DEVICE_BYPASSr_OFFSET,0,(r._mmu_thdm_mcqe_device_bypass),1)
#define WRITE_MMU_THDM_MCQE_DEVICE_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_DEVICE_BYPASSr_BLKACC,3,0,p,MMU_THDM_MCQE_DEVICE_BYPASSr_OFFSET,0,&(r._mmu_thdm_mcqe_device_bypass),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_DEVICE_BYPASSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_DEVICE_THR_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_DEVICE_THR_CONFIG.
 */
#define READ_MMU_THDM_MCQE_DEVICE_THR_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_DEVICE_THR_CONFIGr_BLKACC,3,0,p,MMU_THDM_MCQE_DEVICE_THR_CONFIGr_OFFSET,0,(r._mmu_thdm_mcqe_device_thr_config),1)
#define WRITE_MMU_THDM_MCQE_DEVICE_THR_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_DEVICE_THR_CONFIGr_BLKACC,3,0,p,MMU_THDM_MCQE_DEVICE_THR_CONFIGr_OFFSET,0,&(r._mmu_thdm_mcqe_device_thr_config),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_DEVICE_THR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_ENABLE_ECCP_MEM.
 */
#define READ_MMU_THDM_MCQE_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_THDM_MCQE_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_thdm_mcqe_enable_eccp_mem),2)
#define WRITE_MMU_THDM_MCQE_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_THDM_MCQE_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_thdm_mcqe_enable_eccp_mem),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_EN_COR_ERR_RPT.
 */
#define READ_MMU_THDM_MCQE_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_THDM_MCQE_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_thdm_mcqe_en_cor_err_rpt),2)
#define WRITE_MMU_THDM_MCQE_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_THDM_MCQE_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_thdm_mcqe_en_cor_err_rpt),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_MEMORY_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_MEMORY_TM.
 */
#define READ_MMU_THDM_MCQE_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_MEMORY_TMr_BLKACC,3,0,p,MMU_THDM_MCQE_MEMORY_TMr_OFFSET,0,(r._mmu_thdm_mcqe_memory_tm),2)
#define WRITE_MMU_THDM_MCQE_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_MEMORY_TMr_BLKACC,3,0,p,MMU_THDM_MCQE_MEMORY_TMr_OFFSET,0,&(r._mmu_thdm_mcqe_memory_tm),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_MEMORY_TMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_DROP_STATES
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_DROP_STATES.
 */
#define READ_MMU_THDM_MCQE_POOL_DROP_STATESr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_DROP_STATESr_BLKACC,3,0,p,MMU_THDM_MCQE_POOL_DROP_STATESr_OFFSET,0,(r._mmu_thdm_mcqe_pool_drop_states),1)
#define WRITE_MMU_THDM_MCQE_POOL_DROP_STATESr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_DROP_STATESr_BLKACC,3,0,p,MMU_THDM_MCQE_POOL_DROP_STATESr_OFFSET,0,&(r._mmu_thdm_mcqe_pool_drop_states),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_DROP_STATESr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_MC_BST_STAT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_MC_BST_STAT.
 */
#define READ_MMU_THDM_MCQE_POOL_MC_BST_STATr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_MC_BST_STATr_BLKACC,3,0,p,MMU_THDM_MCQE_POOL_MC_BST_STATr_OFFSET,i,(r._mmu_thdm_mcqe_pool_mc_bst_stat),1)
#define WRITE_MMU_THDM_MCQE_POOL_MC_BST_STATr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_MC_BST_STATr_BLKACC,3,0,p,MMU_THDM_MCQE_POOL_MC_BST_STATr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_mc_bst_stat),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_MC_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_MC_BST_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_MC_BST_THRESHOLD.
 */
#define READ_MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdm_mcqe_pool_mc_bst_threshold),1)
#define WRITE_MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_mc_bst_threshold),1)
#define WRITE_MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr_BLKACC,3,-1,p,MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_mc_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_MC_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_RED_RESUME_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_RED_RESUME_LIMIT.
 */
#define READ_MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr_OFFSET,i,(r._mmu_thdm_mcqe_pool_red_resume_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_red_resume_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr_BLKACC,3,-1,p,MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_red_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_RED_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_RED_SHARED_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_RED_SHARED_LIMIT.
 */
#define READ_MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr_OFFSET,i,(r._mmu_thdm_mcqe_pool_red_shared_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_red_shared_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr_BLKACC,3,-1,p,MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_red_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_RED_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_RESUME_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_RESUME_LIMIT.
 */
#define READ_MMU_THDM_MCQE_POOL_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_RESUME_LIMITr_OFFSET,i,(r._mmu_thdm_mcqe_pool_resume_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_resume_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_RESUME_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_RESUME_LIMITr_BLKACC,3,-1,p,MMU_THDM_MCQE_POOL_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_SHARED_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_SHARED_COUNT.
 */
#define READ_MMU_THDM_MCQE_POOL_SHARED_COUNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDM_MCQE_POOL_SHARED_COUNTr_OFFSET,i,(r._mmu_thdm_mcqe_pool_shared_count),1)
#define WRITE_MMU_THDM_MCQE_POOL_SHARED_COUNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_SHARED_COUNTr_BLKACC,3,0,p,MMU_THDM_MCQE_POOL_SHARED_COUNTr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_shared_count),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_SHARED_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_SHARED_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_SHARED_LIMIT.
 */
#define READ_MMU_THDM_MCQE_POOL_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_SHARED_LIMITr_OFFSET,i,(r._mmu_thdm_mcqe_pool_shared_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_shared_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_SHARED_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_SHARED_LIMITr_BLKACC,3,-1,p,MMU_THDM_MCQE_POOL_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMIT.
 */
#define READ_MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,(r._mmu_thdm_mcqe_pool_yellow_resume_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_yellow_resume_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr_BLKACC,3,-1,p,MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_yellow_resume_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_YELLOW_RESUME_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMIT.
 */
#define READ_MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,(r._mmu_thdm_mcqe_pool_yellow_shared_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_yellow_shared_limit),1)
#define WRITE_MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr_BLKACC,3,-1,p,MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdm_mcqe_pool_yellow_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_POOL_YELLOW_SHARED_LIMITr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_BST
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BSTm_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_BSTm_OFFSET,i,(m._mmu_thdm_mcqe_portsp_bst),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BSTm_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_BSTm_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BSTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BSTm_BLKACC,3,-1,p,MMU_THDM_MCQE_PORTSP_BSTm_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BSTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe0_epipe0),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe0_epipe1),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BST_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe1_epipe2),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe1_epipe3),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BST_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe2_epipe0),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe2_epipe1),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BST_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe3_epipe2),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe3_epipe3),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_bst_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BST_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_BST_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_BST_THRESHOLD.
 */
#define READ_MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr_OFFSET,i,(r._mmu_thdm_mcqe_portsp_bst_threshold),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_bst_threshold),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr_BLKACC,3,-1,p,MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_bst_threshold),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_BST_THRESHOLDr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     84
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_CONFIG.
 */
#define READ_MMU_THDM_MCQE_PORTSP_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_CONFIGm_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_CONFIGm_OFFSET,i,(m._mmu_thdm_mcqe_portsp_config),3)
#define WRITE_MMU_THDM_MCQE_PORTSP_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_CONFIGm_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_CONFIGm_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_config),3)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_CONFIG_A
 * BLOCKS:   MMU_XPE
 * SIZE:     84
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_CONFIG_A.
 */
#define READ_MMU_THDM_MCQE_PORTSP_CONFIG_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_CONFIG_Am_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_CONFIG_Am_OFFSET,i,(m._mmu_thdm_mcqe_portsp_config_a),3)
#define WRITE_MMU_THDM_MCQE_PORTSP_CONFIG_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_CONFIG_Am_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_CONFIG_Am_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_config_a),3)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_CONFIG_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_CONFIG_B
 * BLOCKS:   MMU_XPE
 * SIZE:     84
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_CONFIG_B.
 */
#define READ_MMU_THDM_MCQE_PORTSP_CONFIG_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_CONFIG_Bm_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_CONFIG_Bm_OFFSET,i,(m._mmu_thdm_mcqe_portsp_config_b),3)
#define WRITE_MMU_THDM_MCQE_PORTSP_CONFIG_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_CONFIG_Bm_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_CONFIG_Bm_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_config_b),3)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_CONFIG_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_PORTSP_CONFIG_C
 * BLOCKS:   MMU_XPE
 * SIZE:     84
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_CONFIG_C.
 */
#define READ_MMU_THDM_MCQE_PORTSP_CONFIG_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_PORTSP_CONFIG_Cm_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_CONFIG_Cm_OFFSET,i,(m._mmu_thdm_mcqe_portsp_config_c),3)
#define WRITE_MMU_THDM_MCQE_PORTSP_CONFIG_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_PORTSP_CONFIG_Cm_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_CONFIG_Cm_OFFSET,i,&(m._mmu_thdm_mcqe_portsp_config_c),3)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_CONFIG_Cm'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64.
 */
#define READ_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r_BLKACC,3,-1,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_drop_state_bmp_64_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64.
 */
#define READ_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r_BLKACC,3,-1,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_red_drop_state_bmp_64_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_RED_DROP_STATE_BMP_64_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_SHARED_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_SHARED_COUNT.
 */
#define READ_MMU_THDM_MCQE_PORTSP_SHARED_COUNTr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNTr_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNTr_OFFSET,i,(r._mmu_thdm_mcqe_portsp_shared_count),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_SHARED_COUNTr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNTr_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNTr_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_shared_count),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_SHARED_COUNTr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNTr_BLKACC,3,-1,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNTr_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_shared_count),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_SHARED_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE0r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_shared_count_mmu_xpe0),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE0r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_shared_count_mmu_xpe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE1r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_shared_count_mmu_xpe1),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE1r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_shared_count_mmu_xpe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE2r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_shared_count_mmu_xpe2),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE2r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_shared_count_mmu_xpe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE3r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_shared_count_mmu_xpe3),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE3r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_shared_count_mmu_xpe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_SHARED_COUNT_MMU_XPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL.
 */
#define READ_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr_OFFSET,i,(r._mmu_thdm_mcqe_portsp_threshold_profile_sel),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_threshold_profile_sel),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr_BLKACC,3,-1,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_threshold_profile_sel),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SELr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_threshold_profile_sel_mmu_xpe0),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_threshold_profile_sel_mmu_xpe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_threshold_profile_sel_mmu_xpe1),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_threshold_profile_sel_mmu_xpe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_threshold_profile_sel_mmu_xpe2),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_threshold_profile_sel_mmu_xpe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_threshold_profile_sel_mmu_xpe3),1)
#define WRITE_MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_threshold_profile_sel_mmu_xpe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_THRESHOLD_PROFILE_SEL_MMU_XPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64.
 */
#define READ_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r_BLKACC,3,n,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r_BLKACC,3,-1,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE0r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE1r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE2r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE3r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE0r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE1r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE2r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE3r_OFFSET,i,(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._mmu_thdm_mcqe_portsp_yellow_drop_state_bmp0_64_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORTSP_YELLOW_DROP_STATE_BMP0_64_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_PORT_RX_ENABLE_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_PORT_RX_ENABLE_64.
 */
#define READ_MMU_THDM_MCQE_PORT_RX_ENABLE_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_PORT_RX_ENABLE_64r_BLKACC,3,0,p,MMU_THDM_MCQE_PORT_RX_ENABLE_64r_OFFSET,0,(r._mmu_thdm_mcqe_port_rx_enable_64),2)
#define WRITE_MMU_THDM_MCQE_PORT_RX_ENABLE_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_PORT_RX_ENABLE_64r_BLKACC,3,0,p,MMU_THDM_MCQE_PORT_RX_ENABLE_64r_OFFSET,0,&(r._mmu_thdm_mcqe_port_rx_enable_64),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_PORT_RX_ENABLE_64r'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_BST
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_BST.
 */
#define READ_MMU_THDM_MCQE_QUEUE_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_BSTm_BLKACC,3,n,p,MMU_THDM_MCQE_QUEUE_BSTm_OFFSET,i,(m._mmu_thdm_mcqe_queue_bst),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BSTm_BLKACC,3,n,p,MMU_THDM_MCQE_QUEUE_BSTm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BSTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BSTm_BLKACC,3,-1,p,MMU_THDM_MCQE_QUEUE_BSTm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_BSTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdm_mcqe_queue_bst_mmu_xpe0_epipe0),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdm_mcqe_queue_bst_mmu_xpe0_epipe1),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_BST_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdm_mcqe_queue_bst_mmu_xpe1_epipe2),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdm_mcqe_queue_bst_mmu_xpe1_epipe3),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_BST_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdm_mcqe_queue_bst_mmu_xpe2_epipe0),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdm_mcqe_queue_bst_mmu_xpe2_epipe1),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_BST_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdm_mcqe_queue_bst_mmu_xpe3_epipe2),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdm_mcqe_queue_bst_mmu_xpe3_epipe3),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_bst_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_BST_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_CONFIG.
 */
#define READ_MMU_THDM_MCQE_QUEUE_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_CONFIGm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_CONFIGm_OFFSET,i,(m._mmu_thdm_mcqe_queue_config),3)
#define WRITE_MMU_THDM_MCQE_QUEUE_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_CONFIGm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_CONFIGm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_config),3)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_CONFIG_A
 * BLOCKS:   MMU_XPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_CONFIG_A.
 */
#define READ_MMU_THDM_MCQE_QUEUE_CONFIG_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_CONFIG_Am_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_CONFIG_Am_OFFSET,i,(m._mmu_thdm_mcqe_queue_config_a),3)
#define WRITE_MMU_THDM_MCQE_QUEUE_CONFIG_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_CONFIG_Am_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_CONFIG_Am_OFFSET,i,&(m._mmu_thdm_mcqe_queue_config_a),3)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_CONFIG_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_CONFIG_B
 * BLOCKS:   MMU_XPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_CONFIG_B.
 */
#define READ_MMU_THDM_MCQE_QUEUE_CONFIG_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_CONFIG_Bm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_CONFIG_Bm_OFFSET,i,(m._mmu_thdm_mcqe_queue_config_b),3)
#define WRITE_MMU_THDM_MCQE_QUEUE_CONFIG_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_CONFIG_Bm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_CONFIG_Bm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_config_b),3)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_CONFIG_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_CONFIG_C
 * BLOCKS:   MMU_XPE
 * SIZE:     72
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_CONFIG_C.
 */
#define READ_MMU_THDM_MCQE_QUEUE_CONFIG_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_CONFIG_Cm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_CONFIG_Cm_OFFSET,i,(m._mmu_thdm_mcqe_queue_config_c),3)
#define WRITE_MMU_THDM_MCQE_QUEUE_CONFIG_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_CONFIG_Cm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_CONFIG_Cm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_config_c),3)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_CONFIG_Cm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_COUNT.
 */
#define READ_MMU_THDM_MCQE_QUEUE_COUNTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_COUNTm_BLKACC,3,n,p,MMU_THDM_MCQE_QUEUE_COUNTm_OFFSET,i,(m._mmu_thdm_mcqe_queue_count),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNTm_BLKACC,3,n,p,MMU_THDM_MCQE_QUEUE_COUNTm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNTm_BLKACC,3,-1,p,MMU_THDM_MCQE_QUEUE_COUNTm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdm_mcqe_queue_count_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdm_mcqe_queue_count_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdm_mcqe_queue_count_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdm_mcqe_queue_count_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdm_mcqe_queue_count_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdm_mcqe_queue_count_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdm_mcqe_queue_count_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdm_mcqe_queue_count_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_count_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_COUNT_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILE.
 */
#define READ_MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr_BLKACC,3,n,p,MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr_OFFSET,i,(r._mmu_thdm_mcqe_queue_mc_bst_threshold_profile),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr_BLKACC,3,n,p,MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr_OFFSET,i,&(r._mmu_thdm_mcqe_queue_mc_bst_threshold_profile),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr_BLKACC,3,-1,p,MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr_OFFSET,i,&(r._mmu_thdm_mcqe_queue_mc_bst_threshold_profile),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_MC_BST_THRESHOLD_PROFILEr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_OFFSET
 * BLOCKS:   MMU_XPE
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_OFFSET.
 */
#define READ_MMU_THDM_MCQE_QUEUE_OFFSETm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_OFFSETm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_OFFSETm_OFFSET,i,(m._mmu_thdm_mcqe_queue_offset),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_OFFSETm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_OFFSETm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_OFFSETm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_offset),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_OFFSETm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_OFFSET_A
 * BLOCKS:   MMU_XPE
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_OFFSET_A.
 */
#define READ_MMU_THDM_MCQE_QUEUE_OFFSET_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_OFFSET_Am_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_OFFSET_Am_OFFSET,i,(m._mmu_thdm_mcqe_queue_offset_a),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_OFFSET_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_OFFSET_Am_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_OFFSET_Am_OFFSET,i,&(m._mmu_thdm_mcqe_queue_offset_a),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_OFFSET_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_OFFSET_B
 * BLOCKS:   MMU_XPE
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_OFFSET_B.
 */
#define READ_MMU_THDM_MCQE_QUEUE_OFFSET_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_OFFSET_Bm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_OFFSET_Bm_OFFSET,i,(m._mmu_thdm_mcqe_queue_offset_b),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_OFFSET_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_OFFSET_Bm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_OFFSET_Bm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_offset_b),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_OFFSET_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_OFFSET_C
 * BLOCKS:   MMU_XPE
 * SIZE:     24
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_OFFSET_C.
 */
#define READ_MMU_THDM_MCQE_QUEUE_OFFSET_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_OFFSET_Cm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_OFFSET_Cm_OFFSET,i,(m._mmu_thdm_mcqe_queue_offset_c),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_OFFSET_Cm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_OFFSET_Cm_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_OFFSET_Cm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_offset_c),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_OFFSET_Cm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_RESUME
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUMEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUMEm_BLKACC,3,n,p,MMU_THDM_MCQE_QUEUE_RESUMEm_OFFSET,i,(m._mmu_thdm_mcqe_queue_resume),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUMEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUMEm_BLKACC,3,n,p,MMU_THDM_MCQE_QUEUE_RESUMEm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUMEm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUMEm_BLKACC,3,-1,p,MMU_THDM_MCQE_QUEUE_RESUMEm_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUMEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdm_mcqe_queue_resume_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdm_mcqe_queue_resume_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdm_mcqe_queue_resume_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdm_mcqe_queue_resume_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdm_mcqe_queue_resume_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdm_mcqe_queue_resume_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdm_mcqe_queue_resume_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdm_mcqe_queue_resume_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdm_mcqe_queue_resume_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_RED
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_RED.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_REDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_REDr_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_REDr_OFFSET,i,(r._mmu_thdm_mcqe_queue_resume_offset_profile_red),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_REDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_REDr_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_REDr_OFFSET,i,&(r._mmu_thdm_mcqe_queue_resume_offset_profile_red),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_REDr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_YELLOW
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_YELLOW.
 */
#define READ_MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr_OFFSET,i,(r._mmu_thdm_mcqe_queue_resume_offset_profile_yellow),1)
#define WRITE_MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr_BLKACC,3,0,p,MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr_OFFSET,i,&(r._mmu_thdm_mcqe_queue_resume_offset_profile_yellow),1)

/*******************************************************************************
 * End of 'MMU_THDM_MCQE_QUEUE_RESUME_OFFSET_PROFILE_YELLOWr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_BST_STAT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_BST_STAT.
 */
#define READ_MMU_THDR_DB_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_BST_STATr_BLKACC,3,0,p,MMU_THDR_DB_BST_STATr_OFFSET,0,(r._mmu_thdr_db_bst_stat),1)
#define WRITE_MMU_THDR_DB_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_BST_STATr_BLKACC,3,0,p,MMU_THDR_DB_BST_STATr_OFFSET,0,&(r._mmu_thdr_db_bst_stat),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_BST_STAT_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_BST_STAT_PRIQ.
 */
#define READ_MMU_THDR_DB_BST_STAT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_BST_STAT_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_BST_STAT_PRIQr_OFFSET,i,(r._mmu_thdr_db_bst_stat_priq),1)
#define WRITE_MMU_THDR_DB_BST_STAT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_BST_STAT_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_BST_STAT_PRIQr_OFFSET,i,&(r._mmu_thdr_db_bst_stat_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_BST_STAT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_BST_STAT_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_BST_STAT_SP.
 */
#define READ_MMU_THDR_DB_BST_STAT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_BST_STAT_SPr_BLKACC,3,0,p,MMU_THDR_DB_BST_STAT_SPr_OFFSET,i,(r._mmu_thdr_db_bst_stat_sp),1)
#define WRITE_MMU_THDR_DB_BST_STAT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_BST_STAT_SPr_BLKACC,3,0,p,MMU_THDR_DB_BST_STAT_SPr_OFFSET,i,&(r._mmu_thdr_db_bst_stat_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_BST_STAT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_BST_THRESHOLD_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_BST_THRESHOLD_PRIQ.
 */
#define READ_MMU_THDR_DB_BST_THRESHOLD_PRIQr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_BST_THRESHOLD_PRIQr_BLKACC,3,n,p,MMU_THDR_DB_BST_THRESHOLD_PRIQr_OFFSET,i,(r._mmu_thdr_db_bst_threshold_priq),1)
#define WRITE_MMU_THDR_DB_BST_THRESHOLD_PRIQr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_BST_THRESHOLD_PRIQr_BLKACC,3,n,p,MMU_THDR_DB_BST_THRESHOLD_PRIQr_OFFSET,i,&(r._mmu_thdr_db_bst_threshold_priq),1)
#define WRITE_MMU_THDR_DB_BST_THRESHOLD_PRIQr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_BST_THRESHOLD_PRIQr_BLKACC,3,-1,p,MMU_THDR_DB_BST_THRESHOLD_PRIQr_OFFSET,i,&(r._mmu_thdr_db_bst_threshold_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_BST_THRESHOLD_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_BST_THRESHOLD_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_BST_THRESHOLD_SP.
 */
#define READ_MMU_THDR_DB_BST_THRESHOLD_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_BST_THRESHOLD_SPr_BLKACC,3,n,p,MMU_THDR_DB_BST_THRESHOLD_SPr_OFFSET,i,(r._mmu_thdr_db_bst_threshold_sp),1)
#define WRITE_MMU_THDR_DB_BST_THRESHOLD_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_BST_THRESHOLD_SPr_BLKACC,3,n,p,MMU_THDR_DB_BST_THRESHOLD_SPr_OFFSET,i,&(r._mmu_thdr_db_bst_threshold_sp),1)
#define WRITE_MMU_THDR_DB_BST_THRESHOLD_SPr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_BST_THRESHOLD_SPr_BLKACC,3,-1,p,MMU_THDR_DB_BST_THRESHOLD_SPr_OFFSET,i,&(r._mmu_thdr_db_bst_threshold_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_BST_THRESHOLD_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_BYPASS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_BYPASS.
 */
#define READ_MMU_THDR_DB_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_BYPASSr_BLKACC,3,0,p,MMU_THDR_DB_BYPASSr_OFFSET,0,(r._mmu_thdr_db_bypass),1)
#define WRITE_MMU_THDR_DB_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_BYPASSr_BLKACC,3,0,p,MMU_THDR_DB_BYPASSr_OFFSET,0,&(r._mmu_thdr_db_bypass),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_BYPASSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_CONFIG.
 */
#define READ_MMU_THDR_DB_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_CONFIGr_BLKACC,3,0,p,MMU_THDR_DB_CONFIGr_OFFSET,0,(r._mmu_thdr_db_config),1)
#define WRITE_MMU_THDR_DB_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_CONFIGr_BLKACC,3,0,p,MMU_THDR_DB_CONFIGr_OFFSET,0,&(r._mmu_thdr_db_config),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_CONFIG1_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_CONFIG1_PRIQ.
 */
#define READ_MMU_THDR_DB_CONFIG1_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_CONFIG1_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_CONFIG1_PRIQr_OFFSET,i,(r._mmu_thdr_db_config1_priq),1)
#define WRITE_MMU_THDR_DB_CONFIG1_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_CONFIG1_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_CONFIG1_PRIQr_OFFSET,i,&(r._mmu_thdr_db_config1_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_CONFIG1_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_CONFIG_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_CONFIG_PRIQ.
 */
#define READ_MMU_THDR_DB_CONFIG_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_CONFIG_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_CONFIG_PRIQr_OFFSET,i,(r._mmu_thdr_db_config_priq),1)
#define WRITE_MMU_THDR_DB_CONFIG_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_CONFIG_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_CONFIG_PRIQr_OFFSET,i,&(r._mmu_thdr_db_config_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_CONFIG_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_CONFIG_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_CONFIG_SP.
 */
#define READ_MMU_THDR_DB_CONFIG_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_CONFIG_SPr_BLKACC,3,n,p,MMU_THDR_DB_CONFIG_SPr_OFFSET,i,(r._mmu_thdr_db_config_sp),1)
#define WRITE_MMU_THDR_DB_CONFIG_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_CONFIG_SPr_BLKACC,3,n,p,MMU_THDR_DB_CONFIG_SPr_OFFSET,i,&(r._mmu_thdr_db_config_sp),1)
#define WRITE_MMU_THDR_DB_CONFIG_SPr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_CONFIG_SPr_BLKACC,3,-1,p,MMU_THDR_DB_CONFIG_SPr_OFFSET,i,&(r._mmu_thdr_db_config_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_CONFIG_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_LIMIT_COLOR_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_LIMIT_COLOR_PRIQ.
 */
#define READ_MMU_THDR_DB_LIMIT_COLOR_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_LIMIT_COLOR_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_LIMIT_COLOR_PRIQr_OFFSET,i,(r._mmu_thdr_db_limit_color_priq),1)
#define WRITE_MMU_THDR_DB_LIMIT_COLOR_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_LIMIT_COLOR_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_LIMIT_COLOR_PRIQr_OFFSET,i,&(r._mmu_thdr_db_limit_color_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_LIMIT_COLOR_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_LIMIT_MIN_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_LIMIT_MIN_PRIQ.
 */
#define READ_MMU_THDR_DB_LIMIT_MIN_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_LIMIT_MIN_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_LIMIT_MIN_PRIQr_OFFSET,i,(r._mmu_thdr_db_limit_min_priq),1)
#define WRITE_MMU_THDR_DB_LIMIT_MIN_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_LIMIT_MIN_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_LIMIT_MIN_PRIQr_OFFSET,i,&(r._mmu_thdr_db_limit_min_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_LIMIT_MIN_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_MIN_COUNT_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_MIN_COUNT_PRIQ.
 */
#define READ_MMU_THDR_DB_MIN_COUNT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_MIN_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_MIN_COUNT_PRIQr_OFFSET,i,(r._mmu_thdr_db_min_count_priq),1)
#define WRITE_MMU_THDR_DB_MIN_COUNT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_MIN_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_MIN_COUNT_PRIQr_OFFSET,i,&(r._mmu_thdr_db_min_count_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_MIN_COUNT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_RESET_OFFSET_COLOR_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_RESET_OFFSET_COLOR_PRIQ.
 */
#define READ_MMU_THDR_DB_RESET_OFFSET_COLOR_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_RESET_OFFSET_COLOR_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_RESET_OFFSET_COLOR_PRIQr_OFFSET,i,(r._mmu_thdr_db_reset_offset_color_priq),1)
#define WRITE_MMU_THDR_DB_RESET_OFFSET_COLOR_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_RESET_OFFSET_COLOR_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_RESET_OFFSET_COLOR_PRIQr_OFFSET,i,&(r._mmu_thdr_db_reset_offset_color_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_RESET_OFFSET_COLOR_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_RESUME_COLOR_LIMIT_CALCULATED_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_RESUME_COLOR_LIMIT_CALCULATED_PRIQ.
 */
#define READ_MMU_THDR_DB_RESUME_COLOR_LIMIT_CALCULATED_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_RESUME_COLOR_LIMIT_CALCULATED_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_RESUME_COLOR_LIMIT_CALCULATED_PRIQr_OFFSET,i,(r._mmu_thdr_db_resume_color_limit_calculated_priq),1)
#define WRITE_MMU_THDR_DB_RESUME_COLOR_LIMIT_CALCULATED_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_RESUME_COLOR_LIMIT_CALCULATED_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_RESUME_COLOR_LIMIT_CALCULATED_PRIQr_OFFSET,i,&(r._mmu_thdr_db_resume_color_limit_calculated_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_RESUME_COLOR_LIMIT_CALCULATED_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_RESUME_COLOR_LIMIT_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_RESUME_COLOR_LIMIT_SP.
 */
#define READ_MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr_BLKACC,3,n,p,MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr_OFFSET,i,(r._mmu_thdr_db_resume_color_limit_sp),1)
#define WRITE_MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr_BLKACC,3,n,p,MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr_OFFSET,i,&(r._mmu_thdr_db_resume_color_limit_sp),1)
#define WRITE_MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr_BLKACC,3,-1,p,MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr_OFFSET,i,&(r._mmu_thdr_db_resume_color_limit_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_RESUME_COLOR_LIMIT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_SHARED_COUNT_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_SHARED_COUNT_PRIQ.
 */
#define READ_MMU_THDR_DB_SHARED_COUNT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_SHARED_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_SHARED_COUNT_PRIQr_OFFSET,i,(r._mmu_thdr_db_shared_count_priq),1)
#define WRITE_MMU_THDR_DB_SHARED_COUNT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_SHARED_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_SHARED_COUNT_PRIQr_OFFSET,i,&(r._mmu_thdr_db_shared_count_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_SHARED_COUNT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_SHARED_COUNT_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_SHARED_COUNT_SP.
 */
#define READ_MMU_THDR_DB_SHARED_COUNT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_SHARED_COUNT_SPr_BLKACC,3,0,p,MMU_THDR_DB_SHARED_COUNT_SPr_OFFSET,i,(r._mmu_thdr_db_shared_count_sp),1)
#define WRITE_MMU_THDR_DB_SHARED_COUNT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_SHARED_COUNT_SPr_BLKACC,3,0,p,MMU_THDR_DB_SHARED_COUNT_SPr_OFFSET,i,&(r._mmu_thdr_db_shared_count_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_SHARED_COUNT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_SP_SHARED_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_SP_SHARED_LIMIT.
 */
#define READ_MMU_THDR_DB_SP_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_SP_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDR_DB_SP_SHARED_LIMITr_OFFSET,i,(r._mmu_thdr_db_sp_shared_limit),1)
#define WRITE_MMU_THDR_DB_SP_SHARED_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_SP_SHARED_LIMITr_BLKACC,3,n,p,MMU_THDR_DB_SP_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdr_db_sp_shared_limit),1)
#define WRITE_MMU_THDR_DB_SP_SHARED_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_SP_SHARED_LIMITr_BLKACC,3,-1,p,MMU_THDR_DB_SP_SHARED_LIMITr_OFFSET,i,&(r._mmu_thdr_db_sp_shared_limit),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_SP_SHARED_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_STATUS_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_STATUS_PRIQ.
 */
#define READ_MMU_THDR_DB_STATUS_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_STATUS_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_STATUS_PRIQr_OFFSET,i,(r._mmu_thdr_db_status_priq),1)
#define WRITE_MMU_THDR_DB_STATUS_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_STATUS_PRIQr_BLKACC,3,0,p,MMU_THDR_DB_STATUS_PRIQr_OFFSET,i,&(r._mmu_thdr_db_status_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_STATUS_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_DB_STATUS_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_DB_STATUS_SP.
 */
#define READ_MMU_THDR_DB_STATUS_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_DB_STATUS_SPr_BLKACC,3,0,p,MMU_THDR_DB_STATUS_SPr_OFFSET,i,(r._mmu_thdr_db_status_sp),1)
#define WRITE_MMU_THDR_DB_STATUS_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_DB_STATUS_SPr_BLKACC,3,0,p,MMU_THDR_DB_STATUS_SPr_OFFSET,i,&(r._mmu_thdr_db_status_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_DB_STATUS_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_STAT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_STAT.
 */
#define READ_MMU_THDR_QE_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_BST_STATr_BLKACC,3,0,p,MMU_THDR_QE_BST_STATr_OFFSET,0,(r._mmu_thdr_qe_bst_stat),1)
#define WRITE_MMU_THDR_QE_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_BST_STATr_BLKACC,3,0,p,MMU_THDR_QE_BST_STATr_OFFSET,0,&(r._mmu_thdr_qe_bst_stat),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_STAT_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_STAT_PRIQ.
 */
#define READ_MMU_THDR_QE_BST_STAT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_BST_STAT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_BST_STAT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_bst_stat_priq),1)
#define WRITE_MMU_THDR_QE_BST_STAT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_BST_STAT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_BST_STAT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_bst_stat_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_STAT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_STAT_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_STAT_SP.
 */
#define READ_MMU_THDR_QE_BST_STAT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_BST_STAT_SPr_BLKACC,3,0,p,MMU_THDR_QE_BST_STAT_SPr_OFFSET,i,(r._mmu_thdr_qe_bst_stat_sp),1)
#define WRITE_MMU_THDR_QE_BST_STAT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_BST_STAT_SPr_BLKACC,3,0,p,MMU_THDR_QE_BST_STAT_SPr_OFFSET,i,&(r._mmu_thdr_qe_bst_stat_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_STAT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_THRESHOLD_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_THRESHOLD_PRIQ.
 */
#define READ_MMU_THDR_QE_BST_THRESHOLD_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_BST_THRESHOLD_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_BST_THRESHOLD_PRIQr_OFFSET,i,(r._mmu_thdr_qe_bst_threshold_priq),1)
#define WRITE_MMU_THDR_QE_BST_THRESHOLD_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_BST_THRESHOLD_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_BST_THRESHOLD_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_bst_threshold_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_THRESHOLD_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BST_THRESHOLD_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BST_THRESHOLD_SP.
 */
#define READ_MMU_THDR_QE_BST_THRESHOLD_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_BST_THRESHOLD_SPr_BLKACC,3,0,p,MMU_THDR_QE_BST_THRESHOLD_SPr_OFFSET,i,(r._mmu_thdr_qe_bst_threshold_sp),1)
#define WRITE_MMU_THDR_QE_BST_THRESHOLD_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_BST_THRESHOLD_SPr_BLKACC,3,0,p,MMU_THDR_QE_BST_THRESHOLD_SPr_OFFSET,i,&(r._mmu_thdr_qe_bst_threshold_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BST_THRESHOLD_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_BYPASS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_BYPASS.
 */
#define READ_MMU_THDR_QE_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_BYPASSr_BLKACC,3,0,p,MMU_THDR_QE_BYPASSr_OFFSET,0,(r._mmu_thdr_qe_bypass),1)
#define WRITE_MMU_THDR_QE_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_BYPASSr_BLKACC,3,0,p,MMU_THDR_QE_BYPASSr_OFFSET,0,&(r._mmu_thdr_qe_bypass),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_BYPASSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CONFIG.
 */
#define READ_MMU_THDR_QE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_CONFIGr_BLKACC,3,0,p,MMU_THDR_QE_CONFIGr_OFFSET,0,(r._mmu_thdr_qe_config),1)
#define WRITE_MMU_THDR_QE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_CONFIGr_BLKACC,3,0,p,MMU_THDR_QE_CONFIGr_OFFSET,0,&(r._mmu_thdr_qe_config),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CONFIG1_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CONFIG1_PRIQ.
 */
#define READ_MMU_THDR_QE_CONFIG1_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_CONFIG1_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_CONFIG1_PRIQr_OFFSET,i,(r._mmu_thdr_qe_config1_priq),1)
#define WRITE_MMU_THDR_QE_CONFIG1_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_CONFIG1_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_CONFIG1_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_config1_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CONFIG1_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CONFIG_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CONFIG_PRIQ.
 */
#define READ_MMU_THDR_QE_CONFIG_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_CONFIG_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_CONFIG_PRIQr_OFFSET,i,(r._mmu_thdr_qe_config_priq),1)
#define WRITE_MMU_THDR_QE_CONFIG_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_CONFIG_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_CONFIG_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_config_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CONFIG_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_CONFIG_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_CONFIG_SP.
 */
#define READ_MMU_THDR_QE_CONFIG_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_CONFIG_SPr_BLKACC,3,0,p,MMU_THDR_QE_CONFIG_SPr_OFFSET,i,(r._mmu_thdr_qe_config_sp),1)
#define WRITE_MMU_THDR_QE_CONFIG_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_CONFIG_SPr_BLKACC,3,0,p,MMU_THDR_QE_CONFIG_SPr_OFFSET,i,&(r._mmu_thdr_qe_config_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_CONFIG_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_DEBUG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_DEBUG.
 */
#define READ_MMU_THDR_QE_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_DEBUGr_BLKACC,3,0,p,MMU_THDR_QE_DEBUGr_OFFSET,0,(r._mmu_thdr_qe_debug),1)
#define WRITE_MMU_THDR_QE_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_DEBUGr_BLKACC,3,0,p,MMU_THDR_QE_DEBUGr_OFFSET,0,&(r._mmu_thdr_qe_debug),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_LIMIT_COLOR_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_LIMIT_COLOR_PRIQ.
 */
#define READ_MMU_THDR_QE_LIMIT_COLOR_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_LIMIT_COLOR_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_LIMIT_COLOR_PRIQr_OFFSET,i,(r._mmu_thdr_qe_limit_color_priq),1)
#define WRITE_MMU_THDR_QE_LIMIT_COLOR_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_LIMIT_COLOR_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_LIMIT_COLOR_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_limit_color_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_LIMIT_COLOR_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_LIMIT_MIN_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_LIMIT_MIN_PRIQ.
 */
#define READ_MMU_THDR_QE_LIMIT_MIN_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_LIMIT_MIN_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_LIMIT_MIN_PRIQr_OFFSET,i,(r._mmu_thdr_qe_limit_min_priq),1)
#define WRITE_MMU_THDR_QE_LIMIT_MIN_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_LIMIT_MIN_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_LIMIT_MIN_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_limit_min_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_LIMIT_MIN_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_MIN_COUNT_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_MIN_COUNT_PRIQ.
 */
#define READ_MMU_THDR_QE_MIN_COUNT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_MIN_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_MIN_COUNT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_min_count_priq),1)
#define WRITE_MMU_THDR_QE_MIN_COUNT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_MIN_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_MIN_COUNT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_min_count_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_MIN_COUNT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQ.
 */
#define READ_MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr_OFFSET,i,(r._mmu_thdr_qe_reset_offset_color_priq),1)
#define WRITE_MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_reset_offset_color_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_RESET_OFFSET_COLOR_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_RESUME_COLOR_LIMIT_CALCULATED_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_RESUME_COLOR_LIMIT_CALCULATED_PRIQ.
 */
#define READ_MMU_THDR_QE_RESUME_COLOR_LIMIT_CALCULATED_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_RESUME_COLOR_LIMIT_CALCULATED_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_RESUME_COLOR_LIMIT_CALCULATED_PRIQr_OFFSET,i,(r._mmu_thdr_qe_resume_color_limit_calculated_priq),1)
#define WRITE_MMU_THDR_QE_RESUME_COLOR_LIMIT_CALCULATED_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_RESUME_COLOR_LIMIT_CALCULATED_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_RESUME_COLOR_LIMIT_CALCULATED_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_resume_color_limit_calculated_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_RESUME_COLOR_LIMIT_CALCULATED_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_RESUME_COLOR_LIMIT_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_RESUME_COLOR_LIMIT_SP.
 */
#define READ_MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr_BLKACC,3,0,p,MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr_OFFSET,i,(r._mmu_thdr_qe_resume_color_limit_sp),1)
#define WRITE_MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr_BLKACC,3,0,p,MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr_OFFSET,i,&(r._mmu_thdr_qe_resume_color_limit_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_RESUME_COLOR_LIMIT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_SHARED_COLOR_LIMIT_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_SHARED_COLOR_LIMIT_SP.
 */
#define READ_MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr_OFFSET,i,(r._mmu_thdr_qe_shared_color_limit_sp),1)
#define WRITE_MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr_OFFSET,i,&(r._mmu_thdr_qe_shared_color_limit_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_SHARED_COLOR_LIMIT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_SHARED_COUNT_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_SHARED_COUNT_PRIQ.
 */
#define READ_MMU_THDR_QE_SHARED_COUNT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_SHARED_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COUNT_PRIQr_OFFSET,i,(r._mmu_thdr_qe_shared_count_priq),1)
#define WRITE_MMU_THDR_QE_SHARED_COUNT_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_SHARED_COUNT_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COUNT_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_shared_count_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_SHARED_COUNT_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_SHARED_COUNT_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_SHARED_COUNT_SP.
 */
#define READ_MMU_THDR_QE_SHARED_COUNT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_SHARED_COUNT_SPr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COUNT_SPr_OFFSET,i,(r._mmu_thdr_qe_shared_count_sp),1)
#define WRITE_MMU_THDR_QE_SHARED_COUNT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_SHARED_COUNT_SPr_BLKACC,3,0,p,MMU_THDR_QE_SHARED_COUNT_SPr_OFFSET,i,&(r._mmu_thdr_qe_shared_count_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_SHARED_COUNT_SPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_STATUS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_STATUS.
 */
#define READ_MMU_THDR_QE_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_STATUSr_BLKACC,3,0,p,MMU_THDR_QE_STATUSr_OFFSET,0,(r._mmu_thdr_qe_status),1)
#define WRITE_MMU_THDR_QE_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_STATUSr_BLKACC,3,0,p,MMU_THDR_QE_STATUSr_OFFSET,0,&(r._mmu_thdr_qe_status),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_STATUS_PRIQ
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_STATUS_PRIQ.
 */
#define READ_MMU_THDR_QE_STATUS_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_STATUS_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_STATUS_PRIQr_OFFSET,i,(r._mmu_thdr_qe_status_priq),1)
#define WRITE_MMU_THDR_QE_STATUS_PRIQr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_STATUS_PRIQr_BLKACC,3,0,p,MMU_THDR_QE_STATUS_PRIQr_OFFSET,i,&(r._mmu_thdr_qe_status_priq),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_STATUS_PRIQr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDR_QE_STATUS_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDR_QE_STATUS_SP.
 */
#define READ_MMU_THDR_QE_STATUS_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDR_QE_STATUS_SPr_BLKACC,3,0,p,MMU_THDR_QE_STATUS_SPr_OFFSET,i,(r._mmu_thdr_qe_status_sp),1)
#define WRITE_MMU_THDR_QE_STATUS_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDR_QE_STATUS_SPr_BLKACC,3,0,p,MMU_THDR_QE_STATUS_SPr_OFFSET,i,&(r._mmu_thdr_qe_status_sp),1)

/*******************************************************************************
 * End of 'MMU_THDR_QE_STATUS_SPr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_PORT
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_PORT.
 */
#define READ_MMU_THDU_BST_PORTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_PORTm_BLKACC,3,n,p,MMU_THDU_BST_PORTm_OFFSET,i,(m._mmu_thdu_bst_port),1)
#define WRITE_MMU_THDU_BST_PORTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORTm_BLKACC,3,n,p,MMU_THDU_BST_PORTm_OFFSET,i,&(m._mmu_thdu_bst_port),1)
#define WRITE_MMU_THDU_BST_PORTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORTm_BLKACC,3,-1,p,MMU_THDU_BST_PORTm_OFFSET,i,&(m._mmu_thdu_bst_port),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_PORTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_PORT_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_PORT_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDU_BST_PORT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_PORT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdu_bst_port_mmu_xpe0_epipe0),1)
#define WRITE_MMU_THDU_BST_PORT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdu_bst_port_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_PORT_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_PORT_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_PORT_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDU_BST_PORT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_PORT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdu_bst_port_mmu_xpe0_epipe1),1)
#define WRITE_MMU_THDU_BST_PORT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdu_bst_port_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_PORT_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_PORT_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_PORT_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDU_BST_PORT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_PORT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdu_bst_port_mmu_xpe1_epipe2),1)
#define WRITE_MMU_THDU_BST_PORT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdu_bst_port_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_PORT_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_PORT_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_PORT_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDU_BST_PORT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_PORT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdu_bst_port_mmu_xpe1_epipe3),1)
#define WRITE_MMU_THDU_BST_PORT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdu_bst_port_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_PORT_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_PORT_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_PORT_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDU_BST_PORT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_PORT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdu_bst_port_mmu_xpe2_epipe0),1)
#define WRITE_MMU_THDU_BST_PORT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdu_bst_port_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_PORT_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_PORT_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_PORT_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDU_BST_PORT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_PORT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdu_bst_port_mmu_xpe2_epipe1),1)
#define WRITE_MMU_THDU_BST_PORT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdu_bst_port_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_PORT_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_PORT_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_PORT_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDU_BST_PORT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_PORT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdu_bst_port_mmu_xpe3_epipe2),1)
#define WRITE_MMU_THDU_BST_PORT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdu_bst_port_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_PORT_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_PORT_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_PORT_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDU_BST_PORT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_PORT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdu_bst_port_mmu_xpe3_epipe3),1)
#define WRITE_MMU_THDU_BST_PORT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_PORT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_PORT_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdu_bst_port_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_PORT_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QGROUP
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QGROUP.
 */
#define READ_MMU_THDU_BST_QGROUPm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QGROUPm_BLKACC,3,n,p,MMU_THDU_BST_QGROUPm_OFFSET,i,(m._mmu_thdu_bst_qgroup),1)
#define WRITE_MMU_THDU_BST_QGROUPm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUPm_BLKACC,3,n,p,MMU_THDU_BST_QGROUPm_OFFSET,i,&(m._mmu_thdu_bst_qgroup),1)
#define WRITE_MMU_THDU_BST_QGROUPm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUPm_BLKACC,3,-1,p,MMU_THDU_BST_QGROUPm_OFFSET,i,&(m._mmu_thdu_bst_qgroup),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QGROUPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdu_bst_qgroup_mmu_xpe0_epipe0),1)
#define WRITE_MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdu_bst_qgroup_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdu_bst_qgroup_mmu_xpe0_epipe1),1)
#define WRITE_MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdu_bst_qgroup_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QGROUP_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdu_bst_qgroup_mmu_xpe1_epipe2),1)
#define WRITE_MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdu_bst_qgroup_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdu_bst_qgroup_mmu_xpe1_epipe3),1)
#define WRITE_MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdu_bst_qgroup_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QGROUP_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdu_bst_qgroup_mmu_xpe2_epipe0),1)
#define WRITE_MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdu_bst_qgroup_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdu_bst_qgroup_mmu_xpe2_epipe1),1)
#define WRITE_MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdu_bst_qgroup_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QGROUP_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdu_bst_qgroup_mmu_xpe3_epipe2),1)
#define WRITE_MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdu_bst_qgroup_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdu_bst_qgroup_mmu_xpe3_epipe3),1)
#define WRITE_MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdu_bst_qgroup_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QGROUP_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QUEUE
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QUEUE.
 */
#define READ_MMU_THDU_BST_QUEUEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QUEUEm_BLKACC,3,n,p,MMU_THDU_BST_QUEUEm_OFFSET,i,(m._mmu_thdu_bst_queue),1)
#define WRITE_MMU_THDU_BST_QUEUEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUEm_BLKACC,3,n,p,MMU_THDU_BST_QUEUEm_OFFSET,i,&(m._mmu_thdu_bst_queue),1)
#define WRITE_MMU_THDU_BST_QUEUEm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUEm_BLKACC,3,-1,p,MMU_THDU_BST_QUEUEm_OFFSET,i,&(m._mmu_thdu_bst_queue),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QUEUEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdu_bst_queue_mmu_xpe0_epipe0),1)
#define WRITE_MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdu_bst_queue_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdu_bst_queue_mmu_xpe0_epipe1),1)
#define WRITE_MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdu_bst_queue_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QUEUE_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdu_bst_queue_mmu_xpe1_epipe2),1)
#define WRITE_MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdu_bst_queue_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdu_bst_queue_mmu_xpe1_epipe3),1)
#define WRITE_MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdu_bst_queue_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QUEUE_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdu_bst_queue_mmu_xpe2_epipe0),1)
#define WRITE_MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdu_bst_queue_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdu_bst_queue_mmu_xpe2_epipe1),1)
#define WRITE_MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdu_bst_queue_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QUEUE_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdu_bst_queue_mmu_xpe3_epipe2),1)
#define WRITE_MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdu_bst_queue_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdu_bst_queue_mmu_xpe3_epipe3),1)
#define WRITE_MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdu_bst_queue_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDU_BST_QUEUE_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_CONFIG_PORT
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_THDU_CONFIG_PORT.
 */
#define READ_MMU_THDU_CONFIG_PORTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_CONFIG_PORTm_BLKACC,3,0,p,MMU_THDU_CONFIG_PORTm_OFFSET,i,(m._mmu_thdu_config_port),2)
#define WRITE_MMU_THDU_CONFIG_PORTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_CONFIG_PORTm_BLKACC,3,0,p,MMU_THDU_CONFIG_PORTm_OFFSET,i,&(m._mmu_thdu_config_port),2)

/*******************************************************************************
 * End of 'MMU_THDU_CONFIG_PORTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_CONFIG_PORT0
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_THDU_CONFIG_PORT0.
 */
#define READ_MMU_THDU_CONFIG_PORT0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_CONFIG_PORT0m_BLKACC,3,0,p,MMU_THDU_CONFIG_PORT0m_OFFSET,i,(m._mmu_thdu_config_port0),2)
#define WRITE_MMU_THDU_CONFIG_PORT0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_CONFIG_PORT0m_BLKACC,3,0,p,MMU_THDU_CONFIG_PORT0m_OFFSET,i,&(m._mmu_thdu_config_port0),2)

/*******************************************************************************
 * End of 'MMU_THDU_CONFIG_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_CONFIG_PORT1
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_THDU_CONFIG_PORT1.
 */
#define READ_MMU_THDU_CONFIG_PORT1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_CONFIG_PORT1m_BLKACC,3,0,p,MMU_THDU_CONFIG_PORT1m_OFFSET,i,(m._mmu_thdu_config_port1),2)
#define WRITE_MMU_THDU_CONFIG_PORT1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_CONFIG_PORT1m_BLKACC,3,0,p,MMU_THDU_CONFIG_PORT1m_OFFSET,i,&(m._mmu_thdu_config_port1),2)

/*******************************************************************************
 * End of 'MMU_THDU_CONFIG_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_CONFIG_QGROUP
 * BLOCKS:   MMU_XPE
 * SIZE:     70
 */
/*
 * These macros can be used to access MMU_THDU_CONFIG_QGROUP.
 */
#define READ_MMU_THDU_CONFIG_QGROUPm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_CONFIG_QGROUPm_BLKACC,3,0,p,MMU_THDU_CONFIG_QGROUPm_OFFSET,i,(m._mmu_thdu_config_qgroup),3)
#define WRITE_MMU_THDU_CONFIG_QGROUPm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_CONFIG_QGROUPm_BLKACC,3,0,p,MMU_THDU_CONFIG_QGROUPm_OFFSET,i,&(m._mmu_thdu_config_qgroup),3)

/*******************************************************************************
 * End of 'MMU_THDU_CONFIG_QGROUPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_CONFIG_QGROUP0
 * BLOCKS:   MMU_XPE
 * SIZE:     70
 */
/*
 * These macros can be used to access MMU_THDU_CONFIG_QGROUP0.
 */
#define READ_MMU_THDU_CONFIG_QGROUP0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_CONFIG_QGROUP0m_BLKACC,3,0,p,MMU_THDU_CONFIG_QGROUP0m_OFFSET,i,(m._mmu_thdu_config_qgroup0),3)
#define WRITE_MMU_THDU_CONFIG_QGROUP0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_CONFIG_QGROUP0m_BLKACC,3,0,p,MMU_THDU_CONFIG_QGROUP0m_OFFSET,i,&(m._mmu_thdu_config_qgroup0),3)

/*******************************************************************************
 * End of 'MMU_THDU_CONFIG_QGROUP0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_CONFIG_QGROUP1
 * BLOCKS:   MMU_XPE
 * SIZE:     70
 */
/*
 * These macros can be used to access MMU_THDU_CONFIG_QGROUP1.
 */
#define READ_MMU_THDU_CONFIG_QGROUP1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_CONFIG_QGROUP1m_BLKACC,3,0,p,MMU_THDU_CONFIG_QGROUP1m_OFFSET,i,(m._mmu_thdu_config_qgroup1),3)
#define WRITE_MMU_THDU_CONFIG_QGROUP1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_CONFIG_QGROUP1m_BLKACC,3,0,p,MMU_THDU_CONFIG_QGROUP1m_OFFSET,i,&(m._mmu_thdu_config_qgroup1),3)

/*******************************************************************************
 * End of 'MMU_THDU_CONFIG_QGROUP1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_CONFIG_QUEUE
 * BLOCKS:   MMU_XPE
 * SIZE:     70
 */
/*
 * These macros can be used to access MMU_THDU_CONFIG_QUEUE.
 */
#define READ_MMU_THDU_CONFIG_QUEUEm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_CONFIG_QUEUEm_BLKACC,3,0,p,MMU_THDU_CONFIG_QUEUEm_OFFSET,i,(m._mmu_thdu_config_queue),3)
#define WRITE_MMU_THDU_CONFIG_QUEUEm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_CONFIG_QUEUEm_BLKACC,3,0,p,MMU_THDU_CONFIG_QUEUEm_OFFSET,i,&(m._mmu_thdu_config_queue),3)

/*******************************************************************************
 * End of 'MMU_THDU_CONFIG_QUEUEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_CONFIG_QUEUE0
 * BLOCKS:   MMU_XPE
 * SIZE:     70
 */
/*
 * These macros can be used to access MMU_THDU_CONFIG_QUEUE0.
 */
#define READ_MMU_THDU_CONFIG_QUEUE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_CONFIG_QUEUE0m_BLKACC,3,0,p,MMU_THDU_CONFIG_QUEUE0m_OFFSET,i,(m._mmu_thdu_config_queue0),3)
#define WRITE_MMU_THDU_CONFIG_QUEUE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_CONFIG_QUEUE0m_BLKACC,3,0,p,MMU_THDU_CONFIG_QUEUE0m_OFFSET,i,&(m._mmu_thdu_config_queue0),3)

/*******************************************************************************
 * End of 'MMU_THDU_CONFIG_QUEUE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_CONFIG_QUEUE1
 * BLOCKS:   MMU_XPE
 * SIZE:     70
 */
/*
 * These macros can be used to access MMU_THDU_CONFIG_QUEUE1.
 */
#define READ_MMU_THDU_CONFIG_QUEUE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_CONFIG_QUEUE1m_BLKACC,3,0,p,MMU_THDU_CONFIG_QUEUE1m_OFFSET,i,(m._mmu_thdu_config_queue1),3)
#define WRITE_MMU_THDU_CONFIG_QUEUE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_CONFIG_QUEUE1m_BLKACC,3,0,p,MMU_THDU_CONFIG_QUEUE1m_OFFSET,i,&(m._mmu_thdu_config_queue1),3)

/*******************************************************************************
 * End of 'MMU_THDU_CONFIG_QUEUE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_PORT
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_PORT.
 */
#define READ_MMU_THDU_COUNTER_PORTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_PORTm_BLKACC,3,n,p,MMU_THDU_COUNTER_PORTm_OFFSET,i,(m._mmu_thdu_counter_port),1)
#define WRITE_MMU_THDU_COUNTER_PORTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORTm_BLKACC,3,n,p,MMU_THDU_COUNTER_PORTm_OFFSET,i,&(m._mmu_thdu_counter_port),1)
#define WRITE_MMU_THDU_COUNTER_PORTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORTm_BLKACC,3,-1,p,MMU_THDU_COUNTER_PORTm_OFFSET,i,&(m._mmu_thdu_counter_port),1)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_PORTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdu_counter_port_mmu_xpe0_epipe0),1)
#define WRITE_MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdu_counter_port_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdu_counter_port_mmu_xpe0_epipe1),1)
#define WRITE_MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdu_counter_port_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_PORT_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdu_counter_port_mmu_xpe1_epipe2),1)
#define WRITE_MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdu_counter_port_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdu_counter_port_mmu_xpe1_epipe3),1)
#define WRITE_MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdu_counter_port_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_PORT_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdu_counter_port_mmu_xpe2_epipe0),1)
#define WRITE_MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdu_counter_port_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdu_counter_port_mmu_xpe2_epipe1),1)
#define WRITE_MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdu_counter_port_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_PORT_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdu_counter_port_mmu_xpe3_epipe2),1)
#define WRITE_MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdu_counter_port_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdu_counter_port_mmu_xpe3_epipe3),1)
#define WRITE_MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdu_counter_port_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_PORT_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QGROUP
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QGROUP.
 */
#define READ_MMU_THDU_COUNTER_QGROUPm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QGROUPm_BLKACC,3,n,p,MMU_THDU_COUNTER_QGROUPm_OFFSET,i,(m._mmu_thdu_counter_qgroup),2)
#define WRITE_MMU_THDU_COUNTER_QGROUPm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUPm_BLKACC,3,n,p,MMU_THDU_COUNTER_QGROUPm_OFFSET,i,&(m._mmu_thdu_counter_qgroup),2)
#define WRITE_MMU_THDU_COUNTER_QGROUPm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUPm_BLKACC,3,-1,p,MMU_THDU_COUNTER_QGROUPm_OFFSET,i,&(m._mmu_thdu_counter_qgroup),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QGROUPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdu_counter_qgroup_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdu_counter_qgroup_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdu_counter_qgroup_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdu_counter_qgroup_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QGROUP_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdu_counter_qgroup_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdu_counter_qgroup_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdu_counter_qgroup_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdu_counter_qgroup_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QGROUP_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdu_counter_qgroup_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdu_counter_qgroup_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdu_counter_qgroup_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdu_counter_qgroup_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QGROUP_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdu_counter_qgroup_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdu_counter_qgroup_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdu_counter_qgroup_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdu_counter_qgroup_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QGROUP_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QUEUE
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QUEUE.
 */
#define READ_MMU_THDU_COUNTER_QUEUEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QUEUEm_BLKACC,3,n,p,MMU_THDU_COUNTER_QUEUEm_OFFSET,i,(m._mmu_thdu_counter_queue),2)
#define WRITE_MMU_THDU_COUNTER_QUEUEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUEm_BLKACC,3,n,p,MMU_THDU_COUNTER_QUEUEm_OFFSET,i,&(m._mmu_thdu_counter_queue),2)
#define WRITE_MMU_THDU_COUNTER_QUEUEm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUEm_BLKACC,3,-1,p,MMU_THDU_COUNTER_QUEUEm_OFFSET,i,&(m._mmu_thdu_counter_queue),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QUEUEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdu_counter_queue_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdu_counter_queue_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdu_counter_queue_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdu_counter_queue_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QUEUE_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdu_counter_queue_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdu_counter_queue_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdu_counter_queue_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdu_counter_queue_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QUEUE_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdu_counter_queue_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdu_counter_queue_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdu_counter_queue_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdu_counter_queue_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QUEUE_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdu_counter_queue_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdu_counter_queue_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     37
 */
/*
 * These macros can be used to access MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdu_counter_queue_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdu_counter_queue_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDU_COUNTER_QUEUE_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDU_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDU_ENABLE_ECCP_MEM.
 */
#define READ_MMU_THDU_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDU_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_THDU_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_thdu_enable_eccp_mem),1)
#define WRITE_MMU_THDU_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDU_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_THDU_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_thdu_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_THDU_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_THDU_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_THDU_EN_COR_ERR_RPT.
 */
#define READ_MMU_THDU_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_THDU_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_THDU_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_thdu_en_cor_err_rpt),1)
#define WRITE_MMU_THDU_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_THDU_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_THDU_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_thdu_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_THDU_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_OFFSET_QGROUP
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_OFFSET_QGROUP.
 */
#define READ_MMU_THDU_OFFSET_QGROUPm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_OFFSET_QGROUPm_BLKACC,3,0,p,MMU_THDU_OFFSET_QGROUPm_OFFSET,i,(m._mmu_thdu_offset_qgroup),2)
#define WRITE_MMU_THDU_OFFSET_QGROUPm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_OFFSET_QGROUPm_BLKACC,3,0,p,MMU_THDU_OFFSET_QGROUPm_OFFSET,i,&(m._mmu_thdu_offset_qgroup),2)

/*******************************************************************************
 * End of 'MMU_THDU_OFFSET_QGROUPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_OFFSET_QGROUP0
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_OFFSET_QGROUP0.
 */
#define READ_MMU_THDU_OFFSET_QGROUP0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_OFFSET_QGROUP0m_BLKACC,3,0,p,MMU_THDU_OFFSET_QGROUP0m_OFFSET,i,(m._mmu_thdu_offset_qgroup0),2)
#define WRITE_MMU_THDU_OFFSET_QGROUP0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_OFFSET_QGROUP0m_BLKACC,3,0,p,MMU_THDU_OFFSET_QGROUP0m_OFFSET,i,&(m._mmu_thdu_offset_qgroup0),2)

/*******************************************************************************
 * End of 'MMU_THDU_OFFSET_QGROUP0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_OFFSET_QGROUP1
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_OFFSET_QGROUP1.
 */
#define READ_MMU_THDU_OFFSET_QGROUP1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_OFFSET_QGROUP1m_BLKACC,3,0,p,MMU_THDU_OFFSET_QGROUP1m_OFFSET,i,(m._mmu_thdu_offset_qgroup1),2)
#define WRITE_MMU_THDU_OFFSET_QGROUP1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_OFFSET_QGROUP1m_BLKACC,3,0,p,MMU_THDU_OFFSET_QGROUP1m_OFFSET,i,&(m._mmu_thdu_offset_qgroup1),2)

/*******************************************************************************
 * End of 'MMU_THDU_OFFSET_QGROUP1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_OFFSET_QUEUE
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_OFFSET_QUEUE.
 */
#define READ_MMU_THDU_OFFSET_QUEUEm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_OFFSET_QUEUEm_BLKACC,3,0,p,MMU_THDU_OFFSET_QUEUEm_OFFSET,i,(m._mmu_thdu_offset_queue),2)
#define WRITE_MMU_THDU_OFFSET_QUEUEm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_OFFSET_QUEUEm_BLKACC,3,0,p,MMU_THDU_OFFSET_QUEUEm_OFFSET,i,&(m._mmu_thdu_offset_queue),2)

/*******************************************************************************
 * End of 'MMU_THDU_OFFSET_QUEUEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_OFFSET_QUEUE0
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_OFFSET_QUEUE0.
 */
#define READ_MMU_THDU_OFFSET_QUEUE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_OFFSET_QUEUE0m_BLKACC,3,0,p,MMU_THDU_OFFSET_QUEUE0m_OFFSET,i,(m._mmu_thdu_offset_queue0),2)
#define WRITE_MMU_THDU_OFFSET_QUEUE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_OFFSET_QUEUE0m_BLKACC,3,0,p,MMU_THDU_OFFSET_QUEUE0m_OFFSET,i,&(m._mmu_thdu_offset_queue0),2)

/*******************************************************************************
 * End of 'MMU_THDU_OFFSET_QUEUE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_OFFSET_QUEUE1
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_OFFSET_QUEUE1.
 */
#define READ_MMU_THDU_OFFSET_QUEUE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_OFFSET_QUEUE1m_BLKACC,3,0,p,MMU_THDU_OFFSET_QUEUE1m_OFFSET,i,(m._mmu_thdu_offset_queue1),2)
#define WRITE_MMU_THDU_OFFSET_QUEUE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_OFFSET_QUEUE1m_BLKACC,3,0,p,MMU_THDU_OFFSET_QUEUE1m_OFFSET,i,&(m._mmu_thdu_offset_queue1),2)

/*******************************************************************************
 * End of 'MMU_THDU_OFFSET_QUEUE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_Q_TO_QGRP_MAP
 * BLOCKS:   MMU_XPE
 * SIZE:     25
 */
/*
 * These macros can be used to access MMU_THDU_Q_TO_QGRP_MAP.
 */
#define READ_MMU_THDU_Q_TO_QGRP_MAPm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_Q_TO_QGRP_MAPm_BLKACC,3,0,p,MMU_THDU_Q_TO_QGRP_MAPm_OFFSET,i,(m._mmu_thdu_q_to_qgrp_map),1)
#define WRITE_MMU_THDU_Q_TO_QGRP_MAPm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_Q_TO_QGRP_MAPm_BLKACC,3,0,p,MMU_THDU_Q_TO_QGRP_MAPm_OFFSET,i,&(m._mmu_thdu_q_to_qgrp_map),1)

/*******************************************************************************
 * End of 'MMU_THDU_Q_TO_QGRP_MAPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_Q_TO_QGRP_MAP0
 * BLOCKS:   MMU_XPE
 * SIZE:     25
 */
/*
 * These macros can be used to access MMU_THDU_Q_TO_QGRP_MAP0.
 */
#define READ_MMU_THDU_Q_TO_QGRP_MAP0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_Q_TO_QGRP_MAP0m_BLKACC,3,0,p,MMU_THDU_Q_TO_QGRP_MAP0m_OFFSET,i,(m._mmu_thdu_q_to_qgrp_map0),1)
#define WRITE_MMU_THDU_Q_TO_QGRP_MAP0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_Q_TO_QGRP_MAP0m_BLKACC,3,0,p,MMU_THDU_Q_TO_QGRP_MAP0m_OFFSET,i,&(m._mmu_thdu_q_to_qgrp_map0),1)

/*******************************************************************************
 * End of 'MMU_THDU_Q_TO_QGRP_MAP0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_Q_TO_QGRP_MAP1
 * BLOCKS:   MMU_XPE
 * SIZE:     25
 */
/*
 * These macros can be used to access MMU_THDU_Q_TO_QGRP_MAP1.
 */
#define READ_MMU_THDU_Q_TO_QGRP_MAP1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_Q_TO_QGRP_MAP1m_BLKACC,3,0,p,MMU_THDU_Q_TO_QGRP_MAP1m_OFFSET,i,(m._mmu_thdu_q_to_qgrp_map1),1)
#define WRITE_MMU_THDU_Q_TO_QGRP_MAP1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_Q_TO_QGRP_MAP1m_BLKACC,3,0,p,MMU_THDU_Q_TO_QGRP_MAP1m_OFFSET,i,&(m._mmu_thdu_q_to_qgrp_map1),1)

/*******************************************************************************
 * End of 'MMU_THDU_Q_TO_QGRP_MAP1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_Q_TO_QGRP_MAP2
 * BLOCKS:   MMU_XPE
 * SIZE:     25
 */
/*
 * These macros can be used to access MMU_THDU_Q_TO_QGRP_MAP2.
 */
#define READ_MMU_THDU_Q_TO_QGRP_MAP2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_Q_TO_QGRP_MAP2m_BLKACC,3,0,p,MMU_THDU_Q_TO_QGRP_MAP2m_OFFSET,i,(m._mmu_thdu_q_to_qgrp_map2),1)
#define WRITE_MMU_THDU_Q_TO_QGRP_MAP2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_Q_TO_QGRP_MAP2m_BLKACC,3,0,p,MMU_THDU_Q_TO_QGRP_MAP2m_OFFSET,i,&(m._mmu_thdu_q_to_qgrp_map2),1)

/*******************************************************************************
 * End of 'MMU_THDU_Q_TO_QGRP_MAP2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_PORT
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_PORT.
 */
#define READ_MMU_THDU_RESUME_PORTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_PORTm_BLKACC,3,0,p,MMU_THDU_RESUME_PORTm_OFFSET,i,(m._mmu_thdu_resume_port),2)
#define WRITE_MMU_THDU_RESUME_PORTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_PORTm_BLKACC,3,0,p,MMU_THDU_RESUME_PORTm_OFFSET,i,&(m._mmu_thdu_resume_port),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_PORTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_PORT0
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_PORT0.
 */
#define READ_MMU_THDU_RESUME_PORT0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_PORT0m_BLKACC,3,0,p,MMU_THDU_RESUME_PORT0m_OFFSET,i,(m._mmu_thdu_resume_port0),2)
#define WRITE_MMU_THDU_RESUME_PORT0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_PORT0m_BLKACC,3,0,p,MMU_THDU_RESUME_PORT0m_OFFSET,i,&(m._mmu_thdu_resume_port0),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_PORT0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_PORT1
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_PORT1.
 */
#define READ_MMU_THDU_RESUME_PORT1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_PORT1m_BLKACC,3,0,p,MMU_THDU_RESUME_PORT1m_OFFSET,i,(m._mmu_thdu_resume_port1),2)
#define WRITE_MMU_THDU_RESUME_PORT1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_PORT1m_BLKACC,3,0,p,MMU_THDU_RESUME_PORT1m_OFFSET,i,&(m._mmu_thdu_resume_port1),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_PORT1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_PORT2
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_PORT2.
 */
#define READ_MMU_THDU_RESUME_PORT2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_PORT2m_BLKACC,3,0,p,MMU_THDU_RESUME_PORT2m_OFFSET,i,(m._mmu_thdu_resume_port2),2)
#define WRITE_MMU_THDU_RESUME_PORT2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_PORT2m_BLKACC,3,0,p,MMU_THDU_RESUME_PORT2m_OFFSET,i,&(m._mmu_thdu_resume_port2),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_PORT2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QGROUP
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QGROUP.
 */
#define READ_MMU_THDU_RESUME_QGROUPm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QGROUPm_BLKACC,3,n,p,MMU_THDU_RESUME_QGROUPm_OFFSET,i,(m._mmu_thdu_resume_qgroup),2)
#define WRITE_MMU_THDU_RESUME_QGROUPm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUPm_BLKACC,3,n,p,MMU_THDU_RESUME_QGROUPm_OFFSET,i,&(m._mmu_thdu_resume_qgroup),2)
#define WRITE_MMU_THDU_RESUME_QGROUPm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUPm_BLKACC,3,-1,p,MMU_THDU_RESUME_QGROUPm_OFFSET,i,&(m._mmu_thdu_resume_qgroup),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QGROUPm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdu_resume_qgroup_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdu_resume_qgroup_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdu_resume_qgroup_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdu_resume_qgroup_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QGROUP_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdu_resume_qgroup_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdu_resume_qgroup_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdu_resume_qgroup_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdu_resume_qgroup_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QGROUP_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdu_resume_qgroup_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdu_resume_qgroup_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdu_resume_qgroup_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdu_resume_qgroup_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QGROUP_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdu_resume_qgroup_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdu_resume_qgroup_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdu_resume_qgroup_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdu_resume_qgroup_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QGROUP_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QUEUE
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QUEUE.
 */
#define READ_MMU_THDU_RESUME_QUEUEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QUEUEm_BLKACC,3,n,p,MMU_THDU_RESUME_QUEUEm_OFFSET,i,(m._mmu_thdu_resume_queue),2)
#define WRITE_MMU_THDU_RESUME_QUEUEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUEm_BLKACC,3,n,p,MMU_THDU_RESUME_QUEUEm_OFFSET,i,&(m._mmu_thdu_resume_queue),2)
#define WRITE_MMU_THDU_RESUME_QUEUEm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUEm_BLKACC,3,-1,p,MMU_THDU_RESUME_QUEUEm_OFFSET,i,&(m._mmu_thdu_resume_queue),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QUEUEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_thdu_resume_queue_mmu_xpe0_epipe0),2)
#define WRITE_MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_thdu_resume_queue_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_thdu_resume_queue_mmu_xpe0_epipe1),2)
#define WRITE_MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_thdu_resume_queue_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QUEUE_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_thdu_resume_queue_mmu_xpe1_epipe2),2)
#define WRITE_MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_thdu_resume_queue_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_thdu_resume_queue_mmu_xpe1_epipe3),2)
#define WRITE_MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_thdu_resume_queue_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QUEUE_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_thdu_resume_queue_mmu_xpe2_epipe0),2)
#define WRITE_MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_thdu_resume_queue_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_thdu_resume_queue_mmu_xpe2_epipe1),2)
#define WRITE_MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_thdu_resume_queue_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QUEUE_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_thdu_resume_queue_mmu_xpe3_epipe2),2)
#define WRITE_MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_thdu_resume_queue_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_thdu_resume_queue_mmu_xpe3_epipe3),2)
#define WRITE_MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_thdu_resume_queue_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_THDU_RESUME_QUEUE_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_ENABLE_ECCP_MEM.
 */
#define READ_MMU_TOQ_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_TOQ_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MMU_TOQ_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_toq_enable_eccp_mem),1)
#define WRITE_MMU_TOQ_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_TOQ_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MMU_TOQ_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_toq_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_TOQ_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TOQ_EN_COR_ERR_RPT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TOQ_EN_COR_ERR_RPT.
 */
#define READ_MMU_TOQ_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_TOQ_EN_COR_ERR_RPTr_BLKACC,4,0,p,MMU_TOQ_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_toq_en_cor_err_rpt),1)
#define WRITE_MMU_TOQ_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_TOQ_EN_COR_ERR_RPTr_BLKACC,4,0,p,MMU_TOQ_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_toq_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_TOQ_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TO_DEV_MAP
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TO_DEV_MAP.
 */
#define READ_MMU_TO_DEV_MAPr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_TO_DEV_MAPr_BLKACC,5,0,p,MMU_TO_DEV_MAPr_OFFSET,0,(r._mmu_to_dev_map),1)
#define WRITE_MMU_TO_DEV_MAPr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_TO_DEV_MAPr_BLKACC,5,0,p,MMU_TO_DEV_MAPr_OFFSET,0,&(r._mmu_to_dev_map),1)

/*******************************************************************************
 * End of 'MMU_TO_DEV_MAPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TO_PHYS_MAP
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TO_PHYS_MAP.
 */
#define READ_MMU_TO_PHYS_MAPr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_TO_PHYS_MAPr_BLKACC,5,0,p,MMU_TO_PHYS_MAPr_OFFSET,0,(r._mmu_to_phys_map),1)
#define WRITE_MMU_TO_PHYS_MAPr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_TO_PHYS_MAPr_BLKACC,5,0,p,MMU_TO_PHYS_MAPr_OFFSET,0,&(r._mmu_to_phys_map),1)

/*******************************************************************************
 * End of 'MMU_TO_PHYS_MAPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TO_SYS_MAP
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TO_SYS_MAP.
 */
#define READ_MMU_TO_SYS_MAPr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_TO_SYS_MAPr_BLKACC,5,0,p,MMU_TO_SYS_MAPr_OFFSET,0,(r._mmu_to_sys_map),1)
#define WRITE_MMU_TO_SYS_MAPr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_TO_SYS_MAPr_BLKACC,5,0,p,MMU_TO_SYS_MAPr_OFFSET,0,&(r._mmu_to_sys_map),1)

/*******************************************************************************
 * End of 'MMU_TO_SYS_MAPr'
 */




/*******************************************************************************
 * REGISTER:  MMU_TO_XPORT_BKP
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_TO_XPORT_BKP.
 */
#define READ_MMU_TO_XPORT_BKPr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_TO_XPORT_BKPr_BLKACC,5,0,p,MMU_TO_XPORT_BKPr_OFFSET,0,(r._mmu_to_xport_bkp),1)
#define WRITE_MMU_TO_XPORT_BKPr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_TO_XPORT_BKPr_BLKACC,5,0,p,MMU_TO_XPORT_BKPr_OFFSET,0,&(r._mmu_to_xport_bkp),1)

/*******************************************************************************
 * End of 'MMU_TO_XPORT_BKPr'
 */




/*******************************************************************************
 * MEMORY:  MMU_UCQDB_X
 * BLOCKS:   MMU_SC
 * SIZE:     46
 */
/*
 * These macros can be used to access MMU_UCQDB_X.
 */
#define READ_MMU_UCQDB_Xm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_UCQDB_Xm_BLKACC,4,0,p,MMU_UCQDB_Xm_OFFSET,i,(m._mmu_ucqdb_x),2)
#define WRITE_MMU_UCQDB_Xm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_UCQDB_Xm_BLKACC,4,0,p,MMU_UCQDB_Xm_OFFSET,i,&(m._mmu_ucqdb_x),2)

/*******************************************************************************
 * End of 'MMU_UCQDB_Xm'
 */




/*******************************************************************************
 * MEMORY:  MMU_UCQDB_Y
 * BLOCKS:   MMU_SC
 * SIZE:     46
 */
/*
 * These macros can be used to access MMU_UCQDB_Y.
 */
#define READ_MMU_UCQDB_Ym(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_UCQDB_Ym_BLKACC,4,0,p,MMU_UCQDB_Ym_OFFSET,i,(m._mmu_ucqdb_y),2)
#define WRITE_MMU_UCQDB_Ym(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_UCQDB_Ym_BLKACC,4,0,p,MMU_UCQDB_Ym_OFFSET,i,&(m._mmu_ucqdb_y),2)

/*******************************************************************************
 * End of 'MMU_UCQDB_Ym'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE
 * BLOCKS:   MMU_XPE
 * SIZE:     38
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE.
 */
#define READ_MMU_WRED_AVG_QSIZEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_AVG_QSIZEm_BLKACC,3,n,p,MMU_WRED_AVG_QSIZEm_OFFSET,i,(m._mmu_wred_avg_qsize),2)
#define WRITE_MMU_WRED_AVG_QSIZEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZEm_BLKACC,3,n,p,MMU_WRED_AVG_QSIZEm_OFFSET,i,&(m._mmu_wred_avg_qsize),2)
#define WRITE_MMU_WRED_AVG_QSIZEm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZEm_BLKACC,3,-1,p,MMU_WRED_AVG_QSIZEm_OFFSET,i,&(m._mmu_wred_avg_qsize),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     38
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_avg_qsize_mmu_xpe0_epipe0),2)
#define WRITE_MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_avg_qsize_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     38
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_avg_qsize_mmu_xpe0_epipe1),2)
#define WRITE_MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_avg_qsize_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZE_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     38
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_avg_qsize_mmu_xpe1_epipe2),2)
#define WRITE_MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_avg_qsize_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     38
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_avg_qsize_mmu_xpe1_epipe3),2)
#define WRITE_MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_avg_qsize_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZE_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     38
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_avg_qsize_mmu_xpe2_epipe0),2)
#define WRITE_MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_avg_qsize_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     38
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_avg_qsize_mmu_xpe2_epipe1),2)
#define WRITE_MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_avg_qsize_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZE_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     38
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_avg_qsize_mmu_xpe3_epipe2),2)
#define WRITE_MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_avg_qsize_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     38
 */
/*
 * These macros can be used to access MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_avg_qsize_mmu_xpe3_epipe3),2)
#define WRITE_MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_avg_qsize_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_AVG_QSIZE_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG.
 */
#define READ_MMU_WRED_CONFIGm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_CONFIGm_BLKACC,3,n,p,MMU_WRED_CONFIGm_OFFSET,i,(m._mmu_wred_config),1)
#define WRITE_MMU_WRED_CONFIGm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIGm_BLKACC,3,n,p,MMU_WRED_CONFIGm_OFFSET,i,&(m._mmu_wred_config),1)
#define WRITE_MMU_WRED_CONFIGm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIGm_BLKACC,3,-1,p,MMU_WRED_CONFIGm_OFFSET,i,&(m._mmu_wred_config),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_CONFIG_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_CONFIG_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_CONFIG_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_config_mmu_xpe0_epipe0),1)
#define WRITE_MMU_WRED_CONFIG_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIG_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_config_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIG_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_CONFIG_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_CONFIG_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_CONFIG_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_config_mmu_xpe0_epipe1),1)
#define WRITE_MMU_WRED_CONFIG_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIG_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_config_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIG_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_CONFIG_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_CONFIG_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_CONFIG_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_config_mmu_xpe1_epipe2),1)
#define WRITE_MMU_WRED_CONFIG_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIG_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_config_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIG_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_CONFIG_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_CONFIG_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_CONFIG_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_config_mmu_xpe1_epipe3),1)
#define WRITE_MMU_WRED_CONFIG_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIG_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_config_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIG_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_CONFIG_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_CONFIG_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_CONFIG_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_config_mmu_xpe2_epipe0),1)
#define WRITE_MMU_WRED_CONFIG_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIG_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_config_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIG_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_CONFIG_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_CONFIG_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_CONFIG_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_config_mmu_xpe2_epipe1),1)
#define WRITE_MMU_WRED_CONFIG_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIG_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_config_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIG_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_CONFIG_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_CONFIG_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_CONFIG_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_config_mmu_xpe3_epipe2),1)
#define WRITE_MMU_WRED_CONFIG_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIG_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_config_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIG_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_CONFIG_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     30
 */
/*
 * These macros can be used to access MMU_WRED_CONFIG_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_CONFIG_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_CONFIG_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_config_mmu_xpe3_epipe3),1)
#define WRITE_MMU_WRED_CONFIG_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_CONFIG_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_CONFIG_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_config_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_CONFIG_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_0
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_0.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_0m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_0m_OFFSET,i,(m._mmu_wred_drop_curve_profile_0),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_0m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_0m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_0),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_0_A
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_0_A.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_0_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_0_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_0_Am_OFFSET,i,(m._mmu_wred_drop_curve_profile_0_a),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_0_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_0_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_0_Am_OFFSET,i,&(m._mmu_wred_drop_curve_profile_0_a),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_0_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_0_B
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_0_B.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_0_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_0_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_0_Bm_OFFSET,i,(m._mmu_wred_drop_curve_profile_0_b),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_0_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_0_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_0_Bm_OFFSET,i,&(m._mmu_wred_drop_curve_profile_0_b),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_0_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_1
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_1.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_1m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_1m_OFFSET,i,(m._mmu_wred_drop_curve_profile_1),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_1m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_1m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_1),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_1_A
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_1_A.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_1_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_1_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_1_Am_OFFSET,i,(m._mmu_wred_drop_curve_profile_1_a),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_1_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_1_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_1_Am_OFFSET,i,&(m._mmu_wred_drop_curve_profile_1_a),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_1_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_1_B
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_1_B.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_1_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_1_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_1_Bm_OFFSET,i,(m._mmu_wred_drop_curve_profile_1_b),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_1_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_1_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_1_Bm_OFFSET,i,&(m._mmu_wred_drop_curve_profile_1_b),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_1_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_2
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_2.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_2m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_2m_OFFSET,i,(m._mmu_wred_drop_curve_profile_2),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_2m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_2m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_2),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_2_A
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_2_A.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_2_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_2_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_2_Am_OFFSET,i,(m._mmu_wred_drop_curve_profile_2_a),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_2_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_2_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_2_Am_OFFSET,i,&(m._mmu_wred_drop_curve_profile_2_a),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_2_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_2_B
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_2_B.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_2_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_2_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_2_Bm_OFFSET,i,(m._mmu_wred_drop_curve_profile_2_b),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_2_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_2_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_2_Bm_OFFSET,i,&(m._mmu_wred_drop_curve_profile_2_b),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_2_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_3
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_3.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_3m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_3m_OFFSET,i,(m._mmu_wred_drop_curve_profile_3),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_3m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_3m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_3),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_3_A
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_3_A.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_3_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_3_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_3_Am_OFFSET,i,(m._mmu_wred_drop_curve_profile_3_a),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_3_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_3_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_3_Am_OFFSET,i,&(m._mmu_wred_drop_curve_profile_3_a),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_3_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_3_B
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_3_B.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_3_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_3_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_3_Bm_OFFSET,i,(m._mmu_wred_drop_curve_profile_3_b),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_3_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_3_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_3_Bm_OFFSET,i,&(m._mmu_wred_drop_curve_profile_3_b),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_3_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_4
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_4.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_4m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_4m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_4m_OFFSET,i,(m._mmu_wred_drop_curve_profile_4),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_4m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_4m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_4m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_4),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_4m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_4_A
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_4_A.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_4_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_4_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_4_Am_OFFSET,i,(m._mmu_wred_drop_curve_profile_4_a),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_4_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_4_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_4_Am_OFFSET,i,&(m._mmu_wred_drop_curve_profile_4_a),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_4_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_4_B
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_4_B.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_4_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_4_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_4_Bm_OFFSET,i,(m._mmu_wred_drop_curve_profile_4_b),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_4_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_4_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_4_Bm_OFFSET,i,&(m._mmu_wred_drop_curve_profile_4_b),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_4_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_5
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_5.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_5m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_5m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_5m_OFFSET,i,(m._mmu_wred_drop_curve_profile_5),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_5m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_5m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_5m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_5),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_5m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_5_A
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_5_A.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_5_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_5_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_5_Am_OFFSET,i,(m._mmu_wred_drop_curve_profile_5_a),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_5_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_5_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_5_Am_OFFSET,i,&(m._mmu_wred_drop_curve_profile_5_a),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_5_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_5_B
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_5_B.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_5_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_5_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_5_Bm_OFFSET,i,(m._mmu_wred_drop_curve_profile_5_b),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_5_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_5_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_5_Bm_OFFSET,i,&(m._mmu_wred_drop_curve_profile_5_b),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_5_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_6
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_6.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_6m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_6m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_6m_OFFSET,i,(m._mmu_wred_drop_curve_profile_6),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_6m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_6m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_6m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_6),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_6m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_6_A
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_6_A.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_6_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_6_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_6_Am_OFFSET,i,(m._mmu_wred_drop_curve_profile_6_a),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_6_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_6_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_6_Am_OFFSET,i,&(m._mmu_wred_drop_curve_profile_6_a),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_6_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_6_B
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_6_B.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_6_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_6_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_6_Bm_OFFSET,i,(m._mmu_wred_drop_curve_profile_6_b),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_6_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_6_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_6_Bm_OFFSET,i,&(m._mmu_wred_drop_curve_profile_6_b),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_6_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_7
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_7.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_7m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_7m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_7m_OFFSET,i,(m._mmu_wred_drop_curve_profile_7),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_7m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_7m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_7m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_7),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_7m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_7_A
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_7_A.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_7_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_7_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_7_Am_OFFSET,i,(m._mmu_wred_drop_curve_profile_7_a),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_7_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_7_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_7_Am_OFFSET,i,&(m._mmu_wred_drop_curve_profile_7_a),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_7_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_7_B
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_7_B.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_7_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_7_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_7_Bm_OFFSET,i,(m._mmu_wred_drop_curve_profile_7_b),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_7_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_7_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_7_Bm_OFFSET,i,&(m._mmu_wred_drop_curve_profile_7_b),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_7_Bm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_8
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_8.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_8m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_8m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_8m_OFFSET,i,(m._mmu_wred_drop_curve_profile_8),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_8m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_8m_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_8m_OFFSET,i,&(m._mmu_wred_drop_curve_profile_8),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_8m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_8_A
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_8_A.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_8_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_8_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_8_Am_OFFSET,i,(m._mmu_wred_drop_curve_profile_8_a),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_8_Am(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_8_Am_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_8_Am_OFFSET,i,&(m._mmu_wred_drop_curve_profile_8_a),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_8_Am'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_DROP_CURVE_PROFILE_8_B
 * BLOCKS:   MMU_XPE
 * SIZE:     43
 */
/*
 * These macros can be used to access MMU_WRED_DROP_CURVE_PROFILE_8_B.
 */
#define READ_MMU_WRED_DROP_CURVE_PROFILE_8_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_DROP_CURVE_PROFILE_8_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_8_Bm_OFFSET,i,(m._mmu_wred_drop_curve_profile_8_b),2)
#define WRITE_MMU_WRED_DROP_CURVE_PROFILE_8_Bm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_DROP_CURVE_PROFILE_8_Bm_BLKACC,3,0,p,MMU_WRED_DROP_CURVE_PROFILE_8_Bm_OFFSET,i,&(m._mmu_wred_drop_curve_profile_8_b),2)

/*******************************************************************************
 * End of 'MMU_WRED_DROP_CURVE_PROFILE_8_Bm'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_WRED_ENABLE_ECCP_MEM.
 */
#define READ_MMU_WRED_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_WRED_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_WRED_ENABLE_ECCP_MEMr_OFFSET,0,(r._mmu_wred_enable_eccp_mem),1)
#define WRITE_MMU_WRED_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_WRED_ENABLE_ECCP_MEMr_BLKACC,3,0,p,MMU_WRED_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mmu_wred_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MMU_WRED_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MMU_WRED_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_WRED_EN_COR_ERR_RPT.
 */
#define READ_MMU_WRED_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_WRED_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_WRED_EN_COR_ERR_RPTr_OFFSET,0,(r._mmu_wred_en_cor_err_rpt),1)
#define WRITE_MMU_WRED_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_WRED_EN_COR_ERR_RPTr_BLKACC,3,0,p,MMU_WRED_EN_COR_ERR_RPTr_OFFSET,0,&(r._mmu_wred_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MMU_WRED_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THDm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THDm_BLKACC,3,n,p,MMU_WRED_PORT_SP_DROP_THDm_OFFSET,i,(m._mmu_wred_port_sp_drop_thd),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THDm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THDm_BLKACC,3,n,p,MMU_WRED_PORT_SP_DROP_THDm_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THDm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THDm_BLKACC,3,-1,p,MMU_WRED_PORT_SP_DROP_THDm_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd),2)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THDm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MARK
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MARK.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MARKm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MARKm_BLKACC,3,n,p,MMU_WRED_PORT_SP_DROP_THD_MARKm_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mark),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARKm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARKm_BLKACC,3,n,p,MMU_WRED_PORT_SP_DROP_THD_MARKm_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARKm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARKm_BLKACC,3,-1,p,MMU_WRED_PORT_SP_DROP_THD_MARKm_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MARKm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe0_epipe0),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe0_epipe1),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe1_epipe2),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe1_epipe3),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe2_epipe0),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe2_epipe1),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe3_epipe2),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     27
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe3_epipe3),1)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mark_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MARK_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mmu_xpe0_epipe0),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mmu_xpe0_epipe1),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mmu_xpe1_epipe2),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mmu_xpe1_epipe3),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mmu_xpe2_epipe0),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mmu_xpe2_epipe1),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mmu_xpe3_epipe2),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     49
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_port_sp_drop_thd_mmu_xpe3_epipe3),2)
#define WRITE_MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_port_sp_drop_thd_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_DROP_THD_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNTm_BLKACC,3,n,p,MMU_WRED_PORT_SP_SHARED_COUNTm_OFFSET,i,(m._mmu_wred_port_sp_shared_count),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNTm_BLKACC,3,n,p,MMU_WRED_PORT_SP_SHARED_COUNTm_OFFSET,i,&(m._mmu_wred_port_sp_shared_count),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNTm_BLKACC,3,-1,p,MMU_WRED_PORT_SP_SHARED_COUNTm_OFFSET,i,&(m._mmu_wred_port_sp_shared_count),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_port_sp_shared_count_mmu_xpe0_epipe0),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_port_sp_shared_count_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_port_sp_shared_count_mmu_xpe0_epipe1),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_port_sp_shared_count_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_port_sp_shared_count_mmu_xpe1_epipe2),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_port_sp_shared_count_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_port_sp_shared_count_mmu_xpe1_epipe3),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_port_sp_shared_count_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_port_sp_shared_count_mmu_xpe2_epipe0),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_port_sp_shared_count_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_port_sp_shared_count_mmu_xpe2_epipe1),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_port_sp_shared_count_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_port_sp_shared_count_mmu_xpe3_epipe2),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_port_sp_shared_count_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_port_sp_shared_count_mmu_xpe3_epipe3),1)
#define WRITE_MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_port_sp_shared_count_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_PORT_SP_SHARED_COUNT_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_0
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_0.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_0m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_0m_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_DROP_THD_0m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_0),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0m_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_DROP_THD_0m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0m_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0m_BLKACC,3,-1,p,MMU_WRED_UC_QUEUE_DROP_THD_0m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe0_epipe0),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe0_epipe1),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe1_epipe2),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe1_epipe3),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe2_epipe0),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe2_epipe1),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe3_epipe2),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe3_epipe3),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_0_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_0_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_1
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_1.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_1m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_1m_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_DROP_THD_1m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_1),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1m_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_DROP_THD_1m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1m_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1m_BLKACC,3,-1,p,MMU_WRED_UC_QUEUE_DROP_THD_1m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe0_epipe0),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe0_epipe1),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe1_epipe2),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe1_epipe3),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe2_epipe0),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe2_epipe1),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe3_epipe2),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     62
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe3_epipe3),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_1_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_1_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARKm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARKm_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_DROP_THD_MARKm_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARKm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARKm_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_DROP_THD_MARKm_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARKm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARKm_BLKACC,3,-1,p,MMU_WRED_UC_QUEUE_DROP_THD_MARKm_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARKm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe0_epipe0),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe0_epipe1),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe1_epipe2),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe1_epipe3),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe2_epipe0),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe2_epipe1),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe3_epipe2),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe3_epipe3),2)
#define WRITE_MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_drop_thd_mark_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_DROP_THD_MARK_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_OFFSET,i,(m._mmu_wred_uc_queue_total_count),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_OFFSET,i,&(m._mmu_wred_uc_queue_total_count),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_BLKACC,3,-1,p,MMU_WRED_UC_QUEUE_TOTAL_COUNTm_OFFSET,i,&(m._mmu_wred_uc_queue_total_count),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNTm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm_OFFSET,i,(m._mmu_wred_uc_queue_total_count_from_remote),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm_BLKACC,3,n,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm_BLKACC,3,-1,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTEm'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe0_epipe0),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe0_epipe1),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe1_epipe2),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe1_epipe3),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe2_epipe0),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe2_epipe1),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe3_epipe2),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe3_epipe3),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_from_remote_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_mmu_xpe0_epipe0),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_mmu_xpe0_epipe1),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE0_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_mmu_xpe1_epipe2),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_mmu_xpe1_epipe3),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE1_EPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE0.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE0m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_mmu_xpe2_epipe0),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE0m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE0m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE1.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE1m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_mmu_xpe2_epipe1),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE1m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE1m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE2_EPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE2.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE2m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_mmu_xpe3_epipe2),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE2m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE2m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE3.
 */
#define READ_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE3m_OFFSET,i,(m._mmu_wred_uc_queue_total_count_mmu_xpe3_epipe3),1)
#define WRITE_MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE3m_BLKACC,3,0,p,MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE3m_OFFSET,i,&(m._mmu_wred_uc_queue_total_count_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'MMU_WRED_UC_QUEUE_TOTAL_COUNT_MMU_XPE3_EPIPE3m'
 */




/*******************************************************************************
 * REGISTER:  MMU_XCFG_ECC_SINGLE_BIT_ERRORS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_XCFG_ECC_SINGLE_BIT_ERRORS.
 */
#define READ_MMU_XCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_XCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,3,0,p,MMU_XCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,(r._mmu_xcfg_ecc_single_bit_errors),1)
#define WRITE_MMU_XCFG_ECC_SINGLE_BIT_ERRORSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_XCFG_ECC_SINGLE_BIT_ERRORSr_BLKACC,3,0,p,MMU_XCFG_ECC_SINGLE_BIT_ERRORSr_OFFSET,0,&(r._mmu_xcfg_ecc_single_bit_errors),1)

/*******************************************************************************
 * End of 'MMU_XCFG_ECC_SINGLE_BIT_ERRORSr'
 */




/*******************************************************************************
 * MEMORY:  MMU_XCFG_MEM_FAIL_ADDR_64
 * BLOCKS:   MMU_XPE
 * SIZE:     35
 */
/*
 * These macros can be used to access MMU_XCFG_MEM_FAIL_ADDR_64.
 */
#define READ_MMU_XCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,MMU_XCFG_MEM_FAIL_ADDR_64m_BLKACC,3,0,p,MMU_XCFG_MEM_FAIL_ADDR_64m_OFFSET,i,(m._mmu_xcfg_mem_fail_addr_64),2)
#define WRITE_MMU_XCFG_MEM_FAIL_ADDR_64m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,MMU_XCFG_MEM_FAIL_ADDR_64m_BLKACC,3,0,p,MMU_XCFG_MEM_FAIL_ADDR_64m_OFFSET,i,&(m._mmu_xcfg_mem_fail_addr_64),2)

/*******************************************************************************
 * End of 'MMU_XCFG_MEM_FAIL_ADDR_64m'
 */




/*******************************************************************************
 * REGISTER:  MMU_XCFG_MEM_FAIL_INT_CTR
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_XCFG_MEM_FAIL_INT_CTR.
 */
#define READ_MMU_XCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_XCFG_MEM_FAIL_INT_CTRr_BLKACC,3,0,p,MMU_XCFG_MEM_FAIL_INT_CTRr_OFFSET,0,(r._mmu_xcfg_mem_fail_int_ctr),1)
#define WRITE_MMU_XCFG_MEM_FAIL_INT_CTRr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_XCFG_MEM_FAIL_INT_CTRr_BLKACC,3,0,p,MMU_XCFG_MEM_FAIL_INT_CTRr_OFFSET,0,&(r._mmu_xcfg_mem_fail_int_ctr),1)

/*******************************************************************************
 * End of 'MMU_XCFG_MEM_FAIL_INT_CTRr'
 */




/*******************************************************************************
 * REGISTER:  MMU_XCFG_MEM_SER_FIFO_STS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_XCFG_MEM_SER_FIFO_STS.
 */
#define READ_MMU_XCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_XCFG_MEM_SER_FIFO_STSr_BLKACC,3,0,p,MMU_XCFG_MEM_SER_FIFO_STSr_OFFSET,0,(r._mmu_xcfg_mem_ser_fifo_sts),1)
#define WRITE_MMU_XCFG_MEM_SER_FIFO_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_XCFG_MEM_SER_FIFO_STSr_BLKACC,3,0,p,MMU_XCFG_MEM_SER_FIFO_STSr_OFFSET,0,&(r._mmu_xcfg_mem_ser_fifo_sts),1)

/*******************************************************************************
 * End of 'MMU_XCFG_MEM_SER_FIFO_STSr'
 */




/*******************************************************************************
 * REGISTER:  MMU_XCFG_PARITY_EN
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_XCFG_PARITY_EN.
 */
#define READ_MMU_XCFG_PARITY_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_XCFG_PARITY_ENr_BLKACC,3,0,p,MMU_XCFG_PARITY_ENr_OFFSET,0,(r._mmu_xcfg_parity_en),1)
#define WRITE_MMU_XCFG_PARITY_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_XCFG_PARITY_ENr_BLKACC,3,0,p,MMU_XCFG_PARITY_ENr_OFFSET,0,&(r._mmu_xcfg_parity_en),1)

/*******************************************************************************
 * End of 'MMU_XCFG_PARITY_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_XCFG_XPE_CPU_INT_CLEAR
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_XCFG_XPE_CPU_INT_CLEAR.
 */
#define READ_MMU_XCFG_XPE_CPU_INT_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_XCFG_XPE_CPU_INT_CLEARr_BLKACC,3,0,p,MMU_XCFG_XPE_CPU_INT_CLEARr_OFFSET,0,(r._mmu_xcfg_xpe_cpu_int_clear),1)
#define WRITE_MMU_XCFG_XPE_CPU_INT_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_XCFG_XPE_CPU_INT_CLEARr_BLKACC,3,0,p,MMU_XCFG_XPE_CPU_INT_CLEARr_OFFSET,0,&(r._mmu_xcfg_xpe_cpu_int_clear),1)

/*******************************************************************************
 * End of 'MMU_XCFG_XPE_CPU_INT_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  MMU_XCFG_XPE_CPU_INT_EN
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_XCFG_XPE_CPU_INT_EN.
 */
#define READ_MMU_XCFG_XPE_CPU_INT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_XCFG_XPE_CPU_INT_ENr_BLKACC,3,0,p,MMU_XCFG_XPE_CPU_INT_ENr_OFFSET,0,(r._mmu_xcfg_xpe_cpu_int_en),1)
#define WRITE_MMU_XCFG_XPE_CPU_INT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_XCFG_XPE_CPU_INT_ENr_BLKACC,3,0,p,MMU_XCFG_XPE_CPU_INT_ENr_OFFSET,0,&(r._mmu_xcfg_xpe_cpu_int_en),1)

/*******************************************************************************
 * End of 'MMU_XCFG_XPE_CPU_INT_ENr'
 */




/*******************************************************************************
 * REGISTER:  MMU_XCFG_XPE_CPU_INT_STAT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MMU_XCFG_XPE_CPU_INT_STAT.
 */
#define READ_MMU_XCFG_XPE_CPU_INT_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MMU_XCFG_XPE_CPU_INT_STATr_BLKACC,3,0,p,MMU_XCFG_XPE_CPU_INT_STATr_OFFSET,0,(r._mmu_xcfg_xpe_cpu_int_stat),1)
#define WRITE_MMU_XCFG_XPE_CPU_INT_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MMU_XCFG_XPE_CPU_INT_STATr_BLKACC,3,0,p,MMU_XCFG_XPE_CPU_INT_STATr_OFFSET,0,&(r._mmu_xcfg_xpe_cpu_int_stat),1)

/*******************************************************************************
 * End of 'MMU_XCFG_XPE_CPU_INT_STATr'
 */




/*******************************************************************************
 * MEMORY:  MODPORT_MAP_M0
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access MODPORT_MAP_M0.
 */
#define READ_MODPORT_MAP_M0m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_M0m_BLKACC)+1,MODPORT_MAP_M0m_OFFSET+i,(m._modport_map_m0),1)
#define WRITE_MODPORT_MAP_M0m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_M0m_BLKACC)+1,MODPORT_MAP_M0m_OFFSET+i,&(m._modport_map_m0),1)

/*******************************************************************************
 * End of 'MODPORT_MAP_M0m'
 */




/*******************************************************************************
 * MEMORY:  MODPORT_MAP_M1
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access MODPORT_MAP_M1.
 */
#define READ_MODPORT_MAP_M1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_M1m_BLKACC)+1,MODPORT_MAP_M1m_OFFSET+i,(m._modport_map_m1),1)
#define WRITE_MODPORT_MAP_M1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_M1m_BLKACC)+1,MODPORT_MAP_M1m_OFFSET+i,&(m._modport_map_m1),1)

/*******************************************************************************
 * End of 'MODPORT_MAP_M1m'
 */




/*******************************************************************************
 * MEMORY:  MODPORT_MAP_M2
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access MODPORT_MAP_M2.
 */
#define READ_MODPORT_MAP_M2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_M2m_BLKACC)+1,MODPORT_MAP_M2m_OFFSET+i,(m._modport_map_m2),1)
#define WRITE_MODPORT_MAP_M2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_M2m_BLKACC)+1,MODPORT_MAP_M2m_OFFSET+i,&(m._modport_map_m2),1)

/*******************************************************************************
 * End of 'MODPORT_MAP_M2m'
 */




/*******************************************************************************
 * MEMORY:  MODPORT_MAP_M3
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access MODPORT_MAP_M3.
 */
#define READ_MODPORT_MAP_M3m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_M3m_BLKACC)+1,MODPORT_MAP_M3m_OFFSET+i,(m._modport_map_m3),1)
#define WRITE_MODPORT_MAP_M3m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_M3m_BLKACC)+1,MODPORT_MAP_M3m_OFFSET+i,&(m._modport_map_m3),1)

/*******************************************************************************
 * End of 'MODPORT_MAP_M3m'
 */




/*******************************************************************************
 * MEMORY:  MODPORT_MAP_MIRROR
 * BLOCKS:   IPIPE
 * SIZE:     11
 */
/*
 * These macros can be used to access MODPORT_MAP_MIRROR.
 */
#define READ_MODPORT_MAP_MIRRORm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_MIRRORm_BLKACC)+1,MODPORT_MAP_MIRRORm_OFFSET+i,(m._modport_map_mirror),1)
#define WRITE_MODPORT_MAP_MIRRORm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_MIRRORm_BLKACC)+1,MODPORT_MAP_MIRRORm_OFFSET+i,&(m._modport_map_mirror),1)

/*******************************************************************************
 * End of 'MODPORT_MAP_MIRRORm'
 */




/*******************************************************************************
 * REGISTER:  MODPORT_MAP_SEL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MODPORT_MAP_SEL.
 */
#define READ_MODPORT_MAP_SELr(u,p,r) bcmbd_cmicd_reg_port_read(u,MODPORT_MAP_SELr_BLKACC,p,MODPORT_MAP_SELr_OFFSET,0,(r._modport_map_sel), 1)
#define WRITE_MODPORT_MAP_SELr(u,p,r) bcmbd_cmicd_reg_port_write(u,MODPORT_MAP_SELr_BLKACC,p,MODPORT_MAP_SELr_OFFSET,0,&(r._modport_map_sel), 1)

/*******************************************************************************
 * End of 'MODPORT_MAP_SELr'
 */




/*******************************************************************************
 * MEMORY:  MODPORT_MAP_SW
 * BLOCKS:   IPIPE
 * SIZE:     21
 */
/*
 * These macros can be used to access MODPORT_MAP_SW.
 */
#define READ_MODPORT_MAP_SWm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_SWm_BLKACC)+1,MODPORT_MAP_SWm_OFFSET+i,(m._modport_map_sw),1)
#define WRITE_MODPORT_MAP_SWm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MODPORT_MAP_SWm_BLKACC)+1,MODPORT_MAP_SWm_OFFSET+i,&(m._modport_map_sw),1)

/*******************************************************************************
 * End of 'MODPORT_MAP_SWm'
 */




/*******************************************************************************
 * REGISTER:  MPLS_CAM_DBGCTRL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MPLS_CAM_DBGCTRL_0.
 */
#define READ_MPLS_CAM_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MPLS_CAM_DBGCTRL_0r_BLKACC,1,n,0,MPLS_CAM_DBGCTRL_0r_OFFSET,0,(r._mpls_cam_dbgctrl_0),1)
#define WRITE_MPLS_CAM_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_CAM_DBGCTRL_0r_BLKACC,1,n,0,MPLS_CAM_DBGCTRL_0r_OFFSET,0,&(r._mpls_cam_dbgctrl_0),1)
#define WRITE_MPLS_CAM_DBGCTRL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_CAM_DBGCTRL_0r_BLKACC,1,-1,0,MPLS_CAM_DBGCTRL_0r_OFFSET,0,&(r._mpls_cam_dbgctrl_0),1)

/*******************************************************************************
 * End of 'MPLS_CAM_DBGCTRL_0r'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY
 * BLOCKS:   IPIPE
 * SIZE:     122
 */
/*
 * These macros can be used to access MPLS_ENTRY.
 */
#define READ_MPLS_ENTRYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MPLS_ENTRYm_BLKACC)+1,MPLS_ENTRYm_OFFSET+i,(m._mpls_entry),4)
#define WRITE_MPLS_ENTRYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MPLS_ENTRYm_BLKACC)+1,MPLS_ENTRYm_OFFSET+i,&(m._mpls_entry),4)

/*******************************************************************************
 * End of 'MPLS_ENTRYm'
 */




/*******************************************************************************
 * REGISTER:  MPLS_ENTRY_DBGCTRL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MPLS_ENTRY_DBGCTRL_0.
 */
#define READ_MPLS_ENTRY_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MPLS_ENTRY_DBGCTRL_0r_BLKACC,1,n,0,MPLS_ENTRY_DBGCTRL_0r_OFFSET,0,(r._mpls_entry_dbgctrl_0),1)
#define WRITE_MPLS_ENTRY_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_ENTRY_DBGCTRL_0r_BLKACC,1,n,0,MPLS_ENTRY_DBGCTRL_0r_OFFSET,0,&(r._mpls_entry_dbgctrl_0),1)
#define WRITE_MPLS_ENTRY_DBGCTRL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_ENTRY_DBGCTRL_0r_BLKACC,1,-1,0,MPLS_ENTRY_DBGCTRL_0r_OFFSET,0,&(r._mpls_entry_dbgctrl_0),1)

/*******************************************************************************
 * End of 'MPLS_ENTRY_DBGCTRL_0r'
 */




/*******************************************************************************
 * MEMORY:  MPLS_ENTRY_ECC
 * BLOCKS:   IPIPE
 * SIZE:     131
 */
/*
 * These macros can be used to access MPLS_ENTRY_ECC.
 */
#define READ_MPLS_ENTRY_ECCm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MPLS_ENTRY_ECCm_BLKACC)+1,MPLS_ENTRY_ECCm_OFFSET+i,(m._mpls_entry_ecc),5)
#define WRITE_MPLS_ENTRY_ECCm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MPLS_ENTRY_ECCm_BLKACC)+1,MPLS_ENTRY_ECCm_OFFSET+i,&(m._mpls_entry_ecc),5)

/*******************************************************************************
 * End of 'MPLS_ENTRY_ECCm'
 */




/*******************************************************************************
 * REGISTER:  MPLS_ENTRY_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MPLS_ENTRY_HASH_CONTROL.
 */
#define READ_MPLS_ENTRY_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,MPLS_ENTRY_HASH_CONTROLr_BLKACC,1,MPLS_ENTRY_HASH_CONTROLr_OFFSET,0,(r._mpls_entry_hash_control), 1)
#define WRITE_MPLS_ENTRY_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,MPLS_ENTRY_HASH_CONTROLr_BLKACC,1,MPLS_ENTRY_HASH_CONTROLr_OFFSET,0,&(r._mpls_entry_hash_control), 1)

/*******************************************************************************
 * End of 'MPLS_ENTRY_HASH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  MPLS_ENTRY_LP_DATA_DBGCTRL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MPLS_ENTRY_LP_DATA_DBGCTRL_0.
 */
#define READ_MPLS_ENTRY_LP_DATA_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MPLS_ENTRY_LP_DATA_DBGCTRL_0r_BLKACC,1,n,0,MPLS_ENTRY_LP_DATA_DBGCTRL_0r_OFFSET,0,(r._mpls_entry_lp_data_dbgctrl_0),1)
#define WRITE_MPLS_ENTRY_LP_DATA_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_ENTRY_LP_DATA_DBGCTRL_0r_BLKACC,1,n,0,MPLS_ENTRY_LP_DATA_DBGCTRL_0r_OFFSET,0,&(r._mpls_entry_lp_data_dbgctrl_0),1)
#define WRITE_MPLS_ENTRY_LP_DATA_DBGCTRL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_ENTRY_LP_DATA_DBGCTRL_0r_BLKACC,1,-1,0,MPLS_ENTRY_LP_DATA_DBGCTRL_0r_OFFSET,0,&(r._mpls_entry_lp_data_dbgctrl_0),1)

/*******************************************************************************
 * End of 'MPLS_ENTRY_LP_DATA_DBGCTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  MPLS_MEMORY_DBGCTRL_0_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MPLS_MEMORY_DBGCTRL_0_64.
 */
#define READ_MPLS_MEMORY_DBGCTRL_0_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MPLS_MEMORY_DBGCTRL_0_64r_BLKACC,1,n,0,MPLS_MEMORY_DBGCTRL_0_64r_OFFSET,0,(r._mpls_memory_dbgctrl_0_64),2)
#define WRITE_MPLS_MEMORY_DBGCTRL_0_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_MEMORY_DBGCTRL_0_64r_BLKACC,1,n,0,MPLS_MEMORY_DBGCTRL_0_64r_OFFSET,0,&(r._mpls_memory_dbgctrl_0_64),2)
#define WRITE_MPLS_MEMORY_DBGCTRL_0_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_MEMORY_DBGCTRL_0_64r_BLKACC,1,-1,0,MPLS_MEMORY_DBGCTRL_0_64r_OFFSET,0,&(r._mpls_memory_dbgctrl_0_64),2)

/*******************************************************************************
 * End of 'MPLS_MEMORY_DBGCTRL_0_64r'
 */




/*******************************************************************************
 * REGISTER:  MPLS_MEMORY_DBGCTRL_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access MPLS_MEMORY_DBGCTRL_1_64.
 */
#define READ_MPLS_MEMORY_DBGCTRL_1_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MPLS_MEMORY_DBGCTRL_1_64r_BLKACC,1,n,0,MPLS_MEMORY_DBGCTRL_1_64r_OFFSET,0,(r._mpls_memory_dbgctrl_1_64),2)
#define WRITE_MPLS_MEMORY_DBGCTRL_1_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_MEMORY_DBGCTRL_1_64r_BLKACC,1,n,0,MPLS_MEMORY_DBGCTRL_1_64r_OFFSET,0,&(r._mpls_memory_dbgctrl_1_64),2)
#define WRITE_MPLS_MEMORY_DBGCTRL_1_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_MEMORY_DBGCTRL_1_64r_BLKACC,1,-1,0,MPLS_MEMORY_DBGCTRL_1_64r_OFFSET,0,&(r._mpls_memory_dbgctrl_1_64),2)

/*******************************************************************************
 * End of 'MPLS_MEMORY_DBGCTRL_1_64r'
 */




/*******************************************************************************
 * REGISTER:  MPLS_MEMORY_DBGCTRL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MPLS_MEMORY_DBGCTRL_2.
 */
#define READ_MPLS_MEMORY_DBGCTRL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MPLS_MEMORY_DBGCTRL_2r_BLKACC,1,n,0,MPLS_MEMORY_DBGCTRL_2r_OFFSET,0,(r._mpls_memory_dbgctrl_2),1)
#define WRITE_MPLS_MEMORY_DBGCTRL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_MEMORY_DBGCTRL_2r_BLKACC,1,n,0,MPLS_MEMORY_DBGCTRL_2r_OFFSET,0,&(r._mpls_memory_dbgctrl_2),1)
#define WRITE_MPLS_MEMORY_DBGCTRL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_MEMORY_DBGCTRL_2r_BLKACC,1,-1,0,MPLS_MEMORY_DBGCTRL_2r_OFFSET,0,&(r._mpls_memory_dbgctrl_2),1)

/*******************************************************************************
 * End of 'MPLS_MEMORY_DBGCTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  MPLS_MEMORY_DBGCTRL_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MPLS_MEMORY_DBGCTRL_3.
 */
#define READ_MPLS_MEMORY_DBGCTRL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MPLS_MEMORY_DBGCTRL_3r_BLKACC,1,n,0,MPLS_MEMORY_DBGCTRL_3r_OFFSET,0,(r._mpls_memory_dbgctrl_3),1)
#define WRITE_MPLS_MEMORY_DBGCTRL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_MEMORY_DBGCTRL_3r_BLKACC,1,n,0,MPLS_MEMORY_DBGCTRL_3r_OFFSET,0,&(r._mpls_memory_dbgctrl_3),1)
#define WRITE_MPLS_MEMORY_DBGCTRL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MPLS_MEMORY_DBGCTRL_3r_BLKACC,1,-1,0,MPLS_MEMORY_DBGCTRL_3r_OFFSET,0,&(r._mpls_memory_dbgctrl_3),1)

/*******************************************************************************
 * End of 'MPLS_MEMORY_DBGCTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  MTRO_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MTRO_ENABLE_ECCP_MEM.
 */
#define READ_MTRO_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MTRO_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MTRO_ENABLE_ECCP_MEMr_OFFSET,0,(r._mtro_enable_eccp_mem),1)
#define WRITE_MTRO_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MTRO_ENABLE_ECCP_MEMr_BLKACC,4,0,p,MTRO_ENABLE_ECCP_MEMr_OFFSET,0,&(r._mtro_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'MTRO_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  MTRO_EN_COR_ERR_RPT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MTRO_EN_COR_ERR_RPT.
 */
#define READ_MTRO_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MTRO_EN_COR_ERR_RPTr_BLKACC,4,0,p,MTRO_EN_COR_ERR_RPTr_OFFSET,0,(r._mtro_en_cor_err_rpt),1)
#define WRITE_MTRO_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MTRO_EN_COR_ERR_RPTr_BLKACC,4,0,p,MTRO_EN_COR_ERR_RPTr_OFFSET,0,&(r._mtro_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'MTRO_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  MTRO_MEMDEBUG_CONFIG_L
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MTRO_MEMDEBUG_CONFIG_L.
 */
#define READ_MTRO_MEMDEBUG_CONFIG_Lr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,MTRO_MEMDEBUG_CONFIG_Lr_BLKACC,4,0,p,MTRO_MEMDEBUG_CONFIG_Lr_OFFSET,i,(r._mtro_memdebug_config_l),1)
#define WRITE_MTRO_MEMDEBUG_CONFIG_Lr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,MTRO_MEMDEBUG_CONFIG_Lr_BLKACC,4,0,p,MTRO_MEMDEBUG_CONFIG_Lr_OFFSET,i,&(r._mtro_memdebug_config_l),1)

/*******************************************************************************
 * End of 'MTRO_MEMDEBUG_CONFIG_Lr'
 */




/*******************************************************************************
 * REGISTER:  MTRO_MEMDEBUG_CONFIG_L0
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MTRO_MEMDEBUG_CONFIG_L0.
 */
#define READ_MTRO_MEMDEBUG_CONFIG_L0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MTRO_MEMDEBUG_CONFIG_L0r_BLKACC,4,0,p,MTRO_MEMDEBUG_CONFIG_L0r_OFFSET,0,(r._mtro_memdebug_config_l0),1)
#define WRITE_MTRO_MEMDEBUG_CONFIG_L0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MTRO_MEMDEBUG_CONFIG_L0r_BLKACC,4,0,p,MTRO_MEMDEBUG_CONFIG_L0r_OFFSET,0,&(r._mtro_memdebug_config_l0),1)

/*******************************************************************************
 * End of 'MTRO_MEMDEBUG_CONFIG_L0r'
 */




/*******************************************************************************
 * REGISTER:  MTRO_MEMDEBUG_CONFIG_L1
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MTRO_MEMDEBUG_CONFIG_L1.
 */
#define READ_MTRO_MEMDEBUG_CONFIG_L1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MTRO_MEMDEBUG_CONFIG_L1r_BLKACC,4,0,p,MTRO_MEMDEBUG_CONFIG_L1r_OFFSET,0,(r._mtro_memdebug_config_l1),1)
#define WRITE_MTRO_MEMDEBUG_CONFIG_L1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MTRO_MEMDEBUG_CONFIG_L1r_BLKACC,4,0,p,MTRO_MEMDEBUG_CONFIG_L1r_OFFSET,0,&(r._mtro_memdebug_config_l1),1)

/*******************************************************************************
 * End of 'MTRO_MEMDEBUG_CONFIG_L1r'
 */




/*******************************************************************************
 * REGISTER:  MTRO_MEMDEBUG_CONFIG_PORT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MTRO_MEMDEBUG_CONFIG_PORT.
 */
#define READ_MTRO_MEMDEBUG_CONFIG_PORTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MTRO_MEMDEBUG_CONFIG_PORTr_BLKACC,4,0,p,MTRO_MEMDEBUG_CONFIG_PORTr_OFFSET,0,(r._mtro_memdebug_config_port),1)
#define WRITE_MTRO_MEMDEBUG_CONFIG_PORTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MTRO_MEMDEBUG_CONFIG_PORTr_BLKACC,4,0,p,MTRO_MEMDEBUG_CONFIG_PORTr_OFFSET,0,&(r._mtro_memdebug_config_port),1)

/*******************************************************************************
 * End of 'MTRO_MEMDEBUG_CONFIG_PORTr'
 */




/*******************************************************************************
 * REGISTER:  MTRO_PORT_ENTITY_DISABLE
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access MTRO_PORT_ENTITY_DISABLE.
 */
#define READ_MTRO_PORT_ENTITY_DISABLEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MTRO_PORT_ENTITY_DISABLEr_BLKACC,4,0,p,MTRO_PORT_ENTITY_DISABLEr_OFFSET,0,(r._mtro_port_entity_disable),2)
#define WRITE_MTRO_PORT_ENTITY_DISABLEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MTRO_PORT_ENTITY_DISABLEr_BLKACC,4,0,p,MTRO_PORT_ENTITY_DISABLEr_OFFSET,0,&(r._mtro_port_entity_disable),2)

/*******************************************************************************
 * End of 'MTRO_PORT_ENTITY_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  MTRO_REFRESH_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MTRO_REFRESH_CONFIG.
 */
#define READ_MTRO_REFRESH_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MTRO_REFRESH_CONFIGr_BLKACC,4,0,p,MTRO_REFRESH_CONFIGr_OFFSET,0,(r._mtro_refresh_config),1)
#define WRITE_MTRO_REFRESH_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MTRO_REFRESH_CONFIGr_BLKACC,4,0,p,MTRO_REFRESH_CONFIGr_OFFSET,0,&(r._mtro_refresh_config),1)

/*******************************************************************************
 * End of 'MTRO_REFRESH_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MTRO_REFRESH_STATUS
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access MTRO_REFRESH_STATUS.
 */
#define READ_MTRO_REFRESH_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,MTRO_REFRESH_STATUSr_BLKACC,4,0,p,MTRO_REFRESH_STATUSr_OFFSET,0,(r._mtro_refresh_status),1)
#define WRITE_MTRO_REFRESH_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,MTRO_REFRESH_STATUSr_BLKACC,4,0,p,MTRO_REFRESH_STATUSr_OFFSET,0,&(r._mtro_refresh_status),1)

/*******************************************************************************
 * End of 'MTRO_REFRESH_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MULTIPASS_LOOPBACK_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access MULTIPASS_LOOPBACK_BITMAP.
 */
#define READ_MULTIPASS_LOOPBACK_BITMAPm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,MULTIPASS_LOOPBACK_BITMAPm_BLKACC,1,n,0,MULTIPASS_LOOPBACK_BITMAPm_OFFSET,i,(m._multipass_loopback_bitmap),5)
#define WRITE_MULTIPASS_LOOPBACK_BITMAPm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,MULTIPASS_LOOPBACK_BITMAPm_BLKACC,1,n,0,MULTIPASS_LOOPBACK_BITMAPm_OFFSET,i,&(m._multipass_loopback_bitmap),5)
#define WRITE_MULTIPASS_LOOPBACK_BITMAPm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,MULTIPASS_LOOPBACK_BITMAPm_BLKACC,1,-1,0,MULTIPASS_LOOPBACK_BITMAPm_OFFSET,i,&(m._multipass_loopback_bitmap),5)

/*******************************************************************************
 * End of 'MULTIPASS_LOOPBACK_BITMAPm'
 */




/*******************************************************************************
 * REGISTER:  MY_STATION_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MY_STATION_CAM_BIST_CONFIG.
 */
#define READ_MY_STATION_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MY_STATION_CAM_BIST_CONFIGr_BLKACC,1,n,0,MY_STATION_CAM_BIST_CONFIGr_OFFSET,0,(r._my_station_cam_bist_config),1)
#define WRITE_MY_STATION_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MY_STATION_CAM_BIST_CONFIGr_BLKACC,1,n,0,MY_STATION_CAM_BIST_CONFIGr_OFFSET,0,&(r._my_station_cam_bist_config),1)
#define WRITE_MY_STATION_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MY_STATION_CAM_BIST_CONFIGr_BLKACC,1,-1,0,MY_STATION_CAM_BIST_CONFIGr_OFFSET,0,&(r._my_station_cam_bist_config),1)

/*******************************************************************************
 * End of 'MY_STATION_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  MY_STATION_CAM_BIST_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MY_STATION_CAM_BIST_CONTROL.
 */
#define READ_MY_STATION_CAM_BIST_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MY_STATION_CAM_BIST_CONTROLr_BLKACC,1,n,0,MY_STATION_CAM_BIST_CONTROLr_OFFSET,0,(r._my_station_cam_bist_control),1)
#define WRITE_MY_STATION_CAM_BIST_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MY_STATION_CAM_BIST_CONTROLr_BLKACC,1,n,0,MY_STATION_CAM_BIST_CONTROLr_OFFSET,0,&(r._my_station_cam_bist_control),1)
#define WRITE_MY_STATION_CAM_BIST_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MY_STATION_CAM_BIST_CONTROLr_BLKACC,1,-1,0,MY_STATION_CAM_BIST_CONTROLr_OFFSET,0,&(r._my_station_cam_bist_control),1)

/*******************************************************************************
 * End of 'MY_STATION_CAM_BIST_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  MY_STATION_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MY_STATION_CAM_BIST_DBG_DATA.
 */
#define READ_MY_STATION_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MY_STATION_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,MY_STATION_CAM_BIST_DBG_DATAr_OFFSET,0,(r._my_station_cam_bist_dbg_data),1)
#define WRITE_MY_STATION_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MY_STATION_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,MY_STATION_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._my_station_cam_bist_dbg_data),1)
#define WRITE_MY_STATION_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MY_STATION_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,MY_STATION_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._my_station_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'MY_STATION_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  MY_STATION_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access MY_STATION_CAM_BIST_STATUS.
 */
#define READ_MY_STATION_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,MY_STATION_CAM_BIST_STATUSr_BLKACC,1,n,0,MY_STATION_CAM_BIST_STATUSr_OFFSET,0,(r._my_station_cam_bist_status),1)
#define WRITE_MY_STATION_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,MY_STATION_CAM_BIST_STATUSr_BLKACC,1,n,0,MY_STATION_CAM_BIST_STATUSr_OFFSET,0,&(r._my_station_cam_bist_status),1)
#define WRITE_MY_STATION_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,MY_STATION_CAM_BIST_STATUSr_BLKACC,1,-1,0,MY_STATION_CAM_BIST_STATUSr_OFFSET,0,&(r._my_station_cam_bist_status),1)

/*******************************************************************************
 * End of 'MY_STATION_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * MEMORY:  MY_STATION_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     174
 */
/*
 * These macros can be used to access MY_STATION_TCAM.
 */
#define READ_MY_STATION_TCAMm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MY_STATION_TCAMm_BLKACC)+1,MY_STATION_TCAMm_OFFSET+i,(m._my_station_tcam),6)
#define WRITE_MY_STATION_TCAMm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MY_STATION_TCAMm_BLKACC)+1,MY_STATION_TCAMm_OFFSET+i,&(m._my_station_tcam),6)

/*******************************************************************************
 * End of 'MY_STATION_TCAMm'
 */




/*******************************************************************************
 * MEMORY:  MY_STATION_TCAM_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     13
 */
/*
 * These macros can be used to access MY_STATION_TCAM_DATA_ONLY.
 */
#define READ_MY_STATION_TCAM_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MY_STATION_TCAM_DATA_ONLYm_BLKACC)+1,MY_STATION_TCAM_DATA_ONLYm_OFFSET+i,(m._my_station_tcam_data_only),1)
#define WRITE_MY_STATION_TCAM_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MY_STATION_TCAM_DATA_ONLYm_BLKACC)+1,MY_STATION_TCAM_DATA_ONLYm_OFFSET+i,&(m._my_station_tcam_data_only),1)

/*******************************************************************************
 * End of 'MY_STATION_TCAM_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  MY_STATION_TCAM_ENTRY_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     161
 */
/*
 * These macros can be used to access MY_STATION_TCAM_ENTRY_ONLY.
 */
#define READ_MY_STATION_TCAM_ENTRY_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(MY_STATION_TCAM_ENTRY_ONLYm_BLKACC)+1,MY_STATION_TCAM_ENTRY_ONLYm_OFFSET+i,(m._my_station_tcam_entry_only),6)
#define WRITE_MY_STATION_TCAM_ENTRY_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(MY_STATION_TCAM_ENTRY_ONLYm_BLKACC)+1,MY_STATION_TCAM_ENTRY_ONLYm_OFFSET+i,&(m._my_station_tcam_entry_only),6)

/*******************************************************************************
 * End of 'MY_STATION_TCAM_ENTRY_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  NIV_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access NIV_ETHERTYPE.
 */
#define READ_NIV_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,NIV_ETHERTYPEr_BLKACC,1,NIV_ETHERTYPEr_OFFSET,0,(r._niv_ethertype), 1)
#define WRITE_NIV_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,NIV_ETHERTYPEr_BLKACC,1,NIV_ETHERTYPEr_OFFSET,0,&(r._niv_ethertype), 1)

/*******************************************************************************
 * End of 'NIV_ETHERTYPEr'
 */




/*******************************************************************************
 * MEMORY:  NONUCAST_TRUNK_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access NONUCAST_TRUNK_BLOCK_MASK.
 */
#define READ_NONUCAST_TRUNK_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(NONUCAST_TRUNK_BLOCK_MASKm_BLKACC)+1,NONUCAST_TRUNK_BLOCK_MASKm_OFFSET+i,(m._nonucast_trunk_block_mask),5)
#define WRITE_NONUCAST_TRUNK_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(NONUCAST_TRUNK_BLOCK_MASKm_BLKACC)+1,NONUCAST_TRUNK_BLOCK_MASKm_OFFSET+i,&(m._nonucast_trunk_block_mask),5)

/*******************************************************************************
 * End of 'NONUCAST_TRUNK_BLOCK_MASKm'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_CHANNEL_BASE_64
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_CHANNEL_BASE_64.
 */
#define READ_OOBFC_CHANNEL_BASE_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_CHANNEL_BASE_64r_BLKACC,5,0,p,OOBFC_CHANNEL_BASE_64r_OFFSET,0,(r._oobfc_channel_base_64),2)
#define WRITE_OOBFC_CHANNEL_BASE_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_CHANNEL_BASE_64r_BLKACC,5,0,p,OOBFC_CHANNEL_BASE_64r_OFFSET,0,&(r._oobfc_channel_base_64),2)

/*******************************************************************************
 * End of 'OOBFC_CHANNEL_BASE_64r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_CHIF_CFG
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_CHIF_CFG.
 */
#define READ_OOBFC_CHIF_CFGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_CHIF_CFGr_BLKACC,5,0,p,OOBFC_CHIF_CFGr_OFFSET,i,(r._oobfc_chif_cfg),1)
#define WRITE_OOBFC_CHIF_CFGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_CHIF_CFGr_BLKACC,5,0,p,OOBFC_CHIF_CFGr_OFFSET,i,&(r._oobfc_chif_cfg),1)

/*******************************************************************************
 * End of 'OOBFC_CHIF_CFGr'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_CHIF_CFG0
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_CHIF_CFG0.
 */
#define READ_OOBFC_CHIF_CFG0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_CHIF_CFG0r_BLKACC,5,0,p,OOBFC_CHIF_CFG0r_OFFSET,0,(r._oobfc_chif_cfg0),1)
#define WRITE_OOBFC_CHIF_CFG0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_CHIF_CFG0r_BLKACC,5,0,p,OOBFC_CHIF_CFG0r_OFFSET,0,&(r._oobfc_chif_cfg0),1)

/*******************************************************************************
 * End of 'OOBFC_CHIF_CFG0r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_CHIF_CFG1
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_CHIF_CFG1.
 */
#define READ_OOBFC_CHIF_CFG1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_CHIF_CFG1r_BLKACC,5,0,p,OOBFC_CHIF_CFG1r_OFFSET,0,(r._oobfc_chif_cfg1),1)
#define WRITE_OOBFC_CHIF_CFG1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_CHIF_CFG1r_BLKACC,5,0,p,OOBFC_CHIF_CFG1r_OFFSET,0,&(r._oobfc_chif_cfg1),1)

/*******************************************************************************
 * End of 'OOBFC_CHIF_CFG1r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_CHIF_CFG2
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_CHIF_CFG2.
 */
#define READ_OOBFC_CHIF_CFG2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_CHIF_CFG2r_BLKACC,5,0,p,OOBFC_CHIF_CFG2r_OFFSET,0,(r._oobfc_chif_cfg2),1)
#define WRITE_OOBFC_CHIF_CFG2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_CHIF_CFG2r_BLKACC,5,0,p,OOBFC_CHIF_CFG2r_OFFSET,0,&(r._oobfc_chif_cfg2),1)

/*******************************************************************************
 * End of 'OOBFC_CHIF_CFG2r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_CHIF_CFG3
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_CHIF_CFG3.
 */
#define READ_OOBFC_CHIF_CFG3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_CHIF_CFG3r_BLKACC,5,0,p,OOBFC_CHIF_CFG3r_OFFSET,0,(r._oobfc_chif_cfg3),1)
#define WRITE_OOBFC_CHIF_CFG3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_CHIF_CFG3r_BLKACC,5,0,p,OOBFC_CHIF_CFG3r_OFFSET,0,&(r._oobfc_chif_cfg3),1)

/*******************************************************************************
 * End of 'OOBFC_CHIF_CFG3r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_ENG_PORT_EN0_64
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_ENG_PORT_EN0_64.
 */
#define READ_OOBFC_ENG_PORT_EN0_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_ENG_PORT_EN0_64r_BLKACC,5,0,p,OOBFC_ENG_PORT_EN0_64r_OFFSET,0,(r._oobfc_eng_port_en0_64),2)
#define WRITE_OOBFC_ENG_PORT_EN0_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_ENG_PORT_EN0_64r_BLKACC,5,0,p,OOBFC_ENG_PORT_EN0_64r_OFFSET,0,&(r._oobfc_eng_port_en0_64),2)

/*******************************************************************************
 * End of 'OOBFC_ENG_PORT_EN0_64r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_ENG_PORT_EN1_64
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_ENG_PORT_EN1_64.
 */
#define READ_OOBFC_ENG_PORT_EN1_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_ENG_PORT_EN1_64r_BLKACC,5,0,p,OOBFC_ENG_PORT_EN1_64r_OFFSET,0,(r._oobfc_eng_port_en1_64),2)
#define WRITE_OOBFC_ENG_PORT_EN1_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_ENG_PORT_EN1_64r_BLKACC,5,0,p,OOBFC_ENG_PORT_EN1_64r_OFFSET,0,&(r._oobfc_eng_port_en1_64),2)

/*******************************************************************************
 * End of 'OOBFC_ENG_PORT_EN1_64r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_ENG_PORT_EN2
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_ENG_PORT_EN2.
 */
#define READ_OOBFC_ENG_PORT_EN2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_ENG_PORT_EN2r_BLKACC,5,0,p,OOBFC_ENG_PORT_EN2r_OFFSET,0,(r._oobfc_eng_port_en2),1)
#define WRITE_OOBFC_ENG_PORT_EN2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_ENG_PORT_EN2r_BLKACC,5,0,p,OOBFC_ENG_PORT_EN2r_OFFSET,0,&(r._oobfc_eng_port_en2),1)

/*******************************************************************************
 * End of 'OOBFC_ENG_PORT_EN2r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_ENG_PORT_QSEL0_64
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_ENG_PORT_QSEL0_64.
 */
#define READ_OOBFC_ENG_PORT_QSEL0_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_ENG_PORT_QSEL0_64r_BLKACC,5,0,p,OOBFC_ENG_PORT_QSEL0_64r_OFFSET,0,(r._oobfc_eng_port_qsel0_64),2)
#define WRITE_OOBFC_ENG_PORT_QSEL0_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_ENG_PORT_QSEL0_64r_BLKACC,5,0,p,OOBFC_ENG_PORT_QSEL0_64r_OFFSET,0,&(r._oobfc_eng_port_qsel0_64),2)

/*******************************************************************************
 * End of 'OOBFC_ENG_PORT_QSEL0_64r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_ENG_PORT_QSEL1_64
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_ENG_PORT_QSEL1_64.
 */
#define READ_OOBFC_ENG_PORT_QSEL1_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_ENG_PORT_QSEL1_64r_BLKACC,5,0,p,OOBFC_ENG_PORT_QSEL1_64r_OFFSET,0,(r._oobfc_eng_port_qsel1_64),2)
#define WRITE_OOBFC_ENG_PORT_QSEL1_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_ENG_PORT_QSEL1_64r_BLKACC,5,0,p,OOBFC_ENG_PORT_QSEL1_64r_OFFSET,0,&(r._oobfc_eng_port_qsel1_64),2)

/*******************************************************************************
 * End of 'OOBFC_ENG_PORT_QSEL1_64r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_ENG_PORT_QSEL2
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_ENG_PORT_QSEL2.
 */
#define READ_OOBFC_ENG_PORT_QSEL2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_ENG_PORT_QSEL2r_BLKACC,5,0,p,OOBFC_ENG_PORT_QSEL2r_OFFSET,0,(r._oobfc_eng_port_qsel2),1)
#define WRITE_OOBFC_ENG_PORT_QSEL2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_ENG_PORT_QSEL2r_BLKACC,5,0,p,OOBFC_ENG_PORT_QSEL2r_OFFSET,0,&(r._oobfc_eng_port_qsel2),1)

/*******************************************************************************
 * End of 'OOBFC_ENG_PORT_QSEL2r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_GCS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_GCS.
 */
#define READ_OOBFC_GCSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_GCSr_BLKACC,5,0,p,OOBFC_GCSr_OFFSET,0,(r._oobfc_gcs),1)
#define WRITE_OOBFC_GCSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_GCSr_BLKACC,5,0,p,OOBFC_GCSr_OFFSET,0,&(r._oobfc_gcs),1)

/*******************************************************************************
 * End of 'OOBFC_GCSr'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_ING_PORT_EN0_64
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_ING_PORT_EN0_64.
 */
#define READ_OOBFC_ING_PORT_EN0_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_ING_PORT_EN0_64r_BLKACC,5,0,p,OOBFC_ING_PORT_EN0_64r_OFFSET,0,(r._oobfc_ing_port_en0_64),2)
#define WRITE_OOBFC_ING_PORT_EN0_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_ING_PORT_EN0_64r_BLKACC,5,0,p,OOBFC_ING_PORT_EN0_64r_OFFSET,0,&(r._oobfc_ing_port_en0_64),2)

/*******************************************************************************
 * End of 'OOBFC_ING_PORT_EN0_64r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_ING_PORT_EN1_64
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_ING_PORT_EN1_64.
 */
#define READ_OOBFC_ING_PORT_EN1_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_ING_PORT_EN1_64r_BLKACC,5,0,p,OOBFC_ING_PORT_EN1_64r_OFFSET,0,(r._oobfc_ing_port_en1_64),2)
#define WRITE_OOBFC_ING_PORT_EN1_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_ING_PORT_EN1_64r_BLKACC,5,0,p,OOBFC_ING_PORT_EN1_64r_OFFSET,0,&(r._oobfc_ing_port_en1_64),2)

/*******************************************************************************
 * End of 'OOBFC_ING_PORT_EN1_64r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_ING_PORT_EN2
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_ING_PORT_EN2.
 */
#define READ_OOBFC_ING_PORT_EN2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_ING_PORT_EN2r_BLKACC,5,0,p,OOBFC_ING_PORT_EN2r_OFFSET,0,(r._oobfc_ing_port_en2),1)
#define WRITE_OOBFC_ING_PORT_EN2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_ING_PORT_EN2r_BLKACC,5,0,p,OOBFC_ING_PORT_EN2r_OFFSET,0,&(r._oobfc_ing_port_en2),1)

/*******************************************************************************
 * End of 'OOBFC_ING_PORT_EN2r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_CRC_CNT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_CRC_CNT.
 */
#define READ_OOBFC_MSG_CRC_CNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_CRC_CNTr_BLKACC,5,0,p,OOBFC_MSG_CRC_CNTr_OFFSET,i,(r._oobfc_msg_crc_cnt),1)
#define WRITE_OOBFC_MSG_CRC_CNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_CRC_CNTr_BLKACC,5,0,p,OOBFC_MSG_CRC_CNTr_OFFSET,i,&(r._oobfc_msg_crc_cnt),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_CRC_CNTr'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_CRC_CNT0
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_CRC_CNT0.
 */
#define READ_OOBFC_MSG_CRC_CNT0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_CRC_CNT0r_BLKACC,5,0,p,OOBFC_MSG_CRC_CNT0r_OFFSET,0,(r._oobfc_msg_crc_cnt0),1)
#define WRITE_OOBFC_MSG_CRC_CNT0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_CRC_CNT0r_BLKACC,5,0,p,OOBFC_MSG_CRC_CNT0r_OFFSET,0,&(r._oobfc_msg_crc_cnt0),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_CRC_CNT0r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_CRC_CNT1
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_CRC_CNT1.
 */
#define READ_OOBFC_MSG_CRC_CNT1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_CRC_CNT1r_BLKACC,5,0,p,OOBFC_MSG_CRC_CNT1r_OFFSET,0,(r._oobfc_msg_crc_cnt1),1)
#define WRITE_OOBFC_MSG_CRC_CNT1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_CRC_CNT1r_BLKACC,5,0,p,OOBFC_MSG_CRC_CNT1r_OFFSET,0,&(r._oobfc_msg_crc_cnt1),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_CRC_CNT1r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_CRC_CNT2
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_CRC_CNT2.
 */
#define READ_OOBFC_MSG_CRC_CNT2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_CRC_CNT2r_BLKACC,5,0,p,OOBFC_MSG_CRC_CNT2r_OFFSET,0,(r._oobfc_msg_crc_cnt2),1)
#define WRITE_OOBFC_MSG_CRC_CNT2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_CRC_CNT2r_BLKACC,5,0,p,OOBFC_MSG_CRC_CNT2r_OFFSET,0,&(r._oobfc_msg_crc_cnt2),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_CRC_CNT2r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_CRC_CNT3
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_CRC_CNT3.
 */
#define READ_OOBFC_MSG_CRC_CNT3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_CRC_CNT3r_BLKACC,5,0,p,OOBFC_MSG_CRC_CNT3r_OFFSET,0,(r._oobfc_msg_crc_cnt3),1)
#define WRITE_OOBFC_MSG_CRC_CNT3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_CRC_CNT3r_BLKACC,5,0,p,OOBFC_MSG_CRC_CNT3r_OFFSET,0,&(r._oobfc_msg_crc_cnt3),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_CRC_CNT3r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_REG
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_MSG_REG.
 */
#define READ_OOBFC_MSG_REGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_REGr_BLKACC,5,0,p,OOBFC_MSG_REGr_OFFSET,i,(r._oobfc_msg_reg),2)
#define WRITE_OOBFC_MSG_REGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_REGr_BLKACC,5,0,p,OOBFC_MSG_REGr_OFFSET,i,&(r._oobfc_msg_reg),2)

/*******************************************************************************
 * End of 'OOBFC_MSG_REGr'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_REG0
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_MSG_REG0.
 */
#define READ_OOBFC_MSG_REG0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_REG0r_BLKACC,5,0,p,OOBFC_MSG_REG0r_OFFSET,0,(r._oobfc_msg_reg0),2)
#define WRITE_OOBFC_MSG_REG0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_REG0r_BLKACC,5,0,p,OOBFC_MSG_REG0r_OFFSET,0,&(r._oobfc_msg_reg0),2)

/*******************************************************************************
 * End of 'OOBFC_MSG_REG0r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_REG1
 * BLOCKS:   MMU_GLB
 * SIZE:     64
 */
/*
 * These macros can be used to access OOBFC_MSG_REG1.
 */
#define READ_OOBFC_MSG_REG1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_REG1r_BLKACC,5,0,p,OOBFC_MSG_REG1r_OFFSET,0,(r._oobfc_msg_reg1),2)
#define WRITE_OOBFC_MSG_REG1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_REG1r_BLKACC,5,0,p,OOBFC_MSG_REG1r_OFFSET,0,&(r._oobfc_msg_reg1),2)

/*******************************************************************************
 * End of 'OOBFC_MSG_REG1r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_RX_TOT_CNT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_RX_TOT_CNT.
 */
#define READ_OOBFC_MSG_RX_TOT_CNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_RX_TOT_CNTr_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNTr_OFFSET,i,(r._oobfc_msg_rx_tot_cnt),1)
#define WRITE_OOBFC_MSG_RX_TOT_CNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_RX_TOT_CNTr_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNTr_OFFSET,i,&(r._oobfc_msg_rx_tot_cnt),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_RX_TOT_CNTr'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_RX_TOT_CNT0
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_RX_TOT_CNT0.
 */
#define READ_OOBFC_MSG_RX_TOT_CNT0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_RX_TOT_CNT0r_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNT0r_OFFSET,0,(r._oobfc_msg_rx_tot_cnt0),1)
#define WRITE_OOBFC_MSG_RX_TOT_CNT0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_RX_TOT_CNT0r_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNT0r_OFFSET,0,&(r._oobfc_msg_rx_tot_cnt0),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_RX_TOT_CNT0r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_RX_TOT_CNT1
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_RX_TOT_CNT1.
 */
#define READ_OOBFC_MSG_RX_TOT_CNT1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_RX_TOT_CNT1r_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNT1r_OFFSET,0,(r._oobfc_msg_rx_tot_cnt1),1)
#define WRITE_OOBFC_MSG_RX_TOT_CNT1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_RX_TOT_CNT1r_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNT1r_OFFSET,0,&(r._oobfc_msg_rx_tot_cnt1),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_RX_TOT_CNT1r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_RX_TOT_CNT2
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_RX_TOT_CNT2.
 */
#define READ_OOBFC_MSG_RX_TOT_CNT2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_RX_TOT_CNT2r_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNT2r_OFFSET,0,(r._oobfc_msg_rx_tot_cnt2),1)
#define WRITE_OOBFC_MSG_RX_TOT_CNT2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_RX_TOT_CNT2r_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNT2r_OFFSET,0,&(r._oobfc_msg_rx_tot_cnt2),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_RX_TOT_CNT2r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_RX_TOT_CNT3
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_RX_TOT_CNT3.
 */
#define READ_OOBFC_MSG_RX_TOT_CNT3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_RX_TOT_CNT3r_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNT3r_OFFSET,0,(r._oobfc_msg_rx_tot_cnt3),1)
#define WRITE_OOBFC_MSG_RX_TOT_CNT3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_RX_TOT_CNT3r_BLKACC,5,0,p,OOBFC_MSG_RX_TOT_CNT3r_OFFSET,0,&(r._oobfc_msg_rx_tot_cnt3),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_RX_TOT_CNT3r'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_MSG_TX_CNT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_MSG_TX_CNT.
 */
#define READ_OOBFC_MSG_TX_CNTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_MSG_TX_CNTr_BLKACC,5,0,p,OOBFC_MSG_TX_CNTr_OFFSET,0,(r._oobfc_msg_tx_cnt),1)
#define WRITE_OOBFC_MSG_TX_CNTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_MSG_TX_CNTr_BLKACC,5,0,p,OOBFC_MSG_TX_CNTr_OFFSET,0,&(r._oobfc_msg_tx_cnt),1)

/*******************************************************************************
 * End of 'OOBFC_MSG_TX_CNTr'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_STS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_STS.
 */
#define READ_OOBFC_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_STSr_BLKACC,5,0,p,OOBFC_STSr_OFFSET,0,(r._oobfc_sts),1)
#define WRITE_OOBFC_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_STSr_BLKACC,5,0,p,OOBFC_STSr_OFFSET,0,&(r._oobfc_sts),1)

/*******************************************************************************
 * End of 'OOBFC_STSr'
 */




/*******************************************************************************
 * REGISTER:  OOBFC_TX_IDLE
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBFC_TX_IDLE.
 */
#define READ_OOBFC_TX_IDLEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBFC_TX_IDLEr_BLKACC,5,0,p,OOBFC_TX_IDLEr_OFFSET,0,(r._oobfc_tx_idle),1)
#define WRITE_OOBFC_TX_IDLEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBFC_TX_IDLEr_BLKACC,5,0,p,OOBFC_TX_IDLEr_OFFSET,0,&(r._oobfc_tx_idle),1)

/*******************************************************************************
 * End of 'OOBFC_TX_IDLEr'
 */




/*******************************************************************************
 * REGISTER:  OOBIF_DEBUG
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBIF_DEBUG.
 */
#define READ_OOBIF_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBIF_DEBUGr_BLKACC,5,0,p,OOBIF_DEBUGr_OFFSET,0,(r._oobif_debug),1)
#define WRITE_OOBIF_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBIF_DEBUGr_BLKACC,5,0,p,OOBIF_DEBUGr_OFFSET,0,&(r._oobif_debug),1)

/*******************************************************************************
 * End of 'OOBIF_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  OOBIF_RX_TEST
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBIF_RX_TEST.
 */
#define READ_OOBIF_RX_TESTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBIF_RX_TESTr_BLKACC,5,0,p,OOBIF_RX_TESTr_OFFSET,0,(r._oobif_rx_test),1)
#define WRITE_OOBIF_RX_TESTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBIF_RX_TESTr_BLKACC,5,0,p,OOBIF_RX_TESTr_OFFSET,0,&(r._oobif_rx_test),1)

/*******************************************************************************
 * End of 'OOBIF_RX_TESTr'
 */




/*******************************************************************************
 * REGISTER:  OOBIF_TX_TEST
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOBIF_TX_TEST.
 */
#define READ_OOBIF_TX_TESTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOBIF_TX_TESTr_BLKACC,5,0,p,OOBIF_TX_TESTr_OFFSET,0,(r._oobif_tx_test),1)
#define WRITE_OOBIF_TX_TESTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOBIF_TX_TESTr_BLKACC,5,0,p,OOBIF_TX_TESTr_OFFSET,0,&(r._oobif_tx_test),1)

/*******************************************************************************
 * End of 'OOBIF_TX_TESTr'
 */




/*******************************************************************************
 * REGISTER:  OOB_STATS_MSG_TX_CNT
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOB_STATS_MSG_TX_CNT.
 */
#define READ_OOB_STATS_MSG_TX_CNTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOB_STATS_MSG_TX_CNTr_BLKACC,5,0,p,OOB_STATS_MSG_TX_CNTr_OFFSET,0,(r._oob_stats_msg_tx_cnt),1)
#define WRITE_OOB_STATS_MSG_TX_CNTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOB_STATS_MSG_TX_CNTr_BLKACC,5,0,p,OOB_STATS_MSG_TX_CNTr_OFFSET,0,&(r._oob_stats_msg_tx_cnt),1)

/*******************************************************************************
 * End of 'OOB_STATS_MSG_TX_CNTr'
 */




/*******************************************************************************
 * REGISTER:  OOB_STATS_STS
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOB_STATS_STS.
 */
#define READ_OOB_STATS_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOB_STATS_STSr_BLKACC,5,0,p,OOB_STATS_STSr_OFFSET,0,(r._oob_stats_sts),1)
#define WRITE_OOB_STATS_STSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOB_STATS_STSr_BLKACC,5,0,p,OOB_STATS_STSr_OFFSET,0,&(r._oob_stats_sts),1)

/*******************************************************************************
 * End of 'OOB_STATS_STSr'
 */




/*******************************************************************************
 * REGISTER:  OOB_STATS_TX_IDLE
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOB_STATS_TX_IDLE.
 */
#define READ_OOB_STATS_TX_IDLEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOB_STATS_TX_IDLEr_BLKACC,5,0,p,OOB_STATS_TX_IDLEr_OFFSET,0,(r._oob_stats_tx_idle),1)
#define WRITE_OOB_STATS_TX_IDLEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOB_STATS_TX_IDLEr_BLKACC,5,0,p,OOB_STATS_TX_IDLEr_OFFSET,0,&(r._oob_stats_tx_idle),1)

/*******************************************************************************
 * End of 'OOB_STATS_TX_IDLEr'
 */




/*******************************************************************************
 * REGISTER:  OOB_STATS_TX_TEST
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access OOB_STATS_TX_TEST.
 */
#define READ_OOB_STATS_TX_TESTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OOB_STATS_TX_TESTr_BLKACC,5,0,p,OOB_STATS_TX_TESTr_OFFSET,0,(r._oob_stats_tx_test),1)
#define WRITE_OOB_STATS_TX_TESTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OOB_STATS_TX_TESTr_BLKACC,5,0,p,OOB_STATS_TX_TESTr_OFFSET,0,&(r._oob_stats_tx_test),1)

/*******************************************************************************
 * End of 'OOB_STATS_TX_TESTr'
 */




/*******************************************************************************
 * REGISTER:  OPP_SCHED_CFG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OPP_SCHED_CFG.
 */
#define READ_OPP_SCHED_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OPP_SCHED_CFGr_BLKACC,4,0,p,OPP_SCHED_CFGr_OFFSET,0,(r._opp_sched_cfg),1)
#define WRITE_OPP_SCHED_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OPP_SCHED_CFGr_BLKACC,4,0,p,OPP_SCHED_CFGr_OFFSET,0,&(r._opp_sched_cfg),1)

/*******************************************************************************
 * End of 'OPP_SCHED_CFGr'
 */




/*******************************************************************************
 * REGISTER:  OP_THDU_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access OP_THDU_CONFIG.
 */
#define READ_OP_THDU_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_THDU_CONFIGr_BLKACC,3,0,p,OP_THDU_CONFIGr_OFFSET,0,(r._op_thdu_config),1)
#define WRITE_OP_THDU_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_THDU_CONFIGr_BLKACC,3,0,p,OP_THDU_CONFIGr_OFFSET,0,&(r._op_thdu_config),1)

/*******************************************************************************
 * End of 'OP_THDU_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_BST_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access OP_UC_PORT_BST_THRESHOLD.
 */
#define READ_OP_UC_PORT_BST_THRESHOLDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_BST_THRESHOLDr_BLKACC,3,0,p,OP_UC_PORT_BST_THRESHOLDr_OFFSET,i,(r._op_uc_port_bst_threshold),1)
#define WRITE_OP_UC_PORT_BST_THRESHOLDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_BST_THRESHOLDr_BLKACC,3,0,p,OP_UC_PORT_BST_THRESHOLDr_OFFSET,i,&(r._op_uc_port_bst_threshold),1)

/*******************************************************************************
 * End of 'OP_UC_PORT_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_DROP_STATE.
 */
#define READ_OP_UC_PORT_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_DROP_STATEr_BLKACC,3,n,p,OP_UC_PORT_DROP_STATEr_OFFSET,i,(r._op_uc_port_drop_state),2)
#define WRITE_OP_UC_PORT_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATEr_BLKACC,3,n,p,OP_UC_PORT_DROP_STATEr_OFFSET,i,&(r._op_uc_port_drop_state),2)
#define WRITE_OP_UC_PORT_DROP_STATEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATEr_BLKACC,3,-1,p,OP_UC_PORT_DROP_STATEr_OFFSET,i,&(r._op_uc_port_drop_state),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE0.
 */
#define READ_OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,(r._op_uc_port_drop_state_mmu_xpe0_epipe0),2)
#define WRITE_OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._op_uc_port_drop_state_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE1.
 */
#define READ_OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,(r._op_uc_port_drop_state_mmu_xpe0_epipe1),2)
#define WRITE_OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._op_uc_port_drop_state_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_DROP_STATE_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE2.
 */
#define READ_OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,(r._op_uc_port_drop_state_mmu_xpe1_epipe2),2)
#define WRITE_OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._op_uc_port_drop_state_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE3.
 */
#define READ_OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,(r._op_uc_port_drop_state_mmu_xpe1_epipe3),2)
#define WRITE_OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._op_uc_port_drop_state_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_DROP_STATE_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE0.
 */
#define READ_OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,(r._op_uc_port_drop_state_mmu_xpe2_epipe0),2)
#define WRITE_OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._op_uc_port_drop_state_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE1.
 */
#define READ_OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,(r._op_uc_port_drop_state_mmu_xpe2_epipe1),2)
#define WRITE_OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._op_uc_port_drop_state_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_DROP_STATE_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE2.
 */
#define READ_OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,(r._op_uc_port_drop_state_mmu_xpe3_epipe2),2)
#define WRITE_OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._op_uc_port_drop_state_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE3.
 */
#define READ_OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,(r._op_uc_port_drop_state_mmu_xpe3_epipe3),2)
#define WRITE_OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._op_uc_port_drop_state_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_DROP_STATE_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_RED_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_RED_DROP_STATE.
 */
#define READ_OP_UC_PORT_RED_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_RED_DROP_STATEr_BLKACC,3,n,p,OP_UC_PORT_RED_DROP_STATEr_OFFSET,i,(r._op_uc_port_red_drop_state),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATEr_BLKACC,3,n,p,OP_UC_PORT_RED_DROP_STATEr_OFFSET,i,&(r._op_uc_port_red_drop_state),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATEr_BLKACC,3,-1,p,OP_UC_PORT_RED_DROP_STATEr_OFFSET,i,&(r._op_uc_port_red_drop_state),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_RED_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE0.
 */
#define READ_OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,(r._op_uc_port_red_drop_state_mmu_xpe0_epipe0),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._op_uc_port_red_drop_state_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE1.
 */
#define READ_OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,(r._op_uc_port_red_drop_state_mmu_xpe0_epipe1),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._op_uc_port_red_drop_state_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_RED_DROP_STATE_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE2.
 */
#define READ_OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,(r._op_uc_port_red_drop_state_mmu_xpe1_epipe2),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._op_uc_port_red_drop_state_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE3.
 */
#define READ_OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,(r._op_uc_port_red_drop_state_mmu_xpe1_epipe3),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._op_uc_port_red_drop_state_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_RED_DROP_STATE_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE0.
 */
#define READ_OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,(r._op_uc_port_red_drop_state_mmu_xpe2_epipe0),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._op_uc_port_red_drop_state_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE1.
 */
#define READ_OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,(r._op_uc_port_red_drop_state_mmu_xpe2_epipe1),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._op_uc_port_red_drop_state_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_RED_DROP_STATE_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE2.
 */
#define READ_OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,(r._op_uc_port_red_drop_state_mmu_xpe3_epipe2),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._op_uc_port_red_drop_state_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE3.
 */
#define READ_OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,(r._op_uc_port_red_drop_state_mmu_xpe3_epipe3),2)
#define WRITE_OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._op_uc_port_red_drop_state_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_RED_DROP_STATE_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_YELLOW_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_YELLOW_DROP_STATE.
 */
#define READ_OP_UC_PORT_YELLOW_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_YELLOW_DROP_STATEr_BLKACC,3,n,p,OP_UC_PORT_YELLOW_DROP_STATEr_OFFSET,i,(r._op_uc_port_yellow_drop_state),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATEr_BLKACC,3,n,p,OP_UC_PORT_YELLOW_DROP_STATEr_OFFSET,i,&(r._op_uc_port_yellow_drop_state),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATEr_BLKACC,3,-1,p,OP_UC_PORT_YELLOW_DROP_STATEr_OFFSET,i,&(r._op_uc_port_yellow_drop_state),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_YELLOW_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0.
 */
#define READ_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,(r._op_uc_port_yellow_drop_state_mmu_xpe0_epipe0),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._op_uc_port_yellow_drop_state_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1.
 */
#define READ_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,(r._op_uc_port_yellow_drop_state_mmu_xpe0_epipe1),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._op_uc_port_yellow_drop_state_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2.
 */
#define READ_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,(r._op_uc_port_yellow_drop_state_mmu_xpe1_epipe2),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._op_uc_port_yellow_drop_state_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3.
 */
#define READ_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,(r._op_uc_port_yellow_drop_state_mmu_xpe1_epipe3),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._op_uc_port_yellow_drop_state_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0.
 */
#define READ_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,(r._op_uc_port_yellow_drop_state_mmu_xpe2_epipe0),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._op_uc_port_yellow_drop_state_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1.
 */
#define READ_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,(r._op_uc_port_yellow_drop_state_mmu_xpe2_epipe1),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._op_uc_port_yellow_drop_state_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2.
 */
#define READ_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,(r._op_uc_port_yellow_drop_state_mmu_xpe3_epipe2),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._op_uc_port_yellow_drop_state_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3.
 */
#define READ_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,(r._op_uc_port_yellow_drop_state_mmu_xpe3_epipe3),2)
#define WRITE_OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._op_uc_port_yellow_drop_state_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_PORT_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_BST_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access OP_UC_QGROUP_BST_THRESHOLD.
 */
#define READ_OP_UC_QGROUP_BST_THRESHOLDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_BST_THRESHOLDr_BLKACC,3,0,p,OP_UC_QGROUP_BST_THRESHOLDr_OFFSET,i,(r._op_uc_qgroup_bst_threshold),1)
#define WRITE_OP_UC_QGROUP_BST_THRESHOLDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_BST_THRESHOLDr_BLKACC,3,0,p,OP_UC_QGROUP_BST_THRESHOLDr_OFFSET,i,&(r._op_uc_qgroup_bst_threshold),1)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_DROP_STATE.
 */
#define READ_OP_UC_QGROUP_DROP_STATEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_DROP_STATEr_BLKACC,3,n,p,OP_UC_QGROUP_DROP_STATEr_OFFSET,0,(r._op_uc_qgroup_drop_state),2)
#define WRITE_OP_UC_QGROUP_DROP_STATEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATEr_BLKACC,3,n,p,OP_UC_QGROUP_DROP_STATEr_OFFSET,0,&(r._op_uc_qgroup_drop_state),2)
#define WRITE_OP_UC_QGROUP_DROP_STATEr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATEr_BLKACC,3,-1,p,OP_UC_QGROUP_DROP_STATEr_OFFSET,0,&(r._op_uc_qgroup_drop_state),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE0.
 */
#define READ_OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,0,(r._op_uc_qgroup_drop_state_mmu_xpe0_epipe0),2)
#define WRITE_OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,0,&(r._op_uc_qgroup_drop_state_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE1.
 */
#define READ_OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,0,(r._op_uc_qgroup_drop_state_mmu_xpe0_epipe1),2)
#define WRITE_OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,0,&(r._op_uc_qgroup_drop_state_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_DROP_STATE_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE2.
 */
#define READ_OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,0,(r._op_uc_qgroup_drop_state_mmu_xpe1_epipe2),2)
#define WRITE_OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,0,&(r._op_uc_qgroup_drop_state_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE3.
 */
#define READ_OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,0,(r._op_uc_qgroup_drop_state_mmu_xpe1_epipe3),2)
#define WRITE_OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,0,&(r._op_uc_qgroup_drop_state_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_DROP_STATE_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE0.
 */
#define READ_OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,0,(r._op_uc_qgroup_drop_state_mmu_xpe2_epipe0),2)
#define WRITE_OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,0,&(r._op_uc_qgroup_drop_state_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE1.
 */
#define READ_OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,0,(r._op_uc_qgroup_drop_state_mmu_xpe2_epipe1),2)
#define WRITE_OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,0,&(r._op_uc_qgroup_drop_state_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_DROP_STATE_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE2.
 */
#define READ_OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,0,(r._op_uc_qgroup_drop_state_mmu_xpe3_epipe2),2)
#define WRITE_OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,0,&(r._op_uc_qgroup_drop_state_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE3.
 */
#define READ_OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,0,(r._op_uc_qgroup_drop_state_mmu_xpe3_epipe3),2)
#define WRITE_OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,0,&(r._op_uc_qgroup_drop_state_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_DROP_STATE_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_RED_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_RED_DROP_STATE.
 */
#define READ_OP_UC_QGROUP_RED_DROP_STATEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_RED_DROP_STATEr_BLKACC,3,n,p,OP_UC_QGROUP_RED_DROP_STATEr_OFFSET,0,(r._op_uc_qgroup_red_drop_state),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATEr_BLKACC,3,n,p,OP_UC_QGROUP_RED_DROP_STATEr_OFFSET,0,&(r._op_uc_qgroup_red_drop_state),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATEr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATEr_BLKACC,3,-1,p,OP_UC_QGROUP_RED_DROP_STATEr_OFFSET,0,&(r._op_uc_qgroup_red_drop_state),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_RED_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE0.
 */
#define READ_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,0,(r._op_uc_qgroup_red_drop_state_mmu_xpe0_epipe0),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,0,&(r._op_uc_qgroup_red_drop_state_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE1.
 */
#define READ_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,0,(r._op_uc_qgroup_red_drop_state_mmu_xpe0_epipe1),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,0,&(r._op_uc_qgroup_red_drop_state_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE2.
 */
#define READ_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,0,(r._op_uc_qgroup_red_drop_state_mmu_xpe1_epipe2),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,0,&(r._op_uc_qgroup_red_drop_state_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE3.
 */
#define READ_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,0,(r._op_uc_qgroup_red_drop_state_mmu_xpe1_epipe3),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,0,&(r._op_uc_qgroup_red_drop_state_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE0.
 */
#define READ_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,0,(r._op_uc_qgroup_red_drop_state_mmu_xpe2_epipe0),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,0,&(r._op_uc_qgroup_red_drop_state_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE1.
 */
#define READ_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,0,(r._op_uc_qgroup_red_drop_state_mmu_xpe2_epipe1),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,0,&(r._op_uc_qgroup_red_drop_state_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE2.
 */
#define READ_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,0,(r._op_uc_qgroup_red_drop_state_mmu_xpe3_epipe2),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,0,&(r._op_uc_qgroup_red_drop_state_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE3.
 */
#define READ_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,0,(r._op_uc_qgroup_red_drop_state_mmu_xpe3_epipe3),2)
#define WRITE_OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,0,&(r._op_uc_qgroup_red_drop_state_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_RED_DROP_STATE_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_YELLOW_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_YELLOW_DROP_STATE.
 */
#define READ_OP_UC_QGROUP_YELLOW_DROP_STATEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_YELLOW_DROP_STATEr_BLKACC,3,n,p,OP_UC_QGROUP_YELLOW_DROP_STATEr_OFFSET,0,(r._op_uc_qgroup_yellow_drop_state),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATEr_BLKACC,3,n,p,OP_UC_QGROUP_YELLOW_DROP_STATEr_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATEr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATEr_BLKACC,3,-1,p,OP_UC_QGROUP_YELLOW_DROP_STATEr_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_YELLOW_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0.
 */
#define READ_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,0,(r._op_uc_qgroup_yellow_drop_state_mmu_xpe0_epipe0),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1.
 */
#define READ_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,0,(r._op_uc_qgroup_yellow_drop_state_mmu_xpe0_epipe1),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2.
 */
#define READ_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,0,(r._op_uc_qgroup_yellow_drop_state_mmu_xpe1_epipe2),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3.
 */
#define READ_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,0,(r._op_uc_qgroup_yellow_drop_state_mmu_xpe1_epipe3),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0.
 */
#define READ_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,0,(r._op_uc_qgroup_yellow_drop_state_mmu_xpe2_epipe0),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1.
 */
#define READ_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,0,(r._op_uc_qgroup_yellow_drop_state_mmu_xpe2_epipe1),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2.
 */
#define READ_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,0,(r._op_uc_qgroup_yellow_drop_state_mmu_xpe3_epipe2),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3.
 */
#define READ_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,0,(r._op_uc_qgroup_yellow_drop_state_mmu_xpe3_epipe3),2)
#define WRITE_OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,0,&(r._op_uc_qgroup_yellow_drop_state_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QGROUP_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_BST_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access OP_UC_QUEUE_BST_THRESHOLD.
 */
#define READ_OP_UC_QUEUE_BST_THRESHOLDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_BST_THRESHOLDr_BLKACC,3,0,p,OP_UC_QUEUE_BST_THRESHOLDr_OFFSET,i,(r._op_uc_queue_bst_threshold),1)
#define WRITE_OP_UC_QUEUE_BST_THRESHOLDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_BST_THRESHOLDr_BLKACC,3,0,p,OP_UC_QUEUE_BST_THRESHOLDr_OFFSET,i,&(r._op_uc_queue_bst_threshold),1)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_BST_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_DROP_STATE.
 */
#define READ_OP_UC_QUEUE_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_DROP_STATEr_BLKACC,3,n,p,OP_UC_QUEUE_DROP_STATEr_OFFSET,i,(r._op_uc_queue_drop_state),2)
#define WRITE_OP_UC_QUEUE_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATEr_BLKACC,3,n,p,OP_UC_QUEUE_DROP_STATEr_OFFSET,i,&(r._op_uc_queue_drop_state),2)
#define WRITE_OP_UC_QUEUE_DROP_STATEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATEr_BLKACC,3,-1,p,OP_UC_QUEUE_DROP_STATEr_OFFSET,i,&(r._op_uc_queue_drop_state),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE0.
 */
#define READ_OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,(r._op_uc_queue_drop_state_mmu_xpe0_epipe0),2)
#define WRITE_OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._op_uc_queue_drop_state_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE1.
 */
#define READ_OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,(r._op_uc_queue_drop_state_mmu_xpe0_epipe1),2)
#define WRITE_OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._op_uc_queue_drop_state_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_DROP_STATE_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE2.
 */
#define READ_OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,(r._op_uc_queue_drop_state_mmu_xpe1_epipe2),2)
#define WRITE_OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._op_uc_queue_drop_state_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE3.
 */
#define READ_OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,(r._op_uc_queue_drop_state_mmu_xpe1_epipe3),2)
#define WRITE_OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._op_uc_queue_drop_state_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_DROP_STATE_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE0.
 */
#define READ_OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,(r._op_uc_queue_drop_state_mmu_xpe2_epipe0),2)
#define WRITE_OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._op_uc_queue_drop_state_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE1.
 */
#define READ_OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,(r._op_uc_queue_drop_state_mmu_xpe2_epipe1),2)
#define WRITE_OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._op_uc_queue_drop_state_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_DROP_STATE_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE2.
 */
#define READ_OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,(r._op_uc_queue_drop_state_mmu_xpe3_epipe2),2)
#define WRITE_OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._op_uc_queue_drop_state_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE3.
 */
#define READ_OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,(r._op_uc_queue_drop_state_mmu_xpe3_epipe3),2)
#define WRITE_OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._op_uc_queue_drop_state_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_DROP_STATE_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_RED_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_RED_DROP_STATE.
 */
#define READ_OP_UC_QUEUE_RED_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_RED_DROP_STATEr_BLKACC,3,n,p,OP_UC_QUEUE_RED_DROP_STATEr_OFFSET,i,(r._op_uc_queue_red_drop_state),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATEr_BLKACC,3,n,p,OP_UC_QUEUE_RED_DROP_STATEr_OFFSET,i,&(r._op_uc_queue_red_drop_state),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATEr_BLKACC,3,-1,p,OP_UC_QUEUE_RED_DROP_STATEr_OFFSET,i,&(r._op_uc_queue_red_drop_state),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_RED_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE0.
 */
#define READ_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,(r._op_uc_queue_red_drop_state_mmu_xpe0_epipe0),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._op_uc_queue_red_drop_state_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE1.
 */
#define READ_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,(r._op_uc_queue_red_drop_state_mmu_xpe0_epipe1),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._op_uc_queue_red_drop_state_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE2.
 */
#define READ_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,(r._op_uc_queue_red_drop_state_mmu_xpe1_epipe2),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._op_uc_queue_red_drop_state_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE3.
 */
#define READ_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,(r._op_uc_queue_red_drop_state_mmu_xpe1_epipe3),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._op_uc_queue_red_drop_state_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE0.
 */
#define READ_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,(r._op_uc_queue_red_drop_state_mmu_xpe2_epipe0),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._op_uc_queue_red_drop_state_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE1.
 */
#define READ_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,(r._op_uc_queue_red_drop_state_mmu_xpe2_epipe1),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._op_uc_queue_red_drop_state_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE2.
 */
#define READ_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,(r._op_uc_queue_red_drop_state_mmu_xpe3_epipe2),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._op_uc_queue_red_drop_state_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE3.
 */
#define READ_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,(r._op_uc_queue_red_drop_state_mmu_xpe3_epipe3),2)
#define WRITE_OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._op_uc_queue_red_drop_state_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_RED_DROP_STATE_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_YELLOW_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_YELLOW_DROP_STATE.
 */
#define READ_OP_UC_QUEUE_YELLOW_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_YELLOW_DROP_STATEr_BLKACC,3,n,p,OP_UC_QUEUE_YELLOW_DROP_STATEr_OFFSET,i,(r._op_uc_queue_yellow_drop_state),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATEr_BLKACC,3,n,p,OP_UC_QUEUE_YELLOW_DROP_STATEr_OFFSET,i,&(r._op_uc_queue_yellow_drop_state),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATEr_BLKACC,3,-1,p,OP_UC_QUEUE_YELLOW_DROP_STATEr_OFFSET,i,&(r._op_uc_queue_yellow_drop_state),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_YELLOW_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0.
 */
#define READ_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,(r._op_uc_queue_yellow_drop_state_mmu_xpe0_epipe0),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r_OFFSET,i,&(r._op_uc_queue_yellow_drop_state_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1.
 */
#define READ_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,(r._op_uc_queue_yellow_drop_state_mmu_xpe0_epipe1),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r_OFFSET,i,&(r._op_uc_queue_yellow_drop_state_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2.
 */
#define READ_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,(r._op_uc_queue_yellow_drop_state_mmu_xpe1_epipe2),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r_OFFSET,i,&(r._op_uc_queue_yellow_drop_state_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3.
 */
#define READ_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,(r._op_uc_queue_yellow_drop_state_mmu_xpe1_epipe3),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r_OFFSET,i,&(r._op_uc_queue_yellow_drop_state_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0.
 */
#define READ_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,(r._op_uc_queue_yellow_drop_state_mmu_xpe2_epipe0),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r_OFFSET,i,&(r._op_uc_queue_yellow_drop_state_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1.
 */
#define READ_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,(r._op_uc_queue_yellow_drop_state_mmu_xpe2_epipe1),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r_OFFSET,i,&(r._op_uc_queue_yellow_drop_state_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2.
 */
#define READ_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,(r._op_uc_queue_yellow_drop_state_mmu_xpe3_epipe2),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r_OFFSET,i,&(r._op_uc_queue_yellow_drop_state_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3.
 */
#define READ_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,(r._op_uc_queue_yellow_drop_state_mmu_xpe3_epipe3),2)
#define WRITE_OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r_OFFSET,i,&(r._op_uc_queue_yellow_drop_state_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'OP_UC_QUEUE_YELLOW_DROP_STATE_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  OVR_SUB_GRP0_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OVR_SUB_GRP0_TBL.
 */
#define READ_OVR_SUB_GRP0_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OVR_SUB_GRP0_TBLr_BLKACC,4,0,p,OVR_SUB_GRP0_TBLr_OFFSET,i,(r._ovr_sub_grp0_tbl),1)
#define WRITE_OVR_SUB_GRP0_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OVR_SUB_GRP0_TBLr_BLKACC,4,0,p,OVR_SUB_GRP0_TBLr_OFFSET,i,&(r._ovr_sub_grp0_tbl),1)

/*******************************************************************************
 * End of 'OVR_SUB_GRP0_TBLr'
 */




/*******************************************************************************
 * REGISTER:  OVR_SUB_GRP1_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OVR_SUB_GRP1_TBL.
 */
#define READ_OVR_SUB_GRP1_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OVR_SUB_GRP1_TBLr_BLKACC,4,0,p,OVR_SUB_GRP1_TBLr_OFFSET,i,(r._ovr_sub_grp1_tbl),1)
#define WRITE_OVR_SUB_GRP1_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OVR_SUB_GRP1_TBLr_BLKACC,4,0,p,OVR_SUB_GRP1_TBLr_OFFSET,i,&(r._ovr_sub_grp1_tbl),1)

/*******************************************************************************
 * End of 'OVR_SUB_GRP1_TBLr'
 */




/*******************************************************************************
 * REGISTER:  OVR_SUB_GRP2_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OVR_SUB_GRP2_TBL.
 */
#define READ_OVR_SUB_GRP2_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OVR_SUB_GRP2_TBLr_BLKACC,4,0,p,OVR_SUB_GRP2_TBLr_OFFSET,i,(r._ovr_sub_grp2_tbl),1)
#define WRITE_OVR_SUB_GRP2_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OVR_SUB_GRP2_TBLr_BLKACC,4,0,p,OVR_SUB_GRP2_TBLr_OFFSET,i,&(r._ovr_sub_grp2_tbl),1)

/*******************************************************************************
 * End of 'OVR_SUB_GRP2_TBLr'
 */




/*******************************************************************************
 * REGISTER:  OVR_SUB_GRP3_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OVR_SUB_GRP3_TBL.
 */
#define READ_OVR_SUB_GRP3_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OVR_SUB_GRP3_TBLr_BLKACC,4,0,p,OVR_SUB_GRP3_TBLr_OFFSET,i,(r._ovr_sub_grp3_tbl),1)
#define WRITE_OVR_SUB_GRP3_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OVR_SUB_GRP3_TBLr_BLKACC,4,0,p,OVR_SUB_GRP3_TBLr_OFFSET,i,&(r._ovr_sub_grp3_tbl),1)

/*******************************************************************************
 * End of 'OVR_SUB_GRP3_TBLr'
 */




/*******************************************************************************
 * REGISTER:  OVR_SUB_GRP4_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OVR_SUB_GRP4_TBL.
 */
#define READ_OVR_SUB_GRP4_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OVR_SUB_GRP4_TBLr_BLKACC,4,0,p,OVR_SUB_GRP4_TBLr_OFFSET,i,(r._ovr_sub_grp4_tbl),1)
#define WRITE_OVR_SUB_GRP4_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OVR_SUB_GRP4_TBLr_BLKACC,4,0,p,OVR_SUB_GRP4_TBLr_OFFSET,i,&(r._ovr_sub_grp4_tbl),1)

/*******************************************************************************
 * End of 'OVR_SUB_GRP4_TBLr'
 */




/*******************************************************************************
 * REGISTER:  OVR_SUB_GRP5_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OVR_SUB_GRP5_TBL.
 */
#define READ_OVR_SUB_GRP5_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OVR_SUB_GRP5_TBLr_BLKACC,4,0,p,OVR_SUB_GRP5_TBLr_OFFSET,i,(r._ovr_sub_grp5_tbl),1)
#define WRITE_OVR_SUB_GRP5_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OVR_SUB_GRP5_TBLr_BLKACC,4,0,p,OVR_SUB_GRP5_TBLr_OFFSET,i,&(r._ovr_sub_grp5_tbl),1)

/*******************************************************************************
 * End of 'OVR_SUB_GRP5_TBLr'
 */




/*******************************************************************************
 * REGISTER:  OVR_SUB_GRP6_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OVR_SUB_GRP6_TBL.
 */
#define READ_OVR_SUB_GRP6_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OVR_SUB_GRP6_TBLr_BLKACC,4,0,p,OVR_SUB_GRP6_TBLr_OFFSET,i,(r._ovr_sub_grp6_tbl),1)
#define WRITE_OVR_SUB_GRP6_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OVR_SUB_GRP6_TBLr_BLKACC,4,0,p,OVR_SUB_GRP6_TBLr_OFFSET,i,&(r._ovr_sub_grp6_tbl),1)

/*******************************************************************************
 * End of 'OVR_SUB_GRP6_TBLr'
 */




/*******************************************************************************
 * REGISTER:  OVR_SUB_GRP7_TBL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OVR_SUB_GRP7_TBL.
 */
#define READ_OVR_SUB_GRP7_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OVR_SUB_GRP7_TBLr_BLKACC,4,0,p,OVR_SUB_GRP7_TBLr_OFFSET,i,(r._ovr_sub_grp7_tbl),1)
#define WRITE_OVR_SUB_GRP7_TBLr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OVR_SUB_GRP7_TBLr_BLKACC,4,0,p,OVR_SUB_GRP7_TBLr_OFFSET,i,&(r._ovr_sub_grp7_tbl),1)

/*******************************************************************************
 * End of 'OVR_SUB_GRP7_TBLr'
 */




/*******************************************************************************
 * REGISTER:  OVR_SUB_GRP_CFG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access OVR_SUB_GRP_CFG.
 */
#define READ_OVR_SUB_GRP_CFGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,OVR_SUB_GRP_CFGr_BLKACC,4,0,p,OVR_SUB_GRP_CFGr_OFFSET,i,(r._ovr_sub_grp_cfg),1)
#define WRITE_OVR_SUB_GRP_CFGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,OVR_SUB_GRP_CFGr_BLKACC,4,0,p,OVR_SUB_GRP_CFGr_OFFSET,i,&(r._ovr_sub_grp_cfg),1)

/*******************************************************************************
 * End of 'OVR_SUB_GRP_CFGr'
 */




/*******************************************************************************
 * REGISTER:  PARS_RAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PARS_RAM_DBGCTRL.
 */
#define READ_PARS_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,PARS_RAM_DBGCTRLr_BLKACC,1,n,0,PARS_RAM_DBGCTRLr_OFFSET,0,(r._pars_ram_dbgctrl),2)
#define WRITE_PARS_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,PARS_RAM_DBGCTRLr_BLKACC,1,n,0,PARS_RAM_DBGCTRLr_OFFSET,0,&(r._pars_ram_dbgctrl),2)
#define WRITE_PARS_RAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,PARS_RAM_DBGCTRLr_BLKACC,1,-1,0,PARS_RAM_DBGCTRLr_OFFSET,0,&(r._pars_ram_dbgctrl),2)

/*******************************************************************************
 * End of 'PARS_RAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  PARS_RAM_DBGCTRL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PARS_RAM_DBGCTRL_1.
 */
#define READ_PARS_RAM_DBGCTRL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,PARS_RAM_DBGCTRL_1r_BLKACC,1,n,0,PARS_RAM_DBGCTRL_1r_OFFSET,0,(r._pars_ram_dbgctrl_1),2)
#define WRITE_PARS_RAM_DBGCTRL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,PARS_RAM_DBGCTRL_1r_BLKACC,1,n,0,PARS_RAM_DBGCTRL_1r_OFFSET,0,&(r._pars_ram_dbgctrl_1),2)
#define WRITE_PARS_RAM_DBGCTRL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,PARS_RAM_DBGCTRL_1r_BLKACC,1,-1,0,PARS_RAM_DBGCTRL_1r_OFFSET,0,&(r._pars_ram_dbgctrl_1),2)

/*******************************************************************************
 * End of 'PARS_RAM_DBGCTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  PARS_RAM_DBGCTRL_2_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PARS_RAM_DBGCTRL_2_64.
 */
#define READ_PARS_RAM_DBGCTRL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,PARS_RAM_DBGCTRL_2_64r_BLKACC,1,n,0,PARS_RAM_DBGCTRL_2_64r_OFFSET,0,(r._pars_ram_dbgctrl_2_64),2)
#define WRITE_PARS_RAM_DBGCTRL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,PARS_RAM_DBGCTRL_2_64r_BLKACC,1,n,0,PARS_RAM_DBGCTRL_2_64r_OFFSET,0,&(r._pars_ram_dbgctrl_2_64),2)
#define WRITE_PARS_RAM_DBGCTRL_2_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,PARS_RAM_DBGCTRL_2_64r_BLKACC,1,-1,0,PARS_RAM_DBGCTRL_2_64r_OFFSET,0,&(r._pars_ram_dbgctrl_2_64),2)

/*******************************************************************************
 * End of 'PARS_RAM_DBGCTRL_2_64r'
 */




/*******************************************************************************
 * REGISTER:  PBLK0_CALENDAR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PBLK0_CALENDAR.
 */
#define READ_PBLK0_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PBLK0_CALENDARr_BLKACC,4,0,p,PBLK0_CALENDARr_OFFSET,i,(r._pblk0_calendar),1)
#define WRITE_PBLK0_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PBLK0_CALENDARr_BLKACC,4,0,p,PBLK0_CALENDARr_OFFSET,i,&(r._pblk0_calendar),1)

/*******************************************************************************
 * End of 'PBLK0_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  PBLK1_CALENDAR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PBLK1_CALENDAR.
 */
#define READ_PBLK1_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PBLK1_CALENDARr_BLKACC,4,0,p,PBLK1_CALENDARr_OFFSET,i,(r._pblk1_calendar),1)
#define WRITE_PBLK1_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PBLK1_CALENDARr_BLKACC,4,0,p,PBLK1_CALENDARr_OFFSET,i,&(r._pblk1_calendar),1)

/*******************************************************************************
 * End of 'PBLK1_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  PBLK2_CALENDAR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PBLK2_CALENDAR.
 */
#define READ_PBLK2_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PBLK2_CALENDARr_BLKACC,4,0,p,PBLK2_CALENDARr_OFFSET,i,(r._pblk2_calendar),1)
#define WRITE_PBLK2_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PBLK2_CALENDARr_BLKACC,4,0,p,PBLK2_CALENDARr_OFFSET,i,&(r._pblk2_calendar),1)

/*******************************************************************************
 * End of 'PBLK2_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  PBLK3_CALENDAR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PBLK3_CALENDAR.
 */
#define READ_PBLK3_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PBLK3_CALENDARr_BLKACC,4,0,p,PBLK3_CALENDARr_OFFSET,i,(r._pblk3_calendar),1)
#define WRITE_PBLK3_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PBLK3_CALENDARr_BLKACC,4,0,p,PBLK3_CALENDARr_OFFSET,i,&(r._pblk3_calendar),1)

/*******************************************************************************
 * End of 'PBLK3_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  PBLK4_CALENDAR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PBLK4_CALENDAR.
 */
#define READ_PBLK4_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PBLK4_CALENDARr_BLKACC,4,0,p,PBLK4_CALENDARr_OFFSET,i,(r._pblk4_calendar),1)
#define WRITE_PBLK4_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PBLK4_CALENDARr_BLKACC,4,0,p,PBLK4_CALENDARr_OFFSET,i,&(r._pblk4_calendar),1)

/*******************************************************************************
 * End of 'PBLK4_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  PBLK5_CALENDAR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PBLK5_CALENDAR.
 */
#define READ_PBLK5_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PBLK5_CALENDARr_BLKACC,4,0,p,PBLK5_CALENDARr_OFFSET,i,(r._pblk5_calendar),1)
#define WRITE_PBLK5_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PBLK5_CALENDARr_BLKACC,4,0,p,PBLK5_CALENDARr_OFFSET,i,&(r._pblk5_calendar),1)

/*******************************************************************************
 * End of 'PBLK5_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  PBLK6_CALENDAR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PBLK6_CALENDAR.
 */
#define READ_PBLK6_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PBLK6_CALENDARr_BLKACC,4,0,p,PBLK6_CALENDARr_OFFSET,i,(r._pblk6_calendar),1)
#define WRITE_PBLK6_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PBLK6_CALENDARr_BLKACC,4,0,p,PBLK6_CALENDARr_OFFSET,i,&(r._pblk6_calendar),1)

/*******************************************************************************
 * End of 'PBLK6_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  PBLK7_CALENDAR
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PBLK7_CALENDAR.
 */
#define READ_PBLK7_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PBLK7_CALENDARr_BLKACC,4,0,p,PBLK7_CALENDARr_OFFSET,i,(r._pblk7_calendar),1)
#define WRITE_PBLK7_CALENDARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PBLK7_CALENDARr_BLKACC,4,0,p,PBLK7_CALENDARr_OFFSET,i,&(r._pblk7_calendar),1)

/*******************************************************************************
 * End of 'PBLK7_CALENDARr'
 */




/*******************************************************************************
 * REGISTER:  PE_ETHERTYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PE_ETHERTYPE.
 */
#define READ_PE_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_read(u,PE_ETHERTYPEr_BLKACC,1,PE_ETHERTYPEr_OFFSET,0,(r._pe_ethertype), 1)
#define WRITE_PE_ETHERTYPEr(u,r) bcmbd_cmicd_reg_block_write(u,PE_ETHERTYPEr_BLKACC,1,PE_ETHERTYPEr_OFFSET,0,&(r._pe_ethertype), 1)

/*******************************************************************************
 * End of 'PE_ETHERTYPEr'
 */




/*******************************************************************************
 * MEMORY:  PHB2_COS_MAP
 * BLOCKS:   IPIPE
 * SIZE:     9
 */
/*
 * These macros can be used to access PHB2_COS_MAP.
 */
#define READ_PHB2_COS_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(PHB2_COS_MAPm_BLKACC)+1,PHB2_COS_MAPm_OFFSET+i,(m._phb2_cos_map),1)
#define WRITE_PHB2_COS_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(PHB2_COS_MAPm_BLKACC)+1,PHB2_COS_MAPm_OFFSET+i,&(m._phb2_cos_map),1)

/*******************************************************************************
 * End of 'PHB2_COS_MAPm'
 */




/*******************************************************************************
 * REGISTER:  PIPEMEMHI_DEBUG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PIPEMEMHI_DEBUG.
 */
#define READ_PIPEMEMHI_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PIPEMEMHI_DEBUGr_BLKACC,3,0,p,PIPEMEMHI_DEBUGr_OFFSET,0,(r._pipememhi_debug),1)
#define WRITE_PIPEMEMHI_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PIPEMEMHI_DEBUGr_BLKACC,3,0,p,PIPEMEMHI_DEBUGr_OFFSET,0,&(r._pipememhi_debug),1)

/*******************************************************************************
 * End of 'PIPEMEMHI_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  PIPEMEMLO_DEBUG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PIPEMEMLO_DEBUG.
 */
#define READ_PIPEMEMLO_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PIPEMEMLO_DEBUGr_BLKACC,3,0,p,PIPEMEMLO_DEBUGr_OFFSET,0,(r._pipememlo_debug),1)
#define WRITE_PIPEMEMLO_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PIPEMEMLO_DEBUGr_BLKACC,3,0,p,PIPEMEMLO_DEBUGr_OFFSET,0,&(r._pipememlo_debug),1)

/*******************************************************************************
 * End of 'PIPEMEMLO_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  PKTHDRMEMDEBUG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PKTHDRMEMDEBUG.
 */
#define READ_PKTHDRMEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PKTHDRMEMDEBUGr_BLKACC,3,0,p,PKTHDRMEMDEBUGr_OFFSET,0,(r._pkthdrmemdebug),1)
#define WRITE_PKTHDRMEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PKTHDRMEMDEBUGr_BLKACC,3,0,p,PKTHDRMEMDEBUGr_OFFSET,0,&(r._pkthdrmemdebug),1)

/*******************************************************************************
 * End of 'PKTHDRMEMDEBUGr'
 */




/*******************************************************************************
 * REGISTER:  PKT_LINK_MEM_DEBUG_TM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PKT_LINK_MEM_DEBUG_TM.
 */
#define READ_PKT_LINK_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PKT_LINK_MEM_DEBUG_TMr_BLKACC,4,0,p,PKT_LINK_MEM_DEBUG_TMr_OFFSET,0,(r._pkt_link_mem_debug_tm),1)
#define WRITE_PKT_LINK_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PKT_LINK_MEM_DEBUG_TMr_BLKACC,4,0,p,PKT_LINK_MEM_DEBUG_TMr_OFFSET,0,&(r._pkt_link_mem_debug_tm),1)

/*******************************************************************************
 * End of 'PKT_LINK_MEM_DEBUG_TMr'
 */




/*******************************************************************************
 * REGISTER:  PORTCNTMEMDEBUG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PORTCNTMEMDEBUG.
 */
#define READ_PORTCNTMEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PORTCNTMEMDEBUGr_BLKACC,3,0,p,PORTCNTMEMDEBUGr_OFFSET,0,(r._portcntmemdebug),1)
#define WRITE_PORTCNTMEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PORTCNTMEMDEBUGr_BLKACC,3,0,p,PORTCNTMEMDEBUGr_OFFSET,0,&(r._portcntmemdebug),1)

/*******************************************************************************
 * End of 'PORTCNTMEMDEBUGr'
 */




/*******************************************************************************
 * MEMORY:  PORT_BRIDGE_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access PORT_BRIDGE_BMAP.
 */
#define READ_PORT_BRIDGE_BMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_BRIDGE_BMAPm_BLKACC)+1,PORT_BRIDGE_BMAPm_OFFSET+i,(m._port_bridge_bmap),5)
#define WRITE_PORT_BRIDGE_BMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_BRIDGE_BMAPm_BLKACC)+1,PORT_BRIDGE_BMAPm_OFFSET+i,&(m._port_bridge_bmap),5)

/*******************************************************************************
 * End of 'PORT_BRIDGE_BMAPm'
 */




/*******************************************************************************
 * MEMORY:  PORT_BRIDGE_MIRROR_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     136
 */
/*
 * These macros can be used to access PORT_BRIDGE_MIRROR_BMAP.
 */
#define READ_PORT_BRIDGE_MIRROR_BMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_BRIDGE_MIRROR_BMAPm_BLKACC)+1,PORT_BRIDGE_MIRROR_BMAPm_OFFSET+i,(m._port_bridge_mirror_bmap),5)
#define WRITE_PORT_BRIDGE_MIRROR_BMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_BRIDGE_MIRROR_BMAPm_BLKACC)+1,PORT_BRIDGE_MIRROR_BMAPm_OFFSET+i,&(m._port_bridge_mirror_bmap),5)

/*******************************************************************************
 * End of 'PORT_BRIDGE_MIRROR_BMAPm'
 */




/*******************************************************************************
 * MEMORY:  PORT_CBL_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access PORT_CBL_TABLE.
 */
#define READ_PORT_CBL_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_CBL_TABLEm_BLKACC)+1,PORT_CBL_TABLEm_OFFSET+i,(m._port_cbl_table),1)
#define WRITE_PORT_CBL_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_CBL_TABLEm_BLKACC)+1,PORT_CBL_TABLEm_OFFSET+i,&(m._port_cbl_table),1)

/*******************************************************************************
 * End of 'PORT_CBL_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  PORT_CBL_TABLE_MODBASE
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access PORT_CBL_TABLE_MODBASE.
 */
#define READ_PORT_CBL_TABLE_MODBASEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_CBL_TABLE_MODBASEm_BLKACC)+1,PORT_CBL_TABLE_MODBASEm_OFFSET+i,(m._port_cbl_table_modbase),1)
#define WRITE_PORT_CBL_TABLE_MODBASEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_CBL_TABLE_MODBASEm_BLKACC)+1,PORT_CBL_TABLE_MODBASEm_OFFSET+i,&(m._port_cbl_table_modbase),1)

/*******************************************************************************
 * End of 'PORT_CBL_TABLE_MODBASEm'
 */




/*******************************************************************************
 * MEMORY:  PORT_COS_MAP
 * BLOCKS:   IPIPE
 * SIZE:     12
 */
/*
 * These macros can be used to access PORT_COS_MAP.
 */
#define READ_PORT_COS_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_COS_MAPm_BLKACC)+1,PORT_COS_MAPm_OFFSET+i,(m._port_cos_map),1)
#define WRITE_PORT_COS_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_COS_MAPm_BLKACC)+1,PORT_COS_MAPm_OFFSET+i,&(m._port_cos_map),1)

/*******************************************************************************
 * End of 'PORT_COS_MAPm'
 */




/*******************************************************************************
 * REGISTER:  PORT_INITIAL_COPY_COUNT_WIDTH
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PORT_INITIAL_COPY_COUNT_WIDTH.
 */
#define READ_PORT_INITIAL_COPY_COUNT_WIDTHr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PORT_INITIAL_COPY_COUNT_WIDTHr_BLKACC,3,0,p,PORT_INITIAL_COPY_COUNT_WIDTHr_OFFSET,0,(r._port_initial_copy_count_width),1)
#define WRITE_PORT_INITIAL_COPY_COUNT_WIDTHr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PORT_INITIAL_COPY_COUNT_WIDTHr_BLKACC,3,0,p,PORT_INITIAL_COPY_COUNT_WIDTHr_OFFSET,0,&(r._port_initial_copy_count_width),1)

/*******************************************************************************
 * End of 'PORT_INITIAL_COPY_COUNT_WIDTHr'
 */




/*******************************************************************************
 * MEMORY:  PORT_LAG_FAILOVER_SET
 * BLOCKS:   IPIPE
 * SIZE:     135
 */
/*
 * These macros can be used to access PORT_LAG_FAILOVER_SET.
 */
#define READ_PORT_LAG_FAILOVER_SETm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_LAG_FAILOVER_SETm_BLKACC)+1,PORT_LAG_FAILOVER_SETm_OFFSET+i,(m._port_lag_failover_set),5)
#define WRITE_PORT_LAG_FAILOVER_SETm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_LAG_FAILOVER_SETm_BLKACC)+1,PORT_LAG_FAILOVER_SETm_OFFSET+i,&(m._port_lag_failover_set),5)

/*******************************************************************************
 * End of 'PORT_LAG_FAILOVER_SETm'
 */




/*******************************************************************************
 * REGISTER:  PORT_LLFC_CFG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PORT_LLFC_CFG.
 */
#define READ_PORT_LLFC_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PORT_LLFC_CFGr_BLKACC,4,0,p,PORT_LLFC_CFGr_OFFSET,0,(r._port_llfc_cfg),1)
#define WRITE_PORT_LLFC_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PORT_LLFC_CFGr_BLKACC,4,0,p,PORT_LLFC_CFGr_OFFSET,0,&(r._port_llfc_cfg),1)

/*******************************************************************************
 * End of 'PORT_LLFC_CFGr'
 */




/*******************************************************************************
 * MEMORY:  PORT_TAB
 * BLOCKS:   IPIPE
 * SIZE:     424
 */
/*
 * These macros can be used to access PORT_TAB.
 */
#define READ_PORT_TABm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_TABm_BLKACC)+1,PORT_TABm_OFFSET+i,(m._port_tab),14)
#define WRITE_PORT_TABm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(PORT_TABm_BLKACC)+1,PORT_TABm_OFFSET+i,&(m._port_tab),14)

/*******************************************************************************
 * End of 'PORT_TABm'
 */




/*******************************************************************************
 * REGISTER:  PQE0_FIFOEMPTY0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE0_FIFOEMPTY0.
 */
#define READ_PQE0_FIFOEMPTY0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE0_FIFOEMPTY0r_BLKACC,3,0,p,PQE0_FIFOEMPTY0r_OFFSET,0,(r._pqe0_fifoempty0),1)
#define WRITE_PQE0_FIFOEMPTY0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE0_FIFOEMPTY0r_BLKACC,3,0,p,PQE0_FIFOEMPTY0r_OFFSET,0,&(r._pqe0_fifoempty0),1)

/*******************************************************************************
 * End of 'PQE0_FIFOEMPTY0r'
 */




/*******************************************************************************
 * REGISTER:  PQE0_FIFOEMPTY1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE0_FIFOEMPTY1.
 */
#define READ_PQE0_FIFOEMPTY1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE0_FIFOEMPTY1r_BLKACC,3,0,p,PQE0_FIFOEMPTY1r_OFFSET,0,(r._pqe0_fifoempty1),1)
#define WRITE_PQE0_FIFOEMPTY1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE0_FIFOEMPTY1r_BLKACC,3,0,p,PQE0_FIFOEMPTY1r_OFFSET,0,&(r._pqe0_fifoempty1),1)

/*******************************************************************************
 * End of 'PQE0_FIFOEMPTY1r'
 */




/*******************************************************************************
 * REGISTER:  PQE0_FIFOOVERFLOW0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE0_FIFOOVERFLOW0.
 */
#define READ_PQE0_FIFOOVERFLOW0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE0_FIFOOVERFLOW0r_BLKACC,3,0,p,PQE0_FIFOOVERFLOW0r_OFFSET,0,(r._pqe0_fifooverflow0),1)
#define WRITE_PQE0_FIFOOVERFLOW0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE0_FIFOOVERFLOW0r_BLKACC,3,0,p,PQE0_FIFOOVERFLOW0r_OFFSET,0,&(r._pqe0_fifooverflow0),1)

/*******************************************************************************
 * End of 'PQE0_FIFOOVERFLOW0r'
 */




/*******************************************************************************
 * REGISTER:  PQE0_FIFOOVERFLOW1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE0_FIFOOVERFLOW1.
 */
#define READ_PQE0_FIFOOVERFLOW1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE0_FIFOOVERFLOW1r_BLKACC,3,0,p,PQE0_FIFOOVERFLOW1r_OFFSET,0,(r._pqe0_fifooverflow1),1)
#define WRITE_PQE0_FIFOOVERFLOW1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE0_FIFOOVERFLOW1r_BLKACC,3,0,p,PQE0_FIFOOVERFLOW1r_OFFSET,0,&(r._pqe0_fifooverflow1),1)

/*******************************************************************************
 * End of 'PQE0_FIFOOVERFLOW1r'
 */




/*******************************************************************************
 * REGISTER:  PQE0_FIFOPTREQUAL0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE0_FIFOPTREQUAL0.
 */
#define READ_PQE0_FIFOPTREQUAL0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE0_FIFOPTREQUAL0r_BLKACC,3,0,p,PQE0_FIFOPTREQUAL0r_OFFSET,0,(r._pqe0_fifoptrequal0),1)
#define WRITE_PQE0_FIFOPTREQUAL0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE0_FIFOPTREQUAL0r_BLKACC,3,0,p,PQE0_FIFOPTREQUAL0r_OFFSET,0,&(r._pqe0_fifoptrequal0),1)

/*******************************************************************************
 * End of 'PQE0_FIFOPTREQUAL0r'
 */




/*******************************************************************************
 * REGISTER:  PQE0_FIFOPTREQUAL1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE0_FIFOPTREQUAL1.
 */
#define READ_PQE0_FIFOPTREQUAL1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE0_FIFOPTREQUAL1r_BLKACC,3,0,p,PQE0_FIFOPTREQUAL1r_OFFSET,0,(r._pqe0_fifoptrequal1),1)
#define WRITE_PQE0_FIFOPTREQUAL1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE0_FIFOPTREQUAL1r_BLKACC,3,0,p,PQE0_FIFOPTREQUAL1r_OFFSET,0,&(r._pqe0_fifoptrequal1),1)

/*******************************************************************************
 * End of 'PQE0_FIFOPTREQUAL1r'
 */




/*******************************************************************************
 * REGISTER:  PQE0_MEMCFG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE0_MEMCFG.
 */
#define READ_PQE0_MEMCFGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE0_MEMCFGr_BLKACC,3,0,p,PQE0_MEMCFGr_OFFSET,0,(r._pqe0_memcfg),1)
#define WRITE_PQE0_MEMCFGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE0_MEMCFGr_BLKACC,3,0,p,PQE0_MEMCFGr_OFFSET,0,&(r._pqe0_memcfg),1)

/*******************************************************************************
 * End of 'PQE0_MEMCFGr'
 */




/*******************************************************************************
 * REGISTER:  PQE0_MEMDEBUG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE0_MEMDEBUG.
 */
#define READ_PQE0_MEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE0_MEMDEBUGr_BLKACC,3,0,p,PQE0_MEMDEBUGr_OFFSET,0,(r._pqe0_memdebug),1)
#define WRITE_PQE0_MEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE0_MEMDEBUGr_BLKACC,3,0,p,PQE0_MEMDEBUGr_OFFSET,0,&(r._pqe0_memdebug),1)

/*******************************************************************************
 * End of 'PQE0_MEMDEBUGr'
 */




/*******************************************************************************
 * REGISTER:  PQE1_FIFOEMPTY0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE1_FIFOEMPTY0.
 */
#define READ_PQE1_FIFOEMPTY0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE1_FIFOEMPTY0r_BLKACC,3,0,p,PQE1_FIFOEMPTY0r_OFFSET,0,(r._pqe1_fifoempty0),1)
#define WRITE_PQE1_FIFOEMPTY0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE1_FIFOEMPTY0r_BLKACC,3,0,p,PQE1_FIFOEMPTY0r_OFFSET,0,&(r._pqe1_fifoempty0),1)

/*******************************************************************************
 * End of 'PQE1_FIFOEMPTY0r'
 */




/*******************************************************************************
 * REGISTER:  PQE1_FIFOEMPTY1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE1_FIFOEMPTY1.
 */
#define READ_PQE1_FIFOEMPTY1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE1_FIFOEMPTY1r_BLKACC,3,0,p,PQE1_FIFOEMPTY1r_OFFSET,0,(r._pqe1_fifoempty1),1)
#define WRITE_PQE1_FIFOEMPTY1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE1_FIFOEMPTY1r_BLKACC,3,0,p,PQE1_FIFOEMPTY1r_OFFSET,0,&(r._pqe1_fifoempty1),1)

/*******************************************************************************
 * End of 'PQE1_FIFOEMPTY1r'
 */




/*******************************************************************************
 * REGISTER:  PQE1_FIFOOVERFLOW0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE1_FIFOOVERFLOW0.
 */
#define READ_PQE1_FIFOOVERFLOW0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE1_FIFOOVERFLOW0r_BLKACC,3,0,p,PQE1_FIFOOVERFLOW0r_OFFSET,0,(r._pqe1_fifooverflow0),1)
#define WRITE_PQE1_FIFOOVERFLOW0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE1_FIFOOVERFLOW0r_BLKACC,3,0,p,PQE1_FIFOOVERFLOW0r_OFFSET,0,&(r._pqe1_fifooverflow0),1)

/*******************************************************************************
 * End of 'PQE1_FIFOOVERFLOW0r'
 */




/*******************************************************************************
 * REGISTER:  PQE1_FIFOOVERFLOW1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE1_FIFOOVERFLOW1.
 */
#define READ_PQE1_FIFOOVERFLOW1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE1_FIFOOVERFLOW1r_BLKACC,3,0,p,PQE1_FIFOOVERFLOW1r_OFFSET,0,(r._pqe1_fifooverflow1),1)
#define WRITE_PQE1_FIFOOVERFLOW1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE1_FIFOOVERFLOW1r_BLKACC,3,0,p,PQE1_FIFOOVERFLOW1r_OFFSET,0,&(r._pqe1_fifooverflow1),1)

/*******************************************************************************
 * End of 'PQE1_FIFOOVERFLOW1r'
 */




/*******************************************************************************
 * REGISTER:  PQE1_FIFOPTREQUAL0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE1_FIFOPTREQUAL0.
 */
#define READ_PQE1_FIFOPTREQUAL0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE1_FIFOPTREQUAL0r_BLKACC,3,0,p,PQE1_FIFOPTREQUAL0r_OFFSET,0,(r._pqe1_fifoptrequal0),1)
#define WRITE_PQE1_FIFOPTREQUAL0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE1_FIFOPTREQUAL0r_BLKACC,3,0,p,PQE1_FIFOPTREQUAL0r_OFFSET,0,&(r._pqe1_fifoptrequal0),1)

/*******************************************************************************
 * End of 'PQE1_FIFOPTREQUAL0r'
 */




/*******************************************************************************
 * REGISTER:  PQE1_FIFOPTREQUAL1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE1_FIFOPTREQUAL1.
 */
#define READ_PQE1_FIFOPTREQUAL1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE1_FIFOPTREQUAL1r_BLKACC,3,0,p,PQE1_FIFOPTREQUAL1r_OFFSET,0,(r._pqe1_fifoptrequal1),1)
#define WRITE_PQE1_FIFOPTREQUAL1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE1_FIFOPTREQUAL1r_BLKACC,3,0,p,PQE1_FIFOPTREQUAL1r_OFFSET,0,&(r._pqe1_fifoptrequal1),1)

/*******************************************************************************
 * End of 'PQE1_FIFOPTREQUAL1r'
 */




/*******************************************************************************
 * REGISTER:  PQE1_MEMCFG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE1_MEMCFG.
 */
#define READ_PQE1_MEMCFGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE1_MEMCFGr_BLKACC,3,0,p,PQE1_MEMCFGr_OFFSET,0,(r._pqe1_memcfg),1)
#define WRITE_PQE1_MEMCFGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE1_MEMCFGr_BLKACC,3,0,p,PQE1_MEMCFGr_OFFSET,0,&(r._pqe1_memcfg),1)

/*******************************************************************************
 * End of 'PQE1_MEMCFGr'
 */




/*******************************************************************************
 * REGISTER:  PQE1_MEMDEBUG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE1_MEMDEBUG.
 */
#define READ_PQE1_MEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PQE1_MEMDEBUGr_BLKACC,3,0,p,PQE1_MEMDEBUGr_OFFSET,0,(r._pqe1_memdebug),1)
#define WRITE_PQE1_MEMDEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PQE1_MEMDEBUGr_BLKACC,3,0,p,PQE1_MEMDEBUGr_OFFSET,0,&(r._pqe1_memdebug),1)

/*******************************************************************************
 * End of 'PQE1_MEMDEBUGr'
 */




/*******************************************************************************
 * REGISTER:  PQE_MEMCFG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE_MEMCFG.
 */
#define READ_PQE_MEMCFGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PQE_MEMCFGr_BLKACC,3,0,p,PQE_MEMCFGr_OFFSET,(i)*16,(r._pqe_memcfg),1)
#define WRITE_PQE_MEMCFGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PQE_MEMCFGr_BLKACC,3,0,p,PQE_MEMCFGr_OFFSET,(i)*16,&(r._pqe_memcfg),1)

/*******************************************************************************
 * End of 'PQE_MEMCFGr'
 */




/*******************************************************************************
 * REGISTER:  PQE_MEMDEBUG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PQE_MEMDEBUG.
 */
#define READ_PQE_MEMDEBUGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PQE_MEMDEBUGr_BLKACC,3,0,p,PQE_MEMDEBUGr_OFFSET,(i)*16,(r._pqe_memdebug),1)
#define WRITE_PQE_MEMDEBUGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PQE_MEMDEBUGr_BLKACC,3,0,p,PQE_MEMDEBUGr_OFFSET,(i)*16,&(r._pqe_memdebug),1)

/*******************************************************************************
 * End of 'PQE_MEMDEBUGr'
 */




/*******************************************************************************
 * REGISTER:  PRIO2COS_PROFILE
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PRIO2COS_PROFILE.
 */
#define READ_PRIO2COS_PROFILEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,PRIO2COS_PROFILEr_BLKACC,4,0,p,PRIO2COS_PROFILEr_OFFSET,i,(r._prio2cos_profile),1)
#define WRITE_PRIO2COS_PROFILEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,PRIO2COS_PROFILEr_BLKACC,4,0,p,PRIO2COS_PROFILEr_OFFSET,i,&(r._prio2cos_profile),1)

/*******************************************************************************
 * End of 'PRIO2COS_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  PRIORITY_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PRIORITY_CONTROL.
 */
#define READ_PRIORITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,PRIORITY_CONTROLr_BLKACC,1,PRIORITY_CONTROLr_OFFSET,0,(r._priority_control), 1)
#define WRITE_PRIORITY_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,PRIORITY_CONTROLr_BLKACC,1,PRIORITY_CONTROLr_OFFSET,0,&(r._priority_control), 1)

/*******************************************************************************
 * End of 'PRIORITY_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  PROTOCOL_PKT_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access PROTOCOL_PKT_CONTROL.
 */
#define READ_PROTOCOL_PKT_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_read(u,PROTOCOL_PKT_CONTROLr_BLKACC,1,PROTOCOL_PKT_CONTROLr_OFFSET,i,(r._protocol_pkt_control), 1)
#define WRITE_PROTOCOL_PKT_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_write(u,PROTOCOL_PKT_CONTROLr_BLKACC,1,PROTOCOL_PKT_CONTROLr_OFFSET,i,&(r._protocol_pkt_control), 1)

/*******************************************************************************
 * End of 'PROTOCOL_PKT_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  PTR_COPYTOCPU_MASK
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_COPYTOCPU_MASK.
 */
#define READ_PTR_COPYTOCPU_MASKr(u,i,r) bcmbd_cmicd_reg_block_read(u,PTR_COPYTOCPU_MASKr_BLKACC,1,PTR_COPYTOCPU_MASKr_OFFSET,i,(r._ptr_copytocpu_mask), 2)
#define WRITE_PTR_COPYTOCPU_MASKr(u,i,r) bcmbd_cmicd_reg_block_write(u,PTR_COPYTOCPU_MASKr_BLKACC,1,PTR_COPYTOCPU_MASKr_OFFSET,i,&(r._ptr_copytocpu_mask), 2)

/*******************************************************************************
 * End of 'PTR_COPYTOCPU_MASKr'
 */




/*******************************************************************************
 * REGISTER:  PTR_COPYTOCPU_MASK_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_COPYTOCPU_MASK_0.
 */
#define READ_PTR_COPYTOCPU_MASK_0r(u,r) bcmbd_cmicd_reg_block_read(u,PTR_COPYTOCPU_MASK_0r_BLKACC,1,PTR_COPYTOCPU_MASK_0r_OFFSET,0,(r._ptr_copytocpu_mask_0), 2)
#define WRITE_PTR_COPYTOCPU_MASK_0r(u,r) bcmbd_cmicd_reg_block_write(u,PTR_COPYTOCPU_MASK_0r_BLKACC,1,PTR_COPYTOCPU_MASK_0r_OFFSET,0,&(r._ptr_copytocpu_mask_0), 2)

/*******************************************************************************
 * End of 'PTR_COPYTOCPU_MASK_0r'
 */




/*******************************************************************************
 * REGISTER:  PTR_COPYTOCPU_MASK_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_COPYTOCPU_MASK_1.
 */
#define READ_PTR_COPYTOCPU_MASK_1r(u,r) bcmbd_cmicd_reg_block_read(u,PTR_COPYTOCPU_MASK_1r_BLKACC,1,PTR_COPYTOCPU_MASK_1r_OFFSET,0,(r._ptr_copytocpu_mask_1), 2)
#define WRITE_PTR_COPYTOCPU_MASK_1r(u,r) bcmbd_cmicd_reg_block_write(u,PTR_COPYTOCPU_MASK_1r_BLKACC,1,PTR_COPYTOCPU_MASK_1r_OFFSET,0,&(r._ptr_copytocpu_mask_1), 2)

/*******************************************************************************
 * End of 'PTR_COPYTOCPU_MASK_1r'
 */




/*******************************************************************************
 * MEMORY:  PTR_RESULTS_BUFFER_ISW1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_RESULTS_BUFFER_ISW1.
 */
#define READ_PTR_RESULTS_BUFFER_ISW1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,PTR_RESULTS_BUFFER_ISW1m_BLKACC,1,n,0,PTR_RESULTS_BUFFER_ISW1m_OFFSET,i,(m._ptr_results_buffer_isw1),2)
#define WRITE_PTR_RESULTS_BUFFER_ISW1m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,PTR_RESULTS_BUFFER_ISW1m_BLKACC,1,n,0,PTR_RESULTS_BUFFER_ISW1m_OFFSET,i,&(m._ptr_results_buffer_isw1),2)
#define WRITE_PTR_RESULTS_BUFFER_ISW1m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,PTR_RESULTS_BUFFER_ISW1m_BLKACC,1,-1,0,PTR_RESULTS_BUFFER_ISW1m_OFFSET,i,&(m._ptr_results_buffer_isw1),2)

/*******************************************************************************
 * End of 'PTR_RESULTS_BUFFER_ISW1m'
 */




/*******************************************************************************
 * MEMORY:  PTR_RESULTS_BUFFER_ISW2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_RESULTS_BUFFER_ISW2.
 */
#define READ_PTR_RESULTS_BUFFER_ISW2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,PTR_RESULTS_BUFFER_ISW2m_BLKACC,1,n,0,PTR_RESULTS_BUFFER_ISW2m_OFFSET,i,(m._ptr_results_buffer_isw2),2)
#define WRITE_PTR_RESULTS_BUFFER_ISW2m(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,PTR_RESULTS_BUFFER_ISW2m_BLKACC,1,n,0,PTR_RESULTS_BUFFER_ISW2m_OFFSET,i,&(m._ptr_results_buffer_isw2),2)
#define WRITE_PTR_RESULTS_BUFFER_ISW2m_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,PTR_RESULTS_BUFFER_ISW2m_BLKACC,1,-1,0,PTR_RESULTS_BUFFER_ISW2m_OFFSET,i,&(m._ptr_results_buffer_isw2),2)

/*******************************************************************************
 * End of 'PTR_RESULTS_BUFFER_ISW2m'
 */




/*******************************************************************************
 * MEMORY:  PTR_RESULTS_BUFFER_IVP
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access PTR_RESULTS_BUFFER_IVP.
 */
#define READ_PTR_RESULTS_BUFFER_IVPm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,PTR_RESULTS_BUFFER_IVPm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_IVPm_OFFSET,i,(m._ptr_results_buffer_ivp),2)
#define WRITE_PTR_RESULTS_BUFFER_IVPm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,PTR_RESULTS_BUFFER_IVPm_BLKACC,1,n,0,PTR_RESULTS_BUFFER_IVPm_OFFSET,i,&(m._ptr_results_buffer_ivp),2)
#define WRITE_PTR_RESULTS_BUFFER_IVPm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,PTR_RESULTS_BUFFER_IVPm_BLKACC,1,-1,0,PTR_RESULTS_BUFFER_IVPm_OFFSET,i,&(m._ptr_results_buffer_ivp),2)

/*******************************************************************************
 * End of 'PTR_RESULTS_BUFFER_IVPm'
 */




/*******************************************************************************
 * REGISTER:  PWR_WATCH_DOG_CONTROL_MB
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PWR_WATCH_DOG_CONTROL_MB.
 */
#define READ_PWR_WATCH_DOG_CONTROL_MBr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PWR_WATCH_DOG_CONTROL_MBr_BLKACC,4,0,p,PWR_WATCH_DOG_CONTROL_MBr_OFFSET,0,(r._pwr_watch_dog_control_mb),1)
#define WRITE_PWR_WATCH_DOG_CONTROL_MBr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PWR_WATCH_DOG_CONTROL_MBr_BLKACC,4,0,p,PWR_WATCH_DOG_CONTROL_MBr_OFFSET,0,&(r._pwr_watch_dog_control_mb),1)

/*******************************************************************************
 * End of 'PWR_WATCH_DOG_CONTROL_MBr'
 */




/*******************************************************************************
 * REGISTER:  PWR_WATCH_DOG_STATUS_MB
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access PWR_WATCH_DOG_STATUS_MB.
 */
#define READ_PWR_WATCH_DOG_STATUS_MBr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,PWR_WATCH_DOG_STATUS_MBr_BLKACC,4,0,p,PWR_WATCH_DOG_STATUS_MBr_OFFSET,0,(r._pwr_watch_dog_status_mb),1)
#define WRITE_PWR_WATCH_DOG_STATUS_MBr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,PWR_WATCH_DOG_STATUS_MBr_BLKACC,4,0,p,PWR_WATCH_DOG_STATUS_MBr_OFFSET,0,&(r._pwr_watch_dog_status_mb),1)

/*******************************************************************************
 * End of 'PWR_WATCH_DOG_STATUS_MBr'
 */




/*******************************************************************************
 * REGISTER:  QDB_MEM_DEBUG_TM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access QDB_MEM_DEBUG_TM.
 */
#define READ_QDB_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,QDB_MEM_DEBUG_TMr_BLKACC,4,0,p,QDB_MEM_DEBUG_TMr_OFFSET,0,(r._qdb_mem_debug_tm),1)
#define WRITE_QDB_MEM_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,QDB_MEM_DEBUG_TMr_BLKACC,4,0,p,QDB_MEM_DEBUG_TMr_OFFSET,0,&(r._qdb_mem_debug_tm),1)

/*******************************************************************************
 * End of 'QDB_MEM_DEBUG_TMr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_CPU_L0_NODE_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_CPU_L0_NODE_CONFIG.
 */
#define READ_Q_SCHED_CPU_L0_NODE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_CPU_L0_NODE_CONFIGr_BLKACC,4,0,p,Q_SCHED_CPU_L0_NODE_CONFIGr_OFFSET,0,(r._q_sched_cpu_l0_node_config),1)
#define WRITE_Q_SCHED_CPU_L0_NODE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_CPU_L0_NODE_CONFIGr_BLKACC,4,0,p,Q_SCHED_CPU_L0_NODE_CONFIGr_OFFSET,0,&(r._q_sched_cpu_l0_node_config),1)

/*******************************************************************************
 * End of 'Q_SCHED_CPU_L0_NODE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_CPU_L1_MC_QUEUE_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_CPU_L1_MC_QUEUE_CONFIG.
 */
#define READ_Q_SCHED_CPU_L1_MC_QUEUE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_CPU_L1_MC_QUEUE_CONFIGr_BLKACC,4,0,p,Q_SCHED_CPU_L1_MC_QUEUE_CONFIGr_OFFSET,0,(r._q_sched_cpu_l1_mc_queue_config),2)
#define WRITE_Q_SCHED_CPU_L1_MC_QUEUE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_CPU_L1_MC_QUEUE_CONFIGr_BLKACC,4,0,p,Q_SCHED_CPU_L1_MC_QUEUE_CONFIGr_OFFSET,0,&(r._q_sched_cpu_l1_mc_queue_config),2)

/*******************************************************************************
 * End of 'Q_SCHED_CPU_L1_MC_QUEUE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_CPU_L1_MC_QUEUE_L0_MAPPING
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_CPU_L1_MC_QUEUE_L0_MAPPING.
 */
#define READ_Q_SCHED_CPU_L1_MC_QUEUE_L0_MAPPINGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_CPU_L1_MC_QUEUE_L0_MAPPINGr_BLKACC,4,0,p,Q_SCHED_CPU_L1_MC_QUEUE_L0_MAPPINGr_OFFSET,i,(r._q_sched_cpu_l1_mc_queue_l0_mapping),1)
#define WRITE_Q_SCHED_CPU_L1_MC_QUEUE_L0_MAPPINGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_CPU_L1_MC_QUEUE_L0_MAPPINGr_BLKACC,4,0,p,Q_SCHED_CPU_L1_MC_QUEUE_L0_MAPPINGr_OFFSET,i,&(r._q_sched_cpu_l1_mc_queue_l0_mapping),1)

/*******************************************************************************
 * End of 'Q_SCHED_CPU_L1_MC_QUEUE_L0_MAPPINGr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_CPU_L1_MC_QUEUE_MASK
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_CPU_L1_MC_QUEUE_MASK.
 */
#define READ_Q_SCHED_CPU_L1_MC_QUEUE_MASKr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_CPU_L1_MC_QUEUE_MASKr_BLKACC,4,0,p,Q_SCHED_CPU_L1_MC_QUEUE_MASKr_OFFSET,0,(r._q_sched_cpu_l1_mc_queue_mask),2)
#define WRITE_Q_SCHED_CPU_L1_MC_QUEUE_MASKr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_CPU_L1_MC_QUEUE_MASKr_BLKACC,4,0,p,Q_SCHED_CPU_L1_MC_QUEUE_MASKr_OFFSET,0,&(r._q_sched_cpu_l1_mc_queue_mask),2)

/*******************************************************************************
 * End of 'Q_SCHED_CPU_L1_MC_QUEUE_MASKr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_CPU_PORT_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_CPU_PORT_CONFIG.
 */
#define READ_Q_SCHED_CPU_PORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_CPU_PORT_CONFIGr_BLKACC,4,0,p,Q_SCHED_CPU_PORT_CONFIGr_OFFSET,0,(r._q_sched_cpu_port_config),1)
#define WRITE_Q_SCHED_CPU_PORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_CPU_PORT_CONFIGr_BLKACC,4,0,p,Q_SCHED_CPU_PORT_CONFIGr_OFFSET,0,&(r._q_sched_cpu_port_config),1)

/*******************************************************************************
 * End of 'Q_SCHED_CPU_PORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_CHIP_CONFIG1
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_DD_CHIP_CONFIG1.
 */
#define READ_Q_SCHED_DD_CHIP_CONFIG1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_CHIP_CONFIG1r_BLKACC,4,0,p,Q_SCHED_DD_CHIP_CONFIG1r_OFFSET,0,(r._q_sched_dd_chip_config1),1)
#define WRITE_Q_SCHED_DD_CHIP_CONFIG1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_CHIP_CONFIG1r_BLKACC,4,0,p,Q_SCHED_DD_CHIP_CONFIG1r_OFFSET,0,&(r._q_sched_dd_chip_config1),1)

/*******************************************************************************
 * End of 'Q_SCHED_DD_CHIP_CONFIG1r'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_CHIP_CONFIG2
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_DD_CHIP_CONFIG2.
 */
#define READ_Q_SCHED_DD_CHIP_CONFIG2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_CHIP_CONFIG2r_BLKACC,4,0,p,Q_SCHED_DD_CHIP_CONFIG2r_OFFSET,0,(r._q_sched_dd_chip_config2),1)
#define WRITE_Q_SCHED_DD_CHIP_CONFIG2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_CHIP_CONFIG2r_BLKACC,4,0,p,Q_SCHED_DD_CHIP_CONFIG2r_OFFSET,0,&(r._q_sched_dd_chip_config2),1)

/*******************************************************************************
 * End of 'Q_SCHED_DD_CHIP_CONFIG2r'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_PORT_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_DD_PORT_CONFIG.
 */
#define READ_Q_SCHED_DD_PORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_PORT_CONFIGr_BLKACC,4,0,p,Q_SCHED_DD_PORT_CONFIGr_OFFSET,0,(r._q_sched_dd_port_config),1)
#define WRITE_Q_SCHED_DD_PORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_PORT_CONFIGr_BLKACC,4,0,p,Q_SCHED_DD_PORT_CONFIGr_OFFSET,0,&(r._q_sched_dd_port_config),1)

/*******************************************************************************
 * End of 'Q_SCHED_DD_PORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_TIMER_A
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_DD_TIMER_A.
 */
#define READ_Q_SCHED_DD_TIMER_Ar(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_TIMER_Ar_BLKACC,4,0,p,Q_SCHED_DD_TIMER_Ar_OFFSET,0,(r._q_sched_dd_timer_a),1)
#define WRITE_Q_SCHED_DD_TIMER_Ar(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_TIMER_Ar_BLKACC,4,0,p,Q_SCHED_DD_TIMER_Ar_OFFSET,0,&(r._q_sched_dd_timer_a),1)

/*******************************************************************************
 * End of 'Q_SCHED_DD_TIMER_Ar'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_TIMER_B
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_DD_TIMER_B.
 */
#define READ_Q_SCHED_DD_TIMER_Br(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_TIMER_Br_BLKACC,4,0,p,Q_SCHED_DD_TIMER_Br_OFFSET,0,(r._q_sched_dd_timer_b),1)
#define WRITE_Q_SCHED_DD_TIMER_Br(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_TIMER_Br_BLKACC,4,0,p,Q_SCHED_DD_TIMER_Br_OFFSET,0,&(r._q_sched_dd_timer_b),1)

/*******************************************************************************
 * End of 'Q_SCHED_DD_TIMER_Br'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_TIMER_ENABLE_A
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_DD_TIMER_ENABLE_A.
 */
#define READ_Q_SCHED_DD_TIMER_ENABLE_Ar(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_TIMER_ENABLE_Ar_BLKACC,4,0,p,Q_SCHED_DD_TIMER_ENABLE_Ar_OFFSET,0,(r._q_sched_dd_timer_enable_a),2)
#define WRITE_Q_SCHED_DD_TIMER_ENABLE_Ar(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_TIMER_ENABLE_Ar_BLKACC,4,0,p,Q_SCHED_DD_TIMER_ENABLE_Ar_OFFSET,0,&(r._q_sched_dd_timer_enable_a),2)

/*******************************************************************************
 * End of 'Q_SCHED_DD_TIMER_ENABLE_Ar'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_TIMER_ENABLE_B
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_DD_TIMER_ENABLE_B.
 */
#define READ_Q_SCHED_DD_TIMER_ENABLE_Br(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_TIMER_ENABLE_Br_BLKACC,4,0,p,Q_SCHED_DD_TIMER_ENABLE_Br_OFFSET,0,(r._q_sched_dd_timer_enable_b),2)
#define WRITE_Q_SCHED_DD_TIMER_ENABLE_Br(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_TIMER_ENABLE_Br_BLKACC,4,0,p,Q_SCHED_DD_TIMER_ENABLE_Br_OFFSET,0,&(r._q_sched_dd_timer_enable_b),2)

/*******************************************************************************
 * End of 'Q_SCHED_DD_TIMER_ENABLE_Br'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_TIMER_STATUS_A
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_DD_TIMER_STATUS_A.
 */
#define READ_Q_SCHED_DD_TIMER_STATUS_Ar(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_TIMER_STATUS_Ar_BLKACC,4,0,p,Q_SCHED_DD_TIMER_STATUS_Ar_OFFSET,0,(r._q_sched_dd_timer_status_a),2)
#define WRITE_Q_SCHED_DD_TIMER_STATUS_Ar(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_TIMER_STATUS_Ar_BLKACC,4,0,p,Q_SCHED_DD_TIMER_STATUS_Ar_OFFSET,0,&(r._q_sched_dd_timer_status_a),2)

/*******************************************************************************
 * End of 'Q_SCHED_DD_TIMER_STATUS_Ar'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_TIMER_STATUS_A_MASK
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_DD_TIMER_STATUS_A_MASK.
 */
#define READ_Q_SCHED_DD_TIMER_STATUS_A_MASKr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_TIMER_STATUS_A_MASKr_BLKACC,4,0,p,Q_SCHED_DD_TIMER_STATUS_A_MASKr_OFFSET,0,(r._q_sched_dd_timer_status_a_mask),2)
#define WRITE_Q_SCHED_DD_TIMER_STATUS_A_MASKr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_TIMER_STATUS_A_MASKr_BLKACC,4,0,p,Q_SCHED_DD_TIMER_STATUS_A_MASKr_OFFSET,0,&(r._q_sched_dd_timer_status_a_mask),2)

/*******************************************************************************
 * End of 'Q_SCHED_DD_TIMER_STATUS_A_MASKr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_TIMER_STATUS_B
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_DD_TIMER_STATUS_B.
 */
#define READ_Q_SCHED_DD_TIMER_STATUS_Br(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_TIMER_STATUS_Br_BLKACC,4,0,p,Q_SCHED_DD_TIMER_STATUS_Br_OFFSET,0,(r._q_sched_dd_timer_status_b),2)
#define WRITE_Q_SCHED_DD_TIMER_STATUS_Br(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_TIMER_STATUS_Br_BLKACC,4,0,p,Q_SCHED_DD_TIMER_STATUS_Br_OFFSET,0,&(r._q_sched_dd_timer_status_b),2)

/*******************************************************************************
 * End of 'Q_SCHED_DD_TIMER_STATUS_Br'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DD_TIMER_STATUS_B_MASK
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_DD_TIMER_STATUS_B_MASK.
 */
#define READ_Q_SCHED_DD_TIMER_STATUS_B_MASKr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DD_TIMER_STATUS_B_MASKr_BLKACC,4,0,p,Q_SCHED_DD_TIMER_STATUS_B_MASKr_OFFSET,0,(r._q_sched_dd_timer_status_b_mask),2)
#define WRITE_Q_SCHED_DD_TIMER_STATUS_B_MASKr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DD_TIMER_STATUS_B_MASKr_BLKACC,4,0,p,Q_SCHED_DD_TIMER_STATUS_B_MASKr_OFFSET,0,&(r._q_sched_dd_timer_status_b_mask),2)

/*******************************************************************************
 * End of 'Q_SCHED_DD_TIMER_STATUS_B_MASKr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_DEBUG_FORCE_CPU_COSMASK
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_DEBUG_FORCE_CPU_COSMASK.
 */
#define READ_Q_SCHED_DEBUG_FORCE_CPU_COSMASKr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_DEBUG_FORCE_CPU_COSMASKr_BLKACC,4,0,p,Q_SCHED_DEBUG_FORCE_CPU_COSMASKr_OFFSET,0,(r._q_sched_debug_force_cpu_cosmask),1)
#define WRITE_Q_SCHED_DEBUG_FORCE_CPU_COSMASKr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_DEBUG_FORCE_CPU_COSMASKr_BLKACC,4,0,p,Q_SCHED_DEBUG_FORCE_CPU_COSMASKr_OFFSET,0,&(r._q_sched_debug_force_cpu_cosmask),1)

/*******************************************************************************
 * End of 'Q_SCHED_DEBUG_FORCE_CPU_COSMASKr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_ENABLE_ECCP_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_ENABLE_ECCP_MEM.
 */
#define READ_Q_SCHED_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_ENABLE_ECCP_MEMr_BLKACC,4,0,p,Q_SCHED_ENABLE_ECCP_MEMr_OFFSET,0,(r._q_sched_enable_eccp_mem),1)
#define WRITE_Q_SCHED_ENABLE_ECCP_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_ENABLE_ECCP_MEMr_BLKACC,4,0,p,Q_SCHED_ENABLE_ECCP_MEMr_OFFSET,0,&(r._q_sched_enable_eccp_mem),1)

/*******************************************************************************
 * End of 'Q_SCHED_ENABLE_ECCP_MEMr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_EN_COR_ERR_RPT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_EN_COR_ERR_RPT.
 */
#define READ_Q_SCHED_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_EN_COR_ERR_RPTr_BLKACC,4,0,p,Q_SCHED_EN_COR_ERR_RPTr_OFFSET,0,(r._q_sched_en_cor_err_rpt),1)
#define WRITE_Q_SCHED_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_EN_COR_ERR_RPTr_BLKACC,4,0,p,Q_SCHED_EN_COR_ERR_RPTr_OFFSET,0,&(r._q_sched_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'Q_SCHED_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  Q_SCHED_L0_ACCUM_COMP_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     20
 */
/*
 * These macros can be used to access Q_SCHED_L0_ACCUM_COMP_MEM.
 */
#define READ_Q_SCHED_L0_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,Q_SCHED_L0_ACCUM_COMP_MEMm_BLKACC,4,0,p,Q_SCHED_L0_ACCUM_COMP_MEMm_OFFSET,i,(m._q_sched_l0_accum_comp_mem),1)
#define WRITE_Q_SCHED_L0_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,Q_SCHED_L0_ACCUM_COMP_MEMm_BLKACC,4,0,p,Q_SCHED_L0_ACCUM_COMP_MEMm_OFFSET,i,&(m._q_sched_l0_accum_comp_mem),1)

/*******************************************************************************
 * End of 'Q_SCHED_L0_ACCUM_COMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  Q_SCHED_L0_CREDIT_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     31
 */
/*
 * These macros can be used to access Q_SCHED_L0_CREDIT_MEM.
 */
#define READ_Q_SCHED_L0_CREDIT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,Q_SCHED_L0_CREDIT_MEMm_BLKACC,4,0,p,Q_SCHED_L0_CREDIT_MEMm_OFFSET,i,(m._q_sched_l0_credit_mem),1)
#define WRITE_Q_SCHED_L0_CREDIT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,Q_SCHED_L0_CREDIT_MEMm_BLKACC,4,0,p,Q_SCHED_L0_CREDIT_MEMm_OFFSET,i,&(m._q_sched_l0_credit_mem),1)

/*******************************************************************************
 * End of 'Q_SCHED_L0_CREDIT_MEMm'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_L0_MEMORY_TM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_L0_MEMORY_TM.
 */
#define READ_Q_SCHED_L0_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_L0_MEMORY_TMr_BLKACC,4,0,p,Q_SCHED_L0_MEMORY_TMr_OFFSET,0,(r._q_sched_l0_memory_tm),1)
#define WRITE_Q_SCHED_L0_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_L0_MEMORY_TMr_BLKACC,4,0,p,Q_SCHED_L0_MEMORY_TMr_OFFSET,0,&(r._q_sched_l0_memory_tm),1)

/*******************************************************************************
 * End of 'Q_SCHED_L0_MEMORY_TMr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_L0_NODE_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_L0_NODE_CONFIG.
 */
#define READ_Q_SCHED_L0_NODE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_L0_NODE_CONFIGr_BLKACC,4,0,p,Q_SCHED_L0_NODE_CONFIGr_OFFSET,0,(r._q_sched_l0_node_config),1)
#define WRITE_Q_SCHED_L0_NODE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_L0_NODE_CONFIGr_BLKACC,4,0,p,Q_SCHED_L0_NODE_CONFIGr_OFFSET,0,&(r._q_sched_l0_node_config),1)

/*******************************************************************************
 * End of 'Q_SCHED_L0_NODE_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  Q_SCHED_L0_WEIGHT_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     12
 */
/*
 * These macros can be used to access Q_SCHED_L0_WEIGHT_MEM.
 */
#define READ_Q_SCHED_L0_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,Q_SCHED_L0_WEIGHT_MEMm_BLKACC,4,0,p,Q_SCHED_L0_WEIGHT_MEMm_OFFSET,i,(m._q_sched_l0_weight_mem),1)
#define WRITE_Q_SCHED_L0_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,Q_SCHED_L0_WEIGHT_MEMm_BLKACC,4,0,p,Q_SCHED_L0_WEIGHT_MEMm_OFFSET,i,&(m._q_sched_l0_weight_mem),1)

/*******************************************************************************
 * End of 'Q_SCHED_L0_WEIGHT_MEMm'
 */




/*******************************************************************************
 * MEMORY:  Q_SCHED_L1_ACCUM_COMP_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     20
 */
/*
 * These macros can be used to access Q_SCHED_L1_ACCUM_COMP_MEM.
 */
#define READ_Q_SCHED_L1_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,Q_SCHED_L1_ACCUM_COMP_MEMm_BLKACC,4,0,p,Q_SCHED_L1_ACCUM_COMP_MEMm_OFFSET,i,(m._q_sched_l1_accum_comp_mem),1)
#define WRITE_Q_SCHED_L1_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,Q_SCHED_L1_ACCUM_COMP_MEMm_BLKACC,4,0,p,Q_SCHED_L1_ACCUM_COMP_MEMm_OFFSET,i,&(m._q_sched_l1_accum_comp_mem),1)

/*******************************************************************************
 * End of 'Q_SCHED_L1_ACCUM_COMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  Q_SCHED_L1_CREDIT_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     31
 */
/*
 * These macros can be used to access Q_SCHED_L1_CREDIT_MEM.
 */
#define READ_Q_SCHED_L1_CREDIT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,Q_SCHED_L1_CREDIT_MEMm_BLKACC,4,0,p,Q_SCHED_L1_CREDIT_MEMm_OFFSET,i,(m._q_sched_l1_credit_mem),1)
#define WRITE_Q_SCHED_L1_CREDIT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,Q_SCHED_L1_CREDIT_MEMm_BLKACC,4,0,p,Q_SCHED_L1_CREDIT_MEMm_OFFSET,i,&(m._q_sched_l1_credit_mem),1)

/*******************************************************************************
 * End of 'Q_SCHED_L1_CREDIT_MEMm'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_L1_MC_QUEUE_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_L1_MC_QUEUE_CONFIG.
 */
#define READ_Q_SCHED_L1_MC_QUEUE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_L1_MC_QUEUE_CONFIGr_BLKACC,4,0,p,Q_SCHED_L1_MC_QUEUE_CONFIGr_OFFSET,0,(r._q_sched_l1_mc_queue_config),1)
#define WRITE_Q_SCHED_L1_MC_QUEUE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_L1_MC_QUEUE_CONFIGr_BLKACC,4,0,p,Q_SCHED_L1_MC_QUEUE_CONFIGr_OFFSET,0,&(r._q_sched_l1_mc_queue_config),1)

/*******************************************************************************
 * End of 'Q_SCHED_L1_MC_QUEUE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_L1_MEMORY_TM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_L1_MEMORY_TM.
 */
#define READ_Q_SCHED_L1_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_L1_MEMORY_TMr_BLKACC,4,0,p,Q_SCHED_L1_MEMORY_TMr_OFFSET,0,(r._q_sched_l1_memory_tm),1)
#define WRITE_Q_SCHED_L1_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_L1_MEMORY_TMr_BLKACC,4,0,p,Q_SCHED_L1_MEMORY_TMr_OFFSET,0,&(r._q_sched_l1_memory_tm),1)

/*******************************************************************************
 * End of 'Q_SCHED_L1_MEMORY_TMr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_L1_UC_QUEUE_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_L1_UC_QUEUE_CONFIG.
 */
#define READ_Q_SCHED_L1_UC_QUEUE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_L1_UC_QUEUE_CONFIGr_BLKACC,4,0,p,Q_SCHED_L1_UC_QUEUE_CONFIGr_OFFSET,0,(r._q_sched_l1_uc_queue_config),1)
#define WRITE_Q_SCHED_L1_UC_QUEUE_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_L1_UC_QUEUE_CONFIGr_BLKACC,4,0,p,Q_SCHED_L1_UC_QUEUE_CONFIGr_OFFSET,0,&(r._q_sched_l1_uc_queue_config),1)

/*******************************************************************************
 * End of 'Q_SCHED_L1_UC_QUEUE_CONFIGr'
 */




/*******************************************************************************
 * MEMORY:  Q_SCHED_L1_WEIGHT_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     12
 */
/*
 * These macros can be used to access Q_SCHED_L1_WEIGHT_MEM.
 */
#define READ_Q_SCHED_L1_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,Q_SCHED_L1_WEIGHT_MEMm_BLKACC,4,0,p,Q_SCHED_L1_WEIGHT_MEMm_OFFSET,i,(m._q_sched_l1_weight_mem),1)
#define WRITE_Q_SCHED_L1_WEIGHT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,Q_SCHED_L1_WEIGHT_MEMm_BLKACC,4,0,p,Q_SCHED_L1_WEIGHT_MEMm_OFFSET,i,&(m._q_sched_l1_weight_mem),1)

/*******************************************************************************
 * End of 'Q_SCHED_L1_WEIGHT_MEMm'
 */




/*******************************************************************************
 * MEMORY:  Q_SCHED_L2_ACCUM_COMP_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     20
 */
/*
 * These macros can be used to access Q_SCHED_L2_ACCUM_COMP_MEM.
 */
#define READ_Q_SCHED_L2_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,Q_SCHED_L2_ACCUM_COMP_MEMm_BLKACC,4,0,p,Q_SCHED_L2_ACCUM_COMP_MEMm_OFFSET,i,(m._q_sched_l2_accum_comp_mem),1)
#define WRITE_Q_SCHED_L2_ACCUM_COMP_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,Q_SCHED_L2_ACCUM_COMP_MEMm_BLKACC,4,0,p,Q_SCHED_L2_ACCUM_COMP_MEMm_OFFSET,i,&(m._q_sched_l2_accum_comp_mem),1)

/*******************************************************************************
 * End of 'Q_SCHED_L2_ACCUM_COMP_MEMm'
 */




/*******************************************************************************
 * MEMORY:  Q_SCHED_L2_CREDIT_MEM
 * BLOCKS:   MMU_SC
 * SIZE:     31
 */
/*
 * These macros can be used to access Q_SCHED_L2_CREDIT_MEM.
 */
#define READ_Q_SCHED_L2_CREDIT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,Q_SCHED_L2_CREDIT_MEMm_BLKACC,4,0,p,Q_SCHED_L2_CREDIT_MEMm_OFFSET,i,(m._q_sched_l2_credit_mem),1)
#define WRITE_Q_SCHED_L2_CREDIT_MEMm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,Q_SCHED_L2_CREDIT_MEMm_BLKACC,4,0,p,Q_SCHED_L2_CREDIT_MEMm_OFFSET,i,&(m._q_sched_l2_credit_mem),1)

/*******************************************************************************
 * End of 'Q_SCHED_L2_CREDIT_MEMm'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_L2_MEMORY_TM
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_L2_MEMORY_TM.
 */
#define READ_Q_SCHED_L2_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_L2_MEMORY_TMr_BLKACC,4,0,p,Q_SCHED_L2_MEMORY_TMr_OFFSET,0,(r._q_sched_l2_memory_tm),1)
#define WRITE_Q_SCHED_L2_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_L2_MEMORY_TMr_BLKACC,4,0,p,Q_SCHED_L2_MEMORY_TMr_OFFSET,0,&(r._q_sched_l2_memory_tm),1)

/*******************************************************************************
 * End of 'Q_SCHED_L2_MEMORY_TMr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_PORT_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_PORT_CONFIG.
 */
#define READ_Q_SCHED_PORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_PORT_CONFIGr_BLKACC,4,0,p,Q_SCHED_PORT_CONFIGr_OFFSET,0,(r._q_sched_port_config),1)
#define WRITE_Q_SCHED_PORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_PORT_CONFIGr_BLKACC,4,0,p,Q_SCHED_PORT_CONFIGr_OFFSET,0,&(r._q_sched_port_config),1)

/*******************************************************************************
 * End of 'Q_SCHED_PORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_PORT_EMPTY_STATUS
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_PORT_EMPTY_STATUS.
 */
#define READ_Q_SCHED_PORT_EMPTY_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_PORT_EMPTY_STATUSr_BLKACC,4,0,p,Q_SCHED_PORT_EMPTY_STATUSr_OFFSET,0,(r._q_sched_port_empty_status),2)
#define WRITE_Q_SCHED_PORT_EMPTY_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_PORT_EMPTY_STATUSr_BLKACC,4,0,p,Q_SCHED_PORT_EMPTY_STATUSr_OFFSET,0,&(r._q_sched_port_empty_status),2)

/*******************************************************************************
 * End of 'Q_SCHED_PORT_EMPTY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_PORT_FLUSH
 * BLOCKS:   MMU_SC
 * SIZE:     64
 */
/*
 * These macros can be used to access Q_SCHED_PORT_FLUSH.
 */
#define READ_Q_SCHED_PORT_FLUSHr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_PORT_FLUSHr_BLKACC,4,0,p,Q_SCHED_PORT_FLUSHr_OFFSET,0,(r._q_sched_port_flush),2)
#define WRITE_Q_SCHED_PORT_FLUSHr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_PORT_FLUSHr_BLKACC,4,0,p,Q_SCHED_PORT_FLUSHr_OFFSET,0,&(r._q_sched_port_flush),2)

/*******************************************************************************
 * End of 'Q_SCHED_PORT_FLUSHr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_RQE_SNAPSHOT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_RQE_SNAPSHOT.
 */
#define READ_Q_SCHED_RQE_SNAPSHOTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_RQE_SNAPSHOTr_BLKACC,4,0,p,Q_SCHED_RQE_SNAPSHOTr_OFFSET,0,(r._q_sched_rqe_snapshot),1)
#define WRITE_Q_SCHED_RQE_SNAPSHOTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_RQE_SNAPSHOTr_BLKACC,4,0,p,Q_SCHED_RQE_SNAPSHOTr_OFFSET,0,&(r._q_sched_rqe_snapshot),1)

/*******************************************************************************
 * End of 'Q_SCHED_RQE_SNAPSHOTr'
 */




/*******************************************************************************
 * REGISTER:  Q_SCHED_SPECIAL_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access Q_SCHED_SPECIAL_CONFIG.
 */
#define READ_Q_SCHED_SPECIAL_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,Q_SCHED_SPECIAL_CONFIGr_BLKACC,4,0,p,Q_SCHED_SPECIAL_CONFIGr_OFFSET,0,(r._q_sched_special_config),1)
#define WRITE_Q_SCHED_SPECIAL_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,Q_SCHED_SPECIAL_CONFIGr_BLKACC,4,0,p,Q_SCHED_SPECIAL_CONFIGr_OFFSET,0,&(r._q_sched_special_config),1)

/*******************************************************************************
 * End of 'Q_SCHED_SPECIAL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  R1023
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R1023.
 */
#define READ_R1023r(u,p,r) bcmbd_cmicd_reg_port_read(u,R1023r_BLKACC,p,R1023r_OFFSET,0,(r._r1023), 2)
#define WRITE_R1023r(u,p,r) bcmbd_cmicd_reg_port_write(u,R1023r_BLKACC,p,R1023r_OFFSET,0,&(r._r1023), 2)

/*******************************************************************************
 * End of 'R1023r'
 */




/*******************************************************************************
 * REGISTER:  R127
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R127.
 */
#define READ_R127r(u,p,r) bcmbd_cmicd_reg_port_read(u,R127r_BLKACC,p,R127r_OFFSET,0,(r._r127), 2)
#define WRITE_R127r(u,p,r) bcmbd_cmicd_reg_port_write(u,R127r_BLKACC,p,R127r_OFFSET,0,&(r._r127), 2)

/*******************************************************************************
 * End of 'R127r'
 */




/*******************************************************************************
 * REGISTER:  R1518
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R1518.
 */
#define READ_R1518r(u,p,r) bcmbd_cmicd_reg_port_read(u,R1518r_BLKACC,p,R1518r_OFFSET,0,(r._r1518), 2)
#define WRITE_R1518r(u,p,r) bcmbd_cmicd_reg_port_write(u,R1518r_BLKACC,p,R1518r_OFFSET,0,&(r._r1518), 2)

/*******************************************************************************
 * End of 'R1518r'
 */




/*******************************************************************************
 * REGISTER:  R16383
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R16383.
 */
#define READ_R16383r(u,p,r) bcmbd_cmicd_reg_port_read(u,R16383r_BLKACC,p,R16383r_OFFSET,0,(r._r16383), 2)
#define WRITE_R16383r(u,p,r) bcmbd_cmicd_reg_port_write(u,R16383r_BLKACC,p,R16383r_OFFSET,0,&(r._r16383), 2)

/*******************************************************************************
 * End of 'R16383r'
 */




/*******************************************************************************
 * REGISTER:  R2047
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R2047.
 */
#define READ_R2047r(u,p,r) bcmbd_cmicd_reg_port_read(u,R2047r_BLKACC,p,R2047r_OFFSET,0,(r._r2047), 2)
#define WRITE_R2047r(u,p,r) bcmbd_cmicd_reg_port_write(u,R2047r_BLKACC,p,R2047r_OFFSET,0,&(r._r2047), 2)

/*******************************************************************************
 * End of 'R2047r'
 */




/*******************************************************************************
 * REGISTER:  R255
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R255.
 */
#define READ_R255r(u,p,r) bcmbd_cmicd_reg_port_read(u,R255r_BLKACC,p,R255r_OFFSET,0,(r._r255), 2)
#define WRITE_R255r(u,p,r) bcmbd_cmicd_reg_port_write(u,R255r_BLKACC,p,R255r_OFFSET,0,&(r._r255), 2)

/*******************************************************************************
 * End of 'R255r'
 */




/*******************************************************************************
 * REGISTER:  R4095
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R4095.
 */
#define READ_R4095r(u,p,r) bcmbd_cmicd_reg_port_read(u,R4095r_BLKACC,p,R4095r_OFFSET,0,(r._r4095), 2)
#define WRITE_R4095r(u,p,r) bcmbd_cmicd_reg_port_write(u,R4095r_BLKACC,p,R4095r_OFFSET,0,&(r._r4095), 2)

/*******************************************************************************
 * End of 'R4095r'
 */




/*******************************************************************************
 * REGISTER:  R511
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R511.
 */
#define READ_R511r(u,p,r) bcmbd_cmicd_reg_port_read(u,R511r_BLKACC,p,R511r_OFFSET,0,(r._r511), 2)
#define WRITE_R511r(u,p,r) bcmbd_cmicd_reg_port_write(u,R511r_BLKACC,p,R511r_OFFSET,0,&(r._r511), 2)

/*******************************************************************************
 * End of 'R511r'
 */




/*******************************************************************************
 * REGISTER:  R64
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R64.
 */
#define READ_R64r(u,p,r) bcmbd_cmicd_reg_port_read(u,R64r_BLKACC,p,R64r_OFFSET,0,(r._r64), 2)
#define WRITE_R64r(u,p,r) bcmbd_cmicd_reg_port_write(u,R64r_BLKACC,p,R64r_OFFSET,0,&(r._r64), 2)

/*******************************************************************************
 * End of 'R64r'
 */




/*******************************************************************************
 * REGISTER:  R9216
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access R9216.
 */
#define READ_R9216r(u,p,r) bcmbd_cmicd_reg_port_read(u,R9216r_BLKACC,p,R9216r_OFFSET,0,(r._r9216), 2)
#define WRITE_R9216r(u,p,r) bcmbd_cmicd_reg_port_write(u,R9216r_BLKACC,p,R9216r_OFFSET,0,&(r._r9216), 2)

/*******************************************************************************
 * End of 'R9216r'
 */




/*******************************************************************************
 * REGISTER:  RALN
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RALN.
 */
#define READ_RALNr(u,p,r) bcmbd_cmicd_reg_port_read(u,RALNr_BLKACC,p,RALNr_OFFSET,0,(r._raln), 2)
#define WRITE_RALNr(u,p,r) bcmbd_cmicd_reg_port_write(u,RALNr_BLKACC,p,RALNr_OFFSET,0,&(r._raln), 2)

/*******************************************************************************
 * End of 'RALNr'
 */




/*******************************************************************************
 * MEMORY:  RANDOM_RRLB_HG_TRUNK_MEMBER
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access RANDOM_RRLB_HG_TRUNK_MEMBER.
 */
#define READ_RANDOM_RRLB_HG_TRUNK_MEMBERm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(RANDOM_RRLB_HG_TRUNK_MEMBERm_BLKACC)+1,RANDOM_RRLB_HG_TRUNK_MEMBERm_OFFSET+i,(m._random_rrlb_hg_trunk_member),1)
#define WRITE_RANDOM_RRLB_HG_TRUNK_MEMBERm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(RANDOM_RRLB_HG_TRUNK_MEMBERm_BLKACC)+1,RANDOM_RRLB_HG_TRUNK_MEMBERm_OFFSET+i,&(m._random_rrlb_hg_trunk_member),1)

/*******************************************************************************
 * End of 'RANDOM_RRLB_HG_TRUNK_MEMBERm'
 */




/*******************************************************************************
 * REGISTER:  RBCA
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RBCA.
 */
#define READ_RBCAr(u,p,r) bcmbd_cmicd_reg_port_read(u,RBCAr_BLKACC,p,RBCAr_OFFSET,0,(r._rbca), 2)
#define WRITE_RBCAr(u,p,r) bcmbd_cmicd_reg_port_write(u,RBCAr_BLKACC,p,RBCAr_OFFSET,0,&(r._rbca), 2)

/*******************************************************************************
 * End of 'RBCAr'
 */




/*******************************************************************************
 * REGISTER:  RBYT
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RBYT.
 */
#define READ_RBYTr(u,p,r) bcmbd_cmicd_reg_port_read(u,RBYTr_BLKACC,p,RBYTr_OFFSET,0,(r._rbyt), 2)
#define WRITE_RBYTr(u,p,r) bcmbd_cmicd_reg_port_write(u,RBYTr_BLKACC,p,RBYTr_OFFSET,0,&(r._rbyt), 2)

/*******************************************************************************
 * End of 'RBYTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC0.
 */
#define READ_RDBGC0r(u,p,r) bcmbd_cmicd_reg_port_read(u,RDBGC0r_BLKACC,p,RDBGC0r_OFFSET,0,(r._rdbgc0), 2)
#define WRITE_RDBGC0r(u,p,r) bcmbd_cmicd_reg_port_write(u,RDBGC0r_BLKACC,p,RDBGC0r_OFFSET,0,&(r._rdbgc0), 2)

/*******************************************************************************
 * End of 'RDBGC0r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC0_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC0_SELECT.
 */
#define READ_RDBGC0_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,RDBGC0_SELECTr_BLKACC,1,RDBGC0_SELECTr_OFFSET,0,(r._rdbgc0_select), 1)
#define WRITE_RDBGC0_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,RDBGC0_SELECTr_BLKACC,1,RDBGC0_SELECTr_OFFSET,0,&(r._rdbgc0_select), 1)

/*******************************************************************************
 * End of 'RDBGC0_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC1.
 */
#define READ_RDBGC1r(u,p,r) bcmbd_cmicd_reg_port_read(u,RDBGC1r_BLKACC,p,RDBGC1r_OFFSET,0,(r._rdbgc1), 2)
#define WRITE_RDBGC1r(u,p,r) bcmbd_cmicd_reg_port_write(u,RDBGC1r_BLKACC,p,RDBGC1r_OFFSET,0,&(r._rdbgc1), 2)

/*******************************************************************************
 * End of 'RDBGC1r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC1_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC1_SELECT.
 */
#define READ_RDBGC1_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,RDBGC1_SELECTr_BLKACC,1,RDBGC1_SELECTr_OFFSET,0,(r._rdbgc1_select), 1)
#define WRITE_RDBGC1_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,RDBGC1_SELECTr_BLKACC,1,RDBGC1_SELECTr_OFFSET,0,&(r._rdbgc1_select), 1)

/*******************************************************************************
 * End of 'RDBGC1_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC2.
 */
#define READ_RDBGC2r(u,p,r) bcmbd_cmicd_reg_port_read(u,RDBGC2r_BLKACC,p,RDBGC2r_OFFSET,0,(r._rdbgc2), 2)
#define WRITE_RDBGC2r(u,p,r) bcmbd_cmicd_reg_port_write(u,RDBGC2r_BLKACC,p,RDBGC2r_OFFSET,0,&(r._rdbgc2), 2)

/*******************************************************************************
 * End of 'RDBGC2r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC2_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC2_SELECT.
 */
#define READ_RDBGC2_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,RDBGC2_SELECTr_BLKACC,1,RDBGC2_SELECTr_OFFSET,0,(r._rdbgc2_select), 1)
#define WRITE_RDBGC2_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,RDBGC2_SELECTr_BLKACC,1,RDBGC2_SELECTr_OFFSET,0,&(r._rdbgc2_select), 1)

/*******************************************************************************
 * End of 'RDBGC2_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC3.
 */
#define READ_RDBGC3r(u,p,r) bcmbd_cmicd_reg_port_read(u,RDBGC3r_BLKACC,p,RDBGC3r_OFFSET,0,(r._rdbgc3), 2)
#define WRITE_RDBGC3r(u,p,r) bcmbd_cmicd_reg_port_write(u,RDBGC3r_BLKACC,p,RDBGC3r_OFFSET,0,&(r._rdbgc3), 2)

/*******************************************************************************
 * End of 'RDBGC3r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC3_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC3_SELECT.
 */
#define READ_RDBGC3_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,RDBGC3_SELECTr_BLKACC,1,RDBGC3_SELECTr_OFFSET,0,(r._rdbgc3_select), 1)
#define WRITE_RDBGC3_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,RDBGC3_SELECTr_BLKACC,1,RDBGC3_SELECTr_OFFSET,0,&(r._rdbgc3_select), 1)

/*******************************************************************************
 * End of 'RDBGC3_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC4
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC4.
 */
#define READ_RDBGC4r(u,p,r) bcmbd_cmicd_reg_port_read(u,RDBGC4r_BLKACC,p,RDBGC4r_OFFSET,0,(r._rdbgc4), 2)
#define WRITE_RDBGC4r(u,p,r) bcmbd_cmicd_reg_port_write(u,RDBGC4r_BLKACC,p,RDBGC4r_OFFSET,0,&(r._rdbgc4), 2)

/*******************************************************************************
 * End of 'RDBGC4r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC4_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC4_SELECT.
 */
#define READ_RDBGC4_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,RDBGC4_SELECTr_BLKACC,1,RDBGC4_SELECTr_OFFSET,0,(r._rdbgc4_select), 1)
#define WRITE_RDBGC4_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,RDBGC4_SELECTr_BLKACC,1,RDBGC4_SELECTr_OFFSET,0,&(r._rdbgc4_select), 1)

/*******************************************************************************
 * End of 'RDBGC4_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC5
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC5.
 */
#define READ_RDBGC5r(u,p,r) bcmbd_cmicd_reg_port_read(u,RDBGC5r_BLKACC,p,RDBGC5r_OFFSET,0,(r._rdbgc5), 2)
#define WRITE_RDBGC5r(u,p,r) bcmbd_cmicd_reg_port_write(u,RDBGC5r_BLKACC,p,RDBGC5r_OFFSET,0,&(r._rdbgc5), 2)

/*******************************************************************************
 * End of 'RDBGC5r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC5_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC5_SELECT.
 */
#define READ_RDBGC5_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,RDBGC5_SELECTr_BLKACC,1,RDBGC5_SELECTr_OFFSET,0,(r._rdbgc5_select), 1)
#define WRITE_RDBGC5_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,RDBGC5_SELECTr_BLKACC,1,RDBGC5_SELECTr_OFFSET,0,&(r._rdbgc5_select), 1)

/*******************************************************************************
 * End of 'RDBGC5_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC6
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC6.
 */
#define READ_RDBGC6r(u,p,r) bcmbd_cmicd_reg_port_read(u,RDBGC6r_BLKACC,p,RDBGC6r_OFFSET,0,(r._rdbgc6), 2)
#define WRITE_RDBGC6r(u,p,r) bcmbd_cmicd_reg_port_write(u,RDBGC6r_BLKACC,p,RDBGC6r_OFFSET,0,&(r._rdbgc6), 2)

/*******************************************************************************
 * End of 'RDBGC6r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC6_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC6_SELECT.
 */
#define READ_RDBGC6_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,RDBGC6_SELECTr_BLKACC,1,RDBGC6_SELECTr_OFFSET,0,(r._rdbgc6_select), 1)
#define WRITE_RDBGC6_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,RDBGC6_SELECTr_BLKACC,1,RDBGC6_SELECTr_OFFSET,0,&(r._rdbgc6_select), 1)

/*******************************************************************************
 * End of 'RDBGC6_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC7
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC7.
 */
#define READ_RDBGC7r(u,p,r) bcmbd_cmicd_reg_port_read(u,RDBGC7r_BLKACC,p,RDBGC7r_OFFSET,0,(r._rdbgc7), 2)
#define WRITE_RDBGC7r(u,p,r) bcmbd_cmicd_reg_port_write(u,RDBGC7r_BLKACC,p,RDBGC7r_OFFSET,0,&(r._rdbgc7), 2)

/*******************************************************************************
 * End of 'RDBGC7r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC7_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC7_SELECT.
 */
#define READ_RDBGC7_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,RDBGC7_SELECTr_BLKACC,1,RDBGC7_SELECTr_OFFSET,0,(r._rdbgc7_select), 1)
#define WRITE_RDBGC7_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,RDBGC7_SELECTr_BLKACC,1,RDBGC7_SELECTr_OFFSET,0,&(r._rdbgc7_select), 1)

/*******************************************************************************
 * End of 'RDBGC7_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC8
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDBGC8.
 */
#define READ_RDBGC8r(u,p,r) bcmbd_cmicd_reg_port_read(u,RDBGC8r_BLKACC,p,RDBGC8r_OFFSET,0,(r._rdbgc8), 2)
#define WRITE_RDBGC8r(u,p,r) bcmbd_cmicd_reg_port_write(u,RDBGC8r_BLKACC,p,RDBGC8r_OFFSET,0,&(r._rdbgc8), 2)

/*******************************************************************************
 * End of 'RDBGC8r'
 */




/*******************************************************************************
 * REGISTER:  RDBGC8_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC8_SELECT.
 */
#define READ_RDBGC8_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,RDBGC8_SELECTr_BLKACC,1,RDBGC8_SELECTr_OFFSET,0,(r._rdbgc8_select), 1)
#define WRITE_RDBGC8_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,RDBGC8_SELECTr_BLKACC,1,RDBGC8_SELECTr_OFFSET,0,&(r._rdbgc8_select), 1)

/*******************************************************************************
 * End of 'RDBGC8_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  RDBGC_SELECT_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RDBGC_SELECT_2.
 */
#define READ_RDBGC_SELECT_2r(u,i,r) bcmbd_cmicd_reg_block_read(u,RDBGC_SELECT_2r_BLKACC,1,RDBGC_SELECT_2r_OFFSET,i,(r._rdbgc_select_2), 1)
#define WRITE_RDBGC_SELECT_2r(u,i,r) bcmbd_cmicd_reg_block_write(u,RDBGC_SELECT_2r_BLKACC,1,RDBGC_SELECT_2r_OFFSET,i,&(r._rdbgc_select_2), 1)

/*******************************************************************************
 * End of 'RDBGC_SELECT_2r'
 */




/*******************************************************************************
 * REGISTER:  RDISC
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RDISC.
 */
#define READ_RDISCr(u,p,r) bcmbd_cmicd_reg_port_read(u,RDISCr_BLKACC,p,RDISCr_OFFSET,0,(r._rdisc), 2)
#define WRITE_RDISCr(u,p,r) bcmbd_cmicd_reg_port_write(u,RDISCr_BLKACC,p,RDISCr_OFFSET,0,&(r._rdisc), 2)

/*******************************************************************************
 * End of 'RDISCr'
 */




/*******************************************************************************
 * REGISTER:  RDVLN
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RDVLN.
 */
#define READ_RDVLNr(u,p,r) bcmbd_cmicd_reg_port_read(u,RDVLNr_BLKACC,p,RDVLNr_OFFSET,0,(r._rdvln), 2)
#define WRITE_RDVLNr(u,p,r) bcmbd_cmicd_reg_port_write(u,RDVLNr_BLKACC,p,RDVLNr_OFFSET,0,&(r._rdvln), 2)

/*******************************************************************************
 * End of 'RDVLNr'
 */




/*******************************************************************************
 * REGISTER:  REMOTE_CPU_DA_LS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REMOTE_CPU_DA_LS.
 */
#define READ_REMOTE_CPU_DA_LSr(u,r) bcmbd_cmicd_reg_block_read(u,REMOTE_CPU_DA_LSr_BLKACC,1,REMOTE_CPU_DA_LSr_OFFSET,0,(r._remote_cpu_da_ls), 1)
#define WRITE_REMOTE_CPU_DA_LSr(u,r) bcmbd_cmicd_reg_block_write(u,REMOTE_CPU_DA_LSr_BLKACC,1,REMOTE_CPU_DA_LSr_OFFSET,0,&(r._remote_cpu_da_ls), 1)

/*******************************************************************************
 * End of 'REMOTE_CPU_DA_LSr'
 */




/*******************************************************************************
 * REGISTER:  REMOTE_CPU_DA_MS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REMOTE_CPU_DA_MS.
 */
#define READ_REMOTE_CPU_DA_MSr(u,r) bcmbd_cmicd_reg_block_read(u,REMOTE_CPU_DA_MSr_BLKACC,1,REMOTE_CPU_DA_MSr_OFFSET,0,(r._remote_cpu_da_ms), 1)
#define WRITE_REMOTE_CPU_DA_MSr(u,r) bcmbd_cmicd_reg_block_write(u,REMOTE_CPU_DA_MSr_BLKACC,1,REMOTE_CPU_DA_MSr_OFFSET,0,&(r._remote_cpu_da_ms), 1)

/*******************************************************************************
 * End of 'REMOTE_CPU_DA_MSr'
 */




/*******************************************************************************
 * REGISTER:  REMOTE_CPU_LENGTH_TYPE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REMOTE_CPU_LENGTH_TYPE.
 */
#define READ_REMOTE_CPU_LENGTH_TYPEr(u,r) bcmbd_cmicd_reg_block_read(u,REMOTE_CPU_LENGTH_TYPEr_BLKACC,1,REMOTE_CPU_LENGTH_TYPEr_OFFSET,0,(r._remote_cpu_length_type), 1)
#define WRITE_REMOTE_CPU_LENGTH_TYPEr(u,r) bcmbd_cmicd_reg_block_write(u,REMOTE_CPU_LENGTH_TYPEr_BLKACC,1,REMOTE_CPU_LENGTH_TYPEr_OFFSET,0,&(r._remote_cpu_length_type), 1)

/*******************************************************************************
 * End of 'REMOTE_CPU_LENGTH_TYPEr'
 */




/*******************************************************************************
 * MEMORY:  REPLICATION_FIFO_BANK0
 * BLOCKS:   MMU_XPE
 * SIZE:     132
 */
/*
 * These macros can be used to access REPLICATION_FIFO_BANK0.
 */
#define READ_REPLICATION_FIFO_BANK0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,REPLICATION_FIFO_BANK0m_BLKACC,3,0,p,REPLICATION_FIFO_BANK0m_OFFSET,i,(m._replication_fifo_bank0),5)
#define WRITE_REPLICATION_FIFO_BANK0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,REPLICATION_FIFO_BANK0m_BLKACC,3,0,p,REPLICATION_FIFO_BANK0m_OFFSET,i,&(m._replication_fifo_bank0),5)

/*******************************************************************************
 * End of 'REPLICATION_FIFO_BANK0m'
 */




/*******************************************************************************
 * MEMORY:  REPLICATION_FIFO_BANK1
 * BLOCKS:   MMU_XPE
 * SIZE:     132
 */
/*
 * These macros can be used to access REPLICATION_FIFO_BANK1.
 */
#define READ_REPLICATION_FIFO_BANK1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,REPLICATION_FIFO_BANK1m_BLKACC,3,0,p,REPLICATION_FIFO_BANK1m_OFFSET,i,(m._replication_fifo_bank1),5)
#define WRITE_REPLICATION_FIFO_BANK1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,REPLICATION_FIFO_BANK1m_BLKACC,3,0,p,REPLICATION_FIFO_BANK1m_OFFSET,i,&(m._replication_fifo_bank1),5)

/*******************************************************************************
 * End of 'REPLICATION_FIFO_BANK1m'
 */




/*******************************************************************************
 * REGISTER:  REPLICATION_FIFO_DEBUG_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REPLICATION_FIFO_DEBUG_TM.
 */
#define READ_REPLICATION_FIFO_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,REPLICATION_FIFO_DEBUG_TMr_BLKACC,3,0,p,REPLICATION_FIFO_DEBUG_TMr_OFFSET,0,(r._replication_fifo_debug_tm),1)
#define WRITE_REPLICATION_FIFO_DEBUG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,REPLICATION_FIFO_DEBUG_TMr_BLKACC,3,0,p,REPLICATION_FIFO_DEBUG_TMr_OFFSET,0,&(r._replication_fifo_debug_tm),1)

/*******************************************************************************
 * End of 'REPLICATION_FIFO_DEBUG_TMr'
 */




/*******************************************************************************
 * REGISTER:  REP_FIFO_SNAPSHOT_DONE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REP_FIFO_SNAPSHOT_DONE.
 */
#define READ_REP_FIFO_SNAPSHOT_DONEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,REP_FIFO_SNAPSHOT_DONEr_BLKACC,3,0,p,REP_FIFO_SNAPSHOT_DONEr_OFFSET,0,(r._rep_fifo_snapshot_done),1)
#define WRITE_REP_FIFO_SNAPSHOT_DONEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,REP_FIFO_SNAPSHOT_DONEr_BLKACC,3,0,p,REP_FIFO_SNAPSHOT_DONEr_OFFSET,0,&(r._rep_fifo_snapshot_done),1)

/*******************************************************************************
 * End of 'REP_FIFO_SNAPSHOT_DONEr'
 */




/*******************************************************************************
 * REGISTER:  REP_FIFO_SNAPSHOT_EN
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REP_FIFO_SNAPSHOT_EN.
 */
#define READ_REP_FIFO_SNAPSHOT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,REP_FIFO_SNAPSHOT_ENr_BLKACC,3,0,p,REP_FIFO_SNAPSHOT_ENr_OFFSET,0,(r._rep_fifo_snapshot_en),1)
#define WRITE_REP_FIFO_SNAPSHOT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,REP_FIFO_SNAPSHOT_ENr_BLKACC,3,0,p,REP_FIFO_SNAPSHOT_ENr_OFFSET,0,&(r._rep_fifo_snapshot_en),1)

/*******************************************************************************
 * End of 'REP_FIFO_SNAPSHOT_ENr'
 */




/*******************************************************************************
 * REGISTER:  REP_FIFO_SNAPSHOT_INIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REP_FIFO_SNAPSHOT_INIT.
 */
#define READ_REP_FIFO_SNAPSHOT_INITr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,REP_FIFO_SNAPSHOT_INITr_BLKACC,3,0,p,REP_FIFO_SNAPSHOT_INITr_OFFSET,0,(r._rep_fifo_snapshot_init),1)
#define WRITE_REP_FIFO_SNAPSHOT_INITr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,REP_FIFO_SNAPSHOT_INITr_BLKACC,3,0,p,REP_FIFO_SNAPSHOT_INITr_OFFSET,0,&(r._rep_fifo_snapshot_init),1)

/*******************************************************************************
 * End of 'REP_FIFO_SNAPSHOT_INITr'
 */




/*******************************************************************************
 * REGISTER:  REP_ID_REMAP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access REP_ID_REMAP_CONTROL.
 */
#define READ_REP_ID_REMAP_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,REP_ID_REMAP_CONTROLr_BLKACC,1,REP_ID_REMAP_CONTROLr_OFFSET,0,(r._rep_id_remap_control), 1)
#define WRITE_REP_ID_REMAP_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,REP_ID_REMAP_CONTROLr_BLKACC,1,REP_ID_REMAP_CONTROLr_OFFSET,0,&(r._rep_id_remap_control), 1)

/*******************************************************************************
 * End of 'REP_ID_REMAP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  RERPKT
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RERPKT.
 */
#define READ_RERPKTr(u,p,r) bcmbd_cmicd_reg_port_read(u,RERPKTr_BLKACC,p,RERPKTr_OFFSET,0,(r._rerpkt), 2)
#define WRITE_RERPKTr(u,p,r) bcmbd_cmicd_reg_port_write(u,RERPKTr_BLKACC,p,RERPKTr_OFFSET,0,&(r._rerpkt), 2)

/*******************************************************************************
 * End of 'RERPKTr'
 */




/*******************************************************************************
 * MEMORY:  RESPONSIVE_PROTOCOL_MATCH
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RESPONSIVE_PROTOCOL_MATCH.
 */
#define READ_RESPONSIVE_PROTOCOL_MATCHm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(RESPONSIVE_PROTOCOL_MATCHm_BLKACC)+1,RESPONSIVE_PROTOCOL_MATCHm_OFFSET+i,(m._responsive_protocol_match),2)
#define WRITE_RESPONSIVE_PROTOCOL_MATCHm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(RESPONSIVE_PROTOCOL_MATCHm_BLKACC)+1,RESPONSIVE_PROTOCOL_MATCHm_OFFSET+i,&(m._responsive_protocol_match),2)

/*******************************************************************************
 * End of 'RESPONSIVE_PROTOCOL_MATCHm'
 */




/*******************************************************************************
 * REGISTER:  RFCR
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RFCR.
 */
#define READ_RFCRr(u,p,r) bcmbd_cmicd_reg_port_read(u,RFCRr_BLKACC,p,RFCRr_OFFSET,0,(r._rfcr), 2)
#define WRITE_RFCRr(u,p,r) bcmbd_cmicd_reg_port_write(u,RFCRr_BLKACC,p,RFCRr_OFFSET,0,&(r._rfcr), 2)

/*******************************************************************************
 * End of 'RFCRr'
 */




/*******************************************************************************
 * REGISTER:  RFCS
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RFCS.
 */
#define READ_RFCSr(u,p,r) bcmbd_cmicd_reg_port_read(u,RFCSr_BLKACC,p,RFCSr_OFFSET,0,(r._rfcs), 2)
#define WRITE_RFCSr(u,p,r) bcmbd_cmicd_reg_port_write(u,RFCSr_BLKACC,p,RFCSr_OFFSET,0,&(r._rfcs), 2)

/*******************************************************************************
 * End of 'RFCSr'
 */




/*******************************************************************************
 * REGISTER:  RFLR
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RFLR.
 */
#define READ_RFLRr(u,p,r) bcmbd_cmicd_reg_port_read(u,RFLRr_BLKACC,p,RFLRr_OFFSET,0,(r._rflr), 2)
#define WRITE_RFLRr(u,p,r) bcmbd_cmicd_reg_port_write(u,RFLRr_BLKACC,p,RFLRr_OFFSET,0,&(r._rflr), 2)

/*******************************************************************************
 * End of 'RFLRr'
 */




/*******************************************************************************
 * REGISTER:  RFRG
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RFRG.
 */
#define READ_RFRGr(u,p,r) bcmbd_cmicd_reg_port_read(u,RFRGr_BLKACC,p,RFRGr_OFFSET,0,(r._rfrg), 2)
#define WRITE_RFRGr(u,p,r) bcmbd_cmicd_reg_port_write(u,RFRGr_BLKACC,p,RFRGr_OFFSET,0,&(r._rfrg), 2)

/*******************************************************************************
 * End of 'RFRGr'
 */




/*******************************************************************************
 * REGISTER:  RIPC4
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPC4.
 */
#define READ_RIPC4r(u,p,r) bcmbd_cmicd_reg_port_read(u,RIPC4r_BLKACC,p,RIPC4r_OFFSET,0,(r._ripc4), 2)
#define WRITE_RIPC4r(u,p,r) bcmbd_cmicd_reg_port_write(u,RIPC4r_BLKACC,p,RIPC4r_OFFSET,0,&(r._ripc4), 2)

/*******************************************************************************
 * End of 'RIPC4r'
 */




/*******************************************************************************
 * REGISTER:  RIPC6
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPC6.
 */
#define READ_RIPC6r(u,p,r) bcmbd_cmicd_reg_port_read(u,RIPC6r_BLKACC,p,RIPC6r_OFFSET,0,(r._ripc6), 2)
#define WRITE_RIPC6r(u,p,r) bcmbd_cmicd_reg_port_write(u,RIPC6r_BLKACC,p,RIPC6r_OFFSET,0,&(r._ripc6), 2)

/*******************************************************************************
 * End of 'RIPC6r'
 */




/*******************************************************************************
 * REGISTER:  RIPD4
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPD4.
 */
#define READ_RIPD4r(u,p,r) bcmbd_cmicd_reg_port_read(u,RIPD4r_BLKACC,p,RIPD4r_OFFSET,0,(r._ripd4), 2)
#define WRITE_RIPD4r(u,p,r) bcmbd_cmicd_reg_port_write(u,RIPD4r_BLKACC,p,RIPD4r_OFFSET,0,&(r._ripd4), 2)

/*******************************************************************************
 * End of 'RIPD4r'
 */




/*******************************************************************************
 * REGISTER:  RIPD6
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPD6.
 */
#define READ_RIPD6r(u,p,r) bcmbd_cmicd_reg_port_read(u,RIPD6r_BLKACC,p,RIPD6r_OFFSET,0,(r._ripd6), 2)
#define WRITE_RIPD6r(u,p,r) bcmbd_cmicd_reg_port_write(u,RIPD6r_BLKACC,p,RIPD6r_OFFSET,0,&(r._ripd6), 2)

/*******************************************************************************
 * End of 'RIPD6r'
 */




/*******************************************************************************
 * REGISTER:  RIPHE4
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPHE4.
 */
#define READ_RIPHE4r(u,p,r) bcmbd_cmicd_reg_port_read(u,RIPHE4r_BLKACC,p,RIPHE4r_OFFSET,0,(r._riphe4), 2)
#define WRITE_RIPHE4r(u,p,r) bcmbd_cmicd_reg_port_write(u,RIPHE4r_BLKACC,p,RIPHE4r_OFFSET,0,&(r._riphe4), 2)

/*******************************************************************************
 * End of 'RIPHE4r'
 */




/*******************************************************************************
 * REGISTER:  RIPHE6
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RIPHE6.
 */
#define READ_RIPHE6r(u,p,r) bcmbd_cmicd_reg_port_read(u,RIPHE6r_BLKACC,p,RIPHE6r_OFFSET,0,(r._riphe6), 2)
#define WRITE_RIPHE6r(u,p,r) bcmbd_cmicd_reg_port_write(u,RIPHE6r_BLKACC,p,RIPHE6r_OFFSET,0,&(r._riphe6), 2)

/*******************************************************************************
 * End of 'RIPHE6r'
 */




/*******************************************************************************
 * REGISTER:  RJBR
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RJBR.
 */
#define READ_RJBRr(u,p,r) bcmbd_cmicd_reg_port_read(u,RJBRr_BLKACC,p,RJBRr_OFFSET,0,(r._rjbr), 2)
#define WRITE_RJBRr(u,p,r) bcmbd_cmicd_reg_port_write(u,RJBRr_BLKACC,p,RJBRr_OFFSET,0,&(r._rjbr), 2)

/*******************************************************************************
 * End of 'RJBRr'
 */




/*******************************************************************************
 * REGISTER:  RMCA
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RMCA.
 */
#define READ_RMCAr(u,p,r) bcmbd_cmicd_reg_port_read(u,RMCAr_BLKACC,p,RMCAr_OFFSET,0,(r._rmca), 2)
#define WRITE_RMCAr(u,p,r) bcmbd_cmicd_reg_port_write(u,RMCAr_BLKACC,p,RMCAr_OFFSET,0,&(r._rmca), 2)

/*******************************************************************************
 * End of 'RMCAr'
 */




/*******************************************************************************
 * REGISTER:  RMCRC
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RMCRC.
 */
#define READ_RMCRCr(u,p,r) bcmbd_cmicd_reg_port_read(u,RMCRCr_BLKACC,p,RMCRCr_OFFSET,0,(r._rmcrc), 2)
#define WRITE_RMCRCr(u,p,r) bcmbd_cmicd_reg_port_write(u,RMCRCr_BLKACC,p,RMCRCr_OFFSET,0,&(r._rmcrc), 2)

/*******************************************************************************
 * End of 'RMCRCr'
 */




/*******************************************************************************
 * REGISTER:  RMGV
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RMGV.
 */
#define READ_RMGVr(u,p,r) bcmbd_cmicd_reg_port_read(u,RMGVr_BLKACC,p,RMGVr_OFFSET,0,(r._rmgv), 2)
#define WRITE_RMGVr(u,p,r) bcmbd_cmicd_reg_port_write(u,RMGVr_BLKACC,p,RMGVr_OFFSET,0,&(r._rmgv), 2)

/*******************************************************************************
 * End of 'RMGVr'
 */




/*******************************************************************************
 * REGISTER:  RMTUE
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RMTUE.
 */
#define READ_RMTUEr(u,p,r) bcmbd_cmicd_reg_port_read(u,RMTUEr_BLKACC,p,RMTUEr_OFFSET,0,(r._rmtue), 2)
#define WRITE_RMTUEr(u,p,r) bcmbd_cmicd_reg_port_write(u,RMTUEr_BLKACC,p,RMTUEr_OFFSET,0,&(r._rmtue), 2)

/*******************************************************************************
 * End of 'RMTUEr'
 */




/*******************************************************************************
 * REGISTER:  ROVR
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access ROVR.
 */
#define READ_ROVRr(u,p,r) bcmbd_cmicd_reg_port_read(u,ROVRr_BLKACC,p,ROVRr_OFFSET,0,(r._rovr), 2)
#define WRITE_ROVRr(u,p,r) bcmbd_cmicd_reg_port_write(u,ROVRr_BLKACC,p,ROVRr_OFFSET,0,&(r._rovr), 2)

/*******************************************************************************
 * End of 'ROVRr'
 */




/*******************************************************************************
 * REGISTER:  RPFC
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFC.
 */
#define READ_RPFCr(u,p,i,r) bcmbd_cmicd_reg_port_read(u,RPFCr_BLKACC,p,RPFCr_OFFSET,i,(r._rpfc), 2)
#define WRITE_RPFCr(u,p,i,r) bcmbd_cmicd_reg_port_write(u,RPFCr_BLKACC,p,RPFCr_OFFSET,i,&(r._rpfc), 2)

/*******************************************************************************
 * End of 'RPFCr'
 */




/*******************************************************************************
 * REGISTER:  RPFC0
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFC0.
 */
#define READ_RPFC0r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFC0r_BLKACC,p,RPFC0r_OFFSET,0,(r._rpfc0), 2)
#define WRITE_RPFC0r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFC0r_BLKACC,p,RPFC0r_OFFSET,0,&(r._rpfc0), 2)

/*******************************************************************************
 * End of 'RPFC0r'
 */




/*******************************************************************************
 * REGISTER:  RPFC1
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFC1.
 */
#define READ_RPFC1r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFC1r_BLKACC,p,RPFC1r_OFFSET,0,(r._rpfc1), 2)
#define WRITE_RPFC1r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFC1r_BLKACC,p,RPFC1r_OFFSET,0,&(r._rpfc1), 2)

/*******************************************************************************
 * End of 'RPFC1r'
 */




/*******************************************************************************
 * REGISTER:  RPFC2
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFC2.
 */
#define READ_RPFC2r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFC2r_BLKACC,p,RPFC2r_OFFSET,0,(r._rpfc2), 2)
#define WRITE_RPFC2r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFC2r_BLKACC,p,RPFC2r_OFFSET,0,&(r._rpfc2), 2)

/*******************************************************************************
 * End of 'RPFC2r'
 */




/*******************************************************************************
 * REGISTER:  RPFC3
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFC3.
 */
#define READ_RPFC3r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFC3r_BLKACC,p,RPFC3r_OFFSET,0,(r._rpfc3), 2)
#define WRITE_RPFC3r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFC3r_BLKACC,p,RPFC3r_OFFSET,0,&(r._rpfc3), 2)

/*******************************************************************************
 * End of 'RPFC3r'
 */




/*******************************************************************************
 * REGISTER:  RPFC4
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFC4.
 */
#define READ_RPFC4r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFC4r_BLKACC,p,RPFC4r_OFFSET,0,(r._rpfc4), 2)
#define WRITE_RPFC4r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFC4r_BLKACC,p,RPFC4r_OFFSET,0,&(r._rpfc4), 2)

/*******************************************************************************
 * End of 'RPFC4r'
 */




/*******************************************************************************
 * REGISTER:  RPFC5
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFC5.
 */
#define READ_RPFC5r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFC5r_BLKACC,p,RPFC5r_OFFSET,0,(r._rpfc5), 2)
#define WRITE_RPFC5r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFC5r_BLKACC,p,RPFC5r_OFFSET,0,&(r._rpfc5), 2)

/*******************************************************************************
 * End of 'RPFC5r'
 */




/*******************************************************************************
 * REGISTER:  RPFC6
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFC6.
 */
#define READ_RPFC6r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFC6r_BLKACC,p,RPFC6r_OFFSET,0,(r._rpfc6), 2)
#define WRITE_RPFC6r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFC6r_BLKACC,p,RPFC6r_OFFSET,0,&(r._rpfc6), 2)

/*******************************************************************************
 * End of 'RPFC6r'
 */




/*******************************************************************************
 * REGISTER:  RPFC7
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFC7.
 */
#define READ_RPFC7r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFC7r_BLKACC,p,RPFC7r_OFFSET,0,(r._rpfc7), 2)
#define WRITE_RPFC7r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFC7r_BLKACC,p,RPFC7r_OFFSET,0,&(r._rpfc7), 2)

/*******************************************************************************
 * End of 'RPFC7r'
 */




/*******************************************************************************
 * REGISTER:  RPFCOFF
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFCOFF.
 */
#define READ_RPFCOFFr(u,p,i,r) bcmbd_cmicd_reg_port_read(u,RPFCOFFr_BLKACC,p,RPFCOFFr_OFFSET,i,(r._rpfcoff), 2)
#define WRITE_RPFCOFFr(u,p,i,r) bcmbd_cmicd_reg_port_write(u,RPFCOFFr_BLKACC,p,RPFCOFFr_OFFSET,i,&(r._rpfcoff), 2)

/*******************************************************************************
 * End of 'RPFCOFFr'
 */




/*******************************************************************************
 * REGISTER:  RPFCOFF0
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFCOFF0.
 */
#define READ_RPFCOFF0r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFCOFF0r_BLKACC,p,RPFCOFF0r_OFFSET,0,(r._rpfcoff0), 2)
#define WRITE_RPFCOFF0r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFCOFF0r_BLKACC,p,RPFCOFF0r_OFFSET,0,&(r._rpfcoff0), 2)

/*******************************************************************************
 * End of 'RPFCOFF0r'
 */




/*******************************************************************************
 * REGISTER:  RPFCOFF1
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFCOFF1.
 */
#define READ_RPFCOFF1r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFCOFF1r_BLKACC,p,RPFCOFF1r_OFFSET,0,(r._rpfcoff1), 2)
#define WRITE_RPFCOFF1r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFCOFF1r_BLKACC,p,RPFCOFF1r_OFFSET,0,&(r._rpfcoff1), 2)

/*******************************************************************************
 * End of 'RPFCOFF1r'
 */




/*******************************************************************************
 * REGISTER:  RPFCOFF2
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFCOFF2.
 */
#define READ_RPFCOFF2r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFCOFF2r_BLKACC,p,RPFCOFF2r_OFFSET,0,(r._rpfcoff2), 2)
#define WRITE_RPFCOFF2r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFCOFF2r_BLKACC,p,RPFCOFF2r_OFFSET,0,&(r._rpfcoff2), 2)

/*******************************************************************************
 * End of 'RPFCOFF2r'
 */




/*******************************************************************************
 * REGISTER:  RPFCOFF3
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFCOFF3.
 */
#define READ_RPFCOFF3r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFCOFF3r_BLKACC,p,RPFCOFF3r_OFFSET,0,(r._rpfcoff3), 2)
#define WRITE_RPFCOFF3r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFCOFF3r_BLKACC,p,RPFCOFF3r_OFFSET,0,&(r._rpfcoff3), 2)

/*******************************************************************************
 * End of 'RPFCOFF3r'
 */




/*******************************************************************************
 * REGISTER:  RPFCOFF4
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFCOFF4.
 */
#define READ_RPFCOFF4r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFCOFF4r_BLKACC,p,RPFCOFF4r_OFFSET,0,(r._rpfcoff4), 2)
#define WRITE_RPFCOFF4r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFCOFF4r_BLKACC,p,RPFCOFF4r_OFFSET,0,&(r._rpfcoff4), 2)

/*******************************************************************************
 * End of 'RPFCOFF4r'
 */




/*******************************************************************************
 * REGISTER:  RPFCOFF5
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFCOFF5.
 */
#define READ_RPFCOFF5r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFCOFF5r_BLKACC,p,RPFCOFF5r_OFFSET,0,(r._rpfcoff5), 2)
#define WRITE_RPFCOFF5r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFCOFF5r_BLKACC,p,RPFCOFF5r_OFFSET,0,&(r._rpfcoff5), 2)

/*******************************************************************************
 * End of 'RPFCOFF5r'
 */




/*******************************************************************************
 * REGISTER:  RPFCOFF6
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFCOFF6.
 */
#define READ_RPFCOFF6r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFCOFF6r_BLKACC,p,RPFCOFF6r_OFFSET,0,(r._rpfcoff6), 2)
#define WRITE_RPFCOFF6r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFCOFF6r_BLKACC,p,RPFCOFF6r_OFFSET,0,&(r._rpfcoff6), 2)

/*******************************************************************************
 * End of 'RPFCOFF6r'
 */




/*******************************************************************************
 * REGISTER:  RPFCOFF7
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPFCOFF7.
 */
#define READ_RPFCOFF7r(u,p,r) bcmbd_cmicd_reg_port_read(u,RPFCOFF7r_BLKACC,p,RPFCOFF7r_OFFSET,0,(r._rpfcoff7), 2)
#define WRITE_RPFCOFF7r(u,p,r) bcmbd_cmicd_reg_port_write(u,RPFCOFF7r_BLKACC,p,RPFCOFF7r_OFFSET,0,&(r._rpfcoff7), 2)

/*******************************************************************************
 * End of 'RPFCOFF7r'
 */




/*******************************************************************************
 * REGISTER:  RPKT
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPKT.
 */
#define READ_RPKTr(u,p,r) bcmbd_cmicd_reg_port_read(u,RPKTr_BLKACC,p,RPKTr_OFFSET,0,(r._rpkt), 2)
#define WRITE_RPKTr(u,p,r) bcmbd_cmicd_reg_port_write(u,RPKTr_BLKACC,p,RPKTr_OFFSET,0,&(r._rpkt), 2)

/*******************************************************************************
 * End of 'RPKTr'
 */




/*******************************************************************************
 * REGISTER:  RPOK
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPOK.
 */
#define READ_RPOKr(u,p,r) bcmbd_cmicd_reg_port_read(u,RPOKr_BLKACC,p,RPOKr_OFFSET,0,(r._rpok), 2)
#define WRITE_RPOKr(u,p,r) bcmbd_cmicd_reg_port_write(u,RPOKr_BLKACC,p,RPOKr_OFFSET,0,&(r._rpok), 2)

/*******************************************************************************
 * End of 'RPOKr'
 */




/*******************************************************************************
 * REGISTER:  RPORTD
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RPORTD.
 */
#define READ_RPORTDr(u,p,r) bcmbd_cmicd_reg_port_read(u,RPORTDr_BLKACC,p,RPORTDr_OFFSET,0,(r._rportd), 2)
#define WRITE_RPORTDr(u,p,r) bcmbd_cmicd_reg_port_write(u,RPORTDr_BLKACC,p,RPORTDr_OFFSET,0,&(r._rportd), 2)

/*******************************************************************************
 * End of 'RPORTDr'
 */




/*******************************************************************************
 * REGISTER:  RPRM
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RPRM.
 */
#define READ_RPRMr(u,p,r) bcmbd_cmicd_reg_port_read(u,RPRMr_BLKACC,p,RPRMr_OFFSET,0,(r._rprm), 2)
#define WRITE_RPRMr(u,p,r) bcmbd_cmicd_reg_port_write(u,RPRMr_BLKACC,p,RPRMr_OFFSET,0,&(r._rprm), 2)

/*******************************************************************************
 * End of 'RPRMr'
 */




/*******************************************************************************
 * REGISTER:  RQE_DEBUG_FREE_LIST_MEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_DEBUG_FREE_LIST_MEM.
 */
#define READ_RQE_DEBUG_FREE_LIST_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_DEBUG_FREE_LIST_MEMr_BLKACC,3,0,p,RQE_DEBUG_FREE_LIST_MEMr_OFFSET,0,(r._rqe_debug_free_list_mem),1)
#define WRITE_RQE_DEBUG_FREE_LIST_MEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_DEBUG_FREE_LIST_MEMr_BLKACC,3,0,p,RQE_DEBUG_FREE_LIST_MEMr_OFFSET,0,&(r._rqe_debug_free_list_mem),1)

/*******************************************************************************
 * End of 'RQE_DEBUG_FREE_LIST_MEMr'
 */




/*******************************************************************************
 * REGISTER:  RQE_DEBUG_FREE_LIST_OOP_CLR
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_DEBUG_FREE_LIST_OOP_CLR.
 */
#define READ_RQE_DEBUG_FREE_LIST_OOP_CLRr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_DEBUG_FREE_LIST_OOP_CLRr_BLKACC,3,0,p,RQE_DEBUG_FREE_LIST_OOP_CLRr_OFFSET,0,(r._rqe_debug_free_list_oop_clr),1)
#define WRITE_RQE_DEBUG_FREE_LIST_OOP_CLRr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_DEBUG_FREE_LIST_OOP_CLRr_BLKACC,3,0,p,RQE_DEBUG_FREE_LIST_OOP_CLRr_OFFSET,0,&(r._rqe_debug_free_list_oop_clr),1)

/*******************************************************************************
 * End of 'RQE_DEBUG_FREE_LIST_OOP_CLRr'
 */




/*******************************************************************************
 * REGISTER:  RQE_DEBUG_SAME_PORT_THDM_ERROR
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_DEBUG_SAME_PORT_THDM_ERROR.
 */
#define READ_RQE_DEBUG_SAME_PORT_THDM_ERRORr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_DEBUG_SAME_PORT_THDM_ERRORr_BLKACC,3,0,p,RQE_DEBUG_SAME_PORT_THDM_ERRORr_OFFSET,0,(r._rqe_debug_same_port_thdm_error),1)
#define WRITE_RQE_DEBUG_SAME_PORT_THDM_ERRORr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_DEBUG_SAME_PORT_THDM_ERRORr_BLKACC,3,0,p,RQE_DEBUG_SAME_PORT_THDM_ERRORr_OFFSET,0,&(r._rqe_debug_same_port_thdm_error),1)

/*******************************************************************************
 * End of 'RQE_DEBUG_SAME_PORT_THDM_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  RQE_DEBUG_THDM_CHOKE_COUNTER
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_DEBUG_THDM_CHOKE_COUNTER.
 */
#define READ_RQE_DEBUG_THDM_CHOKE_COUNTERr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_DEBUG_THDM_CHOKE_COUNTERr_BLKACC,3,0,p,RQE_DEBUG_THDM_CHOKE_COUNTERr_OFFSET,0,(r._rqe_debug_thdm_choke_counter),1)
#define WRITE_RQE_DEBUG_THDM_CHOKE_COUNTERr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_DEBUG_THDM_CHOKE_COUNTERr_BLKACC,3,0,p,RQE_DEBUG_THDM_CHOKE_COUNTERr_OFFSET,0,&(r._rqe_debug_thdm_choke_counter),1)

/*******************************************************************************
 * End of 'RQE_DEBUG_THDM_CHOKE_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  RQE_ENABLE_SINGLE_PACKET_MODE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_ENABLE_SINGLE_PACKET_MODE.
 */
#define READ_RQE_ENABLE_SINGLE_PACKET_MODEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_ENABLE_SINGLE_PACKET_MODEr_BLKACC,3,0,p,RQE_ENABLE_SINGLE_PACKET_MODEr_OFFSET,0,(r._rqe_enable_single_packet_mode),1)
#define WRITE_RQE_ENABLE_SINGLE_PACKET_MODEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_ENABLE_SINGLE_PACKET_MODEr_BLKACC,3,0,p,RQE_ENABLE_SINGLE_PACKET_MODEr_OFFSET,0,&(r._rqe_enable_single_packet_mode),1)

/*******************************************************************************
 * End of 'RQE_ENABLE_SINGLE_PACKET_MODEr'
 */




/*******************************************************************************
 * REGISTER:  RQE_ENABLE_THDM_PAUSE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_ENABLE_THDM_PAUSE.
 */
#define READ_RQE_ENABLE_THDM_PAUSEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_ENABLE_THDM_PAUSEr_BLKACC,3,0,p,RQE_ENABLE_THDM_PAUSEr_OFFSET,0,(r._rqe_enable_thdm_pause),1)
#define WRITE_RQE_ENABLE_THDM_PAUSEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_ENABLE_THDM_PAUSEr_BLKACC,3,0,p,RQE_ENABLE_THDM_PAUSEr_OFFSET,0,&(r._rqe_enable_thdm_pause),1)

/*******************************************************************************
 * End of 'RQE_ENABLE_THDM_PAUSEr'
 */




/*******************************************************************************
 * REGISTER:  RQE_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_EN_COR_ERR_RPT.
 */
#define READ_RQE_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_EN_COR_ERR_RPTr_BLKACC,3,0,p,RQE_EN_COR_ERR_RPTr_OFFSET,0,(r._rqe_en_cor_err_rpt),1)
#define WRITE_RQE_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_EN_COR_ERR_RPTr_BLKACC,3,0,p,RQE_EN_COR_ERR_RPTr_OFFSET,0,&(r._rqe_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'RQE_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * MEMORY:  RQE_FREE_LIST
 * BLOCKS:   MMU_XPE
 * SIZE:     12
 */
/*
 * These macros can be used to access RQE_FREE_LIST.
 */
#define READ_RQE_FREE_LISTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,RQE_FREE_LISTm_BLKACC,3,0,p,RQE_FREE_LISTm_OFFSET,i,(m._rqe_free_list),1)
#define WRITE_RQE_FREE_LISTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,RQE_FREE_LISTm_BLKACC,3,0,p,RQE_FREE_LISTm_OFFSET,i,&(m._rqe_free_list),1)

/*******************************************************************************
 * End of 'RQE_FREE_LISTm'
 */




/*******************************************************************************
 * MEMORY:  RQE_LINK_LIST
 * BLOCKS:   MMU_XPE
 * SIZE:     12
 */
/*
 * These macros can be used to access RQE_LINK_LIST.
 */
#define READ_RQE_LINK_LISTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,RQE_LINK_LISTm_BLKACC,3,0,p,RQE_LINK_LISTm_OFFSET,i,(m._rqe_link_list),1)
#define WRITE_RQE_LINK_LISTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,RQE_LINK_LISTm_BLKACC,3,0,p,RQE_LINK_LISTm_OFFSET,i,&(m._rqe_link_list),1)

/*******************************************************************************
 * End of 'RQE_LINK_LISTm'
 */




/*******************************************************************************
 * REGISTER:  RQE_MAX_SHAPER_EN
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_MAX_SHAPER_EN.
 */
#define READ_RQE_MAX_SHAPER_ENr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_MAX_SHAPER_ENr_BLKACC,3,0,p,RQE_MAX_SHAPER_ENr_OFFSET,i,(r._rqe_max_shaper_en),1)
#define WRITE_RQE_MAX_SHAPER_ENr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_MAX_SHAPER_ENr_BLKACC,3,0,p,RQE_MAX_SHAPER_ENr_OFFSET,i,&(r._rqe_max_shaper_en),1)

/*******************************************************************************
 * End of 'RQE_MAX_SHAPER_ENr'
 */




/*******************************************************************************
 * REGISTER:  RQE_MAX_SHAPER_LIMIT_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_MAX_SHAPER_LIMIT_COUNT.
 */
#define READ_RQE_MAX_SHAPER_LIMIT_COUNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_MAX_SHAPER_LIMIT_COUNTr_BLKACC,3,0,p,RQE_MAX_SHAPER_LIMIT_COUNTr_OFFSET,i,(r._rqe_max_shaper_limit_count),1)
#define WRITE_RQE_MAX_SHAPER_LIMIT_COUNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_MAX_SHAPER_LIMIT_COUNTr_BLKACC,3,0,p,RQE_MAX_SHAPER_LIMIT_COUNTr_OFFSET,i,&(r._rqe_max_shaper_limit_count),1)

/*******************************************************************************
 * End of 'RQE_MAX_SHAPER_LIMIT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  RQE_MAX_SHAPER_RATE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_MAX_SHAPER_RATE.
 */
#define READ_RQE_MAX_SHAPER_RATEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_MAX_SHAPER_RATEr_BLKACC,3,0,p,RQE_MAX_SHAPER_RATEr_OFFSET,i,(r._rqe_max_shaper_rate),1)
#define WRITE_RQE_MAX_SHAPER_RATEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_MAX_SHAPER_RATEr_BLKACC,3,0,p,RQE_MAX_SHAPER_RATEr_OFFSET,i,&(r._rqe_max_shaper_rate),1)

/*******************************************************************************
 * End of 'RQE_MAX_SHAPER_RATEr'
 */




/*******************************************************************************
 * REGISTER:  RQE_MAX_SHAPER_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_MAX_SHAPER_THRESHOLD.
 */
#define READ_RQE_MAX_SHAPER_THRESHOLDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_MAX_SHAPER_THRESHOLDr_BLKACC,3,0,p,RQE_MAX_SHAPER_THRESHOLDr_OFFSET,i,(r._rqe_max_shaper_threshold),1)
#define WRITE_RQE_MAX_SHAPER_THRESHOLDr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_MAX_SHAPER_THRESHOLDr_BLKACC,3,0,p,RQE_MAX_SHAPER_THRESHOLDr_OFFSET,i,&(r._rqe_max_shaper_threshold),1)

/*******************************************************************************
 * End of 'RQE_MAX_SHAPER_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  RQE_MAX_SHAPER_THRESHOLD_CLEAR
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_MAX_SHAPER_THRESHOLD_CLEAR.
 */
#define READ_RQE_MAX_SHAPER_THRESHOLD_CLEARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_MAX_SHAPER_THRESHOLD_CLEARr_BLKACC,3,0,p,RQE_MAX_SHAPER_THRESHOLD_CLEARr_OFFSET,i,(r._rqe_max_shaper_threshold_clear),1)
#define WRITE_RQE_MAX_SHAPER_THRESHOLD_CLEARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_MAX_SHAPER_THRESHOLD_CLEARr_BLKACC,3,0,p,RQE_MAX_SHAPER_THRESHOLD_CLEARr_OFFSET,i,&(r._rqe_max_shaper_threshold_clear),1)

/*******************************************************************************
 * End of 'RQE_MAX_SHAPER_THRESHOLD_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  RQE_PRIORITY_QUEUE_ENTRY
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_PRIORITY_QUEUE_ENTRY.
 */
#define READ_RQE_PRIORITY_QUEUE_ENTRYr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_PRIORITY_QUEUE_ENTRYr_BLKACC,3,0,p,RQE_PRIORITY_QUEUE_ENTRYr_OFFSET,i,(r._rqe_priority_queue_entry),1)
#define WRITE_RQE_PRIORITY_QUEUE_ENTRYr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_PRIORITY_QUEUE_ENTRYr_BLKACC,3,0,p,RQE_PRIORITY_QUEUE_ENTRYr_OFFSET,i,&(r._rqe_priority_queue_entry),1)

/*******************************************************************************
 * End of 'RQE_PRIORITY_QUEUE_ENTRYr'
 */




/*******************************************************************************
 * REGISTER:  RQE_PRIORITY_QUEUE_HEAD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_PRIORITY_QUEUE_HEAD.
 */
#define READ_RQE_PRIORITY_QUEUE_HEADr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_PRIORITY_QUEUE_HEADr_BLKACC,3,0,p,RQE_PRIORITY_QUEUE_HEADr_OFFSET,i,(r._rqe_priority_queue_head),1)
#define WRITE_RQE_PRIORITY_QUEUE_HEADr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_PRIORITY_QUEUE_HEADr_BLKACC,3,0,p,RQE_PRIORITY_QUEUE_HEADr_OFFSET,i,&(r._rqe_priority_queue_head),1)

/*******************************************************************************
 * End of 'RQE_PRIORITY_QUEUE_HEADr'
 */




/*******************************************************************************
 * REGISTER:  RQE_PRIORITY_QUEUE_TAIL
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_PRIORITY_QUEUE_TAIL.
 */
#define READ_RQE_PRIORITY_QUEUE_TAILr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_PRIORITY_QUEUE_TAILr_BLKACC,3,0,p,RQE_PRIORITY_QUEUE_TAILr_OFFSET,i,(r._rqe_priority_queue_tail),1)
#define WRITE_RQE_PRIORITY_QUEUE_TAILr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_PRIORITY_QUEUE_TAILr_BLKACC,3,0,p,RQE_PRIORITY_QUEUE_TAILr_OFFSET,i,&(r._rqe_priority_queue_tail),1)

/*******************************************************************************
 * End of 'RQE_PRIORITY_QUEUE_TAILr'
 */




/*******************************************************************************
 * REGISTER:  RQE_PRIORITY_SCHEDULING_TYPE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_PRIORITY_SCHEDULING_TYPE.
 */
#define READ_RQE_PRIORITY_SCHEDULING_TYPEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_PRIORITY_SCHEDULING_TYPEr_BLKACC,3,0,p,RQE_PRIORITY_SCHEDULING_TYPEr_OFFSET,i,(r._rqe_priority_scheduling_type),1)
#define WRITE_RQE_PRIORITY_SCHEDULING_TYPEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_PRIORITY_SCHEDULING_TYPEr_BLKACC,3,0,p,RQE_PRIORITY_SCHEDULING_TYPEr_OFFSET,i,&(r._rqe_priority_scheduling_type),1)

/*******************************************************************************
 * End of 'RQE_PRIORITY_SCHEDULING_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  RQE_PRIORITY_WERR_WEIGHT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_PRIORITY_WERR_WEIGHT.
 */
#define READ_RQE_PRIORITY_WERR_WEIGHTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_PRIORITY_WERR_WEIGHTr_BLKACC,3,0,p,RQE_PRIORITY_WERR_WEIGHTr_OFFSET,i,(r._rqe_priority_werr_weight),1)
#define WRITE_RQE_PRIORITY_WERR_WEIGHTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_PRIORITY_WERR_WEIGHTr_BLKACC,3,0,p,RQE_PRIORITY_WERR_WEIGHTr_OFFSET,i,&(r._rqe_priority_werr_weight),1)

/*******************************************************************************
 * End of 'RQE_PRIORITY_WERR_WEIGHTr'
 */




/*******************************************************************************
 * REGISTER:  RQE_REPLICATION_ENTRY_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_REPLICATION_ENTRY_COUNT.
 */
#define READ_RQE_REPLICATION_ENTRY_COUNTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_REPLICATION_ENTRY_COUNTr_BLKACC,3,0,p,RQE_REPLICATION_ENTRY_COUNTr_OFFSET,0,(r._rqe_replication_entry_count),1)
#define WRITE_RQE_REPLICATION_ENTRY_COUNTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_REPLICATION_ENTRY_COUNTr_BLKACC,3,0,p,RQE_REPLICATION_ENTRY_COUNTr_OFFSET,0,&(r._rqe_replication_entry_count),1)

/*******************************************************************************
 * End of 'RQE_REPLICATION_ENTRY_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  RQE_REPLICATION_ENTRY_THRESHOLD
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_REPLICATION_ENTRY_THRESHOLD.
 */
#define READ_RQE_REPLICATION_ENTRY_THRESHOLDr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_REPLICATION_ENTRY_THRESHOLDr_BLKACC,3,0,p,RQE_REPLICATION_ENTRY_THRESHOLDr_OFFSET,0,(r._rqe_replication_entry_threshold),1)
#define WRITE_RQE_REPLICATION_ENTRY_THRESHOLDr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_REPLICATION_ENTRY_THRESHOLDr_BLKACC,3,0,p,RQE_REPLICATION_ENTRY_THRESHOLDr_OFFSET,0,&(r._rqe_replication_entry_threshold),1)

/*******************************************************************************
 * End of 'RQE_REPLICATION_ENTRY_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  RQE_REP_BUF_WATERMARK
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_REP_BUF_WATERMARK.
 */
#define READ_RQE_REP_BUF_WATERMARKr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_REP_BUF_WATERMARKr_BLKACC,3,0,p,RQE_REP_BUF_WATERMARKr_OFFSET,0,(r._rqe_rep_buf_watermark),1)
#define WRITE_RQE_REP_BUF_WATERMARKr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_REP_BUF_WATERMARKr_BLKACC,3,0,p,RQE_REP_BUF_WATERMARKr_OFFSET,0,&(r._rqe_rep_buf_watermark),1)

/*******************************************************************************
 * End of 'RQE_REP_BUF_WATERMARKr'
 */




/*******************************************************************************
 * REGISTER:  RQE_REP_BUF_WATERMARK_CLEAR
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_REP_BUF_WATERMARK_CLEAR.
 */
#define READ_RQE_REP_BUF_WATERMARK_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_REP_BUF_WATERMARK_CLEARr_BLKACC,3,0,p,RQE_REP_BUF_WATERMARK_CLEARr_OFFSET,0,(r._rqe_rep_buf_watermark_clear),1)
#define WRITE_RQE_REP_BUF_WATERMARK_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_REP_BUF_WATERMARK_CLEARr_BLKACC,3,0,p,RQE_REP_BUF_WATERMARK_CLEARr_OFFSET,0,&(r._rqe_rep_buf_watermark_clear),1)

/*******************************************************************************
 * End of 'RQE_REP_BUF_WATERMARK_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  RQE_WERR_MAXSC_CLEAR
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_WERR_MAXSC_CLEAR.
 */
#define READ_RQE_WERR_MAXSC_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_WERR_MAXSC_CLEARr_BLKACC,3,0,p,RQE_WERR_MAXSC_CLEARr_OFFSET,0,(r._rqe_werr_maxsc_clear),1)
#define WRITE_RQE_WERR_MAXSC_CLEARr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_WERR_MAXSC_CLEARr_BLKACC,3,0,p,RQE_WERR_MAXSC_CLEARr_OFFSET,0,&(r._rqe_werr_maxsc_clear),1)

/*******************************************************************************
 * End of 'RQE_WERR_MAXSC_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  RQE_WERR_MAXSC_RESET
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_WERR_MAXSC_RESET.
 */
#define READ_RQE_WERR_MAXSC_RESETr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_WERR_MAXSC_RESETr_BLKACC,3,0,p,RQE_WERR_MAXSC_RESETr_OFFSET,0,(r._rqe_werr_maxsc_reset),1)
#define WRITE_RQE_WERR_MAXSC_RESETr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_WERR_MAXSC_RESETr_BLKACC,3,0,p,RQE_WERR_MAXSC_RESETr_OFFSET,0,&(r._rqe_werr_maxsc_reset),1)

/*******************************************************************************
 * End of 'RQE_WERR_MAXSC_RESETr'
 */




/*******************************************************************************
 * REGISTER:  RQE_WERR_WORKING_COUNTS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_WERR_WORKING_COUNTS.
 */
#define READ_RQE_WERR_WORKING_COUNTSr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_WERR_WORKING_COUNTSr_BLKACC,3,0,p,RQE_WERR_WORKING_COUNTSr_OFFSET,i,(r._rqe_werr_working_counts),1)
#define WRITE_RQE_WERR_WORKING_COUNTSr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_WERR_WORKING_COUNTSr_BLKACC,3,0,p,RQE_WERR_WORKING_COUNTSr_OFFSET,i,&(r._rqe_werr_working_counts),1)

/*******************************************************************************
 * End of 'RQE_WERR_WORKING_COUNTSr'
 */




/*******************************************************************************
 * REGISTER:  RQE_WERR_WORKING_COUNTS_CLEAR
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_WERR_WORKING_COUNTS_CLEAR.
 */
#define READ_RQE_WERR_WORKING_COUNTS_CLEARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_WERR_WORKING_COUNTS_CLEARr_BLKACC,3,0,p,RQE_WERR_WORKING_COUNTS_CLEARr_OFFSET,i,(r._rqe_werr_working_counts_clear),1)
#define WRITE_RQE_WERR_WORKING_COUNTS_CLEARr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_WERR_WORKING_COUNTS_CLEARr_BLKACC,3,0,p,RQE_WERR_WORKING_COUNTS_CLEARr_OFFSET,i,&(r._rqe_werr_working_counts_clear),1)

/*******************************************************************************
 * End of 'RQE_WERR_WORKING_COUNTS_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  RQE_WORK_FIFO_CREDIT_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_WORK_FIFO_CREDIT_COUNT.
 */
#define READ_RQE_WORK_FIFO_CREDIT_COUNTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_WORK_FIFO_CREDIT_COUNTr_BLKACC,3,0,p,RQE_WORK_FIFO_CREDIT_COUNTr_OFFSET,0,(r._rqe_work_fifo_credit_count),1)
#define WRITE_RQE_WORK_FIFO_CREDIT_COUNTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_WORK_FIFO_CREDIT_COUNTr_BLKACC,3,0,p,RQE_WORK_FIFO_CREDIT_COUNTr_OFFSET,0,&(r._rqe_work_fifo_credit_count),1)

/*******************************************************************************
 * End of 'RQE_WORK_FIFO_CREDIT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  RQE_WORK_FIFO_ENTRY_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RQE_WORK_FIFO_ENTRY_COUNT.
 */
#define READ_RQE_WORK_FIFO_ENTRY_COUNTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,RQE_WORK_FIFO_ENTRY_COUNTr_BLKACC,3,0,p,RQE_WORK_FIFO_ENTRY_COUNTr_OFFSET,0,(r._rqe_work_fifo_entry_count),1)
#define WRITE_RQE_WORK_FIFO_ENTRY_COUNTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,RQE_WORK_FIFO_ENTRY_COUNTr_BLKACC,3,0,p,RQE_WORK_FIFO_ENTRY_COUNTr_OFFSET,0,&(r._rqe_work_fifo_entry_count),1)

/*******************************************************************************
 * End of 'RQE_WORK_FIFO_ENTRY_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  RRBYT
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RRBYT.
 */
#define READ_RRBYTr(u,p,r) bcmbd_cmicd_reg_port_read(u,RRBYTr_BLKACC,p,RRBYTr_OFFSET,0,(r._rrbyt), 2)
#define WRITE_RRBYTr(u,p,r) bcmbd_cmicd_reg_port_write(u,RRBYTr_BLKACC,p,RRBYTr_OFFSET,0,&(r._rrbyt), 2)

/*******************************************************************************
 * End of 'RRBYTr'
 */




/*******************************************************************************
 * REGISTER:  RRPKT
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RRPKT.
 */
#define READ_RRPKTr(u,p,r) bcmbd_cmicd_reg_port_read(u,RRPKTr_BLKACC,p,RRPKTr_OFFSET,0,(r._rrpkt), 2)
#define WRITE_RRPKTr(u,p,r) bcmbd_cmicd_reg_port_write(u,RRPKTr_BLKACC,p,RRPKTr_OFFSET,0,&(r._rrpkt), 2)

/*******************************************************************************
 * End of 'RRPKTr'
 */




/*******************************************************************************
 * REGISTER:  RSCHCRC
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RSCHCRC.
 */
#define READ_RSCHCRCr(u,p,r) bcmbd_cmicd_reg_port_read(u,RSCHCRCr_BLKACC,p,RSCHCRCr_OFFSET,0,(r._rschcrc), 2)
#define WRITE_RSCHCRCr(u,p,r) bcmbd_cmicd_reg_port_write(u,RSCHCRCr_BLKACC,p,RSCHCRCr_OFFSET,0,&(r._rschcrc), 2)

/*******************************************************************************
 * End of 'RSCHCRCr'
 */




/*******************************************************************************
 * REGISTER:  RSEL1_RAM_DBGCTRL2_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RSEL1_RAM_DBGCTRL2_64.
 */
#define READ_RSEL1_RAM_DBGCTRL2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL1_RAM_DBGCTRL2_64r_BLKACC,1,n,0,RSEL1_RAM_DBGCTRL2_64r_OFFSET,0,(r._rsel1_ram_dbgctrl2_64),2)
#define WRITE_RSEL1_RAM_DBGCTRL2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL1_RAM_DBGCTRL2_64r_BLKACC,1,n,0,RSEL1_RAM_DBGCTRL2_64r_OFFSET,0,&(r._rsel1_ram_dbgctrl2_64),2)
#define WRITE_RSEL1_RAM_DBGCTRL2_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL1_RAM_DBGCTRL2_64r_BLKACC,1,-1,0,RSEL1_RAM_DBGCTRL2_64r_OFFSET,0,&(r._rsel1_ram_dbgctrl2_64),2)

/*******************************************************************************
 * End of 'RSEL1_RAM_DBGCTRL2_64r'
 */




/*******************************************************************************
 * REGISTER:  RSEL1_RAM_DBGCTRL3_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RSEL1_RAM_DBGCTRL3_64.
 */
#define READ_RSEL1_RAM_DBGCTRL3_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL1_RAM_DBGCTRL3_64r_BLKACC,1,n,0,RSEL1_RAM_DBGCTRL3_64r_OFFSET,0,(r._rsel1_ram_dbgctrl3_64),2)
#define WRITE_RSEL1_RAM_DBGCTRL3_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL1_RAM_DBGCTRL3_64r_BLKACC,1,n,0,RSEL1_RAM_DBGCTRL3_64r_OFFSET,0,&(r._rsel1_ram_dbgctrl3_64),2)
#define WRITE_RSEL1_RAM_DBGCTRL3_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL1_RAM_DBGCTRL3_64r_BLKACC,1,-1,0,RSEL1_RAM_DBGCTRL3_64r_OFFSET,0,&(r._rsel1_ram_dbgctrl3_64),2)

/*******************************************************************************
 * End of 'RSEL1_RAM_DBGCTRL3_64r'
 */




/*******************************************************************************
 * REGISTER:  RSEL1_RAM_DBGCTRL4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RSEL1_RAM_DBGCTRL4.
 */
#define READ_RSEL1_RAM_DBGCTRL4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL1_RAM_DBGCTRL4r_BLKACC,1,n,0,RSEL1_RAM_DBGCTRL4r_OFFSET,0,(r._rsel1_ram_dbgctrl4),1)
#define WRITE_RSEL1_RAM_DBGCTRL4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL1_RAM_DBGCTRL4r_BLKACC,1,n,0,RSEL1_RAM_DBGCTRL4r_OFFSET,0,&(r._rsel1_ram_dbgctrl4),1)
#define WRITE_RSEL1_RAM_DBGCTRL4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL1_RAM_DBGCTRL4r_BLKACC,1,-1,0,RSEL1_RAM_DBGCTRL4r_OFFSET,0,&(r._rsel1_ram_dbgctrl4),1)

/*******************************************************************************
 * End of 'RSEL1_RAM_DBGCTRL4r'
 */




/*******************************************************************************
 * REGISTER:  RSEL1_RAM_DBGCTRL_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RSEL1_RAM_DBGCTRL_64.
 */
#define READ_RSEL1_RAM_DBGCTRL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL1_RAM_DBGCTRL_64r_BLKACC,1,n,0,RSEL1_RAM_DBGCTRL_64r_OFFSET,0,(r._rsel1_ram_dbgctrl_64),2)
#define WRITE_RSEL1_RAM_DBGCTRL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL1_RAM_DBGCTRL_64r_BLKACC,1,n,0,RSEL1_RAM_DBGCTRL_64r_OFFSET,0,&(r._rsel1_ram_dbgctrl_64),2)
#define WRITE_RSEL1_RAM_DBGCTRL_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL1_RAM_DBGCTRL_64r_BLKACC,1,-1,0,RSEL1_RAM_DBGCTRL_64r_OFFSET,0,&(r._rsel1_ram_dbgctrl_64),2)

/*******************************************************************************
 * End of 'RSEL1_RAM_DBGCTRL_64r'
 */




/*******************************************************************************
 * REGISTER:  RSEL2_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RSEL2_CAM_DBGCTRL.
 */
#define READ_RSEL2_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL2_CAM_DBGCTRLr_BLKACC,1,n,0,RSEL2_CAM_DBGCTRLr_OFFSET,0,(r._rsel2_cam_dbgctrl),1)
#define WRITE_RSEL2_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_CAM_DBGCTRLr_BLKACC,1,n,0,RSEL2_CAM_DBGCTRLr_OFFSET,0,&(r._rsel2_cam_dbgctrl),1)
#define WRITE_RSEL2_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_CAM_DBGCTRLr_BLKACC,1,-1,0,RSEL2_CAM_DBGCTRLr_OFFSET,0,&(r._rsel2_cam_dbgctrl),1)

/*******************************************************************************
 * End of 'RSEL2_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  RSEL2_RAM_DBGCTRL2_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RSEL2_RAM_DBGCTRL2_64.
 */
#define READ_RSEL2_RAM_DBGCTRL2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL2_RAM_DBGCTRL2_64r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL2_64r_OFFSET,0,(r._rsel2_ram_dbgctrl2_64),2)
#define WRITE_RSEL2_RAM_DBGCTRL2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL2_64r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL2_64r_OFFSET,0,&(r._rsel2_ram_dbgctrl2_64),2)
#define WRITE_RSEL2_RAM_DBGCTRL2_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL2_64r_BLKACC,1,-1,0,RSEL2_RAM_DBGCTRL2_64r_OFFSET,0,&(r._rsel2_ram_dbgctrl2_64),2)

/*******************************************************************************
 * End of 'RSEL2_RAM_DBGCTRL2_64r'
 */




/*******************************************************************************
 * REGISTER:  RSEL2_RAM_DBGCTRL3_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RSEL2_RAM_DBGCTRL3_64.
 */
#define READ_RSEL2_RAM_DBGCTRL3_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL2_RAM_DBGCTRL3_64r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL3_64r_OFFSET,0,(r._rsel2_ram_dbgctrl3_64),2)
#define WRITE_RSEL2_RAM_DBGCTRL3_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL3_64r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL3_64r_OFFSET,0,&(r._rsel2_ram_dbgctrl3_64),2)
#define WRITE_RSEL2_RAM_DBGCTRL3_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL3_64r_BLKACC,1,-1,0,RSEL2_RAM_DBGCTRL3_64r_OFFSET,0,&(r._rsel2_ram_dbgctrl3_64),2)

/*******************************************************************************
 * End of 'RSEL2_RAM_DBGCTRL3_64r'
 */




/*******************************************************************************
 * REGISTER:  RSEL2_RAM_DBGCTRL4_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RSEL2_RAM_DBGCTRL4_64.
 */
#define READ_RSEL2_RAM_DBGCTRL4_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL2_RAM_DBGCTRL4_64r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL4_64r_OFFSET,0,(r._rsel2_ram_dbgctrl4_64),2)
#define WRITE_RSEL2_RAM_DBGCTRL4_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL4_64r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL4_64r_OFFSET,0,&(r._rsel2_ram_dbgctrl4_64),2)
#define WRITE_RSEL2_RAM_DBGCTRL4_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL4_64r_BLKACC,1,-1,0,RSEL2_RAM_DBGCTRL4_64r_OFFSET,0,&(r._rsel2_ram_dbgctrl4_64),2)

/*******************************************************************************
 * End of 'RSEL2_RAM_DBGCTRL4_64r'
 */




/*******************************************************************************
 * REGISTER:  RSEL2_RAM_DBGCTRL5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RSEL2_RAM_DBGCTRL5.
 */
#define READ_RSEL2_RAM_DBGCTRL5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL2_RAM_DBGCTRL5r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL5r_OFFSET,0,(r._rsel2_ram_dbgctrl5),1)
#define WRITE_RSEL2_RAM_DBGCTRL5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL5r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL5r_OFFSET,0,&(r._rsel2_ram_dbgctrl5),1)
#define WRITE_RSEL2_RAM_DBGCTRL5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL5r_BLKACC,1,-1,0,RSEL2_RAM_DBGCTRL5r_OFFSET,0,&(r._rsel2_ram_dbgctrl5),1)

/*******************************************************************************
 * End of 'RSEL2_RAM_DBGCTRL5r'
 */




/*******************************************************************************
 * REGISTER:  RSEL2_RAM_DBGCTRL_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RSEL2_RAM_DBGCTRL_64.
 */
#define READ_RSEL2_RAM_DBGCTRL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RSEL2_RAM_DBGCTRL_64r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL_64r_OFFSET,0,(r._rsel2_ram_dbgctrl_64),2)
#define WRITE_RSEL2_RAM_DBGCTRL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL_64r_BLKACC,1,n,0,RSEL2_RAM_DBGCTRL_64r_OFFSET,0,&(r._rsel2_ram_dbgctrl_64),2)
#define WRITE_RSEL2_RAM_DBGCTRL_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RSEL2_RAM_DBGCTRL_64r_BLKACC,1,-1,0,RSEL2_RAM_DBGCTRL_64r_OFFSET,0,&(r._rsel2_ram_dbgctrl_64),2)

/*******************************************************************************
 * End of 'RSEL2_RAM_DBGCTRL_64r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_FCOE_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_FCOE_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_FCOE_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_FCOE_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_FCOE_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_fcoe_hash_field_bmap), 1)
#define WRITE_RTAG7_FCOE_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_FCOE_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_FCOE_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_fcoe_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_FCOE_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * MEMORY:  RTAG7_FLOW_BASED_HASH
 * BLOCKS:   IPIPE
 * SIZE:     55
 */
/*
 * These macros can be used to access RTAG7_FLOW_BASED_HASH.
 */
#define READ_RTAG7_FLOW_BASED_HASHm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(RTAG7_FLOW_BASED_HASHm_BLKACC)+1,RTAG7_FLOW_BASED_HASHm_OFFSET+i,(m._rtag7_flow_based_hash),2)
#define WRITE_RTAG7_FLOW_BASED_HASHm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(RTAG7_FLOW_BASED_HASHm_BLKACC)+1,RTAG7_FLOW_BASED_HASHm_OFFSET+i,&(m._rtag7_flow_based_hash),2)

/*******************************************************************************
 * End of 'RTAG7_FLOW_BASED_HASHm'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL.
 */
#define READ_RTAG7_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_CONTROLr_BLKACC,1,RTAG7_HASH_CONTROLr_OFFSET,0,(r._rtag7_hash_control), 2)
#define WRITE_RTAG7_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_CONTROLr_BLKACC,1,RTAG7_HASH_CONTROLr_OFFSET,0,&(r._rtag7_hash_control), 2)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_2.
 */
#define READ_RTAG7_HASH_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_CONTROL_2r_BLKACC,1,RTAG7_HASH_CONTROL_2r_OFFSET,0,(r._rtag7_hash_control_2), 1)
#define WRITE_RTAG7_HASH_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_CONTROL_2r_BLKACC,1,RTAG7_HASH_CONTROL_2r_OFFSET,0,&(r._rtag7_hash_control_2), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_3.
 */
#define READ_RTAG7_HASH_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_CONTROL_3r_BLKACC,1,RTAG7_HASH_CONTROL_3r_OFFSET,0,(r._rtag7_hash_control_3), 1)
#define WRITE_RTAG7_HASH_CONTROL_3r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_CONTROL_3r_BLKACC,1,RTAG7_HASH_CONTROL_3r_OFFSET,0,&(r._rtag7_hash_control_3), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_4.
 */
#define READ_RTAG7_HASH_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_CONTROL_4r_BLKACC,1,RTAG7_HASH_CONTROL_4r_OFFSET,0,(r._rtag7_hash_control_4), 1)
#define WRITE_RTAG7_HASH_CONTROL_4r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_CONTROL_4r_BLKACC,1,RTAG7_HASH_CONTROL_4r_OFFSET,0,&(r._rtag7_hash_control_4), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_L2GRE_MASK_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_L2GRE_MASK_A.
 */
#define READ_RTAG7_HASH_CONTROL_L2GRE_MASK_Ar(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_CONTROL_L2GRE_MASK_Ar_BLKACC,1,RTAG7_HASH_CONTROL_L2GRE_MASK_Ar_OFFSET,0,(r._rtag7_hash_control_l2gre_mask_a), 1)
#define WRITE_RTAG7_HASH_CONTROL_L2GRE_MASK_Ar(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_CONTROL_L2GRE_MASK_Ar_BLKACC,1,RTAG7_HASH_CONTROL_L2GRE_MASK_Ar_OFFSET,0,&(r._rtag7_hash_control_l2gre_mask_a), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_L2GRE_MASK_Ar'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_CONTROL_L2GRE_MASK_B
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_CONTROL_L2GRE_MASK_B.
 */
#define READ_RTAG7_HASH_CONTROL_L2GRE_MASK_Br(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_CONTROL_L2GRE_MASK_Br_BLKACC,1,RTAG7_HASH_CONTROL_L2GRE_MASK_Br_OFFSET,0,(r._rtag7_hash_control_l2gre_mask_b), 1)
#define WRITE_RTAG7_HASH_CONTROL_L2GRE_MASK_Br(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_CONTROL_L2GRE_MASK_Br_BLKACC,1,RTAG7_HASH_CONTROL_L2GRE_MASK_Br_OFFSET,0,&(r._rtag7_hash_control_l2gre_mask_b), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_CONTROL_L2GRE_MASK_Br'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_FIELD_BMAP_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_FIELD_BMAP_1.
 */
#define READ_RTAG7_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_1r_OFFSET,0,(r._rtag7_hash_field_bmap_1), 1)
#define WRITE_RTAG7_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_1r_OFFSET,0,&(r._rtag7_hash_field_bmap_1), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_FIELD_BMAP_1r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_FIELD_BMAP_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_FIELD_BMAP_2.
 */
#define READ_RTAG7_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_2r_OFFSET,0,(r._rtag7_hash_field_bmap_2), 1)
#define WRITE_RTAG7_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_2r_OFFSET,0,&(r._rtag7_hash_field_bmap_2), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_FIELD_BMAP_2r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_FIELD_BMAP_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_FIELD_BMAP_3.
 */
#define READ_RTAG7_HASH_FIELD_BMAP_3r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_FIELD_BMAP_3r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_3r_OFFSET,0,(r._rtag7_hash_field_bmap_3), 1)
#define WRITE_RTAG7_HASH_FIELD_BMAP_3r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_FIELD_BMAP_3r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_3r_OFFSET,0,&(r._rtag7_hash_field_bmap_3), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_FIELD_BMAP_3r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_FIELD_BMAP_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_FIELD_BMAP_5.
 */
#define READ_RTAG7_HASH_FIELD_BMAP_5r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_FIELD_BMAP_5r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_5r_OFFSET,0,(r._rtag7_hash_field_bmap_5), 1)
#define WRITE_RTAG7_HASH_FIELD_BMAP_5r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_FIELD_BMAP_5r_BLKACC,1,RTAG7_HASH_FIELD_BMAP_5r_OFFSET,0,&(r._rtag7_hash_field_bmap_5), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_FIELD_BMAP_5r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_SEED_A
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_SEED_A.
 */
#define READ_RTAG7_HASH_SEED_Ar(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RTAG7_HASH_SEED_Ar_BLKACC,1,n,0,RTAG7_HASH_SEED_Ar_OFFSET,0,(r._rtag7_hash_seed_a),1)
#define WRITE_RTAG7_HASH_SEED_Ar(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RTAG7_HASH_SEED_Ar_BLKACC,1,n,0,RTAG7_HASH_SEED_Ar_OFFSET,0,&(r._rtag7_hash_seed_a),1)
#define WRITE_RTAG7_HASH_SEED_Ar_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RTAG7_HASH_SEED_Ar_BLKACC,1,-1,0,RTAG7_HASH_SEED_Ar_OFFSET,0,&(r._rtag7_hash_seed_a),1)

/*******************************************************************************
 * End of 'RTAG7_HASH_SEED_Ar'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_SEED_B
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_SEED_B.
 */
#define READ_RTAG7_HASH_SEED_Br(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,RTAG7_HASH_SEED_Br_BLKACC,1,n,0,RTAG7_HASH_SEED_Br_OFFSET,0,(r._rtag7_hash_seed_b),1)
#define WRITE_RTAG7_HASH_SEED_Br(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,RTAG7_HASH_SEED_Br_BLKACC,1,n,0,RTAG7_HASH_SEED_Br_OFFSET,0,&(r._rtag7_hash_seed_b),1)
#define WRITE_RTAG7_HASH_SEED_Br_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,RTAG7_HASH_SEED_Br_BLKACC,1,-1,0,RTAG7_HASH_SEED_Br_OFFSET,0,&(r._rtag7_hash_seed_b),1)

/*******************************************************************************
 * End of 'RTAG7_HASH_SEED_Br'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_HASH_SEL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_HASH_SEL.
 */
#define READ_RTAG7_HASH_SELr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_HASH_SELr_BLKACC,1,RTAG7_HASH_SELr_OFFSET,0,(r._rtag7_hash_sel), 1)
#define WRITE_RTAG7_HASH_SELr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_HASH_SELr_BLKACC,1,RTAG7_HASH_SELr_OFFSET,0,&(r._rtag7_hash_sel), 1)

/*******************************************************************************
 * End of 'RTAG7_HASH_SELr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1.
 */
#define READ_RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r_OFFSET,0,(r._rtag7_ipv4_tcp_udp_hash_field_bmap_1), 1)
#define WRITE_RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r_OFFSET,0,&(r._rtag7_ipv4_tcp_udp_hash_field_bmap_1), 1)

/*******************************************************************************
 * End of 'RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_1r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2.
 */
#define READ_RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r_OFFSET,0,(r._rtag7_ipv4_tcp_udp_hash_field_bmap_2), 1)
#define WRITE_RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r_OFFSET,0,&(r._rtag7_ipv4_tcp_udp_hash_field_bmap_2), 1)

/*******************************************************************************
 * End of 'RTAG7_IPV4_TCP_UDP_HASH_FIELD_BMAP_2r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1.
 */
#define READ_RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r_OFFSET,0,(r._rtag7_ipv6_tcp_udp_hash_field_bmap_1), 1)
#define WRITE_RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r_BLKACC,1,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r_OFFSET,0,&(r._rtag7_ipv6_tcp_udp_hash_field_bmap_1), 1)

/*******************************************************************************
 * End of 'RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_1r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2.
 */
#define READ_RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r_OFFSET,0,(r._rtag7_ipv6_tcp_udp_hash_field_bmap_2), 1)
#define WRITE_RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r_BLKACC,1,RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r_OFFSET,0,&(r._rtag7_ipv6_tcp_udp_hash_field_bmap_2), 1)

/*******************************************************************************
 * End of 'RTAG7_IPV6_TCP_UDP_HASH_FIELD_BMAP_2r'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_L2GRE_PAYLOAD_L2_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_L2GRE_PAYLOAD_L2_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_L2GRE_PAYLOAD_L2_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_L2GRE_PAYLOAD_L2_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_L2GRE_PAYLOAD_L2_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_l2gre_payload_l2_hash_field_bmap), 1)
#define WRITE_RTAG7_L2GRE_PAYLOAD_L2_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_L2GRE_PAYLOAD_L2_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_L2GRE_PAYLOAD_L2_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_l2gre_payload_l2_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_L2GRE_PAYLOAD_L2_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_L2GRE_PAYLOAD_L3_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_L2GRE_PAYLOAD_L3_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_L2GRE_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_L2GRE_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_L2GRE_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_l2gre_payload_l3_hash_field_bmap), 1)
#define WRITE_RTAG7_L2GRE_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_L2GRE_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_L2GRE_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_l2gre_payload_l3_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_L2GRE_PAYLOAD_L3_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MIM_OUTER_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MIM_OUTER_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_MIM_OUTER_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_MIM_OUTER_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MIM_OUTER_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_mim_outer_hash_field_bmap), 1)
#define WRITE_RTAG7_MIM_OUTER_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_MIM_OUTER_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MIM_OUTER_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_mim_outer_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_MIM_OUTER_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MIM_PAYLOAD_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MIM_PAYLOAD_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_MIM_PAYLOAD_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_MIM_PAYLOAD_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MIM_PAYLOAD_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_mim_payload_hash_field_bmap), 1)
#define WRITE_RTAG7_MIM_PAYLOAD_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_MIM_PAYLOAD_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MIM_PAYLOAD_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_mim_payload_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_MIM_PAYLOAD_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MIM_PAYLOAD_L3_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MIM_PAYLOAD_L3_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_MIM_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_MIM_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MIM_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_mim_payload_l3_hash_field_bmap), 1)
#define WRITE_RTAG7_MIM_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_MIM_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MIM_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_mim_payload_l3_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_MIM_PAYLOAD_L3_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MPLS_L2_PAYLOAD_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MPLS_L2_PAYLOAD_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_MPLS_L2_PAYLOAD_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_MPLS_L2_PAYLOAD_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_L2_PAYLOAD_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_mpls_l2_payload_hash_field_bmap), 1)
#define WRITE_RTAG7_MPLS_L2_PAYLOAD_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_MPLS_L2_PAYLOAD_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_L2_PAYLOAD_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_mpls_l2_payload_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_MPLS_L2_PAYLOAD_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MPLS_L2_PAYLOAD_L3_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MPLS_L2_PAYLOAD_L3_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_MPLS_L2_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_MPLS_L2_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_L2_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_mpls_l2_payload_l3_hash_field_bmap), 1)
#define WRITE_RTAG7_MPLS_L2_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_MPLS_L2_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_L2_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_mpls_l2_payload_l3_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_MPLS_L2_PAYLOAD_L3_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_mpls_l3_payload_hash_field_bmap), 1)
#define WRITE_RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_mpls_l3_payload_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_MPLS_L3_PAYLOAD_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_MPLS_OUTER_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_MPLS_OUTER_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_mpls_outer_hash_field_bmap), 1)
#define WRITE_RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_mpls_outer_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_MPLS_OUTER_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * MEMORY:  RTAG7_PORT_BASED_HASH
 * BLOCKS:   IPIPE
 * SIZE:     213
 */
/*
 * These macros can be used to access RTAG7_PORT_BASED_HASH.
 */
#define READ_RTAG7_PORT_BASED_HASHm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(RTAG7_PORT_BASED_HASHm_BLKACC)+1,RTAG7_PORT_BASED_HASHm_OFFSET+i,(m._rtag7_port_based_hash),7)
#define WRITE_RTAG7_PORT_BASED_HASHm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(RTAG7_PORT_BASED_HASHm_BLKACC)+1,RTAG7_PORT_BASED_HASHm_OFFSET+i,&(m._rtag7_port_based_hash),7)

/*******************************************************************************
 * End of 'RTAG7_PORT_BASED_HASHm'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_TRILL_PAYLOAD_L2_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_TRILL_PAYLOAD_L2_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_TRILL_PAYLOAD_L2_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_TRILL_PAYLOAD_L2_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_TRILL_PAYLOAD_L2_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_trill_payload_l2_hash_field_bmap), 1)
#define WRITE_RTAG7_TRILL_PAYLOAD_L2_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_TRILL_PAYLOAD_L2_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_TRILL_PAYLOAD_L2_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_trill_payload_l2_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_TRILL_PAYLOAD_L2_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_TRILL_PAYLOAD_L3_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_TRILL_PAYLOAD_L3_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_TRILL_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_TRILL_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_TRILL_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_trill_payload_l3_hash_field_bmap), 1)
#define WRITE_RTAG7_TRILL_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_TRILL_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_TRILL_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_trill_payload_l3_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_TRILL_PAYLOAD_L3_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_TRILL_TUNNEL_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_TRILL_TUNNEL_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_TRILL_TUNNEL_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_TRILL_TUNNEL_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_TRILL_TUNNEL_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_trill_tunnel_hash_field_bmap), 1)
#define WRITE_RTAG7_TRILL_TUNNEL_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_TRILL_TUNNEL_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_TRILL_TUNNEL_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_trill_tunnel_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_TRILL_TUNNEL_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_vxlan_payload_l2_hash_field_bmap), 1)
#define WRITE_RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_vxlan_payload_l2_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_VXLAN_PAYLOAD_L2_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAP.
 */
#define READ_RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_read(u,RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,(r._rtag7_vxlan_payload_l3_hash_field_bmap), 1)
#define WRITE_RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr(u,r) bcmbd_cmicd_reg_block_write(u,RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr_BLKACC,1,RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr_OFFSET,0,&(r._rtag7_vxlan_payload_l3_hash_field_bmap), 1)

/*******************************************************************************
 * End of 'RTAG7_VXLAN_PAYLOAD_L3_HASH_FIELD_BMAPr'
 */




/*******************************************************************************
 * REGISTER:  RTRFU
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RTRFU.
 */
#define READ_RTRFUr(u,p,r) bcmbd_cmicd_reg_port_read(u,RTRFUr_BLKACC,p,RTRFUr_OFFSET,0,(r._rtrfu), 2)
#define WRITE_RTRFUr(u,p,r) bcmbd_cmicd_reg_port_write(u,RTRFUr_BLKACC,p,RTRFUr_OFFSET,0,&(r._rtrfu), 2)

/*******************************************************************************
 * End of 'RTRFUr'
 */




/*******************************************************************************
 * REGISTER:  RUC
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access RUC.
 */
#define READ_RUCr(u,p,r) bcmbd_cmicd_reg_port_read(u,RUCr_BLKACC,p,RUCr_OFFSET,0,(r._ruc), 2)
#define WRITE_RUCr(u,p,r) bcmbd_cmicd_reg_port_write(u,RUCr_BLKACC,p,RUCr_OFFSET,0,&(r._ruc), 2)

/*******************************************************************************
 * End of 'RUCr'
 */




/*******************************************************************************
 * REGISTER:  RUCA
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RUCA.
 */
#define READ_RUCAr(u,p,r) bcmbd_cmicd_reg_port_read(u,RUCAr_BLKACC,p,RUCAr_OFFSET,0,(r._ruca), 2)
#define WRITE_RUCAr(u,p,r) bcmbd_cmicd_reg_port_write(u,RUCAr_BLKACC,p,RUCAr_OFFSET,0,&(r._ruca), 2)

/*******************************************************************************
 * End of 'RUCAr'
 */




/*******************************************************************************
 * REGISTER:  RUND
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RUND.
 */
#define READ_RUNDr(u,p,r) bcmbd_cmicd_reg_port_read(u,RUNDr_BLKACC,p,RUNDr_OFFSET,0,(r._rund), 2)
#define WRITE_RUNDr(u,p,r) bcmbd_cmicd_reg_port_write(u,RUNDr_BLKACC,p,RUNDr_OFFSET,0,&(r._rund), 2)

/*******************************************************************************
 * End of 'RUNDr'
 */




/*******************************************************************************
 * REGISTER:  RVLN
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RVLN.
 */
#define READ_RVLNr(u,p,r) bcmbd_cmicd_reg_port_read(u,RVLNr_BLKACC,p,RVLNr_OFFSET,0,(r._rvln), 2)
#define WRITE_RVLNr(u,p,r) bcmbd_cmicd_reg_port_write(u,RVLNr_BLKACC,p,RVLNr_OFFSET,0,&(r._rvln), 2)

/*******************************************************************************
 * End of 'RVLNr'
 */




/*******************************************************************************
 * REGISTER:  RXCF
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RXCF.
 */
#define READ_RXCFr(u,p,r) bcmbd_cmicd_reg_port_read(u,RXCFr_BLKACC,p,RXCFr_OFFSET,0,(r._rxcf), 2)
#define WRITE_RXCFr(u,p,r) bcmbd_cmicd_reg_port_write(u,RXCFr_BLKACC,p,RXCFr_OFFSET,0,&(r._rxcf), 2)

/*******************************************************************************
 * End of 'RXCFr'
 */




/*******************************************************************************
 * REGISTER:  RXPF
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RXPF.
 */
#define READ_RXPFr(u,p,r) bcmbd_cmicd_reg_port_read(u,RXPFr_BLKACC,p,RXPFr_OFFSET,0,(r._rxpf), 2)
#define WRITE_RXPFr(u,p,r) bcmbd_cmicd_reg_port_write(u,RXPFr_BLKACC,p,RXPFr_OFFSET,0,&(r._rxpf), 2)

/*******************************************************************************
 * End of 'RXPFr'
 */




/*******************************************************************************
 * REGISTER:  RXPP
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RXPP.
 */
#define READ_RXPPr(u,p,r) bcmbd_cmicd_reg_port_read(u,RXPPr_BLKACC,p,RXPPr_OFFSET,0,(r._rxpp), 2)
#define WRITE_RXPPr(u,p,r) bcmbd_cmicd_reg_port_write(u,RXPPr_BLKACC,p,RXPPr_OFFSET,0,&(r._rxpp), 2)

/*******************************************************************************
 * End of 'RXPPr'
 */




/*******************************************************************************
 * REGISTER:  RXUDA
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RXUDA.
 */
#define READ_RXUDAr(u,p,r) bcmbd_cmicd_reg_port_read(u,RXUDAr_BLKACC,p,RXUDAr_OFFSET,0,(r._rxuda), 2)
#define WRITE_RXUDAr(u,p,r) bcmbd_cmicd_reg_port_write(u,RXUDAr_BLKACC,p,RXUDAr_OFFSET,0,&(r._rxuda), 2)

/*******************************************************************************
 * End of 'RXUDAr'
 */




/*******************************************************************************
 * REGISTER:  RXUO
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RXUO.
 */
#define READ_RXUOr(u,p,r) bcmbd_cmicd_reg_port_read(u,RXUOr_BLKACC,p,RXUOr_OFFSET,0,(r._rxuo), 2)
#define WRITE_RXUOr(u,p,r) bcmbd_cmicd_reg_port_write(u,RXUOr_BLKACC,p,RXUOr_OFFSET,0,&(r._rxuo), 2)

/*******************************************************************************
 * End of 'RXUOr'
 */




/*******************************************************************************
 * REGISTER:  RXWSA
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RXWSA.
 */
#define READ_RXWSAr(u,p,r) bcmbd_cmicd_reg_port_read(u,RXWSAr_BLKACC,p,RXWSAr_OFFSET,0,(r._rxwsa), 2)
#define WRITE_RXWSAr(u,p,r) bcmbd_cmicd_reg_port_write(u,RXWSAr_BLKACC,p,RXWSAr_OFFSET,0,&(r._rxwsa), 2)

/*******************************************************************************
 * End of 'RXWSAr'
 */




/*******************************************************************************
 * SWFORMAT:  RX_DCB
 * BLOCKS:
 * SIZE:     512
 */
/*******************************************************************************
 * End of 'RX_DCB'
 */




/*******************************************************************************
 * REGISTER:  RX_EEE_LPI_DURATION_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RX_EEE_LPI_DURATION_COUNTER.
 */
#define READ_RX_EEE_LPI_DURATION_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,RX_EEE_LPI_DURATION_COUNTERr_BLKACC,p,RX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,(r._rx_eee_lpi_duration_counter), 2)
#define WRITE_RX_EEE_LPI_DURATION_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,RX_EEE_LPI_DURATION_COUNTERr_BLKACC,p,RX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,&(r._rx_eee_lpi_duration_counter), 2)

/*******************************************************************************
 * End of 'RX_EEE_LPI_DURATION_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  RX_EEE_LPI_EVENT_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RX_EEE_LPI_EVENT_COUNTER.
 */
#define READ_RX_EEE_LPI_EVENT_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,RX_EEE_LPI_EVENT_COUNTERr_BLKACC,p,RX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,(r._rx_eee_lpi_event_counter), 2)
#define WRITE_RX_EEE_LPI_EVENT_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,RX_EEE_LPI_EVENT_COUNTERr_BLKACC,p,RX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,&(r._rx_eee_lpi_event_counter), 2)

/*******************************************************************************
 * End of 'RX_EEE_LPI_EVENT_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  RX_HCFC_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RX_HCFC_COUNTER.
 */
#define READ_RX_HCFC_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,RX_HCFC_COUNTERr_BLKACC,p,RX_HCFC_COUNTERr_OFFSET,0,(r._rx_hcfc_counter), 2)
#define WRITE_RX_HCFC_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,RX_HCFC_COUNTERr_BLKACC,p,RX_HCFC_COUNTERr_OFFSET,0,&(r._rx_hcfc_counter), 2)

/*******************************************************************************
 * End of 'RX_HCFC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  RX_HCFC_CRC_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RX_HCFC_CRC_COUNTER.
 */
#define READ_RX_HCFC_CRC_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,RX_HCFC_CRC_COUNTERr_BLKACC,p,RX_HCFC_CRC_COUNTERr_OFFSET,0,(r._rx_hcfc_crc_counter), 2)
#define WRITE_RX_HCFC_CRC_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,RX_HCFC_CRC_COUNTERr_BLKACC,p,RX_HCFC_CRC_COUNTERr_OFFSET,0,&(r._rx_hcfc_crc_counter), 2)

/*******************************************************************************
 * End of 'RX_HCFC_CRC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  RX_LLFC_CRC_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RX_LLFC_CRC_COUNTER.
 */
#define READ_RX_LLFC_CRC_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,RX_LLFC_CRC_COUNTERr_BLKACC,p,RX_LLFC_CRC_COUNTERr_OFFSET,0,(r._rx_llfc_crc_counter), 2)
#define WRITE_RX_LLFC_CRC_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,RX_LLFC_CRC_COUNTERr_BLKACC,p,RX_LLFC_CRC_COUNTERr_OFFSET,0,&(r._rx_llfc_crc_counter), 2)

/*******************************************************************************
 * End of 'RX_LLFC_CRC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  RX_LLFC_LOG_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RX_LLFC_LOG_COUNTER.
 */
#define READ_RX_LLFC_LOG_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,RX_LLFC_LOG_COUNTERr_BLKACC,p,RX_LLFC_LOG_COUNTERr_OFFSET,0,(r._rx_llfc_log_counter), 2)
#define WRITE_RX_LLFC_LOG_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,RX_LLFC_LOG_COUNTERr_BLKACC,p,RX_LLFC_LOG_COUNTERr_OFFSET,0,&(r._rx_llfc_log_counter), 2)

/*******************************************************************************
 * End of 'RX_LLFC_LOG_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  RX_LLFC_PHY_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access RX_LLFC_PHY_COUNTER.
 */
#define READ_RX_LLFC_PHY_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,RX_LLFC_PHY_COUNTERr_BLKACC,p,RX_LLFC_PHY_COUNTERr_OFFSET,0,(r._rx_llfc_phy_counter), 2)
#define WRITE_RX_LLFC_PHY_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,RX_LLFC_PHY_COUNTERr_BLKACC,p,RX_LLFC_PHY_COUNTERr_OFFSET,0,&(r._rx_llfc_phy_counter), 2)

/*******************************************************************************
 * End of 'RX_LLFC_PHY_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  SBS_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SBS_CONTROL.
 */
#define READ_SBS_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,SBS_CONTROLr_BLKACC,1,SBS_CONTROLr_OFFSET,0,(r._sbs_control), 1)
#define WRITE_SBS_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,SBS_CONTROLr_BLKACC,1,SBS_CONTROLr_OFFSET,0,&(r._sbs_control), 1)

/*******************************************************************************
 * End of 'SBS_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  SER_ACC_TYPE_MAP
 * BLOCKS:   SER
 * SIZE:     3
 */
/*
 * These macros can be used to access SER_ACC_TYPE_MAP.
 */
#define READ_SER_ACC_TYPE_MAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SER_ACC_TYPE_MAPm_BLKACC)+8,SER_ACC_TYPE_MAPm_OFFSET+i,(m._ser_acc_type_map),1)
#define WRITE_SER_ACC_TYPE_MAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SER_ACC_TYPE_MAPm_BLKACC)+8,SER_ACC_TYPE_MAPm_OFFSET+i,&(m._ser_acc_type_map),1)

/*******************************************************************************
 * End of 'SER_ACC_TYPE_MAPm'
 */




/*******************************************************************************
 * REGISTER:  SER_CONFIG_REG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_CONFIG_REG.
 */
#define READ_SER_CONFIG_REGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_CONFIG_REGr_BLKACC,8,SER_CONFIG_REGr_OFFSET,0,(r._ser_config_reg), 1)
#define WRITE_SER_CONFIG_REGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_CONFIG_REGr_BLKACC,8,SER_CONFIG_REGr_OFFSET,0,&(r._ser_config_reg), 1)

/*******************************************************************************
 * End of 'SER_CONFIG_REGr'
 */




/*******************************************************************************
 * REGISTER:  SER_ERROR_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_ERROR_0.
 */
#define READ_SER_ERROR_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_ERROR_0r_BLKACC,8,SER_ERROR_0r_OFFSET,0,(r._ser_error_0), 1)
#define WRITE_SER_ERROR_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_ERROR_0r_BLKACC,8,SER_ERROR_0r_OFFSET,0,&(r._ser_error_0), 1)

/*******************************************************************************
 * End of 'SER_ERROR_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_ERROR_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_ERROR_1.
 */
#define READ_SER_ERROR_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_ERROR_1r_BLKACC,8,SER_ERROR_1r_OFFSET,0,(r._ser_error_1), 1)
#define WRITE_SER_ERROR_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_ERROR_1r_BLKACC,8,SER_ERROR_1r_OFFSET,0,&(r._ser_error_1), 1)

/*******************************************************************************
 * End of 'SER_ERROR_1r'
 */




/*******************************************************************************
 * MEMORY:  SER_MEMORY
 * BLOCKS:   SER
 * SIZE:     36
 */
/*
 * These macros can be used to access SER_MEMORY.
 */
#define READ_SER_MEMORYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SER_MEMORYm_BLKACC)+8,SER_MEMORYm_OFFSET+i,(m._ser_memory),2)
#define WRITE_SER_MEMORYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SER_MEMORYm_BLKACC)+8,SER_MEMORYm_OFFSET+i,&(m._ser_memory),2)

/*******************************************************************************
 * End of 'SER_MEMORYm'
 */




/*******************************************************************************
 * REGISTER:  SER_MISSED_EVENT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_MISSED_EVENT.
 */
#define READ_SER_MISSED_EVENTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_MISSED_EVENTr_BLKACC,8,SER_MISSED_EVENTr_OFFSET,0,(r._ser_missed_event), 1)
#define WRITE_SER_MISSED_EVENTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_MISSED_EVENTr_BLKACC,8,SER_MISSED_EVENTr_OFFSET,0,&(r._ser_missed_event), 1)

/*******************************************************************************
 * End of 'SER_MISSED_EVENTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_ADDR_BITS.
 */
#define READ_SER_RANGE_0_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_ADDR_BITSr_BLKACC,8,SER_RANGE_0_ADDR_BITSr_OFFSET,0,(r._ser_range_0_addr_bits), 1)
#define WRITE_SER_RANGE_0_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_ADDR_BITSr_BLKACC,8,SER_RANGE_0_ADDR_BITSr_OFFSET,0,&(r._ser_range_0_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_CONFIG.
 */
#define READ_SER_RANGE_0_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_CONFIGr_BLKACC,8,SER_RANGE_0_CONFIGr_OFFSET,0,(r._ser_range_0_config), 1)
#define WRITE_SER_RANGE_0_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_CONFIGr_BLKACC,8,SER_RANGE_0_CONFIGr_OFFSET,0,&(r._ser_range_0_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_DISABLE.
 */
#define READ_SER_RANGE_0_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_DISABLEr_BLKACC,8,SER_RANGE_0_DISABLEr_OFFSET,0,(r._ser_range_0_disable), 1)
#define WRITE_SER_RANGE_0_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_DISABLEr_BLKACC,8,SER_RANGE_0_DISABLEr_OFFSET,0,&(r._ser_range_0_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_END.
 */
#define READ_SER_RANGE_0_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_ENDr_BLKACC,8,SER_RANGE_0_ENDr_OFFSET,0,(r._ser_range_0_end), 1)
#define WRITE_SER_RANGE_0_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_ENDr_BLKACC,8,SER_RANGE_0_ENDr_OFFSET,0,&(r._ser_range_0_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_PROT_WORD.
 */
#define READ_SER_RANGE_0_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_PROT_WORDr_BLKACC,8,SER_RANGE_0_PROT_WORDr_OFFSET,i,(r._ser_range_0_prot_word), 1)
#define WRITE_SER_RANGE_0_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_PROT_WORDr_BLKACC,8,SER_RANGE_0_PROT_WORDr_OFFSET,i,&(r._ser_range_0_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_PROT_WORD_0.
 */
#define READ_SER_RANGE_0_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_PROT_WORD_0r_BLKACC,8,SER_RANGE_0_PROT_WORD_0r_OFFSET,0,(r._ser_range_0_prot_word_0), 1)
#define WRITE_SER_RANGE_0_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_PROT_WORD_0r_BLKACC,8,SER_RANGE_0_PROT_WORD_0r_OFFSET,0,&(r._ser_range_0_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_PROT_WORD_1.
 */
#define READ_SER_RANGE_0_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_PROT_WORD_1r_BLKACC,8,SER_RANGE_0_PROT_WORD_1r_OFFSET,0,(r._ser_range_0_prot_word_1), 1)
#define WRITE_SER_RANGE_0_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_PROT_WORD_1r_BLKACC,8,SER_RANGE_0_PROT_WORD_1r_OFFSET,0,&(r._ser_range_0_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_PROT_WORD_2.
 */
#define READ_SER_RANGE_0_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_PROT_WORD_2r_BLKACC,8,SER_RANGE_0_PROT_WORD_2r_OFFSET,0,(r._ser_range_0_prot_word_2), 1)
#define WRITE_SER_RANGE_0_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_PROT_WORD_2r_BLKACC,8,SER_RANGE_0_PROT_WORD_2r_OFFSET,0,&(r._ser_range_0_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_PROT_WORD_3.
 */
#define READ_SER_RANGE_0_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_PROT_WORD_3r_BLKACC,8,SER_RANGE_0_PROT_WORD_3r_OFFSET,0,(r._ser_range_0_prot_word_3), 1)
#define WRITE_SER_RANGE_0_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_PROT_WORD_3r_BLKACC,8,SER_RANGE_0_PROT_WORD_3r_OFFSET,0,&(r._ser_range_0_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_RESULT.
 */
#define READ_SER_RANGE_0_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_RESULTr_BLKACC,8,SER_RANGE_0_RESULTr_OFFSET,0,(r._ser_range_0_result), 1)
#define WRITE_SER_RANGE_0_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_RESULTr_BLKACC,8,SER_RANGE_0_RESULTr_OFFSET,0,&(r._ser_range_0_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_0_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_0_START.
 */
#define READ_SER_RANGE_0_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_0_STARTr_BLKACC,8,SER_RANGE_0_STARTr_OFFSET,0,(r._ser_range_0_start), 1)
#define WRITE_SER_RANGE_0_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_0_STARTr_BLKACC,8,SER_RANGE_0_STARTr_OFFSET,0,&(r._ser_range_0_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_0_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_ADDR_BITS.
 */
#define READ_SER_RANGE_10_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_ADDR_BITSr_BLKACC,8,SER_RANGE_10_ADDR_BITSr_OFFSET,0,(r._ser_range_10_addr_bits), 1)
#define WRITE_SER_RANGE_10_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_ADDR_BITSr_BLKACC,8,SER_RANGE_10_ADDR_BITSr_OFFSET,0,&(r._ser_range_10_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_CONFIG.
 */
#define READ_SER_RANGE_10_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_CONFIGr_BLKACC,8,SER_RANGE_10_CONFIGr_OFFSET,0,(r._ser_range_10_config), 1)
#define WRITE_SER_RANGE_10_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_CONFIGr_BLKACC,8,SER_RANGE_10_CONFIGr_OFFSET,0,&(r._ser_range_10_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_DISABLE.
 */
#define READ_SER_RANGE_10_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_DISABLEr_BLKACC,8,SER_RANGE_10_DISABLEr_OFFSET,0,(r._ser_range_10_disable), 1)
#define WRITE_SER_RANGE_10_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_DISABLEr_BLKACC,8,SER_RANGE_10_DISABLEr_OFFSET,0,&(r._ser_range_10_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_END.
 */
#define READ_SER_RANGE_10_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_ENDr_BLKACC,8,SER_RANGE_10_ENDr_OFFSET,0,(r._ser_range_10_end), 1)
#define WRITE_SER_RANGE_10_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_ENDr_BLKACC,8,SER_RANGE_10_ENDr_OFFSET,0,&(r._ser_range_10_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_PROT_WORD.
 */
#define READ_SER_RANGE_10_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_PROT_WORDr_BLKACC,8,SER_RANGE_10_PROT_WORDr_OFFSET,i,(r._ser_range_10_prot_word), 1)
#define WRITE_SER_RANGE_10_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_PROT_WORDr_BLKACC,8,SER_RANGE_10_PROT_WORDr_OFFSET,i,&(r._ser_range_10_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_PROT_WORD_0.
 */
#define READ_SER_RANGE_10_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_PROT_WORD_0r_BLKACC,8,SER_RANGE_10_PROT_WORD_0r_OFFSET,0,(r._ser_range_10_prot_word_0), 1)
#define WRITE_SER_RANGE_10_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_PROT_WORD_0r_BLKACC,8,SER_RANGE_10_PROT_WORD_0r_OFFSET,0,&(r._ser_range_10_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_PROT_WORD_1.
 */
#define READ_SER_RANGE_10_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_PROT_WORD_1r_BLKACC,8,SER_RANGE_10_PROT_WORD_1r_OFFSET,0,(r._ser_range_10_prot_word_1), 1)
#define WRITE_SER_RANGE_10_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_PROT_WORD_1r_BLKACC,8,SER_RANGE_10_PROT_WORD_1r_OFFSET,0,&(r._ser_range_10_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_PROT_WORD_2.
 */
#define READ_SER_RANGE_10_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_PROT_WORD_2r_BLKACC,8,SER_RANGE_10_PROT_WORD_2r_OFFSET,0,(r._ser_range_10_prot_word_2), 1)
#define WRITE_SER_RANGE_10_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_PROT_WORD_2r_BLKACC,8,SER_RANGE_10_PROT_WORD_2r_OFFSET,0,&(r._ser_range_10_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_PROT_WORD_3.
 */
#define READ_SER_RANGE_10_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_PROT_WORD_3r_BLKACC,8,SER_RANGE_10_PROT_WORD_3r_OFFSET,0,(r._ser_range_10_prot_word_3), 1)
#define WRITE_SER_RANGE_10_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_PROT_WORD_3r_BLKACC,8,SER_RANGE_10_PROT_WORD_3r_OFFSET,0,&(r._ser_range_10_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_RESULT.
 */
#define READ_SER_RANGE_10_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_RESULTr_BLKACC,8,SER_RANGE_10_RESULTr_OFFSET,0,(r._ser_range_10_result), 1)
#define WRITE_SER_RANGE_10_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_RESULTr_BLKACC,8,SER_RANGE_10_RESULTr_OFFSET,0,&(r._ser_range_10_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_10_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_10_START.
 */
#define READ_SER_RANGE_10_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_10_STARTr_BLKACC,8,SER_RANGE_10_STARTr_OFFSET,0,(r._ser_range_10_start), 1)
#define WRITE_SER_RANGE_10_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_10_STARTr_BLKACC,8,SER_RANGE_10_STARTr_OFFSET,0,&(r._ser_range_10_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_10_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_ADDR_BITS.
 */
#define READ_SER_RANGE_11_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_ADDR_BITSr_BLKACC,8,SER_RANGE_11_ADDR_BITSr_OFFSET,0,(r._ser_range_11_addr_bits), 1)
#define WRITE_SER_RANGE_11_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_ADDR_BITSr_BLKACC,8,SER_RANGE_11_ADDR_BITSr_OFFSET,0,&(r._ser_range_11_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_CONFIG.
 */
#define READ_SER_RANGE_11_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_CONFIGr_BLKACC,8,SER_RANGE_11_CONFIGr_OFFSET,0,(r._ser_range_11_config), 1)
#define WRITE_SER_RANGE_11_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_CONFIGr_BLKACC,8,SER_RANGE_11_CONFIGr_OFFSET,0,&(r._ser_range_11_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_DISABLE.
 */
#define READ_SER_RANGE_11_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_DISABLEr_BLKACC,8,SER_RANGE_11_DISABLEr_OFFSET,0,(r._ser_range_11_disable), 1)
#define WRITE_SER_RANGE_11_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_DISABLEr_BLKACC,8,SER_RANGE_11_DISABLEr_OFFSET,0,&(r._ser_range_11_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_END.
 */
#define READ_SER_RANGE_11_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_ENDr_BLKACC,8,SER_RANGE_11_ENDr_OFFSET,0,(r._ser_range_11_end), 1)
#define WRITE_SER_RANGE_11_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_ENDr_BLKACC,8,SER_RANGE_11_ENDr_OFFSET,0,&(r._ser_range_11_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_PROT_WORD.
 */
#define READ_SER_RANGE_11_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_PROT_WORDr_BLKACC,8,SER_RANGE_11_PROT_WORDr_OFFSET,i,(r._ser_range_11_prot_word), 1)
#define WRITE_SER_RANGE_11_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_PROT_WORDr_BLKACC,8,SER_RANGE_11_PROT_WORDr_OFFSET,i,&(r._ser_range_11_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_PROT_WORD_0.
 */
#define READ_SER_RANGE_11_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_PROT_WORD_0r_BLKACC,8,SER_RANGE_11_PROT_WORD_0r_OFFSET,0,(r._ser_range_11_prot_word_0), 1)
#define WRITE_SER_RANGE_11_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_PROT_WORD_0r_BLKACC,8,SER_RANGE_11_PROT_WORD_0r_OFFSET,0,&(r._ser_range_11_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_PROT_WORD_1.
 */
#define READ_SER_RANGE_11_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_PROT_WORD_1r_BLKACC,8,SER_RANGE_11_PROT_WORD_1r_OFFSET,0,(r._ser_range_11_prot_word_1), 1)
#define WRITE_SER_RANGE_11_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_PROT_WORD_1r_BLKACC,8,SER_RANGE_11_PROT_WORD_1r_OFFSET,0,&(r._ser_range_11_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_PROT_WORD_2.
 */
#define READ_SER_RANGE_11_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_PROT_WORD_2r_BLKACC,8,SER_RANGE_11_PROT_WORD_2r_OFFSET,0,(r._ser_range_11_prot_word_2), 1)
#define WRITE_SER_RANGE_11_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_PROT_WORD_2r_BLKACC,8,SER_RANGE_11_PROT_WORD_2r_OFFSET,0,&(r._ser_range_11_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_PROT_WORD_3.
 */
#define READ_SER_RANGE_11_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_PROT_WORD_3r_BLKACC,8,SER_RANGE_11_PROT_WORD_3r_OFFSET,0,(r._ser_range_11_prot_word_3), 1)
#define WRITE_SER_RANGE_11_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_PROT_WORD_3r_BLKACC,8,SER_RANGE_11_PROT_WORD_3r_OFFSET,0,&(r._ser_range_11_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_RESULT.
 */
#define READ_SER_RANGE_11_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_RESULTr_BLKACC,8,SER_RANGE_11_RESULTr_OFFSET,0,(r._ser_range_11_result), 1)
#define WRITE_SER_RANGE_11_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_RESULTr_BLKACC,8,SER_RANGE_11_RESULTr_OFFSET,0,&(r._ser_range_11_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_11_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_11_START.
 */
#define READ_SER_RANGE_11_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_11_STARTr_BLKACC,8,SER_RANGE_11_STARTr_OFFSET,0,(r._ser_range_11_start), 1)
#define WRITE_SER_RANGE_11_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_11_STARTr_BLKACC,8,SER_RANGE_11_STARTr_OFFSET,0,&(r._ser_range_11_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_11_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_ADDR_BITS.
 */
#define READ_SER_RANGE_12_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_ADDR_BITSr_BLKACC,8,SER_RANGE_12_ADDR_BITSr_OFFSET,0,(r._ser_range_12_addr_bits), 1)
#define WRITE_SER_RANGE_12_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_ADDR_BITSr_BLKACC,8,SER_RANGE_12_ADDR_BITSr_OFFSET,0,&(r._ser_range_12_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_CONFIG.
 */
#define READ_SER_RANGE_12_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_CONFIGr_BLKACC,8,SER_RANGE_12_CONFIGr_OFFSET,0,(r._ser_range_12_config), 1)
#define WRITE_SER_RANGE_12_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_CONFIGr_BLKACC,8,SER_RANGE_12_CONFIGr_OFFSET,0,&(r._ser_range_12_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_DISABLE.
 */
#define READ_SER_RANGE_12_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_DISABLEr_BLKACC,8,SER_RANGE_12_DISABLEr_OFFSET,0,(r._ser_range_12_disable), 1)
#define WRITE_SER_RANGE_12_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_DISABLEr_BLKACC,8,SER_RANGE_12_DISABLEr_OFFSET,0,&(r._ser_range_12_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_END.
 */
#define READ_SER_RANGE_12_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_ENDr_BLKACC,8,SER_RANGE_12_ENDr_OFFSET,0,(r._ser_range_12_end), 1)
#define WRITE_SER_RANGE_12_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_ENDr_BLKACC,8,SER_RANGE_12_ENDr_OFFSET,0,&(r._ser_range_12_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_PROT_WORD.
 */
#define READ_SER_RANGE_12_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_PROT_WORDr_BLKACC,8,SER_RANGE_12_PROT_WORDr_OFFSET,i,(r._ser_range_12_prot_word), 1)
#define WRITE_SER_RANGE_12_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_PROT_WORDr_BLKACC,8,SER_RANGE_12_PROT_WORDr_OFFSET,i,&(r._ser_range_12_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_PROT_WORD_0.
 */
#define READ_SER_RANGE_12_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_PROT_WORD_0r_BLKACC,8,SER_RANGE_12_PROT_WORD_0r_OFFSET,0,(r._ser_range_12_prot_word_0), 1)
#define WRITE_SER_RANGE_12_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_PROT_WORD_0r_BLKACC,8,SER_RANGE_12_PROT_WORD_0r_OFFSET,0,&(r._ser_range_12_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_PROT_WORD_1.
 */
#define READ_SER_RANGE_12_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_PROT_WORD_1r_BLKACC,8,SER_RANGE_12_PROT_WORD_1r_OFFSET,0,(r._ser_range_12_prot_word_1), 1)
#define WRITE_SER_RANGE_12_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_PROT_WORD_1r_BLKACC,8,SER_RANGE_12_PROT_WORD_1r_OFFSET,0,&(r._ser_range_12_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_PROT_WORD_2.
 */
#define READ_SER_RANGE_12_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_PROT_WORD_2r_BLKACC,8,SER_RANGE_12_PROT_WORD_2r_OFFSET,0,(r._ser_range_12_prot_word_2), 1)
#define WRITE_SER_RANGE_12_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_PROT_WORD_2r_BLKACC,8,SER_RANGE_12_PROT_WORD_2r_OFFSET,0,&(r._ser_range_12_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_PROT_WORD_3.
 */
#define READ_SER_RANGE_12_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_PROT_WORD_3r_BLKACC,8,SER_RANGE_12_PROT_WORD_3r_OFFSET,0,(r._ser_range_12_prot_word_3), 1)
#define WRITE_SER_RANGE_12_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_PROT_WORD_3r_BLKACC,8,SER_RANGE_12_PROT_WORD_3r_OFFSET,0,&(r._ser_range_12_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_RESULT.
 */
#define READ_SER_RANGE_12_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_RESULTr_BLKACC,8,SER_RANGE_12_RESULTr_OFFSET,0,(r._ser_range_12_result), 1)
#define WRITE_SER_RANGE_12_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_RESULTr_BLKACC,8,SER_RANGE_12_RESULTr_OFFSET,0,&(r._ser_range_12_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_12_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_12_START.
 */
#define READ_SER_RANGE_12_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_12_STARTr_BLKACC,8,SER_RANGE_12_STARTr_OFFSET,0,(r._ser_range_12_start), 1)
#define WRITE_SER_RANGE_12_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_12_STARTr_BLKACC,8,SER_RANGE_12_STARTr_OFFSET,0,&(r._ser_range_12_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_12_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_ADDR_BITS.
 */
#define READ_SER_RANGE_13_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_ADDR_BITSr_BLKACC,8,SER_RANGE_13_ADDR_BITSr_OFFSET,0,(r._ser_range_13_addr_bits), 1)
#define WRITE_SER_RANGE_13_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_ADDR_BITSr_BLKACC,8,SER_RANGE_13_ADDR_BITSr_OFFSET,0,&(r._ser_range_13_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_CONFIG.
 */
#define READ_SER_RANGE_13_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_CONFIGr_BLKACC,8,SER_RANGE_13_CONFIGr_OFFSET,0,(r._ser_range_13_config), 1)
#define WRITE_SER_RANGE_13_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_CONFIGr_BLKACC,8,SER_RANGE_13_CONFIGr_OFFSET,0,&(r._ser_range_13_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_DISABLE.
 */
#define READ_SER_RANGE_13_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_DISABLEr_BLKACC,8,SER_RANGE_13_DISABLEr_OFFSET,0,(r._ser_range_13_disable), 1)
#define WRITE_SER_RANGE_13_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_DISABLEr_BLKACC,8,SER_RANGE_13_DISABLEr_OFFSET,0,&(r._ser_range_13_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_END.
 */
#define READ_SER_RANGE_13_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_ENDr_BLKACC,8,SER_RANGE_13_ENDr_OFFSET,0,(r._ser_range_13_end), 1)
#define WRITE_SER_RANGE_13_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_ENDr_BLKACC,8,SER_RANGE_13_ENDr_OFFSET,0,&(r._ser_range_13_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_PROT_WORD.
 */
#define READ_SER_RANGE_13_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_PROT_WORDr_BLKACC,8,SER_RANGE_13_PROT_WORDr_OFFSET,i,(r._ser_range_13_prot_word), 1)
#define WRITE_SER_RANGE_13_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_PROT_WORDr_BLKACC,8,SER_RANGE_13_PROT_WORDr_OFFSET,i,&(r._ser_range_13_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_PROT_WORD_0.
 */
#define READ_SER_RANGE_13_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_PROT_WORD_0r_BLKACC,8,SER_RANGE_13_PROT_WORD_0r_OFFSET,0,(r._ser_range_13_prot_word_0), 1)
#define WRITE_SER_RANGE_13_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_PROT_WORD_0r_BLKACC,8,SER_RANGE_13_PROT_WORD_0r_OFFSET,0,&(r._ser_range_13_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_PROT_WORD_1.
 */
#define READ_SER_RANGE_13_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_PROT_WORD_1r_BLKACC,8,SER_RANGE_13_PROT_WORD_1r_OFFSET,0,(r._ser_range_13_prot_word_1), 1)
#define WRITE_SER_RANGE_13_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_PROT_WORD_1r_BLKACC,8,SER_RANGE_13_PROT_WORD_1r_OFFSET,0,&(r._ser_range_13_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_PROT_WORD_2.
 */
#define READ_SER_RANGE_13_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_PROT_WORD_2r_BLKACC,8,SER_RANGE_13_PROT_WORD_2r_OFFSET,0,(r._ser_range_13_prot_word_2), 1)
#define WRITE_SER_RANGE_13_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_PROT_WORD_2r_BLKACC,8,SER_RANGE_13_PROT_WORD_2r_OFFSET,0,&(r._ser_range_13_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_PROT_WORD_3.
 */
#define READ_SER_RANGE_13_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_PROT_WORD_3r_BLKACC,8,SER_RANGE_13_PROT_WORD_3r_OFFSET,0,(r._ser_range_13_prot_word_3), 1)
#define WRITE_SER_RANGE_13_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_PROT_WORD_3r_BLKACC,8,SER_RANGE_13_PROT_WORD_3r_OFFSET,0,&(r._ser_range_13_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_RESULT.
 */
#define READ_SER_RANGE_13_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_RESULTr_BLKACC,8,SER_RANGE_13_RESULTr_OFFSET,0,(r._ser_range_13_result), 1)
#define WRITE_SER_RANGE_13_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_RESULTr_BLKACC,8,SER_RANGE_13_RESULTr_OFFSET,0,&(r._ser_range_13_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_13_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_13_START.
 */
#define READ_SER_RANGE_13_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_13_STARTr_BLKACC,8,SER_RANGE_13_STARTr_OFFSET,0,(r._ser_range_13_start), 1)
#define WRITE_SER_RANGE_13_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_13_STARTr_BLKACC,8,SER_RANGE_13_STARTr_OFFSET,0,&(r._ser_range_13_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_13_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_ADDR_BITS.
 */
#define READ_SER_RANGE_14_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_ADDR_BITSr_BLKACC,8,SER_RANGE_14_ADDR_BITSr_OFFSET,0,(r._ser_range_14_addr_bits), 1)
#define WRITE_SER_RANGE_14_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_ADDR_BITSr_BLKACC,8,SER_RANGE_14_ADDR_BITSr_OFFSET,0,&(r._ser_range_14_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_CONFIG.
 */
#define READ_SER_RANGE_14_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_CONFIGr_BLKACC,8,SER_RANGE_14_CONFIGr_OFFSET,0,(r._ser_range_14_config), 1)
#define WRITE_SER_RANGE_14_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_CONFIGr_BLKACC,8,SER_RANGE_14_CONFIGr_OFFSET,0,&(r._ser_range_14_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_DISABLE.
 */
#define READ_SER_RANGE_14_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_DISABLEr_BLKACC,8,SER_RANGE_14_DISABLEr_OFFSET,0,(r._ser_range_14_disable), 1)
#define WRITE_SER_RANGE_14_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_DISABLEr_BLKACC,8,SER_RANGE_14_DISABLEr_OFFSET,0,&(r._ser_range_14_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_END.
 */
#define READ_SER_RANGE_14_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_ENDr_BLKACC,8,SER_RANGE_14_ENDr_OFFSET,0,(r._ser_range_14_end), 1)
#define WRITE_SER_RANGE_14_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_ENDr_BLKACC,8,SER_RANGE_14_ENDr_OFFSET,0,&(r._ser_range_14_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_PROT_WORD.
 */
#define READ_SER_RANGE_14_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_PROT_WORDr_BLKACC,8,SER_RANGE_14_PROT_WORDr_OFFSET,i,(r._ser_range_14_prot_word), 1)
#define WRITE_SER_RANGE_14_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_PROT_WORDr_BLKACC,8,SER_RANGE_14_PROT_WORDr_OFFSET,i,&(r._ser_range_14_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_PROT_WORD_0.
 */
#define READ_SER_RANGE_14_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_PROT_WORD_0r_BLKACC,8,SER_RANGE_14_PROT_WORD_0r_OFFSET,0,(r._ser_range_14_prot_word_0), 1)
#define WRITE_SER_RANGE_14_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_PROT_WORD_0r_BLKACC,8,SER_RANGE_14_PROT_WORD_0r_OFFSET,0,&(r._ser_range_14_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_PROT_WORD_1.
 */
#define READ_SER_RANGE_14_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_PROT_WORD_1r_BLKACC,8,SER_RANGE_14_PROT_WORD_1r_OFFSET,0,(r._ser_range_14_prot_word_1), 1)
#define WRITE_SER_RANGE_14_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_PROT_WORD_1r_BLKACC,8,SER_RANGE_14_PROT_WORD_1r_OFFSET,0,&(r._ser_range_14_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_PROT_WORD_2.
 */
#define READ_SER_RANGE_14_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_PROT_WORD_2r_BLKACC,8,SER_RANGE_14_PROT_WORD_2r_OFFSET,0,(r._ser_range_14_prot_word_2), 1)
#define WRITE_SER_RANGE_14_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_PROT_WORD_2r_BLKACC,8,SER_RANGE_14_PROT_WORD_2r_OFFSET,0,&(r._ser_range_14_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_PROT_WORD_3.
 */
#define READ_SER_RANGE_14_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_PROT_WORD_3r_BLKACC,8,SER_RANGE_14_PROT_WORD_3r_OFFSET,0,(r._ser_range_14_prot_word_3), 1)
#define WRITE_SER_RANGE_14_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_PROT_WORD_3r_BLKACC,8,SER_RANGE_14_PROT_WORD_3r_OFFSET,0,&(r._ser_range_14_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_RESULT.
 */
#define READ_SER_RANGE_14_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_RESULTr_BLKACC,8,SER_RANGE_14_RESULTr_OFFSET,0,(r._ser_range_14_result), 1)
#define WRITE_SER_RANGE_14_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_RESULTr_BLKACC,8,SER_RANGE_14_RESULTr_OFFSET,0,&(r._ser_range_14_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_14_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_14_START.
 */
#define READ_SER_RANGE_14_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_14_STARTr_BLKACC,8,SER_RANGE_14_STARTr_OFFSET,0,(r._ser_range_14_start), 1)
#define WRITE_SER_RANGE_14_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_14_STARTr_BLKACC,8,SER_RANGE_14_STARTr_OFFSET,0,&(r._ser_range_14_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_14_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_ADDR_BITS.
 */
#define READ_SER_RANGE_15_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_ADDR_BITSr_BLKACC,8,SER_RANGE_15_ADDR_BITSr_OFFSET,0,(r._ser_range_15_addr_bits), 1)
#define WRITE_SER_RANGE_15_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_ADDR_BITSr_BLKACC,8,SER_RANGE_15_ADDR_BITSr_OFFSET,0,&(r._ser_range_15_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_CONFIG.
 */
#define READ_SER_RANGE_15_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_CONFIGr_BLKACC,8,SER_RANGE_15_CONFIGr_OFFSET,0,(r._ser_range_15_config), 1)
#define WRITE_SER_RANGE_15_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_CONFIGr_BLKACC,8,SER_RANGE_15_CONFIGr_OFFSET,0,&(r._ser_range_15_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_DISABLE.
 */
#define READ_SER_RANGE_15_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_DISABLEr_BLKACC,8,SER_RANGE_15_DISABLEr_OFFSET,0,(r._ser_range_15_disable), 1)
#define WRITE_SER_RANGE_15_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_DISABLEr_BLKACC,8,SER_RANGE_15_DISABLEr_OFFSET,0,&(r._ser_range_15_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_END.
 */
#define READ_SER_RANGE_15_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_ENDr_BLKACC,8,SER_RANGE_15_ENDr_OFFSET,0,(r._ser_range_15_end), 1)
#define WRITE_SER_RANGE_15_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_ENDr_BLKACC,8,SER_RANGE_15_ENDr_OFFSET,0,&(r._ser_range_15_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_PROT_WORD.
 */
#define READ_SER_RANGE_15_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_PROT_WORDr_BLKACC,8,SER_RANGE_15_PROT_WORDr_OFFSET,i,(r._ser_range_15_prot_word), 1)
#define WRITE_SER_RANGE_15_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_PROT_WORDr_BLKACC,8,SER_RANGE_15_PROT_WORDr_OFFSET,i,&(r._ser_range_15_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_PROT_WORD_0.
 */
#define READ_SER_RANGE_15_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_PROT_WORD_0r_BLKACC,8,SER_RANGE_15_PROT_WORD_0r_OFFSET,0,(r._ser_range_15_prot_word_0), 1)
#define WRITE_SER_RANGE_15_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_PROT_WORD_0r_BLKACC,8,SER_RANGE_15_PROT_WORD_0r_OFFSET,0,&(r._ser_range_15_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_PROT_WORD_1.
 */
#define READ_SER_RANGE_15_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_PROT_WORD_1r_BLKACC,8,SER_RANGE_15_PROT_WORD_1r_OFFSET,0,(r._ser_range_15_prot_word_1), 1)
#define WRITE_SER_RANGE_15_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_PROT_WORD_1r_BLKACC,8,SER_RANGE_15_PROT_WORD_1r_OFFSET,0,&(r._ser_range_15_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_PROT_WORD_2.
 */
#define READ_SER_RANGE_15_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_PROT_WORD_2r_BLKACC,8,SER_RANGE_15_PROT_WORD_2r_OFFSET,0,(r._ser_range_15_prot_word_2), 1)
#define WRITE_SER_RANGE_15_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_PROT_WORD_2r_BLKACC,8,SER_RANGE_15_PROT_WORD_2r_OFFSET,0,&(r._ser_range_15_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_PROT_WORD_3.
 */
#define READ_SER_RANGE_15_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_PROT_WORD_3r_BLKACC,8,SER_RANGE_15_PROT_WORD_3r_OFFSET,0,(r._ser_range_15_prot_word_3), 1)
#define WRITE_SER_RANGE_15_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_PROT_WORD_3r_BLKACC,8,SER_RANGE_15_PROT_WORD_3r_OFFSET,0,&(r._ser_range_15_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_RESULT.
 */
#define READ_SER_RANGE_15_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_RESULTr_BLKACC,8,SER_RANGE_15_RESULTr_OFFSET,0,(r._ser_range_15_result), 1)
#define WRITE_SER_RANGE_15_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_RESULTr_BLKACC,8,SER_RANGE_15_RESULTr_OFFSET,0,&(r._ser_range_15_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_15_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_15_START.
 */
#define READ_SER_RANGE_15_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_15_STARTr_BLKACC,8,SER_RANGE_15_STARTr_OFFSET,0,(r._ser_range_15_start), 1)
#define WRITE_SER_RANGE_15_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_15_STARTr_BLKACC,8,SER_RANGE_15_STARTr_OFFSET,0,&(r._ser_range_15_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_15_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_ADDR_BITS.
 */
#define READ_SER_RANGE_16_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_ADDR_BITSr_BLKACC,8,SER_RANGE_16_ADDR_BITSr_OFFSET,0,(r._ser_range_16_addr_bits), 1)
#define WRITE_SER_RANGE_16_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_ADDR_BITSr_BLKACC,8,SER_RANGE_16_ADDR_BITSr_OFFSET,0,&(r._ser_range_16_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_CONFIG.
 */
#define READ_SER_RANGE_16_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_CONFIGr_BLKACC,8,SER_RANGE_16_CONFIGr_OFFSET,0,(r._ser_range_16_config), 1)
#define WRITE_SER_RANGE_16_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_CONFIGr_BLKACC,8,SER_RANGE_16_CONFIGr_OFFSET,0,&(r._ser_range_16_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_DISABLE.
 */
#define READ_SER_RANGE_16_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_DISABLEr_BLKACC,8,SER_RANGE_16_DISABLEr_OFFSET,0,(r._ser_range_16_disable), 1)
#define WRITE_SER_RANGE_16_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_DISABLEr_BLKACC,8,SER_RANGE_16_DISABLEr_OFFSET,0,&(r._ser_range_16_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_END.
 */
#define READ_SER_RANGE_16_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_ENDr_BLKACC,8,SER_RANGE_16_ENDr_OFFSET,0,(r._ser_range_16_end), 1)
#define WRITE_SER_RANGE_16_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_ENDr_BLKACC,8,SER_RANGE_16_ENDr_OFFSET,0,&(r._ser_range_16_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_PROT_WORD.
 */
#define READ_SER_RANGE_16_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_PROT_WORDr_BLKACC,8,SER_RANGE_16_PROT_WORDr_OFFSET,i,(r._ser_range_16_prot_word), 1)
#define WRITE_SER_RANGE_16_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_PROT_WORDr_BLKACC,8,SER_RANGE_16_PROT_WORDr_OFFSET,i,&(r._ser_range_16_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_PROT_WORD_0.
 */
#define READ_SER_RANGE_16_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_PROT_WORD_0r_BLKACC,8,SER_RANGE_16_PROT_WORD_0r_OFFSET,0,(r._ser_range_16_prot_word_0), 1)
#define WRITE_SER_RANGE_16_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_PROT_WORD_0r_BLKACC,8,SER_RANGE_16_PROT_WORD_0r_OFFSET,0,&(r._ser_range_16_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_PROT_WORD_1.
 */
#define READ_SER_RANGE_16_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_PROT_WORD_1r_BLKACC,8,SER_RANGE_16_PROT_WORD_1r_OFFSET,0,(r._ser_range_16_prot_word_1), 1)
#define WRITE_SER_RANGE_16_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_PROT_WORD_1r_BLKACC,8,SER_RANGE_16_PROT_WORD_1r_OFFSET,0,&(r._ser_range_16_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_PROT_WORD_2.
 */
#define READ_SER_RANGE_16_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_PROT_WORD_2r_BLKACC,8,SER_RANGE_16_PROT_WORD_2r_OFFSET,0,(r._ser_range_16_prot_word_2), 1)
#define WRITE_SER_RANGE_16_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_PROT_WORD_2r_BLKACC,8,SER_RANGE_16_PROT_WORD_2r_OFFSET,0,&(r._ser_range_16_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_PROT_WORD_3.
 */
#define READ_SER_RANGE_16_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_PROT_WORD_3r_BLKACC,8,SER_RANGE_16_PROT_WORD_3r_OFFSET,0,(r._ser_range_16_prot_word_3), 1)
#define WRITE_SER_RANGE_16_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_PROT_WORD_3r_BLKACC,8,SER_RANGE_16_PROT_WORD_3r_OFFSET,0,&(r._ser_range_16_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_RESULT.
 */
#define READ_SER_RANGE_16_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_RESULTr_BLKACC,8,SER_RANGE_16_RESULTr_OFFSET,0,(r._ser_range_16_result), 1)
#define WRITE_SER_RANGE_16_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_RESULTr_BLKACC,8,SER_RANGE_16_RESULTr_OFFSET,0,&(r._ser_range_16_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_16_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_16_START.
 */
#define READ_SER_RANGE_16_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_16_STARTr_BLKACC,8,SER_RANGE_16_STARTr_OFFSET,0,(r._ser_range_16_start), 1)
#define WRITE_SER_RANGE_16_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_16_STARTr_BLKACC,8,SER_RANGE_16_STARTr_OFFSET,0,&(r._ser_range_16_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_16_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_ADDR_BITS.
 */
#define READ_SER_RANGE_17_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_ADDR_BITSr_BLKACC,8,SER_RANGE_17_ADDR_BITSr_OFFSET,0,(r._ser_range_17_addr_bits), 1)
#define WRITE_SER_RANGE_17_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_ADDR_BITSr_BLKACC,8,SER_RANGE_17_ADDR_BITSr_OFFSET,0,&(r._ser_range_17_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_CONFIG.
 */
#define READ_SER_RANGE_17_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_CONFIGr_BLKACC,8,SER_RANGE_17_CONFIGr_OFFSET,0,(r._ser_range_17_config), 1)
#define WRITE_SER_RANGE_17_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_CONFIGr_BLKACC,8,SER_RANGE_17_CONFIGr_OFFSET,0,&(r._ser_range_17_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_DISABLE.
 */
#define READ_SER_RANGE_17_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_DISABLEr_BLKACC,8,SER_RANGE_17_DISABLEr_OFFSET,0,(r._ser_range_17_disable), 1)
#define WRITE_SER_RANGE_17_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_DISABLEr_BLKACC,8,SER_RANGE_17_DISABLEr_OFFSET,0,&(r._ser_range_17_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_END.
 */
#define READ_SER_RANGE_17_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_ENDr_BLKACC,8,SER_RANGE_17_ENDr_OFFSET,0,(r._ser_range_17_end), 1)
#define WRITE_SER_RANGE_17_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_ENDr_BLKACC,8,SER_RANGE_17_ENDr_OFFSET,0,&(r._ser_range_17_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_PROT_WORD.
 */
#define READ_SER_RANGE_17_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_PROT_WORDr_BLKACC,8,SER_RANGE_17_PROT_WORDr_OFFSET,i,(r._ser_range_17_prot_word), 1)
#define WRITE_SER_RANGE_17_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_PROT_WORDr_BLKACC,8,SER_RANGE_17_PROT_WORDr_OFFSET,i,&(r._ser_range_17_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_PROT_WORD_0.
 */
#define READ_SER_RANGE_17_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_PROT_WORD_0r_BLKACC,8,SER_RANGE_17_PROT_WORD_0r_OFFSET,0,(r._ser_range_17_prot_word_0), 1)
#define WRITE_SER_RANGE_17_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_PROT_WORD_0r_BLKACC,8,SER_RANGE_17_PROT_WORD_0r_OFFSET,0,&(r._ser_range_17_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_PROT_WORD_1.
 */
#define READ_SER_RANGE_17_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_PROT_WORD_1r_BLKACC,8,SER_RANGE_17_PROT_WORD_1r_OFFSET,0,(r._ser_range_17_prot_word_1), 1)
#define WRITE_SER_RANGE_17_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_PROT_WORD_1r_BLKACC,8,SER_RANGE_17_PROT_WORD_1r_OFFSET,0,&(r._ser_range_17_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_PROT_WORD_2.
 */
#define READ_SER_RANGE_17_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_PROT_WORD_2r_BLKACC,8,SER_RANGE_17_PROT_WORD_2r_OFFSET,0,(r._ser_range_17_prot_word_2), 1)
#define WRITE_SER_RANGE_17_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_PROT_WORD_2r_BLKACC,8,SER_RANGE_17_PROT_WORD_2r_OFFSET,0,&(r._ser_range_17_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_PROT_WORD_3.
 */
#define READ_SER_RANGE_17_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_PROT_WORD_3r_BLKACC,8,SER_RANGE_17_PROT_WORD_3r_OFFSET,0,(r._ser_range_17_prot_word_3), 1)
#define WRITE_SER_RANGE_17_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_PROT_WORD_3r_BLKACC,8,SER_RANGE_17_PROT_WORD_3r_OFFSET,0,&(r._ser_range_17_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_RESULT.
 */
#define READ_SER_RANGE_17_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_RESULTr_BLKACC,8,SER_RANGE_17_RESULTr_OFFSET,0,(r._ser_range_17_result), 1)
#define WRITE_SER_RANGE_17_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_RESULTr_BLKACC,8,SER_RANGE_17_RESULTr_OFFSET,0,&(r._ser_range_17_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_17_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_17_START.
 */
#define READ_SER_RANGE_17_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_17_STARTr_BLKACC,8,SER_RANGE_17_STARTr_OFFSET,0,(r._ser_range_17_start), 1)
#define WRITE_SER_RANGE_17_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_17_STARTr_BLKACC,8,SER_RANGE_17_STARTr_OFFSET,0,&(r._ser_range_17_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_17_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_ADDR_BITS.
 */
#define READ_SER_RANGE_18_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_ADDR_BITSr_BLKACC,8,SER_RANGE_18_ADDR_BITSr_OFFSET,0,(r._ser_range_18_addr_bits), 1)
#define WRITE_SER_RANGE_18_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_ADDR_BITSr_BLKACC,8,SER_RANGE_18_ADDR_BITSr_OFFSET,0,&(r._ser_range_18_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_CONFIG.
 */
#define READ_SER_RANGE_18_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_CONFIGr_BLKACC,8,SER_RANGE_18_CONFIGr_OFFSET,0,(r._ser_range_18_config), 1)
#define WRITE_SER_RANGE_18_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_CONFIGr_BLKACC,8,SER_RANGE_18_CONFIGr_OFFSET,0,&(r._ser_range_18_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_DISABLE.
 */
#define READ_SER_RANGE_18_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_DISABLEr_BLKACC,8,SER_RANGE_18_DISABLEr_OFFSET,0,(r._ser_range_18_disable), 1)
#define WRITE_SER_RANGE_18_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_DISABLEr_BLKACC,8,SER_RANGE_18_DISABLEr_OFFSET,0,&(r._ser_range_18_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_END.
 */
#define READ_SER_RANGE_18_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_ENDr_BLKACC,8,SER_RANGE_18_ENDr_OFFSET,0,(r._ser_range_18_end), 1)
#define WRITE_SER_RANGE_18_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_ENDr_BLKACC,8,SER_RANGE_18_ENDr_OFFSET,0,&(r._ser_range_18_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_PROT_WORD.
 */
#define READ_SER_RANGE_18_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_PROT_WORDr_BLKACC,8,SER_RANGE_18_PROT_WORDr_OFFSET,i,(r._ser_range_18_prot_word), 1)
#define WRITE_SER_RANGE_18_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_PROT_WORDr_BLKACC,8,SER_RANGE_18_PROT_WORDr_OFFSET,i,&(r._ser_range_18_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_PROT_WORD_0.
 */
#define READ_SER_RANGE_18_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_PROT_WORD_0r_BLKACC,8,SER_RANGE_18_PROT_WORD_0r_OFFSET,0,(r._ser_range_18_prot_word_0), 1)
#define WRITE_SER_RANGE_18_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_PROT_WORD_0r_BLKACC,8,SER_RANGE_18_PROT_WORD_0r_OFFSET,0,&(r._ser_range_18_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_PROT_WORD_1.
 */
#define READ_SER_RANGE_18_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_PROT_WORD_1r_BLKACC,8,SER_RANGE_18_PROT_WORD_1r_OFFSET,0,(r._ser_range_18_prot_word_1), 1)
#define WRITE_SER_RANGE_18_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_PROT_WORD_1r_BLKACC,8,SER_RANGE_18_PROT_WORD_1r_OFFSET,0,&(r._ser_range_18_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_PROT_WORD_2.
 */
#define READ_SER_RANGE_18_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_PROT_WORD_2r_BLKACC,8,SER_RANGE_18_PROT_WORD_2r_OFFSET,0,(r._ser_range_18_prot_word_2), 1)
#define WRITE_SER_RANGE_18_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_PROT_WORD_2r_BLKACC,8,SER_RANGE_18_PROT_WORD_2r_OFFSET,0,&(r._ser_range_18_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_PROT_WORD_3.
 */
#define READ_SER_RANGE_18_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_PROT_WORD_3r_BLKACC,8,SER_RANGE_18_PROT_WORD_3r_OFFSET,0,(r._ser_range_18_prot_word_3), 1)
#define WRITE_SER_RANGE_18_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_PROT_WORD_3r_BLKACC,8,SER_RANGE_18_PROT_WORD_3r_OFFSET,0,&(r._ser_range_18_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_RESULT.
 */
#define READ_SER_RANGE_18_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_RESULTr_BLKACC,8,SER_RANGE_18_RESULTr_OFFSET,0,(r._ser_range_18_result), 1)
#define WRITE_SER_RANGE_18_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_RESULTr_BLKACC,8,SER_RANGE_18_RESULTr_OFFSET,0,&(r._ser_range_18_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_18_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_18_START.
 */
#define READ_SER_RANGE_18_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_18_STARTr_BLKACC,8,SER_RANGE_18_STARTr_OFFSET,0,(r._ser_range_18_start), 1)
#define WRITE_SER_RANGE_18_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_18_STARTr_BLKACC,8,SER_RANGE_18_STARTr_OFFSET,0,&(r._ser_range_18_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_18_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_ADDR_BITS.
 */
#define READ_SER_RANGE_19_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_ADDR_BITSr_BLKACC,8,SER_RANGE_19_ADDR_BITSr_OFFSET,0,(r._ser_range_19_addr_bits), 1)
#define WRITE_SER_RANGE_19_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_ADDR_BITSr_BLKACC,8,SER_RANGE_19_ADDR_BITSr_OFFSET,0,&(r._ser_range_19_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_CONFIG.
 */
#define READ_SER_RANGE_19_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_CONFIGr_BLKACC,8,SER_RANGE_19_CONFIGr_OFFSET,0,(r._ser_range_19_config), 1)
#define WRITE_SER_RANGE_19_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_CONFIGr_BLKACC,8,SER_RANGE_19_CONFIGr_OFFSET,0,&(r._ser_range_19_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_DISABLE.
 */
#define READ_SER_RANGE_19_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_DISABLEr_BLKACC,8,SER_RANGE_19_DISABLEr_OFFSET,0,(r._ser_range_19_disable), 1)
#define WRITE_SER_RANGE_19_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_DISABLEr_BLKACC,8,SER_RANGE_19_DISABLEr_OFFSET,0,&(r._ser_range_19_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_END.
 */
#define READ_SER_RANGE_19_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_ENDr_BLKACC,8,SER_RANGE_19_ENDr_OFFSET,0,(r._ser_range_19_end), 1)
#define WRITE_SER_RANGE_19_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_ENDr_BLKACC,8,SER_RANGE_19_ENDr_OFFSET,0,&(r._ser_range_19_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_PROT_WORD.
 */
#define READ_SER_RANGE_19_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_PROT_WORDr_BLKACC,8,SER_RANGE_19_PROT_WORDr_OFFSET,i,(r._ser_range_19_prot_word), 1)
#define WRITE_SER_RANGE_19_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_PROT_WORDr_BLKACC,8,SER_RANGE_19_PROT_WORDr_OFFSET,i,&(r._ser_range_19_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_PROT_WORD_0.
 */
#define READ_SER_RANGE_19_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_PROT_WORD_0r_BLKACC,8,SER_RANGE_19_PROT_WORD_0r_OFFSET,0,(r._ser_range_19_prot_word_0), 1)
#define WRITE_SER_RANGE_19_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_PROT_WORD_0r_BLKACC,8,SER_RANGE_19_PROT_WORD_0r_OFFSET,0,&(r._ser_range_19_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_PROT_WORD_1.
 */
#define READ_SER_RANGE_19_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_PROT_WORD_1r_BLKACC,8,SER_RANGE_19_PROT_WORD_1r_OFFSET,0,(r._ser_range_19_prot_word_1), 1)
#define WRITE_SER_RANGE_19_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_PROT_WORD_1r_BLKACC,8,SER_RANGE_19_PROT_WORD_1r_OFFSET,0,&(r._ser_range_19_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_PROT_WORD_2.
 */
#define READ_SER_RANGE_19_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_PROT_WORD_2r_BLKACC,8,SER_RANGE_19_PROT_WORD_2r_OFFSET,0,(r._ser_range_19_prot_word_2), 1)
#define WRITE_SER_RANGE_19_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_PROT_WORD_2r_BLKACC,8,SER_RANGE_19_PROT_WORD_2r_OFFSET,0,&(r._ser_range_19_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_PROT_WORD_3.
 */
#define READ_SER_RANGE_19_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_PROT_WORD_3r_BLKACC,8,SER_RANGE_19_PROT_WORD_3r_OFFSET,0,(r._ser_range_19_prot_word_3), 1)
#define WRITE_SER_RANGE_19_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_PROT_WORD_3r_BLKACC,8,SER_RANGE_19_PROT_WORD_3r_OFFSET,0,&(r._ser_range_19_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_RESULT.
 */
#define READ_SER_RANGE_19_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_RESULTr_BLKACC,8,SER_RANGE_19_RESULTr_OFFSET,0,(r._ser_range_19_result), 1)
#define WRITE_SER_RANGE_19_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_RESULTr_BLKACC,8,SER_RANGE_19_RESULTr_OFFSET,0,&(r._ser_range_19_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_19_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_19_START.
 */
#define READ_SER_RANGE_19_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_19_STARTr_BLKACC,8,SER_RANGE_19_STARTr_OFFSET,0,(r._ser_range_19_start), 1)
#define WRITE_SER_RANGE_19_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_19_STARTr_BLKACC,8,SER_RANGE_19_STARTr_OFFSET,0,&(r._ser_range_19_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_19_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_ADDR_BITS.
 */
#define READ_SER_RANGE_1_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_ADDR_BITSr_BLKACC,8,SER_RANGE_1_ADDR_BITSr_OFFSET,0,(r._ser_range_1_addr_bits), 1)
#define WRITE_SER_RANGE_1_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_ADDR_BITSr_BLKACC,8,SER_RANGE_1_ADDR_BITSr_OFFSET,0,&(r._ser_range_1_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_CONFIG.
 */
#define READ_SER_RANGE_1_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_CONFIGr_BLKACC,8,SER_RANGE_1_CONFIGr_OFFSET,0,(r._ser_range_1_config), 1)
#define WRITE_SER_RANGE_1_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_CONFIGr_BLKACC,8,SER_RANGE_1_CONFIGr_OFFSET,0,&(r._ser_range_1_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_DISABLE.
 */
#define READ_SER_RANGE_1_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_DISABLEr_BLKACC,8,SER_RANGE_1_DISABLEr_OFFSET,0,(r._ser_range_1_disable), 1)
#define WRITE_SER_RANGE_1_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_DISABLEr_BLKACC,8,SER_RANGE_1_DISABLEr_OFFSET,0,&(r._ser_range_1_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_END.
 */
#define READ_SER_RANGE_1_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_ENDr_BLKACC,8,SER_RANGE_1_ENDr_OFFSET,0,(r._ser_range_1_end), 1)
#define WRITE_SER_RANGE_1_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_ENDr_BLKACC,8,SER_RANGE_1_ENDr_OFFSET,0,&(r._ser_range_1_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_PROT_WORD.
 */
#define READ_SER_RANGE_1_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_PROT_WORDr_BLKACC,8,SER_RANGE_1_PROT_WORDr_OFFSET,i,(r._ser_range_1_prot_word), 1)
#define WRITE_SER_RANGE_1_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_PROT_WORDr_BLKACC,8,SER_RANGE_1_PROT_WORDr_OFFSET,i,&(r._ser_range_1_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_PROT_WORD_0.
 */
#define READ_SER_RANGE_1_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_PROT_WORD_0r_BLKACC,8,SER_RANGE_1_PROT_WORD_0r_OFFSET,0,(r._ser_range_1_prot_word_0), 1)
#define WRITE_SER_RANGE_1_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_PROT_WORD_0r_BLKACC,8,SER_RANGE_1_PROT_WORD_0r_OFFSET,0,&(r._ser_range_1_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_PROT_WORD_1.
 */
#define READ_SER_RANGE_1_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_PROT_WORD_1r_BLKACC,8,SER_RANGE_1_PROT_WORD_1r_OFFSET,0,(r._ser_range_1_prot_word_1), 1)
#define WRITE_SER_RANGE_1_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_PROT_WORD_1r_BLKACC,8,SER_RANGE_1_PROT_WORD_1r_OFFSET,0,&(r._ser_range_1_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_PROT_WORD_2.
 */
#define READ_SER_RANGE_1_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_PROT_WORD_2r_BLKACC,8,SER_RANGE_1_PROT_WORD_2r_OFFSET,0,(r._ser_range_1_prot_word_2), 1)
#define WRITE_SER_RANGE_1_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_PROT_WORD_2r_BLKACC,8,SER_RANGE_1_PROT_WORD_2r_OFFSET,0,&(r._ser_range_1_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_PROT_WORD_3.
 */
#define READ_SER_RANGE_1_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_PROT_WORD_3r_BLKACC,8,SER_RANGE_1_PROT_WORD_3r_OFFSET,0,(r._ser_range_1_prot_word_3), 1)
#define WRITE_SER_RANGE_1_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_PROT_WORD_3r_BLKACC,8,SER_RANGE_1_PROT_WORD_3r_OFFSET,0,&(r._ser_range_1_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_RESULT.
 */
#define READ_SER_RANGE_1_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_RESULTr_BLKACC,8,SER_RANGE_1_RESULTr_OFFSET,0,(r._ser_range_1_result), 1)
#define WRITE_SER_RANGE_1_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_RESULTr_BLKACC,8,SER_RANGE_1_RESULTr_OFFSET,0,&(r._ser_range_1_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_1_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_1_START.
 */
#define READ_SER_RANGE_1_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_1_STARTr_BLKACC,8,SER_RANGE_1_STARTr_OFFSET,0,(r._ser_range_1_start), 1)
#define WRITE_SER_RANGE_1_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_1_STARTr_BLKACC,8,SER_RANGE_1_STARTr_OFFSET,0,&(r._ser_range_1_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_1_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_ADDR_BITS.
 */
#define READ_SER_RANGE_20_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_ADDR_BITSr_BLKACC,8,SER_RANGE_20_ADDR_BITSr_OFFSET,0,(r._ser_range_20_addr_bits), 1)
#define WRITE_SER_RANGE_20_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_ADDR_BITSr_BLKACC,8,SER_RANGE_20_ADDR_BITSr_OFFSET,0,&(r._ser_range_20_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_CONFIG.
 */
#define READ_SER_RANGE_20_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_CONFIGr_BLKACC,8,SER_RANGE_20_CONFIGr_OFFSET,0,(r._ser_range_20_config), 1)
#define WRITE_SER_RANGE_20_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_CONFIGr_BLKACC,8,SER_RANGE_20_CONFIGr_OFFSET,0,&(r._ser_range_20_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_DISABLE.
 */
#define READ_SER_RANGE_20_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_DISABLEr_BLKACC,8,SER_RANGE_20_DISABLEr_OFFSET,0,(r._ser_range_20_disable), 1)
#define WRITE_SER_RANGE_20_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_DISABLEr_BLKACC,8,SER_RANGE_20_DISABLEr_OFFSET,0,&(r._ser_range_20_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_END.
 */
#define READ_SER_RANGE_20_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_ENDr_BLKACC,8,SER_RANGE_20_ENDr_OFFSET,0,(r._ser_range_20_end), 1)
#define WRITE_SER_RANGE_20_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_ENDr_BLKACC,8,SER_RANGE_20_ENDr_OFFSET,0,&(r._ser_range_20_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_PROT_WORD.
 */
#define READ_SER_RANGE_20_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_PROT_WORDr_BLKACC,8,SER_RANGE_20_PROT_WORDr_OFFSET,i,(r._ser_range_20_prot_word), 1)
#define WRITE_SER_RANGE_20_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_PROT_WORDr_BLKACC,8,SER_RANGE_20_PROT_WORDr_OFFSET,i,&(r._ser_range_20_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_PROT_WORD_0.
 */
#define READ_SER_RANGE_20_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_PROT_WORD_0r_BLKACC,8,SER_RANGE_20_PROT_WORD_0r_OFFSET,0,(r._ser_range_20_prot_word_0), 1)
#define WRITE_SER_RANGE_20_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_PROT_WORD_0r_BLKACC,8,SER_RANGE_20_PROT_WORD_0r_OFFSET,0,&(r._ser_range_20_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_PROT_WORD_1.
 */
#define READ_SER_RANGE_20_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_PROT_WORD_1r_BLKACC,8,SER_RANGE_20_PROT_WORD_1r_OFFSET,0,(r._ser_range_20_prot_word_1), 1)
#define WRITE_SER_RANGE_20_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_PROT_WORD_1r_BLKACC,8,SER_RANGE_20_PROT_WORD_1r_OFFSET,0,&(r._ser_range_20_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_PROT_WORD_2.
 */
#define READ_SER_RANGE_20_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_PROT_WORD_2r_BLKACC,8,SER_RANGE_20_PROT_WORD_2r_OFFSET,0,(r._ser_range_20_prot_word_2), 1)
#define WRITE_SER_RANGE_20_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_PROT_WORD_2r_BLKACC,8,SER_RANGE_20_PROT_WORD_2r_OFFSET,0,&(r._ser_range_20_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_PROT_WORD_3.
 */
#define READ_SER_RANGE_20_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_PROT_WORD_3r_BLKACC,8,SER_RANGE_20_PROT_WORD_3r_OFFSET,0,(r._ser_range_20_prot_word_3), 1)
#define WRITE_SER_RANGE_20_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_PROT_WORD_3r_BLKACC,8,SER_RANGE_20_PROT_WORD_3r_OFFSET,0,&(r._ser_range_20_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_RESULT.
 */
#define READ_SER_RANGE_20_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_RESULTr_BLKACC,8,SER_RANGE_20_RESULTr_OFFSET,0,(r._ser_range_20_result), 1)
#define WRITE_SER_RANGE_20_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_RESULTr_BLKACC,8,SER_RANGE_20_RESULTr_OFFSET,0,&(r._ser_range_20_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_20_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_20_START.
 */
#define READ_SER_RANGE_20_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_20_STARTr_BLKACC,8,SER_RANGE_20_STARTr_OFFSET,0,(r._ser_range_20_start), 1)
#define WRITE_SER_RANGE_20_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_20_STARTr_BLKACC,8,SER_RANGE_20_STARTr_OFFSET,0,&(r._ser_range_20_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_20_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_ADDR_BITS.
 */
#define READ_SER_RANGE_21_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_ADDR_BITSr_BLKACC,8,SER_RANGE_21_ADDR_BITSr_OFFSET,0,(r._ser_range_21_addr_bits), 1)
#define WRITE_SER_RANGE_21_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_ADDR_BITSr_BLKACC,8,SER_RANGE_21_ADDR_BITSr_OFFSET,0,&(r._ser_range_21_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_CONFIG.
 */
#define READ_SER_RANGE_21_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_CONFIGr_BLKACC,8,SER_RANGE_21_CONFIGr_OFFSET,0,(r._ser_range_21_config), 1)
#define WRITE_SER_RANGE_21_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_CONFIGr_BLKACC,8,SER_RANGE_21_CONFIGr_OFFSET,0,&(r._ser_range_21_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_DISABLE.
 */
#define READ_SER_RANGE_21_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_DISABLEr_BLKACC,8,SER_RANGE_21_DISABLEr_OFFSET,0,(r._ser_range_21_disable), 1)
#define WRITE_SER_RANGE_21_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_DISABLEr_BLKACC,8,SER_RANGE_21_DISABLEr_OFFSET,0,&(r._ser_range_21_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_END.
 */
#define READ_SER_RANGE_21_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_ENDr_BLKACC,8,SER_RANGE_21_ENDr_OFFSET,0,(r._ser_range_21_end), 1)
#define WRITE_SER_RANGE_21_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_ENDr_BLKACC,8,SER_RANGE_21_ENDr_OFFSET,0,&(r._ser_range_21_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_PROT_WORD.
 */
#define READ_SER_RANGE_21_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_PROT_WORDr_BLKACC,8,SER_RANGE_21_PROT_WORDr_OFFSET,i,(r._ser_range_21_prot_word), 1)
#define WRITE_SER_RANGE_21_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_PROT_WORDr_BLKACC,8,SER_RANGE_21_PROT_WORDr_OFFSET,i,&(r._ser_range_21_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_PROT_WORD_0.
 */
#define READ_SER_RANGE_21_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_PROT_WORD_0r_BLKACC,8,SER_RANGE_21_PROT_WORD_0r_OFFSET,0,(r._ser_range_21_prot_word_0), 1)
#define WRITE_SER_RANGE_21_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_PROT_WORD_0r_BLKACC,8,SER_RANGE_21_PROT_WORD_0r_OFFSET,0,&(r._ser_range_21_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_PROT_WORD_1.
 */
#define READ_SER_RANGE_21_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_PROT_WORD_1r_BLKACC,8,SER_RANGE_21_PROT_WORD_1r_OFFSET,0,(r._ser_range_21_prot_word_1), 1)
#define WRITE_SER_RANGE_21_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_PROT_WORD_1r_BLKACC,8,SER_RANGE_21_PROT_WORD_1r_OFFSET,0,&(r._ser_range_21_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_PROT_WORD_2.
 */
#define READ_SER_RANGE_21_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_PROT_WORD_2r_BLKACC,8,SER_RANGE_21_PROT_WORD_2r_OFFSET,0,(r._ser_range_21_prot_word_2), 1)
#define WRITE_SER_RANGE_21_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_PROT_WORD_2r_BLKACC,8,SER_RANGE_21_PROT_WORD_2r_OFFSET,0,&(r._ser_range_21_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_PROT_WORD_3.
 */
#define READ_SER_RANGE_21_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_PROT_WORD_3r_BLKACC,8,SER_RANGE_21_PROT_WORD_3r_OFFSET,0,(r._ser_range_21_prot_word_3), 1)
#define WRITE_SER_RANGE_21_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_PROT_WORD_3r_BLKACC,8,SER_RANGE_21_PROT_WORD_3r_OFFSET,0,&(r._ser_range_21_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_RESULT.
 */
#define READ_SER_RANGE_21_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_RESULTr_BLKACC,8,SER_RANGE_21_RESULTr_OFFSET,0,(r._ser_range_21_result), 1)
#define WRITE_SER_RANGE_21_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_RESULTr_BLKACC,8,SER_RANGE_21_RESULTr_OFFSET,0,&(r._ser_range_21_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_21_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_21_START.
 */
#define READ_SER_RANGE_21_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_21_STARTr_BLKACC,8,SER_RANGE_21_STARTr_OFFSET,0,(r._ser_range_21_start), 1)
#define WRITE_SER_RANGE_21_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_21_STARTr_BLKACC,8,SER_RANGE_21_STARTr_OFFSET,0,&(r._ser_range_21_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_21_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_ADDR_BITS.
 */
#define READ_SER_RANGE_22_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_ADDR_BITSr_BLKACC,8,SER_RANGE_22_ADDR_BITSr_OFFSET,0,(r._ser_range_22_addr_bits), 1)
#define WRITE_SER_RANGE_22_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_ADDR_BITSr_BLKACC,8,SER_RANGE_22_ADDR_BITSr_OFFSET,0,&(r._ser_range_22_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_CONFIG.
 */
#define READ_SER_RANGE_22_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_CONFIGr_BLKACC,8,SER_RANGE_22_CONFIGr_OFFSET,0,(r._ser_range_22_config), 1)
#define WRITE_SER_RANGE_22_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_CONFIGr_BLKACC,8,SER_RANGE_22_CONFIGr_OFFSET,0,&(r._ser_range_22_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_DISABLE.
 */
#define READ_SER_RANGE_22_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_DISABLEr_BLKACC,8,SER_RANGE_22_DISABLEr_OFFSET,0,(r._ser_range_22_disable), 1)
#define WRITE_SER_RANGE_22_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_DISABLEr_BLKACC,8,SER_RANGE_22_DISABLEr_OFFSET,0,&(r._ser_range_22_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_END.
 */
#define READ_SER_RANGE_22_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_ENDr_BLKACC,8,SER_RANGE_22_ENDr_OFFSET,0,(r._ser_range_22_end), 1)
#define WRITE_SER_RANGE_22_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_ENDr_BLKACC,8,SER_RANGE_22_ENDr_OFFSET,0,&(r._ser_range_22_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_PROT_WORD.
 */
#define READ_SER_RANGE_22_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_PROT_WORDr_BLKACC,8,SER_RANGE_22_PROT_WORDr_OFFSET,i,(r._ser_range_22_prot_word), 1)
#define WRITE_SER_RANGE_22_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_PROT_WORDr_BLKACC,8,SER_RANGE_22_PROT_WORDr_OFFSET,i,&(r._ser_range_22_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_PROT_WORD_0.
 */
#define READ_SER_RANGE_22_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_PROT_WORD_0r_BLKACC,8,SER_RANGE_22_PROT_WORD_0r_OFFSET,0,(r._ser_range_22_prot_word_0), 1)
#define WRITE_SER_RANGE_22_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_PROT_WORD_0r_BLKACC,8,SER_RANGE_22_PROT_WORD_0r_OFFSET,0,&(r._ser_range_22_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_PROT_WORD_1.
 */
#define READ_SER_RANGE_22_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_PROT_WORD_1r_BLKACC,8,SER_RANGE_22_PROT_WORD_1r_OFFSET,0,(r._ser_range_22_prot_word_1), 1)
#define WRITE_SER_RANGE_22_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_PROT_WORD_1r_BLKACC,8,SER_RANGE_22_PROT_WORD_1r_OFFSET,0,&(r._ser_range_22_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_PROT_WORD_2.
 */
#define READ_SER_RANGE_22_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_PROT_WORD_2r_BLKACC,8,SER_RANGE_22_PROT_WORD_2r_OFFSET,0,(r._ser_range_22_prot_word_2), 1)
#define WRITE_SER_RANGE_22_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_PROT_WORD_2r_BLKACC,8,SER_RANGE_22_PROT_WORD_2r_OFFSET,0,&(r._ser_range_22_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_PROT_WORD_3.
 */
#define READ_SER_RANGE_22_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_PROT_WORD_3r_BLKACC,8,SER_RANGE_22_PROT_WORD_3r_OFFSET,0,(r._ser_range_22_prot_word_3), 1)
#define WRITE_SER_RANGE_22_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_PROT_WORD_3r_BLKACC,8,SER_RANGE_22_PROT_WORD_3r_OFFSET,0,&(r._ser_range_22_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_RESULT.
 */
#define READ_SER_RANGE_22_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_RESULTr_BLKACC,8,SER_RANGE_22_RESULTr_OFFSET,0,(r._ser_range_22_result), 1)
#define WRITE_SER_RANGE_22_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_RESULTr_BLKACC,8,SER_RANGE_22_RESULTr_OFFSET,0,&(r._ser_range_22_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_22_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_22_START.
 */
#define READ_SER_RANGE_22_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_22_STARTr_BLKACC,8,SER_RANGE_22_STARTr_OFFSET,0,(r._ser_range_22_start), 1)
#define WRITE_SER_RANGE_22_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_22_STARTr_BLKACC,8,SER_RANGE_22_STARTr_OFFSET,0,&(r._ser_range_22_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_22_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_ADDR_BITS.
 */
#define READ_SER_RANGE_23_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_ADDR_BITSr_BLKACC,8,SER_RANGE_23_ADDR_BITSr_OFFSET,0,(r._ser_range_23_addr_bits), 1)
#define WRITE_SER_RANGE_23_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_ADDR_BITSr_BLKACC,8,SER_RANGE_23_ADDR_BITSr_OFFSET,0,&(r._ser_range_23_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_CONFIG.
 */
#define READ_SER_RANGE_23_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_CONFIGr_BLKACC,8,SER_RANGE_23_CONFIGr_OFFSET,0,(r._ser_range_23_config), 1)
#define WRITE_SER_RANGE_23_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_CONFIGr_BLKACC,8,SER_RANGE_23_CONFIGr_OFFSET,0,&(r._ser_range_23_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_DISABLE.
 */
#define READ_SER_RANGE_23_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_DISABLEr_BLKACC,8,SER_RANGE_23_DISABLEr_OFFSET,0,(r._ser_range_23_disable), 1)
#define WRITE_SER_RANGE_23_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_DISABLEr_BLKACC,8,SER_RANGE_23_DISABLEr_OFFSET,0,&(r._ser_range_23_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_END.
 */
#define READ_SER_RANGE_23_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_ENDr_BLKACC,8,SER_RANGE_23_ENDr_OFFSET,0,(r._ser_range_23_end), 1)
#define WRITE_SER_RANGE_23_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_ENDr_BLKACC,8,SER_RANGE_23_ENDr_OFFSET,0,&(r._ser_range_23_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_PROT_WORD.
 */
#define READ_SER_RANGE_23_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_PROT_WORDr_BLKACC,8,SER_RANGE_23_PROT_WORDr_OFFSET,i,(r._ser_range_23_prot_word), 1)
#define WRITE_SER_RANGE_23_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_PROT_WORDr_BLKACC,8,SER_RANGE_23_PROT_WORDr_OFFSET,i,&(r._ser_range_23_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_PROT_WORD_0.
 */
#define READ_SER_RANGE_23_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_PROT_WORD_0r_BLKACC,8,SER_RANGE_23_PROT_WORD_0r_OFFSET,0,(r._ser_range_23_prot_word_0), 1)
#define WRITE_SER_RANGE_23_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_PROT_WORD_0r_BLKACC,8,SER_RANGE_23_PROT_WORD_0r_OFFSET,0,&(r._ser_range_23_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_PROT_WORD_1.
 */
#define READ_SER_RANGE_23_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_PROT_WORD_1r_BLKACC,8,SER_RANGE_23_PROT_WORD_1r_OFFSET,0,(r._ser_range_23_prot_word_1), 1)
#define WRITE_SER_RANGE_23_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_PROT_WORD_1r_BLKACC,8,SER_RANGE_23_PROT_WORD_1r_OFFSET,0,&(r._ser_range_23_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_PROT_WORD_2.
 */
#define READ_SER_RANGE_23_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_PROT_WORD_2r_BLKACC,8,SER_RANGE_23_PROT_WORD_2r_OFFSET,0,(r._ser_range_23_prot_word_2), 1)
#define WRITE_SER_RANGE_23_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_PROT_WORD_2r_BLKACC,8,SER_RANGE_23_PROT_WORD_2r_OFFSET,0,&(r._ser_range_23_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_PROT_WORD_3.
 */
#define READ_SER_RANGE_23_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_PROT_WORD_3r_BLKACC,8,SER_RANGE_23_PROT_WORD_3r_OFFSET,0,(r._ser_range_23_prot_word_3), 1)
#define WRITE_SER_RANGE_23_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_PROT_WORD_3r_BLKACC,8,SER_RANGE_23_PROT_WORD_3r_OFFSET,0,&(r._ser_range_23_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_RESULT.
 */
#define READ_SER_RANGE_23_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_RESULTr_BLKACC,8,SER_RANGE_23_RESULTr_OFFSET,0,(r._ser_range_23_result), 1)
#define WRITE_SER_RANGE_23_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_RESULTr_BLKACC,8,SER_RANGE_23_RESULTr_OFFSET,0,&(r._ser_range_23_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_23_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_23_START.
 */
#define READ_SER_RANGE_23_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_23_STARTr_BLKACC,8,SER_RANGE_23_STARTr_OFFSET,0,(r._ser_range_23_start), 1)
#define WRITE_SER_RANGE_23_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_23_STARTr_BLKACC,8,SER_RANGE_23_STARTr_OFFSET,0,&(r._ser_range_23_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_23_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_ADDR_BITS.
 */
#define READ_SER_RANGE_24_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_ADDR_BITSr_BLKACC,8,SER_RANGE_24_ADDR_BITSr_OFFSET,0,(r._ser_range_24_addr_bits), 1)
#define WRITE_SER_RANGE_24_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_ADDR_BITSr_BLKACC,8,SER_RANGE_24_ADDR_BITSr_OFFSET,0,&(r._ser_range_24_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_CONFIG.
 */
#define READ_SER_RANGE_24_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_CONFIGr_BLKACC,8,SER_RANGE_24_CONFIGr_OFFSET,0,(r._ser_range_24_config), 1)
#define WRITE_SER_RANGE_24_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_CONFIGr_BLKACC,8,SER_RANGE_24_CONFIGr_OFFSET,0,&(r._ser_range_24_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_DISABLE.
 */
#define READ_SER_RANGE_24_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_DISABLEr_BLKACC,8,SER_RANGE_24_DISABLEr_OFFSET,0,(r._ser_range_24_disable), 1)
#define WRITE_SER_RANGE_24_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_DISABLEr_BLKACC,8,SER_RANGE_24_DISABLEr_OFFSET,0,&(r._ser_range_24_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_END.
 */
#define READ_SER_RANGE_24_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_ENDr_BLKACC,8,SER_RANGE_24_ENDr_OFFSET,0,(r._ser_range_24_end), 1)
#define WRITE_SER_RANGE_24_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_ENDr_BLKACC,8,SER_RANGE_24_ENDr_OFFSET,0,&(r._ser_range_24_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_PROT_WORD.
 */
#define READ_SER_RANGE_24_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_PROT_WORDr_BLKACC,8,SER_RANGE_24_PROT_WORDr_OFFSET,i,(r._ser_range_24_prot_word), 1)
#define WRITE_SER_RANGE_24_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_PROT_WORDr_BLKACC,8,SER_RANGE_24_PROT_WORDr_OFFSET,i,&(r._ser_range_24_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_PROT_WORD_0.
 */
#define READ_SER_RANGE_24_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_PROT_WORD_0r_BLKACC,8,SER_RANGE_24_PROT_WORD_0r_OFFSET,0,(r._ser_range_24_prot_word_0), 1)
#define WRITE_SER_RANGE_24_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_PROT_WORD_0r_BLKACC,8,SER_RANGE_24_PROT_WORD_0r_OFFSET,0,&(r._ser_range_24_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_PROT_WORD_1.
 */
#define READ_SER_RANGE_24_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_PROT_WORD_1r_BLKACC,8,SER_RANGE_24_PROT_WORD_1r_OFFSET,0,(r._ser_range_24_prot_word_1), 1)
#define WRITE_SER_RANGE_24_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_PROT_WORD_1r_BLKACC,8,SER_RANGE_24_PROT_WORD_1r_OFFSET,0,&(r._ser_range_24_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_PROT_WORD_2.
 */
#define READ_SER_RANGE_24_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_PROT_WORD_2r_BLKACC,8,SER_RANGE_24_PROT_WORD_2r_OFFSET,0,(r._ser_range_24_prot_word_2), 1)
#define WRITE_SER_RANGE_24_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_PROT_WORD_2r_BLKACC,8,SER_RANGE_24_PROT_WORD_2r_OFFSET,0,&(r._ser_range_24_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_PROT_WORD_3.
 */
#define READ_SER_RANGE_24_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_PROT_WORD_3r_BLKACC,8,SER_RANGE_24_PROT_WORD_3r_OFFSET,0,(r._ser_range_24_prot_word_3), 1)
#define WRITE_SER_RANGE_24_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_PROT_WORD_3r_BLKACC,8,SER_RANGE_24_PROT_WORD_3r_OFFSET,0,&(r._ser_range_24_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_RESULT.
 */
#define READ_SER_RANGE_24_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_RESULTr_BLKACC,8,SER_RANGE_24_RESULTr_OFFSET,0,(r._ser_range_24_result), 1)
#define WRITE_SER_RANGE_24_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_RESULTr_BLKACC,8,SER_RANGE_24_RESULTr_OFFSET,0,&(r._ser_range_24_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_24_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_24_START.
 */
#define READ_SER_RANGE_24_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_24_STARTr_BLKACC,8,SER_RANGE_24_STARTr_OFFSET,0,(r._ser_range_24_start), 1)
#define WRITE_SER_RANGE_24_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_24_STARTr_BLKACC,8,SER_RANGE_24_STARTr_OFFSET,0,&(r._ser_range_24_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_24_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_ADDR_BITS.
 */
#define READ_SER_RANGE_25_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_ADDR_BITSr_BLKACC,8,SER_RANGE_25_ADDR_BITSr_OFFSET,0,(r._ser_range_25_addr_bits), 1)
#define WRITE_SER_RANGE_25_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_ADDR_BITSr_BLKACC,8,SER_RANGE_25_ADDR_BITSr_OFFSET,0,&(r._ser_range_25_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_CONFIG.
 */
#define READ_SER_RANGE_25_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_CONFIGr_BLKACC,8,SER_RANGE_25_CONFIGr_OFFSET,0,(r._ser_range_25_config), 1)
#define WRITE_SER_RANGE_25_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_CONFIGr_BLKACC,8,SER_RANGE_25_CONFIGr_OFFSET,0,&(r._ser_range_25_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_DISABLE.
 */
#define READ_SER_RANGE_25_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_DISABLEr_BLKACC,8,SER_RANGE_25_DISABLEr_OFFSET,0,(r._ser_range_25_disable), 1)
#define WRITE_SER_RANGE_25_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_DISABLEr_BLKACC,8,SER_RANGE_25_DISABLEr_OFFSET,0,&(r._ser_range_25_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_END.
 */
#define READ_SER_RANGE_25_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_ENDr_BLKACC,8,SER_RANGE_25_ENDr_OFFSET,0,(r._ser_range_25_end), 1)
#define WRITE_SER_RANGE_25_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_ENDr_BLKACC,8,SER_RANGE_25_ENDr_OFFSET,0,&(r._ser_range_25_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_PROT_WORD.
 */
#define READ_SER_RANGE_25_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_PROT_WORDr_BLKACC,8,SER_RANGE_25_PROT_WORDr_OFFSET,i,(r._ser_range_25_prot_word), 1)
#define WRITE_SER_RANGE_25_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_PROT_WORDr_BLKACC,8,SER_RANGE_25_PROT_WORDr_OFFSET,i,&(r._ser_range_25_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_PROT_WORD_0.
 */
#define READ_SER_RANGE_25_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_PROT_WORD_0r_BLKACC,8,SER_RANGE_25_PROT_WORD_0r_OFFSET,0,(r._ser_range_25_prot_word_0), 1)
#define WRITE_SER_RANGE_25_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_PROT_WORD_0r_BLKACC,8,SER_RANGE_25_PROT_WORD_0r_OFFSET,0,&(r._ser_range_25_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_PROT_WORD_1.
 */
#define READ_SER_RANGE_25_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_PROT_WORD_1r_BLKACC,8,SER_RANGE_25_PROT_WORD_1r_OFFSET,0,(r._ser_range_25_prot_word_1), 1)
#define WRITE_SER_RANGE_25_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_PROT_WORD_1r_BLKACC,8,SER_RANGE_25_PROT_WORD_1r_OFFSET,0,&(r._ser_range_25_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_PROT_WORD_2.
 */
#define READ_SER_RANGE_25_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_PROT_WORD_2r_BLKACC,8,SER_RANGE_25_PROT_WORD_2r_OFFSET,0,(r._ser_range_25_prot_word_2), 1)
#define WRITE_SER_RANGE_25_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_PROT_WORD_2r_BLKACC,8,SER_RANGE_25_PROT_WORD_2r_OFFSET,0,&(r._ser_range_25_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_PROT_WORD_3.
 */
#define READ_SER_RANGE_25_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_PROT_WORD_3r_BLKACC,8,SER_RANGE_25_PROT_WORD_3r_OFFSET,0,(r._ser_range_25_prot_word_3), 1)
#define WRITE_SER_RANGE_25_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_PROT_WORD_3r_BLKACC,8,SER_RANGE_25_PROT_WORD_3r_OFFSET,0,&(r._ser_range_25_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_RESULT.
 */
#define READ_SER_RANGE_25_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_RESULTr_BLKACC,8,SER_RANGE_25_RESULTr_OFFSET,0,(r._ser_range_25_result), 1)
#define WRITE_SER_RANGE_25_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_RESULTr_BLKACC,8,SER_RANGE_25_RESULTr_OFFSET,0,&(r._ser_range_25_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_25_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_25_START.
 */
#define READ_SER_RANGE_25_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_25_STARTr_BLKACC,8,SER_RANGE_25_STARTr_OFFSET,0,(r._ser_range_25_start), 1)
#define WRITE_SER_RANGE_25_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_25_STARTr_BLKACC,8,SER_RANGE_25_STARTr_OFFSET,0,&(r._ser_range_25_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_25_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_ADDR_BITS.
 */
#define READ_SER_RANGE_26_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_ADDR_BITSr_BLKACC,8,SER_RANGE_26_ADDR_BITSr_OFFSET,0,(r._ser_range_26_addr_bits), 1)
#define WRITE_SER_RANGE_26_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_ADDR_BITSr_BLKACC,8,SER_RANGE_26_ADDR_BITSr_OFFSET,0,&(r._ser_range_26_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_CONFIG.
 */
#define READ_SER_RANGE_26_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_CONFIGr_BLKACC,8,SER_RANGE_26_CONFIGr_OFFSET,0,(r._ser_range_26_config), 1)
#define WRITE_SER_RANGE_26_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_CONFIGr_BLKACC,8,SER_RANGE_26_CONFIGr_OFFSET,0,&(r._ser_range_26_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_DISABLE.
 */
#define READ_SER_RANGE_26_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_DISABLEr_BLKACC,8,SER_RANGE_26_DISABLEr_OFFSET,0,(r._ser_range_26_disable), 1)
#define WRITE_SER_RANGE_26_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_DISABLEr_BLKACC,8,SER_RANGE_26_DISABLEr_OFFSET,0,&(r._ser_range_26_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_END.
 */
#define READ_SER_RANGE_26_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_ENDr_BLKACC,8,SER_RANGE_26_ENDr_OFFSET,0,(r._ser_range_26_end), 1)
#define WRITE_SER_RANGE_26_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_ENDr_BLKACC,8,SER_RANGE_26_ENDr_OFFSET,0,&(r._ser_range_26_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_PROT_WORD.
 */
#define READ_SER_RANGE_26_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_PROT_WORDr_BLKACC,8,SER_RANGE_26_PROT_WORDr_OFFSET,i,(r._ser_range_26_prot_word), 1)
#define WRITE_SER_RANGE_26_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_PROT_WORDr_BLKACC,8,SER_RANGE_26_PROT_WORDr_OFFSET,i,&(r._ser_range_26_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_PROT_WORD_0.
 */
#define READ_SER_RANGE_26_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_PROT_WORD_0r_BLKACC,8,SER_RANGE_26_PROT_WORD_0r_OFFSET,0,(r._ser_range_26_prot_word_0), 1)
#define WRITE_SER_RANGE_26_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_PROT_WORD_0r_BLKACC,8,SER_RANGE_26_PROT_WORD_0r_OFFSET,0,&(r._ser_range_26_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_PROT_WORD_1.
 */
#define READ_SER_RANGE_26_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_PROT_WORD_1r_BLKACC,8,SER_RANGE_26_PROT_WORD_1r_OFFSET,0,(r._ser_range_26_prot_word_1), 1)
#define WRITE_SER_RANGE_26_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_PROT_WORD_1r_BLKACC,8,SER_RANGE_26_PROT_WORD_1r_OFFSET,0,&(r._ser_range_26_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_PROT_WORD_2.
 */
#define READ_SER_RANGE_26_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_PROT_WORD_2r_BLKACC,8,SER_RANGE_26_PROT_WORD_2r_OFFSET,0,(r._ser_range_26_prot_word_2), 1)
#define WRITE_SER_RANGE_26_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_PROT_WORD_2r_BLKACC,8,SER_RANGE_26_PROT_WORD_2r_OFFSET,0,&(r._ser_range_26_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_PROT_WORD_3.
 */
#define READ_SER_RANGE_26_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_PROT_WORD_3r_BLKACC,8,SER_RANGE_26_PROT_WORD_3r_OFFSET,0,(r._ser_range_26_prot_word_3), 1)
#define WRITE_SER_RANGE_26_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_PROT_WORD_3r_BLKACC,8,SER_RANGE_26_PROT_WORD_3r_OFFSET,0,&(r._ser_range_26_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_RESULT.
 */
#define READ_SER_RANGE_26_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_RESULTr_BLKACC,8,SER_RANGE_26_RESULTr_OFFSET,0,(r._ser_range_26_result), 1)
#define WRITE_SER_RANGE_26_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_RESULTr_BLKACC,8,SER_RANGE_26_RESULTr_OFFSET,0,&(r._ser_range_26_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_26_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_26_START.
 */
#define READ_SER_RANGE_26_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_26_STARTr_BLKACC,8,SER_RANGE_26_STARTr_OFFSET,0,(r._ser_range_26_start), 1)
#define WRITE_SER_RANGE_26_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_26_STARTr_BLKACC,8,SER_RANGE_26_STARTr_OFFSET,0,&(r._ser_range_26_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_26_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_ADDR_BITS.
 */
#define READ_SER_RANGE_27_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_ADDR_BITSr_BLKACC,8,SER_RANGE_27_ADDR_BITSr_OFFSET,0,(r._ser_range_27_addr_bits), 1)
#define WRITE_SER_RANGE_27_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_ADDR_BITSr_BLKACC,8,SER_RANGE_27_ADDR_BITSr_OFFSET,0,&(r._ser_range_27_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_CONFIG.
 */
#define READ_SER_RANGE_27_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_CONFIGr_BLKACC,8,SER_RANGE_27_CONFIGr_OFFSET,0,(r._ser_range_27_config), 1)
#define WRITE_SER_RANGE_27_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_CONFIGr_BLKACC,8,SER_RANGE_27_CONFIGr_OFFSET,0,&(r._ser_range_27_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_DISABLE.
 */
#define READ_SER_RANGE_27_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_DISABLEr_BLKACC,8,SER_RANGE_27_DISABLEr_OFFSET,0,(r._ser_range_27_disable), 1)
#define WRITE_SER_RANGE_27_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_DISABLEr_BLKACC,8,SER_RANGE_27_DISABLEr_OFFSET,0,&(r._ser_range_27_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_END.
 */
#define READ_SER_RANGE_27_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_ENDr_BLKACC,8,SER_RANGE_27_ENDr_OFFSET,0,(r._ser_range_27_end), 1)
#define WRITE_SER_RANGE_27_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_ENDr_BLKACC,8,SER_RANGE_27_ENDr_OFFSET,0,&(r._ser_range_27_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_PROT_WORD.
 */
#define READ_SER_RANGE_27_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_PROT_WORDr_BLKACC,8,SER_RANGE_27_PROT_WORDr_OFFSET,i,(r._ser_range_27_prot_word), 1)
#define WRITE_SER_RANGE_27_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_PROT_WORDr_BLKACC,8,SER_RANGE_27_PROT_WORDr_OFFSET,i,&(r._ser_range_27_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_PROT_WORD_0.
 */
#define READ_SER_RANGE_27_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_PROT_WORD_0r_BLKACC,8,SER_RANGE_27_PROT_WORD_0r_OFFSET,0,(r._ser_range_27_prot_word_0), 1)
#define WRITE_SER_RANGE_27_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_PROT_WORD_0r_BLKACC,8,SER_RANGE_27_PROT_WORD_0r_OFFSET,0,&(r._ser_range_27_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_PROT_WORD_1.
 */
#define READ_SER_RANGE_27_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_PROT_WORD_1r_BLKACC,8,SER_RANGE_27_PROT_WORD_1r_OFFSET,0,(r._ser_range_27_prot_word_1), 1)
#define WRITE_SER_RANGE_27_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_PROT_WORD_1r_BLKACC,8,SER_RANGE_27_PROT_WORD_1r_OFFSET,0,&(r._ser_range_27_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_PROT_WORD_2.
 */
#define READ_SER_RANGE_27_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_PROT_WORD_2r_BLKACC,8,SER_RANGE_27_PROT_WORD_2r_OFFSET,0,(r._ser_range_27_prot_word_2), 1)
#define WRITE_SER_RANGE_27_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_PROT_WORD_2r_BLKACC,8,SER_RANGE_27_PROT_WORD_2r_OFFSET,0,&(r._ser_range_27_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_PROT_WORD_3.
 */
#define READ_SER_RANGE_27_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_PROT_WORD_3r_BLKACC,8,SER_RANGE_27_PROT_WORD_3r_OFFSET,0,(r._ser_range_27_prot_word_3), 1)
#define WRITE_SER_RANGE_27_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_PROT_WORD_3r_BLKACC,8,SER_RANGE_27_PROT_WORD_3r_OFFSET,0,&(r._ser_range_27_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_RESULT.
 */
#define READ_SER_RANGE_27_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_RESULTr_BLKACC,8,SER_RANGE_27_RESULTr_OFFSET,0,(r._ser_range_27_result), 1)
#define WRITE_SER_RANGE_27_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_RESULTr_BLKACC,8,SER_RANGE_27_RESULTr_OFFSET,0,&(r._ser_range_27_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_27_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_27_START.
 */
#define READ_SER_RANGE_27_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_27_STARTr_BLKACC,8,SER_RANGE_27_STARTr_OFFSET,0,(r._ser_range_27_start), 1)
#define WRITE_SER_RANGE_27_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_27_STARTr_BLKACC,8,SER_RANGE_27_STARTr_OFFSET,0,&(r._ser_range_27_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_27_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_ADDR_BITS.
 */
#define READ_SER_RANGE_28_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_ADDR_BITSr_BLKACC,8,SER_RANGE_28_ADDR_BITSr_OFFSET,0,(r._ser_range_28_addr_bits), 1)
#define WRITE_SER_RANGE_28_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_ADDR_BITSr_BLKACC,8,SER_RANGE_28_ADDR_BITSr_OFFSET,0,&(r._ser_range_28_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_CONFIG.
 */
#define READ_SER_RANGE_28_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_CONFIGr_BLKACC,8,SER_RANGE_28_CONFIGr_OFFSET,0,(r._ser_range_28_config), 1)
#define WRITE_SER_RANGE_28_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_CONFIGr_BLKACC,8,SER_RANGE_28_CONFIGr_OFFSET,0,&(r._ser_range_28_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_DISABLE.
 */
#define READ_SER_RANGE_28_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_DISABLEr_BLKACC,8,SER_RANGE_28_DISABLEr_OFFSET,0,(r._ser_range_28_disable), 1)
#define WRITE_SER_RANGE_28_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_DISABLEr_BLKACC,8,SER_RANGE_28_DISABLEr_OFFSET,0,&(r._ser_range_28_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_END.
 */
#define READ_SER_RANGE_28_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_ENDr_BLKACC,8,SER_RANGE_28_ENDr_OFFSET,0,(r._ser_range_28_end), 1)
#define WRITE_SER_RANGE_28_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_ENDr_BLKACC,8,SER_RANGE_28_ENDr_OFFSET,0,&(r._ser_range_28_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_PROT_WORD.
 */
#define READ_SER_RANGE_28_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_PROT_WORDr_BLKACC,8,SER_RANGE_28_PROT_WORDr_OFFSET,i,(r._ser_range_28_prot_word), 1)
#define WRITE_SER_RANGE_28_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_PROT_WORDr_BLKACC,8,SER_RANGE_28_PROT_WORDr_OFFSET,i,&(r._ser_range_28_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_PROT_WORD_0.
 */
#define READ_SER_RANGE_28_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_PROT_WORD_0r_BLKACC,8,SER_RANGE_28_PROT_WORD_0r_OFFSET,0,(r._ser_range_28_prot_word_0), 1)
#define WRITE_SER_RANGE_28_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_PROT_WORD_0r_BLKACC,8,SER_RANGE_28_PROT_WORD_0r_OFFSET,0,&(r._ser_range_28_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_PROT_WORD_1.
 */
#define READ_SER_RANGE_28_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_PROT_WORD_1r_BLKACC,8,SER_RANGE_28_PROT_WORD_1r_OFFSET,0,(r._ser_range_28_prot_word_1), 1)
#define WRITE_SER_RANGE_28_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_PROT_WORD_1r_BLKACC,8,SER_RANGE_28_PROT_WORD_1r_OFFSET,0,&(r._ser_range_28_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_PROT_WORD_2.
 */
#define READ_SER_RANGE_28_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_PROT_WORD_2r_BLKACC,8,SER_RANGE_28_PROT_WORD_2r_OFFSET,0,(r._ser_range_28_prot_word_2), 1)
#define WRITE_SER_RANGE_28_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_PROT_WORD_2r_BLKACC,8,SER_RANGE_28_PROT_WORD_2r_OFFSET,0,&(r._ser_range_28_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_PROT_WORD_3.
 */
#define READ_SER_RANGE_28_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_PROT_WORD_3r_BLKACC,8,SER_RANGE_28_PROT_WORD_3r_OFFSET,0,(r._ser_range_28_prot_word_3), 1)
#define WRITE_SER_RANGE_28_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_PROT_WORD_3r_BLKACC,8,SER_RANGE_28_PROT_WORD_3r_OFFSET,0,&(r._ser_range_28_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_RESULT.
 */
#define READ_SER_RANGE_28_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_RESULTr_BLKACC,8,SER_RANGE_28_RESULTr_OFFSET,0,(r._ser_range_28_result), 1)
#define WRITE_SER_RANGE_28_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_RESULTr_BLKACC,8,SER_RANGE_28_RESULTr_OFFSET,0,&(r._ser_range_28_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_28_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_28_START.
 */
#define READ_SER_RANGE_28_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_28_STARTr_BLKACC,8,SER_RANGE_28_STARTr_OFFSET,0,(r._ser_range_28_start), 1)
#define WRITE_SER_RANGE_28_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_28_STARTr_BLKACC,8,SER_RANGE_28_STARTr_OFFSET,0,&(r._ser_range_28_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_28_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_ADDR_BITS.
 */
#define READ_SER_RANGE_29_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_ADDR_BITSr_BLKACC,8,SER_RANGE_29_ADDR_BITSr_OFFSET,0,(r._ser_range_29_addr_bits), 1)
#define WRITE_SER_RANGE_29_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_ADDR_BITSr_BLKACC,8,SER_RANGE_29_ADDR_BITSr_OFFSET,0,&(r._ser_range_29_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_CONFIG.
 */
#define READ_SER_RANGE_29_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_CONFIGr_BLKACC,8,SER_RANGE_29_CONFIGr_OFFSET,0,(r._ser_range_29_config), 1)
#define WRITE_SER_RANGE_29_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_CONFIGr_BLKACC,8,SER_RANGE_29_CONFIGr_OFFSET,0,&(r._ser_range_29_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_DISABLE.
 */
#define READ_SER_RANGE_29_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_DISABLEr_BLKACC,8,SER_RANGE_29_DISABLEr_OFFSET,0,(r._ser_range_29_disable), 1)
#define WRITE_SER_RANGE_29_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_DISABLEr_BLKACC,8,SER_RANGE_29_DISABLEr_OFFSET,0,&(r._ser_range_29_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_END.
 */
#define READ_SER_RANGE_29_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_ENDr_BLKACC,8,SER_RANGE_29_ENDr_OFFSET,0,(r._ser_range_29_end), 1)
#define WRITE_SER_RANGE_29_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_ENDr_BLKACC,8,SER_RANGE_29_ENDr_OFFSET,0,&(r._ser_range_29_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_PROT_WORD.
 */
#define READ_SER_RANGE_29_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_PROT_WORDr_BLKACC,8,SER_RANGE_29_PROT_WORDr_OFFSET,i,(r._ser_range_29_prot_word), 1)
#define WRITE_SER_RANGE_29_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_PROT_WORDr_BLKACC,8,SER_RANGE_29_PROT_WORDr_OFFSET,i,&(r._ser_range_29_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_PROT_WORD_0.
 */
#define READ_SER_RANGE_29_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_PROT_WORD_0r_BLKACC,8,SER_RANGE_29_PROT_WORD_0r_OFFSET,0,(r._ser_range_29_prot_word_0), 1)
#define WRITE_SER_RANGE_29_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_PROT_WORD_0r_BLKACC,8,SER_RANGE_29_PROT_WORD_0r_OFFSET,0,&(r._ser_range_29_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_PROT_WORD_1.
 */
#define READ_SER_RANGE_29_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_PROT_WORD_1r_BLKACC,8,SER_RANGE_29_PROT_WORD_1r_OFFSET,0,(r._ser_range_29_prot_word_1), 1)
#define WRITE_SER_RANGE_29_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_PROT_WORD_1r_BLKACC,8,SER_RANGE_29_PROT_WORD_1r_OFFSET,0,&(r._ser_range_29_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_PROT_WORD_2.
 */
#define READ_SER_RANGE_29_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_PROT_WORD_2r_BLKACC,8,SER_RANGE_29_PROT_WORD_2r_OFFSET,0,(r._ser_range_29_prot_word_2), 1)
#define WRITE_SER_RANGE_29_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_PROT_WORD_2r_BLKACC,8,SER_RANGE_29_PROT_WORD_2r_OFFSET,0,&(r._ser_range_29_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_PROT_WORD_3.
 */
#define READ_SER_RANGE_29_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_PROT_WORD_3r_BLKACC,8,SER_RANGE_29_PROT_WORD_3r_OFFSET,0,(r._ser_range_29_prot_word_3), 1)
#define WRITE_SER_RANGE_29_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_PROT_WORD_3r_BLKACC,8,SER_RANGE_29_PROT_WORD_3r_OFFSET,0,&(r._ser_range_29_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_RESULT.
 */
#define READ_SER_RANGE_29_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_RESULTr_BLKACC,8,SER_RANGE_29_RESULTr_OFFSET,0,(r._ser_range_29_result), 1)
#define WRITE_SER_RANGE_29_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_RESULTr_BLKACC,8,SER_RANGE_29_RESULTr_OFFSET,0,&(r._ser_range_29_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_29_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_29_START.
 */
#define READ_SER_RANGE_29_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_29_STARTr_BLKACC,8,SER_RANGE_29_STARTr_OFFSET,0,(r._ser_range_29_start), 1)
#define WRITE_SER_RANGE_29_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_29_STARTr_BLKACC,8,SER_RANGE_29_STARTr_OFFSET,0,&(r._ser_range_29_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_29_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_ADDR_BITS.
 */
#define READ_SER_RANGE_2_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_ADDR_BITSr_BLKACC,8,SER_RANGE_2_ADDR_BITSr_OFFSET,0,(r._ser_range_2_addr_bits), 1)
#define WRITE_SER_RANGE_2_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_ADDR_BITSr_BLKACC,8,SER_RANGE_2_ADDR_BITSr_OFFSET,0,&(r._ser_range_2_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_CONFIG.
 */
#define READ_SER_RANGE_2_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_CONFIGr_BLKACC,8,SER_RANGE_2_CONFIGr_OFFSET,0,(r._ser_range_2_config), 1)
#define WRITE_SER_RANGE_2_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_CONFIGr_BLKACC,8,SER_RANGE_2_CONFIGr_OFFSET,0,&(r._ser_range_2_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_DISABLE.
 */
#define READ_SER_RANGE_2_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_DISABLEr_BLKACC,8,SER_RANGE_2_DISABLEr_OFFSET,0,(r._ser_range_2_disable), 1)
#define WRITE_SER_RANGE_2_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_DISABLEr_BLKACC,8,SER_RANGE_2_DISABLEr_OFFSET,0,&(r._ser_range_2_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_END.
 */
#define READ_SER_RANGE_2_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_ENDr_BLKACC,8,SER_RANGE_2_ENDr_OFFSET,0,(r._ser_range_2_end), 1)
#define WRITE_SER_RANGE_2_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_ENDr_BLKACC,8,SER_RANGE_2_ENDr_OFFSET,0,&(r._ser_range_2_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_PROT_WORD.
 */
#define READ_SER_RANGE_2_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_PROT_WORDr_BLKACC,8,SER_RANGE_2_PROT_WORDr_OFFSET,i,(r._ser_range_2_prot_word), 1)
#define WRITE_SER_RANGE_2_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_PROT_WORDr_BLKACC,8,SER_RANGE_2_PROT_WORDr_OFFSET,i,&(r._ser_range_2_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_PROT_WORD_0.
 */
#define READ_SER_RANGE_2_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_PROT_WORD_0r_BLKACC,8,SER_RANGE_2_PROT_WORD_0r_OFFSET,0,(r._ser_range_2_prot_word_0), 1)
#define WRITE_SER_RANGE_2_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_PROT_WORD_0r_BLKACC,8,SER_RANGE_2_PROT_WORD_0r_OFFSET,0,&(r._ser_range_2_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_PROT_WORD_1.
 */
#define READ_SER_RANGE_2_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_PROT_WORD_1r_BLKACC,8,SER_RANGE_2_PROT_WORD_1r_OFFSET,0,(r._ser_range_2_prot_word_1), 1)
#define WRITE_SER_RANGE_2_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_PROT_WORD_1r_BLKACC,8,SER_RANGE_2_PROT_WORD_1r_OFFSET,0,&(r._ser_range_2_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_PROT_WORD_2.
 */
#define READ_SER_RANGE_2_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_PROT_WORD_2r_BLKACC,8,SER_RANGE_2_PROT_WORD_2r_OFFSET,0,(r._ser_range_2_prot_word_2), 1)
#define WRITE_SER_RANGE_2_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_PROT_WORD_2r_BLKACC,8,SER_RANGE_2_PROT_WORD_2r_OFFSET,0,&(r._ser_range_2_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_PROT_WORD_3.
 */
#define READ_SER_RANGE_2_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_PROT_WORD_3r_BLKACC,8,SER_RANGE_2_PROT_WORD_3r_OFFSET,0,(r._ser_range_2_prot_word_3), 1)
#define WRITE_SER_RANGE_2_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_PROT_WORD_3r_BLKACC,8,SER_RANGE_2_PROT_WORD_3r_OFFSET,0,&(r._ser_range_2_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_RESULT.
 */
#define READ_SER_RANGE_2_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_RESULTr_BLKACC,8,SER_RANGE_2_RESULTr_OFFSET,0,(r._ser_range_2_result), 1)
#define WRITE_SER_RANGE_2_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_RESULTr_BLKACC,8,SER_RANGE_2_RESULTr_OFFSET,0,&(r._ser_range_2_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_2_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_2_START.
 */
#define READ_SER_RANGE_2_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_2_STARTr_BLKACC,8,SER_RANGE_2_STARTr_OFFSET,0,(r._ser_range_2_start), 1)
#define WRITE_SER_RANGE_2_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_2_STARTr_BLKACC,8,SER_RANGE_2_STARTr_OFFSET,0,&(r._ser_range_2_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_2_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_ADDR_BITS.
 */
#define READ_SER_RANGE_30_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_ADDR_BITSr_BLKACC,8,SER_RANGE_30_ADDR_BITSr_OFFSET,0,(r._ser_range_30_addr_bits), 1)
#define WRITE_SER_RANGE_30_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_ADDR_BITSr_BLKACC,8,SER_RANGE_30_ADDR_BITSr_OFFSET,0,&(r._ser_range_30_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_CONFIG.
 */
#define READ_SER_RANGE_30_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_CONFIGr_BLKACC,8,SER_RANGE_30_CONFIGr_OFFSET,0,(r._ser_range_30_config), 1)
#define WRITE_SER_RANGE_30_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_CONFIGr_BLKACC,8,SER_RANGE_30_CONFIGr_OFFSET,0,&(r._ser_range_30_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_DISABLE.
 */
#define READ_SER_RANGE_30_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_DISABLEr_BLKACC,8,SER_RANGE_30_DISABLEr_OFFSET,0,(r._ser_range_30_disable), 1)
#define WRITE_SER_RANGE_30_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_DISABLEr_BLKACC,8,SER_RANGE_30_DISABLEr_OFFSET,0,&(r._ser_range_30_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_END.
 */
#define READ_SER_RANGE_30_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_ENDr_BLKACC,8,SER_RANGE_30_ENDr_OFFSET,0,(r._ser_range_30_end), 1)
#define WRITE_SER_RANGE_30_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_ENDr_BLKACC,8,SER_RANGE_30_ENDr_OFFSET,0,&(r._ser_range_30_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_PROT_WORD.
 */
#define READ_SER_RANGE_30_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_PROT_WORDr_BLKACC,8,SER_RANGE_30_PROT_WORDr_OFFSET,i,(r._ser_range_30_prot_word), 1)
#define WRITE_SER_RANGE_30_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_PROT_WORDr_BLKACC,8,SER_RANGE_30_PROT_WORDr_OFFSET,i,&(r._ser_range_30_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_PROT_WORD_0.
 */
#define READ_SER_RANGE_30_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_PROT_WORD_0r_BLKACC,8,SER_RANGE_30_PROT_WORD_0r_OFFSET,0,(r._ser_range_30_prot_word_0), 1)
#define WRITE_SER_RANGE_30_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_PROT_WORD_0r_BLKACC,8,SER_RANGE_30_PROT_WORD_0r_OFFSET,0,&(r._ser_range_30_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_PROT_WORD_1.
 */
#define READ_SER_RANGE_30_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_PROT_WORD_1r_BLKACC,8,SER_RANGE_30_PROT_WORD_1r_OFFSET,0,(r._ser_range_30_prot_word_1), 1)
#define WRITE_SER_RANGE_30_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_PROT_WORD_1r_BLKACC,8,SER_RANGE_30_PROT_WORD_1r_OFFSET,0,&(r._ser_range_30_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_PROT_WORD_2.
 */
#define READ_SER_RANGE_30_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_PROT_WORD_2r_BLKACC,8,SER_RANGE_30_PROT_WORD_2r_OFFSET,0,(r._ser_range_30_prot_word_2), 1)
#define WRITE_SER_RANGE_30_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_PROT_WORD_2r_BLKACC,8,SER_RANGE_30_PROT_WORD_2r_OFFSET,0,&(r._ser_range_30_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_PROT_WORD_3.
 */
#define READ_SER_RANGE_30_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_PROT_WORD_3r_BLKACC,8,SER_RANGE_30_PROT_WORD_3r_OFFSET,0,(r._ser_range_30_prot_word_3), 1)
#define WRITE_SER_RANGE_30_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_PROT_WORD_3r_BLKACC,8,SER_RANGE_30_PROT_WORD_3r_OFFSET,0,&(r._ser_range_30_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_RESULT.
 */
#define READ_SER_RANGE_30_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_RESULTr_BLKACC,8,SER_RANGE_30_RESULTr_OFFSET,0,(r._ser_range_30_result), 1)
#define WRITE_SER_RANGE_30_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_RESULTr_BLKACC,8,SER_RANGE_30_RESULTr_OFFSET,0,&(r._ser_range_30_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_30_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_30_START.
 */
#define READ_SER_RANGE_30_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_30_STARTr_BLKACC,8,SER_RANGE_30_STARTr_OFFSET,0,(r._ser_range_30_start), 1)
#define WRITE_SER_RANGE_30_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_30_STARTr_BLKACC,8,SER_RANGE_30_STARTr_OFFSET,0,&(r._ser_range_30_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_30_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_ADDR_BITS.
 */
#define READ_SER_RANGE_31_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_ADDR_BITSr_BLKACC,8,SER_RANGE_31_ADDR_BITSr_OFFSET,0,(r._ser_range_31_addr_bits), 1)
#define WRITE_SER_RANGE_31_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_ADDR_BITSr_BLKACC,8,SER_RANGE_31_ADDR_BITSr_OFFSET,0,&(r._ser_range_31_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_CONFIG.
 */
#define READ_SER_RANGE_31_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_CONFIGr_BLKACC,8,SER_RANGE_31_CONFIGr_OFFSET,0,(r._ser_range_31_config), 1)
#define WRITE_SER_RANGE_31_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_CONFIGr_BLKACC,8,SER_RANGE_31_CONFIGr_OFFSET,0,&(r._ser_range_31_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_DISABLE.
 */
#define READ_SER_RANGE_31_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_DISABLEr_BLKACC,8,SER_RANGE_31_DISABLEr_OFFSET,0,(r._ser_range_31_disable), 1)
#define WRITE_SER_RANGE_31_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_DISABLEr_BLKACC,8,SER_RANGE_31_DISABLEr_OFFSET,0,&(r._ser_range_31_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_END.
 */
#define READ_SER_RANGE_31_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_ENDr_BLKACC,8,SER_RANGE_31_ENDr_OFFSET,0,(r._ser_range_31_end), 1)
#define WRITE_SER_RANGE_31_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_ENDr_BLKACC,8,SER_RANGE_31_ENDr_OFFSET,0,&(r._ser_range_31_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_PROT_WORD.
 */
#define READ_SER_RANGE_31_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_PROT_WORDr_BLKACC,8,SER_RANGE_31_PROT_WORDr_OFFSET,i,(r._ser_range_31_prot_word), 1)
#define WRITE_SER_RANGE_31_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_PROT_WORDr_BLKACC,8,SER_RANGE_31_PROT_WORDr_OFFSET,i,&(r._ser_range_31_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_PROT_WORD_0.
 */
#define READ_SER_RANGE_31_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_PROT_WORD_0r_BLKACC,8,SER_RANGE_31_PROT_WORD_0r_OFFSET,0,(r._ser_range_31_prot_word_0), 1)
#define WRITE_SER_RANGE_31_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_PROT_WORD_0r_BLKACC,8,SER_RANGE_31_PROT_WORD_0r_OFFSET,0,&(r._ser_range_31_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_PROT_WORD_1.
 */
#define READ_SER_RANGE_31_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_PROT_WORD_1r_BLKACC,8,SER_RANGE_31_PROT_WORD_1r_OFFSET,0,(r._ser_range_31_prot_word_1), 1)
#define WRITE_SER_RANGE_31_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_PROT_WORD_1r_BLKACC,8,SER_RANGE_31_PROT_WORD_1r_OFFSET,0,&(r._ser_range_31_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_PROT_WORD_2.
 */
#define READ_SER_RANGE_31_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_PROT_WORD_2r_BLKACC,8,SER_RANGE_31_PROT_WORD_2r_OFFSET,0,(r._ser_range_31_prot_word_2), 1)
#define WRITE_SER_RANGE_31_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_PROT_WORD_2r_BLKACC,8,SER_RANGE_31_PROT_WORD_2r_OFFSET,0,&(r._ser_range_31_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_PROT_WORD_3.
 */
#define READ_SER_RANGE_31_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_PROT_WORD_3r_BLKACC,8,SER_RANGE_31_PROT_WORD_3r_OFFSET,0,(r._ser_range_31_prot_word_3), 1)
#define WRITE_SER_RANGE_31_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_PROT_WORD_3r_BLKACC,8,SER_RANGE_31_PROT_WORD_3r_OFFSET,0,&(r._ser_range_31_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_RESULT.
 */
#define READ_SER_RANGE_31_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_RESULTr_BLKACC,8,SER_RANGE_31_RESULTr_OFFSET,0,(r._ser_range_31_result), 1)
#define WRITE_SER_RANGE_31_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_RESULTr_BLKACC,8,SER_RANGE_31_RESULTr_OFFSET,0,&(r._ser_range_31_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_31_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_31_START.
 */
#define READ_SER_RANGE_31_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_31_STARTr_BLKACC,8,SER_RANGE_31_STARTr_OFFSET,0,(r._ser_range_31_start), 1)
#define WRITE_SER_RANGE_31_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_31_STARTr_BLKACC,8,SER_RANGE_31_STARTr_OFFSET,0,&(r._ser_range_31_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_31_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_ADDR_BITS.
 */
#define READ_SER_RANGE_3_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_ADDR_BITSr_BLKACC,8,SER_RANGE_3_ADDR_BITSr_OFFSET,0,(r._ser_range_3_addr_bits), 1)
#define WRITE_SER_RANGE_3_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_ADDR_BITSr_BLKACC,8,SER_RANGE_3_ADDR_BITSr_OFFSET,0,&(r._ser_range_3_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_CONFIG.
 */
#define READ_SER_RANGE_3_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_CONFIGr_BLKACC,8,SER_RANGE_3_CONFIGr_OFFSET,0,(r._ser_range_3_config), 1)
#define WRITE_SER_RANGE_3_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_CONFIGr_BLKACC,8,SER_RANGE_3_CONFIGr_OFFSET,0,&(r._ser_range_3_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_DISABLE.
 */
#define READ_SER_RANGE_3_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_DISABLEr_BLKACC,8,SER_RANGE_3_DISABLEr_OFFSET,0,(r._ser_range_3_disable), 1)
#define WRITE_SER_RANGE_3_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_DISABLEr_BLKACC,8,SER_RANGE_3_DISABLEr_OFFSET,0,&(r._ser_range_3_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_END.
 */
#define READ_SER_RANGE_3_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_ENDr_BLKACC,8,SER_RANGE_3_ENDr_OFFSET,0,(r._ser_range_3_end), 1)
#define WRITE_SER_RANGE_3_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_ENDr_BLKACC,8,SER_RANGE_3_ENDr_OFFSET,0,&(r._ser_range_3_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_PROT_WORD.
 */
#define READ_SER_RANGE_3_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_PROT_WORDr_BLKACC,8,SER_RANGE_3_PROT_WORDr_OFFSET,i,(r._ser_range_3_prot_word), 1)
#define WRITE_SER_RANGE_3_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_PROT_WORDr_BLKACC,8,SER_RANGE_3_PROT_WORDr_OFFSET,i,&(r._ser_range_3_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_PROT_WORD_0.
 */
#define READ_SER_RANGE_3_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_PROT_WORD_0r_BLKACC,8,SER_RANGE_3_PROT_WORD_0r_OFFSET,0,(r._ser_range_3_prot_word_0), 1)
#define WRITE_SER_RANGE_3_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_PROT_WORD_0r_BLKACC,8,SER_RANGE_3_PROT_WORD_0r_OFFSET,0,&(r._ser_range_3_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_PROT_WORD_1.
 */
#define READ_SER_RANGE_3_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_PROT_WORD_1r_BLKACC,8,SER_RANGE_3_PROT_WORD_1r_OFFSET,0,(r._ser_range_3_prot_word_1), 1)
#define WRITE_SER_RANGE_3_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_PROT_WORD_1r_BLKACC,8,SER_RANGE_3_PROT_WORD_1r_OFFSET,0,&(r._ser_range_3_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_PROT_WORD_2.
 */
#define READ_SER_RANGE_3_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_PROT_WORD_2r_BLKACC,8,SER_RANGE_3_PROT_WORD_2r_OFFSET,0,(r._ser_range_3_prot_word_2), 1)
#define WRITE_SER_RANGE_3_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_PROT_WORD_2r_BLKACC,8,SER_RANGE_3_PROT_WORD_2r_OFFSET,0,&(r._ser_range_3_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_PROT_WORD_3.
 */
#define READ_SER_RANGE_3_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_PROT_WORD_3r_BLKACC,8,SER_RANGE_3_PROT_WORD_3r_OFFSET,0,(r._ser_range_3_prot_word_3), 1)
#define WRITE_SER_RANGE_3_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_PROT_WORD_3r_BLKACC,8,SER_RANGE_3_PROT_WORD_3r_OFFSET,0,&(r._ser_range_3_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_RESULT.
 */
#define READ_SER_RANGE_3_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_RESULTr_BLKACC,8,SER_RANGE_3_RESULTr_OFFSET,0,(r._ser_range_3_result), 1)
#define WRITE_SER_RANGE_3_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_RESULTr_BLKACC,8,SER_RANGE_3_RESULTr_OFFSET,0,&(r._ser_range_3_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_3_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_3_START.
 */
#define READ_SER_RANGE_3_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_3_STARTr_BLKACC,8,SER_RANGE_3_STARTr_OFFSET,0,(r._ser_range_3_start), 1)
#define WRITE_SER_RANGE_3_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_3_STARTr_BLKACC,8,SER_RANGE_3_STARTr_OFFSET,0,&(r._ser_range_3_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_3_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_ADDR_BITS.
 */
#define READ_SER_RANGE_4_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_ADDR_BITSr_BLKACC,8,SER_RANGE_4_ADDR_BITSr_OFFSET,0,(r._ser_range_4_addr_bits), 1)
#define WRITE_SER_RANGE_4_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_ADDR_BITSr_BLKACC,8,SER_RANGE_4_ADDR_BITSr_OFFSET,0,&(r._ser_range_4_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_CONFIG.
 */
#define READ_SER_RANGE_4_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_CONFIGr_BLKACC,8,SER_RANGE_4_CONFIGr_OFFSET,0,(r._ser_range_4_config), 1)
#define WRITE_SER_RANGE_4_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_CONFIGr_BLKACC,8,SER_RANGE_4_CONFIGr_OFFSET,0,&(r._ser_range_4_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_DISABLE.
 */
#define READ_SER_RANGE_4_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_DISABLEr_BLKACC,8,SER_RANGE_4_DISABLEr_OFFSET,0,(r._ser_range_4_disable), 1)
#define WRITE_SER_RANGE_4_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_DISABLEr_BLKACC,8,SER_RANGE_4_DISABLEr_OFFSET,0,&(r._ser_range_4_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_END.
 */
#define READ_SER_RANGE_4_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_ENDr_BLKACC,8,SER_RANGE_4_ENDr_OFFSET,0,(r._ser_range_4_end), 1)
#define WRITE_SER_RANGE_4_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_ENDr_BLKACC,8,SER_RANGE_4_ENDr_OFFSET,0,&(r._ser_range_4_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_PROT_WORD.
 */
#define READ_SER_RANGE_4_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_PROT_WORDr_BLKACC,8,SER_RANGE_4_PROT_WORDr_OFFSET,i,(r._ser_range_4_prot_word), 1)
#define WRITE_SER_RANGE_4_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_PROT_WORDr_BLKACC,8,SER_RANGE_4_PROT_WORDr_OFFSET,i,&(r._ser_range_4_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_PROT_WORD_0.
 */
#define READ_SER_RANGE_4_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_PROT_WORD_0r_BLKACC,8,SER_RANGE_4_PROT_WORD_0r_OFFSET,0,(r._ser_range_4_prot_word_0), 1)
#define WRITE_SER_RANGE_4_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_PROT_WORD_0r_BLKACC,8,SER_RANGE_4_PROT_WORD_0r_OFFSET,0,&(r._ser_range_4_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_PROT_WORD_1.
 */
#define READ_SER_RANGE_4_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_PROT_WORD_1r_BLKACC,8,SER_RANGE_4_PROT_WORD_1r_OFFSET,0,(r._ser_range_4_prot_word_1), 1)
#define WRITE_SER_RANGE_4_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_PROT_WORD_1r_BLKACC,8,SER_RANGE_4_PROT_WORD_1r_OFFSET,0,&(r._ser_range_4_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_PROT_WORD_2.
 */
#define READ_SER_RANGE_4_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_PROT_WORD_2r_BLKACC,8,SER_RANGE_4_PROT_WORD_2r_OFFSET,0,(r._ser_range_4_prot_word_2), 1)
#define WRITE_SER_RANGE_4_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_PROT_WORD_2r_BLKACC,8,SER_RANGE_4_PROT_WORD_2r_OFFSET,0,&(r._ser_range_4_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_PROT_WORD_3.
 */
#define READ_SER_RANGE_4_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_PROT_WORD_3r_BLKACC,8,SER_RANGE_4_PROT_WORD_3r_OFFSET,0,(r._ser_range_4_prot_word_3), 1)
#define WRITE_SER_RANGE_4_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_PROT_WORD_3r_BLKACC,8,SER_RANGE_4_PROT_WORD_3r_OFFSET,0,&(r._ser_range_4_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_RESULT.
 */
#define READ_SER_RANGE_4_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_RESULTr_BLKACC,8,SER_RANGE_4_RESULTr_OFFSET,0,(r._ser_range_4_result), 1)
#define WRITE_SER_RANGE_4_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_RESULTr_BLKACC,8,SER_RANGE_4_RESULTr_OFFSET,0,&(r._ser_range_4_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_4_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_4_START.
 */
#define READ_SER_RANGE_4_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_4_STARTr_BLKACC,8,SER_RANGE_4_STARTr_OFFSET,0,(r._ser_range_4_start), 1)
#define WRITE_SER_RANGE_4_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_4_STARTr_BLKACC,8,SER_RANGE_4_STARTr_OFFSET,0,&(r._ser_range_4_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_4_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_ADDR_BITS.
 */
#define READ_SER_RANGE_5_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_ADDR_BITSr_BLKACC,8,SER_RANGE_5_ADDR_BITSr_OFFSET,0,(r._ser_range_5_addr_bits), 1)
#define WRITE_SER_RANGE_5_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_ADDR_BITSr_BLKACC,8,SER_RANGE_5_ADDR_BITSr_OFFSET,0,&(r._ser_range_5_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_CONFIG.
 */
#define READ_SER_RANGE_5_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_CONFIGr_BLKACC,8,SER_RANGE_5_CONFIGr_OFFSET,0,(r._ser_range_5_config), 1)
#define WRITE_SER_RANGE_5_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_CONFIGr_BLKACC,8,SER_RANGE_5_CONFIGr_OFFSET,0,&(r._ser_range_5_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_DISABLE.
 */
#define READ_SER_RANGE_5_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_DISABLEr_BLKACC,8,SER_RANGE_5_DISABLEr_OFFSET,0,(r._ser_range_5_disable), 1)
#define WRITE_SER_RANGE_5_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_DISABLEr_BLKACC,8,SER_RANGE_5_DISABLEr_OFFSET,0,&(r._ser_range_5_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_END.
 */
#define READ_SER_RANGE_5_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_ENDr_BLKACC,8,SER_RANGE_5_ENDr_OFFSET,0,(r._ser_range_5_end), 1)
#define WRITE_SER_RANGE_5_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_ENDr_BLKACC,8,SER_RANGE_5_ENDr_OFFSET,0,&(r._ser_range_5_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_PROT_WORD.
 */
#define READ_SER_RANGE_5_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_PROT_WORDr_BLKACC,8,SER_RANGE_5_PROT_WORDr_OFFSET,i,(r._ser_range_5_prot_word), 1)
#define WRITE_SER_RANGE_5_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_PROT_WORDr_BLKACC,8,SER_RANGE_5_PROT_WORDr_OFFSET,i,&(r._ser_range_5_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_PROT_WORD_0.
 */
#define READ_SER_RANGE_5_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_PROT_WORD_0r_BLKACC,8,SER_RANGE_5_PROT_WORD_0r_OFFSET,0,(r._ser_range_5_prot_word_0), 1)
#define WRITE_SER_RANGE_5_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_PROT_WORD_0r_BLKACC,8,SER_RANGE_5_PROT_WORD_0r_OFFSET,0,&(r._ser_range_5_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_PROT_WORD_1.
 */
#define READ_SER_RANGE_5_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_PROT_WORD_1r_BLKACC,8,SER_RANGE_5_PROT_WORD_1r_OFFSET,0,(r._ser_range_5_prot_word_1), 1)
#define WRITE_SER_RANGE_5_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_PROT_WORD_1r_BLKACC,8,SER_RANGE_5_PROT_WORD_1r_OFFSET,0,&(r._ser_range_5_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_PROT_WORD_2.
 */
#define READ_SER_RANGE_5_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_PROT_WORD_2r_BLKACC,8,SER_RANGE_5_PROT_WORD_2r_OFFSET,0,(r._ser_range_5_prot_word_2), 1)
#define WRITE_SER_RANGE_5_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_PROT_WORD_2r_BLKACC,8,SER_RANGE_5_PROT_WORD_2r_OFFSET,0,&(r._ser_range_5_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_PROT_WORD_3.
 */
#define READ_SER_RANGE_5_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_PROT_WORD_3r_BLKACC,8,SER_RANGE_5_PROT_WORD_3r_OFFSET,0,(r._ser_range_5_prot_word_3), 1)
#define WRITE_SER_RANGE_5_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_PROT_WORD_3r_BLKACC,8,SER_RANGE_5_PROT_WORD_3r_OFFSET,0,&(r._ser_range_5_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_RESULT.
 */
#define READ_SER_RANGE_5_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_RESULTr_BLKACC,8,SER_RANGE_5_RESULTr_OFFSET,0,(r._ser_range_5_result), 1)
#define WRITE_SER_RANGE_5_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_RESULTr_BLKACC,8,SER_RANGE_5_RESULTr_OFFSET,0,&(r._ser_range_5_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_5_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_5_START.
 */
#define READ_SER_RANGE_5_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_5_STARTr_BLKACC,8,SER_RANGE_5_STARTr_OFFSET,0,(r._ser_range_5_start), 1)
#define WRITE_SER_RANGE_5_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_5_STARTr_BLKACC,8,SER_RANGE_5_STARTr_OFFSET,0,&(r._ser_range_5_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_5_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_ADDR_BITS.
 */
#define READ_SER_RANGE_6_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_ADDR_BITSr_BLKACC,8,SER_RANGE_6_ADDR_BITSr_OFFSET,0,(r._ser_range_6_addr_bits), 1)
#define WRITE_SER_RANGE_6_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_ADDR_BITSr_BLKACC,8,SER_RANGE_6_ADDR_BITSr_OFFSET,0,&(r._ser_range_6_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_CONFIG.
 */
#define READ_SER_RANGE_6_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_CONFIGr_BLKACC,8,SER_RANGE_6_CONFIGr_OFFSET,0,(r._ser_range_6_config), 1)
#define WRITE_SER_RANGE_6_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_CONFIGr_BLKACC,8,SER_RANGE_6_CONFIGr_OFFSET,0,&(r._ser_range_6_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_DISABLE.
 */
#define READ_SER_RANGE_6_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_DISABLEr_BLKACC,8,SER_RANGE_6_DISABLEr_OFFSET,0,(r._ser_range_6_disable), 1)
#define WRITE_SER_RANGE_6_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_DISABLEr_BLKACC,8,SER_RANGE_6_DISABLEr_OFFSET,0,&(r._ser_range_6_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_END.
 */
#define READ_SER_RANGE_6_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_ENDr_BLKACC,8,SER_RANGE_6_ENDr_OFFSET,0,(r._ser_range_6_end), 1)
#define WRITE_SER_RANGE_6_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_ENDr_BLKACC,8,SER_RANGE_6_ENDr_OFFSET,0,&(r._ser_range_6_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_PROT_WORD.
 */
#define READ_SER_RANGE_6_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_PROT_WORDr_BLKACC,8,SER_RANGE_6_PROT_WORDr_OFFSET,i,(r._ser_range_6_prot_word), 1)
#define WRITE_SER_RANGE_6_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_PROT_WORDr_BLKACC,8,SER_RANGE_6_PROT_WORDr_OFFSET,i,&(r._ser_range_6_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_PROT_WORD_0.
 */
#define READ_SER_RANGE_6_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_PROT_WORD_0r_BLKACC,8,SER_RANGE_6_PROT_WORD_0r_OFFSET,0,(r._ser_range_6_prot_word_0), 1)
#define WRITE_SER_RANGE_6_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_PROT_WORD_0r_BLKACC,8,SER_RANGE_6_PROT_WORD_0r_OFFSET,0,&(r._ser_range_6_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_PROT_WORD_1.
 */
#define READ_SER_RANGE_6_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_PROT_WORD_1r_BLKACC,8,SER_RANGE_6_PROT_WORD_1r_OFFSET,0,(r._ser_range_6_prot_word_1), 1)
#define WRITE_SER_RANGE_6_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_PROT_WORD_1r_BLKACC,8,SER_RANGE_6_PROT_WORD_1r_OFFSET,0,&(r._ser_range_6_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_PROT_WORD_2.
 */
#define READ_SER_RANGE_6_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_PROT_WORD_2r_BLKACC,8,SER_RANGE_6_PROT_WORD_2r_OFFSET,0,(r._ser_range_6_prot_word_2), 1)
#define WRITE_SER_RANGE_6_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_PROT_WORD_2r_BLKACC,8,SER_RANGE_6_PROT_WORD_2r_OFFSET,0,&(r._ser_range_6_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_PROT_WORD_3.
 */
#define READ_SER_RANGE_6_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_PROT_WORD_3r_BLKACC,8,SER_RANGE_6_PROT_WORD_3r_OFFSET,0,(r._ser_range_6_prot_word_3), 1)
#define WRITE_SER_RANGE_6_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_PROT_WORD_3r_BLKACC,8,SER_RANGE_6_PROT_WORD_3r_OFFSET,0,&(r._ser_range_6_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_RESULT.
 */
#define READ_SER_RANGE_6_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_RESULTr_BLKACC,8,SER_RANGE_6_RESULTr_OFFSET,0,(r._ser_range_6_result), 1)
#define WRITE_SER_RANGE_6_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_RESULTr_BLKACC,8,SER_RANGE_6_RESULTr_OFFSET,0,&(r._ser_range_6_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_6_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_6_START.
 */
#define READ_SER_RANGE_6_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_6_STARTr_BLKACC,8,SER_RANGE_6_STARTr_OFFSET,0,(r._ser_range_6_start), 1)
#define WRITE_SER_RANGE_6_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_6_STARTr_BLKACC,8,SER_RANGE_6_STARTr_OFFSET,0,&(r._ser_range_6_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_6_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_ADDR_BITS.
 */
#define READ_SER_RANGE_7_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_ADDR_BITSr_BLKACC,8,SER_RANGE_7_ADDR_BITSr_OFFSET,0,(r._ser_range_7_addr_bits), 1)
#define WRITE_SER_RANGE_7_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_ADDR_BITSr_BLKACC,8,SER_RANGE_7_ADDR_BITSr_OFFSET,0,&(r._ser_range_7_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_CONFIG.
 */
#define READ_SER_RANGE_7_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_CONFIGr_BLKACC,8,SER_RANGE_7_CONFIGr_OFFSET,0,(r._ser_range_7_config), 1)
#define WRITE_SER_RANGE_7_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_CONFIGr_BLKACC,8,SER_RANGE_7_CONFIGr_OFFSET,0,&(r._ser_range_7_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_DISABLE.
 */
#define READ_SER_RANGE_7_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_DISABLEr_BLKACC,8,SER_RANGE_7_DISABLEr_OFFSET,0,(r._ser_range_7_disable), 1)
#define WRITE_SER_RANGE_7_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_DISABLEr_BLKACC,8,SER_RANGE_7_DISABLEr_OFFSET,0,&(r._ser_range_7_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_END.
 */
#define READ_SER_RANGE_7_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_ENDr_BLKACC,8,SER_RANGE_7_ENDr_OFFSET,0,(r._ser_range_7_end), 1)
#define WRITE_SER_RANGE_7_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_ENDr_BLKACC,8,SER_RANGE_7_ENDr_OFFSET,0,&(r._ser_range_7_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_PROT_WORD.
 */
#define READ_SER_RANGE_7_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_PROT_WORDr_BLKACC,8,SER_RANGE_7_PROT_WORDr_OFFSET,i,(r._ser_range_7_prot_word), 1)
#define WRITE_SER_RANGE_7_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_PROT_WORDr_BLKACC,8,SER_RANGE_7_PROT_WORDr_OFFSET,i,&(r._ser_range_7_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_PROT_WORD_0.
 */
#define READ_SER_RANGE_7_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_PROT_WORD_0r_BLKACC,8,SER_RANGE_7_PROT_WORD_0r_OFFSET,0,(r._ser_range_7_prot_word_0), 1)
#define WRITE_SER_RANGE_7_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_PROT_WORD_0r_BLKACC,8,SER_RANGE_7_PROT_WORD_0r_OFFSET,0,&(r._ser_range_7_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_PROT_WORD_1.
 */
#define READ_SER_RANGE_7_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_PROT_WORD_1r_BLKACC,8,SER_RANGE_7_PROT_WORD_1r_OFFSET,0,(r._ser_range_7_prot_word_1), 1)
#define WRITE_SER_RANGE_7_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_PROT_WORD_1r_BLKACC,8,SER_RANGE_7_PROT_WORD_1r_OFFSET,0,&(r._ser_range_7_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_PROT_WORD_2.
 */
#define READ_SER_RANGE_7_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_PROT_WORD_2r_BLKACC,8,SER_RANGE_7_PROT_WORD_2r_OFFSET,0,(r._ser_range_7_prot_word_2), 1)
#define WRITE_SER_RANGE_7_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_PROT_WORD_2r_BLKACC,8,SER_RANGE_7_PROT_WORD_2r_OFFSET,0,&(r._ser_range_7_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_PROT_WORD_3.
 */
#define READ_SER_RANGE_7_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_PROT_WORD_3r_BLKACC,8,SER_RANGE_7_PROT_WORD_3r_OFFSET,0,(r._ser_range_7_prot_word_3), 1)
#define WRITE_SER_RANGE_7_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_PROT_WORD_3r_BLKACC,8,SER_RANGE_7_PROT_WORD_3r_OFFSET,0,&(r._ser_range_7_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_RESULT.
 */
#define READ_SER_RANGE_7_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_RESULTr_BLKACC,8,SER_RANGE_7_RESULTr_OFFSET,0,(r._ser_range_7_result), 1)
#define WRITE_SER_RANGE_7_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_RESULTr_BLKACC,8,SER_RANGE_7_RESULTr_OFFSET,0,&(r._ser_range_7_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_7_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_7_START.
 */
#define READ_SER_RANGE_7_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_7_STARTr_BLKACC,8,SER_RANGE_7_STARTr_OFFSET,0,(r._ser_range_7_start), 1)
#define WRITE_SER_RANGE_7_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_7_STARTr_BLKACC,8,SER_RANGE_7_STARTr_OFFSET,0,&(r._ser_range_7_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_7_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_ADDR_BITS.
 */
#define READ_SER_RANGE_8_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_ADDR_BITSr_BLKACC,8,SER_RANGE_8_ADDR_BITSr_OFFSET,0,(r._ser_range_8_addr_bits), 1)
#define WRITE_SER_RANGE_8_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_ADDR_BITSr_BLKACC,8,SER_RANGE_8_ADDR_BITSr_OFFSET,0,&(r._ser_range_8_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_CONFIG.
 */
#define READ_SER_RANGE_8_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_CONFIGr_BLKACC,8,SER_RANGE_8_CONFIGr_OFFSET,0,(r._ser_range_8_config), 1)
#define WRITE_SER_RANGE_8_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_CONFIGr_BLKACC,8,SER_RANGE_8_CONFIGr_OFFSET,0,&(r._ser_range_8_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_DISABLE.
 */
#define READ_SER_RANGE_8_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_DISABLEr_BLKACC,8,SER_RANGE_8_DISABLEr_OFFSET,0,(r._ser_range_8_disable), 1)
#define WRITE_SER_RANGE_8_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_DISABLEr_BLKACC,8,SER_RANGE_8_DISABLEr_OFFSET,0,&(r._ser_range_8_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_END.
 */
#define READ_SER_RANGE_8_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_ENDr_BLKACC,8,SER_RANGE_8_ENDr_OFFSET,0,(r._ser_range_8_end), 1)
#define WRITE_SER_RANGE_8_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_ENDr_BLKACC,8,SER_RANGE_8_ENDr_OFFSET,0,&(r._ser_range_8_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_PROT_WORD.
 */
#define READ_SER_RANGE_8_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_PROT_WORDr_BLKACC,8,SER_RANGE_8_PROT_WORDr_OFFSET,i,(r._ser_range_8_prot_word), 1)
#define WRITE_SER_RANGE_8_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_PROT_WORDr_BLKACC,8,SER_RANGE_8_PROT_WORDr_OFFSET,i,&(r._ser_range_8_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_PROT_WORD_0.
 */
#define READ_SER_RANGE_8_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_PROT_WORD_0r_BLKACC,8,SER_RANGE_8_PROT_WORD_0r_OFFSET,0,(r._ser_range_8_prot_word_0), 1)
#define WRITE_SER_RANGE_8_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_PROT_WORD_0r_BLKACC,8,SER_RANGE_8_PROT_WORD_0r_OFFSET,0,&(r._ser_range_8_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_PROT_WORD_1.
 */
#define READ_SER_RANGE_8_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_PROT_WORD_1r_BLKACC,8,SER_RANGE_8_PROT_WORD_1r_OFFSET,0,(r._ser_range_8_prot_word_1), 1)
#define WRITE_SER_RANGE_8_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_PROT_WORD_1r_BLKACC,8,SER_RANGE_8_PROT_WORD_1r_OFFSET,0,&(r._ser_range_8_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_PROT_WORD_2.
 */
#define READ_SER_RANGE_8_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_PROT_WORD_2r_BLKACC,8,SER_RANGE_8_PROT_WORD_2r_OFFSET,0,(r._ser_range_8_prot_word_2), 1)
#define WRITE_SER_RANGE_8_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_PROT_WORD_2r_BLKACC,8,SER_RANGE_8_PROT_WORD_2r_OFFSET,0,&(r._ser_range_8_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_PROT_WORD_3.
 */
#define READ_SER_RANGE_8_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_PROT_WORD_3r_BLKACC,8,SER_RANGE_8_PROT_WORD_3r_OFFSET,0,(r._ser_range_8_prot_word_3), 1)
#define WRITE_SER_RANGE_8_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_PROT_WORD_3r_BLKACC,8,SER_RANGE_8_PROT_WORD_3r_OFFSET,0,&(r._ser_range_8_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_RESULT.
 */
#define READ_SER_RANGE_8_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_RESULTr_BLKACC,8,SER_RANGE_8_RESULTr_OFFSET,0,(r._ser_range_8_result), 1)
#define WRITE_SER_RANGE_8_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_RESULTr_BLKACC,8,SER_RANGE_8_RESULTr_OFFSET,0,&(r._ser_range_8_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_8_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_8_START.
 */
#define READ_SER_RANGE_8_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_8_STARTr_BLKACC,8,SER_RANGE_8_STARTr_OFFSET,0,(r._ser_range_8_start), 1)
#define WRITE_SER_RANGE_8_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_8_STARTr_BLKACC,8,SER_RANGE_8_STARTr_OFFSET,0,&(r._ser_range_8_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_8_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_ADDR_BITS.
 */
#define READ_SER_RANGE_9_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_ADDR_BITSr_BLKACC,8,SER_RANGE_9_ADDR_BITSr_OFFSET,0,(r._ser_range_9_addr_bits), 1)
#define WRITE_SER_RANGE_9_ADDR_BITSr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_ADDR_BITSr_BLKACC,8,SER_RANGE_9_ADDR_BITSr_OFFSET,0,&(r._ser_range_9_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_CONFIG.
 */
#define READ_SER_RANGE_9_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_CONFIGr_BLKACC,8,SER_RANGE_9_CONFIGr_OFFSET,0,(r._ser_range_9_config), 1)
#define WRITE_SER_RANGE_9_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_CONFIGr_BLKACC,8,SER_RANGE_9_CONFIGr_OFFSET,0,&(r._ser_range_9_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_DISABLE.
 */
#define READ_SER_RANGE_9_DISABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_DISABLEr_BLKACC,8,SER_RANGE_9_DISABLEr_OFFSET,0,(r._ser_range_9_disable), 1)
#define WRITE_SER_RANGE_9_DISABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_DISABLEr_BLKACC,8,SER_RANGE_9_DISABLEr_OFFSET,0,&(r._ser_range_9_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_END.
 */
#define READ_SER_RANGE_9_ENDr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_ENDr_BLKACC,8,SER_RANGE_9_ENDr_OFFSET,0,(r._ser_range_9_end), 1)
#define WRITE_SER_RANGE_9_ENDr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_ENDr_BLKACC,8,SER_RANGE_9_ENDr_OFFSET,0,&(r._ser_range_9_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_PROT_WORD
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_PROT_WORD.
 */
#define READ_SER_RANGE_9_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_PROT_WORDr_BLKACC,8,SER_RANGE_9_PROT_WORDr_OFFSET,i,(r._ser_range_9_prot_word), 1)
#define WRITE_SER_RANGE_9_PROT_WORDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_PROT_WORDr_BLKACC,8,SER_RANGE_9_PROT_WORDr_OFFSET,i,&(r._ser_range_9_prot_word), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_PROT_WORDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_PROT_WORD_0
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_PROT_WORD_0.
 */
#define READ_SER_RANGE_9_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_PROT_WORD_0r_BLKACC,8,SER_RANGE_9_PROT_WORD_0r_OFFSET,0,(r._ser_range_9_prot_word_0), 1)
#define WRITE_SER_RANGE_9_PROT_WORD_0r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_PROT_WORD_0r_BLKACC,8,SER_RANGE_9_PROT_WORD_0r_OFFSET,0,&(r._ser_range_9_prot_word_0), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_PROT_WORD_0r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_PROT_WORD_1
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_PROT_WORD_1.
 */
#define READ_SER_RANGE_9_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_PROT_WORD_1r_BLKACC,8,SER_RANGE_9_PROT_WORD_1r_OFFSET,0,(r._ser_range_9_prot_word_1), 1)
#define WRITE_SER_RANGE_9_PROT_WORD_1r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_PROT_WORD_1r_BLKACC,8,SER_RANGE_9_PROT_WORD_1r_OFFSET,0,&(r._ser_range_9_prot_word_1), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_PROT_WORD_1r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_PROT_WORD_2
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_PROT_WORD_2.
 */
#define READ_SER_RANGE_9_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_PROT_WORD_2r_BLKACC,8,SER_RANGE_9_PROT_WORD_2r_OFFSET,0,(r._ser_range_9_prot_word_2), 1)
#define WRITE_SER_RANGE_9_PROT_WORD_2r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_PROT_WORD_2r_BLKACC,8,SER_RANGE_9_PROT_WORD_2r_OFFSET,0,&(r._ser_range_9_prot_word_2), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_PROT_WORD_2r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_PROT_WORD_3
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_PROT_WORD_3.
 */
#define READ_SER_RANGE_9_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_PROT_WORD_3r_BLKACC,8,SER_RANGE_9_PROT_WORD_3r_OFFSET,0,(r._ser_range_9_prot_word_3), 1)
#define WRITE_SER_RANGE_9_PROT_WORD_3r(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_PROT_WORD_3r_BLKACC,8,SER_RANGE_9_PROT_WORD_3r_OFFSET,0,&(r._ser_range_9_prot_word_3), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_PROT_WORD_3r'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_RESULT.
 */
#define READ_SER_RANGE_9_RESULTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_RESULTr_BLKACC,8,SER_RANGE_9_RESULTr_OFFSET,0,(r._ser_range_9_result), 1)
#define WRITE_SER_RANGE_9_RESULTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_RESULTr_BLKACC,8,SER_RANGE_9_RESULTr_OFFSET,0,&(r._ser_range_9_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_9_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_9_START.
 */
#define READ_SER_RANGE_9_STARTr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_9_STARTr_BLKACC,8,SER_RANGE_9_STARTr_OFFSET,0,(r._ser_range_9_start), 1)
#define WRITE_SER_RANGE_9_STARTr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_9_STARTr_BLKACC,8,SER_RANGE_9_STARTr_OFFSET,0,&(r._ser_range_9_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_9_STARTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_ADDR_BITS
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_ADDR_BITS.
 */
#define READ_SER_RANGE_ADDR_BITSr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_ADDR_BITSr_BLKACC,8,SER_RANGE_ADDR_BITSr_OFFSET,i,(r._ser_range_addr_bits), 1)
#define WRITE_SER_RANGE_ADDR_BITSr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_ADDR_BITSr_BLKACC,8,SER_RANGE_ADDR_BITSr_OFFSET,i,&(r._ser_range_addr_bits), 1)

/*******************************************************************************
 * End of 'SER_RANGE_ADDR_BITSr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_CONFIG
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_CONFIG.
 */
#define READ_SER_RANGE_CONFIGr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_CONFIGr_BLKACC,8,SER_RANGE_CONFIGr_OFFSET,i,(r._ser_range_config), 1)
#define WRITE_SER_RANGE_CONFIGr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_CONFIGr_BLKACC,8,SER_RANGE_CONFIGr_OFFSET,i,&(r._ser_range_config), 1)

/*******************************************************************************
 * End of 'SER_RANGE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_DISABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_DISABLE.
 */
#define READ_SER_RANGE_DISABLEr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_DISABLEr_BLKACC,8,SER_RANGE_DISABLEr_OFFSET,i,(r._ser_range_disable), 1)
#define WRITE_SER_RANGE_DISABLEr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_DISABLEr_BLKACC,8,SER_RANGE_DISABLEr_OFFSET,i,&(r._ser_range_disable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_DISABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_ENABLE
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_ENABLE.
 */
#define READ_SER_RANGE_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_ENABLEr_BLKACC,8,SER_RANGE_ENABLEr_OFFSET,0,(r._ser_range_enable), 1)
#define WRITE_SER_RANGE_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_ENABLEr_BLKACC,8,SER_RANGE_ENABLEr_OFFSET,0,&(r._ser_range_enable), 1)

/*******************************************************************************
 * End of 'SER_RANGE_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_END
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_END.
 */
#define READ_SER_RANGE_ENDr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_ENDr_BLKACC,8,SER_RANGE_ENDr_OFFSET,i,(r._ser_range_end), 1)
#define WRITE_SER_RANGE_ENDr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_ENDr_BLKACC,8,SER_RANGE_ENDr_OFFSET,i,&(r._ser_range_end), 1)

/*******************************************************************************
 * End of 'SER_RANGE_ENDr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_RESULT
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_RESULT.
 */
#define READ_SER_RANGE_RESULTr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_RESULTr_BLKACC,8,SER_RANGE_RESULTr_OFFSET,i,(r._ser_range_result), 1)
#define WRITE_SER_RANGE_RESULTr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_RESULTr_BLKACC,8,SER_RANGE_RESULTr_OFFSET,i,&(r._ser_range_result), 1)

/*******************************************************************************
 * End of 'SER_RANGE_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  SER_RANGE_START
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RANGE_START.
 */
#define READ_SER_RANGE_STARTr(u,i,r) bcmbd_cmicd_reg_block_read(u,SER_RANGE_STARTr_BLKACC,8,SER_RANGE_STARTr_OFFSET,i,(r._ser_range_start), 1)
#define WRITE_SER_RANGE_STARTr(u,i,r) bcmbd_cmicd_reg_block_write(u,SER_RANGE_STARTr_BLKACC,8,SER_RANGE_STARTr_OFFSET,i,&(r._ser_range_start), 1)

/*******************************************************************************
 * End of 'SER_RANGE_STARTr'
 */




/*******************************************************************************
 * MEMORY:  SER_RESULT_0
 * BLOCKS:   SER
 * SIZE:     67
 */
/*
 * These macros can be used to access SER_RESULT_0.
 */
#define READ_SER_RESULT_0m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_0m_BLKACC)+8,SER_RESULT_0m_OFFSET+i,(m._ser_result_0),3)
#define WRITE_SER_RESULT_0m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_0m_BLKACC)+8,SER_RESULT_0m_OFFSET+i,&(m._ser_result_0),3)

/*******************************************************************************
 * End of 'SER_RESULT_0m'
 */




/*******************************************************************************
 * MEMORY:  SER_RESULT_1
 * BLOCKS:   SER
 * SIZE:     67
 */
/*
 * These macros can be used to access SER_RESULT_1.
 */
#define READ_SER_RESULT_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_1m_BLKACC)+8,SER_RESULT_1m_OFFSET+i,(m._ser_result_1),3)
#define WRITE_SER_RESULT_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_1m_BLKACC)+8,SER_RESULT_1m_OFFSET+i,&(m._ser_result_1),3)

/*******************************************************************************
 * End of 'SER_RESULT_1m'
 */




/*******************************************************************************
 * MEMORY:  SER_RESULT_DATA_0
 * BLOCKS:   SER
 * SIZE:     512
 */
/*
 * These macros can be used to access SER_RESULT_DATA_0.
 */
#define READ_SER_RESULT_DATA_0m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_DATA_0m_BLKACC)+8,SER_RESULT_DATA_0m_OFFSET+i,(m._ser_result_data_0),16)
#define WRITE_SER_RESULT_DATA_0m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_DATA_0m_BLKACC)+8,SER_RESULT_DATA_0m_OFFSET+i,&(m._ser_result_data_0),16)

/*******************************************************************************
 * End of 'SER_RESULT_DATA_0m'
 */




/*******************************************************************************
 * MEMORY:  SER_RESULT_DATA_1
 * BLOCKS:   SER
 * SIZE:     512
 */
/*
 * These macros can be used to access SER_RESULT_DATA_1.
 */
#define READ_SER_RESULT_DATA_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_DATA_1m_BLKACC)+8,SER_RESULT_DATA_1m_OFFSET+i,(m._ser_result_data_1),16)
#define WRITE_SER_RESULT_DATA_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_DATA_1m_BLKACC)+8,SER_RESULT_DATA_1m_OFFSET+i,&(m._ser_result_data_1),16)

/*******************************************************************************
 * End of 'SER_RESULT_DATA_1m'
 */




/*******************************************************************************
 * MEMORY:  SER_RESULT_EXPECTED_0
 * BLOCKS:   SER
 * SIZE:     72
 */
/*
 * These macros can be used to access SER_RESULT_EXPECTED_0.
 */
#define READ_SER_RESULT_EXPECTED_0m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_EXPECTED_0m_BLKACC)+8,SER_RESULT_EXPECTED_0m_OFFSET+i,(m._ser_result_expected_0),3)
#define WRITE_SER_RESULT_EXPECTED_0m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_EXPECTED_0m_BLKACC)+8,SER_RESULT_EXPECTED_0m_OFFSET+i,&(m._ser_result_expected_0),3)

/*******************************************************************************
 * End of 'SER_RESULT_EXPECTED_0m'
 */




/*******************************************************************************
 * MEMORY:  SER_RESULT_EXPECTED_1
 * BLOCKS:   SER
 * SIZE:     72
 */
/*
 * These macros can be used to access SER_RESULT_EXPECTED_1.
 */
#define READ_SER_RESULT_EXPECTED_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_EXPECTED_1m_BLKACC)+8,SER_RESULT_EXPECTED_1m_OFFSET+i,(m._ser_result_expected_1),3)
#define WRITE_SER_RESULT_EXPECTED_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SER_RESULT_EXPECTED_1m_BLKACC)+8,SER_RESULT_EXPECTED_1m_OFFSET+i,&(m._ser_result_expected_1),3)

/*******************************************************************************
 * End of 'SER_RESULT_EXPECTED_1m'
 */




/*******************************************************************************
 * REGISTER:  SER_RESULT_MEM_LVM
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RESULT_MEM_LVM.
 */
#define READ_SER_RESULT_MEM_LVMr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RESULT_MEM_LVMr_BLKACC,8,SER_RESULT_MEM_LVMr_OFFSET,0,(r._ser_result_mem_lvm), 1)
#define WRITE_SER_RESULT_MEM_LVMr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RESULT_MEM_LVMr_BLKACC,8,SER_RESULT_MEM_LVMr_OFFSET,0,&(r._ser_result_mem_lvm), 1)

/*******************************************************************************
 * End of 'SER_RESULT_MEM_LVMr'
 */




/*******************************************************************************
 * REGISTER:  SER_RESULT_MEM_TM
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RESULT_MEM_TM.
 */
#define READ_SER_RESULT_MEM_TMr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RESULT_MEM_TMr_BLKACC,8,SER_RESULT_MEM_TMr_OFFSET,0,(r._ser_result_mem_tm), 1)
#define WRITE_SER_RESULT_MEM_TMr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RESULT_MEM_TMr_BLKACC,8,SER_RESULT_MEM_TMr_OFFSET,0,&(r._ser_result_mem_tm), 1)

/*******************************************************************************
 * End of 'SER_RESULT_MEM_TMr'
 */




/*******************************************************************************
 * REGISTER:  SER_RING_ERR_CTRL
 * BLOCKS:   SER
 * SIZE:     32
 */
/*
 * These macros can be used to access SER_RING_ERR_CTRL.
 */
#define READ_SER_RING_ERR_CTRLr(u,r) bcmbd_cmicd_reg_block_read(u,SER_RING_ERR_CTRLr_BLKACC,8,SER_RING_ERR_CTRLr_OFFSET,0,(r._ser_ring_err_ctrl), 1)
#define WRITE_SER_RING_ERR_CTRLr(u,r) bcmbd_cmicd_reg_block_write(u,SER_RING_ERR_CTRLr_BLKACC,8,SER_RING_ERR_CTRLr_OFFSET,0,&(r._ser_ring_err_ctrl), 1)

/*******************************************************************************
 * End of 'SER_RING_ERR_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_EGR_RAND_SEED
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SFLOW_EGR_RAND_SEED.
 */
#define READ_SFLOW_EGR_RAND_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SFLOW_EGR_RAND_SEEDr_BLKACC,1,n,0,SFLOW_EGR_RAND_SEEDr_OFFSET,0,(r._sflow_egr_rand_seed),1)
#define WRITE_SFLOW_EGR_RAND_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SFLOW_EGR_RAND_SEEDr_BLKACC,1,n,0,SFLOW_EGR_RAND_SEEDr_OFFSET,0,&(r._sflow_egr_rand_seed),1)
#define WRITE_SFLOW_EGR_RAND_SEEDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SFLOW_EGR_RAND_SEEDr_BLKACC,1,-1,0,SFLOW_EGR_RAND_SEEDr_OFFSET,0,&(r._sflow_egr_rand_seed),1)

/*******************************************************************************
 * End of 'SFLOW_EGR_RAND_SEEDr'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_EGR_THRESHOLD
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SFLOW_EGR_THRESHOLD.
 */
#define READ_SFLOW_EGR_THRESHOLDr(u,p,r) bcmbd_cmicd_reg_port_read(u,SFLOW_EGR_THRESHOLDr_BLKACC,p,SFLOW_EGR_THRESHOLDr_OFFSET,0,(r._sflow_egr_threshold), 1)
#define WRITE_SFLOW_EGR_THRESHOLDr(u,p,r) bcmbd_cmicd_reg_port_write(u,SFLOW_EGR_THRESHOLDr_BLKACC,p,SFLOW_EGR_THRESHOLDr_OFFSET,0,&(r._sflow_egr_threshold), 1)

/*******************************************************************************
 * End of 'SFLOW_EGR_THRESHOLDr'
 */




/*******************************************************************************
 * MEMORY:  SFLOW_ING_DATA_SOURCE
 * BLOCKS:   IPIPE
 * SIZE:     128
 */
/*
 * These macros can be used to access SFLOW_ING_DATA_SOURCE.
 */
#define READ_SFLOW_ING_DATA_SOURCEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SFLOW_ING_DATA_SOURCEm_BLKACC)+1,SFLOW_ING_DATA_SOURCEm_OFFSET+i,(m._sflow_ing_data_source),4)
#define WRITE_SFLOW_ING_DATA_SOURCEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SFLOW_ING_DATA_SOURCEm_BLKACC)+1,SFLOW_ING_DATA_SOURCEm_OFFSET+i,&(m._sflow_ing_data_source),4)

/*******************************************************************************
 * End of 'SFLOW_ING_DATA_SOURCEm'
 */




/*******************************************************************************
 * MEMORY:  SFLOW_ING_FLEX_DATA_SOURCE
 * BLOCKS:   IPIPE
 * SIZE:     128
 */
/*
 * These macros can be used to access SFLOW_ING_FLEX_DATA_SOURCE.
 */
#define READ_SFLOW_ING_FLEX_DATA_SOURCEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SFLOW_ING_FLEX_DATA_SOURCEm_BLKACC)+1,SFLOW_ING_FLEX_DATA_SOURCEm_OFFSET+i,(m._sflow_ing_flex_data_source),4)
#define WRITE_SFLOW_ING_FLEX_DATA_SOURCEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SFLOW_ING_FLEX_DATA_SOURCEm_BLKACC)+1,SFLOW_ING_FLEX_DATA_SOURCEm_OFFSET+i,&(m._sflow_ing_flex_data_source),4)

/*******************************************************************************
 * End of 'SFLOW_ING_FLEX_DATA_SOURCEm'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_ING_FLEX_RAND_SEED
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SFLOW_ING_FLEX_RAND_SEED.
 */
#define READ_SFLOW_ING_FLEX_RAND_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SFLOW_ING_FLEX_RAND_SEEDr_BLKACC,1,n,0,SFLOW_ING_FLEX_RAND_SEEDr_OFFSET,0,(r._sflow_ing_flex_rand_seed),1)
#define WRITE_SFLOW_ING_FLEX_RAND_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SFLOW_ING_FLEX_RAND_SEEDr_BLKACC,1,n,0,SFLOW_ING_FLEX_RAND_SEEDr_OFFSET,0,&(r._sflow_ing_flex_rand_seed),1)
#define WRITE_SFLOW_ING_FLEX_RAND_SEEDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SFLOW_ING_FLEX_RAND_SEEDr_BLKACC,1,-1,0,SFLOW_ING_FLEX_RAND_SEEDr_OFFSET,0,&(r._sflow_ing_flex_rand_seed),1)

/*******************************************************************************
 * End of 'SFLOW_ING_FLEX_RAND_SEEDr'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_ING_MIRROR_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SFLOW_ING_MIRROR_CONFIG.
 */
#define READ_SFLOW_ING_MIRROR_CONFIGr(u,r) bcmbd_cmicd_reg_block_read(u,SFLOW_ING_MIRROR_CONFIGr_BLKACC,1,SFLOW_ING_MIRROR_CONFIGr_OFFSET,0,(r._sflow_ing_mirror_config), 1)
#define WRITE_SFLOW_ING_MIRROR_CONFIGr(u,r) bcmbd_cmicd_reg_block_write(u,SFLOW_ING_MIRROR_CONFIGr_BLKACC,1,SFLOW_ING_MIRROR_CONFIGr_OFFSET,0,&(r._sflow_ing_mirror_config), 1)

/*******************************************************************************
 * End of 'SFLOW_ING_MIRROR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SFLOW_ING_RAND_SEED
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SFLOW_ING_RAND_SEED.
 */
#define READ_SFLOW_ING_RAND_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SFLOW_ING_RAND_SEEDr_BLKACC,1,n,0,SFLOW_ING_RAND_SEEDr_OFFSET,0,(r._sflow_ing_rand_seed),1)
#define WRITE_SFLOW_ING_RAND_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SFLOW_ING_RAND_SEEDr_BLKACC,1,n,0,SFLOW_ING_RAND_SEEDr_OFFSET,0,&(r._sflow_ing_rand_seed),1)
#define WRITE_SFLOW_ING_RAND_SEEDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SFLOW_ING_RAND_SEEDr_BLKACC,1,-1,0,SFLOW_ING_RAND_SEEDr_OFFSET,0,&(r._sflow_ing_rand_seed),1)

/*******************************************************************************
 * End of 'SFLOW_ING_RAND_SEEDr'
 */




/*******************************************************************************
 * REGISTER:  SHARED_TABLE_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SHARED_TABLE_HASH_CONTROL.
 */
#define READ_SHARED_TABLE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,SHARED_TABLE_HASH_CONTROLr_BLKACC,1,SHARED_TABLE_HASH_CONTROLr_OFFSET,0,(r._shared_table_hash_control), 1)
#define WRITE_SHARED_TABLE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,SHARED_TABLE_HASH_CONTROLr_BLKACC,1,SHARED_TABLE_HASH_CONTROLr_OFFSET,0,&(r._shared_table_hash_control), 1)

/*******************************************************************************
 * End of 'SHARED_TABLE_HASH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  SNAT_DISCARDS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SNAT_DISCARDS.
 */
#define READ_SNAT_DISCARDSr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,SNAT_DISCARDSr_BLKACC,1,n,0,SNAT_DISCARDSr_OFFSET,i,(r._snat_discards),1)
#define WRITE_SNAT_DISCARDSr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,SNAT_DISCARDSr_BLKACC,1,n,0,SNAT_DISCARDSr_OFFSET,i,&(r._snat_discards),1)
#define WRITE_SNAT_DISCARDSr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,SNAT_DISCARDSr_BLKACC,1,-1,0,SNAT_DISCARDSr_OFFSET,i,&(r._snat_discards),1)

/*******************************************************************************
 * End of 'SNAT_DISCARDSr'
 */




/*******************************************************************************
 * REGISTER:  SNAT_TRANSLATIONS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SNAT_TRANSLATIONS.
 */
#define READ_SNAT_TRANSLATIONSr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,SNAT_TRANSLATIONSr_BLKACC,1,n,0,SNAT_TRANSLATIONSr_OFFSET,i,(r._snat_translations),1)
#define WRITE_SNAT_TRANSLATIONSr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,SNAT_TRANSLATIONSr_BLKACC,1,n,0,SNAT_TRANSLATIONSr_OFFSET,i,&(r._snat_translations),1)
#define WRITE_SNAT_TRANSLATIONSr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,SNAT_TRANSLATIONSr_BLKACC,1,-1,0,SNAT_TRANSLATIONSr_OFFSET,i,&(r._snat_translations),1)

/*******************************************************************************
 * End of 'SNAT_TRANSLATIONSr'
 */




/*******************************************************************************
 * REGISTER:  SNAT_TRANSLATIONS_NEEDED
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SNAT_TRANSLATIONS_NEEDED.
 */
#define READ_SNAT_TRANSLATIONS_NEEDEDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_read(u,SNAT_TRANSLATIONS_NEEDEDr_BLKACC,1,n,0,SNAT_TRANSLATIONS_NEEDEDr_OFFSET,i,(r._snat_translations_needed),1)
#define WRITE_SNAT_TRANSLATIONS_NEEDEDr(u,n,i,r) bcmbd_cmicd_reg_unique_block_write(u,SNAT_TRANSLATIONS_NEEDEDr_BLKACC,1,n,0,SNAT_TRANSLATIONS_NEEDEDr_OFFSET,i,&(r._snat_translations_needed),1)
#define WRITE_SNAT_TRANSLATIONS_NEEDEDr_ALL(u,i,r) bcmbd_cmicd_reg_unique_block_write(u,SNAT_TRANSLATIONS_NEEDEDr_BLKACC,1,-1,0,SNAT_TRANSLATIONS_NEEDEDr_OFFSET,i,&(r._snat_translations_needed),1)

/*******************************************************************************
 * End of 'SNAT_TRANSLATIONS_NEEDEDr'
 */




/*******************************************************************************
 * SWFORMAT:  SOFTWARE_BLOCKMAP
 * BLOCKS:
 * SIZE:     13
 */
/*******************************************************************************
 * End of 'SOFTWARE_BLOCKMAP'
 */




/*******************************************************************************
 * MEMORY:  SOURCE_MOD_PROXY_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access SOURCE_MOD_PROXY_TABLE.
 */
#define READ_SOURCE_MOD_PROXY_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_MOD_PROXY_TABLEm_BLKACC)+1,SOURCE_MOD_PROXY_TABLEm_OFFSET+i,(m._source_mod_proxy_table),1)
#define WRITE_SOURCE_MOD_PROXY_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_MOD_PROXY_TABLEm_BLKACC)+1,SOURCE_MOD_PROXY_TABLEm_OFFSET+i,&(m._source_mod_proxy_table),1)

/*******************************************************************************
 * End of 'SOURCE_MOD_PROXY_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  SOURCE_TRUNK_MAP_MODBASE
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access SOURCE_TRUNK_MAP_MODBASE.
 */
#define READ_SOURCE_TRUNK_MAP_MODBASEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_TRUNK_MAP_MODBASEm_BLKACC)+1,SOURCE_TRUNK_MAP_MODBASEm_OFFSET+i,(m._source_trunk_map_modbase),1)
#define WRITE_SOURCE_TRUNK_MAP_MODBASEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_TRUNK_MAP_MODBASEm_BLKACC)+1,SOURCE_TRUNK_MAP_MODBASEm_OFFSET+i,&(m._source_trunk_map_modbase),1)

/*******************************************************************************
 * End of 'SOURCE_TRUNK_MAP_MODBASEm'
 */




/*******************************************************************************
 * MEMORY:  SOURCE_TRUNK_MAP_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     122
 */
/*
 * These macros can be used to access SOURCE_TRUNK_MAP_TABLE.
 */
#define READ_SOURCE_TRUNK_MAP_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_TRUNK_MAP_TABLEm_BLKACC)+1,SOURCE_TRUNK_MAP_TABLEm_OFFSET+i,(m._source_trunk_map_table),4)
#define WRITE_SOURCE_TRUNK_MAP_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_TRUNK_MAP_TABLEm_BLKACC)+1,SOURCE_TRUNK_MAP_TABLEm_OFFSET+i,&(m._source_trunk_map_table),4)

/*******************************************************************************
 * End of 'SOURCE_TRUNK_MAP_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  SOURCE_VP
 * BLOCKS:   IPIPE
 * SIZE:     152
 */
/*
 * These macros can be used to access SOURCE_VP.
 */
#define READ_SOURCE_VPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_VPm_BLKACC)+1,SOURCE_VPm_OFFSET+i,(m._source_vp),5)
#define WRITE_SOURCE_VPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_VPm_BLKACC)+1,SOURCE_VPm_OFFSET+i,&(m._source_vp),5)

/*******************************************************************************
 * End of 'SOURCE_VPm'
 */




/*******************************************************************************
 * MEMORY:  SOURCE_VP_2
 * BLOCKS:   IPIPE
 * SIZE:     2
 */
/*
 * These macros can be used to access SOURCE_VP_2.
 */
#define READ_SOURCE_VP_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_VP_2m_BLKACC)+1,SOURCE_VP_2m_OFFSET+i,(m._source_vp_2),1)
#define WRITE_SOURCE_VP_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SOURCE_VP_2m_BLKACC)+1,SOURCE_VP_2m_OFFSET+i,&(m._source_vp_2),1)

/*******************************************************************************
 * End of 'SOURCE_VP_2m'
 */




/*******************************************************************************
 * MEMORY:  SRC_COMPRESSION
 * BLOCKS:   IPIPE
 * SIZE:     326
 */
/*
 * These macros can be used to access SRC_COMPRESSION.
 */
#define READ_SRC_COMPRESSIONm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,SRC_COMPRESSIONm_BLKACC,1,n,0,SRC_COMPRESSIONm_OFFSET,i,(m._src_compression),11)
#define WRITE_SRC_COMPRESSIONm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,SRC_COMPRESSIONm_BLKACC,1,n,0,SRC_COMPRESSIONm_OFFSET,i,&(m._src_compression),11)
#define WRITE_SRC_COMPRESSIONm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,SRC_COMPRESSIONm_BLKACC,1,-1,0,SRC_COMPRESSIONm_OFFSET,i,&(m._src_compression),11)

/*******************************************************************************
 * End of 'SRC_COMPRESSIONm'
 */




/*******************************************************************************
 * REGISTER:  SRC_COMPRESSION_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRC_COMPRESSION_CAM_BIST_CONFIG.
 */
#define READ_SRC_COMPRESSION_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SRC_COMPRESSION_CAM_BIST_CONFIGr_BLKACC,1,n,0,SRC_COMPRESSION_CAM_BIST_CONFIGr_OFFSET,0,(r._src_compression_cam_bist_config),1)
#define WRITE_SRC_COMPRESSION_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_CAM_BIST_CONFIGr_BLKACC,1,n,0,SRC_COMPRESSION_CAM_BIST_CONFIGr_OFFSET,0,&(r._src_compression_cam_bist_config),1)
#define WRITE_SRC_COMPRESSION_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_CAM_BIST_CONFIGr_BLKACC,1,-1,0,SRC_COMPRESSION_CAM_BIST_CONFIGr_OFFSET,0,&(r._src_compression_cam_bist_config),1)

/*******************************************************************************
 * End of 'SRC_COMPRESSION_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  SRC_COMPRESSION_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRC_COMPRESSION_CAM_BIST_DBG_DATA.
 */
#define READ_SRC_COMPRESSION_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SRC_COMPRESSION_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,SRC_COMPRESSION_CAM_BIST_DBG_DATAr_OFFSET,0,(r._src_compression_cam_bist_dbg_data),1)
#define WRITE_SRC_COMPRESSION_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,SRC_COMPRESSION_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._src_compression_cam_bist_dbg_data),1)
#define WRITE_SRC_COMPRESSION_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,SRC_COMPRESSION_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._src_compression_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'SRC_COMPRESSION_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  SRC_COMPRESSION_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRC_COMPRESSION_CAM_BIST_STATUS.
 */
#define READ_SRC_COMPRESSION_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SRC_COMPRESSION_CAM_BIST_STATUSr_BLKACC,1,n,0,SRC_COMPRESSION_CAM_BIST_STATUSr_OFFSET,0,(r._src_compression_cam_bist_status),1)
#define WRITE_SRC_COMPRESSION_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_CAM_BIST_STATUSr_BLKACC,1,n,0,SRC_COMPRESSION_CAM_BIST_STATUSr_OFFSET,0,&(r._src_compression_cam_bist_status),1)
#define WRITE_SRC_COMPRESSION_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_CAM_BIST_STATUSr_BLKACC,1,-1,0,SRC_COMPRESSION_CAM_BIST_STATUSr_OFFSET,0,&(r._src_compression_cam_bist_status),1)

/*******************************************************************************
 * End of 'SRC_COMPRESSION_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  SRC_COMPRESSION_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRC_COMPRESSION_CAM_DBGCTRL.
 */
#define READ_SRC_COMPRESSION_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SRC_COMPRESSION_CAM_DBGCTRLr_BLKACC,1,n,0,SRC_COMPRESSION_CAM_DBGCTRLr_OFFSET,0,(r._src_compression_cam_dbgctrl),1)
#define WRITE_SRC_COMPRESSION_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_CAM_DBGCTRLr_BLKACC,1,n,0,SRC_COMPRESSION_CAM_DBGCTRLr_OFFSET,0,&(r._src_compression_cam_dbgctrl),1)
#define WRITE_SRC_COMPRESSION_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_CAM_DBGCTRLr_BLKACC,1,-1,0,SRC_COMPRESSION_CAM_DBGCTRLr_OFFSET,0,&(r._src_compression_cam_dbgctrl),1)

/*******************************************************************************
 * End of 'SRC_COMPRESSION_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  SRC_COMPRESSION_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     37
 */
/*
 * These macros can be used to access SRC_COMPRESSION_DATA_ONLY.
 */
#define READ_SRC_COMPRESSION_DATA_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,SRC_COMPRESSION_DATA_ONLYm_BLKACC,1,n,0,SRC_COMPRESSION_DATA_ONLYm_OFFSET,i,(m._src_compression_data_only),2)
#define WRITE_SRC_COMPRESSION_DATA_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,SRC_COMPRESSION_DATA_ONLYm_BLKACC,1,n,0,SRC_COMPRESSION_DATA_ONLYm_OFFSET,i,&(m._src_compression_data_only),2)
#define WRITE_SRC_COMPRESSION_DATA_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,SRC_COMPRESSION_DATA_ONLYm_BLKACC,1,-1,0,SRC_COMPRESSION_DATA_ONLYm_OFFSET,i,&(m._src_compression_data_only),2)

/*******************************************************************************
 * End of 'SRC_COMPRESSION_DATA_ONLYm'
 */




/*******************************************************************************
 * REGISTER:  SRC_COMPRESSION_RAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRC_COMPRESSION_RAM_DBGCTRL.
 */
#define READ_SRC_COMPRESSION_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SRC_COMPRESSION_RAM_DBGCTRLr_BLKACC,1,n,0,SRC_COMPRESSION_RAM_DBGCTRLr_OFFSET,0,(r._src_compression_ram_dbgctrl),1)
#define WRITE_SRC_COMPRESSION_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_RAM_DBGCTRLr_BLKACC,1,n,0,SRC_COMPRESSION_RAM_DBGCTRLr_OFFSET,0,&(r._src_compression_ram_dbgctrl),1)
#define WRITE_SRC_COMPRESSION_RAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SRC_COMPRESSION_RAM_DBGCTRLr_BLKACC,1,-1,0,SRC_COMPRESSION_RAM_DBGCTRLr_OFFSET,0,&(r._src_compression_ram_dbgctrl),1)

/*******************************************************************************
 * End of 'SRC_COMPRESSION_RAM_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  SRC_COMPRESSION_TCAM_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     289
 */
/*
 * These macros can be used to access SRC_COMPRESSION_TCAM_ONLY.
 */
#define READ_SRC_COMPRESSION_TCAM_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,SRC_COMPRESSION_TCAM_ONLYm_BLKACC,1,n,0,SRC_COMPRESSION_TCAM_ONLYm_OFFSET,i,(m._src_compression_tcam_only),10)
#define WRITE_SRC_COMPRESSION_TCAM_ONLYm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,SRC_COMPRESSION_TCAM_ONLYm_BLKACC,1,n,0,SRC_COMPRESSION_TCAM_ONLYm_OFFSET,i,&(m._src_compression_tcam_only),10)
#define WRITE_SRC_COMPRESSION_TCAM_ONLYm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,SRC_COMPRESSION_TCAM_ONLYm_BLKACC,1,-1,0,SRC_COMPRESSION_TCAM_ONLYm_OFFSET,i,&(m._src_compression_tcam_only),10)

/*******************************************************************************
 * End of 'SRC_COMPRESSION_TCAM_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  SRC_MODID_EGRESS
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access SRC_MODID_EGRESS.
 */
#define READ_SRC_MODID_EGRESSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SRC_MODID_EGRESSm_BLKACC)+1,SRC_MODID_EGRESSm_OFFSET+i,(m._src_modid_egress),5)
#define WRITE_SRC_MODID_EGRESSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SRC_MODID_EGRESSm_BLKACC)+1,SRC_MODID_EGRESSm_OFFSET+i,&(m._src_modid_egress),5)

/*******************************************************************************
 * End of 'SRC_MODID_EGRESSm'
 */




/*******************************************************************************
 * REGISTER:  SRC_MODID_EGRESS_SEL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRC_MODID_EGRESS_SEL.
 */
#define READ_SRC_MODID_EGRESS_SELr(u,p,r) bcmbd_cmicd_reg_port_read(u,SRC_MODID_EGRESS_SELr_BLKACC,p,SRC_MODID_EGRESS_SELr_OFFSET,0,(r._src_modid_egress_sel), 1)
#define WRITE_SRC_MODID_EGRESS_SELr(u,p,r) bcmbd_cmicd_reg_port_write(u,SRC_MODID_EGRESS_SELr_BLKACC,p,SRC_MODID_EGRESS_SELr_OFFSET,0,&(r._src_modid_egress_sel), 1)

/*******************************************************************************
 * End of 'SRC_MODID_EGRESS_SELr'
 */




/*******************************************************************************
 * MEMORY:  SRC_MODID_INGRESS_BLOCK
 * BLOCKS:   IPIPE
 * SIZE:     140
 */
/*
 * These macros can be used to access SRC_MODID_INGRESS_BLOCK.
 */
#define READ_SRC_MODID_INGRESS_BLOCKm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SRC_MODID_INGRESS_BLOCKm_BLKACC)+1,SRC_MODID_INGRESS_BLOCKm_OFFSET+i,(m._src_modid_ingress_block),5)
#define WRITE_SRC_MODID_INGRESS_BLOCKm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SRC_MODID_INGRESS_BLOCKm_BLKACC)+1,SRC_MODID_INGRESS_BLOCKm_OFFSET+i,&(m._src_modid_ingress_block),5)

/*******************************************************************************
 * End of 'SRC_MODID_INGRESS_BLOCKm'
 */




/*******************************************************************************
 * REGISTER:  SRP_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRP_CONTROL_1.
 */
#define READ_SRP_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_read(u,SRP_CONTROL_1r_BLKACC,1,SRP_CONTROL_1r_OFFSET,0,(r._srp_control_1), 1)
#define WRITE_SRP_CONTROL_1r(u,r) bcmbd_cmicd_reg_block_write(u,SRP_CONTROL_1r_BLKACC,1,SRP_CONTROL_1r_OFFSET,0,&(r._srp_control_1), 1)

/*******************************************************************************
 * End of 'SRP_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  SRP_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SRP_CONTROL_2.
 */
#define READ_SRP_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,SRP_CONTROL_2r_BLKACC,1,SRP_CONTROL_2r_OFFSET,0,(r._srp_control_2), 1)
#define WRITE_SRP_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,SRP_CONTROL_2r_BLKACC,1,SRP_CONTROL_2r_OFFSET,0,&(r._srp_control_2), 1)

/*******************************************************************************
 * End of 'SRP_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  STATS_INTF_CONFIG_ID
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access STATS_INTF_CONFIG_ID.
 */
#define READ_STATS_INTF_CONFIG_IDr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,STATS_INTF_CONFIG_IDr_BLKACC,5,0,p,STATS_INTF_CONFIG_IDr_OFFSET,0,(r._stats_intf_config_id),1)
#define WRITE_STATS_INTF_CONFIG_IDr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,STATS_INTF_CONFIG_IDr_BLKACC,5,0,p,STATS_INTF_CONFIG_IDr_OFFSET,0,&(r._stats_intf_config_id),1)

/*******************************************************************************
 * End of 'STATS_INTF_CONFIG_IDr'
 */




/*******************************************************************************
 * MEMORY:  STATS_INTF_QUEUE_LIST
 * BLOCKS:   MMU_GLB
 * SIZE:     18
 */
/*
 * These macros can be used to access STATS_INTF_QUEUE_LIST.
 */
#define READ_STATS_INTF_QUEUE_LISTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,STATS_INTF_QUEUE_LISTm_BLKACC,5,0,p,STATS_INTF_QUEUE_LISTm_OFFSET,i,(m._stats_intf_queue_list),1)
#define WRITE_STATS_INTF_QUEUE_LISTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,STATS_INTF_QUEUE_LISTm_BLKACC,5,0,p,STATS_INTF_QUEUE_LISTm_OFFSET,i,&(m._stats_intf_queue_list),1)

/*******************************************************************************
 * End of 'STATS_INTF_QUEUE_LISTm'
 */




/*******************************************************************************
 * REGISTER:  STATS_INTF_REPORT_EN
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access STATS_INTF_REPORT_EN.
 */
#define READ_STATS_INTF_REPORT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,STATS_INTF_REPORT_ENr_BLKACC,5,0,p,STATS_INTF_REPORT_ENr_OFFSET,0,(r._stats_intf_report_en),1)
#define WRITE_STATS_INTF_REPORT_ENr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,STATS_INTF_REPORT_ENr_BLKACC,5,0,p,STATS_INTF_REPORT_ENr_OFFSET,0,&(r._stats_intf_report_en),1)

/*******************************************************************************
 * End of 'STATS_INTF_REPORT_ENr'
 */




/*******************************************************************************
 * MEMORY:  STATS_INTF_SERVPOOL_LIST
 * BLOCKS:   MMU_GLB
 * SIZE:     4
 */
/*
 * These macros can be used to access STATS_INTF_SERVPOOL_LIST.
 */
#define READ_STATS_INTF_SERVPOOL_LISTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,STATS_INTF_SERVPOOL_LISTm_BLKACC,5,0,p,STATS_INTF_SERVPOOL_LISTm_OFFSET,i,(m._stats_intf_servpool_list),1)
#define WRITE_STATS_INTF_SERVPOOL_LISTm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,STATS_INTF_SERVPOOL_LISTm_BLKACC,5,0,p,STATS_INTF_SERVPOOL_LISTm_OFFSET,i,&(m._stats_intf_servpool_list),1)

/*******************************************************************************
 * End of 'STATS_INTF_SERVPOOL_LISTm'
 */




/*******************************************************************************
 * MEMORY:  STG_TAB
 * BLOCKS:   IPIPE
 * SIZE:     273
 */
/*
 * These macros can be used to access STG_TAB.
 */
#define READ_STG_TABm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(STG_TABm_BLKACC)+1,STG_TABm_OFFSET+i,(m._stg_tab),9)
#define WRITE_STG_TABm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(STG_TABm_BLKACC)+1,STG_TABm_OFFSET+i,&(m._stg_tab),9)

/*******************************************************************************
 * End of 'STG_TABm'
 */




/*******************************************************************************
 * REGISTER:  STORM_CONTROL_METER_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access STORM_CONTROL_METER_CONFIG.
 */
#define READ_STORM_CONTROL_METER_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_read(u,STORM_CONTROL_METER_CONFIGr_BLKACC,p,STORM_CONTROL_METER_CONFIGr_OFFSET,0,(r._storm_control_meter_config), 1)
#define WRITE_STORM_CONTROL_METER_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_write(u,STORM_CONTROL_METER_CONFIGr_BLKACC,p,STORM_CONTROL_METER_CONFIGr_OFFSET,0,&(r._storm_control_meter_config), 1)

/*******************************************************************************
 * End of 'STORM_CONTROL_METER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  STORM_CONTROL_METER_MAPPING
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access STORM_CONTROL_METER_MAPPING.
 */
#define READ_STORM_CONTROL_METER_MAPPINGr(u,r) bcmbd_cmicd_reg_block_read(u,STORM_CONTROL_METER_MAPPINGr_BLKACC,1,STORM_CONTROL_METER_MAPPINGr_OFFSET,0,(r._storm_control_meter_mapping), 1)
#define WRITE_STORM_CONTROL_METER_MAPPINGr(u,r) bcmbd_cmicd_reg_block_write(u,STORM_CONTROL_METER_MAPPINGr_BLKACC,1,STORM_CONTROL_METER_MAPPINGr_OFFSET,0,&(r._storm_control_meter_mapping), 1)

/*******************************************************************************
 * End of 'STORM_CONTROL_METER_MAPPINGr'
 */




/*******************************************************************************
 * REGISTER:  STORM_CONTROL_METER_RAM_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access STORM_CONTROL_METER_RAM_CONTROL.
 */
#define READ_STORM_CONTROL_METER_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,STORM_CONTROL_METER_RAM_CONTROLr_BLKACC,1,n,0,STORM_CONTROL_METER_RAM_CONTROLr_OFFSET,0,(r._storm_control_meter_ram_control),1)
#define WRITE_STORM_CONTROL_METER_RAM_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,STORM_CONTROL_METER_RAM_CONTROLr_BLKACC,1,n,0,STORM_CONTROL_METER_RAM_CONTROLr_OFFSET,0,&(r._storm_control_meter_ram_control),1)
#define WRITE_STORM_CONTROL_METER_RAM_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,STORM_CONTROL_METER_RAM_CONTROLr_BLKACC,1,-1,0,STORM_CONTROL_METER_RAM_CONTROLr_OFFSET,0,&(r._storm_control_meter_ram_control),1)

/*******************************************************************************
 * End of 'STORM_CONTROL_METER_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  SW1_RAM_DBGCTRL2_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW1_RAM_DBGCTRL2_64.
 */
#define READ_SW1_RAM_DBGCTRL2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW1_RAM_DBGCTRL2_64r_BLKACC,1,n,0,SW1_RAM_DBGCTRL2_64r_OFFSET,0,(r._sw1_ram_dbgctrl2_64),2)
#define WRITE_SW1_RAM_DBGCTRL2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW1_RAM_DBGCTRL2_64r_BLKACC,1,n,0,SW1_RAM_DBGCTRL2_64r_OFFSET,0,&(r._sw1_ram_dbgctrl2_64),2)
#define WRITE_SW1_RAM_DBGCTRL2_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW1_RAM_DBGCTRL2_64r_BLKACC,1,-1,0,SW1_RAM_DBGCTRL2_64r_OFFSET,0,&(r._sw1_ram_dbgctrl2_64),2)

/*******************************************************************************
 * End of 'SW1_RAM_DBGCTRL2_64r'
 */




/*******************************************************************************
 * REGISTER:  SW1_RAM_DBGCTRL_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW1_RAM_DBGCTRL_64.
 */
#define READ_SW1_RAM_DBGCTRL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW1_RAM_DBGCTRL_64r_BLKACC,1,n,0,SW1_RAM_DBGCTRL_64r_OFFSET,0,(r._sw1_ram_dbgctrl_64),2)
#define WRITE_SW1_RAM_DBGCTRL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW1_RAM_DBGCTRL_64r_BLKACC,1,n,0,SW1_RAM_DBGCTRL_64r_OFFSET,0,&(r._sw1_ram_dbgctrl_64),2)
#define WRITE_SW1_RAM_DBGCTRL_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW1_RAM_DBGCTRL_64r_BLKACC,1,-1,0,SW1_RAM_DBGCTRL_64r_OFFSET,0,&(r._sw1_ram_dbgctrl_64),2)

/*******************************************************************************
 * End of 'SW1_RAM_DBGCTRL_64r'
 */




/*******************************************************************************
 * REGISTER:  SW2_HW_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SW2_HW_CONTROL.
 */
#define READ_SW2_HW_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,SW2_HW_CONTROLr_BLKACC,1,SW2_HW_CONTROLr_OFFSET,0,(r._sw2_hw_control), 1)
#define WRITE_SW2_HW_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,SW2_HW_CONTROLr_BLKACC,1,SW2_HW_CONTROLr_OFFSET,0,&(r._sw2_hw_control), 1)

/*******************************************************************************
 * End of 'SW2_HW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  SW2_IFP_DST_ACTION_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SW2_IFP_DST_ACTION_CONTROL.
 */
#define READ_SW2_IFP_DST_ACTION_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,SW2_IFP_DST_ACTION_CONTROLr_BLKACC,1,SW2_IFP_DST_ACTION_CONTROLr_OFFSET,0,(r._sw2_ifp_dst_action_control), 1)
#define WRITE_SW2_IFP_DST_ACTION_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,SW2_IFP_DST_ACTION_CONTROLr_BLKACC,1,SW2_IFP_DST_ACTION_CONTROLr_OFFSET,0,&(r._sw2_ifp_dst_action_control), 1)

/*******************************************************************************
 * End of 'SW2_IFP_DST_ACTION_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  SW2_RAM_CONTROL_1_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW2_RAM_CONTROL_1_64.
 */
#define READ_SW2_RAM_CONTROL_1_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW2_RAM_CONTROL_1_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_1_64r_OFFSET,0,(r._sw2_ram_control_1_64),2)
#define WRITE_SW2_RAM_CONTROL_1_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_1_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_1_64r_OFFSET,0,&(r._sw2_ram_control_1_64),2)
#define WRITE_SW2_RAM_CONTROL_1_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_1_64r_BLKACC,1,-1,0,SW2_RAM_CONTROL_1_64r_OFFSET,0,&(r._sw2_ram_control_1_64),2)

/*******************************************************************************
 * End of 'SW2_RAM_CONTROL_1_64r'
 */




/*******************************************************************************
 * REGISTER:  SW2_RAM_CONTROL_2_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW2_RAM_CONTROL_2_64.
 */
#define READ_SW2_RAM_CONTROL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW2_RAM_CONTROL_2_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_2_64r_OFFSET,0,(r._sw2_ram_control_2_64),2)
#define WRITE_SW2_RAM_CONTROL_2_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_2_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_2_64r_OFFSET,0,&(r._sw2_ram_control_2_64),2)
#define WRITE_SW2_RAM_CONTROL_2_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_2_64r_BLKACC,1,-1,0,SW2_RAM_CONTROL_2_64r_OFFSET,0,&(r._sw2_ram_control_2_64),2)

/*******************************************************************************
 * End of 'SW2_RAM_CONTROL_2_64r'
 */




/*******************************************************************************
 * REGISTER:  SW2_RAM_CONTROL_3_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW2_RAM_CONTROL_3_64.
 */
#define READ_SW2_RAM_CONTROL_3_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW2_RAM_CONTROL_3_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_3_64r_OFFSET,0,(r._sw2_ram_control_3_64),2)
#define WRITE_SW2_RAM_CONTROL_3_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_3_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_3_64r_OFFSET,0,&(r._sw2_ram_control_3_64),2)
#define WRITE_SW2_RAM_CONTROL_3_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_3_64r_BLKACC,1,-1,0,SW2_RAM_CONTROL_3_64r_OFFSET,0,&(r._sw2_ram_control_3_64),2)

/*******************************************************************************
 * End of 'SW2_RAM_CONTROL_3_64r'
 */




/*******************************************************************************
 * REGISTER:  SW2_RAM_CONTROL_4_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW2_RAM_CONTROL_4_64.
 */
#define READ_SW2_RAM_CONTROL_4_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW2_RAM_CONTROL_4_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_4_64r_OFFSET,0,(r._sw2_ram_control_4_64),2)
#define WRITE_SW2_RAM_CONTROL_4_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_4_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_4_64r_OFFSET,0,&(r._sw2_ram_control_4_64),2)
#define WRITE_SW2_RAM_CONTROL_4_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_4_64r_BLKACC,1,-1,0,SW2_RAM_CONTROL_4_64r_OFFSET,0,&(r._sw2_ram_control_4_64),2)

/*******************************************************************************
 * End of 'SW2_RAM_CONTROL_4_64r'
 */




/*******************************************************************************
 * REGISTER:  SW2_RAM_CONTROL_5_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW2_RAM_CONTROL_5_64.
 */
#define READ_SW2_RAM_CONTROL_5_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW2_RAM_CONTROL_5_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_5_64r_OFFSET,0,(r._sw2_ram_control_5_64),2)
#define WRITE_SW2_RAM_CONTROL_5_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_5_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_5_64r_OFFSET,0,&(r._sw2_ram_control_5_64),2)
#define WRITE_SW2_RAM_CONTROL_5_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_5_64r_BLKACC,1,-1,0,SW2_RAM_CONTROL_5_64r_OFFSET,0,&(r._sw2_ram_control_5_64),2)

/*******************************************************************************
 * End of 'SW2_RAM_CONTROL_5_64r'
 */




/*******************************************************************************
 * REGISTER:  SW2_RAM_CONTROL_6_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW2_RAM_CONTROL_6_64.
 */
#define READ_SW2_RAM_CONTROL_6_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW2_RAM_CONTROL_6_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_6_64r_OFFSET,0,(r._sw2_ram_control_6_64),2)
#define WRITE_SW2_RAM_CONTROL_6_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_6_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_6_64r_OFFSET,0,&(r._sw2_ram_control_6_64),2)
#define WRITE_SW2_RAM_CONTROL_6_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_6_64r_BLKACC,1,-1,0,SW2_RAM_CONTROL_6_64r_OFFSET,0,&(r._sw2_ram_control_6_64),2)

/*******************************************************************************
 * End of 'SW2_RAM_CONTROL_6_64r'
 */




/*******************************************************************************
 * REGISTER:  SW2_RAM_CONTROL_7_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW2_RAM_CONTROL_7_64.
 */
#define READ_SW2_RAM_CONTROL_7_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW2_RAM_CONTROL_7_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_7_64r_OFFSET,0,(r._sw2_ram_control_7_64),2)
#define WRITE_SW2_RAM_CONTROL_7_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_7_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_7_64r_OFFSET,0,&(r._sw2_ram_control_7_64),2)
#define WRITE_SW2_RAM_CONTROL_7_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_7_64r_BLKACC,1,-1,0,SW2_RAM_CONTROL_7_64r_OFFSET,0,&(r._sw2_ram_control_7_64),2)

/*******************************************************************************
 * End of 'SW2_RAM_CONTROL_7_64r'
 */




/*******************************************************************************
 * REGISTER:  SW2_RAM_CONTROL_8_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW2_RAM_CONTROL_8_64.
 */
#define READ_SW2_RAM_CONTROL_8_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW2_RAM_CONTROL_8_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_8_64r_OFFSET,0,(r._sw2_ram_control_8_64),2)
#define WRITE_SW2_RAM_CONTROL_8_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_8_64r_BLKACC,1,n,0,SW2_RAM_CONTROL_8_64r_OFFSET,0,&(r._sw2_ram_control_8_64),2)
#define WRITE_SW2_RAM_CONTROL_8_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW2_RAM_CONTROL_8_64r_BLKACC,1,-1,0,SW2_RAM_CONTROL_8_64r_OFFSET,0,&(r._sw2_ram_control_8_64),2)

/*******************************************************************************
 * End of 'SW2_RAM_CONTROL_8_64r'
 */




/*******************************************************************************
 * REGISTER:  SW3_RAM_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW3_RAM_CONTROL_2.
 */
#define READ_SW3_RAM_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW3_RAM_CONTROL_2r_BLKACC,1,n,0,SW3_RAM_CONTROL_2r_OFFSET,0,(r._sw3_ram_control_2),2)
#define WRITE_SW3_RAM_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_2r_BLKACC,1,n,0,SW3_RAM_CONTROL_2r_OFFSET,0,&(r._sw3_ram_control_2),2)
#define WRITE_SW3_RAM_CONTROL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_2r_BLKACC,1,-1,0,SW3_RAM_CONTROL_2r_OFFSET,0,&(r._sw3_ram_control_2),2)

/*******************************************************************************
 * End of 'SW3_RAM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  SW3_RAM_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW3_RAM_CONTROL_3.
 */
#define READ_SW3_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW3_RAM_CONTROL_3r_BLKACC,1,n,0,SW3_RAM_CONTROL_3r_OFFSET,0,(r._sw3_ram_control_3),2)
#define WRITE_SW3_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_3r_BLKACC,1,n,0,SW3_RAM_CONTROL_3r_OFFSET,0,&(r._sw3_ram_control_3),2)
#define WRITE_SW3_RAM_CONTROL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_3r_BLKACC,1,-1,0,SW3_RAM_CONTROL_3r_OFFSET,0,&(r._sw3_ram_control_3),2)

/*******************************************************************************
 * End of 'SW3_RAM_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  SW3_RAM_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW3_RAM_CONTROL_4.
 */
#define READ_SW3_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW3_RAM_CONTROL_4r_BLKACC,1,n,0,SW3_RAM_CONTROL_4r_OFFSET,0,(r._sw3_ram_control_4),2)
#define WRITE_SW3_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_4r_BLKACC,1,n,0,SW3_RAM_CONTROL_4r_OFFSET,0,&(r._sw3_ram_control_4),2)
#define WRITE_SW3_RAM_CONTROL_4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_4r_BLKACC,1,-1,0,SW3_RAM_CONTROL_4r_OFFSET,0,&(r._sw3_ram_control_4),2)

/*******************************************************************************
 * End of 'SW3_RAM_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  SW3_RAM_CONTROL_5
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW3_RAM_CONTROL_5.
 */
#define READ_SW3_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW3_RAM_CONTROL_5r_BLKACC,1,n,0,SW3_RAM_CONTROL_5r_OFFSET,0,(r._sw3_ram_control_5),2)
#define WRITE_SW3_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_5r_BLKACC,1,n,0,SW3_RAM_CONTROL_5r_OFFSET,0,&(r._sw3_ram_control_5),2)
#define WRITE_SW3_RAM_CONTROL_5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_5r_BLKACC,1,-1,0,SW3_RAM_CONTROL_5r_OFFSET,0,&(r._sw3_ram_control_5),2)

/*******************************************************************************
 * End of 'SW3_RAM_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  SW3_RAM_CONTROL_6
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW3_RAM_CONTROL_6.
 */
#define READ_SW3_RAM_CONTROL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW3_RAM_CONTROL_6r_BLKACC,1,n,0,SW3_RAM_CONTROL_6r_OFFSET,0,(r._sw3_ram_control_6),2)
#define WRITE_SW3_RAM_CONTROL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_6r_BLKACC,1,n,0,SW3_RAM_CONTROL_6r_OFFSET,0,&(r._sw3_ram_control_6),2)
#define WRITE_SW3_RAM_CONTROL_6r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_6r_BLKACC,1,-1,0,SW3_RAM_CONTROL_6r_OFFSET,0,&(r._sw3_ram_control_6),2)

/*******************************************************************************
 * End of 'SW3_RAM_CONTROL_6r'
 */




/*******************************************************************************
 * REGISTER:  SW3_RAM_CONTROL_7
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access SW3_RAM_CONTROL_7.
 */
#define READ_SW3_RAM_CONTROL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,SW3_RAM_CONTROL_7r_BLKACC,1,n,0,SW3_RAM_CONTROL_7r_OFFSET,0,(r._sw3_ram_control_7),2)
#define WRITE_SW3_RAM_CONTROL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_7r_BLKACC,1,n,0,SW3_RAM_CONTROL_7r_OFFSET,0,&(r._sw3_ram_control_7),2)
#define WRITE_SW3_RAM_CONTROL_7r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,SW3_RAM_CONTROL_7r_BLKACC,1,-1,0,SW3_RAM_CONTROL_7r_OFFSET,0,&(r._sw3_ram_control_7),2)

/*******************************************************************************
 * End of 'SW3_RAM_CONTROL_7r'
 */




/*******************************************************************************
 * MEMORY:  SYSTEM_CONFIG_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     5
 */
/*
 * These macros can be used to access SYSTEM_CONFIG_TABLE.
 */
#define READ_SYSTEM_CONFIG_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SYSTEM_CONFIG_TABLEm_BLKACC)+1,SYSTEM_CONFIG_TABLEm_OFFSET+i,(m._system_config_table),1)
#define WRITE_SYSTEM_CONFIG_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SYSTEM_CONFIG_TABLEm_BLKACC)+1,SYSTEM_CONFIG_TABLEm_OFFSET+i,&(m._system_config_table),1)

/*******************************************************************************
 * End of 'SYSTEM_CONFIG_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  SYSTEM_CONFIG_TABLE_MODBASE
 * BLOCKS:   IPIPE
 * SIZE:     15
 */
/*
 * These macros can be used to access SYSTEM_CONFIG_TABLE_MODBASE.
 */
#define READ_SYSTEM_CONFIG_TABLE_MODBASEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SYSTEM_CONFIG_TABLE_MODBASEm_BLKACC)+1,SYSTEM_CONFIG_TABLE_MODBASEm_OFFSET+i,(m._system_config_table_modbase),1)
#define WRITE_SYSTEM_CONFIG_TABLE_MODBASEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SYSTEM_CONFIG_TABLE_MODBASEm_BLKACC)+1,SYSTEM_CONFIG_TABLE_MODBASEm_OFFSET+i,&(m._system_config_table_modbase),1)

/*******************************************************************************
 * End of 'SYSTEM_CONFIG_TABLE_MODBASEm'
 */




/*******************************************************************************
 * REGISTER:  SYS_CONTROL
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access SYS_CONTROL.
 */
#define READ_SYS_CONTROLr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,SYS_CONTROLr_BLKACC,3,0,p,SYS_CONTROLr_OFFSET,0,(r._sys_control),1)
#define WRITE_SYS_CONTROLr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,SYS_CONTROLr_BLKACC,3,0,p,SYS_CONTROLr_OFFSET,0,&(r._sys_control),1)

/*******************************************************************************
 * End of 'SYS_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  SYS_PORTMAP
 * BLOCKS:   IPIPE
 * SIZE:     8
 */
/*
 * These macros can be used to access SYS_PORTMAP.
 */
#define READ_SYS_PORTMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(SYS_PORTMAPm_BLKACC)+1,SYS_PORTMAPm_OFFSET+i,(m._sys_portmap),1)
#define WRITE_SYS_PORTMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(SYS_PORTMAPm_BLKACC)+1,SYS_PORTMAPm_OFFSET+i,&(m._sys_portmap),1)

/*******************************************************************************
 * End of 'SYS_PORTMAPm'
 */




/*******************************************************************************
 * REGISTER:  T1023
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T1023.
 */
#define READ_T1023r(u,p,r) bcmbd_cmicd_reg_port_read(u,T1023r_BLKACC,p,T1023r_OFFSET,0,(r._t1023), 2)
#define WRITE_T1023r(u,p,r) bcmbd_cmicd_reg_port_write(u,T1023r_BLKACC,p,T1023r_OFFSET,0,&(r._t1023), 2)

/*******************************************************************************
 * End of 'T1023r'
 */




/*******************************************************************************
 * REGISTER:  T127
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T127.
 */
#define READ_T127r(u,p,r) bcmbd_cmicd_reg_port_read(u,T127r_BLKACC,p,T127r_OFFSET,0,(r._t127), 2)
#define WRITE_T127r(u,p,r) bcmbd_cmicd_reg_port_write(u,T127r_BLKACC,p,T127r_OFFSET,0,&(r._t127), 2)

/*******************************************************************************
 * End of 'T127r'
 */




/*******************************************************************************
 * REGISTER:  T1518
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T1518.
 */
#define READ_T1518r(u,p,r) bcmbd_cmicd_reg_port_read(u,T1518r_BLKACC,p,T1518r_OFFSET,0,(r._t1518), 2)
#define WRITE_T1518r(u,p,r) bcmbd_cmicd_reg_port_write(u,T1518r_BLKACC,p,T1518r_OFFSET,0,&(r._t1518), 2)

/*******************************************************************************
 * End of 'T1518r'
 */




/*******************************************************************************
 * REGISTER:  T16383
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T16383.
 */
#define READ_T16383r(u,p,r) bcmbd_cmicd_reg_port_read(u,T16383r_BLKACC,p,T16383r_OFFSET,0,(r._t16383), 2)
#define WRITE_T16383r(u,p,r) bcmbd_cmicd_reg_port_write(u,T16383r_BLKACC,p,T16383r_OFFSET,0,&(r._t16383), 2)

/*******************************************************************************
 * End of 'T16383r'
 */




/*******************************************************************************
 * REGISTER:  T2047
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T2047.
 */
#define READ_T2047r(u,p,r) bcmbd_cmicd_reg_port_read(u,T2047r_BLKACC,p,T2047r_OFFSET,0,(r._t2047), 2)
#define WRITE_T2047r(u,p,r) bcmbd_cmicd_reg_port_write(u,T2047r_BLKACC,p,T2047r_OFFSET,0,&(r._t2047), 2)

/*******************************************************************************
 * End of 'T2047r'
 */




/*******************************************************************************
 * REGISTER:  T255
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T255.
 */
#define READ_T255r(u,p,r) bcmbd_cmicd_reg_port_read(u,T255r_BLKACC,p,T255r_OFFSET,0,(r._t255), 2)
#define WRITE_T255r(u,p,r) bcmbd_cmicd_reg_port_write(u,T255r_BLKACC,p,T255r_OFFSET,0,&(r._t255), 2)

/*******************************************************************************
 * End of 'T255r'
 */




/*******************************************************************************
 * REGISTER:  T4095
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T4095.
 */
#define READ_T4095r(u,p,r) bcmbd_cmicd_reg_port_read(u,T4095r_BLKACC,p,T4095r_OFFSET,0,(r._t4095), 2)
#define WRITE_T4095r(u,p,r) bcmbd_cmicd_reg_port_write(u,T4095r_BLKACC,p,T4095r_OFFSET,0,&(r._t4095), 2)

/*******************************************************************************
 * End of 'T4095r'
 */




/*******************************************************************************
 * REGISTER:  T511
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T511.
 */
#define READ_T511r(u,p,r) bcmbd_cmicd_reg_port_read(u,T511r_BLKACC,p,T511r_OFFSET,0,(r._t511), 2)
#define WRITE_T511r(u,p,r) bcmbd_cmicd_reg_port_write(u,T511r_BLKACC,p,T511r_OFFSET,0,&(r._t511), 2)

/*******************************************************************************
 * End of 'T511r'
 */




/*******************************************************************************
 * REGISTER:  T64
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T64.
 */
#define READ_T64r(u,p,r) bcmbd_cmicd_reg_port_read(u,T64r_BLKACC,p,T64r_OFFSET,0,(r._t64), 2)
#define WRITE_T64r(u,p,r) bcmbd_cmicd_reg_port_write(u,T64r_BLKACC,p,T64r_OFFSET,0,&(r._t64), 2)

/*******************************************************************************
 * End of 'T64r'
 */




/*******************************************************************************
 * REGISTER:  T9216
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access T9216.
 */
#define READ_T9216r(u,p,r) bcmbd_cmicd_reg_port_read(u,T9216r_BLKACC,p,T9216r_OFFSET,0,(r._t9216), 2)
#define WRITE_T9216r(u,p,r) bcmbd_cmicd_reg_port_write(u,T9216r_BLKACC,p,T9216r_OFFSET,0,&(r._t9216), 2)

/*******************************************************************************
 * End of 'T9216r'
 */




/*******************************************************************************
 * REGISTER:  TBCA
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TBCA.
 */
#define READ_TBCAr(u,p,r) bcmbd_cmicd_reg_port_read(u,TBCAr_BLKACC,p,TBCAr_OFFSET,0,(r._tbca), 2)
#define WRITE_TBCAr(u,p,r) bcmbd_cmicd_reg_port_write(u,TBCAr_BLKACC,p,TBCAr_OFFSET,0,&(r._tbca), 2)

/*******************************************************************************
 * End of 'TBCAr'
 */




/*******************************************************************************
 * REGISTER:  TBYT
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TBYT.
 */
#define READ_TBYTr(u,p,r) bcmbd_cmicd_reg_port_read(u,TBYTr_BLKACC,p,TBYTr_OFFSET,0,(r._tbyt), 2)
#define WRITE_TBYTr(u,p,r) bcmbd_cmicd_reg_port_write(u,TBYTr_BLKACC,p,TBYTr_OFFSET,0,&(r._tbyt), 2)

/*******************************************************************************
 * End of 'TBYTr'
 */




/*******************************************************************************
 * MEMORY:  TCP_FN
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access TCP_FN.
 */
#define READ_TCP_FNm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,TCP_FNm_BLKACC,1,n,0,TCP_FNm_OFFSET,i,(m._tcp_fn),1)
#define WRITE_TCP_FNm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,TCP_FNm_BLKACC,1,n,0,TCP_FNm_OFFSET,i,&(m._tcp_fn),1)
#define WRITE_TCP_FNm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,TCP_FNm_BLKACC,1,-1,0,TCP_FNm_OFFSET,i,&(m._tcp_fn),1)

/*******************************************************************************
 * End of 'TCP_FNm'
 */




/*******************************************************************************
 * REGISTER:  TCP_FN_RAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TCP_FN_RAM_DBGCTRL.
 */
#define READ_TCP_FN_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,TCP_FN_RAM_DBGCTRLr_BLKACC,1,n,0,TCP_FN_RAM_DBGCTRLr_OFFSET,0,(r._tcp_fn_ram_dbgctrl),1)
#define WRITE_TCP_FN_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,TCP_FN_RAM_DBGCTRLr_BLKACC,1,n,0,TCP_FN_RAM_DBGCTRLr_OFFSET,0,&(r._tcp_fn_ram_dbgctrl),1)
#define WRITE_TCP_FN_RAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,TCP_FN_RAM_DBGCTRLr_BLKACC,1,-1,0,TCP_FN_RAM_DBGCTRLr_OFFSET,0,&(r._tcp_fn_ram_dbgctrl),1)

/*******************************************************************************
 * End of 'TCP_FN_RAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC.
 */
#define READ_TDBGCr(u,p,i,r) bcmbd_cmicd_reg_port_read(u,TDBGCr_BLKACC,p,TDBGCr_OFFSET,i,(r._tdbgc), 2)
#define WRITE_TDBGCr(u,p,i,r) bcmbd_cmicd_reg_port_write(u,TDBGCr_BLKACC,p,TDBGCr_OFFSET,i,&(r._tdbgc), 2)

/*******************************************************************************
 * End of 'TDBGCr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC0
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC0.
 */
#define READ_TDBGC0r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC0r_BLKACC,p,TDBGC0r_OFFSET,0,(r._tdbgc0), 2)
#define WRITE_TDBGC0r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC0r_BLKACC,p,TDBGC0r_OFFSET,0,&(r._tdbgc0), 2)

/*******************************************************************************
 * End of 'TDBGC0r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC0_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC0_SELECT.
 */
#define READ_TDBGC0_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC0_SELECTr_BLKACC,2,TDBGC0_SELECTr_OFFSET,0,(r._tdbgc0_select), 1)
#define WRITE_TDBGC0_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC0_SELECTr_BLKACC,2,TDBGC0_SELECTr_OFFSET,0,&(r._tdbgc0_select), 1)

/*******************************************************************************
 * End of 'TDBGC0_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC1
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC1.
 */
#define READ_TDBGC1r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC1r_BLKACC,p,TDBGC1r_OFFSET,0,(r._tdbgc1), 2)
#define WRITE_TDBGC1r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC1r_BLKACC,p,TDBGC1r_OFFSET,0,&(r._tdbgc1), 2)

/*******************************************************************************
 * End of 'TDBGC1r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC10
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC10.
 */
#define READ_TDBGC10r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC10r_BLKACC,p,TDBGC10r_OFFSET,0,(r._tdbgc10), 2)
#define WRITE_TDBGC10r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC10r_BLKACC,p,TDBGC10r_OFFSET,0,&(r._tdbgc10), 2)

/*******************************************************************************
 * End of 'TDBGC10r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC10_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC10_SELECT.
 */
#define READ_TDBGC10_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC10_SELECTr_BLKACC,2,TDBGC10_SELECTr_OFFSET,0,(r._tdbgc10_select), 1)
#define WRITE_TDBGC10_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC10_SELECTr_BLKACC,2,TDBGC10_SELECTr_OFFSET,0,&(r._tdbgc10_select), 1)

/*******************************************************************************
 * End of 'TDBGC10_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC11
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC11.
 */
#define READ_TDBGC11r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC11r_BLKACC,p,TDBGC11r_OFFSET,0,(r._tdbgc11), 2)
#define WRITE_TDBGC11r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC11r_BLKACC,p,TDBGC11r_OFFSET,0,&(r._tdbgc11), 2)

/*******************************************************************************
 * End of 'TDBGC11r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC11_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC11_SELECT.
 */
#define READ_TDBGC11_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC11_SELECTr_BLKACC,2,TDBGC11_SELECTr_OFFSET,0,(r._tdbgc11_select), 1)
#define WRITE_TDBGC11_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC11_SELECTr_BLKACC,2,TDBGC11_SELECTr_OFFSET,0,&(r._tdbgc11_select), 1)

/*******************************************************************************
 * End of 'TDBGC11_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC1_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC1_SELECT.
 */
#define READ_TDBGC1_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC1_SELECTr_BLKACC,2,TDBGC1_SELECTr_OFFSET,0,(r._tdbgc1_select), 1)
#define WRITE_TDBGC1_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC1_SELECTr_BLKACC,2,TDBGC1_SELECTr_OFFSET,0,&(r._tdbgc1_select), 1)

/*******************************************************************************
 * End of 'TDBGC1_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC2
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC2.
 */
#define READ_TDBGC2r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC2r_BLKACC,p,TDBGC2r_OFFSET,0,(r._tdbgc2), 2)
#define WRITE_TDBGC2r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC2r_BLKACC,p,TDBGC2r_OFFSET,0,&(r._tdbgc2), 2)

/*******************************************************************************
 * End of 'TDBGC2r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC2_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC2_SELECT.
 */
#define READ_TDBGC2_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC2_SELECTr_BLKACC,2,TDBGC2_SELECTr_OFFSET,0,(r._tdbgc2_select), 1)
#define WRITE_TDBGC2_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC2_SELECTr_BLKACC,2,TDBGC2_SELECTr_OFFSET,0,&(r._tdbgc2_select), 1)

/*******************************************************************************
 * End of 'TDBGC2_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC3
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC3.
 */
#define READ_TDBGC3r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC3r_BLKACC,p,TDBGC3r_OFFSET,0,(r._tdbgc3), 2)
#define WRITE_TDBGC3r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC3r_BLKACC,p,TDBGC3r_OFFSET,0,&(r._tdbgc3), 2)

/*******************************************************************************
 * End of 'TDBGC3r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC3_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC3_SELECT.
 */
#define READ_TDBGC3_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC3_SELECTr_BLKACC,2,TDBGC3_SELECTr_OFFSET,0,(r._tdbgc3_select), 1)
#define WRITE_TDBGC3_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC3_SELECTr_BLKACC,2,TDBGC3_SELECTr_OFFSET,0,&(r._tdbgc3_select), 1)

/*******************************************************************************
 * End of 'TDBGC3_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC4
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC4.
 */
#define READ_TDBGC4r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC4r_BLKACC,p,TDBGC4r_OFFSET,0,(r._tdbgc4), 2)
#define WRITE_TDBGC4r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC4r_BLKACC,p,TDBGC4r_OFFSET,0,&(r._tdbgc4), 2)

/*******************************************************************************
 * End of 'TDBGC4r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC4_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC4_SELECT.
 */
#define READ_TDBGC4_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC4_SELECTr_BLKACC,2,TDBGC4_SELECTr_OFFSET,0,(r._tdbgc4_select), 1)
#define WRITE_TDBGC4_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC4_SELECTr_BLKACC,2,TDBGC4_SELECTr_OFFSET,0,&(r._tdbgc4_select), 1)

/*******************************************************************************
 * End of 'TDBGC4_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC5
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC5.
 */
#define READ_TDBGC5r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC5r_BLKACC,p,TDBGC5r_OFFSET,0,(r._tdbgc5), 2)
#define WRITE_TDBGC5r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC5r_BLKACC,p,TDBGC5r_OFFSET,0,&(r._tdbgc5), 2)

/*******************************************************************************
 * End of 'TDBGC5r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC5_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC5_SELECT.
 */
#define READ_TDBGC5_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC5_SELECTr_BLKACC,2,TDBGC5_SELECTr_OFFSET,0,(r._tdbgc5_select), 1)
#define WRITE_TDBGC5_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC5_SELECTr_BLKACC,2,TDBGC5_SELECTr_OFFSET,0,&(r._tdbgc5_select), 1)

/*******************************************************************************
 * End of 'TDBGC5_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC6
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC6.
 */
#define READ_TDBGC6r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC6r_BLKACC,p,TDBGC6r_OFFSET,0,(r._tdbgc6), 2)
#define WRITE_TDBGC6r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC6r_BLKACC,p,TDBGC6r_OFFSET,0,&(r._tdbgc6), 2)

/*******************************************************************************
 * End of 'TDBGC6r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC6_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC6_SELECT.
 */
#define READ_TDBGC6_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC6_SELECTr_BLKACC,2,TDBGC6_SELECTr_OFFSET,0,(r._tdbgc6_select), 1)
#define WRITE_TDBGC6_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC6_SELECTr_BLKACC,2,TDBGC6_SELECTr_OFFSET,0,&(r._tdbgc6_select), 1)

/*******************************************************************************
 * End of 'TDBGC6_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC7
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC7.
 */
#define READ_TDBGC7r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC7r_BLKACC,p,TDBGC7r_OFFSET,0,(r._tdbgc7), 2)
#define WRITE_TDBGC7r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC7r_BLKACC,p,TDBGC7r_OFFSET,0,&(r._tdbgc7), 2)

/*******************************************************************************
 * End of 'TDBGC7r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC7_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC7_SELECT.
 */
#define READ_TDBGC7_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC7_SELECTr_BLKACC,2,TDBGC7_SELECTr_OFFSET,0,(r._tdbgc7_select), 1)
#define WRITE_TDBGC7_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC7_SELECTr_BLKACC,2,TDBGC7_SELECTr_OFFSET,0,&(r._tdbgc7_select), 1)

/*******************************************************************************
 * End of 'TDBGC7_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC8
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC8.
 */
#define READ_TDBGC8r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC8r_BLKACC,p,TDBGC8r_OFFSET,0,(r._tdbgc8), 2)
#define WRITE_TDBGC8r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC8r_BLKACC,p,TDBGC8r_OFFSET,0,&(r._tdbgc8), 2)

/*******************************************************************************
 * End of 'TDBGC8r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC8_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC8_SELECT.
 */
#define READ_TDBGC8_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC8_SELECTr_BLKACC,2,TDBGC8_SELECTr_OFFSET,0,(r._tdbgc8_select), 1)
#define WRITE_TDBGC8_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC8_SELECTr_BLKACC,2,TDBGC8_SELECTr_OFFSET,0,&(r._tdbgc8_select), 1)

/*******************************************************************************
 * End of 'TDBGC8_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC9
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TDBGC9.
 */
#define READ_TDBGC9r(u,p,r) bcmbd_cmicd_reg_port_read(u,TDBGC9r_BLKACC,p,TDBGC9r_OFFSET,0,(r._tdbgc9), 2)
#define WRITE_TDBGC9r(u,p,r) bcmbd_cmicd_reg_port_write(u,TDBGC9r_BLKACC,p,TDBGC9r_OFFSET,0,&(r._tdbgc9), 2)

/*******************************************************************************
 * End of 'TDBGC9r'
 */




/*******************************************************************************
 * REGISTER:  TDBGC9_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC9_SELECT.
 */
#define READ_TDBGC9_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TDBGC9_SELECTr_BLKACC,2,TDBGC9_SELECTr_OFFSET,0,(r._tdbgc9_select), 1)
#define WRITE_TDBGC9_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TDBGC9_SELECTr_BLKACC,2,TDBGC9_SELECTr_OFFSET,0,&(r._tdbgc9_select), 1)

/*******************************************************************************
 * End of 'TDBGC9_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC_SELECT
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC_SELECT.
 */
#define READ_TDBGC_SELECTr(u,i,r) bcmbd_cmicd_reg_block_read(u,TDBGC_SELECTr_BLKACC,2,TDBGC_SELECTr_OFFSET,i,(r._tdbgc_select), 1)
#define WRITE_TDBGC_SELECTr(u,i,r) bcmbd_cmicd_reg_block_write(u,TDBGC_SELECTr_BLKACC,2,TDBGC_SELECTr_OFFSET,i,&(r._tdbgc_select), 1)

/*******************************************************************************
 * End of 'TDBGC_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TDBGC_SELECT_2
 * BLOCKS:   EPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TDBGC_SELECT_2.
 */
#define READ_TDBGC_SELECT_2r(u,i,r) bcmbd_cmicd_reg_block_read(u,TDBGC_SELECT_2r_BLKACC,2,TDBGC_SELECT_2r_OFFSET,i,(r._tdbgc_select_2), 1)
#define WRITE_TDBGC_SELECT_2r(u,i,r) bcmbd_cmicd_reg_block_write(u,TDBGC_SELECT_2r_BLKACC,2,TDBGC_SELECT_2r_OFFSET,i,&(r._tdbgc_select_2), 1)

/*******************************************************************************
 * End of 'TDBGC_SELECT_2r'
 */




/*******************************************************************************
 * REGISTER:  TDFR
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TDFR.
 */
#define READ_TDFRr(u,p,r) bcmbd_cmicd_reg_port_read(u,TDFRr_BLKACC,p,TDFRr_OFFSET,0,(r._tdfr), 2)
#define WRITE_TDFRr(u,p,r) bcmbd_cmicd_reg_port_write(u,TDFRr_BLKACC,p,TDFRr_OFFSET,0,&(r._tdfr), 2)

/*******************************************************************************
 * End of 'TDFRr'
 */




/*******************************************************************************
 * MEMORY:  TDM_CALENDAR0
 * BLOCKS:   MMU_SC
 * SIZE:     27
 */
/*
 * These macros can be used to access TDM_CALENDAR0.
 */
#define READ_TDM_CALENDAR0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,TDM_CALENDAR0m_BLKACC,4,0,p,TDM_CALENDAR0m_OFFSET,i,(m._tdm_calendar0),1)
#define WRITE_TDM_CALENDAR0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,TDM_CALENDAR0m_BLKACC,4,0,p,TDM_CALENDAR0m_OFFSET,i,&(m._tdm_calendar0),1)

/*******************************************************************************
 * End of 'TDM_CALENDAR0m'
 */




/*******************************************************************************
 * MEMORY:  TDM_CALENDAR1
 * BLOCKS:   MMU_SC
 * SIZE:     27
 */
/*
 * These macros can be used to access TDM_CALENDAR1.
 */
#define READ_TDM_CALENDAR1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,TDM_CALENDAR1m_BLKACC,4,0,p,TDM_CALENDAR1m_OFFSET,i,(m._tdm_calendar1),1)
#define WRITE_TDM_CALENDAR1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,TDM_CALENDAR1m_BLKACC,4,0,p,TDM_CALENDAR1m_OFFSET,i,&(m._tdm_calendar1),1)

/*******************************************************************************
 * End of 'TDM_CALENDAR1m'
 */




/*******************************************************************************
 * REGISTER:  TDM_CONFIG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TDM_CONFIG.
 */
#define READ_TDM_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TDM_CONFIGr_BLKACC,4,0,p,TDM_CONFIGr_OFFSET,0,(r._tdm_config),1)
#define WRITE_TDM_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TDM_CONFIGr_BLKACC,4,0,p,TDM_CONFIGr_OFFSET,0,&(r._tdm_config),1)

/*******************************************************************************
 * End of 'TDM_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  TDM_DFT_REG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TDM_DFT_REG.
 */
#define READ_TDM_DFT_REGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TDM_DFT_REGr_BLKACC,4,0,p,TDM_DFT_REGr_OFFSET,0,(r._tdm_dft_reg),1)
#define WRITE_TDM_DFT_REGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TDM_DFT_REGr_BLKACC,4,0,p,TDM_DFT_REGr_OFFSET,0,&(r._tdm_dft_reg),1)

/*******************************************************************************
 * End of 'TDM_DFT_REGr'
 */




/*******************************************************************************
 * REGISTER:  TDM_EN_COR_ERR_RPT
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TDM_EN_COR_ERR_RPT.
 */
#define READ_TDM_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TDM_EN_COR_ERR_RPTr_BLKACC,4,0,p,TDM_EN_COR_ERR_RPTr_OFFSET,0,(r._tdm_en_cor_err_rpt),1)
#define WRITE_TDM_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TDM_EN_COR_ERR_RPTr_BLKACC,4,0,p,TDM_EN_COR_ERR_RPTr_OFFSET,0,&(r._tdm_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'TDM_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  TDM_HSP
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TDM_HSP.
 */
#define READ_TDM_HSPr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TDM_HSPr_BLKACC,4,0,p,TDM_HSPr_OFFSET,0,(r._tdm_hsp),1)
#define WRITE_TDM_HSPr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TDM_HSPr_BLKACC,4,0,p,TDM_HSPr_OFFSET,0,&(r._tdm_hsp),1)

/*******************************************************************************
 * End of 'TDM_HSPr'
 */




/*******************************************************************************
 * REGISTER:  TDVLN
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TDVLN.
 */
#define READ_TDVLNr(u,p,r) bcmbd_cmicd_reg_port_read(u,TDVLNr_BLKACC,p,TDVLNr_OFFSET,0,(r._tdvln), 2)
#define WRITE_TDVLNr(u,p,r) bcmbd_cmicd_reg_port_write(u,TDVLNr_BLKACC,p,TDVLNr_OFFSET,0,&(r._tdvln), 2)

/*******************************************************************************
 * End of 'TDVLNr'
 */




/*******************************************************************************
 * REGISTER:  TEDF
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TEDF.
 */
#define READ_TEDFr(u,p,r) bcmbd_cmicd_reg_port_read(u,TEDFr_BLKACC,p,TEDFr_OFFSET,0,(r._tedf), 2)
#define WRITE_TEDFr(u,p,r) bcmbd_cmicd_reg_port_write(u,TEDFr_BLKACC,p,TEDFr_OFFSET,0,&(r._tedf), 2)

/*******************************************************************************
 * End of 'TEDFr'
 */




/*******************************************************************************
 * REGISTER:  TERR
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TERR.
 */
#define READ_TERRr(u,p,r) bcmbd_cmicd_reg_port_read(u,TERRr_BLKACC,p,TERRr_OFFSET,0,(r._terr), 2)
#define WRITE_TERRr(u,p,r) bcmbd_cmicd_reg_port_write(u,TERRr_BLKACC,p,TERRr_OFFSET,0,&(r._terr), 2)

/*******************************************************************************
 * End of 'TERRr'
 */




/*******************************************************************************
 * REGISTER:  TFCS
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TFCS.
 */
#define READ_TFCSr(u,p,r) bcmbd_cmicd_reg_port_read(u,TFCSr_BLKACC,p,TFCSr_OFFSET,0,(r._tfcs), 2)
#define WRITE_TFCSr(u,p,r) bcmbd_cmicd_reg_port_write(u,TFCSr_BLKACC,p,TFCSr_OFFSET,0,&(r._tfcs), 2)

/*******************************************************************************
 * End of 'TFCSr'
 */




/*******************************************************************************
 * REGISTER:  TFRG
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TFRG.
 */
#define READ_TFRGr(u,p,r) bcmbd_cmicd_reg_port_read(u,TFRGr_BLKACC,p,TFRGr_OFFSET,0,(r._tfrg), 2)
#define WRITE_TFRGr(u,p,r) bcmbd_cmicd_reg_port_write(u,TFRGr_BLKACC,p,TFRGr_OFFSET,0,&(r._tfrg), 2)

/*******************************************************************************
 * End of 'TFRGr'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_PG_HDRM_PROFILE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_PG_HDRM_PROFILE.
 */
#define READ_THDI_BST_PG_HDRM_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_PG_HDRM_PROFILEr_BLKACC,3,n,p,THDI_BST_PG_HDRM_PROFILEr_OFFSET,i,(r._thdi_bst_pg_hdrm_profile),1)
#define WRITE_THDI_BST_PG_HDRM_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_PG_HDRM_PROFILEr_BLKACC,3,n,p,THDI_BST_PG_HDRM_PROFILEr_OFFSET,i,&(r._thdi_bst_pg_hdrm_profile),1)
#define WRITE_THDI_BST_PG_HDRM_PROFILEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_PG_HDRM_PROFILEr_BLKACC,3,-1,p,THDI_BST_PG_HDRM_PROFILEr_OFFSET,i,&(r._thdi_bst_pg_hdrm_profile),1)

/*******************************************************************************
 * End of 'THDI_BST_PG_HDRM_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_PG_SHARED_PROFILE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_PG_SHARED_PROFILE.
 */
#define READ_THDI_BST_PG_SHARED_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_PG_SHARED_PROFILEr_BLKACC,3,n,p,THDI_BST_PG_SHARED_PROFILEr_OFFSET,i,(r._thdi_bst_pg_shared_profile),1)
#define WRITE_THDI_BST_PG_SHARED_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_PG_SHARED_PROFILEr_BLKACC,3,n,p,THDI_BST_PG_SHARED_PROFILEr_OFFSET,i,&(r._thdi_bst_pg_shared_profile),1)
#define WRITE_THDI_BST_PG_SHARED_PROFILEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_PG_SHARED_PROFILEr_BLKACC,3,-1,p,THDI_BST_PG_SHARED_PROFILEr_OFFSET,i,&(r._thdi_bst_pg_shared_profile),1)

/*******************************************************************************
 * End of 'THDI_BST_PG_SHARED_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_SP_GLOBAL_SHARED_CNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_SP_GLOBAL_SHARED_CNT.
 */
#define READ_THDI_BST_SP_GLOBAL_SHARED_CNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_SP_GLOBAL_SHARED_CNTr_BLKACC,3,0,p,THDI_BST_SP_GLOBAL_SHARED_CNTr_OFFSET,i,(r._thdi_bst_sp_global_shared_cnt),1)
#define WRITE_THDI_BST_SP_GLOBAL_SHARED_CNTr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_SP_GLOBAL_SHARED_CNTr_BLKACC,3,0,p,THDI_BST_SP_GLOBAL_SHARED_CNTr_OFFSET,i,&(r._thdi_bst_sp_global_shared_cnt),1)

/*******************************************************************************
 * End of 'THDI_BST_SP_GLOBAL_SHARED_CNTr'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_SP_GLOBAL_SHARED_PROFILE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_SP_GLOBAL_SHARED_PROFILE.
 */
#define READ_THDI_BST_SP_GLOBAL_SHARED_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_SP_GLOBAL_SHARED_PROFILEr_BLKACC,3,n,p,THDI_BST_SP_GLOBAL_SHARED_PROFILEr_OFFSET,i,(r._thdi_bst_sp_global_shared_profile),1)
#define WRITE_THDI_BST_SP_GLOBAL_SHARED_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_SP_GLOBAL_SHARED_PROFILEr_BLKACC,3,n,p,THDI_BST_SP_GLOBAL_SHARED_PROFILEr_OFFSET,i,&(r._thdi_bst_sp_global_shared_profile),1)
#define WRITE_THDI_BST_SP_GLOBAL_SHARED_PROFILEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_SP_GLOBAL_SHARED_PROFILEr_BLKACC,3,-1,p,THDI_BST_SP_GLOBAL_SHARED_PROFILEr_OFFSET,i,&(r._thdi_bst_sp_global_shared_profile),1)

/*******************************************************************************
 * End of 'THDI_BST_SP_GLOBAL_SHARED_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_SP_SHARED_PROFILE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_SP_SHARED_PROFILE.
 */
#define READ_THDI_BST_SP_SHARED_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_SP_SHARED_PROFILEr_BLKACC,3,n,p,THDI_BST_SP_SHARED_PROFILEr_OFFSET,i,(r._thdi_bst_sp_shared_profile),1)
#define WRITE_THDI_BST_SP_SHARED_PROFILEr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_SP_SHARED_PROFILEr_BLKACC,3,n,p,THDI_BST_SP_SHARED_PROFILEr_OFFSET,i,&(r._thdi_bst_sp_shared_profile),1)
#define WRITE_THDI_BST_SP_SHARED_PROFILEr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_SP_SHARED_PROFILEr_BLKACC,3,-1,p,THDI_BST_SP_SHARED_PROFILEr_OFFSET,i,&(r._thdi_bst_sp_shared_profile),1)

/*******************************************************************************
 * End of 'THDI_BST_SP_SHARED_PROFILEr'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32r(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32r_BLKACC,3,n,p,THDI_BST_TRIGGER_STATUS_32r_OFFSET,0,(r._thdi_bst_trigger_status_32),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32r(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32r_BLKACC,3,n,p,THDI_BST_TRIGGER_STATUS_32r_OFFSET,0,&(r._thdi_bst_trigger_status_32),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32r_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32r_BLKACC,3,-1,p,THDI_BST_TRIGGER_STATUS_32r_OFFSET,0,&(r._thdi_bst_trigger_status_32),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE0r_OFFSET,0,(r._thdi_bst_trigger_status_32_mmu_xpe0_ipipe0),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE0r_OFFSET,0,&(r._thdi_bst_trigger_status_32_mmu_xpe0_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE3r_OFFSET,0,(r._thdi_bst_trigger_status_32_mmu_xpe0_ipipe3),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE3r_OFFSET,0,&(r._thdi_bst_trigger_status_32_mmu_xpe0_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32_MMU_XPE0_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE0r_OFFSET,0,(r._thdi_bst_trigger_status_32_mmu_xpe1_ipipe0),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE0r_OFFSET,0,&(r._thdi_bst_trigger_status_32_mmu_xpe1_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE3r_OFFSET,0,(r._thdi_bst_trigger_status_32_mmu_xpe1_ipipe3),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE3r_OFFSET,0,&(r._thdi_bst_trigger_status_32_mmu_xpe1_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32_MMU_XPE1_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE1r_OFFSET,0,(r._thdi_bst_trigger_status_32_mmu_xpe2_ipipe1),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE1r_OFFSET,0,&(r._thdi_bst_trigger_status_32_mmu_xpe2_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE2r_OFFSET,0,(r._thdi_bst_trigger_status_32_mmu_xpe2_ipipe2),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE2r_OFFSET,0,&(r._thdi_bst_trigger_status_32_mmu_xpe2_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32_MMU_XPE2_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE1r_OFFSET,0,(r._thdi_bst_trigger_status_32_mmu_xpe3_ipipe1),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE1r_OFFSET,0,&(r._thdi_bst_trigger_status_32_mmu_xpe3_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE2r_OFFSET,0,(r._thdi_bst_trigger_status_32_mmu_xpe3_ipipe2),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE2r_OFFSET,0,&(r._thdi_bst_trigger_status_32_mmu_xpe3_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_32_MMU_XPE3_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_TYPE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_TYPE.
 */
#define READ_THDI_BST_TRIGGER_STATUS_TYPEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_TYPEr_BLKACC,3,n,p,THDI_BST_TRIGGER_STATUS_TYPEr_OFFSET,0,(r._thdi_bst_trigger_status_type),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPEr_BLKACC,3,n,p,THDI_BST_TRIGGER_STATUS_TYPEr_OFFSET,0,&(r._thdi_bst_trigger_status_type),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPEr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPEr_BLKACC,3,-1,p,THDI_BST_TRIGGER_STATUS_TYPEr_OFFSET,0,&(r._thdi_bst_trigger_status_type),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE0r_OFFSET,0,(r._thdi_bst_trigger_status_type_mmu_xpe0_ipipe0),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE0r_OFFSET,0,&(r._thdi_bst_trigger_status_type_mmu_xpe0_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE3r_OFFSET,0,(r._thdi_bst_trigger_status_type_mmu_xpe0_ipipe3),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE3r_OFFSET,0,&(r._thdi_bst_trigger_status_type_mmu_xpe0_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE0_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE0r_OFFSET,0,(r._thdi_bst_trigger_status_type_mmu_xpe1_ipipe0),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE0r_OFFSET,0,&(r._thdi_bst_trigger_status_type_mmu_xpe1_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE3r_OFFSET,0,(r._thdi_bst_trigger_status_type_mmu_xpe1_ipipe3),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE3r_OFFSET,0,&(r._thdi_bst_trigger_status_type_mmu_xpe1_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE1_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE1r_OFFSET,0,(r._thdi_bst_trigger_status_type_mmu_xpe2_ipipe1),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE1r_OFFSET,0,&(r._thdi_bst_trigger_status_type_mmu_xpe2_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE2r_OFFSET,0,(r._thdi_bst_trigger_status_type_mmu_xpe2_ipipe2),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE2r_OFFSET,0,&(r._thdi_bst_trigger_status_type_mmu_xpe2_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE2_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE1r_OFFSET,0,(r._thdi_bst_trigger_status_type_mmu_xpe3_ipipe1),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE1r_OFFSET,0,&(r._thdi_bst_trigger_status_type_mmu_xpe3_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE2r_OFFSET,0,(r._thdi_bst_trigger_status_type_mmu_xpe3_ipipe2),1)
#define WRITE_THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE2r_OFFSET,0,&(r._thdi_bst_trigger_status_type_mmu_xpe3_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_BST_TRIGGER_STATUS_TYPE_MMU_XPE3_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr_BLKACC,3,n,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr_OFFSET,0,(r._thdi_buffer_cell_limit_public_pool),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr_BLKACC,3,n,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr_OFFSET,0,&(r._thdi_buffer_cell_limit_public_pool),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr_BLKACC,3,-1,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr_OFFSET,0,&(r._thdi_buffer_cell_limit_public_pool),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_PUBLIC_POOLr'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE0_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE0_LAYER0.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE0_LAYER0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE0_LAYER0r_OFFSET,0,(r._thdi_buffer_cell_limit_public_pool_mmu_xpe0_layer0),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE0_LAYER0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE0_LAYER0r_OFFSET,0,&(r._thdi_buffer_cell_limit_public_pool_mmu_xpe0_layer0),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE0_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE1_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE1_LAYER0.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE1_LAYER0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE1_LAYER0r_OFFSET,0,(r._thdi_buffer_cell_limit_public_pool_mmu_xpe1_layer0),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE1_LAYER0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE1_LAYER0r_OFFSET,0,&(r._thdi_buffer_cell_limit_public_pool_mmu_xpe1_layer0),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE1_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE2_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE2_LAYER1.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE2_LAYER1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE2_LAYER1r_OFFSET,0,(r._thdi_buffer_cell_limit_public_pool_mmu_xpe2_layer1),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE2_LAYER1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE2_LAYER1r_OFFSET,0,&(r._thdi_buffer_cell_limit_public_pool_mmu_xpe2_layer1),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE2_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE3_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE3_LAYER1.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE3_LAYER1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE3_LAYER1r_OFFSET,0,(r._thdi_buffer_cell_limit_public_pool_mmu_xpe3_layer1),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE3_LAYER1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE3_LAYER1r_OFFSET,0,&(r._thdi_buffer_cell_limit_public_pool_mmu_xpe3_layer1),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_PUBLIC_POOL_MMU_XPE3_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_SP.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_SPr_BLKACC,3,n,p,THDI_BUFFER_CELL_LIMIT_SPr_OFFSET,i,(r._thdi_buffer_cell_limit_sp),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_SPr_BLKACC,3,n,p,THDI_BUFFER_CELL_LIMIT_SPr_OFFSET,i,&(r._thdi_buffer_cell_limit_sp),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_SPr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_SPr_BLKACC,3,-1,p,THDI_BUFFER_CELL_LIMIT_SPr_OFFSET,i,&(r._thdi_buffer_cell_limit_sp),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_SPr'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE0_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE0_LAYER0.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE0_LAYER0r_OFFSET,i,(r._thdi_buffer_cell_limit_sp_mmu_xpe0_layer0),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE0_LAYER0r_OFFSET,i,&(r._thdi_buffer_cell_limit_sp_mmu_xpe0_layer0),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE0_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE1_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE1_LAYER0.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE1_LAYER0r_OFFSET,i,(r._thdi_buffer_cell_limit_sp_mmu_xpe1_layer0),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE1_LAYER0r_OFFSET,i,&(r._thdi_buffer_cell_limit_sp_mmu_xpe1_layer0),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE1_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE2_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE2_LAYER1.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE2_LAYER1r_OFFSET,i,(r._thdi_buffer_cell_limit_sp_mmu_xpe2_layer1),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE2_LAYER1r_OFFSET,i,&(r._thdi_buffer_cell_limit_sp_mmu_xpe2_layer1),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE2_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE3_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE3_LAYER1.
 */
#define READ_THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE3_LAYER1r_OFFSET,i,(r._thdi_buffer_cell_limit_sp_mmu_xpe3_layer1),1)
#define WRITE_THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE3_LAYER1r_OFFSET,i,&(r._thdi_buffer_cell_limit_sp_mmu_xpe3_layer1),1)

/*******************************************************************************
 * End of 'THDI_BUFFER_CELL_LIMIT_SP_MMU_XPE3_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_BYPASS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_BYPASS.
 */
#define READ_THDI_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_BYPASSr_BLKACC,3,0,p,THDI_BYPASSr_OFFSET,0,(r._thdi_bypass),1)
#define WRITE_THDI_BYPASSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_BYPASSr_BLKACC,3,0,p,THDI_BYPASSr_OFFSET,0,&(r._thdi_bypass),1)

/*******************************************************************************
 * End of 'THDI_BYPASSr'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_RESET_LIMIT_OFFSET_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_RESET_LIMIT_OFFSET_SP.
 */
#define READ_THDI_CELL_RESET_LIMIT_OFFSET_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_RESET_LIMIT_OFFSET_SPr_BLKACC,3,n,p,THDI_CELL_RESET_LIMIT_OFFSET_SPr_OFFSET,i,(r._thdi_cell_reset_limit_offset_sp),1)
#define WRITE_THDI_CELL_RESET_LIMIT_OFFSET_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_RESET_LIMIT_OFFSET_SPr_BLKACC,3,n,p,THDI_CELL_RESET_LIMIT_OFFSET_SPr_OFFSET,i,&(r._thdi_cell_reset_limit_offset_sp),1)
#define WRITE_THDI_CELL_RESET_LIMIT_OFFSET_SPr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_RESET_LIMIT_OFFSET_SPr_BLKACC,3,-1,p,THDI_CELL_RESET_LIMIT_OFFSET_SPr_OFFSET,i,&(r._thdi_cell_reset_limit_offset_sp),1)

/*******************************************************************************
 * End of 'THDI_CELL_RESET_LIMIT_OFFSET_SPr'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE0_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE0_LAYER0.
 */
#define READ_THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE0_LAYER0r_OFFSET,i,(r._thdi_cell_reset_limit_offset_sp_mmu_xpe0_layer0),1)
#define WRITE_THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE0_LAYER0r_OFFSET,i,&(r._thdi_cell_reset_limit_offset_sp_mmu_xpe0_layer0),1)

/*******************************************************************************
 * End of 'THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE0_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE1_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE1_LAYER0.
 */
#define READ_THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE1_LAYER0r_OFFSET,i,(r._thdi_cell_reset_limit_offset_sp_mmu_xpe1_layer0),1)
#define WRITE_THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE1_LAYER0r_OFFSET,i,&(r._thdi_cell_reset_limit_offset_sp_mmu_xpe1_layer0),1)

/*******************************************************************************
 * End of 'THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE1_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE2_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE2_LAYER1.
 */
#define READ_THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE2_LAYER1r_OFFSET,i,(r._thdi_cell_reset_limit_offset_sp_mmu_xpe2_layer1),1)
#define WRITE_THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE2_LAYER1r_OFFSET,i,&(r._thdi_cell_reset_limit_offset_sp_mmu_xpe2_layer1),1)

/*******************************************************************************
 * End of 'THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE2_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE3_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE3_LAYER1.
 */
#define READ_THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE3_LAYER1r_OFFSET,i,(r._thdi_cell_reset_limit_offset_sp_mmu_xpe3_layer1),1)
#define WRITE_THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE3_LAYER1r_OFFSET,i,&(r._thdi_cell_reset_limit_offset_sp_mmu_xpe3_layer1),1)

/*******************************************************************************
 * End of 'THDI_CELL_RESET_LIMIT_OFFSET_SP_MMU_XPE3_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_RED_OFFSET_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_RED_OFFSET_SP.
 */
#define READ_THDI_CELL_SPAP_RED_OFFSET_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_RED_OFFSET_SPr_BLKACC,3,n,p,THDI_CELL_SPAP_RED_OFFSET_SPr_OFFSET,i,(r._thdi_cell_spap_red_offset_sp),1)
#define WRITE_THDI_CELL_SPAP_RED_OFFSET_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_RED_OFFSET_SPr_BLKACC,3,n,p,THDI_CELL_SPAP_RED_OFFSET_SPr_OFFSET,i,&(r._thdi_cell_spap_red_offset_sp),1)
#define WRITE_THDI_CELL_SPAP_RED_OFFSET_SPr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_RED_OFFSET_SPr_BLKACC,3,-1,p,THDI_CELL_SPAP_RED_OFFSET_SPr_OFFSET,i,&(r._thdi_cell_spap_red_offset_sp),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_RED_OFFSET_SPr'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE0_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE0_LAYER0.
 */
#define READ_THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE0_LAYER0r_OFFSET,i,(r._thdi_cell_spap_red_offset_sp_mmu_xpe0_layer0),1)
#define WRITE_THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE0_LAYER0r_OFFSET,i,&(r._thdi_cell_spap_red_offset_sp_mmu_xpe0_layer0),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE0_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE1_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE1_LAYER0.
 */
#define READ_THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE1_LAYER0r_OFFSET,i,(r._thdi_cell_spap_red_offset_sp_mmu_xpe1_layer0),1)
#define WRITE_THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE1_LAYER0r_OFFSET,i,&(r._thdi_cell_spap_red_offset_sp_mmu_xpe1_layer0),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE1_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE2_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE2_LAYER1.
 */
#define READ_THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE2_LAYER1r_OFFSET,i,(r._thdi_cell_spap_red_offset_sp_mmu_xpe2_layer1),1)
#define WRITE_THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE2_LAYER1r_OFFSET,i,&(r._thdi_cell_spap_red_offset_sp_mmu_xpe2_layer1),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE2_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE3_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE3_LAYER1.
 */
#define READ_THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE3_LAYER1r_OFFSET,i,(r._thdi_cell_spap_red_offset_sp_mmu_xpe3_layer1),1)
#define WRITE_THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE3_LAYER1r_OFFSET,i,&(r._thdi_cell_spap_red_offset_sp_mmu_xpe3_layer1),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_RED_OFFSET_SP_MMU_XPE3_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_YELLOW_OFFSET_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_YELLOW_OFFSET_SP.
 */
#define READ_THDI_CELL_SPAP_YELLOW_OFFSET_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_YELLOW_OFFSET_SPr_BLKACC,3,n,p,THDI_CELL_SPAP_YELLOW_OFFSET_SPr_OFFSET,i,(r._thdi_cell_spap_yellow_offset_sp),1)
#define WRITE_THDI_CELL_SPAP_YELLOW_OFFSET_SPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_YELLOW_OFFSET_SPr_BLKACC,3,n,p,THDI_CELL_SPAP_YELLOW_OFFSET_SPr_OFFSET,i,&(r._thdi_cell_spap_yellow_offset_sp),1)
#define WRITE_THDI_CELL_SPAP_YELLOW_OFFSET_SPr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_YELLOW_OFFSET_SPr_BLKACC,3,-1,p,THDI_CELL_SPAP_YELLOW_OFFSET_SPr_OFFSET,i,&(r._thdi_cell_spap_yellow_offset_sp),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_YELLOW_OFFSET_SPr'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE0_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE0_LAYER0.
 */
#define READ_THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE0_LAYER0r_OFFSET,i,(r._thdi_cell_spap_yellow_offset_sp_mmu_xpe0_layer0),1)
#define WRITE_THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE0_LAYER0r_OFFSET,i,&(r._thdi_cell_spap_yellow_offset_sp_mmu_xpe0_layer0),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE0_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE1_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE1_LAYER0.
 */
#define READ_THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE1_LAYER0r_OFFSET,i,(r._thdi_cell_spap_yellow_offset_sp_mmu_xpe1_layer0),1)
#define WRITE_THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE1_LAYER0r_OFFSET,i,&(r._thdi_cell_spap_yellow_offset_sp_mmu_xpe1_layer0),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE1_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE2_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE2_LAYER1.
 */
#define READ_THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE2_LAYER1r_OFFSET,i,(r._thdi_cell_spap_yellow_offset_sp_mmu_xpe2_layer1),1)
#define WRITE_THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE2_LAYER1r_OFFSET,i,&(r._thdi_cell_spap_yellow_offset_sp_mmu_xpe2_layer1),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE2_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE3_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE3_LAYER1.
 */
#define READ_THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE3_LAYER1r_OFFSET,i,(r._thdi_cell_spap_yellow_offset_sp_mmu_xpe3_layer1),1)
#define WRITE_THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE3_LAYER1r_OFFSET,i,&(r._thdi_cell_spap_yellow_offset_sp_mmu_xpe3_layer1),1)

/*******************************************************************************
 * End of 'THDI_CELL_SPAP_YELLOW_OFFSET_SP_MMU_XPE3_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_EN_COR_ERR_RPT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_EN_COR_ERR_RPT.
 */
#define READ_THDI_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_EN_COR_ERR_RPTr_BLKACC,3,0,p,THDI_EN_COR_ERR_RPTr_OFFSET,0,(r._thdi_en_cor_err_rpt),1)
#define WRITE_THDI_EN_COR_ERR_RPTr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_EN_COR_ERR_RPTr_BLKACC,3,0,p,THDI_EN_COR_ERR_RPTr_OFFSET,0,&(r._thdi_en_cor_err_rpt),1)

/*******************************************************************************
 * End of 'THDI_EN_COR_ERR_RPTr'
 */




/*******************************************************************************
 * REGISTER:  THDI_FLOW_CONTROL_XOFF_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_FLOW_CONTROL_XOFF_STATE.
 */
#define READ_THDI_FLOW_CONTROL_XOFF_STATEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_FLOW_CONTROL_XOFF_STATEr_BLKACC,3,n,p,THDI_FLOW_CONTROL_XOFF_STATEr_OFFSET,0,(r._thdi_flow_control_xoff_state),1)
#define WRITE_THDI_FLOW_CONTROL_XOFF_STATEr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_FLOW_CONTROL_XOFF_STATEr_BLKACC,3,n,p,THDI_FLOW_CONTROL_XOFF_STATEr_OFFSET,0,&(r._thdi_flow_control_xoff_state),1)
#define WRITE_THDI_FLOW_CONTROL_XOFF_STATEr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_FLOW_CONTROL_XOFF_STATEr_BLKACC,3,-1,p,THDI_FLOW_CONTROL_XOFF_STATEr_OFFSET,0,&(r._thdi_flow_control_xoff_state),1)

/*******************************************************************************
 * End of 'THDI_FLOW_CONTROL_XOFF_STATEr'
 */




/*******************************************************************************
 * REGISTER:  THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE0.
 */
#define READ_THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE0r_BLKACC,3,0,p,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE0r_OFFSET,0,(r._thdi_flow_control_xoff_state_mmu_xpe0),1)
#define WRITE_THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE0r_BLKACC,3,0,p,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE0r_OFFSET,0,&(r._thdi_flow_control_xoff_state_mmu_xpe0),1)

/*******************************************************************************
 * End of 'THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE1.
 */
#define READ_THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE1r_BLKACC,3,0,p,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE1r_OFFSET,0,(r._thdi_flow_control_xoff_state_mmu_xpe1),1)
#define WRITE_THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE1r_BLKACC,3,0,p,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE1r_OFFSET,0,&(r._thdi_flow_control_xoff_state_mmu_xpe1),1)

/*******************************************************************************
 * End of 'THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE2.
 */
#define READ_THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE2r_BLKACC,3,0,p,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE2r_OFFSET,0,(r._thdi_flow_control_xoff_state_mmu_xpe2),1)
#define WRITE_THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE2r_BLKACC,3,0,p,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE2r_OFFSET,0,&(r._thdi_flow_control_xoff_state_mmu_xpe2),1)

/*******************************************************************************
 * End of 'THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE3.
 */
#define READ_THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE3r_BLKACC,3,0,p,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE3r_OFFSET,0,(r._thdi_flow_control_xoff_state_mmu_xpe3),1)
#define WRITE_THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE3r_BLKACC,3,0,p,THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE3r_OFFSET,0,&(r._thdi_flow_control_xoff_state_mmu_xpe3),1)

/*******************************************************************************
 * End of 'THDI_FLOW_CONTROL_XOFF_STATE_MMU_XPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_COUNT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_COUNT.
 */
#define READ_THDI_GLOBAL_HDRM_COUNTr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_COUNTr_BLKACC,3,n,p,THDI_GLOBAL_HDRM_COUNTr_OFFSET,0,(r._thdi_global_hdrm_count),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNTr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNTr_BLKACC,3,n,p,THDI_GLOBAL_HDRM_COUNTr_OFFSET,0,&(r._thdi_global_hdrm_count),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNTr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNTr_BLKACC,3,-1,p,THDI_GLOBAL_HDRM_COUNTr_OFFSET,0,&(r._thdi_global_hdrm_count),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE0r_OFFSET,0,(r._thdi_global_hdrm_count_mmu_xpe0_ipipe0),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE0r_OFFSET,0,&(r._thdi_global_hdrm_count_mmu_xpe0_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE3r_OFFSET,0,(r._thdi_global_hdrm_count_mmu_xpe0_ipipe3),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE3r_OFFSET,0,&(r._thdi_global_hdrm_count_mmu_xpe0_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_COUNT_MMU_XPE0_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE0r_OFFSET,0,(r._thdi_global_hdrm_count_mmu_xpe1_ipipe0),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE0r_OFFSET,0,&(r._thdi_global_hdrm_count_mmu_xpe1_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE3r_OFFSET,0,(r._thdi_global_hdrm_count_mmu_xpe1_ipipe3),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE3r_OFFSET,0,&(r._thdi_global_hdrm_count_mmu_xpe1_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_COUNT_MMU_XPE1_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE1r_OFFSET,0,(r._thdi_global_hdrm_count_mmu_xpe2_ipipe1),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE1r_OFFSET,0,&(r._thdi_global_hdrm_count_mmu_xpe2_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE2r_OFFSET,0,(r._thdi_global_hdrm_count_mmu_xpe2_ipipe2),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE2r_OFFSET,0,&(r._thdi_global_hdrm_count_mmu_xpe2_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_COUNT_MMU_XPE2_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE1r_OFFSET,0,(r._thdi_global_hdrm_count_mmu_xpe3_ipipe1),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE1r_OFFSET,0,&(r._thdi_global_hdrm_count_mmu_xpe3_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE2r_OFFSET,0,(r._thdi_global_hdrm_count_mmu_xpe3_ipipe2),1)
#define WRITE_THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE2r_OFFSET,0,&(r._thdi_global_hdrm_count_mmu_xpe3_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_COUNT_MMU_XPE3_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_LIMIT.
 */
#define READ_THDI_GLOBAL_HDRM_LIMITr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_LIMITr_BLKACC,3,0,p,THDI_GLOBAL_HDRM_LIMITr_OFFSET,0,(r._thdi_global_hdrm_limit),1)
#define WRITE_THDI_GLOBAL_HDRM_LIMITr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_LIMITr_BLKACC,3,0,p,THDI_GLOBAL_HDRM_LIMITr_OFFSET,0,&(r._thdi_global_hdrm_limit),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_RESERVED
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_RESERVED.
 */
#define READ_THDI_GLOBAL_HDRM_RESERVEDr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_RESERVEDr_BLKACC,3,n,p,THDI_GLOBAL_HDRM_RESERVEDr_OFFSET,0,(r._thdi_global_hdrm_reserved),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVEDr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVEDr_BLKACC,3,n,p,THDI_GLOBAL_HDRM_RESERVEDr_OFFSET,0,&(r._thdi_global_hdrm_reserved),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVEDr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVEDr_BLKACC,3,-1,p,THDI_GLOBAL_HDRM_RESERVEDr_OFFSET,0,&(r._thdi_global_hdrm_reserved),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_RESERVEDr'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE0r_OFFSET,0,(r._thdi_global_hdrm_reserved_mmu_xpe0_ipipe0),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE0r_OFFSET,0,&(r._thdi_global_hdrm_reserved_mmu_xpe0_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE3r_OFFSET,0,(r._thdi_global_hdrm_reserved_mmu_xpe0_ipipe3),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE3r_OFFSET,0,&(r._thdi_global_hdrm_reserved_mmu_xpe0_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_RESERVED_MMU_XPE0_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE0r_OFFSET,0,(r._thdi_global_hdrm_reserved_mmu_xpe1_ipipe0),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE0r_OFFSET,0,&(r._thdi_global_hdrm_reserved_mmu_xpe1_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE3r_OFFSET,0,(r._thdi_global_hdrm_reserved_mmu_xpe1_ipipe3),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE3r_OFFSET,0,&(r._thdi_global_hdrm_reserved_mmu_xpe1_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_RESERVED_MMU_XPE1_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE1r_OFFSET,0,(r._thdi_global_hdrm_reserved_mmu_xpe2_ipipe1),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE1r_OFFSET,0,&(r._thdi_global_hdrm_reserved_mmu_xpe2_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE2r_OFFSET,0,(r._thdi_global_hdrm_reserved_mmu_xpe2_ipipe2),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE2r_OFFSET,0,&(r._thdi_global_hdrm_reserved_mmu_xpe2_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_RESERVED_MMU_XPE2_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE1r_OFFSET,0,(r._thdi_global_hdrm_reserved_mmu_xpe3_ipipe1),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE1r_OFFSET,0,&(r._thdi_global_hdrm_reserved_mmu_xpe3_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE2r_OFFSET,0,(r._thdi_global_hdrm_reserved_mmu_xpe3_ipipe2),1)
#define WRITE_THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE2r_OFFSET,0,&(r._thdi_global_hdrm_reserved_mmu_xpe3_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_GLOBAL_HDRM_RESERVED_MMU_XPE3_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_BUFFER_CELL_LIMIT_HP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_BUFFER_CELL_LIMIT_HP.
 */
#define READ_THDI_HDRM_BUFFER_CELL_LIMIT_HPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_BUFFER_CELL_LIMIT_HPr_BLKACC,3,n,p,THDI_HDRM_BUFFER_CELL_LIMIT_HPr_OFFSET,i,(r._thdi_hdrm_buffer_cell_limit_hp),1)
#define WRITE_THDI_HDRM_BUFFER_CELL_LIMIT_HPr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_BUFFER_CELL_LIMIT_HPr_BLKACC,3,n,p,THDI_HDRM_BUFFER_CELL_LIMIT_HPr_OFFSET,i,&(r._thdi_hdrm_buffer_cell_limit_hp),1)
#define WRITE_THDI_HDRM_BUFFER_CELL_LIMIT_HPr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_BUFFER_CELL_LIMIT_HPr_BLKACC,3,-1,p,THDI_HDRM_BUFFER_CELL_LIMIT_HPr_OFFSET,i,&(r._thdi_hdrm_buffer_cell_limit_hp),1)

/*******************************************************************************
 * End of 'THDI_HDRM_BUFFER_CELL_LIMIT_HPr'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE0_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE0_LAYER0.
 */
#define READ_THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE0_LAYER0r_OFFSET,i,(r._thdi_hdrm_buffer_cell_limit_hp_mmu_xpe0_layer0),1)
#define WRITE_THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE0_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE0_LAYER0r_BLKACC,3,0,p,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE0_LAYER0r_OFFSET,i,&(r._thdi_hdrm_buffer_cell_limit_hp_mmu_xpe0_layer0),1)

/*******************************************************************************
 * End of 'THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE0_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE1_LAYER0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE1_LAYER0.
 */
#define READ_THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE1_LAYER0r_OFFSET,i,(r._thdi_hdrm_buffer_cell_limit_hp_mmu_xpe1_layer0),1)
#define WRITE_THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE1_LAYER0r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE1_LAYER0r_BLKACC,3,0,p,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE1_LAYER0r_OFFSET,i,&(r._thdi_hdrm_buffer_cell_limit_hp_mmu_xpe1_layer0),1)

/*******************************************************************************
 * End of 'THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE1_LAYER0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE2_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE2_LAYER1.
 */
#define READ_THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE2_LAYER1r_OFFSET,i,(r._thdi_hdrm_buffer_cell_limit_hp_mmu_xpe2_layer1),1)
#define WRITE_THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE2_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE2_LAYER1r_BLKACC,3,0,p,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE2_LAYER1r_OFFSET,i,&(r._thdi_hdrm_buffer_cell_limit_hp_mmu_xpe2_layer1),1)

/*******************************************************************************
 * End of 'THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE2_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE3_LAYER1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE3_LAYER1.
 */
#define READ_THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE3_LAYER1r_OFFSET,i,(r._thdi_hdrm_buffer_cell_limit_hp_mmu_xpe3_layer1),1)
#define WRITE_THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE3_LAYER1r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE3_LAYER1r_BLKACC,3,0,p,THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE3_LAYER1r_OFFSET,i,&(r._thdi_hdrm_buffer_cell_limit_hp_mmu_xpe3_layer1),1)

/*******************************************************************************
 * End of 'THDI_HDRM_BUFFER_CELL_LIMIT_HP_MMU_XPE3_LAYER1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_POOL_CFG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_POOL_CFG.
 */
#define READ_THDI_HDRM_POOL_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_POOL_CFGr_BLKACC,3,0,p,THDI_HDRM_POOL_CFGr_OFFSET,0,(r._thdi_hdrm_pool_cfg),1)
#define WRITE_THDI_HDRM_POOL_CFGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_POOL_CFGr_BLKACC,3,0,p,THDI_HDRM_POOL_CFGr_OFFSET,0,&(r._thdi_hdrm_pool_cfg),1)

/*******************************************************************************
 * End of 'THDI_HDRM_POOL_CFGr'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_POOL_COUNT_HP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_POOL_COUNT_HP.
 */
#define READ_THDI_HDRM_POOL_COUNT_HPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_POOL_COUNT_HPr_BLKACC,3,0,p,THDI_HDRM_POOL_COUNT_HPr_OFFSET,i,(r._thdi_hdrm_pool_count_hp),1)
#define WRITE_THDI_HDRM_POOL_COUNT_HPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_POOL_COUNT_HPr_BLKACC,3,0,p,THDI_HDRM_POOL_COUNT_HPr_OFFSET,i,&(r._thdi_hdrm_pool_count_hp),1)

/*******************************************************************************
 * End of 'THDI_HDRM_POOL_COUNT_HPr'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_POOL_PEAK_COUNT_HP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_POOL_PEAK_COUNT_HP.
 */
#define READ_THDI_HDRM_POOL_PEAK_COUNT_HPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_POOL_PEAK_COUNT_HPr_BLKACC,3,0,p,THDI_HDRM_POOL_PEAK_COUNT_HPr_OFFSET,i,(r._thdi_hdrm_pool_peak_count_hp),1)
#define WRITE_THDI_HDRM_POOL_PEAK_COUNT_HPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_POOL_PEAK_COUNT_HPr_BLKACC,3,0,p,THDI_HDRM_POOL_PEAK_COUNT_HPr_OFFSET,i,&(r._thdi_hdrm_pool_peak_count_hp),1)

/*******************************************************************************
 * End of 'THDI_HDRM_POOL_PEAK_COUNT_HPr'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_POOL_STATUS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_POOL_STATUS.
 */
#define READ_THDI_HDRM_POOL_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_POOL_STATUSr_BLKACC,3,0,p,THDI_HDRM_POOL_STATUSr_OFFSET,0,(r._thdi_hdrm_pool_status),1)
#define WRITE_THDI_HDRM_POOL_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_POOL_STATUSr_BLKACC,3,0,p,THDI_HDRM_POOL_STATUSr_OFFSET,0,&(r._thdi_hdrm_pool_status),1)

/*******************************************************************************
 * End of 'THDI_HDRM_POOL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  THDI_HDRM_PORT_PG_HPID
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_HDRM_PORT_PG_HPID.
 */
#define READ_THDI_HDRM_PORT_PG_HPIDr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_HDRM_PORT_PG_HPIDr_BLKACC,3,0,p,THDI_HDRM_PORT_PG_HPIDr_OFFSET,0,(r._thdi_hdrm_port_pg_hpid),1)
#define WRITE_THDI_HDRM_PORT_PG_HPIDr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_HDRM_PORT_PG_HPIDr_BLKACC,3,0,p,THDI_HDRM_PORT_PG_HPIDr_OFFSET,0,&(r._thdi_hdrm_port_pg_hpid),1)

/*******************************************************************************
 * End of 'THDI_HDRM_PORT_PG_HPIDr'
 */




/*******************************************************************************
 * REGISTER:  THDI_INPUT_PORT_XON_ENABLES
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_INPUT_PORT_XON_ENABLES.
 */
#define READ_THDI_INPUT_PORT_XON_ENABLESr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_INPUT_PORT_XON_ENABLESr_BLKACC,3,0,p,THDI_INPUT_PORT_XON_ENABLESr_OFFSET,0,(r._thdi_input_port_xon_enables),1)
#define WRITE_THDI_INPUT_PORT_XON_ENABLESr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_INPUT_PORT_XON_ENABLESr_BLKACC,3,0,p,THDI_INPUT_PORT_XON_ENABLESr_OFFSET,0,&(r._thdi_input_port_xon_enables),1)

/*******************************************************************************
 * End of 'THDI_INPUT_PORT_XON_ENABLESr'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEMORY_PTPG_CFG_MEM_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEMORY_PTPG_CFG_MEM_TM.
 */
#define READ_THDI_MEMORY_PTPG_CFG_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEMORY_PTPG_CFG_MEM_TMr_BLKACC,3,0,p,THDI_MEMORY_PTPG_CFG_MEM_TMr_OFFSET,0,(r._thdi_memory_ptpg_cfg_mem_tm),1)
#define WRITE_THDI_MEMORY_PTPG_CFG_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEMORY_PTPG_CFG_MEM_TMr_BLKACC,3,0,p,THDI_MEMORY_PTPG_CFG_MEM_TMr_OFFSET,0,&(r._thdi_memory_ptpg_cfg_mem_tm),1)

/*******************************************************************************
 * End of 'THDI_MEMORY_PTPG_CFG_MEM_TMr'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEMORY_PTSP_CFG_MEM_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEMORY_PTSP_CFG_MEM_TM.
 */
#define READ_THDI_MEMORY_PTSP_CFG_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEMORY_PTSP_CFG_MEM_TMr_BLKACC,3,0,p,THDI_MEMORY_PTSP_CFG_MEM_TMr_OFFSET,0,(r._thdi_memory_ptsp_cfg_mem_tm),1)
#define WRITE_THDI_MEMORY_PTSP_CFG_MEM_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEMORY_PTSP_CFG_MEM_TMr_BLKACC,3,0,p,THDI_MEMORY_PTSP_CFG_MEM_TMr_OFFSET,0,&(r._thdi_memory_ptsp_cfg_mem_tm),1)

/*******************************************************************************
 * End of 'THDI_MEMORY_PTSP_CFG_MEM_TMr'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEMORY_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEMORY_TM.
 */
#define READ_THDI_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEMORY_TMr_BLKACC,3,0,p,THDI_MEMORY_TMr_OFFSET,0,(r._thdi_memory_tm),1)
#define WRITE_THDI_MEMORY_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEMORY_TMr_BLKACC,3,0,p,THDI_MEMORY_TMr_OFFSET,0,&(r._thdi_memory_tm),1)

/*******************************************************************************
 * End of 'THDI_MEMORY_TMr'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEM_INIT_STATUS
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEM_INIT_STATUS.
 */
#define READ_THDI_MEM_INIT_STATUSr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEM_INIT_STATUSr_BLKACC,3,n,p,THDI_MEM_INIT_STATUSr_OFFSET,0,(r._thdi_mem_init_status),1)
#define WRITE_THDI_MEM_INIT_STATUSr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUSr_BLKACC,3,n,p,THDI_MEM_INIT_STATUSr_OFFSET,0,&(r._thdi_mem_init_status),1)
#define WRITE_THDI_MEM_INIT_STATUSr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUSr_BLKACC,3,-1,p,THDI_MEM_INIT_STATUSr_OFFSET,0,&(r._thdi_mem_init_status),1)

/*******************************************************************************
 * End of 'THDI_MEM_INIT_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE0r_OFFSET,0,(r._thdi_mem_init_status_mmu_xpe0_ipipe0),1)
#define WRITE_THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE0r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE0r_OFFSET,0,&(r._thdi_mem_init_status_mmu_xpe0_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE3r_OFFSET,0,(r._thdi_mem_init_status_mmu_xpe0_ipipe3),1)
#define WRITE_THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE3r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE3r_OFFSET,0,&(r._thdi_mem_init_status_mmu_xpe0_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_MEM_INIT_STATUS_MMU_XPE0_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE0r_OFFSET,0,(r._thdi_mem_init_status_mmu_xpe1_ipipe0),1)
#define WRITE_THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE0r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE0r_OFFSET,0,&(r._thdi_mem_init_status_mmu_xpe1_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE3r_OFFSET,0,(r._thdi_mem_init_status_mmu_xpe1_ipipe3),1)
#define WRITE_THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE3r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE3r_OFFSET,0,&(r._thdi_mem_init_status_mmu_xpe1_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_MEM_INIT_STATUS_MMU_XPE1_IPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE1r_OFFSET,0,(r._thdi_mem_init_status_mmu_xpe2_ipipe1),1)
#define WRITE_THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE1r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE1r_OFFSET,0,&(r._thdi_mem_init_status_mmu_xpe2_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE2r_OFFSET,0,(r._thdi_mem_init_status_mmu_xpe2_ipipe2),1)
#define WRITE_THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE2r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE2r_OFFSET,0,&(r._thdi_mem_init_status_mmu_xpe2_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_MEM_INIT_STATUS_MMU_XPE2_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE1r_OFFSET,0,(r._thdi_mem_init_status_mmu_xpe3_ipipe1),1)
#define WRITE_THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE1r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE1r_OFFSET,0,&(r._thdi_mem_init_status_mmu_xpe3_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE2r_OFFSET,0,(r._thdi_mem_init_status_mmu_xpe3_ipipe2),1)
#define WRITE_THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE2r_BLKACC,3,0,p,THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE2r_OFFSET,0,&(r._thdi_mem_init_status_mmu_xpe3_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_MEM_INIT_STATUS_MMU_XPE3_IPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_PG_FDR_MODE_ENABLE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PG_FDR_MODE_ENABLE.
 */
#define READ_THDI_PG_FDR_MODE_ENABLEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PG_FDR_MODE_ENABLEr_BLKACC,3,0,p,THDI_PG_FDR_MODE_ENABLEr_OFFSET,0,(r._thdi_pg_fdr_mode_enable),1)
#define WRITE_THDI_PG_FDR_MODE_ENABLEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PG_FDR_MODE_ENABLEr_BLKACC,3,0,p,THDI_PG_FDR_MODE_ENABLEr_OFFSET,0,&(r._thdi_pg_fdr_mode_enable),1)

/*******************************************************************************
 * End of 'THDI_PG_FDR_MODE_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  THDI_POOL_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_POOL_CONFIG.
 */
#define READ_THDI_POOL_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_POOL_CONFIGr_BLKACC,3,0,p,THDI_POOL_CONFIGr_OFFSET,0,(r._thdi_pool_config),1)
#define WRITE_THDI_POOL_CONFIGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_POOL_CONFIGr_BLKACC,3,0,p,THDI_POOL_CONFIGr_OFFSET,0,&(r._thdi_pool_config),1)

/*******************************************************************************
 * End of 'THDI_POOL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  THDI_POOL_DROP_STATE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_POOL_DROP_STATE.
 */
#define READ_THDI_POOL_DROP_STATEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_POOL_DROP_STATEr_BLKACC,3,0,p,THDI_POOL_DROP_STATEr_OFFSET,0,(r._thdi_pool_drop_state),1)
#define WRITE_THDI_POOL_DROP_STATEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_POOL_DROP_STATEr_BLKACC,3,0,p,THDI_POOL_DROP_STATEr_OFFSET,0,&(r._thdi_pool_drop_state),1)

/*******************************************************************************
 * End of 'THDI_POOL_DROP_STATEr'
 */




/*******************************************************************************
 * REGISTER:  THDI_POOL_SHARED_COUNT_SP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_POOL_SHARED_COUNT_SP.
 */
#define READ_THDI_POOL_SHARED_COUNT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_POOL_SHARED_COUNT_SPr_BLKACC,3,0,p,THDI_POOL_SHARED_COUNT_SPr_OFFSET,i,(r._thdi_pool_shared_count_sp),1)
#define WRITE_THDI_POOL_SHARED_COUNT_SPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_POOL_SHARED_COUNT_SPr_BLKACC,3,0,p,THDI_POOL_SHARED_COUNT_SPr_OFFSET,i,&(r._thdi_pool_shared_count_sp),1)

/*******************************************************************************
 * End of 'THDI_POOL_SHARED_COUNT_SPr'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_LIMIT_STATES
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_LIMIT_STATES.
 */
#define READ_THDI_PORT_LIMIT_STATESr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_LIMIT_STATESr_BLKACC,3,n,p,THDI_PORT_LIMIT_STATESr_OFFSET,0,(r._thdi_port_limit_states),1)
#define WRITE_THDI_PORT_LIMIT_STATESr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_LIMIT_STATESr_BLKACC,3,n,p,THDI_PORT_LIMIT_STATESr_OFFSET,0,&(r._thdi_port_limit_states),1)
#define WRITE_THDI_PORT_LIMIT_STATESr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_LIMIT_STATESr_BLKACC,3,-1,p,THDI_PORT_LIMIT_STATESr_OFFSET,0,&(r._thdi_port_limit_states),1)

/*******************************************************************************
 * End of 'THDI_PORT_LIMIT_STATESr'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_LIMIT_STATES_MMU_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_LIMIT_STATES_MMU_XPE0.
 */
#define READ_THDI_PORT_LIMIT_STATES_MMU_XPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_LIMIT_STATES_MMU_XPE0r_BLKACC,3,0,p,THDI_PORT_LIMIT_STATES_MMU_XPE0r_OFFSET,0,(r._thdi_port_limit_states_mmu_xpe0),1)
#define WRITE_THDI_PORT_LIMIT_STATES_MMU_XPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_LIMIT_STATES_MMU_XPE0r_BLKACC,3,0,p,THDI_PORT_LIMIT_STATES_MMU_XPE0r_OFFSET,0,&(r._thdi_port_limit_states_mmu_xpe0),1)

/*******************************************************************************
 * End of 'THDI_PORT_LIMIT_STATES_MMU_XPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_LIMIT_STATES_MMU_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_LIMIT_STATES_MMU_XPE1.
 */
#define READ_THDI_PORT_LIMIT_STATES_MMU_XPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_LIMIT_STATES_MMU_XPE1r_BLKACC,3,0,p,THDI_PORT_LIMIT_STATES_MMU_XPE1r_OFFSET,0,(r._thdi_port_limit_states_mmu_xpe1),1)
#define WRITE_THDI_PORT_LIMIT_STATES_MMU_XPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_LIMIT_STATES_MMU_XPE1r_BLKACC,3,0,p,THDI_PORT_LIMIT_STATES_MMU_XPE1r_OFFSET,0,&(r._thdi_port_limit_states_mmu_xpe1),1)

/*******************************************************************************
 * End of 'THDI_PORT_LIMIT_STATES_MMU_XPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_LIMIT_STATES_MMU_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_LIMIT_STATES_MMU_XPE2.
 */
#define READ_THDI_PORT_LIMIT_STATES_MMU_XPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_LIMIT_STATES_MMU_XPE2r_BLKACC,3,0,p,THDI_PORT_LIMIT_STATES_MMU_XPE2r_OFFSET,0,(r._thdi_port_limit_states_mmu_xpe2),1)
#define WRITE_THDI_PORT_LIMIT_STATES_MMU_XPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_LIMIT_STATES_MMU_XPE2r_BLKACC,3,0,p,THDI_PORT_LIMIT_STATES_MMU_XPE2r_OFFSET,0,&(r._thdi_port_limit_states_mmu_xpe2),1)

/*******************************************************************************
 * End of 'THDI_PORT_LIMIT_STATES_MMU_XPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_LIMIT_STATES_MMU_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_LIMIT_STATES_MMU_XPE3.
 */
#define READ_THDI_PORT_LIMIT_STATES_MMU_XPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_LIMIT_STATES_MMU_XPE3r_BLKACC,3,0,p,THDI_PORT_LIMIT_STATES_MMU_XPE3r_OFFSET,0,(r._thdi_port_limit_states_mmu_xpe3),1)
#define WRITE_THDI_PORT_LIMIT_STATES_MMU_XPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_LIMIT_STATES_MMU_XPE3r_BLKACC,3,0,p,THDI_PORT_LIMIT_STATES_MMU_XPE3r_OFFSET,0,&(r._thdi_port_limit_states_mmu_xpe3),1)

/*******************************************************************************
 * End of 'THDI_PORT_LIMIT_STATES_MMU_XPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_MAX_PKT_SIZE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_MAX_PKT_SIZE.
 */
#define READ_THDI_PORT_MAX_PKT_SIZEr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_MAX_PKT_SIZEr_BLKACC,3,0,p,THDI_PORT_MAX_PKT_SIZEr_OFFSET,0,(r._thdi_port_max_pkt_size),1)
#define WRITE_THDI_PORT_MAX_PKT_SIZEr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_MAX_PKT_SIZEr_BLKACC,3,0,p,THDI_PORT_MAX_PKT_SIZEr_OFFSET,0,&(r._thdi_port_max_pkt_size),1)

/*******************************************************************************
 * End of 'THDI_PORT_MAX_PKT_SIZEr'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_BST
 * BLOCKS:   MMU_XPE
 * SIZE:     31
 */
/*
 * These macros can be used to access THDI_PORT_PG_BST.
 */
#define READ_THDI_PORT_PG_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_BSTm_BLKACC,3,n,p,THDI_PORT_PG_BSTm_OFFSET,i,(m._thdi_port_pg_bst),1)
#define WRITE_THDI_PORT_PG_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BSTm_BLKACC,3,n,p,THDI_PORT_PG_BSTm_OFFSET,i,&(m._thdi_port_pg_bst),1)
#define WRITE_THDI_PORT_PG_BSTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BSTm_BLKACC,3,-1,p,THDI_PORT_PG_BSTm_OFFSET,i,&(m._thdi_port_pg_bst),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_BSTm'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_BST_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     31
 */
/*
 * These macros can be used to access THDI_PORT_PG_BST_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_PORT_PG_BST_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_BST_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE0_IPIPE0m_OFFSET,i,(m._thdi_port_pg_bst_mmu_xpe0_ipipe0),1)
#define WRITE_THDI_PORT_PG_BST_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BST_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_bst_mmu_xpe0_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_BST_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_BST_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     31
 */
/*
 * These macros can be used to access THDI_PORT_PG_BST_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_PORT_PG_BST_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_BST_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE0_IPIPE3m_OFFSET,i,(m._thdi_port_pg_bst_mmu_xpe0_ipipe3),1)
#define WRITE_THDI_PORT_PG_BST_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BST_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_bst_mmu_xpe0_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_BST_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_BST_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     31
 */
/*
 * These macros can be used to access THDI_PORT_PG_BST_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_PORT_PG_BST_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_BST_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE1_IPIPE0m_OFFSET,i,(m._thdi_port_pg_bst_mmu_xpe1_ipipe0),1)
#define WRITE_THDI_PORT_PG_BST_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BST_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_bst_mmu_xpe1_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_BST_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_BST_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     31
 */
/*
 * These macros can be used to access THDI_PORT_PG_BST_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_PORT_PG_BST_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_BST_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE1_IPIPE3m_OFFSET,i,(m._thdi_port_pg_bst_mmu_xpe1_ipipe3),1)
#define WRITE_THDI_PORT_PG_BST_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BST_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_bst_mmu_xpe1_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_BST_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_BST_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     31
 */
/*
 * These macros can be used to access THDI_PORT_PG_BST_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_PORT_PG_BST_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_BST_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE2_IPIPE1m_OFFSET,i,(m._thdi_port_pg_bst_mmu_xpe2_ipipe1),1)
#define WRITE_THDI_PORT_PG_BST_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BST_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_bst_mmu_xpe2_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_BST_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_BST_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     31
 */
/*
 * These macros can be used to access THDI_PORT_PG_BST_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_PORT_PG_BST_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_BST_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE2_IPIPE2m_OFFSET,i,(m._thdi_port_pg_bst_mmu_xpe2_ipipe2),1)
#define WRITE_THDI_PORT_PG_BST_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BST_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_bst_mmu_xpe2_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_BST_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_BST_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     31
 */
/*
 * These macros can be used to access THDI_PORT_PG_BST_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_PORT_PG_BST_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_BST_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE3_IPIPE1m_OFFSET,i,(m._thdi_port_pg_bst_mmu_xpe3_ipipe1),1)
#define WRITE_THDI_PORT_PG_BST_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BST_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_bst_mmu_xpe3_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_BST_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_BST_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     31
 */
/*
 * These macros can be used to access THDI_PORT_PG_BST_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_PORT_PG_BST_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_BST_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE3_IPIPE2m_OFFSET,i,(m._thdi_port_pg_bst_mmu_xpe3_ipipe2),1)
#define WRITE_THDI_PORT_PG_BST_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_BST_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_BST_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_bst_mmu_xpe3_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_BST_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT1
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT1.
 */
#define READ_THDI_PORT_PG_CNTRS_RT1m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT1m_BLKACC,3,n,p,THDI_PORT_PG_CNTRS_RT1m_OFFSET,i,(m._thdi_port_pg_cntrs_rt1),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1m_BLKACC,3,n,p,THDI_PORT_PG_CNTRS_RT1m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1m_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1m_BLKACC,3,-1,p,THDI_PORT_PG_CNTRS_RT1m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE0m_OFFSET,i,(m._thdi_port_pg_cntrs_rt1_mmu_xpe0_ipipe0),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1_mmu_xpe0_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE3m_OFFSET,i,(m._thdi_port_pg_cntrs_rt1_mmu_xpe0_ipipe3),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1_mmu_xpe0_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT1_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE0m_OFFSET,i,(m._thdi_port_pg_cntrs_rt1_mmu_xpe1_ipipe0),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1_mmu_xpe1_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE3m_OFFSET,i,(m._thdi_port_pg_cntrs_rt1_mmu_xpe1_ipipe3),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1_mmu_xpe1_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT1_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE1m_OFFSET,i,(m._thdi_port_pg_cntrs_rt1_mmu_xpe2_ipipe1),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1_mmu_xpe2_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE2m_OFFSET,i,(m._thdi_port_pg_cntrs_rt1_mmu_xpe2_ipipe2),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1_mmu_xpe2_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT1_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE1m_OFFSET,i,(m._thdi_port_pg_cntrs_rt1_mmu_xpe3_ipipe1),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1_mmu_xpe3_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE2m_OFFSET,i,(m._thdi_port_pg_cntrs_rt1_mmu_xpe3_ipipe2),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt1_mmu_xpe3_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT1_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT2
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT2.
 */
#define READ_THDI_PORT_PG_CNTRS_RT2m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT2m_BLKACC,3,n,p,THDI_PORT_PG_CNTRS_RT2m_OFFSET,i,(m._thdi_port_pg_cntrs_rt2),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2m_BLKACC,3,n,p,THDI_PORT_PG_CNTRS_RT2m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2m_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2m_BLKACC,3,-1,p,THDI_PORT_PG_CNTRS_RT2m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE0m_OFFSET,i,(m._thdi_port_pg_cntrs_rt2_mmu_xpe0_ipipe0),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2_mmu_xpe0_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE3m_OFFSET,i,(m._thdi_port_pg_cntrs_rt2_mmu_xpe0_ipipe3),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2_mmu_xpe0_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT2_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE0m_OFFSET,i,(m._thdi_port_pg_cntrs_rt2_mmu_xpe1_ipipe0),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2_mmu_xpe1_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE3m_OFFSET,i,(m._thdi_port_pg_cntrs_rt2_mmu_xpe1_ipipe3),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2_mmu_xpe1_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT2_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE1m_OFFSET,i,(m._thdi_port_pg_cntrs_rt2_mmu_xpe2_ipipe1),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2_mmu_xpe2_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE2m_OFFSET,i,(m._thdi_port_pg_cntrs_rt2_mmu_xpe2_ipipe2),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2_mmu_xpe2_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT2_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE1m_OFFSET,i,(m._thdi_port_pg_cntrs_rt2_mmu_xpe3_ipipe1),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2_mmu_xpe3_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE2m_OFFSET,i,(m._thdi_port_pg_cntrs_rt2_mmu_xpe3_ipipe2),2)
#define WRITE_THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_cntrs_rt2_mmu_xpe3_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_RT2_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH1
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH1.
 */
#define READ_THDI_PORT_PG_CNTRS_SH1m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH1m_BLKACC,3,n,p,THDI_PORT_PG_CNTRS_SH1m_OFFSET,i,(m._thdi_port_pg_cntrs_sh1),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1m_BLKACC,3,n,p,THDI_PORT_PG_CNTRS_SH1m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1m_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1m_BLKACC,3,-1,p,THDI_PORT_PG_CNTRS_SH1m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE0m_OFFSET,i,(m._thdi_port_pg_cntrs_sh1_mmu_xpe0_ipipe0),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1_mmu_xpe0_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE3m_OFFSET,i,(m._thdi_port_pg_cntrs_sh1_mmu_xpe0_ipipe3),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1_mmu_xpe0_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH1_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE0m_OFFSET,i,(m._thdi_port_pg_cntrs_sh1_mmu_xpe1_ipipe0),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1_mmu_xpe1_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE3m_OFFSET,i,(m._thdi_port_pg_cntrs_sh1_mmu_xpe1_ipipe3),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1_mmu_xpe1_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH1_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE1m_OFFSET,i,(m._thdi_port_pg_cntrs_sh1_mmu_xpe2_ipipe1),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1_mmu_xpe2_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE2m_OFFSET,i,(m._thdi_port_pg_cntrs_sh1_mmu_xpe2_ipipe2),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1_mmu_xpe2_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH1_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE1m_OFFSET,i,(m._thdi_port_pg_cntrs_sh1_mmu_xpe3_ipipe1),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1_mmu_xpe3_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     58
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE2m_OFFSET,i,(m._thdi_port_pg_cntrs_sh1_mmu_xpe3_ipipe2),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh1_mmu_xpe3_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH1_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH2
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH2.
 */
#define READ_THDI_PORT_PG_CNTRS_SH2m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH2m_BLKACC,3,n,p,THDI_PORT_PG_CNTRS_SH2m_OFFSET,i,(m._thdi_port_pg_cntrs_sh2),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2m(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2m_BLKACC,3,n,p,THDI_PORT_PG_CNTRS_SH2m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2m_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2m_BLKACC,3,-1,p,THDI_PORT_PG_CNTRS_SH2m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE0m_OFFSET,i,(m._thdi_port_pg_cntrs_sh2_mmu_xpe0_ipipe0),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2_mmu_xpe0_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE3m_OFFSET,i,(m._thdi_port_pg_cntrs_sh2_mmu_xpe0_ipipe3),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2_mmu_xpe0_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH2_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE0m_OFFSET,i,(m._thdi_port_pg_cntrs_sh2_mmu_xpe1_ipipe0),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2_mmu_xpe1_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE3m_OFFSET,i,(m._thdi_port_pg_cntrs_sh2_mmu_xpe1_ipipe3),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2_mmu_xpe1_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH2_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE1m_OFFSET,i,(m._thdi_port_pg_cntrs_sh2_mmu_xpe2_ipipe1),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2_mmu_xpe2_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE2m_OFFSET,i,(m._thdi_port_pg_cntrs_sh2_mmu_xpe2_ipipe2),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2_mmu_xpe2_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH2_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE1m_OFFSET,i,(m._thdi_port_pg_cntrs_sh2_mmu_xpe3_ipipe1),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2_mmu_xpe3_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     53
 */
/*
 * These macros can be used to access THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE2m_OFFSET,i,(m._thdi_port_pg_cntrs_sh2_mmu_xpe3_ipipe2),2)
#define WRITE_THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._thdi_port_pg_cntrs_sh2_mmu_xpe3_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CNTRS_SH2_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_PG_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     91
 */
/*
 * These macros can be used to access THDI_PORT_PG_CONFIG.
 */
#define READ_THDI_PORT_PG_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_PG_CONFIGm_BLKACC,3,0,p,THDI_PORT_PG_CONFIGm_OFFSET,i,(m._thdi_port_pg_config),3)
#define WRITE_THDI_PORT_PG_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_PG_CONFIGm_BLKACC,3,0,p,THDI_PORT_PG_CONFIGm_OFFSET,i,&(m._thdi_port_pg_config),3)

/*******************************************************************************
 * End of 'THDI_PORT_PG_CONFIGm'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_PG_SPID
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_PG_SPID.
 */
#define READ_THDI_PORT_PG_SPIDr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_PG_SPIDr_BLKACC,3,0,p,THDI_PORT_PG_SPIDr_OFFSET,0,(r._thdi_port_pg_spid),1)
#define WRITE_THDI_PORT_PG_SPIDr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_PG_SPIDr_BLKACC,3,0,p,THDI_PORT_PG_SPIDr_OFFSET,0,&(r._thdi_port_pg_spid),1)

/*******************************************************************************
 * End of 'THDI_PORT_PG_SPIDr'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_PRI_GRP
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_PRI_GRP.
 */
#define READ_THDI_PORT_PRI_GRPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_PRI_GRPr_BLKACC,3,0,p,THDI_PORT_PRI_GRPr_OFFSET,i,(r._thdi_port_pri_grp),1)
#define WRITE_THDI_PORT_PRI_GRPr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_PRI_GRPr_BLKACC,3,0,p,THDI_PORT_PRI_GRPr_OFFSET,i,&(r._thdi_port_pri_grp),1)

/*******************************************************************************
 * End of 'THDI_PORT_PRI_GRPr'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_PRI_GRP0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_PRI_GRP0.
 */
#define READ_THDI_PORT_PRI_GRP0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_PRI_GRP0r_BLKACC,3,0,p,THDI_PORT_PRI_GRP0r_OFFSET,0,(r._thdi_port_pri_grp0),1)
#define WRITE_THDI_PORT_PRI_GRP0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_PRI_GRP0r_BLKACC,3,0,p,THDI_PORT_PRI_GRP0r_OFFSET,0,&(r._thdi_port_pri_grp0),1)

/*******************************************************************************
 * End of 'THDI_PORT_PRI_GRP0r'
 */




/*******************************************************************************
 * REGISTER:  THDI_PORT_PRI_GRP1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_PORT_PRI_GRP1.
 */
#define READ_THDI_PORT_PRI_GRP1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_PORT_PRI_GRP1r_BLKACC,3,0,p,THDI_PORT_PRI_GRP1r_OFFSET,0,(r._thdi_port_pri_grp1),1)
#define WRITE_THDI_PORT_PRI_GRP1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_PORT_PRI_GRP1r_BLKACC,3,0,p,THDI_PORT_PRI_GRP1r_OFFSET,0,&(r._thdi_port_pri_grp1),1)

/*******************************************************************************
 * End of 'THDI_PORT_PRI_GRP1r'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_BST
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access THDI_PORT_SP_BST.
 */
#define READ_THDI_PORT_SP_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_BSTm_BLKACC,3,n,p,THDI_PORT_SP_BSTm_OFFSET,i,(m._thdi_port_sp_bst),1)
#define WRITE_THDI_PORT_SP_BSTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BSTm_BLKACC,3,n,p,THDI_PORT_SP_BSTm_OFFSET,i,&(m._thdi_port_sp_bst),1)
#define WRITE_THDI_PORT_SP_BSTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BSTm_BLKACC,3,-1,p,THDI_PORT_SP_BSTm_OFFSET,i,&(m._thdi_port_sp_bst),1)

/*******************************************************************************
 * End of 'THDI_PORT_SP_BSTm'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_BST_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access THDI_PORT_SP_BST_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_PORT_SP_BST_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_BST_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE0_IPIPE0m_OFFSET,i,(m._thdi_port_sp_bst_mmu_xpe0_ipipe0),1)
#define WRITE_THDI_PORT_SP_BST_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BST_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._thdi_port_sp_bst_mmu_xpe0_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_PORT_SP_BST_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_BST_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access THDI_PORT_SP_BST_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_PORT_SP_BST_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_BST_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE0_IPIPE3m_OFFSET,i,(m._thdi_port_sp_bst_mmu_xpe0_ipipe3),1)
#define WRITE_THDI_PORT_SP_BST_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BST_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._thdi_port_sp_bst_mmu_xpe0_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_PORT_SP_BST_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_BST_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access THDI_PORT_SP_BST_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_PORT_SP_BST_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_BST_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE1_IPIPE0m_OFFSET,i,(m._thdi_port_sp_bst_mmu_xpe1_ipipe0),1)
#define WRITE_THDI_PORT_SP_BST_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BST_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._thdi_port_sp_bst_mmu_xpe1_ipipe0),1)

/*******************************************************************************
 * End of 'THDI_PORT_SP_BST_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_BST_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access THDI_PORT_SP_BST_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_PORT_SP_BST_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_BST_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE1_IPIPE3m_OFFSET,i,(m._thdi_port_sp_bst_mmu_xpe1_ipipe3),1)
#define WRITE_THDI_PORT_SP_BST_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BST_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._thdi_port_sp_bst_mmu_xpe1_ipipe3),1)

/*******************************************************************************
 * End of 'THDI_PORT_SP_BST_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_BST_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access THDI_PORT_SP_BST_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_PORT_SP_BST_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_BST_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE2_IPIPE1m_OFFSET,i,(m._thdi_port_sp_bst_mmu_xpe2_ipipe1),1)
#define WRITE_THDI_PORT_SP_BST_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BST_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._thdi_port_sp_bst_mmu_xpe2_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_PORT_SP_BST_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_BST_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access THDI_PORT_SP_BST_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_PORT_SP_BST_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_BST_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE2_IPIPE2m_OFFSET,i,(m._thdi_port_sp_bst_mmu_xpe2_ipipe2),1)
#define WRITE_THDI_PORT_SP_BST_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BST_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._thdi_port_sp_bst_mmu_xpe2_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_PORT_SP_BST_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_BST_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access THDI_PORT_SP_BST_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_PORT_SP_BST_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_BST_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE3_IPIPE1m_OFFSET,i,(m._thdi_port_sp_bst_mmu_xpe3_ipipe1),1)
#define WRITE_THDI_PORT_SP_BST_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BST_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._thdi_port_sp_bst_mmu_xpe3_ipipe1),1)

/*******************************************************************************
 * End of 'THDI_PORT_SP_BST_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_BST_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     16
 */
/*
 * These macros can be used to access THDI_PORT_SP_BST_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_PORT_SP_BST_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_BST_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE3_IPIPE2m_OFFSET,i,(m._thdi_port_sp_bst_mmu_xpe3_ipipe2),1)
#define WRITE_THDI_PORT_SP_BST_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_BST_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_BST_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._thdi_port_sp_bst_mmu_xpe3_ipipe2),1)

/*******************************************************************************
 * End of 'THDI_PORT_SP_BST_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_RT
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_RT.
 */
#define READ_THDI_PORT_SP_CNTRS_RTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_RTm_BLKACC,3,n,p,THDI_PORT_SP_CNTRS_RTm_OFFSET,i,(m._thdi_port_sp_cntrs_rt),2)
#define WRITE_THDI_PORT_SP_CNTRS_RTm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RTm_BLKACC,3,n,p,THDI_PORT_SP_CNTRS_RTm_OFFSET,i,&(m._thdi_port_sp_cntrs_rt),2)
#define WRITE_THDI_PORT_SP_CNTRS_RTm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RTm_BLKACC,3,-1,p,THDI_PORT_SP_CNTRS_RTm_OFFSET,i,&(m._thdi_port_sp_cntrs_rt),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_RTm'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE0m_OFFSET,i,(m._thdi_port_sp_cntrs_rt_mmu_xpe0_ipipe0),2)
#define WRITE_THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._thdi_port_sp_cntrs_rt_mmu_xpe0_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE3m_OFFSET,i,(m._thdi_port_sp_cntrs_rt_mmu_xpe0_ipipe3),2)
#define WRITE_THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._thdi_port_sp_cntrs_rt_mmu_xpe0_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_RT_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE0m_OFFSET,i,(m._thdi_port_sp_cntrs_rt_mmu_xpe1_ipipe0),2)
#define WRITE_THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._thdi_port_sp_cntrs_rt_mmu_xpe1_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE3m_OFFSET,i,(m._thdi_port_sp_cntrs_rt_mmu_xpe1_ipipe3),2)
#define WRITE_THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._thdi_port_sp_cntrs_rt_mmu_xpe1_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_RT_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE1m_OFFSET,i,(m._thdi_port_sp_cntrs_rt_mmu_xpe2_ipipe1),2)
#define WRITE_THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._thdi_port_sp_cntrs_rt_mmu_xpe2_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE2m_OFFSET,i,(m._thdi_port_sp_cntrs_rt_mmu_xpe2_ipipe2),2)
#define WRITE_THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._thdi_port_sp_cntrs_rt_mmu_xpe2_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_RT_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE1m_OFFSET,i,(m._thdi_port_sp_cntrs_rt_mmu_xpe3_ipipe1),2)
#define WRITE_THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._thdi_port_sp_cntrs_rt_mmu_xpe3_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE2m_OFFSET,i,(m._thdi_port_sp_cntrs_rt_mmu_xpe3_ipipe2),2)
#define WRITE_THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._thdi_port_sp_cntrs_rt_mmu_xpe3_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_RT_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_SH
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_SH.
 */
#define READ_THDI_PORT_SP_CNTRS_SHm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_SHm_BLKACC,3,n,p,THDI_PORT_SP_CNTRS_SHm_OFFSET,i,(m._thdi_port_sp_cntrs_sh),2)
#define WRITE_THDI_PORT_SP_CNTRS_SHm(u,n,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SHm_BLKACC,3,n,p,THDI_PORT_SP_CNTRS_SHm_OFFSET,i,&(m._thdi_port_sp_cntrs_sh),2)
#define WRITE_THDI_PORT_SP_CNTRS_SHm_ALL(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SHm_BLKACC,3,-1,p,THDI_PORT_SP_CNTRS_SHm_OFFSET,i,&(m._thdi_port_sp_cntrs_sh),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_SHm'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE0.
 */
#define READ_THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE0m_OFFSET,i,(m._thdi_port_sp_cntrs_sh_mmu_xpe0_ipipe0),2)
#define WRITE_THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE0m_OFFSET,i,&(m._thdi_port_sp_cntrs_sh_mmu_xpe0_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE3.
 */
#define READ_THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE3m_OFFSET,i,(m._thdi_port_sp_cntrs_sh_mmu_xpe0_ipipe3),2)
#define WRITE_THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE3m_OFFSET,i,&(m._thdi_port_sp_cntrs_sh_mmu_xpe0_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_SH_MMU_XPE0_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE0.
 */
#define READ_THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE0m_OFFSET,i,(m._thdi_port_sp_cntrs_sh_mmu_xpe1_ipipe0),2)
#define WRITE_THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE0m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE0m_OFFSET,i,&(m._thdi_port_sp_cntrs_sh_mmu_xpe1_ipipe0),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE3.
 */
#define READ_THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE3m_OFFSET,i,(m._thdi_port_sp_cntrs_sh_mmu_xpe1_ipipe3),2)
#define WRITE_THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE3m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE3m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE3m_OFFSET,i,&(m._thdi_port_sp_cntrs_sh_mmu_xpe1_ipipe3),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_SH_MMU_XPE1_IPIPE3m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE1.
 */
#define READ_THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE1m_OFFSET,i,(m._thdi_port_sp_cntrs_sh_mmu_xpe2_ipipe1),2)
#define WRITE_THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE1m_OFFSET,i,&(m._thdi_port_sp_cntrs_sh_mmu_xpe2_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE2.
 */
#define READ_THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE2m_OFFSET,i,(m._thdi_port_sp_cntrs_sh_mmu_xpe2_ipipe2),2)
#define WRITE_THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE2m_OFFSET,i,&(m._thdi_port_sp_cntrs_sh_mmu_xpe2_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_SH_MMU_XPE2_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE1.
 */
#define READ_THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE1m_OFFSET,i,(m._thdi_port_sp_cntrs_sh_mmu_xpe3_ipipe1),2)
#define WRITE_THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE1m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE1m_OFFSET,i,&(m._thdi_port_sp_cntrs_sh_mmu_xpe3_ipipe1),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     41
 */
/*
 * These macros can be used to access THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE2.
 */
#define READ_THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE2m_OFFSET,i,(m._thdi_port_sp_cntrs_sh_mmu_xpe3_ipipe2),2)
#define WRITE_THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE2m_BLKACC,3,0,p,THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE2m_OFFSET,i,&(m._thdi_port_sp_cntrs_sh_mmu_xpe3_ipipe2),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CNTRS_SH_MMU_XPE3_IPIPE2m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access THDI_PORT_SP_CONFIG.
 */
#define READ_THDI_PORT_SP_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CONFIGm_BLKACC,3,0,p,THDI_PORT_SP_CONFIGm_OFFSET,i,(m._thdi_port_sp_config),2)
#define WRITE_THDI_PORT_SP_CONFIGm(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CONFIGm_BLKACC,3,0,p,THDI_PORT_SP_CONFIGm_OFFSET,i,&(m._thdi_port_sp_config),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CONFIGm'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CONFIG0
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access THDI_PORT_SP_CONFIG0.
 */
#define READ_THDI_PORT_SP_CONFIG0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CONFIG0m_BLKACC,3,0,p,THDI_PORT_SP_CONFIG0m_OFFSET,i,(m._thdi_port_sp_config0),2)
#define WRITE_THDI_PORT_SP_CONFIG0m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CONFIG0m_BLKACC,3,0,p,THDI_PORT_SP_CONFIG0m_OFFSET,i,&(m._thdi_port_sp_config0),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CONFIG0m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CONFIG1
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access THDI_PORT_SP_CONFIG1.
 */
#define READ_THDI_PORT_SP_CONFIG1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CONFIG1m_BLKACC,3,0,p,THDI_PORT_SP_CONFIG1m_OFFSET,i,(m._thdi_port_sp_config1),2)
#define WRITE_THDI_PORT_SP_CONFIG1m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CONFIG1m_BLKACC,3,0,p,THDI_PORT_SP_CONFIG1m_OFFSET,i,&(m._thdi_port_sp_config1),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CONFIG1m'
 */




/*******************************************************************************
 * MEMORY:  THDI_PORT_SP_CONFIG2
 * BLOCKS:   MMU_XPE
 * SIZE:     55
 */
/*
 * These macros can be used to access THDI_PORT_SP_CONFIG2.
 */
#define READ_THDI_PORT_SP_CONFIG2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_read(u,THDI_PORT_SP_CONFIG2m_BLKACC,3,0,p,THDI_PORT_SP_CONFIG2m_OFFSET,i,(m._thdi_port_sp_config2),2)
#define WRITE_THDI_PORT_SP_CONFIG2m(u,p,i,m) bcmbd_cmicd_mem_unique_block_write(u,THDI_PORT_SP_CONFIG2m_BLKACC,3,0,p,THDI_PORT_SP_CONFIG2m_OFFSET,i,&(m._thdi_port_sp_config2),2)

/*******************************************************************************
 * End of 'THDI_PORT_SP_CONFIG2m'
 */




/*******************************************************************************
 * REGISTER:  THDI_TOTAL_CELL_COUNT_PUBLIC_POOL
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_TOTAL_CELL_COUNT_PUBLIC_POOL.
 */
#define READ_THDI_TOTAL_CELL_COUNT_PUBLIC_POOLr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_TOTAL_CELL_COUNT_PUBLIC_POOLr_BLKACC,3,0,p,THDI_TOTAL_CELL_COUNT_PUBLIC_POOLr_OFFSET,0,(r._thdi_total_cell_count_public_pool),1)
#define WRITE_THDI_TOTAL_CELL_COUNT_PUBLIC_POOLr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_TOTAL_CELL_COUNT_PUBLIC_POOLr_BLKACC,3,0,p,THDI_TOTAL_CELL_COUNT_PUBLIC_POOLr_OFFSET,0,&(r._thdi_total_cell_count_public_pool),1)

/*******************************************************************************
 * End of 'THDI_TOTAL_CELL_COUNT_PUBLIC_POOLr'
 */




/*******************************************************************************
 * REGISTER:  THDI_TO_OOBFC_SP_ST
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access THDI_TO_OOBFC_SP_ST.
 */
#define READ_THDI_TO_OOBFC_SP_STr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDI_TO_OOBFC_SP_STr_BLKACC,5,0,p,THDI_TO_OOBFC_SP_STr_OFFSET,0,(r._thdi_to_oobfc_sp_st),1)
#define WRITE_THDI_TO_OOBFC_SP_STr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDI_TO_OOBFC_SP_STr_BLKACC,5,0,p,THDI_TO_OOBFC_SP_STr_OFFSET,0,&(r._thdi_to_oobfc_sp_st),1)

/*******************************************************************************
 * End of 'THDI_TO_OOBFC_SP_STr'
 */




/*******************************************************************************
 * REGISTER:  THDO_TO_OOBFC_SP_ST
 * BLOCKS:   MMU_GLB
 * SIZE:     32
 */
/*
 * These macros can be used to access THDO_TO_OOBFC_SP_ST.
 */
#define READ_THDO_TO_OOBFC_SP_STr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDO_TO_OOBFC_SP_STr_BLKACC,5,0,p,THDO_TO_OOBFC_SP_STr_OFFSET,0,(r._thdo_to_oobfc_sp_st),1)
#define WRITE_THDO_TO_OOBFC_SP_STr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDO_TO_OOBFC_SP_STr_BLKACC,5,0,p,THDO_TO_OOBFC_SP_STr_OFFSET,0,&(r._thdo_to_oobfc_sp_st),1)

/*******************************************************************************
 * End of 'THDO_TO_OOBFC_SP_STr'
 */




/*******************************************************************************
 * REGISTER:  THDU_BST_STAT
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_BST_STAT.
 */
#define READ_THDU_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_BST_STATr_BLKACC,3,0,p,THDU_BST_STATr_OFFSET,0,(r._thdu_bst_stat),2)
#define WRITE_THDU_BST_STATr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_BST_STATr_BLKACC,3,0,p,THDU_BST_STATr_OFFSET,0,&(r._thdu_bst_stat),2)

/*******************************************************************************
 * End of 'THDU_BST_STATr'
 */




/*******************************************************************************
 * REGISTER:  THDU_CNG_STATE_RESET
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_CNG_STATE_RESET.
 */
#define READ_THDU_CNG_STATE_RESETr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_CNG_STATE_RESETr_BLKACC,3,n,p,THDU_CNG_STATE_RESETr_OFFSET,0,(r._thdu_cng_state_reset),1)
#define WRITE_THDU_CNG_STATE_RESETr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESETr_BLKACC,3,n,p,THDU_CNG_STATE_RESETr_OFFSET,0,&(r._thdu_cng_state_reset),1)
#define WRITE_THDU_CNG_STATE_RESETr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESETr_BLKACC,3,-1,p,THDU_CNG_STATE_RESETr_OFFSET,0,&(r._thdu_cng_state_reset),1)

/*******************************************************************************
 * End of 'THDU_CNG_STATE_RESETr'
 */




/*******************************************************************************
 * REGISTER:  THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE0.
 */
#define READ_THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE0r_OFFSET,0,(r._thdu_cng_state_reset_mmu_xpe0_epipe0),1)
#define WRITE_THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE0r_OFFSET,0,&(r._thdu_cng_state_reset_mmu_xpe0_epipe0),1)

/*******************************************************************************
 * End of 'THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE1.
 */
#define READ_THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE1r_OFFSET,0,(r._thdu_cng_state_reset_mmu_xpe0_epipe1),1)
#define WRITE_THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE1r_OFFSET,0,&(r._thdu_cng_state_reset_mmu_xpe0_epipe1),1)

/*******************************************************************************
 * End of 'THDU_CNG_STATE_RESET_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE2.
 */
#define READ_THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE2r_OFFSET,0,(r._thdu_cng_state_reset_mmu_xpe1_epipe2),1)
#define WRITE_THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE2r_OFFSET,0,&(r._thdu_cng_state_reset_mmu_xpe1_epipe2),1)

/*******************************************************************************
 * End of 'THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE3.
 */
#define READ_THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE3r_OFFSET,0,(r._thdu_cng_state_reset_mmu_xpe1_epipe3),1)
#define WRITE_THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE3r_OFFSET,0,&(r._thdu_cng_state_reset_mmu_xpe1_epipe3),1)

/*******************************************************************************
 * End of 'THDU_CNG_STATE_RESET_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE0.
 */
#define READ_THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE0r_OFFSET,0,(r._thdu_cng_state_reset_mmu_xpe2_epipe0),1)
#define WRITE_THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE0r_OFFSET,0,&(r._thdu_cng_state_reset_mmu_xpe2_epipe0),1)

/*******************************************************************************
 * End of 'THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE1.
 */
#define READ_THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE1r_OFFSET,0,(r._thdu_cng_state_reset_mmu_xpe2_epipe1),1)
#define WRITE_THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE1r_OFFSET,0,&(r._thdu_cng_state_reset_mmu_xpe2_epipe1),1)

/*******************************************************************************
 * End of 'THDU_CNG_STATE_RESET_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE2.
 */
#define READ_THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE2r_OFFSET,0,(r._thdu_cng_state_reset_mmu_xpe3_epipe2),1)
#define WRITE_THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE2r_OFFSET,0,&(r._thdu_cng_state_reset_mmu_xpe3_epipe2),1)

/*******************************************************************************
 * End of 'THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE3.
 */
#define READ_THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE3r_OFFSET,0,(r._thdu_cng_state_reset_mmu_xpe3_epipe3),1)
#define WRITE_THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE3r_OFFSET,0,&(r._thdu_cng_state_reset_mmu_xpe3_epipe3),1)

/*******************************************************************************
 * End of 'THDU_CNG_STATE_RESET_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDU_MEMORY_0_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_MEMORY_0_TM.
 */
#define READ_THDU_MEMORY_0_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_MEMORY_0_TMr_BLKACC,3,0,p,THDU_MEMORY_0_TMr_OFFSET,0,(r._thdu_memory_0_tm),2)
#define WRITE_THDU_MEMORY_0_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_MEMORY_0_TMr_BLKACC,3,0,p,THDU_MEMORY_0_TMr_OFFSET,0,&(r._thdu_memory_0_tm),2)

/*******************************************************************************
 * End of 'THDU_MEMORY_0_TMr'
 */




/*******************************************************************************
 * REGISTER:  THDU_MEMORY_1_TM_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_MEMORY_1_TM_64.
 */
#define READ_THDU_MEMORY_1_TM_64r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_MEMORY_1_TM_64r_BLKACC,3,0,p,THDU_MEMORY_1_TM_64r_OFFSET,0,(r._thdu_memory_1_tm_64),2)
#define WRITE_THDU_MEMORY_1_TM_64r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_MEMORY_1_TM_64r_BLKACC,3,0,p,THDU_MEMORY_1_TM_64r_OFFSET,0,&(r._thdu_memory_1_tm_64),2)

/*******************************************************************************
 * End of 'THDU_MEMORY_1_TM_64r'
 */




/*******************************************************************************
 * REGISTER:  THDU_OUTPUT_PORT_RX_ENABLE_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_OUTPUT_PORT_RX_ENABLE_64.
 */
#define READ_THDU_OUTPUT_PORT_RX_ENABLE_64r(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_OUTPUT_PORT_RX_ENABLE_64r_BLKACC,3,n,p,THDU_OUTPUT_PORT_RX_ENABLE_64r_OFFSET,0,(r._thdu_output_port_rx_enable_64),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64r(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64r_BLKACC,3,n,p,THDU_OUTPUT_PORT_RX_ENABLE_64r_OFFSET,0,&(r._thdu_output_port_rx_enable_64),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64r_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64r_BLKACC,3,-1,p,THDU_OUTPUT_PORT_RX_ENABLE_64r_OFFSET,0,&(r._thdu_output_port_rx_enable_64),2)

/*******************************************************************************
 * End of 'THDU_OUTPUT_PORT_RX_ENABLE_64r'
 */




/*******************************************************************************
 * REGISTER:  THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE0.
 */
#define READ_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE0r_OFFSET,0,(r._thdu_output_port_rx_enable_64_mmu_xpe0_epipe0),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE0r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE0r_OFFSET,0,&(r._thdu_output_port_rx_enable_64_mmu_xpe0_epipe0),2)

/*******************************************************************************
 * End of 'THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE1.
 */
#define READ_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE1r_OFFSET,0,(r._thdu_output_port_rx_enable_64_mmu_xpe0_epipe1),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE1r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE1r_OFFSET,0,&(r._thdu_output_port_rx_enable_64_mmu_xpe0_epipe1),2)

/*******************************************************************************
 * End of 'THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE0_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE2.
 */
#define READ_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE2r_OFFSET,0,(r._thdu_output_port_rx_enable_64_mmu_xpe1_epipe2),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE2r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE2r_OFFSET,0,&(r._thdu_output_port_rx_enable_64_mmu_xpe1_epipe2),2)

/*******************************************************************************
 * End of 'THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE3.
 */
#define READ_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE3r_OFFSET,0,(r._thdu_output_port_rx_enable_64_mmu_xpe1_epipe3),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE3r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE3r_OFFSET,0,&(r._thdu_output_port_rx_enable_64_mmu_xpe1_epipe3),2)

/*******************************************************************************
 * End of 'THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE1_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE0.
 */
#define READ_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE0r_OFFSET,0,(r._thdu_output_port_rx_enable_64_mmu_xpe2_epipe0),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE0r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE0r_OFFSET,0,&(r._thdu_output_port_rx_enable_64_mmu_xpe2_epipe0),2)

/*******************************************************************************
 * End of 'THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE1.
 */
#define READ_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE1r_OFFSET,0,(r._thdu_output_port_rx_enable_64_mmu_xpe2_epipe1),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE1r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE1r_OFFSET,0,&(r._thdu_output_port_rx_enable_64_mmu_xpe2_epipe1),2)

/*******************************************************************************
 * End of 'THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE2_EPIPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE2.
 */
#define READ_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE2r_OFFSET,0,(r._thdu_output_port_rx_enable_64_mmu_xpe3_epipe2),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE2r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE2r_OFFSET,0,&(r._thdu_output_port_rx_enable_64_mmu_xpe3_epipe2),2)

/*******************************************************************************
 * End of 'THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE3.
 */
#define READ_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE3r_OFFSET,0,(r._thdu_output_port_rx_enable_64_mmu_xpe3_epipe3),2)
#define WRITE_THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE3r_BLKACC,3,0,p,THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE3r_OFFSET,0,&(r._thdu_output_port_rx_enable_64_mmu_xpe3_epipe3),2)

/*******************************************************************************
 * End of 'THDU_OUTPUT_PORT_RX_ENABLE_64_MMU_XPE3_EPIPE3r'
 */




/*******************************************************************************
 * REGISTER:  THDU_PORT_E2ECC_COS_SPID
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_PORT_E2ECC_COS_SPID.
 */
#define READ_THDU_PORT_E2ECC_COS_SPIDr(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_PORT_E2ECC_COS_SPIDr_BLKACC,3,n,p,THDU_PORT_E2ECC_COS_SPIDr_OFFSET,0,(r._thdu_port_e2ecc_cos_spid),1)
#define WRITE_THDU_PORT_E2ECC_COS_SPIDr(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_PORT_E2ECC_COS_SPIDr_BLKACC,3,n,p,THDU_PORT_E2ECC_COS_SPIDr_OFFSET,0,&(r._thdu_port_e2ecc_cos_spid),1)
#define WRITE_THDU_PORT_E2ECC_COS_SPIDr_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_PORT_E2ECC_COS_SPIDr_BLKACC,3,-1,p,THDU_PORT_E2ECC_COS_SPIDr_OFFSET,0,&(r._thdu_port_e2ecc_cos_spid),1)

/*******************************************************************************
 * End of 'THDU_PORT_E2ECC_COS_SPIDr'
 */




/*******************************************************************************
 * REGISTER:  THDU_PORT_E2ECC_COS_SPID_MMU_XPE0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_PORT_E2ECC_COS_SPID_MMU_XPE0.
 */
#define READ_THDU_PORT_E2ECC_COS_SPID_MMU_XPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_PORT_E2ECC_COS_SPID_MMU_XPE0r_BLKACC,3,0,p,THDU_PORT_E2ECC_COS_SPID_MMU_XPE0r_OFFSET,0,(r._thdu_port_e2ecc_cos_spid_mmu_xpe0),1)
#define WRITE_THDU_PORT_E2ECC_COS_SPID_MMU_XPE0r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_PORT_E2ECC_COS_SPID_MMU_XPE0r_BLKACC,3,0,p,THDU_PORT_E2ECC_COS_SPID_MMU_XPE0r_OFFSET,0,&(r._thdu_port_e2ecc_cos_spid_mmu_xpe0),1)

/*******************************************************************************
 * End of 'THDU_PORT_E2ECC_COS_SPID_MMU_XPE0r'
 */




/*******************************************************************************
 * REGISTER:  THDU_PORT_E2ECC_COS_SPID_MMU_XPE1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_PORT_E2ECC_COS_SPID_MMU_XPE1.
 */
#define READ_THDU_PORT_E2ECC_COS_SPID_MMU_XPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_PORT_E2ECC_COS_SPID_MMU_XPE1r_BLKACC,3,0,p,THDU_PORT_E2ECC_COS_SPID_MMU_XPE1r_OFFSET,0,(r._thdu_port_e2ecc_cos_spid_mmu_xpe1),1)
#define WRITE_THDU_PORT_E2ECC_COS_SPID_MMU_XPE1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_PORT_E2ECC_COS_SPID_MMU_XPE1r_BLKACC,3,0,p,THDU_PORT_E2ECC_COS_SPID_MMU_XPE1r_OFFSET,0,&(r._thdu_port_e2ecc_cos_spid_mmu_xpe1),1)

/*******************************************************************************
 * End of 'THDU_PORT_E2ECC_COS_SPID_MMU_XPE1r'
 */




/*******************************************************************************
 * REGISTER:  THDU_PORT_E2ECC_COS_SPID_MMU_XPE2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_PORT_E2ECC_COS_SPID_MMU_XPE2.
 */
#define READ_THDU_PORT_E2ECC_COS_SPID_MMU_XPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_PORT_E2ECC_COS_SPID_MMU_XPE2r_BLKACC,3,0,p,THDU_PORT_E2ECC_COS_SPID_MMU_XPE2r_OFFSET,0,(r._thdu_port_e2ecc_cos_spid_mmu_xpe2),1)
#define WRITE_THDU_PORT_E2ECC_COS_SPID_MMU_XPE2r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_PORT_E2ECC_COS_SPID_MMU_XPE2r_BLKACC,3,0,p,THDU_PORT_E2ECC_COS_SPID_MMU_XPE2r_OFFSET,0,&(r._thdu_port_e2ecc_cos_spid_mmu_xpe2),1)

/*******************************************************************************
 * End of 'THDU_PORT_E2ECC_COS_SPID_MMU_XPE2r'
 */




/*******************************************************************************
 * REGISTER:  THDU_PORT_E2ECC_COS_SPID_MMU_XPE3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THDU_PORT_E2ECC_COS_SPID_MMU_XPE3.
 */
#define READ_THDU_PORT_E2ECC_COS_SPID_MMU_XPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THDU_PORT_E2ECC_COS_SPID_MMU_XPE3r_BLKACC,3,0,p,THDU_PORT_E2ECC_COS_SPID_MMU_XPE3r_OFFSET,0,(r._thdu_port_e2ecc_cos_spid_mmu_xpe3),1)
#define WRITE_THDU_PORT_E2ECC_COS_SPID_MMU_XPE3r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THDU_PORT_E2ECC_COS_SPID_MMU_XPE3r_BLKACC,3,0,p,THDU_PORT_E2ECC_COS_SPID_MMU_XPE3r_OFFSET,0,&(r._thdu_port_e2ecc_cos_spid_mmu_xpe3),1)

/*******************************************************************************
 * End of 'THDU_PORT_E2ECC_COS_SPID_MMU_XPE3r'
 */




/*******************************************************************************
 * REGISTER:  THD_MISC_CONTROL
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access THD_MISC_CONTROL.
 */
#define READ_THD_MISC_CONTROLr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,THD_MISC_CONTROLr_BLKACC,3,0,p,THD_MISC_CONTROLr_OFFSET,0,(r._thd_misc_control),1)
#define WRITE_THD_MISC_CONTROLr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,THD_MISC_CONTROLr_BLKACC,3,0,p,THD_MISC_CONTROLr_OFFSET,0,&(r._thd_misc_control),1)

/*******************************************************************************
 * End of 'THD_MISC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TIME_DOMAIN
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TIME_DOMAIN.
 */
#define READ_TIME_DOMAINr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,TIME_DOMAINr_BLKACC,3,0,p,TIME_DOMAINr_OFFSET,i,(r._time_domain),1)
#define WRITE_TIME_DOMAINr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,TIME_DOMAINr_BLKACC,3,0,p,TIME_DOMAINr_OFFSET,i,&(r._time_domain),1)

/*******************************************************************************
 * End of 'TIME_DOMAINr'
 */




/*******************************************************************************
 * REGISTER:  TJBR
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TJBR.
 */
#define READ_TJBRr(u,p,r) bcmbd_cmicd_reg_port_read(u,TJBRr_BLKACC,p,TJBRr_OFFSET,0,(r._tjbr), 2)
#define WRITE_TJBRr(u,p,r) bcmbd_cmicd_reg_port_write(u,TJBRr_BLKACC,p,TJBRr_OFFSET,0,&(r._tjbr), 2)

/*******************************************************************************
 * End of 'TJBRr'
 */




/*******************************************************************************
 * REGISTER:  TLCL
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TLCL.
 */
#define READ_TLCLr(u,p,r) bcmbd_cmicd_reg_port_read(u,TLCLr_BLKACC,p,TLCLr_OFFSET,0,(r._tlcl), 2)
#define WRITE_TLCLr(u,p,r) bcmbd_cmicd_reg_port_write(u,TLCLr_BLKACC,p,TLCLr_OFFSET,0,&(r._tlcl), 2)

/*******************************************************************************
 * End of 'TLCLr'
 */




/*******************************************************************************
 * REGISTER:  TMCA
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TMCA.
 */
#define READ_TMCAr(u,p,r) bcmbd_cmicd_reg_port_read(u,TMCAr_BLKACC,p,TMCAr_OFFSET,0,(r._tmca), 2)
#define WRITE_TMCAr(u,p,r) bcmbd_cmicd_reg_port_write(u,TMCAr_BLKACC,p,TMCAr_OFFSET,0,&(r._tmca), 2)

/*******************************************************************************
 * End of 'TMCAr'
 */




/*******************************************************************************
 * REGISTER:  TMCL
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TMCL.
 */
#define READ_TMCLr(u,p,r) bcmbd_cmicd_reg_port_read(u,TMCLr_BLKACC,p,TMCLr_OFFSET,0,(r._tmcl), 2)
#define WRITE_TMCLr(u,p,r) bcmbd_cmicd_reg_port_write(u,TMCLr_BLKACC,p,TMCLr_OFFSET,0,&(r._tmcl), 2)

/*******************************************************************************
 * End of 'TMCLr'
 */




/*******************************************************************************
 * REGISTER:  TMGV
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TMGV.
 */
#define READ_TMGVr(u,p,r) bcmbd_cmicd_reg_port_read(u,TMGVr_BLKACC,p,TMGVr_OFFSET,0,(r._tmgv), 2)
#define WRITE_TMGVr(u,p,r) bcmbd_cmicd_reg_port_write(u,TMGVr_BLKACC,p,TMGVr_OFFSET,0,&(r._tmgv), 2)

/*******************************************************************************
 * End of 'TMGVr'
 */




/*******************************************************************************
 * REGISTER:  TM_RESEQMEM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TM_RESEQMEM.
 */
#define READ_TM_RESEQMEMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TM_RESEQMEMr_BLKACC,3,0,p,TM_RESEQMEMr_OFFSET,0,(r._tm_reseqmem),1)
#define WRITE_TM_RESEQMEMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TM_RESEQMEMr_BLKACC,3,0,p,TM_RESEQMEMr_OFFSET,0,&(r._tm_reseqmem),1)

/*******************************************************************************
 * End of 'TM_RESEQMEMr'
 */




/*******************************************************************************
 * REGISTER:  TNCL
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TNCL.
 */
#define READ_TNCLr(u,p,r) bcmbd_cmicd_reg_port_read(u,TNCLr_BLKACC,p,TNCLr_OFFSET,0,(r._tncl), 2)
#define WRITE_TNCLr(u,p,r) bcmbd_cmicd_reg_port_write(u,TNCLr_BLKACC,p,TNCLr_OFFSET,0,&(r._tncl), 2)

/*******************************************************************************
 * End of 'TNCLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_AVS_INTR_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_AVS_INTR_STATUS.
 */
#define READ_TOP_AVS_INTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_AVS_INTR_STATUSr_BLKACC,7,TOP_AVS_INTR_STATUSr_OFFSET,0,(r._top_avs_intr_status), 1)
#define WRITE_TOP_AVS_INTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_AVS_INTR_STATUSr_BLKACC,7,TOP_AVS_INTR_STATUSr_OFFSET,0,&(r._top_avs_intr_status), 1)

/*******************************************************************************
 * End of 'TOP_AVS_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_AVS_SEL_REG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_AVS_SEL_REG.
 */
#define READ_TOP_AVS_SEL_REGr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_AVS_SEL_REGr_BLKACC,7,TOP_AVS_SEL_REGr_OFFSET,0,(r._top_avs_sel_reg), 1)
#define WRITE_TOP_AVS_SEL_REGr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_AVS_SEL_REGr_BLKACC,7,TOP_AVS_SEL_REGr_OFFSET,0,&(r._top_avs_sel_reg), 1)

/*******************************************************************************
 * End of 'TOP_AVS_SEL_REGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_0.
 */
#define READ_TOP_BS_PLL0_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL0_CTRL_0r_BLKACC,7,TOP_BS_PLL0_CTRL_0r_OFFSET,0,(r._top_bs_pll0_ctrl_0), 1)
#define WRITE_TOP_BS_PLL0_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL0_CTRL_0r_BLKACC,7,TOP_BS_PLL0_CTRL_0r_OFFSET,0,&(r._top_bs_pll0_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_1.
 */
#define READ_TOP_BS_PLL0_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL0_CTRL_1r_BLKACC,7,TOP_BS_PLL0_CTRL_1r_OFFSET,0,(r._top_bs_pll0_ctrl_1), 1)
#define WRITE_TOP_BS_PLL0_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL0_CTRL_1r_BLKACC,7,TOP_BS_PLL0_CTRL_1r_OFFSET,0,&(r._top_bs_pll0_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_2.
 */
#define READ_TOP_BS_PLL0_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL0_CTRL_2r_BLKACC,7,TOP_BS_PLL0_CTRL_2r_OFFSET,0,(r._top_bs_pll0_ctrl_2), 1)
#define WRITE_TOP_BS_PLL0_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL0_CTRL_2r_BLKACC,7,TOP_BS_PLL0_CTRL_2r_OFFSET,0,&(r._top_bs_pll0_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_3.
 */
#define READ_TOP_BS_PLL0_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL0_CTRL_3r_BLKACC,7,TOP_BS_PLL0_CTRL_3r_OFFSET,0,(r._top_bs_pll0_ctrl_3), 1)
#define WRITE_TOP_BS_PLL0_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL0_CTRL_3r_BLKACC,7,TOP_BS_PLL0_CTRL_3r_OFFSET,0,&(r._top_bs_pll0_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_CTRL_4.
 */
#define READ_TOP_BS_PLL0_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL0_CTRL_4r_BLKACC,7,TOP_BS_PLL0_CTRL_4r_OFFSET,0,(r._top_bs_pll0_ctrl_4), 1)
#define WRITE_TOP_BS_PLL0_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL0_CTRL_4r_BLKACC,7,TOP_BS_PLL0_CTRL_4r_OFFSET,0,&(r._top_bs_pll0_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL0_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL0_STATUS.
 */
#define READ_TOP_BS_PLL0_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL0_STATUSr_BLKACC,7,TOP_BS_PLL0_STATUSr_OFFSET,0,(r._top_bs_pll0_status), 1)
#define WRITE_TOP_BS_PLL0_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL0_STATUSr_BLKACC,7,TOP_BS_PLL0_STATUSr_OFFSET,0,&(r._top_bs_pll0_status), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL0_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_0.
 */
#define READ_TOP_BS_PLL1_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL1_CTRL_0r_BLKACC,7,TOP_BS_PLL1_CTRL_0r_OFFSET,0,(r._top_bs_pll1_ctrl_0), 1)
#define WRITE_TOP_BS_PLL1_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL1_CTRL_0r_BLKACC,7,TOP_BS_PLL1_CTRL_0r_OFFSET,0,&(r._top_bs_pll1_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_1.
 */
#define READ_TOP_BS_PLL1_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL1_CTRL_1r_BLKACC,7,TOP_BS_PLL1_CTRL_1r_OFFSET,0,(r._top_bs_pll1_ctrl_1), 1)
#define WRITE_TOP_BS_PLL1_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL1_CTRL_1r_BLKACC,7,TOP_BS_PLL1_CTRL_1r_OFFSET,0,&(r._top_bs_pll1_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_2.
 */
#define READ_TOP_BS_PLL1_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL1_CTRL_2r_BLKACC,7,TOP_BS_PLL1_CTRL_2r_OFFSET,0,(r._top_bs_pll1_ctrl_2), 1)
#define WRITE_TOP_BS_PLL1_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL1_CTRL_2r_BLKACC,7,TOP_BS_PLL1_CTRL_2r_OFFSET,0,&(r._top_bs_pll1_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_3.
 */
#define READ_TOP_BS_PLL1_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL1_CTRL_3r_BLKACC,7,TOP_BS_PLL1_CTRL_3r_OFFSET,0,(r._top_bs_pll1_ctrl_3), 1)
#define WRITE_TOP_BS_PLL1_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL1_CTRL_3r_BLKACC,7,TOP_BS_PLL1_CTRL_3r_OFFSET,0,&(r._top_bs_pll1_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_CTRL_4.
 */
#define READ_TOP_BS_PLL1_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL1_CTRL_4r_BLKACC,7,TOP_BS_PLL1_CTRL_4r_OFFSET,0,(r._top_bs_pll1_ctrl_4), 1)
#define WRITE_TOP_BS_PLL1_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL1_CTRL_4r_BLKACC,7,TOP_BS_PLL1_CTRL_4r_OFFSET,0,&(r._top_bs_pll1_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_BS_PLL1_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_BS_PLL1_STATUS.
 */
#define READ_TOP_BS_PLL1_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_BS_PLL1_STATUSr_BLKACC,7,TOP_BS_PLL1_STATUSr_OFFSET,0,(r._top_bs_pll1_status), 1)
#define WRITE_TOP_BS_PLL1_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_BS_PLL1_STATUSr_BLKACC,7,TOP_BS_PLL1_STATUSr_OFFSET,0,&(r._top_bs_pll1_status), 1)

/*******************************************************************************
 * End of 'TOP_BS_PLL1_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CLOCKING_ENFORCE_PCG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CLOCKING_ENFORCE_PCG.
 */
#define READ_TOP_CLOCKING_ENFORCE_PCGr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CLOCKING_ENFORCE_PCGr_BLKACC,7,TOP_CLOCKING_ENFORCE_PCGr_OFFSET,0,(r._top_clocking_enforce_pcg), 1)
#define WRITE_TOP_CLOCKING_ENFORCE_PCGr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CLOCKING_ENFORCE_PCGr_BLKACC,7,TOP_CLOCKING_ENFORCE_PCGr_OFFSET,0,&(r._top_clocking_enforce_pcg), 1)

/*******************************************************************************
 * End of 'TOP_CLOCKING_ENFORCE_PCGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CLOCKING_ENFORCE_PSG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CLOCKING_ENFORCE_PSG.
 */
#define READ_TOP_CLOCKING_ENFORCE_PSGr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CLOCKING_ENFORCE_PSGr_BLKACC,7,TOP_CLOCKING_ENFORCE_PSGr_OFFSET,0,(r._top_clocking_enforce_psg), 1)
#define WRITE_TOP_CLOCKING_ENFORCE_PSGr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CLOCKING_ENFORCE_PSGr_BLKACC,7,TOP_CLOCKING_ENFORCE_PSGr_OFFSET,0,&(r._top_clocking_enforce_psg), 1)

/*******************************************************************************
 * End of 'TOP_CLOCKING_ENFORCE_PSGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_CLK_FREQ_SEL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_CLK_FREQ_SEL.
 */
#define READ_TOP_CORE_CLK_FREQ_SELr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_CLK_FREQ_SELr_BLKACC,7,TOP_CORE_CLK_FREQ_SELr_OFFSET,0,(r._top_core_clk_freq_sel), 1)
#define WRITE_TOP_CORE_CLK_FREQ_SELr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_CLK_FREQ_SELr_BLKACC,7,TOP_CORE_CLK_FREQ_SELr_OFFSET,0,&(r._top_core_clk_freq_sel), 1)

/*******************************************************************************
 * End of 'TOP_CORE_CLK_FREQ_SELr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL0_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL0_CTRL_0.
 */
#define READ_TOP_CORE_PLL0_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL0_CTRL_0r_BLKACC,7,TOP_CORE_PLL0_CTRL_0r_OFFSET,0,(r._top_core_pll0_ctrl_0), 1)
#define WRITE_TOP_CORE_PLL0_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL0_CTRL_0r_BLKACC,7,TOP_CORE_PLL0_CTRL_0r_OFFSET,0,&(r._top_core_pll0_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL0_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL0_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL0_CTRL_1.
 */
#define READ_TOP_CORE_PLL0_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL0_CTRL_1r_BLKACC,7,TOP_CORE_PLL0_CTRL_1r_OFFSET,0,(r._top_core_pll0_ctrl_1), 1)
#define WRITE_TOP_CORE_PLL0_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL0_CTRL_1r_BLKACC,7,TOP_CORE_PLL0_CTRL_1r_OFFSET,0,&(r._top_core_pll0_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL0_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL0_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL0_CTRL_2.
 */
#define READ_TOP_CORE_PLL0_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL0_CTRL_2r_BLKACC,7,TOP_CORE_PLL0_CTRL_2r_OFFSET,0,(r._top_core_pll0_ctrl_2), 1)
#define WRITE_TOP_CORE_PLL0_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL0_CTRL_2r_BLKACC,7,TOP_CORE_PLL0_CTRL_2r_OFFSET,0,&(r._top_core_pll0_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL0_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL0_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL0_CTRL_3.
 */
#define READ_TOP_CORE_PLL0_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL0_CTRL_3r_BLKACC,7,TOP_CORE_PLL0_CTRL_3r_OFFSET,0,(r._top_core_pll0_ctrl_3), 1)
#define WRITE_TOP_CORE_PLL0_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL0_CTRL_3r_BLKACC,7,TOP_CORE_PLL0_CTRL_3r_OFFSET,0,&(r._top_core_pll0_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL0_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL0_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL0_CTRL_4.
 */
#define READ_TOP_CORE_PLL0_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL0_CTRL_4r_BLKACC,7,TOP_CORE_PLL0_CTRL_4r_OFFSET,0,(r._top_core_pll0_ctrl_4), 1)
#define WRITE_TOP_CORE_PLL0_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL0_CTRL_4r_BLKACC,7,TOP_CORE_PLL0_CTRL_4r_OFFSET,0,&(r._top_core_pll0_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL0_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL0_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL0_STATUS.
 */
#define READ_TOP_CORE_PLL0_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL0_STATUSr_BLKACC,7,TOP_CORE_PLL0_STATUSr_OFFSET,0,(r._top_core_pll0_status), 1)
#define WRITE_TOP_CORE_PLL0_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL0_STATUSr_BLKACC,7,TOP_CORE_PLL0_STATUSr_OFFSET,0,&(r._top_core_pll0_status), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL0_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL1_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL1_CTRL_0.
 */
#define READ_TOP_CORE_PLL1_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL1_CTRL_0r_BLKACC,7,TOP_CORE_PLL1_CTRL_0r_OFFSET,0,(r._top_core_pll1_ctrl_0), 1)
#define WRITE_TOP_CORE_PLL1_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL1_CTRL_0r_BLKACC,7,TOP_CORE_PLL1_CTRL_0r_OFFSET,0,&(r._top_core_pll1_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL1_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL1_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL1_CTRL_1.
 */
#define READ_TOP_CORE_PLL1_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL1_CTRL_1r_BLKACC,7,TOP_CORE_PLL1_CTRL_1r_OFFSET,0,(r._top_core_pll1_ctrl_1), 1)
#define WRITE_TOP_CORE_PLL1_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL1_CTRL_1r_BLKACC,7,TOP_CORE_PLL1_CTRL_1r_OFFSET,0,&(r._top_core_pll1_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL1_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL1_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL1_CTRL_2.
 */
#define READ_TOP_CORE_PLL1_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL1_CTRL_2r_BLKACC,7,TOP_CORE_PLL1_CTRL_2r_OFFSET,0,(r._top_core_pll1_ctrl_2), 1)
#define WRITE_TOP_CORE_PLL1_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL1_CTRL_2r_BLKACC,7,TOP_CORE_PLL1_CTRL_2r_OFFSET,0,&(r._top_core_pll1_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL1_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL1_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL1_CTRL_3.
 */
#define READ_TOP_CORE_PLL1_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL1_CTRL_3r_BLKACC,7,TOP_CORE_PLL1_CTRL_3r_OFFSET,0,(r._top_core_pll1_ctrl_3), 1)
#define WRITE_TOP_CORE_PLL1_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL1_CTRL_3r_BLKACC,7,TOP_CORE_PLL1_CTRL_3r_OFFSET,0,&(r._top_core_pll1_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL1_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL1_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL1_CTRL_4.
 */
#define READ_TOP_CORE_PLL1_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL1_CTRL_4r_BLKACC,7,TOP_CORE_PLL1_CTRL_4r_OFFSET,0,(r._top_core_pll1_ctrl_4), 1)
#define WRITE_TOP_CORE_PLL1_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL1_CTRL_4r_BLKACC,7,TOP_CORE_PLL1_CTRL_4r_OFFSET,0,&(r._top_core_pll1_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL1_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL1_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL1_STATUS.
 */
#define READ_TOP_CORE_PLL1_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL1_STATUSr_BLKACC,7,TOP_CORE_PLL1_STATUSr_OFFSET,0,(r._top_core_pll1_status), 1)
#define WRITE_TOP_CORE_PLL1_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL1_STATUSr_BLKACC,7,TOP_CORE_PLL1_STATUSr_OFFSET,0,&(r._top_core_pll1_status), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL1_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL_CTRL_0.
 */
#define READ_TOP_CORE_PLL_CTRL_0r(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL_CTRL_0r_BLKACC,7,TOP_CORE_PLL_CTRL_0r_OFFSET,(i)*20,(r._top_core_pll_ctrl_0), 1)
#define WRITE_TOP_CORE_PLL_CTRL_0r(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL_CTRL_0r_BLKACC,7,TOP_CORE_PLL_CTRL_0r_OFFSET,(i)*20,&(r._top_core_pll_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL_CTRL_2.
 */
#define READ_TOP_CORE_PLL_CTRL_2r(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL_CTRL_2r_BLKACC,7,TOP_CORE_PLL_CTRL_2r_OFFSET,(i)*20,(r._top_core_pll_ctrl_2), 1)
#define WRITE_TOP_CORE_PLL_CTRL_2r(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL_CTRL_2r_BLKACC,7,TOP_CORE_PLL_CTRL_2r_OFFSET,(i)*20,&(r._top_core_pll_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_CORE_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CORE_PLL_STATUS.
 */
#define READ_TOP_CORE_PLL_STATUSr(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_CORE_PLL_STATUSr_BLKACC,7,TOP_CORE_PLL_STATUSr_OFFSET,(i)*4,(r._top_core_pll_status), 1)
#define WRITE_TOP_CORE_PLL_STATUSr(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_CORE_PLL_STATUSr_BLKACC,7,TOP_CORE_PLL_STATUSr_OFFSET,(i)*4,&(r._top_core_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_CORE_PLL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_CPU2TAP_MEM_TM
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_CPU2TAP_MEM_TM.
 */
#define READ_TOP_CPU2TAP_MEM_TMr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_CPU2TAP_MEM_TMr_BLKACC,7,TOP_CPU2TAP_MEM_TMr_OFFSET,0,(r._top_cpu2tap_mem_tm), 1)
#define WRITE_TOP_CPU2TAP_MEM_TMr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_CPU2TAP_MEM_TMr_BLKACC,7,TOP_CPU2TAP_MEM_TMr_OFFSET,0,&(r._top_cpu2tap_mem_tm), 1)

/*******************************************************************************
 * End of 'TOP_CPU2TAP_MEM_TMr'
 */




/*******************************************************************************
 * REGISTER:  TOP_DEV_REV_ID
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_DEV_REV_ID.
 */
#define READ_TOP_DEV_REV_IDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_DEV_REV_IDr_BLKACC,7,TOP_DEV_REV_IDr_OFFSET,0,(r._top_dev_rev_id), 1)
#define WRITE_TOP_DEV_REV_IDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_DEV_REV_IDr_BLKACC,7,TOP_DEV_REV_IDr_OFFSET,0,&(r._top_dev_rev_id), 1)

/*******************************************************************************
 * End of 'TOP_DEV_REV_IDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_FREQUENCY_SWITCH_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_FREQUENCY_SWITCH_STATUS.
 */
#define READ_TOP_FREQUENCY_SWITCH_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_FREQUENCY_SWITCH_STATUSr_BLKACC,7,TOP_FREQUENCY_SWITCH_STATUSr_OFFSET,0,(r._top_frequency_switch_status), 1)
#define WRITE_TOP_FREQUENCY_SWITCH_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_FREQUENCY_SWITCH_STATUSr_BLKACC,7,TOP_FREQUENCY_SWITCH_STATUSr_OFFSET,0,&(r._top_frequency_switch_status), 1)

/*******************************************************************************
 * End of 'TOP_FREQUENCY_SWITCH_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_FUNC_DEBUG_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_FUNC_DEBUG_STATUS.
 */
#define READ_TOP_FUNC_DEBUG_STATUSr(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_FUNC_DEBUG_STATUSr_BLKACC,7,TOP_FUNC_DEBUG_STATUSr_OFFSET,(i)*4,(r._top_func_debug_status), 1)
#define WRITE_TOP_FUNC_DEBUG_STATUSr(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_FUNC_DEBUG_STATUSr_BLKACC,7,TOP_FUNC_DEBUG_STATUSr_OFFSET,(i)*4,&(r._top_func_debug_status), 1)

/*******************************************************************************
 * End of 'TOP_FUNC_DEBUG_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_FUNC_DEBUG_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_FUNC_DEBUG_STATUS_0.
 */
#define READ_TOP_FUNC_DEBUG_STATUS_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_FUNC_DEBUG_STATUS_0r_BLKACC,7,TOP_FUNC_DEBUG_STATUS_0r_OFFSET,0,(r._top_func_debug_status_0), 1)
#define WRITE_TOP_FUNC_DEBUG_STATUS_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_FUNC_DEBUG_STATUS_0r_BLKACC,7,TOP_FUNC_DEBUG_STATUS_0r_OFFSET,0,&(r._top_func_debug_status_0), 1)

/*******************************************************************************
 * End of 'TOP_FUNC_DEBUG_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_FUNC_DEBUG_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_FUNC_DEBUG_STATUS_1.
 */
#define READ_TOP_FUNC_DEBUG_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_FUNC_DEBUG_STATUS_1r_BLKACC,7,TOP_FUNC_DEBUG_STATUS_1r_OFFSET,0,(r._top_func_debug_status_1), 1)
#define WRITE_TOP_FUNC_DEBUG_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_FUNC_DEBUG_STATUS_1r_BLKACC,7,TOP_FUNC_DEBUG_STATUS_1r_OFFSET,0,&(r._top_func_debug_status_1), 1)

/*******************************************************************************
 * End of 'TOP_FUNC_DEBUG_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_FUNC_DEBUG_STATUS_SEL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_FUNC_DEBUG_STATUS_SEL.
 */
#define READ_TOP_FUNC_DEBUG_STATUS_SELr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_FUNC_DEBUG_STATUS_SELr_BLKACC,7,TOP_FUNC_DEBUG_STATUS_SELr_OFFSET,0,(r._top_func_debug_status_sel), 1)
#define WRITE_TOP_FUNC_DEBUG_STATUS_SELr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_FUNC_DEBUG_STATUS_SELr_BLKACC,7,TOP_FUNC_DEBUG_STATUS_SELr_OFFSET,0,&(r._top_func_debug_status_sel), 1)

/*******************************************************************************
 * End of 'TOP_FUNC_DEBUG_STATUS_SELr'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_CONTROL.
 */
#define READ_TOP_HW_TAP_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_HW_TAP_CONTROLr_BLKACC,7,TOP_HW_TAP_CONTROLr_OFFSET,0,(r._top_hw_tap_control), 1)
#define WRITE_TOP_HW_TAP_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_HW_TAP_CONTROLr_BLKACC,7,TOP_HW_TAP_CONTROLr_OFFSET,0,&(r._top_hw_tap_control), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_MEM_DEBUG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_MEM_DEBUG.
 */
#define READ_TOP_HW_TAP_MEM_DEBUGr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_HW_TAP_MEM_DEBUGr_BLKACC,7,TOP_HW_TAP_MEM_DEBUGr_OFFSET,0,(r._top_hw_tap_mem_debug), 1)
#define WRITE_TOP_HW_TAP_MEM_DEBUGr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_HW_TAP_MEM_DEBUGr_BLKACC,7,TOP_HW_TAP_MEM_DEBUGr_OFFSET,0,&(r._top_hw_tap_mem_debug), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_MEM_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_MEM_ECC_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_MEM_ECC_CTRL_0.
 */
#define READ_TOP_HW_TAP_MEM_ECC_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_HW_TAP_MEM_ECC_CTRL_0r_BLKACC,7,TOP_HW_TAP_MEM_ECC_CTRL_0r_OFFSET,0,(r._top_hw_tap_mem_ecc_ctrl_0), 1)
#define WRITE_TOP_HW_TAP_MEM_ECC_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_HW_TAP_MEM_ECC_CTRL_0r_BLKACC,7,TOP_HW_TAP_MEM_ECC_CTRL_0r_OFFSET,0,&(r._top_hw_tap_mem_ecc_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_MEM_ECC_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_MEM_ECC_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_MEM_ECC_CTRL_1.
 */
#define READ_TOP_HW_TAP_MEM_ECC_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_HW_TAP_MEM_ECC_CTRL_1r_BLKACC,7,TOP_HW_TAP_MEM_ECC_CTRL_1r_OFFSET,0,(r._top_hw_tap_mem_ecc_ctrl_1), 1)
#define WRITE_TOP_HW_TAP_MEM_ECC_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_HW_TAP_MEM_ECC_CTRL_1r_BLKACC,7,TOP_HW_TAP_MEM_ECC_CTRL_1r_OFFSET,0,&(r._top_hw_tap_mem_ecc_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_MEM_ECC_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_MEM_ECC_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_MEM_ECC_STATUS.
 */
#define READ_TOP_HW_TAP_MEM_ECC_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_HW_TAP_MEM_ECC_STATUSr_BLKACC,7,TOP_HW_TAP_MEM_ECC_STATUSr_OFFSET,0,(r._top_hw_tap_mem_ecc_status), 1)
#define WRITE_TOP_HW_TAP_MEM_ECC_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_HW_TAP_MEM_ECC_STATUSr_BLKACC,7,TOP_HW_TAP_MEM_ECC_STATUSr_OFFSET,0,&(r._top_hw_tap_mem_ecc_status), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_MEM_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_HW_TAP_READ_VAILD_DEBUG_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_HW_TAP_READ_VAILD_DEBUG_STATUS.
 */
#define READ_TOP_HW_TAP_READ_VAILD_DEBUG_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_HW_TAP_READ_VAILD_DEBUG_STATUSr_BLKACC,7,TOP_HW_TAP_READ_VAILD_DEBUG_STATUSr_OFFSET,0,(r._top_hw_tap_read_vaild_debug_status), 1)
#define WRITE_TOP_HW_TAP_READ_VAILD_DEBUG_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_HW_TAP_READ_VAILD_DEBUG_STATUSr_BLKACC,7,TOP_HW_TAP_READ_VAILD_DEBUG_STATUSr_OFFSET,0,&(r._top_hw_tap_read_vaild_debug_status), 1)

/*******************************************************************************
 * End of 'TOP_HW_TAP_READ_VAILD_DEBUG_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_INT_REV_ID_REG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_INT_REV_ID_REG.
 */
#define READ_TOP_INT_REV_ID_REGr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_INT_REV_ID_REGr_BLKACC,7,TOP_INT_REV_ID_REGr_OFFSET,0,(r._top_int_rev_id_reg), 1)
#define WRITE_TOP_INT_REV_ID_REGr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_INT_REV_ID_REGr_BLKACC,7,TOP_INT_REV_ID_REGr_OFFSET,0,&(r._top_int_rev_id_reg), 1)

/*******************************************************************************
 * End of 'TOP_INT_REV_ID_REGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_0.
 */
#define READ_TOP_IPROC_PLL_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_IPROC_PLL_CTRL_0r_BLKACC,7,TOP_IPROC_PLL_CTRL_0r_OFFSET,0,(r._top_iproc_pll_ctrl_0), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_IPROC_PLL_CTRL_0r_BLKACC,7,TOP_IPROC_PLL_CTRL_0r_OFFSET,0,&(r._top_iproc_pll_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_1.
 */
#define READ_TOP_IPROC_PLL_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_IPROC_PLL_CTRL_1r_BLKACC,7,TOP_IPROC_PLL_CTRL_1r_OFFSET,0,(r._top_iproc_pll_ctrl_1), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_IPROC_PLL_CTRL_1r_BLKACC,7,TOP_IPROC_PLL_CTRL_1r_OFFSET,0,&(r._top_iproc_pll_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_2.
 */
#define READ_TOP_IPROC_PLL_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_IPROC_PLL_CTRL_2r_BLKACC,7,TOP_IPROC_PLL_CTRL_2r_OFFSET,0,(r._top_iproc_pll_ctrl_2), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_IPROC_PLL_CTRL_2r_BLKACC,7,TOP_IPROC_PLL_CTRL_2r_OFFSET,0,&(r._top_iproc_pll_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_3.
 */
#define READ_TOP_IPROC_PLL_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_IPROC_PLL_CTRL_3r_BLKACC,7,TOP_IPROC_PLL_CTRL_3r_OFFSET,0,(r._top_iproc_pll_ctrl_3), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_IPROC_PLL_CTRL_3r_BLKACC,7,TOP_IPROC_PLL_CTRL_3r_OFFSET,0,&(r._top_iproc_pll_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_CTRL_4.
 */
#define READ_TOP_IPROC_PLL_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_IPROC_PLL_CTRL_4r_BLKACC,7,TOP_IPROC_PLL_CTRL_4r_OFFSET,0,(r._top_iproc_pll_ctrl_4), 1)
#define WRITE_TOP_IPROC_PLL_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_IPROC_PLL_CTRL_4r_BLKACC,7,TOP_IPROC_PLL_CTRL_4r_OFFSET,0,&(r._top_iproc_pll_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_IPROC_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_IPROC_PLL_STATUS.
 */
#define READ_TOP_IPROC_PLL_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_IPROC_PLL_STATUSr_BLKACC,7,TOP_IPROC_PLL_STATUSr_OFFSET,0,(r._top_iproc_pll_status), 1)
#define WRITE_TOP_IPROC_PLL_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_IPROC_PLL_STATUSr_BLKACC,7,TOP_IPROC_PLL_STATUSr_OFFSET,0,&(r._top_iproc_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_IPROC_PLL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_L1_RCVD_CLK_VALID_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_L1_RCVD_CLK_VALID_STATUS_0.
 */
#define READ_TOP_L1_RCVD_CLK_VALID_STATUS_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_L1_RCVD_CLK_VALID_STATUS_0r_BLKACC,7,TOP_L1_RCVD_CLK_VALID_STATUS_0r_OFFSET,0,(r._top_l1_rcvd_clk_valid_status_0), 1)
#define WRITE_TOP_L1_RCVD_CLK_VALID_STATUS_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_L1_RCVD_CLK_VALID_STATUS_0r_BLKACC,7,TOP_L1_RCVD_CLK_VALID_STATUS_0r_OFFSET,0,&(r._top_l1_rcvd_clk_valid_status_0), 1)

/*******************************************************************************
 * End of 'TOP_L1_RCVD_CLK_VALID_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_L1_RCVD_CLK_VALID_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_L1_RCVD_CLK_VALID_STATUS_1.
 */
#define READ_TOP_L1_RCVD_CLK_VALID_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_L1_RCVD_CLK_VALID_STATUS_1r_BLKACC,7,TOP_L1_RCVD_CLK_VALID_STATUS_1r_OFFSET,0,(r._top_l1_rcvd_clk_valid_status_1), 1)
#define WRITE_TOP_L1_RCVD_CLK_VALID_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_L1_RCVD_CLK_VALID_STATUS_1r_BLKACC,7,TOP_L1_RCVD_CLK_VALID_STATUS_1r_OFFSET,0,&(r._top_l1_rcvd_clk_valid_status_1), 1)

/*******************************************************************************
 * End of 'TOP_L1_RCVD_CLK_VALID_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_L1_RCVD_CLK_VALID_STATUS_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_L1_RCVD_CLK_VALID_STATUS_2.
 */
#define READ_TOP_L1_RCVD_CLK_VALID_STATUS_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_L1_RCVD_CLK_VALID_STATUS_2r_BLKACC,7,TOP_L1_RCVD_CLK_VALID_STATUS_2r_OFFSET,0,(r._top_l1_rcvd_clk_valid_status_2), 1)
#define WRITE_TOP_L1_RCVD_CLK_VALID_STATUS_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_L1_RCVD_CLK_VALID_STATUS_2r_BLKACC,7,TOP_L1_RCVD_CLK_VALID_STATUS_2r_OFFSET,0,&(r._top_l1_rcvd_clk_valid_status_2), 1)

/*******************************************************************************
 * End of 'TOP_L1_RCVD_CLK_VALID_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_L1_RCVD_CLK_VALID_STATUS_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_L1_RCVD_CLK_VALID_STATUS_3.
 */
#define READ_TOP_L1_RCVD_CLK_VALID_STATUS_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_L1_RCVD_CLK_VALID_STATUS_3r_BLKACC,7,TOP_L1_RCVD_CLK_VALID_STATUS_3r_OFFSET,0,(r._top_l1_rcvd_clk_valid_status_3), 1)
#define WRITE_TOP_L1_RCVD_CLK_VALID_STATUS_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_L1_RCVD_CLK_VALID_STATUS_3r_BLKACC,7,TOP_L1_RCVD_CLK_VALID_STATUS_3r_OFFSET,0,&(r._top_l1_rcvd_clk_valid_status_3), 1)

/*******************************************************************************
 * End of 'TOP_L1_RCVD_CLK_VALID_STATUS_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_LVM_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_LVM_CONTROL.
 */
#define READ_TOP_LVM_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_LVM_CONTROLr_BLKACC,7,TOP_LVM_CONTROLr_OFFSET,0,(r._top_lvm_control), 1)
#define WRITE_TOP_LVM_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_LVM_CONTROLr_BLKACC,7,TOP_LVM_CONTROLr_OFFSET,0,&(r._top_lvm_control), 1)

/*******************************************************************************
 * End of 'TOP_LVM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_MISC_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_MISC_CONTROL.
 */
#define READ_TOP_MISC_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_MISC_CONTROLr_BLKACC,7,TOP_MISC_CONTROLr_OFFSET,0,(r._top_misc_control), 1)
#define WRITE_TOP_MISC_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_MISC_CONTROLr_BLKACC,7,TOP_MISC_CONTROLr_OFFSET,0,&(r._top_misc_control), 1)

/*******************************************************************************
 * End of 'TOP_MISC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_MISC_CONTROL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_MISC_CONTROL_2.
 */
#define READ_TOP_MISC_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_MISC_CONTROL_2r_BLKACC,7,TOP_MISC_CONTROL_2r_OFFSET,0,(r._top_misc_control_2), 1)
#define WRITE_TOP_MISC_CONTROL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_MISC_CONTROL_2r_BLKACC,7,TOP_MISC_CONTROL_2r_OFFSET,0,&(r._top_misc_control_2), 1)

/*******************************************************************************
 * End of 'TOP_MISC_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_MISC_GENERIC_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_MISC_GENERIC_CONTROL.
 */
#define READ_TOP_MISC_GENERIC_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_MISC_GENERIC_CONTROLr_BLKACC,7,TOP_MISC_GENERIC_CONTROLr_OFFSET,0,(r._top_misc_generic_control), 1)
#define WRITE_TOP_MISC_GENERIC_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_MISC_GENERIC_CONTROLr_BLKACC,7,TOP_MISC_GENERIC_CONTROLr_OFFSET,0,&(r._top_misc_generic_control), 1)

/*******************************************************************************
 * End of 'TOP_MISC_GENERIC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_MISC_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_MISC_STATUS.
 */
#define READ_TOP_MISC_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_MISC_STATUSr_BLKACC,7,TOP_MISC_STATUSr_OFFSET,0,(r._top_misc_status), 1)
#define WRITE_TOP_MISC_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_MISC_STATUSr_BLKACC,7,TOP_MISC_STATUSr_OFFSET,0,&(r._top_misc_status), 1)

/*******************************************************************************
 * End of 'TOP_MISC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_MISC_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_MISC_STATUS_1.
 */
#define READ_TOP_MISC_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_MISC_STATUS_1r_BLKACC,7,TOP_MISC_STATUS_1r_OFFSET,0,(r._top_misc_status_1), 1)
#define WRITE_TOP_MISC_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_MISC_STATUS_1r_BLKACC,7,TOP_MISC_STATUS_1r_OFFSET,0,&(r._top_misc_status_1), 1)

/*******************************************************************************
 * End of 'TOP_MISC_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_OSC_COUNT_STAT
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_OSC_COUNT_STAT.
 */
#define READ_TOP_OSC_COUNT_STATr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_OSC_COUNT_STATr_BLKACC,7,TOP_OSC_COUNT_STATr_OFFSET,0,(r._top_osc_count_stat), 1)
#define WRITE_TOP_OSC_COUNT_STATr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_OSC_COUNT_STATr_BLKACC,7,TOP_OSC_COUNT_STATr_OFFSET,0,&(r._top_osc_count_stat), 1)

/*******************************************************************************
 * End of 'TOP_OSC_COUNT_STATr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PM_PORT_EN_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PM_PORT_EN_STATUS_0.
 */
#define READ_TOP_PM_PORT_EN_STATUS_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PM_PORT_EN_STATUS_0r_BLKACC,7,TOP_PM_PORT_EN_STATUS_0r_OFFSET,0,(r._top_pm_port_en_status_0), 1)
#define WRITE_TOP_PM_PORT_EN_STATUS_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PM_PORT_EN_STATUS_0r_BLKACC,7,TOP_PM_PORT_EN_STATUS_0r_OFFSET,0,&(r._top_pm_port_en_status_0), 1)

/*******************************************************************************
 * End of 'TOP_PM_PORT_EN_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PM_PORT_EN_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PM_PORT_EN_STATUS_1.
 */
#define READ_TOP_PM_PORT_EN_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PM_PORT_EN_STATUS_1r_BLKACC,7,TOP_PM_PORT_EN_STATUS_1r_OFFSET,0,(r._top_pm_port_en_status_1), 1)
#define WRITE_TOP_PM_PORT_EN_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PM_PORT_EN_STATUS_1r_BLKACC,7,TOP_PM_PORT_EN_STATUS_1r_OFFSET,0,&(r._top_pm_port_en_status_1), 1)

/*******************************************************************************
 * End of 'TOP_PM_PORT_EN_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PM_PORT_EN_STATUS_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PM_PORT_EN_STATUS_2.
 */
#define READ_TOP_PM_PORT_EN_STATUS_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PM_PORT_EN_STATUS_2r_BLKACC,7,TOP_PM_PORT_EN_STATUS_2r_OFFSET,0,(r._top_pm_port_en_status_2), 1)
#define WRITE_TOP_PM_PORT_EN_STATUS_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PM_PORT_EN_STATUS_2r_BLKACC,7,TOP_PM_PORT_EN_STATUS_2r_OFFSET,0,&(r._top_pm_port_en_status_2), 1)

/*******************************************************************************
 * End of 'TOP_PM_PORT_EN_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PM_PORT_EN_STATUS_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PM_PORT_EN_STATUS_3.
 */
#define READ_TOP_PM_PORT_EN_STATUS_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PM_PORT_EN_STATUS_3r_BLKACC,7,TOP_PM_PORT_EN_STATUS_3r_OFFSET,0,(r._top_pm_port_en_status_3), 1)
#define WRITE_TOP_PM_PORT_EN_STATUS_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PM_PORT_EN_STATUS_3r_BLKACC,7,TOP_PM_PORT_EN_STATUS_3r_OFFSET,0,&(r._top_pm_port_en_status_3), 1)

/*******************************************************************************
 * End of 'TOP_PM_PORT_EN_STATUS_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PM_PORT_EN_STATUS_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PM_PORT_EN_STATUS_4.
 */
#define READ_TOP_PM_PORT_EN_STATUS_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PM_PORT_EN_STATUS_4r_BLKACC,7,TOP_PM_PORT_EN_STATUS_4r_OFFSET,0,(r._top_pm_port_en_status_4), 1)
#define WRITE_TOP_PM_PORT_EN_STATUS_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PM_PORT_EN_STATUS_4r_BLKACC,7,TOP_PM_PORT_EN_STATUS_4r_OFFSET,0,&(r._top_pm_port_en_status_4), 1)

/*******************************************************************************
 * End of 'TOP_PM_PORT_EN_STATUS_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_0_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_0_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_0_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_0_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_0_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_0_intr_threshold), 1)
#define WRITE_TOP_PVTMON_0_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_0_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_0_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_0_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_0_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_1_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_1_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_1_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_1_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_1_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_1_intr_threshold), 1)
#define WRITE_TOP_PVTMON_1_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_1_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_1_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_1_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_1_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_2_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_2_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_2_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_2_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_2_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_2_intr_threshold), 1)
#define WRITE_TOP_PVTMON_2_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_2_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_2_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_2_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_2_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_3_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_3_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_3_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_3_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_3_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_3_intr_threshold), 1)
#define WRITE_TOP_PVTMON_3_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_3_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_3_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_3_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_3_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_4_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_4_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_4_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_4_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_4_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_4_intr_threshold), 1)
#define WRITE_TOP_PVTMON_4_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_4_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_4_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_4_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_4_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_5_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_5_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_5_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_5_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_5_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_5_intr_threshold), 1)
#define WRITE_TOP_PVTMON_5_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_5_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_5_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_5_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_5_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_6_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_6_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_6_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_6_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_6_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_6_intr_threshold), 1)
#define WRITE_TOP_PVTMON_6_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_6_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_6_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_6_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_6_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_7_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_7_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_7_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_7_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_7_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_7_intr_threshold), 1)
#define WRITE_TOP_PVTMON_7_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_7_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_7_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_7_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_7_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_8_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_8_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_8_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_8_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_8_INTR_THRESHOLDr_OFFSET,0,(r._top_pvtmon_8_intr_threshold), 1)
#define WRITE_TOP_PVTMON_8_INTR_THRESHOLDr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_8_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_8_INTR_THRESHOLDr_OFFSET,0,&(r._top_pvtmon_8_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_8_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_CTRL_0.
 */
#define READ_TOP_PVTMON_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_CTRL_0r_BLKACC,7,TOP_PVTMON_CTRL_0r_OFFSET,0,(r._top_pvtmon_ctrl_0), 1)
#define WRITE_TOP_PVTMON_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_CTRL_0r_BLKACC,7,TOP_PVTMON_CTRL_0r_OFFSET,0,&(r._top_pvtmon_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_CTRL_1.
 */
#define READ_TOP_PVTMON_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_CTRL_1r_BLKACC,7,TOP_PVTMON_CTRL_1r_OFFSET,0,(r._top_pvtmon_ctrl_1), 1)
#define WRITE_TOP_PVTMON_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_CTRL_1r_BLKACC,7,TOP_PVTMON_CTRL_1r_OFFSET,0,&(r._top_pvtmon_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_INTR_MASK
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_INTR_MASK.
 */
#define READ_TOP_PVTMON_INTR_MASKr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_INTR_MASKr_BLKACC,7,TOP_PVTMON_INTR_MASKr_OFFSET,0,(r._top_pvtmon_intr_mask), 1)
#define WRITE_TOP_PVTMON_INTR_MASKr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_INTR_MASKr_BLKACC,7,TOP_PVTMON_INTR_MASKr_OFFSET,0,&(r._top_pvtmon_intr_mask), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_INTR_MASKr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_INTR_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_INTR_STATUS.
 */
#define READ_TOP_PVTMON_INTR_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_INTR_STATUSr_BLKACC,7,TOP_PVTMON_INTR_STATUSr_OFFSET,0,(r._top_pvtmon_intr_status), 1)
#define WRITE_TOP_PVTMON_INTR_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_INTR_STATUSr_BLKACC,7,TOP_PVTMON_INTR_STATUSr_OFFSET,0,&(r._top_pvtmon_intr_status), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_INTR_THRESHOLD
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_INTR_THRESHOLD.
 */
#define READ_TOP_PVTMON_INTR_THRESHOLDr(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_INTR_THRESHOLDr_OFFSET,(i)*4,(r._top_pvtmon_intr_threshold), 1)
#define WRITE_TOP_PVTMON_INTR_THRESHOLDr(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_INTR_THRESHOLDr_BLKACC,7,TOP_PVTMON_INTR_THRESHOLDr_OFFSET,(i)*4,&(r._top_pvtmon_intr_threshold), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_INTR_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT.
 */
#define READ_TOP_PVTMON_RESULTr(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULTr_BLKACC,7,TOP_PVTMON_RESULTr_OFFSET,(i)*4,(r._top_pvtmon_result), 1)
#define WRITE_TOP_PVTMON_RESULTr(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULTr_BLKACC,7,TOP_PVTMON_RESULTr_OFFSET,(i)*4,&(r._top_pvtmon_result), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULTr'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_0.
 */
#define READ_TOP_PVTMON_RESULT_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULT_0r_BLKACC,7,TOP_PVTMON_RESULT_0r_OFFSET,0,(r._top_pvtmon_result_0), 1)
#define WRITE_TOP_PVTMON_RESULT_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULT_0r_BLKACC,7,TOP_PVTMON_RESULT_0r_OFFSET,0,&(r._top_pvtmon_result_0), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_1.
 */
#define READ_TOP_PVTMON_RESULT_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULT_1r_BLKACC,7,TOP_PVTMON_RESULT_1r_OFFSET,0,(r._top_pvtmon_result_1), 1)
#define WRITE_TOP_PVTMON_RESULT_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULT_1r_BLKACC,7,TOP_PVTMON_RESULT_1r_OFFSET,0,&(r._top_pvtmon_result_1), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_2.
 */
#define READ_TOP_PVTMON_RESULT_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULT_2r_BLKACC,7,TOP_PVTMON_RESULT_2r_OFFSET,0,(r._top_pvtmon_result_2), 1)
#define WRITE_TOP_PVTMON_RESULT_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULT_2r_BLKACC,7,TOP_PVTMON_RESULT_2r_OFFSET,0,&(r._top_pvtmon_result_2), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_3.
 */
#define READ_TOP_PVTMON_RESULT_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULT_3r_BLKACC,7,TOP_PVTMON_RESULT_3r_OFFSET,0,(r._top_pvtmon_result_3), 1)
#define WRITE_TOP_PVTMON_RESULT_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULT_3r_BLKACC,7,TOP_PVTMON_RESULT_3r_OFFSET,0,&(r._top_pvtmon_result_3), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_4.
 */
#define READ_TOP_PVTMON_RESULT_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULT_4r_BLKACC,7,TOP_PVTMON_RESULT_4r_OFFSET,0,(r._top_pvtmon_result_4), 1)
#define WRITE_TOP_PVTMON_RESULT_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULT_4r_BLKACC,7,TOP_PVTMON_RESULT_4r_OFFSET,0,&(r._top_pvtmon_result_4), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_5
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_5.
 */
#define READ_TOP_PVTMON_RESULT_5r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULT_5r_BLKACC,7,TOP_PVTMON_RESULT_5r_OFFSET,0,(r._top_pvtmon_result_5), 1)
#define WRITE_TOP_PVTMON_RESULT_5r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULT_5r_BLKACC,7,TOP_PVTMON_RESULT_5r_OFFSET,0,&(r._top_pvtmon_result_5), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_5r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_6
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_6.
 */
#define READ_TOP_PVTMON_RESULT_6r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULT_6r_BLKACC,7,TOP_PVTMON_RESULT_6r_OFFSET,0,(r._top_pvtmon_result_6), 1)
#define WRITE_TOP_PVTMON_RESULT_6r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULT_6r_BLKACC,7,TOP_PVTMON_RESULT_6r_OFFSET,0,&(r._top_pvtmon_result_6), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_6r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_7
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_7.
 */
#define READ_TOP_PVTMON_RESULT_7r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULT_7r_BLKACC,7,TOP_PVTMON_RESULT_7r_OFFSET,0,(r._top_pvtmon_result_7), 1)
#define WRITE_TOP_PVTMON_RESULT_7r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULT_7r_BLKACC,7,TOP_PVTMON_RESULT_7r_OFFSET,0,&(r._top_pvtmon_result_7), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_7r'
 */




/*******************************************************************************
 * REGISTER:  TOP_PVTMON_RESULT_8
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_PVTMON_RESULT_8.
 */
#define READ_TOP_PVTMON_RESULT_8r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_PVTMON_RESULT_8r_BLKACC,7,TOP_PVTMON_RESULT_8r_OFFSET,0,(r._top_pvtmon_result_8), 1)
#define WRITE_TOP_PVTMON_RESULT_8r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_PVTMON_RESULT_8r_BLKACC,7,TOP_PVTMON_RESULT_8r_OFFSET,0,&(r._top_pvtmon_result_8), 1)

/*******************************************************************************
 * End of 'TOP_PVTMON_RESULT_8r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_0_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_0_CONTROL.
 */
#define READ_TOP_RESCAL_0_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_0_CONTROLr_BLKACC,7,TOP_RESCAL_0_CONTROLr_OFFSET,0,(r._top_rescal_0_control), 1)
#define WRITE_TOP_RESCAL_0_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_0_CONTROLr_BLKACC,7,TOP_RESCAL_0_CONTROLr_OFFSET,0,&(r._top_rescal_0_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_0_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_0_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_0_STATUS_0.
 */
#define READ_TOP_RESCAL_0_STATUS_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_0_STATUS_0r_BLKACC,7,TOP_RESCAL_0_STATUS_0r_OFFSET,0,(r._top_rescal_0_status_0), 1)
#define WRITE_TOP_RESCAL_0_STATUS_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_0_STATUS_0r_BLKACC,7,TOP_RESCAL_0_STATUS_0r_OFFSET,0,&(r._top_rescal_0_status_0), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_0_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_0_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_0_STATUS_1.
 */
#define READ_TOP_RESCAL_0_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_0_STATUS_1r_BLKACC,7,TOP_RESCAL_0_STATUS_1r_OFFSET,0,(r._top_rescal_0_status_1), 1)
#define WRITE_TOP_RESCAL_0_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_0_STATUS_1r_BLKACC,7,TOP_RESCAL_0_STATUS_1r_OFFSET,0,&(r._top_rescal_0_status_1), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_0_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_1_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_1_CONTROL.
 */
#define READ_TOP_RESCAL_1_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_1_CONTROLr_BLKACC,7,TOP_RESCAL_1_CONTROLr_OFFSET,0,(r._top_rescal_1_control), 1)
#define WRITE_TOP_RESCAL_1_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_1_CONTROLr_BLKACC,7,TOP_RESCAL_1_CONTROLr_OFFSET,0,&(r._top_rescal_1_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_1_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_1_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_1_STATUS_0.
 */
#define READ_TOP_RESCAL_1_STATUS_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_1_STATUS_0r_BLKACC,7,TOP_RESCAL_1_STATUS_0r_OFFSET,0,(r._top_rescal_1_status_0), 1)
#define WRITE_TOP_RESCAL_1_STATUS_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_1_STATUS_0r_BLKACC,7,TOP_RESCAL_1_STATUS_0r_OFFSET,0,&(r._top_rescal_1_status_0), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_1_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_1_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_1_STATUS_1.
 */
#define READ_TOP_RESCAL_1_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_1_STATUS_1r_BLKACC,7,TOP_RESCAL_1_STATUS_1r_OFFSET,0,(r._top_rescal_1_status_1), 1)
#define WRITE_TOP_RESCAL_1_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_1_STATUS_1r_BLKACC,7,TOP_RESCAL_1_STATUS_1r_OFFSET,0,&(r._top_rescal_1_status_1), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_1_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_2_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_2_CONTROL.
 */
#define READ_TOP_RESCAL_2_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_2_CONTROLr_BLKACC,7,TOP_RESCAL_2_CONTROLr_OFFSET,0,(r._top_rescal_2_control), 1)
#define WRITE_TOP_RESCAL_2_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_2_CONTROLr_BLKACC,7,TOP_RESCAL_2_CONTROLr_OFFSET,0,&(r._top_rescal_2_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_2_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_2_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_2_STATUS_0.
 */
#define READ_TOP_RESCAL_2_STATUS_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_2_STATUS_0r_BLKACC,7,TOP_RESCAL_2_STATUS_0r_OFFSET,0,(r._top_rescal_2_status_0), 1)
#define WRITE_TOP_RESCAL_2_STATUS_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_2_STATUS_0r_BLKACC,7,TOP_RESCAL_2_STATUS_0r_OFFSET,0,&(r._top_rescal_2_status_0), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_2_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_2_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_2_STATUS_1.
 */
#define READ_TOP_RESCAL_2_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_2_STATUS_1r_BLKACC,7,TOP_RESCAL_2_STATUS_1r_OFFSET,0,(r._top_rescal_2_status_1), 1)
#define WRITE_TOP_RESCAL_2_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_2_STATUS_1r_BLKACC,7,TOP_RESCAL_2_STATUS_1r_OFFSET,0,&(r._top_rescal_2_status_1), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_2_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_3_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_3_CONTROL.
 */
#define READ_TOP_RESCAL_3_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_3_CONTROLr_BLKACC,7,TOP_RESCAL_3_CONTROLr_OFFSET,0,(r._top_rescal_3_control), 1)
#define WRITE_TOP_RESCAL_3_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_3_CONTROLr_BLKACC,7,TOP_RESCAL_3_CONTROLr_OFFSET,0,&(r._top_rescal_3_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_3_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_3_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_3_STATUS_0.
 */
#define READ_TOP_RESCAL_3_STATUS_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_3_STATUS_0r_BLKACC,7,TOP_RESCAL_3_STATUS_0r_OFFSET,0,(r._top_rescal_3_status_0), 1)
#define WRITE_TOP_RESCAL_3_STATUS_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_3_STATUS_0r_BLKACC,7,TOP_RESCAL_3_STATUS_0r_OFFSET,0,&(r._top_rescal_3_status_0), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_3_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_3_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_3_STATUS_1.
 */
#define READ_TOP_RESCAL_3_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_3_STATUS_1r_BLKACC,7,TOP_RESCAL_3_STATUS_1r_OFFSET,0,(r._top_rescal_3_status_1), 1)
#define WRITE_TOP_RESCAL_3_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_3_STATUS_1r_BLKACC,7,TOP_RESCAL_3_STATUS_1r_OFFSET,0,&(r._top_rescal_3_status_1), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_3_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_RESCAL_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RESCAL_CONTROL.
 */
#define READ_TOP_RESCAL_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_RESCAL_CONTROLr_BLKACC,7,TOP_RESCAL_CONTROLr_OFFSET,(i)*4,(r._top_rescal_control), 1)
#define WRITE_TOP_RESCAL_CONTROLr(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_RESCAL_CONTROLr_BLKACC,7,TOP_RESCAL_CONTROLr_OFFSET,(i)*4,&(r._top_rescal_control), 1)

/*******************************************************************************
 * End of 'TOP_RESCAL_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_RING_OSC_CTRL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_RING_OSC_CTRL.
 */
#define READ_TOP_RING_OSC_CTRLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_RING_OSC_CTRLr_BLKACC,7,TOP_RING_OSC_CTRLr_OFFSET,0,(r._top_ring_osc_ctrl), 1)
#define WRITE_TOP_RING_OSC_CTRLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_RING_OSC_CTRLr_BLKACC,7,TOP_RING_OSC_CTRLr_OFFSET,0,&(r._top_ring_osc_ctrl), 1)

/*******************************************************************************
 * End of 'TOP_RING_OSC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_SOFT_RESET_REG
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SOFT_RESET_REG.
 */
#define READ_TOP_SOFT_RESET_REGr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_SOFT_RESET_REGr_BLKACC,7,TOP_SOFT_RESET_REGr_OFFSET,0,(r._top_soft_reset_reg), 1)
#define WRITE_TOP_SOFT_RESET_REGr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_SOFT_RESET_REGr_BLKACC,7,TOP_SOFT_RESET_REGr_OFFSET,0,&(r._top_soft_reset_reg), 1)

/*******************************************************************************
 * End of 'TOP_SOFT_RESET_REGr'
 */




/*******************************************************************************
 * REGISTER:  TOP_SOFT_RESET_REG_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SOFT_RESET_REG_2.
 */
#define READ_TOP_SOFT_RESET_REG_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_SOFT_RESET_REG_2r_BLKACC,7,TOP_SOFT_RESET_REG_2r_OFFSET,0,(r._top_soft_reset_reg_2), 1)
#define WRITE_TOP_SOFT_RESET_REG_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_SOFT_RESET_REG_2r_BLKACC,7,TOP_SOFT_RESET_REG_2r_OFFSET,0,&(r._top_soft_reset_reg_2), 1)

/*******************************************************************************
 * End of 'TOP_SOFT_RESET_REG_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_SOFT_RESET_REG_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SOFT_RESET_REG_3.
 */
#define READ_TOP_SOFT_RESET_REG_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_SOFT_RESET_REG_3r_BLKACC,7,TOP_SOFT_RESET_REG_3r_OFFSET,0,(r._top_soft_reset_reg_3), 1)
#define WRITE_TOP_SOFT_RESET_REG_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_SOFT_RESET_REG_3r_BLKACC,7,TOP_SOFT_RESET_REG_3r_OFFSET,0,&(r._top_soft_reset_reg_3), 1)

/*******************************************************************************
 * End of 'TOP_SOFT_RESET_REG_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_SWITCH_FEATURE_ENABLE
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_SWITCH_FEATURE_ENABLE.
 */
#define READ_TOP_SWITCH_FEATURE_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_SWITCH_FEATURE_ENABLEr_BLKACC,7,TOP_SWITCH_FEATURE_ENABLEr_OFFSET,0,(r._top_switch_feature_enable), 1)
#define WRITE_TOP_SWITCH_FEATURE_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_SWITCH_FEATURE_ENABLEr_BLKACC,7,TOP_SWITCH_FEATURE_ENABLEr_OFFSET,0,&(r._top_switch_feature_enable), 1)

/*******************************************************************************
 * End of 'TOP_SWITCH_FEATURE_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TAP_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TAP_CONTROL.
 */
#define READ_TOP_TAP_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TAP_CONTROLr_BLKACC,7,TOP_TAP_CONTROLr_OFFSET,0,(r._top_tap_control), 1)
#define WRITE_TOP_TAP_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TAP_CONTROLr_BLKACC,7,TOP_TAP_CONTROLr_OFFSET,0,&(r._top_tap_control), 1)

/*******************************************************************************
 * End of 'TOP_TAP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_0_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_0_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_0_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_0_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_0_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_0_resolved_speed_status), 1)
#define WRITE_TOP_TSC_0_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_0_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_0_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_0_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_0_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_10_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_10_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_10_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_10_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_10_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_10_resolved_speed_status), 1)
#define WRITE_TOP_TSC_10_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_10_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_10_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_10_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_10_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_11_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_11_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_11_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_11_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_11_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_11_resolved_speed_status), 1)
#define WRITE_TOP_TSC_11_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_11_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_11_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_11_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_11_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_12_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_12_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_12_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_12_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_12_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_12_resolved_speed_status), 1)
#define WRITE_TOP_TSC_12_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_12_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_12_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_12_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_12_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_13_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_13_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_13_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_13_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_13_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_13_resolved_speed_status), 1)
#define WRITE_TOP_TSC_13_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_13_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_13_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_13_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_13_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_14_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_14_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_14_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_14_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_14_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_14_resolved_speed_status), 1)
#define WRITE_TOP_TSC_14_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_14_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_14_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_14_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_14_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_15_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_15_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_15_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_15_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_15_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_15_resolved_speed_status), 1)
#define WRITE_TOP_TSC_15_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_15_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_15_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_15_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_15_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_16_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_16_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_16_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_16_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_16_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_16_resolved_speed_status), 1)
#define WRITE_TOP_TSC_16_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_16_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_16_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_16_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_16_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_17_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_17_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_17_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_17_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_17_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_17_resolved_speed_status), 1)
#define WRITE_TOP_TSC_17_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_17_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_17_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_17_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_17_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_18_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_18_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_18_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_18_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_18_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_18_resolved_speed_status), 1)
#define WRITE_TOP_TSC_18_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_18_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_18_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_18_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_18_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_19_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_19_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_19_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_19_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_19_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_19_resolved_speed_status), 1)
#define WRITE_TOP_TSC_19_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_19_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_19_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_19_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_19_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_1_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_1_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_1_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_1_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_1_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_1_resolved_speed_status), 1)
#define WRITE_TOP_TSC_1_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_1_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_1_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_1_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_1_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_20_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_20_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_20_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_20_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_20_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_20_resolved_speed_status), 1)
#define WRITE_TOP_TSC_20_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_20_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_20_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_20_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_20_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_21_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_21_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_21_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_21_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_21_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_21_resolved_speed_status), 1)
#define WRITE_TOP_TSC_21_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_21_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_21_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_21_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_21_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_22_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_22_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_22_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_22_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_22_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_22_resolved_speed_status), 1)
#define WRITE_TOP_TSC_22_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_22_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_22_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_22_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_22_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_23_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_23_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_23_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_23_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_23_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_23_resolved_speed_status), 1)
#define WRITE_TOP_TSC_23_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_23_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_23_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_23_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_23_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_24_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_24_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_24_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_24_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_24_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_24_resolved_speed_status), 1)
#define WRITE_TOP_TSC_24_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_24_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_24_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_24_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_24_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_25_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_25_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_25_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_25_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_25_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_25_resolved_speed_status), 1)
#define WRITE_TOP_TSC_25_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_25_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_25_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_25_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_25_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_26_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_26_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_26_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_26_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_26_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_26_resolved_speed_status), 1)
#define WRITE_TOP_TSC_26_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_26_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_26_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_26_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_26_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_27_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_27_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_27_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_27_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_27_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_27_resolved_speed_status), 1)
#define WRITE_TOP_TSC_27_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_27_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_27_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_27_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_27_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_28_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_28_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_28_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_28_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_28_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_28_resolved_speed_status), 1)
#define WRITE_TOP_TSC_28_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_28_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_28_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_28_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_28_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_29_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_29_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_29_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_29_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_29_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_29_resolved_speed_status), 1)
#define WRITE_TOP_TSC_29_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_29_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_29_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_29_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_29_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_2_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_2_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_2_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_2_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_2_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_2_resolved_speed_status), 1)
#define WRITE_TOP_TSC_2_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_2_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_2_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_2_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_2_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_30_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_30_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_30_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_30_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_30_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_30_resolved_speed_status), 1)
#define WRITE_TOP_TSC_30_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_30_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_30_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_30_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_30_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_31_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_31_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_31_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_31_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_31_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_31_resolved_speed_status), 1)
#define WRITE_TOP_TSC_31_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_31_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_31_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_31_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_31_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_32_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_32_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_32_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_32_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_32_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_32_resolved_speed_status), 1)
#define WRITE_TOP_TSC_32_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_32_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_32_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_32_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_32_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_3_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_3_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_3_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_3_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_3_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_3_resolved_speed_status), 1)
#define WRITE_TOP_TSC_3_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_3_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_3_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_3_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_3_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_4_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_4_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_4_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_4_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_4_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_4_resolved_speed_status), 1)
#define WRITE_TOP_TSC_4_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_4_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_4_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_4_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_4_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_5_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_5_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_5_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_5_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_5_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_5_resolved_speed_status), 1)
#define WRITE_TOP_TSC_5_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_5_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_5_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_5_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_5_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_6_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_6_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_6_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_6_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_6_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_6_resolved_speed_status), 1)
#define WRITE_TOP_TSC_6_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_6_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_6_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_6_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_6_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_7_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_7_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_7_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_7_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_7_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_7_resolved_speed_status), 1)
#define WRITE_TOP_TSC_7_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_7_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_7_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_7_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_7_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_8_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_8_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_8_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_8_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_8_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_8_resolved_speed_status), 1)
#define WRITE_TOP_TSC_8_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_8_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_8_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_8_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_8_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_9_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_9_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_9_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_9_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_9_RESOLVED_SPEED_STATUSr_OFFSET,0,(r._top_tsc_9_resolved_speed_status), 1)
#define WRITE_TOP_TSC_9_RESOLVED_SPEED_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_9_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_9_RESOLVED_SPEED_STATUSr_OFFSET,0,&(r._top_tsc_9_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_9_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_AFE_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_AFE_PLL_STATUS.
 */
#define READ_TOP_TSC_AFE_PLL_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_AFE_PLL_STATUSr_BLKACC,7,TOP_TSC_AFE_PLL_STATUSr_OFFSET,0,(r._top_tsc_afe_pll_status), 1)
#define WRITE_TOP_TSC_AFE_PLL_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_AFE_PLL_STATUSr_BLKACC,7,TOP_TSC_AFE_PLL_STATUSr_OFFSET,0,&(r._top_tsc_afe_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_AFE_PLL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_ENABLE
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_ENABLE.
 */
#define READ_TOP_TSC_ENABLEr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_ENABLEr_BLKACC,7,TOP_TSC_ENABLEr_OFFSET,0,(r._top_tsc_enable), 1)
#define WRITE_TOP_TSC_ENABLEr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_ENABLEr_BLKACC,7,TOP_TSC_ENABLEr_OFFSET,0,&(r._top_tsc_enable), 1)

/*******************************************************************************
 * End of 'TOP_TSC_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TSC_RESOLVED_SPEED_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TSC_RESOLVED_SPEED_STATUS.
 */
#define READ_TOP_TSC_RESOLVED_SPEED_STATUSr(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_TSC_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_RESOLVED_SPEED_STATUSr_OFFSET,(i)*4,(r._top_tsc_resolved_speed_status), 1)
#define WRITE_TOP_TSC_RESOLVED_SPEED_STATUSr(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_TSC_RESOLVED_SPEED_STATUSr_BLKACC,7,TOP_TSC_RESOLVED_SPEED_STATUSr_OFFSET,(i)*4,&(r._top_tsc_resolved_speed_status), 1)

/*******************************************************************************
 * End of 'TOP_TSC_RESOLVED_SPEED_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_0.
 */
#define READ_TOP_TS_PLL_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TS_PLL_CTRL_0r_BLKACC,7,TOP_TS_PLL_CTRL_0r_OFFSET,0,(r._top_ts_pll_ctrl_0), 1)
#define WRITE_TOP_TS_PLL_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TS_PLL_CTRL_0r_BLKACC,7,TOP_TS_PLL_CTRL_0r_OFFSET,0,&(r._top_ts_pll_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_1.
 */
#define READ_TOP_TS_PLL_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TS_PLL_CTRL_1r_BLKACC,7,TOP_TS_PLL_CTRL_1r_OFFSET,0,(r._top_ts_pll_ctrl_1), 1)
#define WRITE_TOP_TS_PLL_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TS_PLL_CTRL_1r_BLKACC,7,TOP_TS_PLL_CTRL_1r_OFFSET,0,&(r._top_ts_pll_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_2.
 */
#define READ_TOP_TS_PLL_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TS_PLL_CTRL_2r_BLKACC,7,TOP_TS_PLL_CTRL_2r_OFFSET,0,(r._top_ts_pll_ctrl_2), 1)
#define WRITE_TOP_TS_PLL_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TS_PLL_CTRL_2r_BLKACC,7,TOP_TS_PLL_CTRL_2r_OFFSET,0,&(r._top_ts_pll_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_3.
 */
#define READ_TOP_TS_PLL_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TS_PLL_CTRL_3r_BLKACC,7,TOP_TS_PLL_CTRL_3r_OFFSET,0,(r._top_ts_pll_ctrl_3), 1)
#define WRITE_TOP_TS_PLL_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TS_PLL_CTRL_3r_BLKACC,7,TOP_TS_PLL_CTRL_3r_OFFSET,0,&(r._top_ts_pll_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_CTRL_4.
 */
#define READ_TOP_TS_PLL_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TS_PLL_CTRL_4r_BLKACC,7,TOP_TS_PLL_CTRL_4r_OFFSET,0,(r._top_ts_pll_ctrl_4), 1)
#define WRITE_TOP_TS_PLL_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TS_PLL_CTRL_4r_BLKACC,7,TOP_TS_PLL_CTRL_4r_OFFSET,0,&(r._top_ts_pll_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_TS_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_TS_PLL_STATUS.
 */
#define READ_TOP_TS_PLL_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_TS_PLL_STATUSr_BLKACC,7,TOP_TS_PLL_STATUSr_OFFSET,0,(r._top_ts_pll_status), 1)
#define WRITE_TOP_TS_PLL_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_TS_PLL_STATUSr_BLKACC,7,TOP_TS_PLL_STATUSr_OFFSET,0,&(r._top_ts_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_TS_PLL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_UC_TAP_CONTROL
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UC_TAP_CONTROL.
 */
#define READ_TOP_UC_TAP_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UC_TAP_CONTROLr_BLKACC,7,TOP_UC_TAP_CONTROLr_OFFSET,0,(r._top_uc_tap_control), 1)
#define WRITE_TOP_UC_TAP_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UC_TAP_CONTROLr_BLKACC,7,TOP_UC_TAP_CONTROLr_OFFSET,0,&(r._top_uc_tap_control), 1)

/*******************************************************************************
 * End of 'TOP_UC_TAP_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  TOP_UC_TAP_READ_DATA
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UC_TAP_READ_DATA.
 */
#define READ_TOP_UC_TAP_READ_DATAr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UC_TAP_READ_DATAr_BLKACC,7,TOP_UC_TAP_READ_DATAr_OFFSET,0,(r._top_uc_tap_read_data), 1)
#define WRITE_TOP_UC_TAP_READ_DATAr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UC_TAP_READ_DATAr_BLKACC,7,TOP_UC_TAP_READ_DATAr_OFFSET,0,&(r._top_uc_tap_read_data), 1)

/*******************************************************************************
 * End of 'TOP_UC_TAP_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  TOP_UC_TAP_WRITE_DATA
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UC_TAP_WRITE_DATA.
 */
#define READ_TOP_UC_TAP_WRITE_DATAr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UC_TAP_WRITE_DATAr_BLKACC,7,TOP_UC_TAP_WRITE_DATAr_OFFSET,0,(r._top_uc_tap_write_data), 1)
#define WRITE_TOP_UC_TAP_WRITE_DATAr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UC_TAP_WRITE_DATAr_BLKACC,7,TOP_UC_TAP_WRITE_DATAr_OFFSET,0,&(r._top_uc_tap_write_data), 1)

/*******************************************************************************
 * End of 'TOP_UC_TAP_WRITE_DATAr'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_CTRL_0.
 */
#define READ_TOP_UPI_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_CTRL_0r_BLKACC,7,TOP_UPI_CTRL_0r_OFFSET,0,(r._top_upi_ctrl_0), 1)
#define WRITE_TOP_UPI_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_CTRL_0r_BLKACC,7,TOP_UPI_CTRL_0r_OFFSET,0,&(r._top_upi_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_UPI_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_CTRL_1.
 */
#define READ_TOP_UPI_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_CTRL_1r_BLKACC,7,TOP_UPI_CTRL_1r_OFFSET,0,(r._top_upi_ctrl_1), 1)
#define WRITE_TOP_UPI_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_CTRL_1r_BLKACC,7,TOP_UPI_CTRL_1r_OFFSET,0,&(r._top_upi_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_UPI_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_0.
 */
#define READ_TOP_UPI_STATUS_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_0r_BLKACC,7,TOP_UPI_STATUS_0r_OFFSET,0,(r._top_upi_status_0), 1)
#define WRITE_TOP_UPI_STATUS_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_0r_BLKACC,7,TOP_UPI_STATUS_0r_OFFSET,0,&(r._top_upi_status_0), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_1.
 */
#define READ_TOP_UPI_STATUS_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_1r_BLKACC,7,TOP_UPI_STATUS_1r_OFFSET,0,(r._top_upi_status_1), 1)
#define WRITE_TOP_UPI_STATUS_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_1r_BLKACC,7,TOP_UPI_STATUS_1r_OFFSET,0,&(r._top_upi_status_1), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_10
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_10.
 */
#define READ_TOP_UPI_STATUS_10r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_10r_BLKACC,7,TOP_UPI_STATUS_10r_OFFSET,0,(r._top_upi_status_10), 1)
#define WRITE_TOP_UPI_STATUS_10r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_10r_BLKACC,7,TOP_UPI_STATUS_10r_OFFSET,0,&(r._top_upi_status_10), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_10r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_11
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_11.
 */
#define READ_TOP_UPI_STATUS_11r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_11r_BLKACC,7,TOP_UPI_STATUS_11r_OFFSET,0,(r._top_upi_status_11), 1)
#define WRITE_TOP_UPI_STATUS_11r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_11r_BLKACC,7,TOP_UPI_STATUS_11r_OFFSET,0,&(r._top_upi_status_11), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_11r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_12
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_12.
 */
#define READ_TOP_UPI_STATUS_12r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_12r_BLKACC,7,TOP_UPI_STATUS_12r_OFFSET,0,(r._top_upi_status_12), 1)
#define WRITE_TOP_UPI_STATUS_12r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_12r_BLKACC,7,TOP_UPI_STATUS_12r_OFFSET,0,&(r._top_upi_status_12), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_12r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_13
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_13.
 */
#define READ_TOP_UPI_STATUS_13r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_13r_BLKACC,7,TOP_UPI_STATUS_13r_OFFSET,0,(r._top_upi_status_13), 1)
#define WRITE_TOP_UPI_STATUS_13r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_13r_BLKACC,7,TOP_UPI_STATUS_13r_OFFSET,0,&(r._top_upi_status_13), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_13r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_14
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_14.
 */
#define READ_TOP_UPI_STATUS_14r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_14r_BLKACC,7,TOP_UPI_STATUS_14r_OFFSET,0,(r._top_upi_status_14), 1)
#define WRITE_TOP_UPI_STATUS_14r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_14r_BLKACC,7,TOP_UPI_STATUS_14r_OFFSET,0,&(r._top_upi_status_14), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_14r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_15
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_15.
 */
#define READ_TOP_UPI_STATUS_15r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_15r_BLKACC,7,TOP_UPI_STATUS_15r_OFFSET,0,(r._top_upi_status_15), 1)
#define WRITE_TOP_UPI_STATUS_15r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_15r_BLKACC,7,TOP_UPI_STATUS_15r_OFFSET,0,&(r._top_upi_status_15), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_15r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_16
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_16.
 */
#define READ_TOP_UPI_STATUS_16r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_16r_BLKACC,7,TOP_UPI_STATUS_16r_OFFSET,0,(r._top_upi_status_16), 1)
#define WRITE_TOP_UPI_STATUS_16r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_16r_BLKACC,7,TOP_UPI_STATUS_16r_OFFSET,0,&(r._top_upi_status_16), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_16r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_2.
 */
#define READ_TOP_UPI_STATUS_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_2r_BLKACC,7,TOP_UPI_STATUS_2r_OFFSET,0,(r._top_upi_status_2), 1)
#define WRITE_TOP_UPI_STATUS_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_2r_BLKACC,7,TOP_UPI_STATUS_2r_OFFSET,0,&(r._top_upi_status_2), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_3.
 */
#define READ_TOP_UPI_STATUS_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_3r_BLKACC,7,TOP_UPI_STATUS_3r_OFFSET,0,(r._top_upi_status_3), 1)
#define WRITE_TOP_UPI_STATUS_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_3r_BLKACC,7,TOP_UPI_STATUS_3r_OFFSET,0,&(r._top_upi_status_3), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_4.
 */
#define READ_TOP_UPI_STATUS_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_4r_BLKACC,7,TOP_UPI_STATUS_4r_OFFSET,0,(r._top_upi_status_4), 1)
#define WRITE_TOP_UPI_STATUS_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_4r_BLKACC,7,TOP_UPI_STATUS_4r_OFFSET,0,&(r._top_upi_status_4), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_5
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_5.
 */
#define READ_TOP_UPI_STATUS_5r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_5r_BLKACC,7,TOP_UPI_STATUS_5r_OFFSET,0,(r._top_upi_status_5), 1)
#define WRITE_TOP_UPI_STATUS_5r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_5r_BLKACC,7,TOP_UPI_STATUS_5r_OFFSET,0,&(r._top_upi_status_5), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_5r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_6
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_6.
 */
#define READ_TOP_UPI_STATUS_6r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_6r_BLKACC,7,TOP_UPI_STATUS_6r_OFFSET,0,(r._top_upi_status_6), 1)
#define WRITE_TOP_UPI_STATUS_6r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_6r_BLKACC,7,TOP_UPI_STATUS_6r_OFFSET,0,&(r._top_upi_status_6), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_6r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_7
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_7.
 */
#define READ_TOP_UPI_STATUS_7r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_7r_BLKACC,7,TOP_UPI_STATUS_7r_OFFSET,0,(r._top_upi_status_7), 1)
#define WRITE_TOP_UPI_STATUS_7r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_7r_BLKACC,7,TOP_UPI_STATUS_7r_OFFSET,0,&(r._top_upi_status_7), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_7r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_8
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_8.
 */
#define READ_TOP_UPI_STATUS_8r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_8r_BLKACC,7,TOP_UPI_STATUS_8r_OFFSET,0,(r._top_upi_status_8), 1)
#define WRITE_TOP_UPI_STATUS_8r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_8r_BLKACC,7,TOP_UPI_STATUS_8r_OFFSET,0,&(r._top_upi_status_8), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_8r'
 */




/*******************************************************************************
 * REGISTER:  TOP_UPI_STATUS_9
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_UPI_STATUS_9.
 */
#define READ_TOP_UPI_STATUS_9r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_UPI_STATUS_9r_BLKACC,7,TOP_UPI_STATUS_9r_OFFSET,0,(r._top_upi_status_9), 1)
#define WRITE_TOP_UPI_STATUS_9r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_UPI_STATUS_9r_BLKACC,7,TOP_UPI_STATUS_9r_OFFSET,0,&(r._top_upi_status_9), 1)

/*******************************************************************************
 * End of 'TOP_UPI_STATUS_9r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL0_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL0_CTRL_0.
 */
#define READ_TOP_XG_PLL0_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL0_CTRL_0r_BLKACC,7,TOP_XG_PLL0_CTRL_0r_OFFSET,0,(r._top_xg_pll0_ctrl_0), 1)
#define WRITE_TOP_XG_PLL0_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL0_CTRL_0r_BLKACC,7,TOP_XG_PLL0_CTRL_0r_OFFSET,0,&(r._top_xg_pll0_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL0_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL0_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL0_CTRL_1.
 */
#define READ_TOP_XG_PLL0_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL0_CTRL_1r_BLKACC,7,TOP_XG_PLL0_CTRL_1r_OFFSET,0,(r._top_xg_pll0_ctrl_1), 1)
#define WRITE_TOP_XG_PLL0_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL0_CTRL_1r_BLKACC,7,TOP_XG_PLL0_CTRL_1r_OFFSET,0,&(r._top_xg_pll0_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL0_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL0_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL0_CTRL_2.
 */
#define READ_TOP_XG_PLL0_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL0_CTRL_2r_BLKACC,7,TOP_XG_PLL0_CTRL_2r_OFFSET,0,(r._top_xg_pll0_ctrl_2), 1)
#define WRITE_TOP_XG_PLL0_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL0_CTRL_2r_BLKACC,7,TOP_XG_PLL0_CTRL_2r_OFFSET,0,&(r._top_xg_pll0_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL0_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL0_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL0_CTRL_3.
 */
#define READ_TOP_XG_PLL0_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL0_CTRL_3r_BLKACC,7,TOP_XG_PLL0_CTRL_3r_OFFSET,0,(r._top_xg_pll0_ctrl_3), 1)
#define WRITE_TOP_XG_PLL0_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL0_CTRL_3r_BLKACC,7,TOP_XG_PLL0_CTRL_3r_OFFSET,0,&(r._top_xg_pll0_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL0_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL0_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL0_CTRL_4.
 */
#define READ_TOP_XG_PLL0_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL0_CTRL_4r_BLKACC,7,TOP_XG_PLL0_CTRL_4r_OFFSET,0,(r._top_xg_pll0_ctrl_4), 1)
#define WRITE_TOP_XG_PLL0_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL0_CTRL_4r_BLKACC,7,TOP_XG_PLL0_CTRL_4r_OFFSET,0,&(r._top_xg_pll0_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL0_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL0_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL0_STATUS.
 */
#define READ_TOP_XG_PLL0_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL0_STATUSr_BLKACC,7,TOP_XG_PLL0_STATUSr_OFFSET,0,(r._top_xg_pll0_status), 1)
#define WRITE_TOP_XG_PLL0_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL0_STATUSr_BLKACC,7,TOP_XG_PLL0_STATUSr_OFFSET,0,&(r._top_xg_pll0_status), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL0_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL1_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL1_CTRL_0.
 */
#define READ_TOP_XG_PLL1_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL1_CTRL_0r_BLKACC,7,TOP_XG_PLL1_CTRL_0r_OFFSET,0,(r._top_xg_pll1_ctrl_0), 1)
#define WRITE_TOP_XG_PLL1_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL1_CTRL_0r_BLKACC,7,TOP_XG_PLL1_CTRL_0r_OFFSET,0,&(r._top_xg_pll1_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL1_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL1_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL1_CTRL_1.
 */
#define READ_TOP_XG_PLL1_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL1_CTRL_1r_BLKACC,7,TOP_XG_PLL1_CTRL_1r_OFFSET,0,(r._top_xg_pll1_ctrl_1), 1)
#define WRITE_TOP_XG_PLL1_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL1_CTRL_1r_BLKACC,7,TOP_XG_PLL1_CTRL_1r_OFFSET,0,&(r._top_xg_pll1_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL1_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL1_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL1_CTRL_2.
 */
#define READ_TOP_XG_PLL1_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL1_CTRL_2r_BLKACC,7,TOP_XG_PLL1_CTRL_2r_OFFSET,0,(r._top_xg_pll1_ctrl_2), 1)
#define WRITE_TOP_XG_PLL1_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL1_CTRL_2r_BLKACC,7,TOP_XG_PLL1_CTRL_2r_OFFSET,0,&(r._top_xg_pll1_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL1_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL1_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL1_CTRL_3.
 */
#define READ_TOP_XG_PLL1_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL1_CTRL_3r_BLKACC,7,TOP_XG_PLL1_CTRL_3r_OFFSET,0,(r._top_xg_pll1_ctrl_3), 1)
#define WRITE_TOP_XG_PLL1_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL1_CTRL_3r_BLKACC,7,TOP_XG_PLL1_CTRL_3r_OFFSET,0,&(r._top_xg_pll1_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL1_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL1_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL1_CTRL_4.
 */
#define READ_TOP_XG_PLL1_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL1_CTRL_4r_BLKACC,7,TOP_XG_PLL1_CTRL_4r_OFFSET,0,(r._top_xg_pll1_ctrl_4), 1)
#define WRITE_TOP_XG_PLL1_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL1_CTRL_4r_BLKACC,7,TOP_XG_PLL1_CTRL_4r_OFFSET,0,&(r._top_xg_pll1_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL1_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL1_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL1_STATUS.
 */
#define READ_TOP_XG_PLL1_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL1_STATUSr_BLKACC,7,TOP_XG_PLL1_STATUSr_OFFSET,0,(r._top_xg_pll1_status), 1)
#define WRITE_TOP_XG_PLL1_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL1_STATUSr_BLKACC,7,TOP_XG_PLL1_STATUSr_OFFSET,0,&(r._top_xg_pll1_status), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL1_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL2_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL2_CTRL_0.
 */
#define READ_TOP_XG_PLL2_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL2_CTRL_0r_BLKACC,7,TOP_XG_PLL2_CTRL_0r_OFFSET,0,(r._top_xg_pll2_ctrl_0), 1)
#define WRITE_TOP_XG_PLL2_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL2_CTRL_0r_BLKACC,7,TOP_XG_PLL2_CTRL_0r_OFFSET,0,&(r._top_xg_pll2_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL2_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL2_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL2_CTRL_1.
 */
#define READ_TOP_XG_PLL2_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL2_CTRL_1r_BLKACC,7,TOP_XG_PLL2_CTRL_1r_OFFSET,0,(r._top_xg_pll2_ctrl_1), 1)
#define WRITE_TOP_XG_PLL2_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL2_CTRL_1r_BLKACC,7,TOP_XG_PLL2_CTRL_1r_OFFSET,0,&(r._top_xg_pll2_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL2_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL2_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL2_CTRL_2.
 */
#define READ_TOP_XG_PLL2_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL2_CTRL_2r_BLKACC,7,TOP_XG_PLL2_CTRL_2r_OFFSET,0,(r._top_xg_pll2_ctrl_2), 1)
#define WRITE_TOP_XG_PLL2_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL2_CTRL_2r_BLKACC,7,TOP_XG_PLL2_CTRL_2r_OFFSET,0,&(r._top_xg_pll2_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL2_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL2_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL2_CTRL_3.
 */
#define READ_TOP_XG_PLL2_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL2_CTRL_3r_BLKACC,7,TOP_XG_PLL2_CTRL_3r_OFFSET,0,(r._top_xg_pll2_ctrl_3), 1)
#define WRITE_TOP_XG_PLL2_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL2_CTRL_3r_BLKACC,7,TOP_XG_PLL2_CTRL_3r_OFFSET,0,&(r._top_xg_pll2_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL2_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL2_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL2_CTRL_4.
 */
#define READ_TOP_XG_PLL2_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL2_CTRL_4r_BLKACC,7,TOP_XG_PLL2_CTRL_4r_OFFSET,0,(r._top_xg_pll2_ctrl_4), 1)
#define WRITE_TOP_XG_PLL2_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL2_CTRL_4r_BLKACC,7,TOP_XG_PLL2_CTRL_4r_OFFSET,0,&(r._top_xg_pll2_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL2_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL2_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL2_STATUS.
 */
#define READ_TOP_XG_PLL2_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL2_STATUSr_BLKACC,7,TOP_XG_PLL2_STATUSr_OFFSET,0,(r._top_xg_pll2_status), 1)
#define WRITE_TOP_XG_PLL2_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL2_STATUSr_BLKACC,7,TOP_XG_PLL2_STATUSr_OFFSET,0,&(r._top_xg_pll2_status), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL2_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL3_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL3_CTRL_0.
 */
#define READ_TOP_XG_PLL3_CTRL_0r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL3_CTRL_0r_BLKACC,7,TOP_XG_PLL3_CTRL_0r_OFFSET,0,(r._top_xg_pll3_ctrl_0), 1)
#define WRITE_TOP_XG_PLL3_CTRL_0r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL3_CTRL_0r_BLKACC,7,TOP_XG_PLL3_CTRL_0r_OFFSET,0,&(r._top_xg_pll3_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL3_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL3_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL3_CTRL_1.
 */
#define READ_TOP_XG_PLL3_CTRL_1r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL3_CTRL_1r_BLKACC,7,TOP_XG_PLL3_CTRL_1r_OFFSET,0,(r._top_xg_pll3_ctrl_1), 1)
#define WRITE_TOP_XG_PLL3_CTRL_1r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL3_CTRL_1r_BLKACC,7,TOP_XG_PLL3_CTRL_1r_OFFSET,0,&(r._top_xg_pll3_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL3_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL3_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL3_CTRL_2.
 */
#define READ_TOP_XG_PLL3_CTRL_2r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL3_CTRL_2r_BLKACC,7,TOP_XG_PLL3_CTRL_2r_OFFSET,0,(r._top_xg_pll3_ctrl_2), 1)
#define WRITE_TOP_XG_PLL3_CTRL_2r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL3_CTRL_2r_BLKACC,7,TOP_XG_PLL3_CTRL_2r_OFFSET,0,&(r._top_xg_pll3_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL3_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL3_CTRL_3
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL3_CTRL_3.
 */
#define READ_TOP_XG_PLL3_CTRL_3r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL3_CTRL_3r_BLKACC,7,TOP_XG_PLL3_CTRL_3r_OFFSET,0,(r._top_xg_pll3_ctrl_3), 1)
#define WRITE_TOP_XG_PLL3_CTRL_3r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL3_CTRL_3r_BLKACC,7,TOP_XG_PLL3_CTRL_3r_OFFSET,0,&(r._top_xg_pll3_ctrl_3), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL3_CTRL_3r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL3_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL3_CTRL_4.
 */
#define READ_TOP_XG_PLL3_CTRL_4r(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL3_CTRL_4r_BLKACC,7,TOP_XG_PLL3_CTRL_4r_OFFSET,0,(r._top_xg_pll3_ctrl_4), 1)
#define WRITE_TOP_XG_PLL3_CTRL_4r(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL3_CTRL_4r_BLKACC,7,TOP_XG_PLL3_CTRL_4r_OFFSET,0,&(r._top_xg_pll3_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL3_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL3_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL3_STATUS.
 */
#define READ_TOP_XG_PLL3_STATUSr(u,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL3_STATUSr_BLKACC,7,TOP_XG_PLL3_STATUSr_OFFSET,0,(r._top_xg_pll3_status), 1)
#define WRITE_TOP_XG_PLL3_STATUSr(u,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL3_STATUSr_BLKACC,7,TOP_XG_PLL3_STATUSr_OFFSET,0,&(r._top_xg_pll3_status), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL3_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL_CTRL_0
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL_CTRL_0.
 */
#define READ_TOP_XG_PLL_CTRL_0r(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL_CTRL_0r_BLKACC,7,TOP_XG_PLL_CTRL_0r_OFFSET,(i)*24,(r._top_xg_pll_ctrl_0), 1)
#define WRITE_TOP_XG_PLL_CTRL_0r(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL_CTRL_0r_BLKACC,7,TOP_XG_PLL_CTRL_0r_OFFSET,(i)*24,&(r._top_xg_pll_ctrl_0), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL_CTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL_CTRL_1
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL_CTRL_1.
 */
#define READ_TOP_XG_PLL_CTRL_1r(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL_CTRL_1r_BLKACC,7,TOP_XG_PLL_CTRL_1r_OFFSET,(i)*24,(r._top_xg_pll_ctrl_1), 1)
#define WRITE_TOP_XG_PLL_CTRL_1r(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL_CTRL_1r_BLKACC,7,TOP_XG_PLL_CTRL_1r_OFFSET,(i)*24,&(r._top_xg_pll_ctrl_1), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL_CTRL_1r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL_CTRL_2
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL_CTRL_2.
 */
#define READ_TOP_XG_PLL_CTRL_2r(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL_CTRL_2r_BLKACC,7,TOP_XG_PLL_CTRL_2r_OFFSET,(i)*24,(r._top_xg_pll_ctrl_2), 1)
#define WRITE_TOP_XG_PLL_CTRL_2r(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL_CTRL_2r_BLKACC,7,TOP_XG_PLL_CTRL_2r_OFFSET,(i)*24,&(r._top_xg_pll_ctrl_2), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL_CTRL_2r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL_CTRL_4
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL_CTRL_4.
 */
#define READ_TOP_XG_PLL_CTRL_4r(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL_CTRL_4r_BLKACC,7,TOP_XG_PLL_CTRL_4r_OFFSET,(i)*24,(r._top_xg_pll_ctrl_4), 1)
#define WRITE_TOP_XG_PLL_CTRL_4r(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL_CTRL_4r_BLKACC,7,TOP_XG_PLL_CTRL_4r_OFFSET,(i)*24,&(r._top_xg_pll_ctrl_4), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL_CTRL_4r'
 */




/*******************************************************************************
 * REGISTER:  TOP_XG_PLL_STATUS
 * BLOCKS:   TOP
 * SIZE:     32
 */
/*
 * These macros can be used to access TOP_XG_PLL_STATUS.
 */
#define READ_TOP_XG_PLL_STATUSr(u,i,r) bcmbd_cmicd_reg_block_read(u,TOP_XG_PLL_STATUSr_BLKACC,7,TOP_XG_PLL_STATUSr_OFFSET,(i)*24,(r._top_xg_pll_status), 1)
#define WRITE_TOP_XG_PLL_STATUSr(u,i,r) bcmbd_cmicd_reg_block_write(u,TOP_XG_PLL_STATUSr_BLKACC,7,TOP_XG_PLL_STATUSr_OFFSET,(i)*24,&(r._top_xg_pll_status), 1)

/*******************************************************************************
 * End of 'TOP_XG_PLL_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOQ_DEBUG_REG1
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TOQ_DEBUG_REG1.
 */
#define READ_TOQ_DEBUG_REG1r(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TOQ_DEBUG_REG1r_BLKACC,4,0,p,TOQ_DEBUG_REG1r_OFFSET,0,(r._toq_debug_reg1),1)
#define WRITE_TOQ_DEBUG_REG1r(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TOQ_DEBUG_REG1r_BLKACC,4,0,p,TOQ_DEBUG_REG1r_OFFSET,0,&(r._toq_debug_reg1),1)

/*******************************************************************************
 * End of 'TOQ_DEBUG_REG1r'
 */




/*******************************************************************************
 * REGISTER:  TOQ_FATAL
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TOQ_FATAL.
 */
#define READ_TOQ_FATALr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TOQ_FATALr_BLKACC,4,0,p,TOQ_FATALr_OFFSET,0,(r._toq_fatal),1)
#define WRITE_TOQ_FATALr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TOQ_FATALr_BLKACC,4,0,p,TOQ_FATALr_OFFSET,0,&(r._toq_fatal),1)

/*******************************************************************************
 * End of 'TOQ_FATALr'
 */




/*******************************************************************************
 * REGISTER:  TOQ_MC_CACHE_COUNT_DEBUG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TOQ_MC_CACHE_COUNT_DEBUG.
 */
#define READ_TOQ_MC_CACHE_COUNT_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TOQ_MC_CACHE_COUNT_DEBUGr_BLKACC,4,0,p,TOQ_MC_CACHE_COUNT_DEBUGr_OFFSET,0,(r._toq_mc_cache_count_debug),1)
#define WRITE_TOQ_MC_CACHE_COUNT_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TOQ_MC_CACHE_COUNT_DEBUGr_BLKACC,4,0,p,TOQ_MC_CACHE_COUNT_DEBUGr_OFFSET,0,&(r._toq_mc_cache_count_debug),1)

/*******************************************************************************
 * End of 'TOQ_MC_CACHE_COUNT_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  TOQ_MC_CACHE_DEBUG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TOQ_MC_CACHE_DEBUG.
 */
#define READ_TOQ_MC_CACHE_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TOQ_MC_CACHE_DEBUGr_BLKACC,4,0,p,TOQ_MC_CACHE_DEBUGr_OFFSET,0,(r._toq_mc_cache_debug),1)
#define WRITE_TOQ_MC_CACHE_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TOQ_MC_CACHE_DEBUGr_BLKACC,4,0,p,TOQ_MC_CACHE_DEBUGr_OFFSET,0,&(r._toq_mc_cache_debug),1)

/*******************************************************************************
 * End of 'TOQ_MC_CACHE_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  TOQ_STATUS
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TOQ_STATUS.
 */
#define READ_TOQ_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TOQ_STATUSr_BLKACC,4,0,p,TOQ_STATUSr_OFFSET,0,(r._toq_status),1)
#define WRITE_TOQ_STATUSr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TOQ_STATUSr_BLKACC,4,0,p,TOQ_STATUSr_OFFSET,0,&(r._toq_status),1)

/*******************************************************************************
 * End of 'TOQ_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  TOQ_UC_CACHE_COUNT_DEBUG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TOQ_UC_CACHE_COUNT_DEBUG.
 */
#define READ_TOQ_UC_CACHE_COUNT_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TOQ_UC_CACHE_COUNT_DEBUGr_BLKACC,4,0,p,TOQ_UC_CACHE_COUNT_DEBUGr_OFFSET,0,(r._toq_uc_cache_count_debug),1)
#define WRITE_TOQ_UC_CACHE_COUNT_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TOQ_UC_CACHE_COUNT_DEBUGr_BLKACC,4,0,p,TOQ_UC_CACHE_COUNT_DEBUGr_OFFSET,0,&(r._toq_uc_cache_count_debug),1)

/*******************************************************************************
 * End of 'TOQ_UC_CACHE_COUNT_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  TOQ_UC_CACHE_DEBUG
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access TOQ_UC_CACHE_DEBUG.
 */
#define READ_TOQ_UC_CACHE_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,TOQ_UC_CACHE_DEBUGr_BLKACC,4,0,p,TOQ_UC_CACHE_DEBUGr_OFFSET,0,(r._toq_uc_cache_debug),1)
#define WRITE_TOQ_UC_CACHE_DEBUGr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,TOQ_UC_CACHE_DEBUGr_BLKACC,4,0,p,TOQ_UC_CACHE_DEBUGr_OFFSET,0,&(r._toq_uc_cache_debug),1)

/*******************************************************************************
 * End of 'TOQ_UC_CACHE_DEBUGr'
 */




/*******************************************************************************
 * MEMORY:  TOS_FN
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access TOS_FN.
 */
#define READ_TOS_FNm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,TOS_FNm_BLKACC,1,n,0,TOS_FNm_OFFSET,i,(m._tos_fn),1)
#define WRITE_TOS_FNm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,TOS_FNm_BLKACC,1,n,0,TOS_FNm_OFFSET,i,&(m._tos_fn),1)
#define WRITE_TOS_FNm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,TOS_FNm_BLKACC,1,-1,0,TOS_FNm_OFFSET,i,&(m._tos_fn),1)

/*******************************************************************************
 * End of 'TOS_FNm'
 */




/*******************************************************************************
 * REGISTER:  TOS_FN_RAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TOS_FN_RAM_DBGCTRL.
 */
#define READ_TOS_FN_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,TOS_FN_RAM_DBGCTRLr_BLKACC,1,n,0,TOS_FN_RAM_DBGCTRLr_OFFSET,0,(r._tos_fn_ram_dbgctrl),1)
#define WRITE_TOS_FN_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,TOS_FN_RAM_DBGCTRLr_BLKACC,1,n,0,TOS_FN_RAM_DBGCTRLr_OFFSET,0,&(r._tos_fn_ram_dbgctrl),1)
#define WRITE_TOS_FN_RAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,TOS_FN_RAM_DBGCTRLr_BLKACC,1,-1,0,TOS_FN_RAM_DBGCTRLr_OFFSET,0,&(r._tos_fn_ram_dbgctrl),1)

/*******************************************************************************
 * End of 'TOS_FN_RAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  TOVR
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TOVR.
 */
#define READ_TOVRr(u,p,r) bcmbd_cmicd_reg_port_read(u,TOVRr_BLKACC,p,TOVRr_OFFSET,0,(r._tovr), 2)
#define WRITE_TOVRr(u,p,r) bcmbd_cmicd_reg_port_write(u,TOVRr_BLKACC,p,TOVRr_OFFSET,0,&(r._tovr), 2)

/*******************************************************************************
 * End of 'TOVRr'
 */




/*******************************************************************************
 * REGISTER:  TPCE_64
 * BLOCKS:   EPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TPCE_64.
 */
#define READ_TPCE_64r(u,p,r) bcmbd_cmicd_reg_port_read(u,TPCE_64r_BLKACC,p,TPCE_64r_OFFSET,0,(r._tpce_64), 2)
#define WRITE_TPCE_64r(u,p,r) bcmbd_cmicd_reg_port_write(u,TPCE_64r_BLKACC,p,TPCE_64r_OFFSET,0,&(r._tpce_64), 2)

/*******************************************************************************
 * End of 'TPCE_64r'
 */




/*******************************************************************************
 * REGISTER:  TPFC
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPFC.
 */
#define READ_TPFCr(u,p,i,r) bcmbd_cmicd_reg_port_read(u,TPFCr_BLKACC,p,TPFCr_OFFSET,i,(r._tpfc), 2)
#define WRITE_TPFCr(u,p,i,r) bcmbd_cmicd_reg_port_write(u,TPFCr_BLKACC,p,TPFCr_OFFSET,i,&(r._tpfc), 2)

/*******************************************************************************
 * End of 'TPFCr'
 */




/*******************************************************************************
 * REGISTER:  TPFC0
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPFC0.
 */
#define READ_TPFC0r(u,p,r) bcmbd_cmicd_reg_port_read(u,TPFC0r_BLKACC,p,TPFC0r_OFFSET,0,(r._tpfc0), 2)
#define WRITE_TPFC0r(u,p,r) bcmbd_cmicd_reg_port_write(u,TPFC0r_BLKACC,p,TPFC0r_OFFSET,0,&(r._tpfc0), 2)

/*******************************************************************************
 * End of 'TPFC0r'
 */




/*******************************************************************************
 * REGISTER:  TPFC1
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPFC1.
 */
#define READ_TPFC1r(u,p,r) bcmbd_cmicd_reg_port_read(u,TPFC1r_BLKACC,p,TPFC1r_OFFSET,0,(r._tpfc1), 2)
#define WRITE_TPFC1r(u,p,r) bcmbd_cmicd_reg_port_write(u,TPFC1r_BLKACC,p,TPFC1r_OFFSET,0,&(r._tpfc1), 2)

/*******************************************************************************
 * End of 'TPFC1r'
 */




/*******************************************************************************
 * REGISTER:  TPFC2
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPFC2.
 */
#define READ_TPFC2r(u,p,r) bcmbd_cmicd_reg_port_read(u,TPFC2r_BLKACC,p,TPFC2r_OFFSET,0,(r._tpfc2), 2)
#define WRITE_TPFC2r(u,p,r) bcmbd_cmicd_reg_port_write(u,TPFC2r_BLKACC,p,TPFC2r_OFFSET,0,&(r._tpfc2), 2)

/*******************************************************************************
 * End of 'TPFC2r'
 */




/*******************************************************************************
 * REGISTER:  TPFC3
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPFC3.
 */
#define READ_TPFC3r(u,p,r) bcmbd_cmicd_reg_port_read(u,TPFC3r_BLKACC,p,TPFC3r_OFFSET,0,(r._tpfc3), 2)
#define WRITE_TPFC3r(u,p,r) bcmbd_cmicd_reg_port_write(u,TPFC3r_BLKACC,p,TPFC3r_OFFSET,0,&(r._tpfc3), 2)

/*******************************************************************************
 * End of 'TPFC3r'
 */




/*******************************************************************************
 * REGISTER:  TPFC4
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPFC4.
 */
#define READ_TPFC4r(u,p,r) bcmbd_cmicd_reg_port_read(u,TPFC4r_BLKACC,p,TPFC4r_OFFSET,0,(r._tpfc4), 2)
#define WRITE_TPFC4r(u,p,r) bcmbd_cmicd_reg_port_write(u,TPFC4r_BLKACC,p,TPFC4r_OFFSET,0,&(r._tpfc4), 2)

/*******************************************************************************
 * End of 'TPFC4r'
 */




/*******************************************************************************
 * REGISTER:  TPFC5
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPFC5.
 */
#define READ_TPFC5r(u,p,r) bcmbd_cmicd_reg_port_read(u,TPFC5r_BLKACC,p,TPFC5r_OFFSET,0,(r._tpfc5), 2)
#define WRITE_TPFC5r(u,p,r) bcmbd_cmicd_reg_port_write(u,TPFC5r_BLKACC,p,TPFC5r_OFFSET,0,&(r._tpfc5), 2)

/*******************************************************************************
 * End of 'TPFC5r'
 */




/*******************************************************************************
 * REGISTER:  TPFC6
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPFC6.
 */
#define READ_TPFC6r(u,p,r) bcmbd_cmicd_reg_port_read(u,TPFC6r_BLKACC,p,TPFC6r_OFFSET,0,(r._tpfc6), 2)
#define WRITE_TPFC6r(u,p,r) bcmbd_cmicd_reg_port_write(u,TPFC6r_BLKACC,p,TPFC6r_OFFSET,0,&(r._tpfc6), 2)

/*******************************************************************************
 * End of 'TPFC6r'
 */




/*******************************************************************************
 * REGISTER:  TPFC7
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPFC7.
 */
#define READ_TPFC7r(u,p,r) bcmbd_cmicd_reg_port_read(u,TPFC7r_BLKACC,p,TPFC7r_OFFSET,0,(r._tpfc7), 2)
#define WRITE_TPFC7r(u,p,r) bcmbd_cmicd_reg_port_write(u,TPFC7r_BLKACC,p,TPFC7r_OFFSET,0,&(r._tpfc7), 2)

/*******************************************************************************
 * End of 'TPFC7r'
 */




/*******************************************************************************
 * REGISTER:  TPKT
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPKT.
 */
#define READ_TPKTr(u,p,r) bcmbd_cmicd_reg_port_read(u,TPKTr_BLKACC,p,TPKTr_OFFSET,0,(r._tpkt), 2)
#define WRITE_TPKTr(u,p,r) bcmbd_cmicd_reg_port_write(u,TPKTr_BLKACC,p,TPKTr_OFFSET,0,&(r._tpkt), 2)

/*******************************************************************************
 * End of 'TPKTr'
 */




/*******************************************************************************
 * REGISTER:  TPOK
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TPOK.
 */
#define READ_TPOKr(u,p,r) bcmbd_cmicd_reg_port_read(u,TPOKr_BLKACC,p,TPOKr_OFFSET,0,(r._tpok), 2)
#define WRITE_TPOKr(u,p,r) bcmbd_cmicd_reg_port_write(u,TPOKr_BLKACC,p,TPOKr_OFFSET,0,&(r._tpok), 2)

/*******************************************************************************
 * End of 'TPOKr'
 */




/*******************************************************************************
 * REGISTER:  TRILL_DROP_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TRILL_DROP_CONTROL.
 */
#define READ_TRILL_DROP_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,TRILL_DROP_CONTROLr_BLKACC,1,TRILL_DROP_CONTROLr_OFFSET,0,(r._trill_drop_control), 1)
#define WRITE_TRILL_DROP_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,TRILL_DROP_CONTROLr_BLKACC,1,TRILL_DROP_CONTROLr_OFFSET,0,&(r._trill_drop_control), 1)

/*******************************************************************************
 * End of 'TRILL_DROP_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  TRILL_DROP_STATS
 * BLOCKS:   IPIPE
 * SIZE:     128
 */
/*
 * These macros can be used to access TRILL_DROP_STATS.
 */
#define READ_TRILL_DROP_STATSm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,TRILL_DROP_STATSm_BLKACC,1,n,0,TRILL_DROP_STATSm_OFFSET,i,(m._trill_drop_stats),4)
#define WRITE_TRILL_DROP_STATSm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,TRILL_DROP_STATSm_BLKACC,1,n,0,TRILL_DROP_STATSm_OFFSET,i,&(m._trill_drop_stats),4)
#define WRITE_TRILL_DROP_STATSm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,TRILL_DROP_STATSm_BLKACC,1,-1,0,TRILL_DROP_STATSm_OFFSET,i,&(m._trill_drop_stats),4)

/*******************************************************************************
 * End of 'TRILL_DROP_STATSm'
 */




/*******************************************************************************
 * REGISTER:  TRILL_RBRIDGE_NICKNAME_SELECT
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TRILL_RBRIDGE_NICKNAME_SELECT.
 */
#define READ_TRILL_RBRIDGE_NICKNAME_SELECTr(u,r) bcmbd_cmicd_reg_block_read(u,TRILL_RBRIDGE_NICKNAME_SELECTr_BLKACC,1,TRILL_RBRIDGE_NICKNAME_SELECTr_OFFSET,0,(r._trill_rbridge_nickname_select), 1)
#define WRITE_TRILL_RBRIDGE_NICKNAME_SELECTr(u,r) bcmbd_cmicd_reg_block_write(u,TRILL_RBRIDGE_NICKNAME_SELECTr_BLKACC,1,TRILL_RBRIDGE_NICKNAME_SELECTr_OFFSET,0,&(r._trill_rbridge_nickname_select), 1)

/*******************************************************************************
 * End of 'TRILL_RBRIDGE_NICKNAME_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  TRPKT
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TRPKT.
 */
#define READ_TRPKTr(u,p,r) bcmbd_cmicd_reg_port_read(u,TRPKTr_BLKACC,p,TRPKTr_OFFSET,0,(r._trpkt), 2)
#define WRITE_TRPKTr(u,p,r) bcmbd_cmicd_reg_port_write(u,TRPKTr_BLKACC,p,TRPKTr_OFFSET,0,&(r._trpkt), 2)

/*******************************************************************************
 * End of 'TRPKTr'
 */




/*******************************************************************************
 * MEMORY:  TRUNK_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access TRUNK_BITMAP.
 */
#define READ_TRUNK_BITMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(TRUNK_BITMAPm_BLKACC)+1,TRUNK_BITMAPm_OFFSET+i,(m._trunk_bitmap),5)
#define WRITE_TRUNK_BITMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(TRUNK_BITMAPm_BLKACC)+1,TRUNK_BITMAPm_OFFSET+i,&(m._trunk_bitmap),5)

/*******************************************************************************
 * End of 'TRUNK_BITMAPm'
 */




/*******************************************************************************
 * MEMORY:  TRUNK_CBL_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     3
 */
/*
 * These macros can be used to access TRUNK_CBL_TABLE.
 */
#define READ_TRUNK_CBL_TABLEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(TRUNK_CBL_TABLEm_BLKACC)+1,TRUNK_CBL_TABLEm_OFFSET+i,(m._trunk_cbl_table),1)
#define WRITE_TRUNK_CBL_TABLEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(TRUNK_CBL_TABLEm_BLKACC)+1,TRUNK_CBL_TABLEm_OFFSET+i,&(m._trunk_cbl_table),1)

/*******************************************************************************
 * End of 'TRUNK_CBL_TABLEm'
 */




/*******************************************************************************
 * MEMORY:  TRUNK_GROUP
 * BLOCKS:   IPIPE
 * SIZE:     36
 */
/*
 * These macros can be used to access TRUNK_GROUP.
 */
#define READ_TRUNK_GROUPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(TRUNK_GROUPm_BLKACC)+1,TRUNK_GROUPm_OFFSET+i,(m._trunk_group),2)
#define WRITE_TRUNK_GROUPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(TRUNK_GROUPm_BLKACC)+1,TRUNK_GROUPm_OFFSET+i,&(m._trunk_group),2)

/*******************************************************************************
 * End of 'TRUNK_GROUPm'
 */




/*******************************************************************************
 * MEMORY:  TRUNK_MEMBER
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access TRUNK_MEMBER.
 */
#define READ_TRUNK_MEMBERm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(TRUNK_MEMBERm_BLKACC)+1,TRUNK_MEMBERm_OFFSET+i,(m._trunk_member),1)
#define WRITE_TRUNK_MEMBERm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(TRUNK_MEMBERm_BLKACC)+1,TRUNK_MEMBERm_OFFSET+i,&(m._trunk_member),1)

/*******************************************************************************
 * End of 'TRUNK_MEMBERm'
 */




/*******************************************************************************
 * REGISTER:  TRUNK_RAND_LB_SEED
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TRUNK_RAND_LB_SEED.
 */
#define READ_TRUNK_RAND_LB_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,TRUNK_RAND_LB_SEEDr_BLKACC,1,n,0,TRUNK_RAND_LB_SEEDr_OFFSET,0,(r._trunk_rand_lb_seed),1)
#define WRITE_TRUNK_RAND_LB_SEEDr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,TRUNK_RAND_LB_SEEDr_BLKACC,1,n,0,TRUNK_RAND_LB_SEEDr_OFFSET,0,&(r._trunk_rand_lb_seed),1)
#define WRITE_TRUNK_RAND_LB_SEEDr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,TRUNK_RAND_LB_SEEDr_BLKACC,1,-1,0,TRUNK_RAND_LB_SEEDr_OFFSET,0,&(r._trunk_rand_lb_seed),1)

/*******************************************************************************
 * End of 'TRUNK_RAND_LB_SEEDr'
 */




/*******************************************************************************
 * MEMORY:  TRUNK_RR_CNT
 * BLOCKS:   IPIPE
 * SIZE:     9
 */
/*
 * These macros can be used to access TRUNK_RR_CNT.
 */
#define READ_TRUNK_RR_CNTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,TRUNK_RR_CNTm_BLKACC,1,n,0,TRUNK_RR_CNTm_OFFSET,i,(m._trunk_rr_cnt),1)
#define WRITE_TRUNK_RR_CNTm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,TRUNK_RR_CNTm_BLKACC,1,n,0,TRUNK_RR_CNTm_OFFSET,i,&(m._trunk_rr_cnt),1)
#define WRITE_TRUNK_RR_CNTm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,TRUNK_RR_CNTm_BLKACC,1,-1,0,TRUNK_RR_CNTm_OFFSET,i,&(m._trunk_rr_cnt),1)

/*******************************************************************************
 * End of 'TRUNK_RR_CNTm'
 */




/*******************************************************************************
 * REGISTER:  TSCL
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TSCL.
 */
#define READ_TSCLr(u,p,r) bcmbd_cmicd_reg_port_read(u,TSCLr_BLKACC,p,TSCLr_OFFSET,0,(r._tscl), 2)
#define WRITE_TSCLr(u,p,r) bcmbd_cmicd_reg_port_write(u,TSCLr_BLKACC,p,TSCLr_OFFSET,0,&(r._tscl), 2)

/*******************************************************************************
 * End of 'TSCLr'
 */




/*******************************************************************************
 * REGISTER:  TS_TO_CORE_SYNC_ENABLE
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TS_TO_CORE_SYNC_ENABLE.
 */
#define READ_TS_TO_CORE_SYNC_ENABLEr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,TS_TO_CORE_SYNC_ENABLEr_BLKACC,1,n,0,TS_TO_CORE_SYNC_ENABLEr_OFFSET,0,(r._ts_to_core_sync_enable),1)
#define WRITE_TS_TO_CORE_SYNC_ENABLEr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,TS_TO_CORE_SYNC_ENABLEr_BLKACC,1,n,0,TS_TO_CORE_SYNC_ENABLEr_OFFSET,0,&(r._ts_to_core_sync_enable),1)
#define WRITE_TS_TO_CORE_SYNC_ENABLEr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,TS_TO_CORE_SYNC_ENABLEr_BLKACC,1,-1,0,TS_TO_CORE_SYNC_ENABLEr_OFFSET,0,&(r._ts_to_core_sync_enable),1)

/*******************************************************************************
 * End of 'TS_TO_CORE_SYNC_ENABLEr'
 */




/*******************************************************************************
 * MEMORY:  TTL_FN
 * BLOCKS:   IPIPE
 * SIZE:     17
 */
/*
 * These macros can be used to access TTL_FN.
 */
#define READ_TTL_FNm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,TTL_FNm_BLKACC,1,n,0,TTL_FNm_OFFSET,i,(m._ttl_fn),1)
#define WRITE_TTL_FNm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,TTL_FNm_BLKACC,1,n,0,TTL_FNm_OFFSET,i,&(m._ttl_fn),1)
#define WRITE_TTL_FNm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,TTL_FNm_BLKACC,1,-1,0,TTL_FNm_OFFSET,i,&(m._ttl_fn),1)

/*******************************************************************************
 * End of 'TTL_FNm'
 */




/*******************************************************************************
 * REGISTER:  TTL_FN_RAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TTL_FN_RAM_DBGCTRL.
 */
#define READ_TTL_FN_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,TTL_FN_RAM_DBGCTRLr_BLKACC,1,n,0,TTL_FN_RAM_DBGCTRLr_OFFSET,0,(r._ttl_fn_ram_dbgctrl),1)
#define WRITE_TTL_FN_RAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,TTL_FN_RAM_DBGCTRLr_BLKACC,1,n,0,TTL_FN_RAM_DBGCTRLr_OFFSET,0,&(r._ttl_fn_ram_dbgctrl),1)
#define WRITE_TTL_FN_RAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,TTL_FN_RAM_DBGCTRLr_BLKACC,1,-1,0,TTL_FN_RAM_DBGCTRLr_OFFSET,0,&(r._ttl_fn_ram_dbgctrl),1)

/*******************************************************************************
 * End of 'TTL_FN_RAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  TUCA
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TUCA.
 */
#define READ_TUCAr(u,p,r) bcmbd_cmicd_reg_port_read(u,TUCAr_BLKACC,p,TUCAr_OFFSET,0,(r._tuca), 2)
#define WRITE_TUCAr(u,p,r) bcmbd_cmicd_reg_port_write(u,TUCAr_BLKACC,p,TUCAr_OFFSET,0,&(r._tuca), 2)

/*******************************************************************************
 * End of 'TUCAr'
 */




/*******************************************************************************
 * REGISTER:  TUFL
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TUFL.
 */
#define READ_TUFLr(u,p,r) bcmbd_cmicd_reg_port_read(u,TUFLr_BLKACC,p,TUFLr_OFFSET,0,(r._tufl), 2)
#define WRITE_TUFLr(u,p,r) bcmbd_cmicd_reg_port_write(u,TUFLr_BLKACC,p,TUFLr_OFFSET,0,&(r._tufl), 2)

/*******************************************************************************
 * End of 'TUFLr'
 */




/*******************************************************************************
 * REGISTER:  TVLN
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TVLN.
 */
#define READ_TVLNr(u,p,r) bcmbd_cmicd_reg_port_read(u,TVLNr_BLKACC,p,TVLNr_OFFSET,0,(r._tvln), 2)
#define WRITE_TVLNr(u,p,r) bcmbd_cmicd_reg_port_write(u,TVLNr_BLKACC,p,TVLNr_OFFSET,0,&(r._tvln), 2)

/*******************************************************************************
 * End of 'TVLNr'
 */




/*******************************************************************************
 * REGISTER:  TXCF
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TXCF.
 */
#define READ_TXCFr(u,p,r) bcmbd_cmicd_reg_port_read(u,TXCFr_BLKACC,p,TXCFr_OFFSET,0,(r._txcf), 2)
#define WRITE_TXCFr(u,p,r) bcmbd_cmicd_reg_port_write(u,TXCFr_BLKACC,p,TXCFr_OFFSET,0,&(r._txcf), 2)

/*******************************************************************************
 * End of 'TXCFr'
 */




/*******************************************************************************
 * REGISTER:  TXCL
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TXCL.
 */
#define READ_TXCLr(u,p,r) bcmbd_cmicd_reg_port_read(u,TXCLr_BLKACC,p,TXCLr_OFFSET,0,(r._txcl), 2)
#define WRITE_TXCLr(u,p,r) bcmbd_cmicd_reg_port_write(u,TXCLr_BLKACC,p,TXCLr_OFFSET,0,&(r._txcl), 2)

/*******************************************************************************
 * End of 'TXCLr'
 */




/*******************************************************************************
 * REGISTER:  TXPF
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TXPF.
 */
#define READ_TXPFr(u,p,r) bcmbd_cmicd_reg_port_read(u,TXPFr_BLKACC,p,TXPFr_OFFSET,0,(r._txpf), 2)
#define WRITE_TXPFr(u,p,r) bcmbd_cmicd_reg_port_write(u,TXPFr_BLKACC,p,TXPFr_OFFSET,0,&(r._txpf), 2)

/*******************************************************************************
 * End of 'TXPFr'
 */




/*******************************************************************************
 * REGISTER:  TXPP
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TXPP.
 */
#define READ_TXPPr(u,p,r) bcmbd_cmicd_reg_port_read(u,TXPPr_BLKACC,p,TXPPr_OFFSET,0,(r._txpp), 2)
#define WRITE_TXPPr(u,p,r) bcmbd_cmicd_reg_port_write(u,TXPPr_BLKACC,p,TXPPr_OFFSET,0,&(r._txpp), 2)

/*******************************************************************************
 * End of 'TXPPr'
 */




/*******************************************************************************
 * REGISTER:  TX_CNT_CONFIG
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access TX_CNT_CONFIG.
 */
#define READ_TX_CNT_CONFIGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,TX_CNT_CONFIGr_BLKACC,3,0,p,TX_CNT_CONFIGr_OFFSET,i,(r._tx_cnt_config),1)
#define WRITE_TX_CNT_CONFIGr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,TX_CNT_CONFIGr_BLKACC,3,0,p,TX_CNT_CONFIGr_OFFSET,i,&(r._tx_cnt_config),1)

/*******************************************************************************
 * End of 'TX_CNT_CONFIGr'
 */




/*******************************************************************************
 * SWFORMAT:  TX_DCB
 * BLOCKS:
 * SIZE:     512
 */
/*******************************************************************************
 * End of 'TX_DCB'
 */




/*******************************************************************************
 * REGISTER:  TX_EEE_LPI_DURATION_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TX_EEE_LPI_DURATION_COUNTER.
 */
#define READ_TX_EEE_LPI_DURATION_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,TX_EEE_LPI_DURATION_COUNTERr_BLKACC,p,TX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,(r._tx_eee_lpi_duration_counter), 2)
#define WRITE_TX_EEE_LPI_DURATION_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,TX_EEE_LPI_DURATION_COUNTERr_BLKACC,p,TX_EEE_LPI_DURATION_COUNTERr_OFFSET,0,&(r._tx_eee_lpi_duration_counter), 2)

/*******************************************************************************
 * End of 'TX_EEE_LPI_DURATION_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  TX_EEE_LPI_EVENT_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TX_EEE_LPI_EVENT_COUNTER.
 */
#define READ_TX_EEE_LPI_EVENT_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,TX_EEE_LPI_EVENT_COUNTERr_BLKACC,p,TX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,(r._tx_eee_lpi_event_counter), 2)
#define WRITE_TX_EEE_LPI_EVENT_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,TX_EEE_LPI_EVENT_COUNTERr_BLKACC,p,TX_EEE_LPI_EVENT_COUNTERr_OFFSET,0,&(r._tx_eee_lpi_event_counter), 2)

/*******************************************************************************
 * End of 'TX_EEE_LPI_EVENT_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  TX_HCFC_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TX_HCFC_COUNTER.
 */
#define READ_TX_HCFC_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,TX_HCFC_COUNTERr_BLKACC,p,TX_HCFC_COUNTERr_OFFSET,0,(r._tx_hcfc_counter), 2)
#define WRITE_TX_HCFC_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,TX_HCFC_COUNTERr_BLKACC,p,TX_HCFC_COUNTERr_OFFSET,0,&(r._tx_hcfc_counter), 2)

/*******************************************************************************
 * End of 'TX_HCFC_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  TX_LLFC_LOG_COUNTER
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access TX_LLFC_LOG_COUNTER.
 */
#define READ_TX_LLFC_LOG_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_read(u,TX_LLFC_LOG_COUNTERr_BLKACC,p,TX_LLFC_LOG_COUNTERr_OFFSET,0,(r._tx_llfc_log_counter), 2)
#define WRITE_TX_LLFC_LOG_COUNTERr(u,p,r) bcmbd_cmicd_reg_port_write(u,TX_LLFC_LOG_COUNTERr_BLKACC,p,TX_LLFC_LOG_COUNTERr_OFFSET,0,&(r._tx_llfc_log_counter), 2)

/*******************************************************************************
 * End of 'TX_LLFC_LOG_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  TX_PKT_CNT_64
 * BLOCKS:   MMU_XPE
 * SIZE:     64
 */
/*
 * These macros can be used to access TX_PKT_CNT_64.
 */
#define READ_TX_PKT_CNT_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,TX_PKT_CNT_64r_BLKACC,3,0,p,TX_PKT_CNT_64r_OFFSET,i,(r._tx_pkt_cnt_64),2)
#define WRITE_TX_PKT_CNT_64r(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,TX_PKT_CNT_64r_BLKACC,3,0,p,TX_PKT_CNT_64r_OFFSET,i,&(r._tx_pkt_cnt_64),2)

/*******************************************************************************
 * End of 'TX_PKT_CNT_64r'
 */




/*******************************************************************************
 * REGISTER:  UDF_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access UDF_CAM_BIST_CONFIG.
 */
#define READ_UDF_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,UDF_CAM_BIST_CONFIGr_BLKACC,1,n,0,UDF_CAM_BIST_CONFIGr_OFFSET,0,(r._udf_cam_bist_config),1)
#define WRITE_UDF_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,UDF_CAM_BIST_CONFIGr_BLKACC,1,n,0,UDF_CAM_BIST_CONFIGr_OFFSET,0,&(r._udf_cam_bist_config),1)
#define WRITE_UDF_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,UDF_CAM_BIST_CONFIGr_BLKACC,1,-1,0,UDF_CAM_BIST_CONFIGr_OFFSET,0,&(r._udf_cam_bist_config),1)

/*******************************************************************************
 * End of 'UDF_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  UDF_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access UDF_CAM_BIST_DBG_DATA.
 */
#define READ_UDF_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,UDF_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,UDF_CAM_BIST_DBG_DATAr_OFFSET,0,(r._udf_cam_bist_dbg_data),1)
#define WRITE_UDF_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,UDF_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,UDF_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._udf_cam_bist_dbg_data),1)
#define WRITE_UDF_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,UDF_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,UDF_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._udf_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'UDF_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  UDF_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access UDF_CAM_BIST_STATUS.
 */
#define READ_UDF_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,UDF_CAM_BIST_STATUSr_BLKACC,1,n,0,UDF_CAM_BIST_STATUSr_OFFSET,0,(r._udf_cam_bist_status),1)
#define WRITE_UDF_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,UDF_CAM_BIST_STATUSr_BLKACC,1,n,0,UDF_CAM_BIST_STATUSr_OFFSET,0,&(r._udf_cam_bist_status),1)
#define WRITE_UDF_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,UDF_CAM_BIST_STATUSr_BLKACC,1,-1,0,UDF_CAM_BIST_STATUSr_OFFSET,0,&(r._udf_cam_bist_status),1)

/*******************************************************************************
 * End of 'UDF_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  UDF_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access UDF_CAM_DBGCTRL.
 */
#define READ_UDF_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,UDF_CAM_DBGCTRLr_BLKACC,1,n,0,UDF_CAM_DBGCTRLr_OFFSET,0,(r._udf_cam_dbgctrl),1)
#define WRITE_UDF_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,UDF_CAM_DBGCTRLr_BLKACC,1,n,0,UDF_CAM_DBGCTRLr_OFFSET,0,&(r._udf_cam_dbgctrl),1)
#define WRITE_UDF_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,UDF_CAM_DBGCTRLr_BLKACC,1,-1,0,UDF_CAM_DBGCTRLr_OFFSET,0,&(r._udf_cam_dbgctrl),1)

/*******************************************************************************
 * End of 'UDF_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  UDF_CONDITIONAL_CHECK_TABLE_CAM
 * BLOCKS:   IPIPE
 * SIZE:     129
 */
/*
 * These macros can be used to access UDF_CONDITIONAL_CHECK_TABLE_CAM.
 */
#define READ_UDF_CONDITIONAL_CHECK_TABLE_CAMm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(UDF_CONDITIONAL_CHECK_TABLE_CAMm_BLKACC)+1,UDF_CONDITIONAL_CHECK_TABLE_CAMm_OFFSET+i,(m._udf_conditional_check_table_cam),5)
#define WRITE_UDF_CONDITIONAL_CHECK_TABLE_CAMm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(UDF_CONDITIONAL_CHECK_TABLE_CAMm_BLKACC)+1,UDF_CONDITIONAL_CHECK_TABLE_CAMm_OFFSET+i,&(m._udf_conditional_check_table_cam),5)

/*******************************************************************************
 * End of 'UDF_CONDITIONAL_CHECK_TABLE_CAMm'
 */




/*******************************************************************************
 * MEMORY:  UDF_CONDITIONAL_CHECK_TABLE_RAM
 * BLOCKS:   IPIPE
 * SIZE:     42
 */
/*
 * These macros can be used to access UDF_CONDITIONAL_CHECK_TABLE_RAM.
 */
#define READ_UDF_CONDITIONAL_CHECK_TABLE_RAMm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(UDF_CONDITIONAL_CHECK_TABLE_RAMm_BLKACC)+1,UDF_CONDITIONAL_CHECK_TABLE_RAMm_OFFSET+i,(m._udf_conditional_check_table_ram),2)
#define WRITE_UDF_CONDITIONAL_CHECK_TABLE_RAMm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(UDF_CONDITIONAL_CHECK_TABLE_RAMm_BLKACC)+1,UDF_CONDITIONAL_CHECK_TABLE_RAMm_OFFSET+i,&(m._udf_conditional_check_table_ram),2)

/*******************************************************************************
 * End of 'UDF_CONDITIONAL_CHECK_TABLE_RAMm'
 */




/*******************************************************************************
 * MEMORY:  UNKNOWN_HGI_BITMAP
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access UNKNOWN_HGI_BITMAP.
 */
#define READ_UNKNOWN_HGI_BITMAPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(UNKNOWN_HGI_BITMAPm_BLKACC)+1,UNKNOWN_HGI_BITMAPm_OFFSET+i,(m._unknown_hgi_bitmap),5)
#define WRITE_UNKNOWN_HGI_BITMAPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(UNKNOWN_HGI_BITMAPm_BLKACC)+1,UNKNOWN_HGI_BITMAPm_OFFSET+i,&(m._unknown_hgi_bitmap),5)

/*******************************************************************************
 * End of 'UNKNOWN_HGI_BITMAPm'
 */




/*******************************************************************************
 * MEMORY:  UNKNOWN_MCAST_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access UNKNOWN_MCAST_BLOCK_MASK.
 */
#define READ_UNKNOWN_MCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(UNKNOWN_MCAST_BLOCK_MASKm_BLKACC)+1,UNKNOWN_MCAST_BLOCK_MASKm_OFFSET+i,(m._unknown_mcast_block_mask),5)
#define WRITE_UNKNOWN_MCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(UNKNOWN_MCAST_BLOCK_MASKm_BLKACC)+1,UNKNOWN_MCAST_BLOCK_MASKm_OFFSET+i,&(m._unknown_mcast_block_mask),5)

/*******************************************************************************
 * End of 'UNKNOWN_MCAST_BLOCK_MASKm'
 */




/*******************************************************************************
 * MEMORY:  UNKNOWN_UCAST_BLOCK_MASK
 * BLOCKS:   IPIPE
 * SIZE:     137
 */
/*
 * These macros can be used to access UNKNOWN_UCAST_BLOCK_MASK.
 */
#define READ_UNKNOWN_UCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(UNKNOWN_UCAST_BLOCK_MASKm_BLKACC)+1,UNKNOWN_UCAST_BLOCK_MASKm_OFFSET+i,(m._unknown_ucast_block_mask),5)
#define WRITE_UNKNOWN_UCAST_BLOCK_MASKm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(UNKNOWN_UCAST_BLOCK_MASKm_BLKACC)+1,UNKNOWN_UCAST_BLOCK_MASKm_OFFSET+i,&(m._unknown_ucast_block_mask),5)

/*******************************************************************************
 * End of 'UNKNOWN_UCAST_BLOCK_MASKm'
 */




/*******************************************************************************
 * MEMORY:  VFI
 * BLOCKS:   IPIPE
 * SIZE:     116
 */
/*
 * These macros can be used to access VFI.
 */
#define READ_VFIm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VFIm_BLKACC)+1,VFIm_OFFSET+i,(m._vfi),4)
#define WRITE_VFIm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VFIm_BLKACC)+1,VFIm_OFFSET+i,&(m._vfi),4)

/*******************************************************************************
 * End of 'VFIm'
 */




/*******************************************************************************
 * MEMORY:  VFI_1
 * BLOCKS:   IPIPE
 * SIZE:     10
 */
/*
 * These macros can be used to access VFI_1.
 */
#define READ_VFI_1m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VFI_1m_BLKACC)+1,VFI_1m_OFFSET+i,(m._vfi_1),1)
#define WRITE_VFI_1m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VFI_1m_BLKACC)+1,VFI_1m_OFFSET+i,&(m._vfi_1),1)

/*******************************************************************************
 * End of 'VFI_1m'
 */




/*******************************************************************************
 * REGISTER:  VFP_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_CAM_BIST_CONFIG.
 */
#define READ_VFP_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_CAM_BIST_CONFIGr_BLKACC,1,n,0,VFP_CAM_BIST_CONFIGr_OFFSET,0,(r._vfp_cam_bist_config),1)
#define WRITE_VFP_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_BIST_CONFIGr_BLKACC,1,n,0,VFP_CAM_BIST_CONFIGr_OFFSET,0,&(r._vfp_cam_bist_config),1)
#define WRITE_VFP_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_BIST_CONFIGr_BLKACC,1,-1,0,VFP_CAM_BIST_CONFIGr_OFFSET,0,&(r._vfp_cam_bist_config),1)

/*******************************************************************************
 * End of 'VFP_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  VFP_CAM_BIST_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_CAM_BIST_CONTROL.
 */
#define READ_VFP_CAM_BIST_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_CAM_BIST_CONTROLr_BLKACC,1,n,0,VFP_CAM_BIST_CONTROLr_OFFSET,0,(r._vfp_cam_bist_control),1)
#define WRITE_VFP_CAM_BIST_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_BIST_CONTROLr_BLKACC,1,n,0,VFP_CAM_BIST_CONTROLr_OFFSET,0,&(r._vfp_cam_bist_control),1)
#define WRITE_VFP_CAM_BIST_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_BIST_CONTROLr_BLKACC,1,-1,0,VFP_CAM_BIST_CONTROLr_OFFSET,0,&(r._vfp_cam_bist_control),1)

/*******************************************************************************
 * End of 'VFP_CAM_BIST_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  VFP_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_CAM_BIST_DBG_DATA.
 */
#define READ_VFP_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,VFP_CAM_BIST_DBG_DATAr_OFFSET,0,(r._vfp_cam_bist_dbg_data),1)
#define WRITE_VFP_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,VFP_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._vfp_cam_bist_dbg_data),1)
#define WRITE_VFP_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,VFP_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._vfp_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'VFP_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  VFP_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_CAM_BIST_STATUS.
 */
#define READ_VFP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_CAM_BIST_STATUSr_BLKACC,1,n,0,VFP_CAM_BIST_STATUSr_OFFSET,0,(r._vfp_cam_bist_status),1)
#define WRITE_VFP_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_BIST_STATUSr_BLKACC,1,n,0,VFP_CAM_BIST_STATUSr_OFFSET,0,&(r._vfp_cam_bist_status),1)
#define WRITE_VFP_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_BIST_STATUSr_BLKACC,1,-1,0,VFP_CAM_BIST_STATUSr_OFFSET,0,&(r._vfp_cam_bist_status),1)

/*******************************************************************************
 * End of 'VFP_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  VFP_CAM_CONTROL_SLICE_3_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_CAM_CONTROL_SLICE_3_0.
 */
#define READ_VFP_CAM_CONTROL_SLICE_3_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_CAM_CONTROL_SLICE_3_0r_BLKACC,1,n,0,VFP_CAM_CONTROL_SLICE_3_0r_OFFSET,0,(r._vfp_cam_control_slice_3_0),1)
#define WRITE_VFP_CAM_CONTROL_SLICE_3_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_CONTROL_SLICE_3_0r_BLKACC,1,n,0,VFP_CAM_CONTROL_SLICE_3_0r_OFFSET,0,&(r._vfp_cam_control_slice_3_0),1)
#define WRITE_VFP_CAM_CONTROL_SLICE_3_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_CAM_CONTROL_SLICE_3_0r_BLKACC,1,-1,0,VFP_CAM_CONTROL_SLICE_3_0r_OFFSET,0,&(r._vfp_cam_control_slice_3_0),1)

/*******************************************************************************
 * End of 'VFP_CAM_CONTROL_SLICE_3_0r'
 */




/*******************************************************************************
 * MEMORY:  VFP_HASH_FIELD_BMAP_TABLE_A
 * BLOCKS:   IPIPE
 * SIZE:     13
 */
/*
 * These macros can be used to access VFP_HASH_FIELD_BMAP_TABLE_A.
 */
#define READ_VFP_HASH_FIELD_BMAP_TABLE_Am(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VFP_HASH_FIELD_BMAP_TABLE_Am_BLKACC)+1,VFP_HASH_FIELD_BMAP_TABLE_Am_OFFSET+i,(m._vfp_hash_field_bmap_table_a),1)
#define WRITE_VFP_HASH_FIELD_BMAP_TABLE_Am(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VFP_HASH_FIELD_BMAP_TABLE_Am_BLKACC)+1,VFP_HASH_FIELD_BMAP_TABLE_Am_OFFSET+i,&(m._vfp_hash_field_bmap_table_a),1)

/*******************************************************************************
 * End of 'VFP_HASH_FIELD_BMAP_TABLE_Am'
 */




/*******************************************************************************
 * MEMORY:  VFP_HASH_FIELD_BMAP_TABLE_B
 * BLOCKS:   IPIPE
 * SIZE:     13
 */
/*
 * These macros can be used to access VFP_HASH_FIELD_BMAP_TABLE_B.
 */
#define READ_VFP_HASH_FIELD_BMAP_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VFP_HASH_FIELD_BMAP_TABLE_Bm_BLKACC)+1,VFP_HASH_FIELD_BMAP_TABLE_Bm_OFFSET+i,(m._vfp_hash_field_bmap_table_b),1)
#define WRITE_VFP_HASH_FIELD_BMAP_TABLE_Bm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VFP_HASH_FIELD_BMAP_TABLE_Bm_BLKACC)+1,VFP_HASH_FIELD_BMAP_TABLE_Bm_OFFSET+i,&(m._vfp_hash_field_bmap_table_b),1)

/*******************************************************************************
 * End of 'VFP_HASH_FIELD_BMAP_TABLE_Bm'
 */




/*******************************************************************************
 * REGISTER:  VFP_KEY_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VFP_KEY_CONTROL_1.
 */
#define READ_VFP_KEY_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_KEY_CONTROL_1r_BLKACC,1,n,0,VFP_KEY_CONTROL_1r_OFFSET,0,(r._vfp_key_control_1),2)
#define WRITE_VFP_KEY_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_KEY_CONTROL_1r_BLKACC,1,n,0,VFP_KEY_CONTROL_1r_OFFSET,0,&(r._vfp_key_control_1),2)
#define WRITE_VFP_KEY_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_KEY_CONTROL_1r_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,VFP_KEY_CONTROL_1r_OFFSET,0,&(r._vfp_key_control_1),2)

/*******************************************************************************
 * End of 'VFP_KEY_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  VFP_KEY_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_KEY_CONTROL_2.
 */
#define READ_VFP_KEY_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_KEY_CONTROL_2r_BLKACC,1,n,0,VFP_KEY_CONTROL_2r_OFFSET,0,(r._vfp_key_control_2),1)
#define WRITE_VFP_KEY_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_KEY_CONTROL_2r_BLKACC,1,n,0,VFP_KEY_CONTROL_2r_OFFSET,0,&(r._vfp_key_control_2),1)
#define WRITE_VFP_KEY_CONTROL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_KEY_CONTROL_2r_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,VFP_KEY_CONTROL_2r_OFFSET,0,&(r._vfp_key_control_2),1)

/*******************************************************************************
 * End of 'VFP_KEY_CONTROL_2r'
 */




/*******************************************************************************
 * MEMORY:  VFP_POLICY_TABLE
 * BLOCKS:   IPIPE
 * SIZE:     178
 */
/*
 * These macros can be used to access VFP_POLICY_TABLE.
 */
#define READ_VFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,VFP_POLICY_TABLEm_BLKACC,1,n,0,VFP_POLICY_TABLEm_OFFSET,i,(m._vfp_policy_table),6)
#define WRITE_VFP_POLICY_TABLEm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,VFP_POLICY_TABLEm_BLKACC,1,n,0,VFP_POLICY_TABLEm_OFFSET,i,&(m._vfp_policy_table),6)
#define WRITE_VFP_POLICY_TABLEm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,VFP_POLICY_TABLEm_BLKACC,1,-1,0,VFP_POLICY_TABLEm_OFFSET,i,&(m._vfp_policy_table),6)

/*******************************************************************************
 * End of 'VFP_POLICY_TABLEm'
 */




/*******************************************************************************
 * REGISTER:  VFP_POLICY_TABLE_RAM_CONTROL_64
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VFP_POLICY_TABLE_RAM_CONTROL_64.
 */
#define READ_VFP_POLICY_TABLE_RAM_CONTROL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_POLICY_TABLE_RAM_CONTROL_64r_BLKACC,1,n,0,VFP_POLICY_TABLE_RAM_CONTROL_64r_OFFSET,0,(r._vfp_policy_table_ram_control_64),2)
#define WRITE_VFP_POLICY_TABLE_RAM_CONTROL_64r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_POLICY_TABLE_RAM_CONTROL_64r_BLKACC,1,n,0,VFP_POLICY_TABLE_RAM_CONTROL_64r_OFFSET,0,&(r._vfp_policy_table_ram_control_64),2)
#define WRITE_VFP_POLICY_TABLE_RAM_CONTROL_64r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_POLICY_TABLE_RAM_CONTROL_64r_BLKACC,1,-1,0,VFP_POLICY_TABLE_RAM_CONTROL_64r_OFFSET,0,&(r._vfp_policy_table_ram_control_64),2)

/*******************************************************************************
 * End of 'VFP_POLICY_TABLE_RAM_CONTROL_64r'
 */




/*******************************************************************************
 * REGISTER:  VFP_SLICE_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_SLICE_CONTROL.
 */
#define READ_VFP_SLICE_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_SLICE_CONTROLr_BLKACC,1,n,0,VFP_SLICE_CONTROLr_OFFSET,0,(r._vfp_slice_control),1)
#define WRITE_VFP_SLICE_CONTROLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_SLICE_CONTROLr_BLKACC,1,n,0,VFP_SLICE_CONTROLr_OFFSET,0,&(r._vfp_slice_control),1)
#define WRITE_VFP_SLICE_CONTROLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_SLICE_CONTROLr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,VFP_SLICE_CONTROLr_OFFSET,0,&(r._vfp_slice_control),1)

/*******************************************************************************
 * End of 'VFP_SLICE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  VFP_SLICE_MAP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VFP_SLICE_MAP.
 */
#define READ_VFP_SLICE_MAPr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VFP_SLICE_MAPr_BLKACC,1,n,0,VFP_SLICE_MAPr_OFFSET,0,(r._vfp_slice_map),1)
#define WRITE_VFP_SLICE_MAPr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_SLICE_MAPr_BLKACC,1,n,0,VFP_SLICE_MAPr_OFFSET,0,&(r._vfp_slice_map),1)
#define WRITE_VFP_SLICE_MAPr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VFP_SLICE_MAPr_BLKACC&(~(0x1f<<18))|(9<<18),1,-1,0,VFP_SLICE_MAPr_OFFSET,0,&(r._vfp_slice_map),1)

/*******************************************************************************
 * End of 'VFP_SLICE_MAPr'
 */




/*******************************************************************************
 * MEMORY:  VFP_TCAM
 * BLOCKS:   IPIPE
 * SIZE:     474
 */
/*
 * These macros can be used to access VFP_TCAM.
 */
#define READ_VFP_TCAMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_read(u,VFP_TCAMm_BLKACC,1,n,0,VFP_TCAMm_OFFSET,i,(m._vfp_tcam),15)
#define WRITE_VFP_TCAMm(u,n,i,m) bcmbd_cmicd_mem_unique_block_write(u,VFP_TCAMm_BLKACC,1,n,0,VFP_TCAMm_OFFSET,i,&(m._vfp_tcam),15)
#define WRITE_VFP_TCAMm_ALL(u,i,m) bcmbd_cmicd_mem_unique_block_write(u,VFP_TCAMm_BLKACC,1,-1,0,VFP_TCAMm_OFFSET,i,&(m._vfp_tcam),15)

/*******************************************************************************
 * End of 'VFP_TCAMm'
 */




/*******************************************************************************
 * REGISTER:  VLAN_CTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_CTRL.
 */
#define READ_VLAN_CTRLr(u,r) bcmbd_cmicd_reg_block_read(u,VLAN_CTRLr_BLKACC,1,VLAN_CTRLr_OFFSET,0,(r._vlan_ctrl), 1)
#define WRITE_VLAN_CTRLr(u,r) bcmbd_cmicd_reg_block_write(u,VLAN_CTRLr_BLKACC,1,VLAN_CTRLr_OFFSET,0,&(r._vlan_ctrl), 1)

/*******************************************************************************
 * End of 'VLAN_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  VLAN_MAC
 * BLOCKS:   IPIPE
 * SIZE:     140
 */
/*
 * These macros can be used to access VLAN_MAC.
 */
#define READ_VLAN_MACm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_MACm_BLKACC)+1,VLAN_MACm_OFFSET+i,(m._vlan_mac),5)
#define WRITE_VLAN_MACm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_MACm_BLKACC)+1,VLAN_MACm_OFFSET+i,&(m._vlan_mac),5)

/*******************************************************************************
 * End of 'VLAN_MACm'
 */




/*******************************************************************************
 * REGISTER:  VLAN_MEMORY_DBGCTRL_0
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VLAN_MEMORY_DBGCTRL_0.
 */
#define READ_VLAN_MEMORY_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_MEMORY_DBGCTRL_0r_BLKACC,1,n,0,VLAN_MEMORY_DBGCTRL_0r_OFFSET,0,(r._vlan_memory_dbgctrl_0),2)
#define WRITE_VLAN_MEMORY_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_MEMORY_DBGCTRL_0r_BLKACC,1,n,0,VLAN_MEMORY_DBGCTRL_0r_OFFSET,0,&(r._vlan_memory_dbgctrl_0),2)
#define WRITE_VLAN_MEMORY_DBGCTRL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_MEMORY_DBGCTRL_0r_BLKACC,1,-1,0,VLAN_MEMORY_DBGCTRL_0r_OFFSET,0,&(r._vlan_memory_dbgctrl_0),2)

/*******************************************************************************
 * End of 'VLAN_MEMORY_DBGCTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  VLAN_MEMORY_DBGCTRL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_MEMORY_DBGCTRL_1.
 */
#define READ_VLAN_MEMORY_DBGCTRL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_MEMORY_DBGCTRL_1r_BLKACC,1,n,0,VLAN_MEMORY_DBGCTRL_1r_OFFSET,0,(r._vlan_memory_dbgctrl_1),1)
#define WRITE_VLAN_MEMORY_DBGCTRL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_MEMORY_DBGCTRL_1r_BLKACC,1,n,0,VLAN_MEMORY_DBGCTRL_1r_OFFSET,0,&(r._vlan_memory_dbgctrl_1),1)
#define WRITE_VLAN_MEMORY_DBGCTRL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_MEMORY_DBGCTRL_1r_BLKACC,1,-1,0,VLAN_MEMORY_DBGCTRL_1r_OFFSET,0,&(r._vlan_memory_dbgctrl_1),1)

/*******************************************************************************
 * End of 'VLAN_MEMORY_DBGCTRL_1r'
 */




/*******************************************************************************
 * MEMORY:  VLAN_MPLS
 * BLOCKS:   IPIPE
 * SIZE:     20
 */
/*
 * These macros can be used to access VLAN_MPLS.
 */
#define READ_VLAN_MPLSm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_MPLSm_BLKACC)+1,VLAN_MPLSm_OFFSET+i,(m._vlan_mpls),1)
#define WRITE_VLAN_MPLSm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_MPLSm_BLKACC)+1,VLAN_MPLSm_OFFSET+i,&(m._vlan_mpls),1)

/*******************************************************************************
 * End of 'VLAN_MPLSm'
 */




/*******************************************************************************
 * MEMORY:  VLAN_PROFILE_2
 * BLOCKS:   IPIPE
 * SIZE:     281
 */
/*
 * These macros can be used to access VLAN_PROFILE_2.
 */
#define READ_VLAN_PROFILE_2m(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_PROFILE_2m_BLKACC)+1,VLAN_PROFILE_2m_OFFSET+i,(m._vlan_profile_2),9)
#define WRITE_VLAN_PROFILE_2m(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_PROFILE_2m_BLKACC)+1,VLAN_PROFILE_2m_OFFSET+i,&(m._vlan_profile_2),9)

/*******************************************************************************
 * End of 'VLAN_PROFILE_2m'
 */




/*******************************************************************************
 * MEMORY:  VLAN_PROFILE_TAB
 * BLOCKS:   IPIPE
 * SIZE:     45
 */
/*
 * These macros can be used to access VLAN_PROFILE_TAB.
 */
#define READ_VLAN_PROFILE_TABm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_PROFILE_TABm_BLKACC)+1,VLAN_PROFILE_TABm_OFFSET+i,(m._vlan_profile_tab),2)
#define WRITE_VLAN_PROFILE_TABm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_PROFILE_TABm_BLKACC)+1,VLAN_PROFILE_TABm_OFFSET+i,&(m._vlan_profile_tab),2)

/*******************************************************************************
 * End of 'VLAN_PROFILE_TABm'
 */




/*******************************************************************************
 * MEMORY:  VLAN_PROTOCOL
 * BLOCKS:   IPIPE
 * SIZE:     21
 */
/*
 * These macros can be used to access VLAN_PROTOCOL.
 */
#define READ_VLAN_PROTOCOLm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_PROTOCOLm_BLKACC)+1,VLAN_PROTOCOLm_OFFSET+i,(m._vlan_protocol),1)
#define WRITE_VLAN_PROTOCOLm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_PROTOCOLm_BLKACC)+1,VLAN_PROTOCOLm_OFFSET+i,&(m._vlan_protocol),1)

/*******************************************************************************
 * End of 'VLAN_PROTOCOLm'
 */




/*******************************************************************************
 * MEMORY:  VLAN_PROTOCOL_DATA
 * BLOCKS:   IPIPE
 * SIZE:     39
 */
/*
 * These macros can be used to access VLAN_PROTOCOL_DATA.
 */
#define READ_VLAN_PROTOCOL_DATAm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_PROTOCOL_DATAm_BLKACC)+1,VLAN_PROTOCOL_DATAm_OFFSET+i,(m._vlan_protocol_data),2)
#define WRITE_VLAN_PROTOCOL_DATAm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_PROTOCOL_DATAm_BLKACC)+1,VLAN_PROTOCOL_DATAm_OFFSET+i,&(m._vlan_protocol_data),2)

/*******************************************************************************
 * End of 'VLAN_PROTOCOL_DATAm'
 */




/*******************************************************************************
 * REGISTER:  VLAN_PROTOCOL_DATA_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_PROTOCOL_DATA_DBGCTRL.
 */
#define READ_VLAN_PROTOCOL_DATA_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_PROTOCOL_DATA_DBGCTRLr_BLKACC,1,n,0,VLAN_PROTOCOL_DATA_DBGCTRLr_OFFSET,0,(r._vlan_protocol_data_dbgctrl),1)
#define WRITE_VLAN_PROTOCOL_DATA_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_PROTOCOL_DATA_DBGCTRLr_BLKACC,1,n,0,VLAN_PROTOCOL_DATA_DBGCTRLr_OFFSET,0,&(r._vlan_protocol_data_dbgctrl),1)
#define WRITE_VLAN_PROTOCOL_DATA_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_PROTOCOL_DATA_DBGCTRLr_BLKACC,1,-1,0,VLAN_PROTOCOL_DATA_DBGCTRLr_OFFSET,0,&(r._vlan_protocol_data_dbgctrl),1)

/*******************************************************************************
 * End of 'VLAN_PROTOCOL_DATA_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  VLAN_SUBNET
 * BLOCKS:   IPIPE
 * SIZE:     200
 */
/*
 * These macros can be used to access VLAN_SUBNET.
 */
#define READ_VLAN_SUBNETm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_SUBNETm_BLKACC)+1,VLAN_SUBNETm_OFFSET+i,(m._vlan_subnet),7)
#define WRITE_VLAN_SUBNETm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_SUBNETm_BLKACC)+1,VLAN_SUBNETm_OFFSET+i,&(m._vlan_subnet),7)

/*******************************************************************************
 * End of 'VLAN_SUBNETm'
 */




/*******************************************************************************
 * REGISTER:  VLAN_SUBNET_CAM_BIST_CONFIG
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_SUBNET_CAM_BIST_CONFIG.
 */
#define READ_VLAN_SUBNET_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_SUBNET_CAM_BIST_CONFIGr_BLKACC,1,n,0,VLAN_SUBNET_CAM_BIST_CONFIGr_OFFSET,0,(r._vlan_subnet_cam_bist_config),1)
#define WRITE_VLAN_SUBNET_CAM_BIST_CONFIGr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_CAM_BIST_CONFIGr_BLKACC,1,n,0,VLAN_SUBNET_CAM_BIST_CONFIGr_OFFSET,0,&(r._vlan_subnet_cam_bist_config),1)
#define WRITE_VLAN_SUBNET_CAM_BIST_CONFIGr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_CAM_BIST_CONFIGr_BLKACC,1,-1,0,VLAN_SUBNET_CAM_BIST_CONFIGr_OFFSET,0,&(r._vlan_subnet_cam_bist_config),1)

/*******************************************************************************
 * End of 'VLAN_SUBNET_CAM_BIST_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  VLAN_SUBNET_CAM_BIST_DBG_DATA
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_SUBNET_CAM_BIST_DBG_DATA.
 */
#define READ_VLAN_SUBNET_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_SUBNET_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,VLAN_SUBNET_CAM_BIST_DBG_DATAr_OFFSET,0,(r._vlan_subnet_cam_bist_dbg_data),1)
#define WRITE_VLAN_SUBNET_CAM_BIST_DBG_DATAr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_CAM_BIST_DBG_DATAr_BLKACC,1,n,0,VLAN_SUBNET_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._vlan_subnet_cam_bist_dbg_data),1)
#define WRITE_VLAN_SUBNET_CAM_BIST_DBG_DATAr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_CAM_BIST_DBG_DATAr_BLKACC,1,-1,0,VLAN_SUBNET_CAM_BIST_DBG_DATAr_OFFSET,0,&(r._vlan_subnet_cam_bist_dbg_data),1)

/*******************************************************************************
 * End of 'VLAN_SUBNET_CAM_BIST_DBG_DATAr'
 */




/*******************************************************************************
 * REGISTER:  VLAN_SUBNET_CAM_BIST_STATUS
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_SUBNET_CAM_BIST_STATUS.
 */
#define READ_VLAN_SUBNET_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_SUBNET_CAM_BIST_STATUSr_BLKACC,1,n,0,VLAN_SUBNET_CAM_BIST_STATUSr_OFFSET,0,(r._vlan_subnet_cam_bist_status),1)
#define WRITE_VLAN_SUBNET_CAM_BIST_STATUSr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_CAM_BIST_STATUSr_BLKACC,1,n,0,VLAN_SUBNET_CAM_BIST_STATUSr_OFFSET,0,&(r._vlan_subnet_cam_bist_status),1)
#define WRITE_VLAN_SUBNET_CAM_BIST_STATUSr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_CAM_BIST_STATUSr_BLKACC,1,-1,0,VLAN_SUBNET_CAM_BIST_STATUSr_OFFSET,0,&(r._vlan_subnet_cam_bist_status),1)

/*******************************************************************************
 * End of 'VLAN_SUBNET_CAM_BIST_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  VLAN_SUBNET_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_SUBNET_CAM_DBGCTRL.
 */
#define READ_VLAN_SUBNET_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_SUBNET_CAM_DBGCTRLr_BLKACC,1,n,0,VLAN_SUBNET_CAM_DBGCTRLr_OFFSET,0,(r._vlan_subnet_cam_dbgctrl),1)
#define WRITE_VLAN_SUBNET_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_CAM_DBGCTRLr_BLKACC,1,n,0,VLAN_SUBNET_CAM_DBGCTRLr_OFFSET,0,&(r._vlan_subnet_cam_dbgctrl),1)
#define WRITE_VLAN_SUBNET_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_CAM_DBGCTRLr_BLKACC,1,-1,0,VLAN_SUBNET_CAM_DBGCTRLr_OFFSET,0,&(r._vlan_subnet_cam_dbgctrl),1)

/*******************************************************************************
 * End of 'VLAN_SUBNET_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  VLAN_SUBNET_DATA_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_SUBNET_DATA_DBGCTRL.
 */
#define READ_VLAN_SUBNET_DATA_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_SUBNET_DATA_DBGCTRLr_BLKACC,1,n,0,VLAN_SUBNET_DATA_DBGCTRLr_OFFSET,0,(r._vlan_subnet_data_dbgctrl),1)
#define WRITE_VLAN_SUBNET_DATA_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_DATA_DBGCTRLr_BLKACC,1,n,0,VLAN_SUBNET_DATA_DBGCTRLr_OFFSET,0,&(r._vlan_subnet_data_dbgctrl),1)
#define WRITE_VLAN_SUBNET_DATA_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_SUBNET_DATA_DBGCTRLr_BLKACC,1,-1,0,VLAN_SUBNET_DATA_DBGCTRLr_OFFSET,0,&(r._vlan_subnet_data_dbgctrl),1)

/*******************************************************************************
 * End of 'VLAN_SUBNET_DATA_DBGCTRLr'
 */




/*******************************************************************************
 * MEMORY:  VLAN_SUBNET_DATA_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     39
 */
/*
 * These macros can be used to access VLAN_SUBNET_DATA_ONLY.
 */
#define READ_VLAN_SUBNET_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_SUBNET_DATA_ONLYm_BLKACC)+1,VLAN_SUBNET_DATA_ONLYm_OFFSET+i,(m._vlan_subnet_data_only),2)
#define WRITE_VLAN_SUBNET_DATA_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_SUBNET_DATA_ONLYm_BLKACC)+1,VLAN_SUBNET_DATA_ONLYm_OFFSET+i,&(m._vlan_subnet_data_only),2)

/*******************************************************************************
 * End of 'VLAN_SUBNET_DATA_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  VLAN_SUBNET_ONLY
 * BLOCKS:   IPIPE
 * SIZE:     161
 */
/*
 * These macros can be used to access VLAN_SUBNET_ONLY.
 */
#define READ_VLAN_SUBNET_ONLYm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_SUBNET_ONLYm_BLKACC)+1,VLAN_SUBNET_ONLYm_OFFSET+i,(m._vlan_subnet_only),6)
#define WRITE_VLAN_SUBNET_ONLYm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_SUBNET_ONLYm_BLKACC)+1,VLAN_SUBNET_ONLYm_OFFSET+i,&(m._vlan_subnet_only),6)

/*******************************************************************************
 * End of 'VLAN_SUBNET_ONLYm'
 */




/*******************************************************************************
 * MEMORY:  VLAN_TAB
 * BLOCKS:   IPIPE
 * SIZE:     483
 */
/*
 * These macros can be used to access VLAN_TAB.
 */
#define READ_VLAN_TABm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_TABm_BLKACC)+1,VLAN_TABm_OFFSET+i,(m._vlan_tab),16)
#define WRITE_VLAN_TABm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_TABm_BLKACC)+1,VLAN_TABm_OFFSET+i,&(m._vlan_tab),16)

/*******************************************************************************
 * End of 'VLAN_TABm'
 */




/*******************************************************************************
 * MEMORY:  VLAN_XLATE
 * BLOCKS:   IPIPE
 * SIZE:     140
 */
/*
 * These macros can be used to access VLAN_XLATE.
 */
#define READ_VLAN_XLATEm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_XLATEm_BLKACC)+1,VLAN_XLATEm_OFFSET+i,(m._vlan_xlate),5)
#define WRITE_VLAN_XLATEm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_XLATEm_BLKACC)+1,VLAN_XLATEm_OFFSET+i,&(m._vlan_xlate),5)

/*******************************************************************************
 * End of 'VLAN_XLATEm'
 */




/*******************************************************************************
 * REGISTER:  VLAN_XLATE_DBGCTRL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_XLATE_DBGCTRL_0.
 */
#define READ_VLAN_XLATE_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_XLATE_DBGCTRL_0r_BLKACC,1,n,0,VLAN_XLATE_DBGCTRL_0r_OFFSET,0,(r._vlan_xlate_dbgctrl_0),1)
#define WRITE_VLAN_XLATE_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_XLATE_DBGCTRL_0r_BLKACC,1,n,0,VLAN_XLATE_DBGCTRL_0r_OFFSET,0,&(r._vlan_xlate_dbgctrl_0),1)
#define WRITE_VLAN_XLATE_DBGCTRL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_XLATE_DBGCTRL_0r_BLKACC,1,-1,0,VLAN_XLATE_DBGCTRL_0r_OFFSET,0,&(r._vlan_xlate_dbgctrl_0),1)

/*******************************************************************************
 * End of 'VLAN_XLATE_DBGCTRL_0r'
 */




/*******************************************************************************
 * MEMORY:  VLAN_XLATE_ECC
 * BLOCKS:   IPIPE
 * SIZE:     149
 */
/*
 * These macros can be used to access VLAN_XLATE_ECC.
 */
#define READ_VLAN_XLATE_ECCm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_XLATE_ECCm_BLKACC)+1,VLAN_XLATE_ECCm_OFFSET+i,(m._vlan_xlate_ecc),5)
#define WRITE_VLAN_XLATE_ECCm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_XLATE_ECCm_BLKACC)+1,VLAN_XLATE_ECCm_OFFSET+i,&(m._vlan_xlate_ecc),5)

/*******************************************************************************
 * End of 'VLAN_XLATE_ECCm'
 */




/*******************************************************************************
 * REGISTER:  VLAN_XLATE_HASH_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_XLATE_HASH_CONTROL.
 */
#define READ_VLAN_XLATE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,VLAN_XLATE_HASH_CONTROLr_BLKACC,1,VLAN_XLATE_HASH_CONTROLr_OFFSET,0,(r._vlan_xlate_hash_control), 1)
#define WRITE_VLAN_XLATE_HASH_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,VLAN_XLATE_HASH_CONTROLr_BLKACC,1,VLAN_XLATE_HASH_CONTROLr_OFFSET,0,&(r._vlan_xlate_hash_control), 1)

/*******************************************************************************
 * End of 'VLAN_XLATE_HASH_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  VLAN_XLATE_LP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_XLATE_LP.
 */
#define READ_VLAN_XLATE_LPm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_XLATE_LPm_BLKACC)+1,VLAN_XLATE_LPm_OFFSET+i,(m._vlan_xlate_lp),1)
#define WRITE_VLAN_XLATE_LPm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VLAN_XLATE_LPm_BLKACC)+1,VLAN_XLATE_LPm_OFFSET+i,&(m._vlan_xlate_lp),1)

/*******************************************************************************
 * End of 'VLAN_XLATE_LPm'
 */




/*******************************************************************************
 * REGISTER:  VLAN_XLATE_LP_DATA_DBGCTRL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VLAN_XLATE_LP_DATA_DBGCTRL_0.
 */
#define READ_VLAN_XLATE_LP_DATA_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VLAN_XLATE_LP_DATA_DBGCTRL_0r_BLKACC,1,n,0,VLAN_XLATE_LP_DATA_DBGCTRL_0r_OFFSET,0,(r._vlan_xlate_lp_data_dbgctrl_0),1)
#define WRITE_VLAN_XLATE_LP_DATA_DBGCTRL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_XLATE_LP_DATA_DBGCTRL_0r_BLKACC,1,n,0,VLAN_XLATE_LP_DATA_DBGCTRL_0r_OFFSET,0,&(r._vlan_xlate_lp_data_dbgctrl_0),1)
#define WRITE_VLAN_XLATE_LP_DATA_DBGCTRL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VLAN_XLATE_LP_DATA_DBGCTRL_0r_BLKACC,1,-1,0,VLAN_XLATE_LP_DATA_DBGCTRL_0r_OFFSET,0,&(r._vlan_xlate_lp_data_dbgctrl_0),1)

/*******************************************************************************
 * End of 'VLAN_XLATE_LP_DATA_DBGCTRL_0r'
 */




/*******************************************************************************
 * REGISTER:  VP_CAM_DBGCTRL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_CAM_DBGCTRL.
 */
#define READ_VP_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_CAM_DBGCTRLr_BLKACC,1,n,0,VP_CAM_DBGCTRLr_OFFSET,0,(r._vp_cam_dbgctrl),1)
#define WRITE_VP_CAM_DBGCTRLr(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_CAM_DBGCTRLr_BLKACC,1,n,0,VP_CAM_DBGCTRLr_OFFSET,0,&(r._vp_cam_dbgctrl),1)
#define WRITE_VP_CAM_DBGCTRLr_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_CAM_DBGCTRLr_BLKACC,1,-1,0,VP_CAM_DBGCTRLr_OFFSET,0,&(r._vp_cam_dbgctrl),1)

/*******************************************************************************
 * End of 'VP_CAM_DBGCTRLr'
 */




/*******************************************************************************
 * REGISTER:  VP_RAM_CONTROL_0
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_RAM_CONTROL_0.
 */
#define READ_VP_RAM_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_RAM_CONTROL_0r_BLKACC,1,n,0,VP_RAM_CONTROL_0r_OFFSET,0,(r._vp_ram_control_0),1)
#define WRITE_VP_RAM_CONTROL_0r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_0r_BLKACC,1,n,0,VP_RAM_CONTROL_0r_OFFSET,0,&(r._vp_ram_control_0),1)
#define WRITE_VP_RAM_CONTROL_0r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_0r_BLKACC,1,-1,0,VP_RAM_CONTROL_0r_OFFSET,0,&(r._vp_ram_control_0),1)

/*******************************************************************************
 * End of 'VP_RAM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  VP_RAM_CONTROL_1
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_RAM_CONTROL_1.
 */
#define READ_VP_RAM_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_RAM_CONTROL_1r_BLKACC,1,n,0,VP_RAM_CONTROL_1r_OFFSET,0,(r._vp_ram_control_1),1)
#define WRITE_VP_RAM_CONTROL_1r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_1r_BLKACC,1,n,0,VP_RAM_CONTROL_1r_OFFSET,0,&(r._vp_ram_control_1),1)
#define WRITE_VP_RAM_CONTROL_1r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_1r_BLKACC,1,-1,0,VP_RAM_CONTROL_1r_OFFSET,0,&(r._vp_ram_control_1),1)

/*******************************************************************************
 * End of 'VP_RAM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  VP_RAM_CONTROL_2
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_RAM_CONTROL_2.
 */
#define READ_VP_RAM_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_RAM_CONTROL_2r_BLKACC,1,n,0,VP_RAM_CONTROL_2r_OFFSET,0,(r._vp_ram_control_2),1)
#define WRITE_VP_RAM_CONTROL_2r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_2r_BLKACC,1,n,0,VP_RAM_CONTROL_2r_OFFSET,0,&(r._vp_ram_control_2),1)
#define WRITE_VP_RAM_CONTROL_2r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_2r_BLKACC,1,-1,0,VP_RAM_CONTROL_2r_OFFSET,0,&(r._vp_ram_control_2),1)

/*******************************************************************************
 * End of 'VP_RAM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  VP_RAM_CONTROL_3
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_RAM_CONTROL_3.
 */
#define READ_VP_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_RAM_CONTROL_3r_BLKACC,1,n,0,VP_RAM_CONTROL_3r_OFFSET,0,(r._vp_ram_control_3),1)
#define WRITE_VP_RAM_CONTROL_3r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_3r_BLKACC,1,n,0,VP_RAM_CONTROL_3r_OFFSET,0,&(r._vp_ram_control_3),1)
#define WRITE_VP_RAM_CONTROL_3r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_3r_BLKACC,1,-1,0,VP_RAM_CONTROL_3r_OFFSET,0,&(r._vp_ram_control_3),1)

/*******************************************************************************
 * End of 'VP_RAM_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  VP_RAM_CONTROL_4
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_RAM_CONTROL_4.
 */
#define READ_VP_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_RAM_CONTROL_4r_BLKACC,1,n,0,VP_RAM_CONTROL_4r_OFFSET,0,(r._vp_ram_control_4),1)
#define WRITE_VP_RAM_CONTROL_4r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_4r_BLKACC,1,n,0,VP_RAM_CONTROL_4r_OFFSET,0,&(r._vp_ram_control_4),1)
#define WRITE_VP_RAM_CONTROL_4r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_4r_BLKACC,1,-1,0,VP_RAM_CONTROL_4r_OFFSET,0,&(r._vp_ram_control_4),1)

/*******************************************************************************
 * End of 'VP_RAM_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  VP_RAM_CONTROL_5
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_RAM_CONTROL_5.
 */
#define READ_VP_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_RAM_CONTROL_5r_BLKACC,1,n,0,VP_RAM_CONTROL_5r_OFFSET,0,(r._vp_ram_control_5),1)
#define WRITE_VP_RAM_CONTROL_5r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_5r_BLKACC,1,n,0,VP_RAM_CONTROL_5r_OFFSET,0,&(r._vp_ram_control_5),1)
#define WRITE_VP_RAM_CONTROL_5r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_5r_BLKACC,1,-1,0,VP_RAM_CONTROL_5r_OFFSET,0,&(r._vp_ram_control_5),1)

/*******************************************************************************
 * End of 'VP_RAM_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  VP_RAM_CONTROL_6
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_RAM_CONTROL_6.
 */
#define READ_VP_RAM_CONTROL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_RAM_CONTROL_6r_BLKACC,1,n,0,VP_RAM_CONTROL_6r_OFFSET,0,(r._vp_ram_control_6),1)
#define WRITE_VP_RAM_CONTROL_6r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_6r_BLKACC,1,n,0,VP_RAM_CONTROL_6r_OFFSET,0,&(r._vp_ram_control_6),1)
#define WRITE_VP_RAM_CONTROL_6r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_6r_BLKACC,1,-1,0,VP_RAM_CONTROL_6r_OFFSET,0,&(r._vp_ram_control_6),1)

/*******************************************************************************
 * End of 'VP_RAM_CONTROL_6r'
 */




/*******************************************************************************
 * REGISTER:  VP_RAM_CONTROL_7
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_RAM_CONTROL_7.
 */
#define READ_VP_RAM_CONTROL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_RAM_CONTROL_7r_BLKACC,1,n,0,VP_RAM_CONTROL_7r_OFFSET,0,(r._vp_ram_control_7),1)
#define WRITE_VP_RAM_CONTROL_7r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_7r_BLKACC,1,n,0,VP_RAM_CONTROL_7r_OFFSET,0,&(r._vp_ram_control_7),1)
#define WRITE_VP_RAM_CONTROL_7r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_7r_BLKACC,1,-1,0,VP_RAM_CONTROL_7r_OFFSET,0,&(r._vp_ram_control_7),1)

/*******************************************************************************
 * End of 'VP_RAM_CONTROL_7r'
 */




/*******************************************************************************
 * REGISTER:  VP_RAM_CONTROL_8
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_RAM_CONTROL_8.
 */
#define READ_VP_RAM_CONTROL_8r(u,n,r) bcmbd_cmicd_reg_unique_block_read(u,VP_RAM_CONTROL_8r_BLKACC,1,n,0,VP_RAM_CONTROL_8r_OFFSET,0,(r._vp_ram_control_8),1)
#define WRITE_VP_RAM_CONTROL_8r(u,n,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_8r_BLKACC,1,n,0,VP_RAM_CONTROL_8r_OFFSET,0,&(r._vp_ram_control_8),1)
#define WRITE_VP_RAM_CONTROL_8r_ALL(u,r) bcmbd_cmicd_reg_unique_block_write(u,VP_RAM_CONTROL_8r_BLKACC,1,-1,0,VP_RAM_CONTROL_8r_OFFSET,0,&(r._vp_ram_control_8),1)

/*******************************************************************************
 * End of 'VP_RAM_CONTROL_8r'
 */




/*******************************************************************************
 * REGISTER:  VP_SER_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VP_SER_CONTROL.
 */
#define READ_VP_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,VP_SER_CONTROLr_BLKACC,1,VP_SER_CONTROLr_OFFSET,0,(r._vp_ser_control), 1)
#define WRITE_VP_SER_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,VP_SER_CONTROLr_BLKACC,1,VP_SER_CONTROLr_OFFSET,0,&(r._vp_ser_control), 1)

/*******************************************************************************
 * End of 'VP_SER_CONTROLr'
 */




/*******************************************************************************
 * MEMORY:  VRF
 * BLOCKS:   IPIPE
 * SIZE:     25
 */
/*
 * These macros can be used to access VRF.
 */
#define READ_VRFm(u,i,m) bcmbd_cmicd_mem_read(u,BCMBD_CMICD_BLKACC2ADEXT(VRFm_BLKACC)+1,VRFm_OFFSET+i,(m._vrf),1)
#define WRITE_VRFm(u,i,m) bcmbd_cmicd_mem_write(u,BCMBD_CMICD_BLKACC2ADEXT(VRFm_BLKACC)+1,VRFm_OFFSET+i,&(m._vrf),1)

/*******************************************************************************
 * End of 'VRFm'
 */




/*******************************************************************************
 * REGISTER:  VRF_MASK
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VRF_MASK.
 */
#define READ_VRF_MASKr(u,r) bcmbd_cmicd_reg_block_read(u,VRF_MASKr_BLKACC,1,VRF_MASKr_OFFSET,0,(r._vrf_mask), 1)
#define WRITE_VRF_MASKr(u,r) bcmbd_cmicd_reg_block_write(u,VRF_MASKr_BLKACC,1,VRF_MASKr_OFFSET,0,&(r._vrf_mask), 1)

/*******************************************************************************
 * End of 'VRF_MASKr'
 */




/*******************************************************************************
 * REGISTER:  VXLAN_CONTROL
 * BLOCKS:   IPIPE
 * SIZE:     64
 */
/*
 * These macros can be used to access VXLAN_CONTROL.
 */
#define READ_VXLAN_CONTROLr(u,r) bcmbd_cmicd_reg_block_read(u,VXLAN_CONTROLr_BLKACC,1,VXLAN_CONTROLr_OFFSET,0,(r._vxlan_control), 2)
#define WRITE_VXLAN_CONTROLr(u,r) bcmbd_cmicd_reg_block_write(u,VXLAN_CONTROLr_BLKACC,1,VXLAN_CONTROLr_OFFSET,0,&(r._vxlan_control), 2)

/*******************************************************************************
 * End of 'VXLAN_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  VXLAN_DEFAULT_NETWORK_SVP
 * BLOCKS:   IPIPE
 * SIZE:     32
 */
/*
 * These macros can be used to access VXLAN_DEFAULT_NETWORK_SVP.
 */
#define READ_VXLAN_DEFAULT_NETWORK_SVPr(u,r) bcmbd_cmicd_reg_block_read(u,VXLAN_DEFAULT_NETWORK_SVPr_BLKACC,1,VXLAN_DEFAULT_NETWORK_SVPr_OFFSET,0,(r._vxlan_default_network_svp), 1)
#define WRITE_VXLAN_DEFAULT_NETWORK_SVPr(u,r) bcmbd_cmicd_reg_block_write(u,VXLAN_DEFAULT_NETWORK_SVPr_BLKACC,1,VXLAN_DEFAULT_NETWORK_SVPr_OFFSET,0,&(r._vxlan_default_network_svp), 1)

/*******************************************************************************
 * End of 'VXLAN_DEFAULT_NETWORK_SVPr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_AVG_QSIZE_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_AVG_QSIZE_TM.
 */
#define READ_WREDMEMDEBUG_AVG_QSIZE_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_AVG_QSIZE_TMr_BLKACC,3,0,p,WREDMEMDEBUG_AVG_QSIZE_TMr_OFFSET,0,(r._wredmemdebug_avg_qsize_tm),1)
#define WRITE_WREDMEMDEBUG_AVG_QSIZE_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_AVG_QSIZE_TMr_BLKACC,3,0,p,WREDMEMDEBUG_AVG_QSIZE_TMr_OFFSET,0,&(r._wredmemdebug_avg_qsize_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_AVG_QSIZE_TMr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_CONFIG_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_CONFIG_TM.
 */
#define READ_WREDMEMDEBUG_CONFIG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_CONFIG_TMr_BLKACC,3,0,p,WREDMEMDEBUG_CONFIG_TMr_OFFSET,0,(r._wredmemdebug_config_tm),1)
#define WRITE_WREDMEMDEBUG_CONFIG_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_CONFIG_TMr_BLKACC,3,0,p,WREDMEMDEBUG_CONFIG_TMr_OFFSET,0,&(r._wredmemdebug_config_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_CONFIG_TMr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_DROP_CURVE_PROFILE_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_DROP_CURVE_PROFILE_TM.
 */
#define READ_WREDMEMDEBUG_DROP_CURVE_PROFILE_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_DROP_CURVE_PROFILE_TMr_BLKACC,3,0,p,WREDMEMDEBUG_DROP_CURVE_PROFILE_TMr_OFFSET,0,(r._wredmemdebug_drop_curve_profile_tm),1)
#define WRITE_WREDMEMDEBUG_DROP_CURVE_PROFILE_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_DROP_CURVE_PROFILE_TMr_BLKACC,3,0,p,WREDMEMDEBUG_DROP_CURVE_PROFILE_TMr_OFFSET,0,&(r._wredmemdebug_drop_curve_profile_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_DROP_CURVE_PROFILE_TMr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_PORT_SP_DROP_THD_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_PORT_SP_DROP_THD_TM.
 */
#define READ_WREDMEMDEBUG_PORT_SP_DROP_THD_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_PORT_SP_DROP_THD_TMr_BLKACC,3,0,p,WREDMEMDEBUG_PORT_SP_DROP_THD_TMr_OFFSET,0,(r._wredmemdebug_port_sp_drop_thd_tm),1)
#define WRITE_WREDMEMDEBUG_PORT_SP_DROP_THD_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_PORT_SP_DROP_THD_TMr_BLKACC,3,0,p,WREDMEMDEBUG_PORT_SP_DROP_THD_TMr_OFFSET,0,&(r._wredmemdebug_port_sp_drop_thd_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_PORT_SP_DROP_THD_TMr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_PORT_SP_SHARED_COUNT_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_PORT_SP_SHARED_COUNT_TM.
 */
#define READ_WREDMEMDEBUG_PORT_SP_SHARED_COUNT_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_PORT_SP_SHARED_COUNT_TMr_BLKACC,3,0,p,WREDMEMDEBUG_PORT_SP_SHARED_COUNT_TMr_OFFSET,0,(r._wredmemdebug_port_sp_shared_count_tm),1)
#define WRITE_WREDMEMDEBUG_PORT_SP_SHARED_COUNT_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_PORT_SP_SHARED_COUNT_TMr_BLKACC,3,0,p,WREDMEMDEBUG_PORT_SP_SHARED_COUNT_TMr_OFFSET,0,&(r._wredmemdebug_port_sp_shared_count_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_PORT_SP_SHARED_COUNT_TMr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_UC_QUEUE_DROP_THD_0_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_UC_QUEUE_DROP_THD_0_TM.
 */
#define READ_WREDMEMDEBUG_UC_QUEUE_DROP_THD_0_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_UC_QUEUE_DROP_THD_0_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_DROP_THD_0_TMr_OFFSET,0,(r._wredmemdebug_uc_queue_drop_thd_0_tm),1)
#define WRITE_WREDMEMDEBUG_UC_QUEUE_DROP_THD_0_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_UC_QUEUE_DROP_THD_0_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_DROP_THD_0_TMr_OFFSET,0,&(r._wredmemdebug_uc_queue_drop_thd_0_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_UC_QUEUE_DROP_THD_0_TMr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_UC_QUEUE_DROP_THD_1_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_UC_QUEUE_DROP_THD_1_TM.
 */
#define READ_WREDMEMDEBUG_UC_QUEUE_DROP_THD_1_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_UC_QUEUE_DROP_THD_1_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_DROP_THD_1_TMr_OFFSET,0,(r._wredmemdebug_uc_queue_drop_thd_1_tm),1)
#define WRITE_WREDMEMDEBUG_UC_QUEUE_DROP_THD_1_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_UC_QUEUE_DROP_THD_1_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_DROP_THD_1_TMr_OFFSET,0,&(r._wredmemdebug_uc_queue_drop_thd_1_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_UC_QUEUE_DROP_THD_1_TMr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_UC_QUEUE_DROP_THD_MARK_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_UC_QUEUE_DROP_THD_MARK_TM.
 */
#define READ_WREDMEMDEBUG_UC_QUEUE_DROP_THD_MARK_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_UC_QUEUE_DROP_THD_MARK_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_DROP_THD_MARK_TMr_OFFSET,0,(r._wredmemdebug_uc_queue_drop_thd_mark_tm),1)
#define WRITE_WREDMEMDEBUG_UC_QUEUE_DROP_THD_MARK_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_UC_QUEUE_DROP_THD_MARK_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_DROP_THD_MARK_TMr_OFFSET,0,&(r._wredmemdebug_uc_queue_drop_thd_mark_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_UC_QUEUE_DROP_THD_MARK_TMr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_UC_QUEUE_DROP_THD_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_UC_QUEUE_DROP_THD_TM.
 */
#define READ_WREDMEMDEBUG_UC_QUEUE_DROP_THD_TMr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_UC_QUEUE_DROP_THD_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_DROP_THD_TMr_OFFSET,i,(r._wredmemdebug_uc_queue_drop_thd_tm),1)
#define WRITE_WREDMEMDEBUG_UC_QUEUE_DROP_THD_TMr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_UC_QUEUE_DROP_THD_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_DROP_THD_TMr_OFFSET,i,&(r._wredmemdebug_uc_queue_drop_thd_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_UC_QUEUE_DROP_THD_TMr'
 */




/*******************************************************************************
 * REGISTER:  WREDMEMDEBUG_UC_QUEUE_TOTAL_COUNT_TM
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WREDMEMDEBUG_UC_QUEUE_TOTAL_COUNT_TM.
 */
#define READ_WREDMEMDEBUG_UC_QUEUE_TOTAL_COUNT_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WREDMEMDEBUG_UC_QUEUE_TOTAL_COUNT_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_TOTAL_COUNT_TMr_OFFSET,0,(r._wredmemdebug_uc_queue_total_count_tm),1)
#define WRITE_WREDMEMDEBUG_UC_QUEUE_TOTAL_COUNT_TMr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WREDMEMDEBUG_UC_QUEUE_TOTAL_COUNT_TMr_BLKACC,3,0,p,WREDMEMDEBUG_UC_QUEUE_TOTAL_COUNT_TMr_OFFSET,0,&(r._wredmemdebug_uc_queue_total_count_tm),1)

/*******************************************************************************
 * End of 'WREDMEMDEBUG_UC_QUEUE_TOTAL_COUNT_TMr'
 */




/*******************************************************************************
 * REGISTER:  WRED_CONG_NOTIFICATION_RESOLUTION_TABLE
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WRED_CONG_NOTIFICATION_RESOLUTION_TABLE.
 */
#define READ_WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr_BLKACC,3,0,p,WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr_OFFSET,i,(r._wred_cong_notification_resolution_table),1)
#define WRITE_WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr_BLKACC,3,0,p,WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr_OFFSET,i,&(r._wred_cong_notification_resolution_table),1)

/*******************************************************************************
 * End of 'WRED_CONG_NOTIFICATION_RESOLUTION_TABLEr'
 */




/*******************************************************************************
 * REGISTER:  WRED_POOL_INST_CONG_LIMIT
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WRED_POOL_INST_CONG_LIMIT.
 */
#define READ_WRED_POOL_INST_CONG_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,WRED_POOL_INST_CONG_LIMITr_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMITr_OFFSET,i,(r._wred_pool_inst_cong_limit),1)
#define WRITE_WRED_POOL_INST_CONG_LIMITr(u,n,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMITr_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMITr_OFFSET,i,&(r._wred_pool_inst_cong_limit),1)
#define WRITE_WRED_POOL_INST_CONG_LIMITr_ALL(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMITr_BLKACC,3,-1,p,WRED_POOL_INST_CONG_LIMITr_OFFSET,i,&(r._wred_pool_inst_cong_limit),1)

/*******************************************************************************
 * End of 'WRED_POOL_INST_CONG_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  WRED_POOL_INST_CONG_LIMIT_0
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WRED_POOL_INST_CONG_LIMIT_0.
 */
#define READ_WRED_POOL_INST_CONG_LIMIT_0r(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,WRED_POOL_INST_CONG_LIMIT_0r_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMIT_0r_OFFSET,0,(r._wred_pool_inst_cong_limit_0),1)
#define WRITE_WRED_POOL_INST_CONG_LIMIT_0r(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMIT_0r_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMIT_0r_OFFSET,0,&(r._wred_pool_inst_cong_limit_0),1)
#define WRITE_WRED_POOL_INST_CONG_LIMIT_0r_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMIT_0r_BLKACC,3,-1,p,WRED_POOL_INST_CONG_LIMIT_0r_OFFSET,0,&(r._wred_pool_inst_cong_limit_0),1)

/*******************************************************************************
 * End of 'WRED_POOL_INST_CONG_LIMIT_0r'
 */




/*******************************************************************************
 * REGISTER:  WRED_POOL_INST_CONG_LIMIT_1
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WRED_POOL_INST_CONG_LIMIT_1.
 */
#define READ_WRED_POOL_INST_CONG_LIMIT_1r(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,WRED_POOL_INST_CONG_LIMIT_1r_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMIT_1r_OFFSET,0,(r._wred_pool_inst_cong_limit_1),1)
#define WRITE_WRED_POOL_INST_CONG_LIMIT_1r(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMIT_1r_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMIT_1r_OFFSET,0,&(r._wred_pool_inst_cong_limit_1),1)
#define WRITE_WRED_POOL_INST_CONG_LIMIT_1r_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMIT_1r_BLKACC,3,-1,p,WRED_POOL_INST_CONG_LIMIT_1r_OFFSET,0,&(r._wred_pool_inst_cong_limit_1),1)

/*******************************************************************************
 * End of 'WRED_POOL_INST_CONG_LIMIT_1r'
 */




/*******************************************************************************
 * REGISTER:  WRED_POOL_INST_CONG_LIMIT_2
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WRED_POOL_INST_CONG_LIMIT_2.
 */
#define READ_WRED_POOL_INST_CONG_LIMIT_2r(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,WRED_POOL_INST_CONG_LIMIT_2r_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMIT_2r_OFFSET,0,(r._wred_pool_inst_cong_limit_2),1)
#define WRITE_WRED_POOL_INST_CONG_LIMIT_2r(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMIT_2r_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMIT_2r_OFFSET,0,&(r._wred_pool_inst_cong_limit_2),1)
#define WRITE_WRED_POOL_INST_CONG_LIMIT_2r_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMIT_2r_BLKACC,3,-1,p,WRED_POOL_INST_CONG_LIMIT_2r_OFFSET,0,&(r._wred_pool_inst_cong_limit_2),1)

/*******************************************************************************
 * End of 'WRED_POOL_INST_CONG_LIMIT_2r'
 */




/*******************************************************************************
 * REGISTER:  WRED_POOL_INST_CONG_LIMIT_3
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WRED_POOL_INST_CONG_LIMIT_3.
 */
#define READ_WRED_POOL_INST_CONG_LIMIT_3r(u,n,p,r) bcmbd_cmicd_reg_unique_block_read(u,WRED_POOL_INST_CONG_LIMIT_3r_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMIT_3r_OFFSET,0,(r._wred_pool_inst_cong_limit_3),1)
#define WRITE_WRED_POOL_INST_CONG_LIMIT_3r(u,n,p,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMIT_3r_BLKACC,3,n,p,WRED_POOL_INST_CONG_LIMIT_3r_OFFSET,0,&(r._wred_pool_inst_cong_limit_3),1)
#define WRITE_WRED_POOL_INST_CONG_LIMIT_3r_ALL(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_POOL_INST_CONG_LIMIT_3r_BLKACC,3,-1,p,WRED_POOL_INST_CONG_LIMIT_3r_OFFSET,0,&(r._wred_pool_inst_cong_limit_3),1)

/*******************************************************************************
 * End of 'WRED_POOL_INST_CONG_LIMIT_3r'
 */




/*******************************************************************************
 * REGISTER:  WRED_REFRESH_CONTROL
 * BLOCKS:   MMU_XPE
 * SIZE:     32
 */
/*
 * These macros can be used to access WRED_REFRESH_CONTROL.
 */
#define READ_WRED_REFRESH_CONTROLr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,WRED_REFRESH_CONTROLr_BLKACC,3,0,p,WRED_REFRESH_CONTROLr_OFFSET,0,(r._wred_refresh_control),1)
#define WRITE_WRED_REFRESH_CONTROLr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,WRED_REFRESH_CONTROLr_BLKACC,3,0,p,WRED_REFRESH_CONTROLr_OFFSET,0,&(r._wred_refresh_control),1)

/*******************************************************************************
 * End of 'WRED_REFRESH_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CLEAR_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_CLEAR_ECC_STATUS.
 */
#define READ_XLMAC_CLEAR_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_CLEAR_ECC_STATUSr_BLKACC,p,XLMAC_CLEAR_ECC_STATUSr_OFFSET,0,(r._xlmac_clear_ecc_status), 2)
#define WRITE_XLMAC_CLEAR_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_CLEAR_ECC_STATUSr_BLKACC,p,XLMAC_CLEAR_ECC_STATUSr_OFFSET,0,&(r._xlmac_clear_ecc_status), 2)

/*******************************************************************************
 * End of 'XLMAC_CLEAR_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CLEAR_FIFO_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_CLEAR_FIFO_STATUS.
 */
#define READ_XLMAC_CLEAR_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_CLEAR_FIFO_STATUSr_BLKACC,p,XLMAC_CLEAR_FIFO_STATUSr_OFFSET,0,(r._xlmac_clear_fifo_status), 2)
#define WRITE_XLMAC_CLEAR_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_CLEAR_FIFO_STATUSr_BLKACC,p,XLMAC_CLEAR_FIFO_STATUSr_OFFSET,0,&(r._xlmac_clear_fifo_status), 2)

/*******************************************************************************
 * End of 'XLMAC_CLEAR_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CLEAR_RX_LSS_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_CLEAR_RX_LSS_STATUS.
 */
#define READ_XLMAC_CLEAR_RX_LSS_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_CLEAR_RX_LSS_STATUSr_BLKACC,p,XLMAC_CLEAR_RX_LSS_STATUSr_OFFSET,0,(r._xlmac_clear_rx_lss_status), 2)
#define WRITE_XLMAC_CLEAR_RX_LSS_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_CLEAR_RX_LSS_STATUSr_BLKACC,p,XLMAC_CLEAR_RX_LSS_STATUSr_OFFSET,0,&(r._xlmac_clear_rx_lss_status), 2)

/*******************************************************************************
 * End of 'XLMAC_CLEAR_RX_LSS_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_CTRL.
 */
#define READ_XLMAC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_CTRLr_BLKACC,p,XLMAC_CTRLr_OFFSET,0,(r._xlmac_ctrl), 2)
#define WRITE_XLMAC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_CTRLr_BLKACC,p,XLMAC_CTRLr_OFFSET,0,&(r._xlmac_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_DATA_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2ECC_DATA_HDR_0.
 */
#define READ_XLMAC_E2ECC_DATA_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_E2ECC_DATA_HDR_0r_BLKACC,p,XLMAC_E2ECC_DATA_HDR_0r_OFFSET,0,(r._xlmac_e2ecc_data_hdr_0), 2)
#define WRITE_XLMAC_E2ECC_DATA_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_E2ECC_DATA_HDR_0r_BLKACC,p,XLMAC_E2ECC_DATA_HDR_0r_OFFSET,0,&(r._xlmac_e2ecc_data_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_E2ECC_DATA_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_DATA_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2ECC_DATA_HDR_1.
 */
#define READ_XLMAC_E2ECC_DATA_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_E2ECC_DATA_HDR_1r_BLKACC,p,XLMAC_E2ECC_DATA_HDR_1r_OFFSET,0,(r._xlmac_e2ecc_data_hdr_1), 2)
#define WRITE_XLMAC_E2ECC_DATA_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_E2ECC_DATA_HDR_1r_BLKACC,p,XLMAC_E2ECC_DATA_HDR_1r_OFFSET,0,&(r._xlmac_e2ecc_data_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_E2ECC_DATA_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_MODULE_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2ECC_MODULE_HDR_0.
 */
#define READ_XLMAC_E2ECC_MODULE_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_E2ECC_MODULE_HDR_0r_BLKACC,p,XLMAC_E2ECC_MODULE_HDR_0r_OFFSET,0,(r._xlmac_e2ecc_module_hdr_0), 2)
#define WRITE_XLMAC_E2ECC_MODULE_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_E2ECC_MODULE_HDR_0r_BLKACC,p,XLMAC_E2ECC_MODULE_HDR_0r_OFFSET,0,&(r._xlmac_e2ecc_module_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_E2ECC_MODULE_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2ECC_MODULE_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2ECC_MODULE_HDR_1.
 */
#define READ_XLMAC_E2ECC_MODULE_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_E2ECC_MODULE_HDR_1r_BLKACC,p,XLMAC_E2ECC_MODULE_HDR_1r_OFFSET,0,(r._xlmac_e2ecc_module_hdr_1), 2)
#define WRITE_XLMAC_E2ECC_MODULE_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_E2ECC_MODULE_HDR_1r_BLKACC,p,XLMAC_E2ECC_MODULE_HDR_1r_OFFSET,0,&(r._xlmac_e2ecc_module_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_E2ECC_MODULE_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_DATA_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2EFC_DATA_HDR_0.
 */
#define READ_XLMAC_E2EFC_DATA_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_E2EFC_DATA_HDR_0r_BLKACC,p,XLMAC_E2EFC_DATA_HDR_0r_OFFSET,0,(r._xlmac_e2efc_data_hdr_0), 2)
#define WRITE_XLMAC_E2EFC_DATA_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_E2EFC_DATA_HDR_0r_BLKACC,p,XLMAC_E2EFC_DATA_HDR_0r_OFFSET,0,&(r._xlmac_e2efc_data_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_E2EFC_DATA_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_DATA_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2EFC_DATA_HDR_1.
 */
#define READ_XLMAC_E2EFC_DATA_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_E2EFC_DATA_HDR_1r_BLKACC,p,XLMAC_E2EFC_DATA_HDR_1r_OFFSET,0,(r._xlmac_e2efc_data_hdr_1), 2)
#define WRITE_XLMAC_E2EFC_DATA_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_E2EFC_DATA_HDR_1r_BLKACC,p,XLMAC_E2EFC_DATA_HDR_1r_OFFSET,0,&(r._xlmac_e2efc_data_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_E2EFC_DATA_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_MODULE_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2EFC_MODULE_HDR_0.
 */
#define READ_XLMAC_E2EFC_MODULE_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_E2EFC_MODULE_HDR_0r_BLKACC,p,XLMAC_E2EFC_MODULE_HDR_0r_OFFSET,0,(r._xlmac_e2efc_module_hdr_0), 2)
#define WRITE_XLMAC_E2EFC_MODULE_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_E2EFC_MODULE_HDR_0r_BLKACC,p,XLMAC_E2EFC_MODULE_HDR_0r_OFFSET,0,&(r._xlmac_e2efc_module_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_E2EFC_MODULE_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2EFC_MODULE_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2EFC_MODULE_HDR_1.
 */
#define READ_XLMAC_E2EFC_MODULE_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_E2EFC_MODULE_HDR_1r_BLKACC,p,XLMAC_E2EFC_MODULE_HDR_1r_OFFSET,0,(r._xlmac_e2efc_module_hdr_1), 2)
#define WRITE_XLMAC_E2EFC_MODULE_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_E2EFC_MODULE_HDR_1r_BLKACC,p,XLMAC_E2EFC_MODULE_HDR_1r_OFFSET,0,&(r._xlmac_e2efc_module_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_E2EFC_MODULE_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_E2E_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_E2E_CTRL.
 */
#define READ_XLMAC_E2E_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_E2E_CTRLr_BLKACC,p,XLMAC_E2E_CTRLr_OFFSET,0,(r._xlmac_e2e_ctrl), 2)
#define WRITE_XLMAC_E2E_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_E2E_CTRLr_BLKACC,p,XLMAC_E2E_CTRLr_OFFSET,0,&(r._xlmac_e2e_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_E2E_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_ECC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_ECC_CTRL.
 */
#define READ_XLMAC_ECC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_ECC_CTRLr_BLKACC,p,XLMAC_ECC_CTRLr_OFFSET,0,(r._xlmac_ecc_ctrl), 2)
#define WRITE_XLMAC_ECC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_ECC_CTRLr_BLKACC,p,XLMAC_ECC_CTRLr_OFFSET,0,&(r._xlmac_ecc_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_ECC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_ECC_FORCE_DOUBLE_BIT_ERR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_ECC_FORCE_DOUBLE_BIT_ERR.
 */
#define READ_XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_BLKACC,p,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_OFFSET,0,(r._xlmac_ecc_force_double_bit_err), 2)
#define WRITE_XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_BLKACC,p,XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr_OFFSET,0,&(r._xlmac_ecc_force_double_bit_err), 2)

/*******************************************************************************
 * End of 'XLMAC_ECC_FORCE_DOUBLE_BIT_ERRr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_ECC_FORCE_SINGLE_BIT_ERR
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_ECC_FORCE_SINGLE_BIT_ERR.
 */
#define READ_XLMAC_ECC_FORCE_SINGLE_BIT_ERRr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_BLKACC,p,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_OFFSET,0,(r._xlmac_ecc_force_single_bit_err), 2)
#define WRITE_XLMAC_ECC_FORCE_SINGLE_BIT_ERRr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_BLKACC,p,XLMAC_ECC_FORCE_SINGLE_BIT_ERRr_OFFSET,0,&(r._xlmac_ecc_force_single_bit_err), 2)

/*******************************************************************************
 * End of 'XLMAC_ECC_FORCE_SINGLE_BIT_ERRr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_EEE_1_SEC_LINK_STATUS_TIMER
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_EEE_1_SEC_LINK_STATUS_TIMER.
 */
#define READ_XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_BLKACC,p,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_OFFSET,0,(r._xlmac_eee_1_sec_link_status_timer), 2)
#define WRITE_XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_BLKACC,p,XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr_OFFSET,0,&(r._xlmac_eee_1_sec_link_status_timer), 2)

/*******************************************************************************
 * End of 'XLMAC_EEE_1_SEC_LINK_STATUS_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_EEE_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_EEE_CTRL.
 */
#define READ_XLMAC_EEE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_EEE_CTRLr_BLKACC,p,XLMAC_EEE_CTRLr_OFFSET,0,(r._xlmac_eee_ctrl), 2)
#define WRITE_XLMAC_EEE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_EEE_CTRLr_BLKACC,p,XLMAC_EEE_CTRLr_OFFSET,0,&(r._xlmac_eee_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_EEE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_EEE_TIMERS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_EEE_TIMERS.
 */
#define READ_XLMAC_EEE_TIMERSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_EEE_TIMERSr_BLKACC,p,XLMAC_EEE_TIMERSr_OFFSET,0,(r._xlmac_eee_timers), 2)
#define WRITE_XLMAC_EEE_TIMERSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_EEE_TIMERSr_BLKACC,p,XLMAC_EEE_TIMERSr_OFFSET,0,&(r._xlmac_eee_timers), 2)

/*******************************************************************************
 * End of 'XLMAC_EEE_TIMERSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_FIFO_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_FIFO_STATUS.
 */
#define READ_XLMAC_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_FIFO_STATUSr_BLKACC,p,XLMAC_FIFO_STATUSr_OFFSET,0,(r._xlmac_fifo_status), 2)
#define WRITE_XLMAC_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_FIFO_STATUSr_BLKACC,p,XLMAC_FIFO_STATUSr_OFFSET,0,&(r._xlmac_fifo_status), 2)

/*******************************************************************************
 * End of 'XLMAC_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_GMII_EEE_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_GMII_EEE_CTRL.
 */
#define READ_XLMAC_GMII_EEE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_GMII_EEE_CTRLr_BLKACC,p,XLMAC_GMII_EEE_CTRLr_OFFSET,0,(r._xlmac_gmii_eee_ctrl), 2)
#define WRITE_XLMAC_GMII_EEE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_GMII_EEE_CTRLr_BLKACC,p,XLMAC_GMII_EEE_CTRLr_OFFSET,0,&(r._xlmac_gmii_eee_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_GMII_EEE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_HIGIG_HDR_0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_HIGIG_HDR_0.
 */
#define READ_XLMAC_HIGIG_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_HIGIG_HDR_0r_BLKACC,p,XLMAC_HIGIG_HDR_0r_OFFSET,0,(r._xlmac_higig_hdr_0), 2)
#define WRITE_XLMAC_HIGIG_HDR_0r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_HIGIG_HDR_0r_BLKACC,p,XLMAC_HIGIG_HDR_0r_OFFSET,0,&(r._xlmac_higig_hdr_0), 2)

/*******************************************************************************
 * End of 'XLMAC_HIGIG_HDR_0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_HIGIG_HDR_1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_HIGIG_HDR_1.
 */
#define READ_XLMAC_HIGIG_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_HIGIG_HDR_1r_BLKACC,p,XLMAC_HIGIG_HDR_1r_OFFSET,0,(r._xlmac_higig_hdr_1), 2)
#define WRITE_XLMAC_HIGIG_HDR_1r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_HIGIG_HDR_1r_BLKACC,p,XLMAC_HIGIG_HDR_1r_OFFSET,0,&(r._xlmac_higig_hdr_1), 2)

/*******************************************************************************
 * End of 'XLMAC_HIGIG_HDR_1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_LAG_FAILOVER_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_LAG_FAILOVER_STATUS.
 */
#define READ_XLMAC_LAG_FAILOVER_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_LAG_FAILOVER_STATUSr_BLKACC,p,XLMAC_LAG_FAILOVER_STATUSr_OFFSET,0,(r._xlmac_lag_failover_status), 2)
#define WRITE_XLMAC_LAG_FAILOVER_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_LAG_FAILOVER_STATUSr_BLKACC,p,XLMAC_LAG_FAILOVER_STATUSr_OFFSET,0,&(r._xlmac_lag_failover_status), 2)

/*******************************************************************************
 * End of 'XLMAC_LAG_FAILOVER_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_LLFC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_LLFC_CTRL.
 */
#define READ_XLMAC_LLFC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_LLFC_CTRLr_BLKACC,p,XLMAC_LLFC_CTRLr_OFFSET,0,(r._xlmac_llfc_ctrl), 2)
#define WRITE_XLMAC_LLFC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_LLFC_CTRLr_BLKACC,p,XLMAC_LLFC_CTRLr_OFFSET,0,&(r._xlmac_llfc_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_LLFC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_MEM_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_MEM_CTRL.
 */
#define READ_XLMAC_MEM_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_MEM_CTRLr_BLKACC,p,XLMAC_MEM_CTRLr_OFFSET,0,(r._xlmac_mem_ctrl), 2)
#define WRITE_XLMAC_MEM_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_MEM_CTRLr_BLKACC,p,XLMAC_MEM_CTRLr_OFFSET,0,&(r._xlmac_mem_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_MEM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_MODE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_MODE.
 */
#define READ_XLMAC_MODEr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_MODEr_BLKACC,p,XLMAC_MODEr_OFFSET,0,(r._xlmac_mode), 2)
#define WRITE_XLMAC_MODEr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_MODEr_BLKACC,p,XLMAC_MODEr_OFFSET,0,&(r._xlmac_mode), 2)

/*******************************************************************************
 * End of 'XLMAC_MODEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PAUSE_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PAUSE_CTRL.
 */
#define READ_XLMAC_PAUSE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_PAUSE_CTRLr_BLKACC,p,XLMAC_PAUSE_CTRLr_OFFSET,0,(r._xlmac_pause_ctrl), 2)
#define WRITE_XLMAC_PAUSE_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_PAUSE_CTRLr_BLKACC,p,XLMAC_PAUSE_CTRLr_OFFSET,0,&(r._xlmac_pause_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_PAUSE_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PFC_CTRL.
 */
#define READ_XLMAC_PFC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_PFC_CTRLr_BLKACC,p,XLMAC_PFC_CTRLr_OFFSET,0,(r._xlmac_pfc_ctrl), 2)
#define WRITE_XLMAC_PFC_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_PFC_CTRLr_BLKACC,p,XLMAC_PFC_CTRLr_OFFSET,0,&(r._xlmac_pfc_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_PFC_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_DA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PFC_DA.
 */
#define READ_XLMAC_PFC_DAr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_PFC_DAr_BLKACC,p,XLMAC_PFC_DAr_OFFSET,0,(r._xlmac_pfc_da), 2)
#define WRITE_XLMAC_PFC_DAr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_PFC_DAr_BLKACC,p,XLMAC_PFC_DAr_OFFSET,0,&(r._xlmac_pfc_da), 2)

/*******************************************************************************
 * End of 'XLMAC_PFC_DAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_OPCODE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PFC_OPCODE.
 */
#define READ_XLMAC_PFC_OPCODEr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_PFC_OPCODEr_BLKACC,p,XLMAC_PFC_OPCODEr_OFFSET,0,(r._xlmac_pfc_opcode), 2)
#define WRITE_XLMAC_PFC_OPCODEr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_PFC_OPCODEr_BLKACC,p,XLMAC_PFC_OPCODEr_OFFSET,0,&(r._xlmac_pfc_opcode), 2)

/*******************************************************************************
 * End of 'XLMAC_PFC_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_PFC_TYPE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_PFC_TYPE.
 */
#define READ_XLMAC_PFC_TYPEr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_PFC_TYPEr_BLKACC,p,XLMAC_PFC_TYPEr_OFFSET,0,(r._xlmac_pfc_type), 2)
#define WRITE_XLMAC_PFC_TYPEr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_PFC_TYPEr_BLKACC,p,XLMAC_PFC_TYPEr_OFFSET,0,&(r._xlmac_pfc_type), 2)

/*******************************************************************************
 * End of 'XLMAC_PFC_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_CDC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_CDC_ECC_STATUS.
 */
#define READ_XLMAC_RX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_RX_CDC_ECC_STATUSr_BLKACC,p,XLMAC_RX_CDC_ECC_STATUSr_OFFSET,0,(r._xlmac_rx_cdc_ecc_status), 2)
#define WRITE_XLMAC_RX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_RX_CDC_ECC_STATUSr_BLKACC,p,XLMAC_RX_CDC_ECC_STATUSr_OFFSET,0,&(r._xlmac_rx_cdc_ecc_status), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_CDC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_CTRL.
 */
#define READ_XLMAC_RX_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_RX_CTRLr_BLKACC,p,XLMAC_RX_CTRLr_OFFSET,0,(r._xlmac_rx_ctrl), 2)
#define WRITE_XLMAC_RX_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_RX_CTRLr_BLKACC,p,XLMAC_RX_CTRLr_OFFSET,0,&(r._xlmac_rx_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_LLFC_MSG_FIELDS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_LLFC_MSG_FIELDS.
 */
#define READ_XLMAC_RX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_RX_LLFC_MSG_FIELDSr_BLKACC,p,XLMAC_RX_LLFC_MSG_FIELDSr_OFFSET,0,(r._xlmac_rx_llfc_msg_fields), 2)
#define WRITE_XLMAC_RX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_RX_LLFC_MSG_FIELDSr_BLKACC,p,XLMAC_RX_LLFC_MSG_FIELDSr_OFFSET,0,&(r._xlmac_rx_llfc_msg_fields), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_LLFC_MSG_FIELDSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_LSS_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_LSS_CTRL.
 */
#define READ_XLMAC_RX_LSS_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_RX_LSS_CTRLr_BLKACC,p,XLMAC_RX_LSS_CTRLr_OFFSET,0,(r._xlmac_rx_lss_ctrl), 2)
#define WRITE_XLMAC_RX_LSS_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_RX_LSS_CTRLr_BLKACC,p,XLMAC_RX_LSS_CTRLr_OFFSET,0,&(r._xlmac_rx_lss_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_LSS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_LSS_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_LSS_STATUS.
 */
#define READ_XLMAC_RX_LSS_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_RX_LSS_STATUSr_BLKACC,p,XLMAC_RX_LSS_STATUSr_OFFSET,0,(r._xlmac_rx_lss_status), 2)
#define WRITE_XLMAC_RX_LSS_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_RX_LSS_STATUSr_BLKACC,p,XLMAC_RX_LSS_STATUSr_OFFSET,0,&(r._xlmac_rx_lss_status), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_LSS_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_MAC_SA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_MAC_SA.
 */
#define READ_XLMAC_RX_MAC_SAr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_RX_MAC_SAr_BLKACC,p,XLMAC_RX_MAC_SAr_OFFSET,0,(r._xlmac_rx_mac_sa), 2)
#define WRITE_XLMAC_RX_MAC_SAr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_RX_MAC_SAr_BLKACC,p,XLMAC_RX_MAC_SAr_OFFSET,0,&(r._xlmac_rx_mac_sa), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_MAX_SIZE
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_MAX_SIZE.
 */
#define READ_XLMAC_RX_MAX_SIZEr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_RX_MAX_SIZEr_BLKACC,p,XLMAC_RX_MAX_SIZEr_OFFSET,0,(r._xlmac_rx_max_size), 2)
#define WRITE_XLMAC_RX_MAX_SIZEr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_RX_MAX_SIZEr_BLKACC,p,XLMAC_RX_MAX_SIZEr_OFFSET,0,&(r._xlmac_rx_max_size), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_MAX_SIZEr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_RX_VLAN_TAG
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_RX_VLAN_TAG.
 */
#define READ_XLMAC_RX_VLAN_TAGr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_RX_VLAN_TAGr_BLKACC,p,XLMAC_RX_VLAN_TAGr_OFFSET,0,(r._xlmac_rx_vlan_tag), 2)
#define WRITE_XLMAC_RX_VLAN_TAGr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_RX_VLAN_TAGr_BLKACC,p,XLMAC_RX_VLAN_TAGr_OFFSET,0,&(r._xlmac_rx_vlan_tag), 2)

/*******************************************************************************
 * End of 'XLMAC_RX_VLAN_TAGr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_SPARE0
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_SPARE0.
 */
#define READ_XLMAC_SPARE0r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_SPARE0r_BLKACC,p,XLMAC_SPARE0r_OFFSET,0,(r._xlmac_spare0), 2)
#define WRITE_XLMAC_SPARE0r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_SPARE0r_BLKACC,p,XLMAC_SPARE0r_OFFSET,0,&(r._xlmac_spare0), 2)

/*******************************************************************************
 * End of 'XLMAC_SPARE0r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_SPARE1
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_SPARE1.
 */
#define READ_XLMAC_SPARE1r(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_SPARE1r_BLKACC,p,XLMAC_SPARE1r_OFFSET,0,(r._xlmac_spare1), 2)
#define WRITE_XLMAC_SPARE1r(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_SPARE1r_BLKACC,p,XLMAC_SPARE1r_OFFSET,0,&(r._xlmac_spare1), 2)

/*******************************************************************************
 * End of 'XLMAC_SPARE1r'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TIMESTAMP_ADJUST
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TIMESTAMP_ADJUST.
 */
#define READ_XLMAC_TIMESTAMP_ADJUSTr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TIMESTAMP_ADJUSTr_BLKACC,p,XLMAC_TIMESTAMP_ADJUSTr_OFFSET,0,(r._xlmac_timestamp_adjust), 2)
#define WRITE_XLMAC_TIMESTAMP_ADJUSTr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TIMESTAMP_ADJUSTr_BLKACC,p,XLMAC_TIMESTAMP_ADJUSTr_OFFSET,0,&(r._xlmac_timestamp_adjust), 2)

/*******************************************************************************
 * End of 'XLMAC_TIMESTAMP_ADJUSTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TXFIFO_CELL_CNT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TXFIFO_CELL_CNT.
 */
#define READ_XLMAC_TXFIFO_CELL_CNTr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TXFIFO_CELL_CNTr_BLKACC,p,XLMAC_TXFIFO_CELL_CNTr_OFFSET,0,(r._xlmac_txfifo_cell_cnt), 2)
#define WRITE_XLMAC_TXFIFO_CELL_CNTr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TXFIFO_CELL_CNTr_BLKACC,p,XLMAC_TXFIFO_CELL_CNTr_OFFSET,0,&(r._xlmac_txfifo_cell_cnt), 2)

/*******************************************************************************
 * End of 'XLMAC_TXFIFO_CELL_CNTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TXFIFO_CELL_REQ_CNT
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TXFIFO_CELL_REQ_CNT.
 */
#define READ_XLMAC_TXFIFO_CELL_REQ_CNTr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TXFIFO_CELL_REQ_CNTr_BLKACC,p,XLMAC_TXFIFO_CELL_REQ_CNTr_OFFSET,0,(r._xlmac_txfifo_cell_req_cnt), 2)
#define WRITE_XLMAC_TXFIFO_CELL_REQ_CNTr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TXFIFO_CELL_REQ_CNTr_BLKACC,p,XLMAC_TXFIFO_CELL_REQ_CNTr_OFFSET,0,&(r._xlmac_txfifo_cell_req_cnt), 2)

/*******************************************************************************
 * End of 'XLMAC_TXFIFO_CELL_REQ_CNTr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_CDC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_CDC_ECC_STATUS.
 */
#define READ_XLMAC_TX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TX_CDC_ECC_STATUSr_BLKACC,p,XLMAC_TX_CDC_ECC_STATUSr_OFFSET,0,(r._xlmac_tx_cdc_ecc_status), 2)
#define WRITE_XLMAC_TX_CDC_ECC_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TX_CDC_ECC_STATUSr_BLKACC,p,XLMAC_TX_CDC_ECC_STATUSr_OFFSET,0,&(r._xlmac_tx_cdc_ecc_status), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_CDC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_CRC_CORRUPT_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_CRC_CORRUPT_CTRL.
 */
#define READ_XLMAC_TX_CRC_CORRUPT_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TX_CRC_CORRUPT_CTRLr_BLKACC,p,XLMAC_TX_CRC_CORRUPT_CTRLr_OFFSET,0,(r._xlmac_tx_crc_corrupt_ctrl), 2)
#define WRITE_XLMAC_TX_CRC_CORRUPT_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TX_CRC_CORRUPT_CTRLr_BLKACC,p,XLMAC_TX_CRC_CORRUPT_CTRLr_OFFSET,0,&(r._xlmac_tx_crc_corrupt_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_CRC_CORRUPT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_CTRL.
 */
#define READ_XLMAC_TX_CTRLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TX_CTRLr_BLKACC,p,XLMAC_TX_CTRLr_OFFSET,0,(r._xlmac_tx_ctrl), 2)
#define WRITE_XLMAC_TX_CTRLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TX_CTRLr_BLKACC,p,XLMAC_TX_CTRLr_OFFSET,0,&(r._xlmac_tx_ctrl), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_LLFC_MSG_FIELDS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_LLFC_MSG_FIELDS.
 */
#define READ_XLMAC_TX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TX_LLFC_MSG_FIELDSr_BLKACC,p,XLMAC_TX_LLFC_MSG_FIELDSr_OFFSET,0,(r._xlmac_tx_llfc_msg_fields), 2)
#define WRITE_XLMAC_TX_LLFC_MSG_FIELDSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TX_LLFC_MSG_FIELDSr_BLKACC,p,XLMAC_TX_LLFC_MSG_FIELDSr_OFFSET,0,&(r._xlmac_tx_llfc_msg_fields), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_LLFC_MSG_FIELDSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_MAC_SA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_MAC_SA.
 */
#define READ_XLMAC_TX_MAC_SAr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TX_MAC_SAr_BLKACC,p,XLMAC_TX_MAC_SAr_OFFSET,0,(r._xlmac_tx_mac_sa), 2)
#define WRITE_XLMAC_TX_MAC_SAr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TX_MAC_SAr_BLKACC,p,XLMAC_TX_MAC_SAr_OFFSET,0,&(r._xlmac_tx_mac_sa), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_MAC_SAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_TIMESTAMP_FIFO_DATA
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_TIMESTAMP_FIFO_DATA.
 */
#define READ_XLMAC_TX_TIMESTAMP_FIFO_DATAr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TX_TIMESTAMP_FIFO_DATAr_BLKACC,p,XLMAC_TX_TIMESTAMP_FIFO_DATAr_OFFSET,0,(r._xlmac_tx_timestamp_fifo_data), 2)
#define WRITE_XLMAC_TX_TIMESTAMP_FIFO_DATAr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TX_TIMESTAMP_FIFO_DATAr_BLKACC,p,XLMAC_TX_TIMESTAMP_FIFO_DATAr_OFFSET,0,&(r._xlmac_tx_timestamp_fifo_data), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_TIMESTAMP_FIFO_DATAr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_TX_TIMESTAMP_FIFO_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_TX_TIMESTAMP_FIFO_STATUS.
 */
#define READ_XLMAC_TX_TIMESTAMP_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_BLKACC,p,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_OFFSET,0,(r._xlmac_tx_timestamp_fifo_status), 2)
#define WRITE_XLMAC_TX_TIMESTAMP_FIFO_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_BLKACC,p,XLMAC_TX_TIMESTAMP_FIFO_STATUSr_OFFSET,0,&(r._xlmac_tx_timestamp_fifo_status), 2)

/*******************************************************************************
 * End of 'XLMAC_TX_TIMESTAMP_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLMAC_VERSION_ID
 * BLOCKS:   XLPORT
 * SIZE:     64
 */
/*
 * These macros can be used to access XLMAC_VERSION_ID.
 */
#define READ_XLMAC_VERSION_IDr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLMAC_VERSION_IDr_BLKACC,p,XLMAC_VERSION_IDr_OFFSET,0,(r._xlmac_version_id), 2)
#define WRITE_XLMAC_VERSION_IDr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLMAC_VERSION_IDr_BLKACC,p,XLMAC_VERSION_IDr_OFFSET,0,&(r._xlmac_version_id), 2)

/*******************************************************************************
 * End of 'XLMAC_VERSION_IDr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_CNTMAXSIZE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_CNTMAXSIZE.
 */
#define READ_XLPORT_CNTMAXSIZEr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_CNTMAXSIZEr_BLKACC,p,XLPORT_CNTMAXSIZEr_OFFSET,0,(r._xlport_cntmaxsize), 1)
#define WRITE_XLPORT_CNTMAXSIZEr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_CNTMAXSIZEr_BLKACC,p,XLPORT_CNTMAXSIZEr_OFFSET,0,&(r._xlport_cntmaxsize), 1)

/*******************************************************************************
 * End of 'XLPORT_CNTMAXSIZEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_CONFIG.
 */
#define READ_XLPORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_CONFIGr_BLKACC,p,XLPORT_CONFIGr_OFFSET,0,(r._xlport_config), 1)
#define WRITE_XLPORT_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_CONFIGr_BLKACC,p,XLPORT_CONFIGr_OFFSET,0,&(r._xlport_config), 1)

/*******************************************************************************
 * End of 'XLPORT_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_ECC_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_ECC_CONTROL.
 */
#define READ_XLPORT_ECC_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_ECC_CONTROLr_BLKACC,p,XLPORT_ECC_CONTROLr_OFFSET,0,(r._xlport_ecc_control), 1)
#define WRITE_XLPORT_ECC_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_ECC_CONTROLr_BLKACC,p,XLPORT_ECC_CONTROLr_OFFSET,0,&(r._xlport_ecc_control), 1)

/*******************************************************************************
 * End of 'XLPORT_ECC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_CLOCK_GATE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_EEE_CLOCK_GATE.
 */
#define READ_XLPORT_EEE_CLOCK_GATEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_EEE_CLOCK_GATEr_BLKACC,p,XLPORT_EEE_CLOCK_GATEr_OFFSET,0,(r._xlport_eee_clock_gate), 1)
#define WRITE_XLPORT_EEE_CLOCK_GATEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_EEE_CLOCK_GATEr_BLKACC,p,XLPORT_EEE_CLOCK_GATEr_OFFSET,0,&(r._xlport_eee_clock_gate), 1)

/*******************************************************************************
 * End of 'XLPORT_EEE_CLOCK_GATEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_CORE0_CLOCK_GATE_COUNTER
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_EEE_CORE0_CLOCK_GATE_COUNTER.
 */
#define READ_XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_BLKACC,p,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_OFFSET,0,(r._xlport_eee_core0_clock_gate_counter), 1)
#define WRITE_XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_BLKACC,p,XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr_OFFSET,0,&(r._xlport_eee_core0_clock_gate_counter), 1)

/*******************************************************************************
 * End of 'XLPORT_EEE_CORE0_CLOCK_GATE_COUNTERr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_COUNTER_MODE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_EEE_COUNTER_MODE.
 */
#define READ_XLPORT_EEE_COUNTER_MODEr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_EEE_COUNTER_MODEr_BLKACC,p,XLPORT_EEE_COUNTER_MODEr_OFFSET,0,(r._xlport_eee_counter_mode), 1)
#define WRITE_XLPORT_EEE_COUNTER_MODEr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_EEE_COUNTER_MODEr_BLKACC,p,XLPORT_EEE_COUNTER_MODEr_OFFSET,0,&(r._xlport_eee_counter_mode), 1)

/*******************************************************************************
 * End of 'XLPORT_EEE_COUNTER_MODEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_EEE_DURATION_TIMER_PULSE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_EEE_DURATION_TIMER_PULSE.
 */
#define READ_XLPORT_EEE_DURATION_TIMER_PULSEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_EEE_DURATION_TIMER_PULSEr_BLKACC,p,XLPORT_EEE_DURATION_TIMER_PULSEr_OFFSET,0,(r._xlport_eee_duration_timer_pulse), 1)
#define WRITE_XLPORT_EEE_DURATION_TIMER_PULSEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_EEE_DURATION_TIMER_PULSEr_BLKACC,p,XLPORT_EEE_DURATION_TIMER_PULSEr_OFFSET,0,&(r._xlport_eee_duration_timer_pulse), 1)

/*******************************************************************************
 * End of 'XLPORT_EEE_DURATION_TIMER_PULSEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_ENABLE_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_ENABLE_REG.
 */
#define READ_XLPORT_ENABLE_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_ENABLE_REGr_BLKACC,p,XLPORT_ENABLE_REGr_OFFSET,0,(r._xlport_enable_reg), 1)
#define WRITE_XLPORT_ENABLE_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_ENABLE_REGr_BLKACC,p,XLPORT_ENABLE_REGr_OFFSET,0,&(r._xlport_enable_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_ENABLE_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FAULT_LINK_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_FAULT_LINK_STATUS.
 */
#define READ_XLPORT_FAULT_LINK_STATUSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_FAULT_LINK_STATUSr_BLKACC,p,XLPORT_FAULT_LINK_STATUSr_OFFSET,0,(r._xlport_fault_link_status), 1)
#define WRITE_XLPORT_FAULT_LINK_STATUSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_FAULT_LINK_STATUSr_BLKACC,p,XLPORT_FAULT_LINK_STATUSr_OFFSET,0,&(r._xlport_fault_link_status), 1)

/*******************************************************************************
 * End of 'XLPORT_FAULT_LINK_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FLOW_CONTROL_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_FLOW_CONTROL_CONFIG.
 */
#define READ_XLPORT_FLOW_CONTROL_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_FLOW_CONTROL_CONFIGr_BLKACC,p,XLPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,(r._xlport_flow_control_config), 1)
#define WRITE_XLPORT_FLOW_CONTROL_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_FLOW_CONTROL_CONFIGr_BLKACC,p,XLPORT_FLOW_CONTROL_CONFIGr_OFFSET,0,&(r._xlport_flow_control_config), 1)

/*******************************************************************************
 * End of 'XLPORT_FLOW_CONTROL_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FORCE_DOUBLE_BIT_ERROR
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_FORCE_DOUBLE_BIT_ERROR.
 */
#define READ_XLPORT_FORCE_DOUBLE_BIT_ERRORr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_FORCE_DOUBLE_BIT_ERRORr_BLKACC,p,XLPORT_FORCE_DOUBLE_BIT_ERRORr_OFFSET,0,(r._xlport_force_double_bit_error), 1)
#define WRITE_XLPORT_FORCE_DOUBLE_BIT_ERRORr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_FORCE_DOUBLE_BIT_ERRORr_BLKACC,p,XLPORT_FORCE_DOUBLE_BIT_ERRORr_OFFSET,0,&(r._xlport_force_double_bit_error), 1)

/*******************************************************************************
 * End of 'XLPORT_FORCE_DOUBLE_BIT_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_FORCE_SINGLE_BIT_ERROR
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_FORCE_SINGLE_BIT_ERROR.
 */
#define READ_XLPORT_FORCE_SINGLE_BIT_ERRORr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_FORCE_SINGLE_BIT_ERRORr_BLKACC,p,XLPORT_FORCE_SINGLE_BIT_ERRORr_OFFSET,0,(r._xlport_force_single_bit_error), 1)
#define WRITE_XLPORT_FORCE_SINGLE_BIT_ERRORr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_FORCE_SINGLE_BIT_ERRORr_BLKACC,p,XLPORT_FORCE_SINGLE_BIT_ERRORr_OFFSET,0,&(r._xlport_force_single_bit_error), 1)

/*******************************************************************************
 * End of 'XLPORT_FORCE_SINGLE_BIT_ERRORr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_INTR_ENABLE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_INTR_ENABLE.
 */
#define READ_XLPORT_INTR_ENABLEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_INTR_ENABLEr_BLKACC,p,XLPORT_INTR_ENABLEr_OFFSET,0,(r._xlport_intr_enable), 1)
#define WRITE_XLPORT_INTR_ENABLEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_INTR_ENABLEr_BLKACC,p,XLPORT_INTR_ENABLEr_OFFSET,0,&(r._xlport_intr_enable), 1)

/*******************************************************************************
 * End of 'XLPORT_INTR_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_INTR_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_INTR_STATUS.
 */
#define READ_XLPORT_INTR_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_INTR_STATUSr_BLKACC,p,XLPORT_INTR_STATUSr_OFFSET,0,(r._xlport_intr_status), 1)
#define WRITE_XLPORT_INTR_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_INTR_STATUSr_BLKACC,p,XLPORT_INTR_STATUSr_OFFSET,0,&(r._xlport_intr_status), 1)

/*******************************************************************************
 * End of 'XLPORT_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LAG_FAILOVER_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_LAG_FAILOVER_CONFIG.
 */
#define READ_XLPORT_LAG_FAILOVER_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_LAG_FAILOVER_CONFIGr_BLKACC,p,XLPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,(r._xlport_lag_failover_config), 1)
#define WRITE_XLPORT_LAG_FAILOVER_CONFIGr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_LAG_FAILOVER_CONFIGr_BLKACC,p,XLPORT_LAG_FAILOVER_CONFIGr_OFFSET,0,&(r._xlport_lag_failover_config), 1)

/*******************************************************************************
 * End of 'XLPORT_LAG_FAILOVER_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LED_CHAIN_CONFIG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_LED_CHAIN_CONFIG.
 */
#define READ_XLPORT_LED_CHAIN_CONFIGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_LED_CHAIN_CONFIGr_BLKACC,p,XLPORT_LED_CHAIN_CONFIGr_OFFSET,0,(r._xlport_led_chain_config), 1)
#define WRITE_XLPORT_LED_CHAIN_CONFIGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_LED_CHAIN_CONFIGr_BLKACC,p,XLPORT_LED_CHAIN_CONFIGr_OFFSET,0,&(r._xlport_led_chain_config), 1)

/*******************************************************************************
 * End of 'XLPORT_LED_CHAIN_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LINKSTATUS_DOWN
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_LINKSTATUS_DOWN.
 */
#define READ_XLPORT_LINKSTATUS_DOWNr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_LINKSTATUS_DOWNr_BLKACC,p,XLPORT_LINKSTATUS_DOWNr_OFFSET,0,(r._xlport_linkstatus_down), 1)
#define WRITE_XLPORT_LINKSTATUS_DOWNr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_LINKSTATUS_DOWNr_BLKACC,p,XLPORT_LINKSTATUS_DOWNr_OFFSET,0,&(r._xlport_linkstatus_down), 1)

/*******************************************************************************
 * End of 'XLPORT_LINKSTATUS_DOWNr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_LINKSTATUS_DOWN_CLEAR
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_LINKSTATUS_DOWN_CLEAR.
 */
#define READ_XLPORT_LINKSTATUS_DOWN_CLEARr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_LINKSTATUS_DOWN_CLEARr_BLKACC,p,XLPORT_LINKSTATUS_DOWN_CLEARr_OFFSET,0,(r._xlport_linkstatus_down_clear), 1)
#define WRITE_XLPORT_LINKSTATUS_DOWN_CLEARr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_LINKSTATUS_DOWN_CLEARr_BLKACC,p,XLPORT_LINKSTATUS_DOWN_CLEARr_OFFSET,0,&(r._xlport_linkstatus_down_clear), 1)

/*******************************************************************************
 * End of 'XLPORT_LINKSTATUS_DOWN_CLEARr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MAC_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MAC_CONTROL.
 */
#define READ_XLPORT_MAC_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MAC_CONTROLr_BLKACC,p,XLPORT_MAC_CONTROLr_OFFSET,0,(r._xlport_mac_control), 1)
#define WRITE_XLPORT_MAC_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MAC_CONTROLr_BLKACC,p,XLPORT_MAC_CONTROLr_OFFSET,0,&(r._xlport_mac_control), 1)

/*******************************************************************************
 * End of 'XLPORT_MAC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MAC_RSV_MASK
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MAC_RSV_MASK.
 */
#define READ_XLPORT_MAC_RSV_MASKr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_MAC_RSV_MASKr_BLKACC,p,XLPORT_MAC_RSV_MASKr_OFFSET,0,(r._xlport_mac_rsv_mask), 1)
#define WRITE_XLPORT_MAC_RSV_MASKr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_MAC_RSV_MASKr_BLKACC,p,XLPORT_MAC_RSV_MASKr_OFFSET,0,&(r._xlport_mac_rsv_mask), 1)

/*******************************************************************************
 * End of 'XLPORT_MAC_RSV_MASKr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RESET
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RESET.
 */
#define READ_XLPORT_MIB_RESETr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MIB_RESETr_BLKACC,p,XLPORT_MIB_RESETr_OFFSET,0,(r._xlport_mib_reset), 1)
#define WRITE_XLPORT_MIB_RESETr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MIB_RESETr_BLKACC,p,XLPORT_MIB_RESETr_OFFSET,0,&(r._xlport_mib_reset), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RESETr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC0_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RSC0_ECC_STATUS.
 */
#define READ_XLPORT_MIB_RSC0_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MIB_RSC0_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC0_ECC_STATUSr_OFFSET,0,(r._xlport_mib_rsc0_ecc_status), 1)
#define WRITE_XLPORT_MIB_RSC0_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MIB_RSC0_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC0_ECC_STATUSr_OFFSET,0,&(r._xlport_mib_rsc0_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC0_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC1_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RSC1_ECC_STATUS.
 */
#define READ_XLPORT_MIB_RSC1_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MIB_RSC1_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC1_ECC_STATUSr_OFFSET,0,(r._xlport_mib_rsc1_ecc_status), 1)
#define WRITE_XLPORT_MIB_RSC1_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MIB_RSC1_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC1_ECC_STATUSr_OFFSET,0,&(r._xlport_mib_rsc1_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC1_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RSC_ECC_STATUS.
 */
#define READ_XLPORT_MIB_RSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MIB_RSC_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC_ECC_STATUSr_OFFSET,i,(r._xlport_mib_rsc_ecc_status), 1)
#define WRITE_XLPORT_MIB_RSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MIB_RSC_ECC_STATUSr_BLKACC,p,XLPORT_MIB_RSC_ECC_STATUSr_OFFSET,i,&(r._xlport_mib_rsc_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_RSC_RAM_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_RSC_RAM_CONTROL.
 */
#define READ_XLPORT_MIB_RSC_RAM_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MIB_RSC_RAM_CONTROLr_BLKACC,p,XLPORT_MIB_RSC_RAM_CONTROLr_OFFSET,0,(r._xlport_mib_rsc_ram_control), 1)
#define WRITE_XLPORT_MIB_RSC_RAM_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MIB_RSC_RAM_CONTROLr_BLKACC,p,XLPORT_MIB_RSC_RAM_CONTROLr_OFFSET,0,&(r._xlport_mib_rsc_ram_control), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_RSC_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC0_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_TSC0_ECC_STATUS.
 */
#define READ_XLPORT_MIB_TSC0_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MIB_TSC0_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC0_ECC_STATUSr_OFFSET,0,(r._xlport_mib_tsc0_ecc_status), 1)
#define WRITE_XLPORT_MIB_TSC0_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MIB_TSC0_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC0_ECC_STATUSr_OFFSET,0,&(r._xlport_mib_tsc0_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC0_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC1_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_TSC1_ECC_STATUS.
 */
#define READ_XLPORT_MIB_TSC1_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MIB_TSC1_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC1_ECC_STATUSr_OFFSET,0,(r._xlport_mib_tsc1_ecc_status), 1)
#define WRITE_XLPORT_MIB_TSC1_ECC_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MIB_TSC1_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC1_ECC_STATUSr_OFFSET,0,&(r._xlport_mib_tsc1_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC1_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC_ECC_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_TSC_ECC_STATUS.
 */
#define READ_XLPORT_MIB_TSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MIB_TSC_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC_ECC_STATUSr_OFFSET,i,(r._xlport_mib_tsc_ecc_status), 1)
#define WRITE_XLPORT_MIB_TSC_ECC_STATUSr(u,i,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MIB_TSC_ECC_STATUSr_BLKACC,p,XLPORT_MIB_TSC_ECC_STATUSr_OFFSET,i,&(r._xlport_mib_tsc_ecc_status), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC_ECC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MIB_TSC_RAM_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MIB_TSC_RAM_CONTROL.
 */
#define READ_XLPORT_MIB_TSC_RAM_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MIB_TSC_RAM_CONTROLr_BLKACC,p,XLPORT_MIB_TSC_RAM_CONTROLr_OFFSET,0,(r._xlport_mib_tsc_ram_control), 1)
#define WRITE_XLPORT_MIB_TSC_RAM_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MIB_TSC_RAM_CONTROLr_BLKACC,p,XLPORT_MIB_TSC_RAM_CONTROLr_OFFSET,0,&(r._xlport_mib_tsc_ram_control), 1)

/*******************************************************************************
 * End of 'XLPORT_MIB_TSC_RAM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_MODE_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_MODE_REG.
 */
#define READ_XLPORT_MODE_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_MODE_REGr_BLKACC,p,XLPORT_MODE_REGr_OFFSET,0,(r._xlport_mode_reg), 1)
#define WRITE_XLPORT_MODE_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_MODE_REGr_BLKACC,p,XLPORT_MODE_REGr_OFFSET,0,&(r._xlport_mode_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_MODE_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_POWER_SAVE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_POWER_SAVE.
 */
#define READ_XLPORT_POWER_SAVEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_POWER_SAVEr_BLKACC,p,XLPORT_POWER_SAVEr_OFFSET,0,(r._xlport_power_save), 1)
#define WRITE_XLPORT_POWER_SAVEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_POWER_SAVEr_BLKACC,p,XLPORT_POWER_SAVEr_OFFSET,0,&(r._xlport_power_save), 1)

/*******************************************************************************
 * End of 'XLPORT_POWER_SAVEr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SBUS_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SBUS_CONTROL.
 */
#define READ_XLPORT_SBUS_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_SBUS_CONTROLr_BLKACC,p,XLPORT_SBUS_CONTROLr_OFFSET,0,(r._xlport_sbus_control), 1)
#define WRITE_XLPORT_SBUS_CONTROLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_SBUS_CONTROLr_BLKACC,p,XLPORT_SBUS_CONTROLr_OFFSET,0,&(r._xlport_sbus_control), 1)

/*******************************************************************************
 * End of 'XLPORT_SBUS_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SGNDET_EARLYCRS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SGNDET_EARLYCRS.
 */
#define READ_XLPORT_SGNDET_EARLYCRSr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_SGNDET_EARLYCRSr_BLKACC,p,XLPORT_SGNDET_EARLYCRSr_OFFSET,0,(r._xlport_sgndet_earlycrs), 1)
#define WRITE_XLPORT_SGNDET_EARLYCRSr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_SGNDET_EARLYCRSr_BLKACC,p,XLPORT_SGNDET_EARLYCRSr_OFFSET,0,&(r._xlport_sgndet_earlycrs), 1)

/*******************************************************************************
 * End of 'XLPORT_SGNDET_EARLYCRSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SOFT_RESET
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SOFT_RESET.
 */
#define READ_XLPORT_SOFT_RESETr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_SOFT_RESETr_BLKACC,p,XLPORT_SOFT_RESETr_OFFSET,0,(r._xlport_soft_reset), 1)
#define WRITE_XLPORT_SOFT_RESETr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_SOFT_RESETr_BLKACC,p,XLPORT_SOFT_RESETr_OFFSET,0,&(r._xlport_soft_reset), 1)

/*******************************************************************************
 * End of 'XLPORT_SOFT_RESETr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SPARE0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SPARE0_REG.
 */
#define READ_XLPORT_SPARE0_REGr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_SPARE0_REGr_BLKACC,p,XLPORT_SPARE0_REGr_OFFSET,0,(r._xlport_spare0_reg), 1)
#define WRITE_XLPORT_SPARE0_REGr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_SPARE0_REGr_BLKACC,p,XLPORT_SPARE0_REGr_OFFSET,0,&(r._xlport_spare0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_SPARE0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_SW_FLOW_CONTROL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_SW_FLOW_CONTROL.
 */
#define READ_XLPORT_SW_FLOW_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XLPORT_SW_FLOW_CONTROLr_BLKACC,p,XLPORT_SW_FLOW_CONTROLr_OFFSET,0,(r._xlport_sw_flow_control), 1)
#define WRITE_XLPORT_SW_FLOW_CONTROLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XLPORT_SW_FLOW_CONTROLr_BLKACC,p,XLPORT_SW_FLOW_CONTROLr_OFFSET,0,&(r._xlport_sw_flow_control), 1)

/*******************************************************************************
 * End of 'XLPORT_SW_FLOW_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_TSC_PLL_LOCK_STATUS
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_TSC_PLL_LOCK_STATUS.
 */
#define READ_XLPORT_TSC_PLL_LOCK_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_TSC_PLL_LOCK_STATUSr_BLKACC,p,XLPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,(r._xlport_tsc_pll_lock_status), 1)
#define WRITE_XLPORT_TSC_PLL_LOCK_STATUSr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_TSC_PLL_LOCK_STATUSr_BLKACC,p,XLPORT_TSC_PLL_LOCK_STATUSr_OFFSET,0,&(r._xlport_tsc_pll_lock_status), 1)

/*******************************************************************************
 * End of 'XLPORT_TSC_PLL_LOCK_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_TS_TIMER_31_0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_TS_TIMER_31_0_REG.
 */
#define READ_XLPORT_TS_TIMER_31_0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_TS_TIMER_31_0_REGr_BLKACC,p,XLPORT_TS_TIMER_31_0_REGr_OFFSET,0,(r._xlport_ts_timer_31_0_reg), 1)
#define WRITE_XLPORT_TS_TIMER_31_0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_TS_TIMER_31_0_REGr_BLKACC,p,XLPORT_TS_TIMER_31_0_REGr_OFFSET,0,&(r._xlport_ts_timer_31_0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_TS_TIMER_31_0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_TS_TIMER_47_32_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_TS_TIMER_47_32_REG.
 */
#define READ_XLPORT_TS_TIMER_47_32_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_TS_TIMER_47_32_REGr_BLKACC,p,XLPORT_TS_TIMER_47_32_REGr_OFFSET,0,(r._xlport_ts_timer_47_32_reg), 1)
#define WRITE_XLPORT_TS_TIMER_47_32_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_TS_TIMER_47_32_REGr_BLKACC,p,XLPORT_TS_TIMER_47_32_REGr_OFFSET,0,&(r._xlport_ts_timer_47_32_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_TS_TIMER_47_32_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_WC_UCMEM_CTRL
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_WC_UCMEM_CTRL.
 */
#define READ_XLPORT_WC_UCMEM_CTRLr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_WC_UCMEM_CTRLr_BLKACC,p,XLPORT_WC_UCMEM_CTRLr_OFFSET,0,(r._xlport_wc_ucmem_ctrl), 1)
#define WRITE_XLPORT_WC_UCMEM_CTRLr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_WC_UCMEM_CTRLr_BLKACC,p,XLPORT_WC_UCMEM_CTRLr_OFFSET,0,&(r._xlport_wc_ucmem_ctrl), 1)

/*******************************************************************************
 * End of 'XLPORT_WC_UCMEM_CTRLr'
 */




/*******************************************************************************
 * MEMORY:  XLPORT_WC_UCMEM_DATA
 * BLOCKS:   XLPORT
 * SIZE:     128
 */
/*
 * These macros can be used to access XLPORT_WC_UCMEM_DATA.
 */
#define READ_XLPORT_WC_UCMEM_DATAm(u,i,m,p) bcmbd_cmicd_mem_blocks_read(u,XLPORT_WC_UCMEM_DATAm_BLKACC,p,XLPORT_WC_UCMEM_DATAm_OFFSET,i,(m._xlport_wc_ucmem_data),4)
#define WRITE_XLPORT_WC_UCMEM_DATAm(u,i,m,p) bcmbd_cmicd_mem_blocks_write(u,XLPORT_WC_UCMEM_DATAm_BLKACC,p,XLPORT_WC_UCMEM_DATAm_OFFSET,i,&(m._xlport_wc_ucmem_data),4)

/*******************************************************************************
 * End of 'XLPORT_WC_UCMEM_DATAm'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_CTRL_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_CTRL_REG.
 */
#define READ_XLPORT_XGXS0_CTRL_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_XGXS0_CTRL_REGr_BLKACC,p,XLPORT_XGXS0_CTRL_REGr_OFFSET,0,(r._xlport_xgxs0_ctrl_reg), 1)
#define WRITE_XLPORT_XGXS0_CTRL_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_XGXS0_CTRL_REGr_BLKACC,p,XLPORT_XGXS0_CTRL_REGr_OFFSET,0,&(r._xlport_xgxs0_ctrl_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_CTRL_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN0_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_LN0_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_LN0_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_XGXS0_LN0_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN0_STATUS0_REGr_OFFSET,0,(r._xlport_xgxs0_ln0_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_LN0_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_XGXS0_LN0_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN0_STATUS0_REGr_OFFSET,0,&(r._xlport_xgxs0_ln0_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_LN0_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN1_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_LN1_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_LN1_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_XGXS0_LN1_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN1_STATUS0_REGr_OFFSET,0,(r._xlport_xgxs0_ln1_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_LN1_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_XGXS0_LN1_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN1_STATUS0_REGr_OFFSET,0,&(r._xlport_xgxs0_ln1_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_LN1_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN2_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_LN2_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_LN2_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_XGXS0_LN2_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN2_STATUS0_REGr_OFFSET,0,(r._xlport_xgxs0_ln2_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_LN2_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_XGXS0_LN2_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN2_STATUS0_REGr_OFFSET,0,&(r._xlport_xgxs0_ln2_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_LN2_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_LN3_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_LN3_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_LN3_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_XGXS0_LN3_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN3_STATUS0_REGr_OFFSET,0,(r._xlport_xgxs0_ln3_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_LN3_STATUS0_REGr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_XGXS0_LN3_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_LN3_STATUS0_REGr_OFFSET,0,&(r._xlport_xgxs0_ln3_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_LN3_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS0_STATUS0_REG
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS0_STATUS0_REG.
 */
#define READ_XLPORT_XGXS0_STATUS0_REGr(u,i,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_XGXS0_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_STATUS0_REGr_OFFSET,i,(r._xlport_xgxs0_status0_reg), 1)
#define WRITE_XLPORT_XGXS0_STATUS0_REGr(u,i,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_XGXS0_STATUS0_REGr_BLKACC,p,XLPORT_XGXS0_STATUS0_REGr_OFFSET,i,&(r._xlport_xgxs0_status0_reg), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS0_STATUS0_REGr'
 */




/*******************************************************************************
 * REGISTER:  XLPORT_XGXS_COUNTER_MODE
 * BLOCKS:   XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XLPORT_XGXS_COUNTER_MODE.
 */
#define READ_XLPORT_XGXS_COUNTER_MODEr(u,r,p) bcmbd_cmicd_reg_blocks_read(u,XLPORT_XGXS_COUNTER_MODEr_BLKACC,p,XLPORT_XGXS_COUNTER_MODEr_OFFSET,0,(r._xlport_xgxs_counter_mode), 1)
#define WRITE_XLPORT_XGXS_COUNTER_MODEr(u,r,p) bcmbd_cmicd_reg_blocks_write(u,XLPORT_XGXS_COUNTER_MODEr_BLKACC,p,XLPORT_XGXS_COUNTER_MODEr_OFFSET,0,&(r._xlport_xgxs_counter_mode), 1)

/*******************************************************************************
 * End of 'XLPORT_XGXS_COUNTER_MODEr'
 */




/*******************************************************************************
 * REGISTER:  XPORT_PFC_STATE
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access XPORT_PFC_STATE.
 */
#define READ_XPORT_PFC_STATEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_read(u,XPORT_PFC_STATEr_BLKACC,4,0,p,XPORT_PFC_STATEr_OFFSET,i,(r._xport_pfc_state),1)
#define WRITE_XPORT_PFC_STATEr(u,p,i,r) bcmbd_cmicd_reg_unique_block_write(u,XPORT_PFC_STATEr_BLKACC,4,0,p,XPORT_PFC_STATEr_OFFSET,i,&(r._xport_pfc_state),1)

/*******************************************************************************
 * End of 'XPORT_PFC_STATEr'
 */




/*******************************************************************************
 * REGISTER:  XPORT_TO_MMU_BKP
 * BLOCKS:   MMU_SC
 * SIZE:     32
 */
/*
 * These macros can be used to access XPORT_TO_MMU_BKP.
 */
#define READ_XPORT_TO_MMU_BKPr(u,p,r) bcmbd_cmicd_reg_unique_block_read(u,XPORT_TO_MMU_BKPr_BLKACC,4,0,p,XPORT_TO_MMU_BKPr_OFFSET,0,(r._xport_to_mmu_bkp),1)
#define WRITE_XPORT_TO_MMU_BKPr(u,p,r) bcmbd_cmicd_reg_unique_block_write(u,XPORT_TO_MMU_BKPr_BLKACC,4,0,p,XPORT_TO_MMU_BKPr_OFFSET,0,&(r._xport_to_mmu_bkp),1)

/*******************************************************************************
 * End of 'XPORT_TO_MMU_BKPr'
 */




/*******************************************************************************
 * REGISTER:  XTHOL
 * BLOCKS:   CLPORT XLPORT
 * SIZE:     32
 */
/*
 * These macros can be used to access XTHOL.
 */
#define READ_XTHOLr(u,p,r) bcmbd_cmicd_reg_port_read(u,XTHOLr_BLKACC,p,XTHOLr_OFFSET,0,(r._xthol), 1)
#define WRITE_XTHOLr(u,p,r) bcmbd_cmicd_reg_port_write(u,XTHOLr_BLKACC,p,XTHOLr_OFFSET,0,&(r._xthol), 1)

/*******************************************************************************
 * End of 'XTHOLr'
 */




#endif /* BCM56960_A0_ACC_H */
