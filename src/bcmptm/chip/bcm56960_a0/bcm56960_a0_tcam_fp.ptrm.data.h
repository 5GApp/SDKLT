/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by c-struct-gen from PTRM data files.
 * Edits to this file will be lost when it is regenerated.
 *
 * Copyright: (c) 2018 Broadcom. All Rights Reserved. "Broadcom" refers to 
 * Broadcom Limited and/or its subsidiaries.
 * 
 * Broadcom Switch Software License
 * 
 * This license governs the use of the accompanying Broadcom software. Your 
 * use of the software indicates your acceptance of the terms and conditions 
 * of this license. If you do not agree to the terms and conditions of this 
 * license, do not use the software.
 * 1. Definitions
 *    "Licensor" means any person or entity that distributes its Work.
 *    "Software" means the original work of authorship made available under 
 *    this license.
 *    "Work" means the Software and any additions to or derivative works of 
 *    the Software that are made available under this license.
 *    The terms "reproduce," "reproduction," "derivative works," and 
 *    "distribution" have the meaning as provided under U.S. copyright law.
 *    Works, including the Software, are "made available" under this license 
 *    by including in or with the Work either (a) a copyright notice 
 *    referencing the applicability of this license to the Work, or (b) a copy 
 *    of this license.
 * 2. Grant of Copyright License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    copyright license to reproduce, prepare derivative works of, publicly 
 *    display, publicly perform, sublicense and distribute its Work and any 
 *    resulting derivative works in any form.
 * 3. Grant of Patent License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    patent license to make, have made, use, offer to sell, sell, import, and 
 *    otherwise transfer its Work, in whole or in part. This patent license 
 *    applies only to the patent claims licensable by Licensor that would be 
 *    infringed by Licensor's Work (or portion thereof) individually and 
 *    excluding any combinations with any other materials or technology.
 *    If you institute patent litigation against any Licensor (including a 
 *    cross-claim or counterclaim in a lawsuit) to enforce any patents that 
 *    you allege are infringed by any Work, then your patent license from such 
 *    Licensor to the Work shall terminate as of the date such litigation is 
 *    filed.
 * 4. Redistribution
 *    You may reproduce or distribute the Work only if (a) you do so under 
 *    this License, (b) you include a complete copy of this License with your 
 *    distribution, and (c) you retain without modification any copyright, 
 *    patent, trademark, or attribution notices that are present in the Work.
 * 5. Derivative Works
 *    You may specify that additional or different terms apply to the use, 
 *    reproduction, and distribution of your derivative works of the Work 
 *    ("Your Terms") only if (a) Your Terms provide that the limitations of 
 *    Section 7 apply to your derivative works, and (b) you identify the 
 *    specific derivative works that are subject to Your Terms. 
 *    Notwithstanding Your Terms, this license (including the redistribution 
 *    requirements in Section 4) will continue to apply to the Work itself.
 * 6. Trademarks
 *    This license does not grant any rights to use any Licensor's or its 
 *    affiliates' names, logos, or trademarks, except as necessary to 
 *    reproduce the notices described in this license.
 * 7. Limitations
 *    Platform. The Work and any derivative works thereof may only be used, or 
 *    intended for use, with a Broadcom switch integrated circuit.
 *    No Reverse Engineering. You will not use the Work to disassemble, 
 *    reverse engineer, decompile, or attempt to ascertain the underlying 
 *    technology of a Broadcom switch integrated circuit.
 * 8. Termination
 *    If you violate any term of this license, then your rights under this 
 *    license (including the license grants of Sections 2 and 3) will 
 *    terminate immediately.
 * 9. Disclaimer of Warranty
 *    THE WORK IS PROVIDED "AS IS" WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 *    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WARRANTIES OR CONDITIONS OF 
 *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR 
 *    NON-INFRINGEMENT. YOU BEAR THE RISK OF UNDERTAKING ANY ACTIVITIES UNDER 
 *    THIS LICENSE. SOME STATES' CONSUMER LAWS DO NOT ALLOW EXCLUSION OF AN 
 *    IMPLIED WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO YOU.
 * 10. Limitation of Liability
 *    EXCEPT AS PROHIBITED BY APPLICABLE LAW, IN NO EVENT AND UNDER NO LEGAL 
 *    THEORY, WHETHER IN TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE 
 *    SHALL ANY LICENSOR BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY DIRECT, 
 *    INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF 
 *    OR RELATED TO THIS LICENSE, THE USE OR INABILITY TO USE THE WORK 
 *    (INCLUDING BUT NOT LIMITED TO LOSS OF GOODWILL, BUSINESS INTERRUPTION, 
 *    LOST PROFITS OR DATA, COMPUTER FAILURE OR MALFUNCTION, OR ANY OTHER 
 *    COMMERCIAL DAMAGES OR LOSSES), EVEN IF THE LICENSOR HAS BEEN ADVISED OF 
 *    THE POSSIBILITY OF SUCH DAMAGES.
 */


static const bcmdrd_sid_t th_a0_fp_egr_entry_tcam_data_only_sid[4][2];
static const bcmdrd_sid_t th_a0_fp_egr_entry_tcam_sid[4][2];
static const bcmdrd_sid_t th_a0_fp_em_presel_entry_shared_lt_array[1];
static const bcmdrd_sid_t th_a0_fp_em_presel_entry_tcam_data_only_sid[1][2];
static const bcmdrd_sid_t th_a0_fp_em_presel_entry_tcam_sid[1][2];
static const bcmdrd_sid_t th_a0_fp_ing_entry_shared_lt_array[1];
static const bcmdrd_sid_t th_a0_fp_ing_entry_tcam_data_only_sid[12][3];
static const bcmdrd_sid_t th_a0_fp_ing_entry_tcam_sid[12][1];
static const bcmdrd_sid_t th_a0_fp_ing_entry_tcam_wide_sid[12][3];
static const bcmdrd_sid_t th_a0_fp_ing_presel_entry_main_lt_array[1];
static const bcmdrd_sid_t th_a0_fp_ing_presel_entry_tcam_data_only_sid[1][3];
static const bcmdrd_sid_t th_a0_fp_ing_presel_entry_tcam_sid[1][3];
static const bcmdrd_sid_t th_a0_fp_vlan_entry_tcam_data_only_sid[4][4];
static const bcmdrd_sid_t th_a0_fp_vlan_entry_tcam_sid[4][4];
static const bcmdrd_sid_t * th_a0_fp_egr_entry_tcam_data_only_sid_array[4];
static const bcmdrd_sid_t * th_a0_fp_egr_entry_tcam_sid_array[4];
static const bcmdrd_sid_t * th_a0_fp_em_presel_entry_tcam_data_only_sid_array[1];
static const bcmdrd_sid_t * th_a0_fp_em_presel_entry_tcam_sid_array[1];
static const bcmdrd_sid_t * th_a0_fp_ing_entry_tcam_data_only_sid_array[12];
static const bcmdrd_sid_t * th_a0_fp_ing_entry_tcam_sid_array[12];
static const bcmdrd_sid_t * th_a0_fp_ing_entry_tcam_wide_sid_array[12];
static const bcmdrd_sid_t * th_a0_fp_ing_presel_entry_tcam_data_only_sid_array[1];
static const bcmdrd_sid_t * th_a0_fp_ing_presel_entry_tcam_sid_array[1];
static const bcmdrd_sid_t * th_a0_fp_vlan_entry_tcam_data_only_sid_array[4];
static const bcmdrd_sid_t * th_a0_fp_vlan_entry_tcam_sid_array[4];
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_egr_entry_tcam_hw_entry_info_array[5];
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_em_presel_entry_tcam_hw_entry_info[5];
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_ing_entry_tcam_hw_entry_info_array[5];
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_ing_presel_entry_tcam_hw_entry_info[5];
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_vlan_entry_tcam_hw_entry_info_array[5];
static const bcmptm_rm_tcam_more_info_t th_a0_fp_egr_entry_tcam_rm_more_info[1];
static const bcmptm_rm_tcam_more_info_t th_a0_fp_em_presel_entry_tcam_rm_more_info[1];
static const bcmptm_rm_tcam_more_info_t th_a0_fp_ing_entry_tcam_rm_more_info[1];
static const bcmptm_rm_tcam_more_info_t th_a0_fp_ing_presel_entry_tcam_rm_more_info[1];
static const bcmptm_rm_tcam_more_info_t th_a0_fp_vlan_entry_tcam_rm_more_info[1];
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_egr_entry_tcam_slice_info_array[4];
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_em_presel_entry_tcam_slice_info_array[2];
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_ing_entry_tcam_slice_info_array[12];
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_ing_presel_entry_tcam_slice_info_array[12];
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_vlan_entry_tcam_slice_info_array[4];
static const lt_mreq_info_t th_a0_fp_egr_entry_lt_mreq_info;
static const lt_mreq_info_t th_a0_fp_em_presel_entry_lt_mreq_info;
static const lt_mreq_info_t th_a0_fp_ing_entry_lt_mreq_info;
static const lt_mreq_info_t th_a0_fp_ing_presel_entry_lt_mreq_info;
static const lt_mreq_info_t th_a0_fp_vlan_entry_lt_mreq_info;
static const uint16_t th_a0_fp_egr_entry_tcam_data_end_bit_array[2];
static const uint16_t th_a0_fp_em_presel_entry_data_end_bit_array[2];
static const uint16_t th_a0_fp_ing_entry_tcam_data_end_bit_array[3];
static const uint16_t th_a0_fp_ing_presel_data_end_bit[3];
static const uint16_t th_a0_fp_vlan_entry_tcam_data_end_bit_array[4];
static const uint32_t th_a0_fp_egr_entry_count[4][12];
static const uint32_t th_a0_fp_egr_group_count[4];
static const uint32_t th_a0_fp_em_group_count[4];
static const uint32_t th_a0_fp_em_presel_entry_count[4][2];
static const uint32_t th_a0_fp_em_presel_presel_count[4][2];
static const uint32_t th_a0_fp_ing_entry_count[4][12];
static const uint32_t th_a0_fp_ing_group_count[4];
static const uint32_t th_a0_fp_ing_presel_count[4][12];
static const uint32_t th_a0_fp_ing_presel_entry_count[4][12];
static const uint32_t th_a0_fp_ing_presel_group_count[4];
static const uint32_t th_a0_fp_ing_presel_presel_count[4][12];
static const uint32_t th_a0_fp_vlan_entry_count[4][12];
static const uint32_t th_a0_fp_vlan_group_count[4];
static const uint32_t * th_a0_fp_egr_entry_count_array[4];
static const uint32_t * th_a0_fp_em_presel_entry_count_array[4];
static const uint32_t * th_a0_fp_em_presel_presel_count_array[4];
static const uint32_t * th_a0_fp_ing_entry_count_array[4];
static const uint32_t * th_a0_fp_ing_presel_count_array[4];
static const uint32_t * th_a0_fp_ing_presel_entry_count_array[4];
static const uint32_t * th_a0_fp_ing_presel_presel_count_array[4];
static const uint32_t * th_a0_fp_vlan_entry_count_array[4];
static const uint8_t th_a0_fp_egr_slice_count[4];
static const uint8_t th_a0_fp_em_slice_count[4];
static const uint8_t th_a0_fp_ing_presel_slice_count[4];
static const uint8_t th_a0_fp_ing_slice_count[4];
static const uint8_t th_a0_fp_vlan_slice_count[4];

static const bcmdrd_sid_t th_a0_fp_egr_entry_tcam_data_only_sid[4][2] = {
    {
    EFP_POLICY_TABLEm,
    EFP_POLICY_TABLEm,
    },
    {
    EFP_POLICY_TABLEm,
    EFP_POLICY_TABLEm,
    },
    {
    EFP_POLICY_TABLEm,
    EFP_POLICY_TABLEm,
    },
    {
    EFP_POLICY_TABLEm,
    EFP_POLICY_TABLEm,
    },
};
static const bcmdrd_sid_t th_a0_fp_egr_entry_tcam_sid[4][2] = {
    {
    EFP_TCAMm,
    EFP_TCAMm,
    },
    {
    EFP_TCAMm,
    EFP_TCAMm,
    },
    {
    EFP_TCAMm,
    EFP_TCAMm,
    },
    {
    EFP_TCAMm,
    EFP_TCAMm,
    },
};
static const bcmdrd_sid_t th_a0_fp_em_presel_entry_shared_lt_array[1] = {
    FP_ING_ENTRYt,
};
static const bcmdrd_sid_t th_a0_fp_em_presel_entry_tcam_data_only_sid[1][2] = {
    {
    EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm,
    EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLYm,
    },
};
static const bcmdrd_sid_t th_a0_fp_em_presel_entry_tcam_sid[1][2] = {
    {
    EXACT_MATCH_LOGICAL_TABLE_SELECTm,
    EXACT_MATCH_LOGICAL_TABLE_SELECTm,
    },
};
static const bcmdrd_sid_t th_a0_fp_ing_entry_shared_lt_array[1] = {
    FP_ING_PRESEL_ENTRY_TEMPLATEt,
};
static const bcmdrd_sid_t th_a0_fp_ing_entry_tcam_data_only_sid[12][3] = {
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
    {
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    IFP_POLICY_TABLEm,
    },
};
static const bcmdrd_sid_t th_a0_fp_ing_entry_tcam_sid[12][1] = {
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
    {
    IFP_TCAMm,
    },
};
static const bcmdrd_sid_t th_a0_fp_ing_entry_tcam_wide_sid[12][3] = {
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
    {
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    IFP_TCAM_WIDEm,
    },
};
static const bcmdrd_sid_t th_a0_fp_ing_presel_entry_main_lt_array[1] = {
    FP_ING_ENTRYt,
};
static const bcmdrd_sid_t th_a0_fp_ing_presel_entry_tcam_data_only_sid[1][3] = {
    {
    IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm,
    IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm,
    IFP_LOGICAL_TABLE_SELECT_DATA_ONLYm,
    },
};
static const bcmdrd_sid_t th_a0_fp_ing_presel_entry_tcam_sid[1][3] = {
    {
    IFP_LOGICAL_TABLE_SELECTm,
    IFP_LOGICAL_TABLE_SELECTm,
    IFP_LOGICAL_TABLE_SELECTm,
    },
};
static const bcmdrd_sid_t th_a0_fp_vlan_entry_tcam_data_only_sid[4][4] = {
    {
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    },
    {
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    },
    {
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    },
    {
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    VFP_POLICY_TABLEm,
    },
};
static const bcmdrd_sid_t th_a0_fp_vlan_entry_tcam_sid[4][4] = {
    {
    VFP_TCAMm,
    VFP_TCAMm,
    VFP_TCAMm,
    VFP_TCAMm,
    },
    {
    VFP_TCAMm,
    VFP_TCAMm,
    VFP_TCAMm,
    VFP_TCAMm,
    },
    {
    VFP_TCAMm,
    VFP_TCAMm,
    VFP_TCAMm,
    VFP_TCAMm,
    },
    {
    VFP_TCAMm,
    VFP_TCAMm,
    VFP_TCAMm,
    VFP_TCAMm,
    },
};
static const bcmdrd_sid_t * th_a0_fp_egr_entry_tcam_data_only_sid_array[4] = {
    th_a0_fp_egr_entry_tcam_data_only_sid[0],
    th_a0_fp_egr_entry_tcam_data_only_sid[1],
    th_a0_fp_egr_entry_tcam_data_only_sid[2],
    th_a0_fp_egr_entry_tcam_data_only_sid[3],
};
static const bcmdrd_sid_t * th_a0_fp_egr_entry_tcam_sid_array[4] = {
    th_a0_fp_egr_entry_tcam_sid[0],
    th_a0_fp_egr_entry_tcam_sid[1],
    th_a0_fp_egr_entry_tcam_sid[2],
    th_a0_fp_egr_entry_tcam_sid[3],
};
static const bcmdrd_sid_t * th_a0_fp_em_presel_entry_tcam_data_only_sid_array[1] = {
    th_a0_fp_em_presel_entry_tcam_data_only_sid[0],
};
static const bcmdrd_sid_t * th_a0_fp_em_presel_entry_tcam_sid_array[1] = {
    th_a0_fp_em_presel_entry_tcam_sid[0],
};
static const bcmdrd_sid_t * th_a0_fp_ing_entry_tcam_data_only_sid_array[12] = {
    th_a0_fp_ing_entry_tcam_data_only_sid[0],
    th_a0_fp_ing_entry_tcam_data_only_sid[1],
    th_a0_fp_ing_entry_tcam_data_only_sid[2],
    th_a0_fp_ing_entry_tcam_data_only_sid[3],
    th_a0_fp_ing_entry_tcam_data_only_sid[4],
    th_a0_fp_ing_entry_tcam_data_only_sid[5],
    th_a0_fp_ing_entry_tcam_data_only_sid[6],
    th_a0_fp_ing_entry_tcam_data_only_sid[7],
    th_a0_fp_ing_entry_tcam_data_only_sid[8],
    th_a0_fp_ing_entry_tcam_data_only_sid[9],
    th_a0_fp_ing_entry_tcam_data_only_sid[10],
    th_a0_fp_ing_entry_tcam_data_only_sid[11],
};
static const bcmdrd_sid_t * th_a0_fp_ing_entry_tcam_sid_array[12] = {
    th_a0_fp_ing_entry_tcam_sid[0],
    th_a0_fp_ing_entry_tcam_sid[1],
    th_a0_fp_ing_entry_tcam_sid[2],
    th_a0_fp_ing_entry_tcam_sid[3],
    th_a0_fp_ing_entry_tcam_sid[4],
    th_a0_fp_ing_entry_tcam_sid[5],
    th_a0_fp_ing_entry_tcam_sid[6],
    th_a0_fp_ing_entry_tcam_sid[7],
    th_a0_fp_ing_entry_tcam_sid[8],
    th_a0_fp_ing_entry_tcam_sid[9],
    th_a0_fp_ing_entry_tcam_sid[10],
    th_a0_fp_ing_entry_tcam_sid[11],
};
static const bcmdrd_sid_t * th_a0_fp_ing_entry_tcam_wide_sid_array[12] = {
    th_a0_fp_ing_entry_tcam_wide_sid[0],
    th_a0_fp_ing_entry_tcam_wide_sid[1],
    th_a0_fp_ing_entry_tcam_wide_sid[2],
    th_a0_fp_ing_entry_tcam_wide_sid[3],
    th_a0_fp_ing_entry_tcam_wide_sid[4],
    th_a0_fp_ing_entry_tcam_wide_sid[5],
    th_a0_fp_ing_entry_tcam_wide_sid[6],
    th_a0_fp_ing_entry_tcam_wide_sid[7],
    th_a0_fp_ing_entry_tcam_wide_sid[8],
    th_a0_fp_ing_entry_tcam_wide_sid[9],
    th_a0_fp_ing_entry_tcam_wide_sid[10],
    th_a0_fp_ing_entry_tcam_wide_sid[11],
};
static const bcmdrd_sid_t * th_a0_fp_ing_presel_entry_tcam_data_only_sid_array[1] = {
    th_a0_fp_ing_presel_entry_tcam_data_only_sid[0],
};
static const bcmdrd_sid_t * th_a0_fp_ing_presel_entry_tcam_sid_array[1] = {
    th_a0_fp_ing_presel_entry_tcam_sid[0],
};
static const bcmdrd_sid_t * th_a0_fp_vlan_entry_tcam_data_only_sid_array[4] = {
    th_a0_fp_vlan_entry_tcam_data_only_sid[0],
    th_a0_fp_vlan_entry_tcam_data_only_sid[1],
    th_a0_fp_vlan_entry_tcam_data_only_sid[2],
    th_a0_fp_vlan_entry_tcam_data_only_sid[3],
};
static const bcmdrd_sid_t * th_a0_fp_vlan_entry_tcam_sid_array[4] = {
    th_a0_fp_vlan_entry_tcam_sid[0],
    th_a0_fp_vlan_entry_tcam_sid[1],
    th_a0_fp_vlan_entry_tcam_sid[2],
    th_a0_fp_vlan_entry_tcam_sid[3],
};
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_egr_entry_tcam_hw_entry_info_array[5] = {
    {
        .data_end_bit =     th_a0_fp_egr_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_SINGLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 482,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 4,
        .num_key_rows = 1,
        .sid =     th_a0_fp_egr_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_egr_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit = NULL,
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTRA,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 0,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 0,
        .num_depth_inst = 0,
        .num_key_rows = 0,
        .sid = NULL,
        .sid_data_only = NULL,
    },
    {
        .data_end_bit =     th_a0_fp_egr_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTER,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 482,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 2,
        .num_key_rows = 2,
        .sid =     th_a0_fp_egr_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_egr_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit = NULL,
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_TRIPLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 0,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 0,
        .num_depth_inst = 0,
        .num_key_rows = 0,
        .sid = NULL,
        .sid_data_only = NULL,
    },
    {
        .data_end_bit = NULL,
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_QUAD,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 0,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 0,
        .num_depth_inst = 0,
        .num_key_rows = 0,
        .sid = NULL,
        .sid_data_only = NULL,
    },
};
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_em_presel_entry_tcam_hw_entry_info[5] = {
    {
        .data_end_bit =     th_a0_fp_em_presel_entry_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 161,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_SINGLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 161,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 1,
        .num_depth_inst = 1,
        .num_key_rows = 1,
        .sid =     th_a0_fp_em_presel_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_em_presel_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit = NULL,
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTRA,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 0,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 0,
        .num_depth_inst = 1,
        .num_key_rows = 0,
        .sid = NULL,
        .sid_data_only = NULL,
    },
    {
        .data_end_bit =     th_a0_fp_em_presel_entry_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 161,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTER,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 161,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 2,
        .num_depth_inst = 1,
        .num_key_rows = 2,
        .sid =     th_a0_fp_em_presel_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_em_presel_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit = NULL,
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_TRIPLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 0,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 0,
        .num_depth_inst = 1,
        .num_key_rows = 0,
        .sid = NULL,
        .sid_data_only = NULL,
    },
    {
        .data_end_bit = NULL,
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_QUAD,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 0,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 0,
        .num_depth_inst = 1,
        .num_key_rows = 0,
        .sid = NULL,
        .sid_data_only = NULL,
    },
};
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_ing_entry_tcam_hw_entry_info_array[5] = {
    {
        .data_end_bit =     th_a0_fp_ing_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_SINGLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 161,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 12,
        .num_key_rows = 1,
        .sid =     th_a0_fp_ing_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_ing_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit =     th_a0_fp_ing_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTRA,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 322,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 12,
        .num_key_rows = 1,
        .sid =     th_a0_fp_ing_entry_tcam_wide_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_ing_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit =     th_a0_fp_ing_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTER,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 322,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 4,
        .num_key_rows = 2,
        .sid =     th_a0_fp_ing_entry_tcam_wide_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_ing_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit =     th_a0_fp_ing_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_TRIPLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 322,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 4,
        .num_key_rows = 3,
        .sid =     th_a0_fp_ing_entry_tcam_wide_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_ing_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit = NULL,
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_QUAD,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 0,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 0,
        .num_depth_inst = 0,
        .num_key_rows = 0,
        .sid = NULL,
        .sid_data_only = NULL,
    },
};
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_ing_presel_entry_tcam_hw_entry_info[5] = {
    {
        .data_end_bit =     th_a0_fp_ing_presel_data_end_bit,
        /* implicit length assignment suppressed */
        .data_start_bit = 193,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_SINGLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 193,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 1,
        .num_depth_inst = 1,
        .num_key_rows = 1,
        .sid =     th_a0_fp_ing_presel_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_ing_presel_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit =     th_a0_fp_ing_presel_data_end_bit,
        /* implicit length assignment suppressed */
        .data_start_bit = 193,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTRA,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 193,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 1,
        .num_depth_inst = 1,
        .num_key_rows = 1,
        .sid =     th_a0_fp_ing_presel_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_ing_presel_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit =     th_a0_fp_ing_presel_data_end_bit,
        /* implicit length assignment suppressed */
        .data_start_bit = 193,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTER,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 193,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 2,
        .num_depth_inst = 1,
        .num_key_rows = 2,
        .sid =     th_a0_fp_ing_presel_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_ing_presel_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit =     th_a0_fp_ing_presel_data_end_bit,
        /* implicit length assignment suppressed */
        .data_start_bit = 193,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_TRIPLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 193,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 3,
        .num_depth_inst = 1,
        .num_key_rows = 3,
        .sid =     th_a0_fp_ing_presel_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_ing_presel_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit = NULL,
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_QUAD,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 0,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 0,
        .num_depth_inst = 0,
        .num_key_rows = 0,
        .sid = NULL,
        .sid_data_only = NULL,
    },
};
static const bcmptm_rm_tcam_hw_entry_info_t th_a0_fp_vlan_entry_tcam_hw_entry_info_array[5] = {
    {
        .data_end_bit =     th_a0_fp_vlan_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_SINGLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 474,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 4,
        .num_key_rows = 1,
        .sid =     th_a0_fp_vlan_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_vlan_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit =     th_a0_fp_vlan_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTRA,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 474,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 4,
        .num_key_rows = 2,
        .sid =     th_a0_fp_vlan_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_vlan_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit =     th_a0_fp_vlan_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_DBLINTER,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 474,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 2,
        .num_key_rows = 2,
        .sid =     th_a0_fp_vlan_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_vlan_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
    {
        .data_end_bit = NULL,
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_TRIPLE,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 0,
        .key_type_val = NULL,
        .non_aggr = 0,
        .num_data_rows = 0,
        .num_depth_inst = 0,
        .num_key_rows = 0,
        .sid = NULL,
        .sid_data_only = NULL,
    },
    {
        .data_end_bit =     th_a0_fp_vlan_entry_tcam_data_end_bit_array,
        /* implicit length assignment suppressed */
        .data_start_bit = 0,
        .group_mode = BCMPTM_RM_TCAM_GRP_MODE_QUAD,
        .hw_dtype_field_start_bit = 0,
        .hw_dtype_field_width = 0,
        .hw_ktype_field_info = NULL,
        .key_size = 474,
        .key_type_val = NULL,
        .non_aggr = 1,
        .num_data_rows = 1,
        .num_depth_inst = 1,
        .num_key_rows = 4,
        .sid =     th_a0_fp_vlan_entry_tcam_sid_array,
        /* implicit length assignment suppressed */
        .sid_data_only =     th_a0_fp_vlan_entry_tcam_data_only_sid_array,
        /* implicit length assignment suppressed */
    },
};
static const bcmptm_rm_tcam_more_info_t th_a0_fp_egr_entry_tcam_rm_more_info[1] = {
    {
        .bundle_size = 4,
        .entry_count =     th_a0_fp_egr_entry_count_array,
        /* implicit length assignment suppressed */
        .flags = (BCMPTM_STAGE_KEY_TYPE_SELCODE | BCMPTM_STAGE_KEY_TYPE_FIXED | BCMPTM_STAGE_AUTOEXPANSION),
        .group_count =     th_a0_fp_egr_group_count,
        /* implicit length assignment suppressed */
        .hw_atomicity_support = 0,
        .num_action_res_ids = 4,
        .pipe_count = 4,
        .slice_count =     th_a0_fp_egr_slice_count,
        /* implicit length assignment suppressed */
        .slice_info =     th_a0_fp_egr_entry_tcam_slice_info_array,
        /* implicit length assignment suppressed */
    },
};
static const bcmptm_rm_tcam_more_info_t th_a0_fp_em_presel_entry_tcam_rm_more_info[1] = {
    {
        .bundle_size = 2,
        .entry_count =     th_a0_fp_em_presel_entry_count_array,
        /* implicit length assignment suppressed */
        .flags = (BCMPTM_STAGE_KEY_TYPE_PRESEL | BCMPTM_STAGE_ENTRY_TYPE_HASH),
        .group_count =     th_a0_fp_em_group_count,
        /* implicit length assignment suppressed */
        .hw_atomicity_support = 0,
        .num_action_res_ids = 32,
        .pipe_count = 4,
        .presel_count =     th_a0_fp_em_presel_presel_count_array,
        /* implicit length assignment suppressed */
        .shared_lt_count = 1,
        .shared_lt_info =     th_a0_fp_em_presel_entry_shared_lt_array,
        /* implicit length assignment suppressed */
        .slice_count =     th_a0_fp_em_slice_count,
        /* implicit length assignment suppressed */
        .slice_info =     th_a0_fp_em_presel_entry_tcam_slice_info_array,
        /* implicit length assignment suppressed */
    },
};
static const bcmptm_rm_tcam_more_info_t th_a0_fp_ing_entry_tcam_rm_more_info[1] = {
    {
        .bundle_size = 3,
        .entry_count =     th_a0_fp_ing_entry_count_array,
        /* implicit length assignment suppressed */
        .flags = (BCMPTM_STAGE_KEY_TYPE_PRESEL | BCMPTM_STAGE_AUTOEXPANSION | BCMPTM_STAGE_INTRASLICE_CAPABLE | BCMPTM_STAGE_INTRASLICE_SPAN_ONE_PART | BCMPTM_STAGE_ENTRY_INDEX_REMAP | BCMPTM_STAGE_MULTI_VIEW_TCAM),
        .group_count =     th_a0_fp_ing_group_count,
        /* implicit length assignment suppressed */
        .hw_atomicity_support = 0,
        .num_action_res_ids = 32,
        .pipe_count = 4,
        .presel_count =     th_a0_fp_ing_presel_count_array,
        /* implicit length assignment suppressed */
        .shared_lt_count = 1,
        .shared_lt_info =     th_a0_fp_ing_entry_shared_lt_array,
        /* implicit length assignment suppressed */
        .slice_count =     th_a0_fp_ing_slice_count,
        /* implicit length assignment suppressed */
        .slice_info =     th_a0_fp_ing_entry_tcam_slice_info_array,
        /* implicit length assignment suppressed */
    },
};
static const bcmptm_rm_tcam_more_info_t th_a0_fp_ing_presel_entry_tcam_rm_more_info[1] = {
    {
        .bundle_size = 1,
        .entry_count =     th_a0_fp_ing_presel_entry_count_array,
        /* implicit length assignment suppressed */
        .flags = (BCMPTM_STAGE_KEY_TYPE_PRESEL),
        .group_count =     th_a0_fp_ing_presel_group_count,
        /* implicit length assignment suppressed */
        .hw_atomicity_support = 0,
        .main_lt_info =     th_a0_fp_ing_presel_entry_main_lt_array,
        /* implicit length assignment suppressed */
        .pipe_count = 4,
        .presel_count =     th_a0_fp_ing_presel_presel_count_array,
        /* implicit length assignment suppressed */
        .slice_count =     th_a0_fp_ing_presel_slice_count,
        /* implicit length assignment suppressed */
        .slice_info =     th_a0_fp_ing_presel_entry_tcam_slice_info_array,
        /* implicit length assignment suppressed */
    },
};
static const bcmptm_rm_tcam_more_info_t th_a0_fp_vlan_entry_tcam_rm_more_info[1] = {
    {
        .bundle_size = 4,
        .entry_count =     th_a0_fp_vlan_entry_count_array,
        /* implicit length assignment suppressed */
        .flags = (BCMPTM_STAGE_KEY_TYPE_SELCODE | BCMPTM_STAGE_AUTOEXPANSION | BCMPTM_STAGE_INTRASLICE_CAPABLE),
        .group_count =     th_a0_fp_vlan_group_count,
        /* implicit length assignment suppressed */
        .hw_atomicity_support = 0,
        .num_action_res_ids = 4,
        .pipe_count = 4,
        .slice_count =     th_a0_fp_vlan_slice_count,
        /* implicit length assignment suppressed */
        .slice_info =     th_a0_fp_vlan_entry_tcam_slice_info_array,
        /* implicit length assignment suppressed */
    },
};
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_egr_entry_tcam_slice_info_array[4] = {
    {
        .end_index = 255,
        .slice_id = 0,
        .start_index = 0,
        .valid = 1,
    },
    {
        .end_index = 511,
        .slice_id = 1,
        .start_index = 256,
        .valid = 1,
    },
    {
        .end_index = 767,
        .slice_id = 2,
        .start_index = 512,
        .valid = 1,
    },
    {
        .end_index = 1023,
        .slice_id = 3,
        .start_index = 768,
        .valid = 1,
    },
};
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_em_presel_entry_tcam_slice_info_array[2] = {
    {
        .end_index = 31,
        .slice_id = 0,
        .start_index = 0,
        .valid = 1,
    },
    {
        .end_index = 63,
        .slice_id = 1,
        .start_index = 32,
        .valid = 1,
    },
};
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_ing_entry_tcam_slice_info_array[12] = {
    {
        .end_index = 511,
        .slice_id = 0,
        .start_index = 0,
        .valid = 1,
    },
    {
        .end_index = 1023,
        .slice_id = 1,
        .start_index = 512,
        .valid = 1,
    },
    {
        .end_index = 1535,
        .slice_id = 2,
        .start_index = 1024,
        .valid = 1,
    },
    {
        .end_index = 2047,
        .slice_id = 3,
        .start_index = 1536,
        .valid = 1,
    },
    {
        .end_index = 2559,
        .slice_id = 4,
        .start_index = 2048,
        .valid = 1,
    },
    {
        .end_index = 3071,
        .slice_id = 5,
        .start_index = 2560,
        .valid = 1,
    },
    {
        .end_index = 3583,
        .slice_id = 6,
        .start_index = 3072,
        .valid = 1,
    },
    {
        .end_index = 4095,
        .slice_id = 7,
        .start_index = 3072,
        .valid = 1,
    },
    {
        .end_index = 4607,
        .slice_id = 8,
        .start_index = 4096,
        .valid = 1,
    },
    {
        .end_index = 5119,
        .slice_id = 9,
        .start_index = 4608,
        .valid = 1,
    },
    {
        .end_index = 5631,
        .slice_id = 10,
        .start_index = 5120,
        .valid = 1,
    },
    {
        .end_index = 6143,
        .slice_id = 11,
        .start_index = 5632,
        .valid = 1,
    },
};
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_ing_presel_entry_tcam_slice_info_array[12] = {
    {
        .end_index = 31,
        .slice_id = 0,
        .start_index = 0,
        .valid = 1,
    },
    {
        .end_index = 63,
        .slice_id = 1,
        .start_index = 32,
        .valid = 1,
    },
    {
        .end_index = 95,
        .slice_id = 2,
        .start_index = 64,
        .valid = 1,
    },
    {
        .end_index = 127,
        .slice_id = 3,
        .start_index = 96,
        .valid = 1,
    },
    {
        .end_index = 159,
        .slice_id = 4,
        .start_index = 128,
        .valid = 1,
    },
    {
        .end_index = 191,
        .slice_id = 5,
        .start_index = 160,
        .valid = 1,
    },
    {
        .end_index = 223,
        .slice_id = 6,
        .start_index = 192,
        .valid = 1,
    },
    {
        .end_index = 255,
        .slice_id = 7,
        .start_index = 224,
        .valid = 1,
    },
    {
        .end_index = 287,
        .slice_id = 8,
        .start_index = 256,
        .valid = 1,
    },
    {
        .end_index = 319,
        .slice_id = 9,
        .start_index = 288,
        .valid = 1,
    },
    {
        .end_index = 351,
        .slice_id = 10,
        .start_index = 320,
        .valid = 1,
    },
    {
        .end_index = 383,
        .slice_id = 11,
        .start_index = 352,
        .valid = 1,
    },
};
static const bcmptm_rm_tcam_slice_info_t th_a0_fp_vlan_entry_tcam_slice_info_array[4] = {
    {
        .end_index = 255,
        .slice_id = 0,
        .start_index = 0,
        .valid = 1,
    },
    {
        .end_index = 511,
        .slice_id = 1,
        .start_index = 256,
        .valid = 1,
    },
    {
        .end_index = 767,
        .slice_id = 2,
        .start_index = 512,
        .valid = 1,
    },
    {
        .end_index = 1023,
        .slice_id = 3,
        .start_index = 768,
        .valid = 1,
    },
};
static const lt_mreq_info_t th_a0_fp_egr_entry_lt_mreq_info = {
    .hw_entry_info =     th_a0_fp_egr_entry_tcam_hw_entry_info_array,
    .hw_entry_info_count = 5,/* implicit length assignment */
    .num_edw = 1,
    .num_ekw = 1,
    .pt_type = LT_PT_TYPE_FP,
    .rm_more_info =     th_a0_fp_egr_entry_tcam_rm_more_info,
    .rm_more_info_count = 1,/* implicit length assignment */
};
static const lt_mreq_info_t th_a0_fp_em_presel_entry_lt_mreq_info = {
    .hw_entry_info =     th_a0_fp_em_presel_entry_tcam_hw_entry_info,
    .hw_entry_info_count = 5,/* implicit length assignment */
    .num_edw = 1,
    .num_ekw = 1,
    .pt_type = LT_PT_TYPE_FP,
    .rm_more_info =     th_a0_fp_em_presel_entry_tcam_rm_more_info,
    .rm_more_info_count = 1,/* implicit length assignment */
};
static const lt_mreq_info_t th_a0_fp_ing_entry_lt_mreq_info = {
    .hw_entry_info =     th_a0_fp_ing_entry_tcam_hw_entry_info_array,
    .hw_entry_info_count = 5,/* implicit length assignment */
    .num_edw = 1,
    .num_ekw = 1,
    .pt_type = LT_PT_TYPE_FP,
    .rm_more_info =     th_a0_fp_ing_entry_tcam_rm_more_info,
    .rm_more_info_count = 1,/* implicit length assignment */
};
static const lt_mreq_info_t th_a0_fp_ing_presel_entry_lt_mreq_info = {
    .hw_entry_info =     th_a0_fp_ing_presel_entry_tcam_hw_entry_info,
    .hw_entry_info_count = 5,/* implicit length assignment */
    .num_edw = 1,
    .num_ekw = 1,
    .pt_type = LT_PT_TYPE_FP,
    .rm_more_info =     th_a0_fp_ing_presel_entry_tcam_rm_more_info,
    .rm_more_info_count = 1,/* implicit length assignment */
};
static const lt_mreq_info_t th_a0_fp_vlan_entry_lt_mreq_info = {
    .hw_entry_info =     th_a0_fp_vlan_entry_tcam_hw_entry_info_array,
    .hw_entry_info_count = 5,/* implicit length assignment */
    .num_edw = 1,
    .num_ekw = 1,
    .pt_type = LT_PT_TYPE_FP,
    .rm_more_info =     th_a0_fp_vlan_entry_tcam_rm_more_info,
    .rm_more_info_count = 1,/* implicit length assignment */
};
static const uint16_t th_a0_fp_egr_entry_tcam_data_end_bit_array[2] = {
    192,
    192,
};
static const uint16_t th_a0_fp_em_presel_entry_data_end_bit_array[2] = {
    217,
    217,
};
static const uint16_t th_a0_fp_ing_entry_tcam_data_end_bit_array[3] = {
    294,
    294,
    294,
};
static const uint16_t th_a0_fp_ing_presel_data_end_bit[3] = {
    260,
    260,
    260,
};
static const uint16_t th_a0_fp_vlan_entry_tcam_data_end_bit_array[4] = {
    176,
    176,
    176,
    176,
};
static const uint32_t th_a0_fp_egr_entry_count[4][12] = {
    {
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    },
    {
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    },
    {
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    },
    {
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    },
};
static const uint32_t th_a0_fp_egr_group_count[4] = {
    12,
    12,
    12,
    12,
};
static const uint32_t th_a0_fp_em_group_count[4] = {
    32,
    32,
    32,
    32,
};
static const uint32_t th_a0_fp_em_presel_entry_count[4][2] = {
    {
    0,
    0,
    },
    {
    0,
    0,
    },
    {
    0,
    0,
    },
    {
    0,
    0,
    },
};
static const uint32_t th_a0_fp_em_presel_presel_count[4][2] = {
    {
    32,
    32,
    },
    {
    32,
    32,
    },
    {
    32,
    32,
    },
    {
    32,
    32,
    },
};
static const uint32_t th_a0_fp_ing_entry_count[4][12] = {
    {
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    },
    {
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    },
    {
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    },
    {
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    },
};
static const uint32_t th_a0_fp_ing_group_count[4] = {
    32,
    32,
    32,
    32,
};
static const uint32_t th_a0_fp_ing_presel_count[4][12] = {
    {
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    },
    {
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    },
    {
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    },
    {
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    },
};
static const uint32_t th_a0_fp_ing_presel_entry_count[4][12] = {
    {
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    },
    {
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    },
    {
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    },
    {
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    512,
    },
};
static const uint32_t th_a0_fp_ing_presel_group_count[4] = {
    32,
    32,
    32,
    32,
};
static const uint32_t th_a0_fp_ing_presel_presel_count[4][12] = {
    {
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    },
    {
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    },
    {
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    },
    {
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    },
};
static const uint32_t th_a0_fp_vlan_entry_count[4][12] = {
    {
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    },
    {
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    },
    {
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    },
    {
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    256,
    },
};
static const uint32_t th_a0_fp_vlan_group_count[4] = {
    4,
    4,
    4,
    4,
};
static const uint32_t * th_a0_fp_egr_entry_count_array[4] = {
    th_a0_fp_egr_entry_count[0],
    th_a0_fp_egr_entry_count[1],
    th_a0_fp_egr_entry_count[2],
    th_a0_fp_egr_entry_count[3],
};
static const uint32_t * th_a0_fp_em_presel_entry_count_array[4] = {
    th_a0_fp_em_presel_entry_count[0],
    th_a0_fp_em_presel_entry_count[1],
    th_a0_fp_em_presel_entry_count[2],
    th_a0_fp_em_presel_entry_count[3],
};
static const uint32_t * th_a0_fp_em_presel_presel_count_array[4] = {
    th_a0_fp_em_presel_presel_count[0],
    th_a0_fp_em_presel_presel_count[1],
    th_a0_fp_em_presel_presel_count[2],
    th_a0_fp_em_presel_presel_count[3],
};
static const uint32_t * th_a0_fp_ing_entry_count_array[4] = {
    th_a0_fp_ing_entry_count[0],
    th_a0_fp_ing_entry_count[1],
    th_a0_fp_ing_entry_count[2],
    th_a0_fp_ing_entry_count[3],
};
static const uint32_t * th_a0_fp_ing_presel_count_array[4] = {
    th_a0_fp_ing_presel_count[0],
    th_a0_fp_ing_presel_count[1],
    th_a0_fp_ing_presel_count[2],
    th_a0_fp_ing_presel_count[3],
};
static const uint32_t * th_a0_fp_ing_presel_entry_count_array[4] = {
    th_a0_fp_ing_presel_entry_count[0],
    th_a0_fp_ing_presel_entry_count[1],
    th_a0_fp_ing_presel_entry_count[2],
    th_a0_fp_ing_presel_entry_count[3],
};
static const uint32_t * th_a0_fp_ing_presel_presel_count_array[4] = {
    th_a0_fp_ing_presel_presel_count[0],
    th_a0_fp_ing_presel_presel_count[1],
    th_a0_fp_ing_presel_presel_count[2],
    th_a0_fp_ing_presel_presel_count[3],
};
static const uint32_t * th_a0_fp_vlan_entry_count_array[4] = {
    th_a0_fp_vlan_entry_count[0],
    th_a0_fp_vlan_entry_count[1],
    th_a0_fp_vlan_entry_count[2],
    th_a0_fp_vlan_entry_count[3],
};
static const uint8_t th_a0_fp_egr_slice_count[4] = {
    4,
    4,
    4,
    4,
};
static const uint8_t th_a0_fp_em_slice_count[4] = {
    2,
    2,
    2,
    2,
};
static const uint8_t th_a0_fp_ing_presel_slice_count[4] = {
    12,
    12,
    12,
    12,
};
static const uint8_t th_a0_fp_ing_slice_count[4] = {
    12,
    12,
    12,
    12,
};
static const uint8_t th_a0_fp_vlan_slice_count[4] = {
    4,
    4,
    4,
    4,
};

