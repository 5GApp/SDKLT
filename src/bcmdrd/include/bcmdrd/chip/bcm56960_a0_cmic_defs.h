#ifndef BCM56960_A0_CMIC_DEFS_H
#define BCM56960_A0_CMIC_DEFS_H
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: $
 * Copyright: (c) 2018 Broadcom. All Rights Reserved. "Broadcom" refers to 
 * Broadcom Limited and/or its subsidiaries.
 * 
 * Broadcom Switch Software License
 * 
 * This license governs the use of the accompanying Broadcom software. Your 
 * use of the software indicates your acceptance of the terms and conditions 
 * of this license. If you do not agree to the terms and conditions of this 
 * license, do not use the software.
 * 1. Definitions
 *    "Licensor" means any person or entity that distributes its Work.
 *    "Software" means the original work of authorship made available under 
 *    this license.
 *    "Work" means the Software and any additions to or derivative works of 
 *    the Software that are made available under this license.
 *    The terms "reproduce," "reproduction," "derivative works," and 
 *    "distribution" have the meaning as provided under U.S. copyright law.
 *    Works, including the Software, are "made available" under this license 
 *    by including in or with the Work either (a) a copyright notice 
 *    referencing the applicability of this license to the Work, or (b) a copy 
 *    of this license.
 * 2. Grant of Copyright License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    copyright license to reproduce, prepare derivative works of, publicly 
 *    display, publicly perform, sublicense and distribute its Work and any 
 *    resulting derivative works in any form.
 * 3. Grant of Patent License
 *    Subject to the terms and conditions of this license, each Licensor 
 *    grants to you a perpetual, worldwide, non-exclusive, and royalty-free 
 *    patent license to make, have made, use, offer to sell, sell, import, and 
 *    otherwise transfer its Work, in whole or in part. This patent license 
 *    applies only to the patent claims licensable by Licensor that would be 
 *    infringed by Licensor's Work (or portion thereof) individually and 
 *    excluding any combinations with any other materials or technology.
 *    If you institute patent litigation against any Licensor (including a 
 *    cross-claim or counterclaim in a lawsuit) to enforce any patents that 
 *    you allege are infringed by any Work, then your patent license from such 
 *    Licensor to the Work shall terminate as of the date such litigation is 
 *    filed.
 * 4. Redistribution
 *    You may reproduce or distribute the Work only if (a) you do so under 
 *    this License, (b) you include a complete copy of this License with your 
 *    distribution, and (c) you retain without modification any copyright, 
 *    patent, trademark, or attribution notices that are present in the Work.
 * 5. Derivative Works
 *    You may specify that additional or different terms apply to the use, 
 *    reproduction, and distribution of your derivative works of the Work 
 *    ("Your Terms") only if (a) Your Terms provide that the limitations of 
 *    Section 7 apply to your derivative works, and (b) you identify the 
 *    specific derivative works that are subject to Your Terms. 
 *    Notwithstanding Your Terms, this license (including the redistribution 
 *    requirements in Section 4) will continue to apply to the Work itself.
 * 6. Trademarks
 *    This license does not grant any rights to use any Licensor's or its 
 *    affiliates' names, logos, or trademarks, except as necessary to 
 *    reproduce the notices described in this license.
 * 7. Limitations
 *    Platform. The Work and any derivative works thereof may only be used, or 
 *    intended for use, with a Broadcom switch integrated circuit.
 *    No Reverse Engineering. You will not use the Work to disassemble, 
 *    reverse engineer, decompile, or attempt to ascertain the underlying 
 *    technology of a Broadcom switch integrated circuit.
 * 8. Termination
 *    If you violate any term of this license, then your rights under this 
 *    license (including the license grants of Sections 2 and 3) will 
 *    terminate immediately.
 * 9. Disclaimer of Warranty
 *    THE WORK IS PROVIDED "AS IS" WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 *    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WARRANTIES OR CONDITIONS OF 
 *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR 
 *    NON-INFRINGEMENT. YOU BEAR THE RISK OF UNDERTAKING ANY ACTIVITIES UNDER 
 *    THIS LICENSE. SOME STATES' CONSUMER LAWS DO NOT ALLOW EXCLUSION OF AN 
 *    IMPLIED WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO YOU.
 * 10. Limitation of Liability
 *    EXCEPT AS PROHIBITED BY APPLICABLE LAW, IN NO EVENT AND UNDER NO LEGAL 
 *    THEORY, WHETHER IN TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE 
 *    SHALL ANY LICENSOR BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY DIRECT, 
 *    INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF 
 *    OR RELATED TO THIS LICENSE, THE USE OR INABILITY TO USE THE WORK 
 *    (INCLUDING BUT NOT LIMITED TO LOSS OF GOODWILL, BUSINESS INTERRUPTION, 
 *    LOST PROFITS OR DATA, COMPUTER FAILURE OR MALFUNCTION, OR ANY OTHER 
 *    COMMERCIAL DAMAGES OR LOSSES), EVEN IF THE LICENSOR HAS BEEN ADVISED OF 
 *    THE POSSIBILITY OF SUCH DAMAGES.
 * 
 * 
 *
 * Definition file for the BCM56960_A0.
 */
#include <bcmdrd/bcmdrd_field.h>
#include <bcmdrd/chip/bcm56960_a0_enum.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 */



/*******************************************************************************
 * REGISTER:  CMICM_BSPI_B0_CNTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_BSPI_B0_CNTRLr_OFFSET 0x00001690

#define CMICM_BSPI_B0_CNTRLr_SIZE 4

/* CMICM_BSPI_B0_CNTRLr is element of CMICM_BSPI_B_CNTRL */

/*******************************************************************************
 * REGISTER:  CMICM_BSPI_B0_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_BSPI_B0_STATUSr_OFFSET 0x0000168c

#define CMICM_BSPI_B0_STATUSr_SIZE 4

/* CMICM_BSPI_B0_STATUSr is element of CMICM_BSPI_B_STATUS */

/*******************************************************************************
 * REGISTER:  CMICM_BSPI_B1_CNTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_BSPI_B1_CNTRLr_OFFSET 0x00001698

#define CMICM_BSPI_B1_CNTRLr_SIZE 4

/* CMICM_BSPI_B1_CNTRLr is element of CMICM_BSPI_B_CNTRL */

/*******************************************************************************
 * REGISTER:  CMICM_BSPI_B1_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_BSPI_B1_STATUSr_OFFSET 0x00001694

#define CMICM_BSPI_B1_STATUSr_SIZE 4

/* CMICM_BSPI_B1_STATUSr is element of CMICM_BSPI_B_STATUS */

/*******************************************************************************
 * REGISTER:  CMICM_BSPI_BUSY_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_BSPI_BUSY_STATUSr_OFFSET 0x00001684

#define CMICM_BSPI_BUSY_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMICM_BSPI_BUSY_STATUS.
 */
typedef union CMICM_BSPI_BUSY_STATUSr_s {
	uint32_t v[1];
	uint32_t cmicm_bspi_busy_status[1];
	uint32_t _cmicm_bspi_busy_status;
} CMICM_BSPI_BUSY_STATUSr_t;

#define CMICM_BSPI_BUSY_STATUSr_CLR(r) (r).cmicm_bspi_busy_status[0] = 0
#define CMICM_BSPI_BUSY_STATUSr_SET(r,d) (r).cmicm_bspi_busy_status[0] = d
#define CMICM_BSPI_BUSY_STATUSr_GET(r) (r).cmicm_bspi_busy_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMICM_BSPI_BUSY_STATUSr_BUSYf_GET(r) (((r).cmicm_bspi_busy_status[0]) & 0x1)
#define CMICM_BSPI_BUSY_STATUSr_BUSYf_SET(r,f) (r).cmicm_bspi_busy_status[0]=(((r).cmicm_bspi_busy_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMICM_BSPI_BUSY_STATUSr_RESERVEDf_GET(r) ((((r).cmicm_bspi_busy_status[0]) >> 1) & 0x7fffffff)
#define CMICM_BSPI_BUSY_STATUSr_RESERVEDf_SET(r,f) (r).cmicm_bspi_busy_status[0]=(((r).cmicm_bspi_busy_status[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMICM_BSPI_BUSY_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMICM_BSPI_B_CNTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_BSPI_B_CNTRLr_OFFSET 0x00001690

#define CMICM_BSPI_B_CNTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMICM_BSPI_B_CNTRL.
 */
typedef union CMICM_BSPI_B_CNTRLr_s {
	uint32_t v[1];
	uint32_t cmicm_bspi_b_cntrl[1];
	uint32_t _cmicm_bspi_b_cntrl;
} CMICM_BSPI_B_CNTRLr_t;

#define CMICM_BSPI_B_CNTRLr_CLR(r) (r).cmicm_bspi_b_cntrl[0] = 0
#define CMICM_BSPI_B_CNTRLr_SET(r,d) (r).cmicm_bspi_b_cntrl[0] = d
#define CMICM_BSPI_B_CNTRLr_GET(r) (r).cmicm_bspi_b_cntrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMICM_BSPI_B_CNTRLr_B0_FLUSHf_GET(r) (((r).cmicm_bspi_b_cntrl[0]) & 0x1)
#define CMICM_BSPI_B_CNTRLr_B0_FLUSHf_SET(r,f) (r).cmicm_bspi_b_cntrl[0]=(((r).cmicm_bspi_b_cntrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMICM_BSPI_B_CNTRLr_RESERVEDf_GET(r) ((((r).cmicm_bspi_b_cntrl[0]) >> 1) & 0x7fffffff)
#define CMICM_BSPI_B_CNTRLr_RESERVEDf_SET(r,f) (r).cmicm_bspi_b_cntrl[0]=(((r).cmicm_bspi_b_cntrl[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMICM_BSPI_B_CNTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMICM_BSPI_B_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_BSPI_B_STATUSr_OFFSET 0x0000168c

#define CMICM_BSPI_B_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMICM_BSPI_B_STATUS.
 */
typedef union CMICM_BSPI_B_STATUSr_s {
	uint32_t v[1];
	uint32_t cmicm_bspi_b_status[1];
	uint32_t _cmicm_bspi_b_status;
} CMICM_BSPI_B_STATUSr_t;

#define CMICM_BSPI_B_STATUSr_CLR(r) (r).cmicm_bspi_b_status[0] = 0
#define CMICM_BSPI_B_STATUSr_SET(r,d) (r).cmicm_bspi_b_status[0] = d
#define CMICM_BSPI_B_STATUSr_GET(r) (r).cmicm_bspi_b_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMICM_BSPI_B_STATUSr_B0_PREF_ADDRf_GET(r) (((r).cmicm_bspi_b_status[0]) & 0xffffff)
#define CMICM_BSPI_B_STATUSr_B0_PREF_ADDRf_SET(r,f) (r).cmicm_bspi_b_status[0]=(((r).cmicm_bspi_b_status[0] & ~((uint32_t)0xffffff)) | (((uint32_t)f) & 0xffffff))
#define CMICM_BSPI_B_STATUSr_B0_HITf_GET(r) ((((r).cmicm_bspi_b_status[0]) >> 24) & 0x1)
#define CMICM_BSPI_B_STATUSr_B0_HITf_SET(r,f) (r).cmicm_bspi_b_status[0]=(((r).cmicm_bspi_b_status[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMICM_BSPI_B_STATUSr_B0_MISSf_GET(r) ((((r).cmicm_bspi_b_status[0]) >> 25) & 0x1)
#define CMICM_BSPI_B_STATUSr_B0_MISSf_SET(r,f) (r).cmicm_bspi_b_status[0]=(((r).cmicm_bspi_b_status[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMICM_BSPI_B_STATUSr_B0_EMPTYf_GET(r) ((((r).cmicm_bspi_b_status[0]) >> 26) & 0x1)
#define CMICM_BSPI_B_STATUSr_B0_EMPTYf_SET(r,f) (r).cmicm_bspi_b_status[0]=(((r).cmicm_bspi_b_status[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMICM_BSPI_B_STATUSr_B0_FULLf_GET(r) ((((r).cmicm_bspi_b_status[0]) >> 27) & 0x1)
#define CMICM_BSPI_B_STATUSr_B0_FULLf_SET(r,f) (r).cmicm_bspi_b_status[0]=(((r).cmicm_bspi_b_status[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMICM_BSPI_B_STATUSr_B0_PREF_ACTf_GET(r) ((((r).cmicm_bspi_b_status[0]) >> 28) & 0x1)
#define CMICM_BSPI_B_STATUSr_B0_PREF_ACTf_SET(r,f) (r).cmicm_bspi_b_status[0]=(((r).cmicm_bspi_b_status[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMICM_BSPI_B_STATUSr_RESERVEDf_GET(r) ((((r).cmicm_bspi_b_status[0]) >> 29) & 0x7)
#define CMICM_BSPI_B_STATUSr_RESERVEDf_SET(r,f) (r).cmicm_bspi_b_status[0]=(((r).cmicm_bspi_b_status[0] & ~((uint32_t)0x7 << 29)) | ((((uint32_t)f) & 0x7) << 29))

/*******************************************************************************
 * End of 'CMICM_BSPI_B_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMICM_BSPI_INTR_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_BSPI_INTR_STATUSr_OFFSET 0x00001688

#define CMICM_BSPI_INTR_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMICM_BSPI_INTR_STATUS.
 */
typedef union CMICM_BSPI_INTR_STATUSr_s {
	uint32_t v[1];
	uint32_t cmicm_bspi_intr_status[1];
	uint32_t _cmicm_bspi_intr_status;
} CMICM_BSPI_INTR_STATUSr_t;

#define CMICM_BSPI_INTR_STATUSr_CLR(r) (r).cmicm_bspi_intr_status[0] = 0
#define CMICM_BSPI_INTR_STATUSr_SET(r,d) (r).cmicm_bspi_intr_status[0] = d
#define CMICM_BSPI_INTR_STATUSr_GET(r) (r).cmicm_bspi_intr_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMICM_BSPI_INTR_STATUSr_INTR_0f_GET(r) (((r).cmicm_bspi_intr_status[0]) & 0x1)
#define CMICM_BSPI_INTR_STATUSr_INTR_0f_SET(r,f) (r).cmicm_bspi_intr_status[0]=(((r).cmicm_bspi_intr_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMICM_BSPI_INTR_STATUSr_INTR_1f_GET(r) ((((r).cmicm_bspi_intr_status[0]) >> 1) & 0x1)
#define CMICM_BSPI_INTR_STATUSr_INTR_1f_SET(r,f) (r).cmicm_bspi_intr_status[0]=(((r).cmicm_bspi_intr_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMICM_BSPI_INTR_STATUSr_RESERVEDf_GET(r) ((((r).cmicm_bspi_intr_status[0]) >> 2) & 0x3fffffff)
#define CMICM_BSPI_INTR_STATUSr_RESERVEDf_SET(r,f) (r).cmicm_bspi_intr_status[0]=(((r).cmicm_bspi_intr_status[0] & ~((uint32_t)0x3fffffff << 2)) | ((((uint32_t)f) & 0x3fffffff) << 2))

/*******************************************************************************
 * End of 'CMICM_BSPI_INTR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMICM_BSPI_MAST_N_BOOT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_BSPI_MAST_N_BOOTr_OFFSET 0x00001680

#define CMICM_BSPI_MAST_N_BOOTr_SIZE 4

/*
 * This structure should be used to declare and program CMICM_BSPI_MAST_N_BOOT.
 */
typedef union CMICM_BSPI_MAST_N_BOOTr_s {
	uint32_t v[1];
	uint32_t cmicm_bspi_mast_n_boot[1];
	uint32_t _cmicm_bspi_mast_n_boot;
} CMICM_BSPI_MAST_N_BOOTr_t;

#define CMICM_BSPI_MAST_N_BOOTr_CLR(r) (r).cmicm_bspi_mast_n_boot[0] = 0
#define CMICM_BSPI_MAST_N_BOOTr_SET(r,d) (r).cmicm_bspi_mast_n_boot[0] = d
#define CMICM_BSPI_MAST_N_BOOTr_GET(r) (r).cmicm_bspi_mast_n_boot[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMICM_BSPI_MAST_N_BOOTr_MAST_N_BOOTf_GET(r) (((r).cmicm_bspi_mast_n_boot[0]) & 0x1)
#define CMICM_BSPI_MAST_N_BOOTr_MAST_N_BOOTf_SET(r,f) (r).cmicm_bspi_mast_n_boot[0]=(((r).cmicm_bspi_mast_n_boot[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMICM_BSPI_MAST_N_BOOTr_RESERVEDf_GET(r) ((((r).cmicm_bspi_mast_n_boot[0]) >> 1) & 0x7fffffff)
#define CMICM_BSPI_MAST_N_BOOTr_RESERVEDf_SET(r,f) (r).cmicm_bspi_mast_n_boot[0]=(((r).cmicm_bspi_mast_n_boot[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMICM_BSPI_MAST_N_BOOTr'
 */




/*******************************************************************************
 * REGISTER:  CMICM_COMMON_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_COMMON_CONFIGr_OFFSET 0x00010194

#define CMICM_COMMON_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMICM_COMMON_CONFIG.
 */
typedef union CMICM_COMMON_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmicm_common_config[1];
	uint32_t _cmicm_common_config;
} CMICM_COMMON_CONFIGr_t;

#define CMICM_COMMON_CONFIGr_CLR(r) (r).cmicm_common_config[0] = 0
#define CMICM_COMMON_CONFIGr_SET(r,d) (r).cmicm_common_config[0] = d
#define CMICM_COMMON_CONFIGr_GET(r) (r).cmicm_common_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMICM_COMMON_CONFIGr_DISABLE_SBUS_PARALLEL_MODEf_GET(r) (((r).cmicm_common_config[0]) & 0x1)
#define CMICM_COMMON_CONFIGr_DISABLE_SBUS_PARALLEL_MODEf_SET(r,f) (r).cmicm_common_config[0]=(((r).cmicm_common_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMICM_COMMON_CONFIGr_CMC0_CLK_ENf_GET(r) ((((r).cmicm_common_config[0]) >> 1) & 0x1)
#define CMICM_COMMON_CONFIGr_CMC0_CLK_ENf_SET(r,f) (r).cmicm_common_config[0]=(((r).cmicm_common_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMICM_COMMON_CONFIGr_CMC1_CLK_ENf_GET(r) ((((r).cmicm_common_config[0]) >> 2) & 0x1)
#define CMICM_COMMON_CONFIGr_CMC1_CLK_ENf_SET(r,f) (r).cmicm_common_config[0]=(((r).cmicm_common_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMICM_COMMON_CONFIGr_CMC2_CLK_ENf_GET(r) ((((r).cmicm_common_config[0]) >> 3) & 0x1)
#define CMICM_COMMON_CONFIGr_CMC2_CLK_ENf_SET(r,f) (r).cmicm_common_config[0]=(((r).cmicm_common_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMICM_COMMON_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMICM_REVID
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMICM_REVIDr_OFFSET 0x00010228

#define CMICM_REVIDr_SIZE 4

/*
 * This structure should be used to declare and program CMICM_REVID.
 */
typedef union CMICM_REVIDr_s {
	uint32_t v[1];
	uint32_t cmicm_revid[1];
	uint32_t _cmicm_revid;
} CMICM_REVIDr_t;

#define CMICM_REVIDr_CLR(r) (r).cmicm_revid[0] = 0
#define CMICM_REVIDr_SET(r,d) (r).cmicm_revid[0] = d
#define CMICM_REVIDr_GET(r) (r).cmicm_revid[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMICM_REVIDr_REV_IDf_GET(r) (((r).cmicm_revid[0]) & 0xff)
#define CMICM_REVIDr_REV_IDf_SET(r,f) (r).cmicm_revid[0]=(((r).cmicm_revid[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMICM_REVIDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BROADSYNC_REF_CLK_GEN_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_OFFSET 0x000106fc

#define CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BROADSYNC_REF_CLK_GEN_CTRL.
 */
typedef union CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_broadsync_ref_clk_gen_ctrl[1];
	uint32_t _cmic_broadsync_ref_clk_gen_ctrl;
} CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_t;

#define CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_CLR(r) (r).cmic_broadsync_ref_clk_gen_ctrl[0] = 0
#define CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_SET(r,d) (r).cmic_broadsync_ref_clk_gen_ctrl[0] = d
#define CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_GET(r) (r).cmic_broadsync_ref_clk_gen_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_DIVISORf_GET(r) (((r).cmic_broadsync_ref_clk_gen_ctrl[0]) & 0xff)
#define CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_DIVISORf_SET(r,f) (r).cmic_broadsync_ref_clk_gen_ctrl[0]=(((r).cmic_broadsync_ref_clk_gen_ctrl[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_ENABLEf_GET(r) ((((r).cmic_broadsync_ref_clk_gen_ctrl[0]) >> 8) & 0x1)
#define CMIC_BROADSYNC_REF_CLK_GEN_CTRLr_ENABLEf_SET(r,f) (r).cmic_broadsync_ref_clk_gen_ctrl[0]=(((r).cmic_broadsync_ref_clk_gen_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_BROADSYNC_REF_CLK_GEN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_CLK_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_CLK_CTRLr_OFFSET 0x00010704

#define CMIC_BS0_CLK_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_CLK_CTRL.
 */
typedef union CMIC_BS0_CLK_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_bs0_clk_ctrl[1];
	uint32_t _cmic_bs0_clk_ctrl;
} CMIC_BS0_CLK_CTRLr_t;

#define CMIC_BS0_CLK_CTRLr_CLR(r) (r).cmic_bs0_clk_ctrl[0] = 0
#define CMIC_BS0_CLK_CTRLr_SET(r,d) (r).cmic_bs0_clk_ctrl[0] = d
#define CMIC_BS0_CLK_CTRLr_GET(r) (r).cmic_bs0_clk_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_CLK_CTRLr_LOW_DURATIONf_GET(r) (((r).cmic_bs0_clk_ctrl[0]) & 0xff)
#define CMIC_BS0_CLK_CTRLr_LOW_DURATIONf_SET(r,f) (r).cmic_bs0_clk_ctrl[0]=(((r).cmic_bs0_clk_ctrl[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_BS0_CLK_CTRLr_HIGH_DURATIONf_GET(r) ((((r).cmic_bs0_clk_ctrl[0]) >> 8) & 0xff)
#define CMIC_BS0_CLK_CTRLr_HIGH_DURATIONf_SET(r,f) (r).cmic_bs0_clk_ctrl[0]=(((r).cmic_bs0_clk_ctrl[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define CMIC_BS0_CLK_CTRLr_ENABLEf_GET(r) ((((r).cmic_bs0_clk_ctrl[0]) >> 16) & 0x1)
#define CMIC_BS0_CLK_CTRLr_ENABLEf_SET(r,f) (r).cmic_bs0_clk_ctrl[0]=(((r).cmic_bs0_clk_ctrl[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))

/*******************************************************************************
 * End of 'CMIC_BS0_CLK_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_CONFIGr_OFFSET 0x00010700

#define CMIC_BS0_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_CONFIG.
 */
typedef union CMIC_BS0_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_bs0_config[1];
	uint32_t _cmic_bs0_config;
} CMIC_BS0_CONFIGr_t;

#define CMIC_BS0_CONFIGr_CLR(r) (r).cmic_bs0_config[0] = 0
#define CMIC_BS0_CONFIGr_SET(r,d) (r).cmic_bs0_config[0] = d
#define CMIC_BS0_CONFIGr_GET(r) (r).cmic_bs0_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_CONFIGr_BS_TC_OUTPUT_LOWf_GET(r) (((r).cmic_bs0_config[0]) & 0x1)
#define CMIC_BS0_CONFIGr_BS_TC_OUTPUT_LOWf_SET(r,f) (r).cmic_bs0_config[0]=(((r).cmic_bs0_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_BS0_CONFIGr_BS_HB_OUTPUT_LOWf_GET(r) ((((r).cmic_bs0_config[0]) >> 1) & 0x1)
#define CMIC_BS0_CONFIGr_BS_HB_OUTPUT_LOWf_SET(r,f) (r).cmic_bs0_config[0]=(((r).cmic_bs0_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_BS0_CONFIGr_BS_CLK_OUTPUT_LOWf_GET(r) ((((r).cmic_bs0_config[0]) >> 2) & 0x1)
#define CMIC_BS0_CONFIGr_BS_CLK_OUTPUT_LOWf_SET(r,f) (r).cmic_bs0_config[0]=(((r).cmic_bs0_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_BS0_CONFIGr_BS_TC_OUTPUT_ENABLEf_GET(r) ((((r).cmic_bs0_config[0]) >> 3) & 0x1)
#define CMIC_BS0_CONFIGr_BS_TC_OUTPUT_ENABLEf_SET(r,f) (r).cmic_bs0_config[0]=(((r).cmic_bs0_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_BS0_CONFIGr_BS_HB_OUTPUT_ENABLEf_GET(r) ((((r).cmic_bs0_config[0]) >> 4) & 0x1)
#define CMIC_BS0_CONFIGr_BS_HB_OUTPUT_ENABLEf_SET(r,f) (r).cmic_bs0_config[0]=(((r).cmic_bs0_config[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_BS0_CONFIGr_BS_CLK_OUTPUT_ENABLEf_GET(r) ((((r).cmic_bs0_config[0]) >> 5) & 0x1)
#define CMIC_BS0_CONFIGr_BS_CLK_OUTPUT_ENABLEf_SET(r,f) (r).cmic_bs0_config[0]=(((r).cmic_bs0_config[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_BS0_CONFIGr_MODEf_GET(r) ((((r).cmic_bs0_config[0]) >> 6) & 0x1)
#define CMIC_BS0_CONFIGr_MODEf_SET(r,f) (r).cmic_bs0_config[0]=(((r).cmic_bs0_config[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))

/*******************************************************************************
 * End of 'CMIC_BS0_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_HEARTBEAT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_HEARTBEAT_CTRLr_OFFSET 0x00010708

#define CMIC_BS0_HEARTBEAT_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_HEARTBEAT_CTRL.
 */
typedef union CMIC_BS0_HEARTBEAT_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_bs0_heartbeat_ctrl[1];
	uint32_t _cmic_bs0_heartbeat_ctrl;
} CMIC_BS0_HEARTBEAT_CTRLr_t;

#define CMIC_BS0_HEARTBEAT_CTRLr_CLR(r) (r).cmic_bs0_heartbeat_ctrl[0] = 0
#define CMIC_BS0_HEARTBEAT_CTRLr_SET(r,d) (r).cmic_bs0_heartbeat_ctrl[0] = d
#define CMIC_BS0_HEARTBEAT_CTRLr_GET(r) (r).cmic_bs0_heartbeat_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_HEARTBEAT_CTRLr_ENABLEf_GET(r) (((r).cmic_bs0_heartbeat_ctrl[0]) & 0x1)
#define CMIC_BS0_HEARTBEAT_CTRLr_ENABLEf_SET(r,f) (r).cmic_bs0_heartbeat_ctrl[0]=(((r).cmic_bs0_heartbeat_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_BS0_HEARTBEAT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_HEARTBEAT_DOWN_DURATION
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_HEARTBEAT_DOWN_DURATIONr_OFFSET 0x00010710

#define CMIC_BS0_HEARTBEAT_DOWN_DURATIONr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_HEARTBEAT_DOWN_DURATION.
 */
typedef union CMIC_BS0_HEARTBEAT_DOWN_DURATIONr_s {
	uint32_t v[1];
	uint32_t cmic_bs0_heartbeat_down_duration[1];
	uint32_t _cmic_bs0_heartbeat_down_duration;
} CMIC_BS0_HEARTBEAT_DOWN_DURATIONr_t;

#define CMIC_BS0_HEARTBEAT_DOWN_DURATIONr_CLR(r) (r).cmic_bs0_heartbeat_down_duration[0] = 0
#define CMIC_BS0_HEARTBEAT_DOWN_DURATIONr_SET(r,d) (r).cmic_bs0_heartbeat_down_duration[0] = d
#define CMIC_BS0_HEARTBEAT_DOWN_DURATIONr_GET(r) (r).cmic_bs0_heartbeat_down_duration[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_HEARTBEAT_DOWN_DURATIONr_DOWN_DURATIONf_GET(r) (((r).cmic_bs0_heartbeat_down_duration[0]) & 0x3ffffff)
#define CMIC_BS0_HEARTBEAT_DOWN_DURATIONr_DOWN_DURATIONf_SET(r,f) (r).cmic_bs0_heartbeat_down_duration[0]=(((r).cmic_bs0_heartbeat_down_duration[0] & ~((uint32_t)0x3ffffff)) | (((uint32_t)f) & 0x3ffffff))

/*******************************************************************************
 * End of 'CMIC_BS0_HEARTBEAT_DOWN_DURATIONr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_HEARTBEAT_UP_DURATION
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_HEARTBEAT_UP_DURATIONr_OFFSET 0x0001070c

#define CMIC_BS0_HEARTBEAT_UP_DURATIONr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_HEARTBEAT_UP_DURATION.
 */
typedef union CMIC_BS0_HEARTBEAT_UP_DURATIONr_s {
	uint32_t v[1];
	uint32_t cmic_bs0_heartbeat_up_duration[1];
	uint32_t _cmic_bs0_heartbeat_up_duration;
} CMIC_BS0_HEARTBEAT_UP_DURATIONr_t;

#define CMIC_BS0_HEARTBEAT_UP_DURATIONr_CLR(r) (r).cmic_bs0_heartbeat_up_duration[0] = 0
#define CMIC_BS0_HEARTBEAT_UP_DURATIONr_SET(r,d) (r).cmic_bs0_heartbeat_up_duration[0] = d
#define CMIC_BS0_HEARTBEAT_UP_DURATIONr_GET(r) (r).cmic_bs0_heartbeat_up_duration[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_HEARTBEAT_UP_DURATIONr_UP_DURATIONf_GET(r) (((r).cmic_bs0_heartbeat_up_duration[0]) & 0x3ffffff)
#define CMIC_BS0_HEARTBEAT_UP_DURATIONr_UP_DURATIONf_SET(r,f) (r).cmic_bs0_heartbeat_up_duration[0]=(((r).cmic_bs0_heartbeat_up_duration[0] & ~((uint32_t)0x3ffffff)) | (((uint32_t)f) & 0x3ffffff))

/*******************************************************************************
 * End of 'CMIC_BS0_HEARTBEAT_UP_DURATIONr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_INITIAL_CRC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_INITIAL_CRCr_OFFSET 0x0001072c

#define CMIC_BS0_INITIAL_CRCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_INITIAL_CRC.
 */
typedef union CMIC_BS0_INITIAL_CRCr_s {
	uint32_t v[1];
	uint32_t cmic_bs0_initial_crc[1];
	uint32_t _cmic_bs0_initial_crc;
} CMIC_BS0_INITIAL_CRCr_t;

#define CMIC_BS0_INITIAL_CRCr_CLR(r) (r).cmic_bs0_initial_crc[0] = 0
#define CMIC_BS0_INITIAL_CRCr_SET(r,d) (r).cmic_bs0_initial_crc[0] = d
#define CMIC_BS0_INITIAL_CRCr_GET(r) (r).cmic_bs0_initial_crc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_INITIAL_CRCr_INITIAL_CRCf_GET(r) (((r).cmic_bs0_initial_crc[0]) & 0xff)
#define CMIC_BS0_INITIAL_CRCr_INITIAL_CRCf_SET(r,f) (r).cmic_bs0_initial_crc[0]=(((r).cmic_bs0_initial_crc[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_BS0_INITIAL_CRCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_INPUT_TIME_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_INPUT_TIME_0r_OFFSET 0x00010720

#define CMIC_BS0_INPUT_TIME_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_INPUT_TIME_0.
 */
typedef union CMIC_BS0_INPUT_TIME_0r_s {
	uint32_t v[1];
	uint32_t cmic_bs0_input_time_0[1];
	uint32_t _cmic_bs0_input_time_0;
} CMIC_BS0_INPUT_TIME_0r_t;

#define CMIC_BS0_INPUT_TIME_0r_CLR(r) (r).cmic_bs0_input_time_0[0] = 0
#define CMIC_BS0_INPUT_TIME_0r_SET(r,d) (r).cmic_bs0_input_time_0[0] = d
#define CMIC_BS0_INPUT_TIME_0r_GET(r) (r).cmic_bs0_input_time_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_INPUT_TIME_0r_DATAf_GET(r) ((r).cmic_bs0_input_time_0[0])
#define CMIC_BS0_INPUT_TIME_0r_DATAf_SET(r,f) (r).cmic_bs0_input_time_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_BS0_INPUT_TIME_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_INPUT_TIME_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_INPUT_TIME_1r_OFFSET 0x00010724

#define CMIC_BS0_INPUT_TIME_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_INPUT_TIME_1.
 */
typedef union CMIC_BS0_INPUT_TIME_1r_s {
	uint32_t v[1];
	uint32_t cmic_bs0_input_time_1[1];
	uint32_t _cmic_bs0_input_time_1;
} CMIC_BS0_INPUT_TIME_1r_t;

#define CMIC_BS0_INPUT_TIME_1r_CLR(r) (r).cmic_bs0_input_time_1[0] = 0
#define CMIC_BS0_INPUT_TIME_1r_SET(r,d) (r).cmic_bs0_input_time_1[0] = d
#define CMIC_BS0_INPUT_TIME_1r_GET(r) (r).cmic_bs0_input_time_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_INPUT_TIME_1r_DATAf_GET(r) ((r).cmic_bs0_input_time_1[0])
#define CMIC_BS0_INPUT_TIME_1r_DATAf_SET(r,f) (r).cmic_bs0_input_time_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_BS0_INPUT_TIME_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_INPUT_TIME_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_INPUT_TIME_2r_OFFSET 0x00010728

#define CMIC_BS0_INPUT_TIME_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_INPUT_TIME_2.
 */
typedef union CMIC_BS0_INPUT_TIME_2r_s {
	uint32_t v[1];
	uint32_t cmic_bs0_input_time_2[1];
	uint32_t _cmic_bs0_input_time_2;
} CMIC_BS0_INPUT_TIME_2r_t;

#define CMIC_BS0_INPUT_TIME_2r_CLR(r) (r).cmic_bs0_input_time_2[0] = 0
#define CMIC_BS0_INPUT_TIME_2r_SET(r,d) (r).cmic_bs0_input_time_2[0] = d
#define CMIC_BS0_INPUT_TIME_2r_GET(r) (r).cmic_bs0_input_time_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_INPUT_TIME_2r_DATAf_GET(r) (((r).cmic_bs0_input_time_2[0]) & 0x1ffffff)
#define CMIC_BS0_INPUT_TIME_2r_DATAf_SET(r,f) (r).cmic_bs0_input_time_2[0]=(((r).cmic_bs0_input_time_2[0] & ~((uint32_t)0x1ffffff)) | (((uint32_t)f) & 0x1ffffff))
#define CMIC_BS0_INPUT_TIME_2r_CHECKSUM_ERRORf_GET(r) ((((r).cmic_bs0_input_time_2[0]) >> 25) & 0x1)
#define CMIC_BS0_INPUT_TIME_2r_CHECKSUM_ERRORf_SET(r,f) (r).cmic_bs0_input_time_2[0]=(((r).cmic_bs0_input_time_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_BS0_INPUT_TIME_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_OUTPUT_TIME_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_OUTPUT_TIME_0r_OFFSET 0x00010714

#define CMIC_BS0_OUTPUT_TIME_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_OUTPUT_TIME_0.
 */
typedef union CMIC_BS0_OUTPUT_TIME_0r_s {
	uint32_t v[1];
	uint32_t cmic_bs0_output_time_0[1];
	uint32_t _cmic_bs0_output_time_0;
} CMIC_BS0_OUTPUT_TIME_0r_t;

#define CMIC_BS0_OUTPUT_TIME_0r_CLR(r) (r).cmic_bs0_output_time_0[0] = 0
#define CMIC_BS0_OUTPUT_TIME_0r_SET(r,d) (r).cmic_bs0_output_time_0[0] = d
#define CMIC_BS0_OUTPUT_TIME_0r_GET(r) (r).cmic_bs0_output_time_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_OUTPUT_TIME_0r_ACCURACYf_GET(r) (((r).cmic_bs0_output_time_0[0]) & 0xff)
#define CMIC_BS0_OUTPUT_TIME_0r_ACCURACYf_SET(r,f) (r).cmic_bs0_output_time_0[0]=(((r).cmic_bs0_output_time_0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_BS0_OUTPUT_TIME_0r_EPOCHf_GET(r) ((((r).cmic_bs0_output_time_0[0]) >> 8) & 0xffff)
#define CMIC_BS0_OUTPUT_TIME_0r_EPOCHf_SET(r,f) (r).cmic_bs0_output_time_0[0]=(((r).cmic_bs0_output_time_0[0] & ~((uint32_t)0xffff << 8)) | ((((uint32_t)f) & 0xffff) << 8))
#define CMIC_BS0_OUTPUT_TIME_0r_LOCKf_GET(r) ((((r).cmic_bs0_output_time_0[0]) >> 24) & 0x1)
#define CMIC_BS0_OUTPUT_TIME_0r_LOCKf_SET(r,f) (r).cmic_bs0_output_time_0[0]=(((r).cmic_bs0_output_time_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))

/*******************************************************************************
 * End of 'CMIC_BS0_OUTPUT_TIME_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_OUTPUT_TIME_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_OUTPUT_TIME_1r_OFFSET 0x00010718

#define CMIC_BS0_OUTPUT_TIME_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_OUTPUT_TIME_1.
 */
typedef union CMIC_BS0_OUTPUT_TIME_1r_s {
	uint32_t v[1];
	uint32_t cmic_bs0_output_time_1[1];
	uint32_t _cmic_bs0_output_time_1;
} CMIC_BS0_OUTPUT_TIME_1r_t;

#define CMIC_BS0_OUTPUT_TIME_1r_CLR(r) (r).cmic_bs0_output_time_1[0] = 0
#define CMIC_BS0_OUTPUT_TIME_1r_SET(r,d) (r).cmic_bs0_output_time_1[0] = d
#define CMIC_BS0_OUTPUT_TIME_1r_GET(r) (r).cmic_bs0_output_time_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_OUTPUT_TIME_1r_SECOND_TIMEf_GET(r) ((r).cmic_bs0_output_time_1[0])
#define CMIC_BS0_OUTPUT_TIME_1r_SECOND_TIMEf_SET(r,f) (r).cmic_bs0_output_time_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_BS0_OUTPUT_TIME_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS0_OUTPUT_TIME_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS0_OUTPUT_TIME_2r_OFFSET 0x0001071c

#define CMIC_BS0_OUTPUT_TIME_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS0_OUTPUT_TIME_2.
 */
typedef union CMIC_BS0_OUTPUT_TIME_2r_s {
	uint32_t v[1];
	uint32_t cmic_bs0_output_time_2[1];
	uint32_t _cmic_bs0_output_time_2;
} CMIC_BS0_OUTPUT_TIME_2r_t;

#define CMIC_BS0_OUTPUT_TIME_2r_CLR(r) (r).cmic_bs0_output_time_2[0] = 0
#define CMIC_BS0_OUTPUT_TIME_2r_SET(r,d) (r).cmic_bs0_output_time_2[0] = d
#define CMIC_BS0_OUTPUT_TIME_2r_GET(r) (r).cmic_bs0_output_time_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS0_OUTPUT_TIME_2r_NS_TIMEf_GET(r) (((r).cmic_bs0_output_time_2[0]) & 0x3fffffff)
#define CMIC_BS0_OUTPUT_TIME_2r_NS_TIMEf_SET(r,f) (r).cmic_bs0_output_time_2[0]=(((r).cmic_bs0_output_time_2[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*******************************************************************************
 * End of 'CMIC_BS0_OUTPUT_TIME_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_CLK_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_CLK_CTRLr_OFFSET 0x00010804

#define CMIC_BS1_CLK_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_CLK_CTRL.
 */
typedef union CMIC_BS1_CLK_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_bs1_clk_ctrl[1];
	uint32_t _cmic_bs1_clk_ctrl;
} CMIC_BS1_CLK_CTRLr_t;

#define CMIC_BS1_CLK_CTRLr_CLR(r) (r).cmic_bs1_clk_ctrl[0] = 0
#define CMIC_BS1_CLK_CTRLr_SET(r,d) (r).cmic_bs1_clk_ctrl[0] = d
#define CMIC_BS1_CLK_CTRLr_GET(r) (r).cmic_bs1_clk_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_CLK_CTRLr_LOW_DURATIONf_GET(r) (((r).cmic_bs1_clk_ctrl[0]) & 0xff)
#define CMIC_BS1_CLK_CTRLr_LOW_DURATIONf_SET(r,f) (r).cmic_bs1_clk_ctrl[0]=(((r).cmic_bs1_clk_ctrl[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_BS1_CLK_CTRLr_HIGH_DURATIONf_GET(r) ((((r).cmic_bs1_clk_ctrl[0]) >> 8) & 0xff)
#define CMIC_BS1_CLK_CTRLr_HIGH_DURATIONf_SET(r,f) (r).cmic_bs1_clk_ctrl[0]=(((r).cmic_bs1_clk_ctrl[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define CMIC_BS1_CLK_CTRLr_ENABLEf_GET(r) ((((r).cmic_bs1_clk_ctrl[0]) >> 16) & 0x1)
#define CMIC_BS1_CLK_CTRLr_ENABLEf_SET(r,f) (r).cmic_bs1_clk_ctrl[0]=(((r).cmic_bs1_clk_ctrl[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))

/*******************************************************************************
 * End of 'CMIC_BS1_CLK_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_CONFIGr_OFFSET 0x00010800

#define CMIC_BS1_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_CONFIG.
 */
typedef union CMIC_BS1_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_bs1_config[1];
	uint32_t _cmic_bs1_config;
} CMIC_BS1_CONFIGr_t;

#define CMIC_BS1_CONFIGr_CLR(r) (r).cmic_bs1_config[0] = 0
#define CMIC_BS1_CONFIGr_SET(r,d) (r).cmic_bs1_config[0] = d
#define CMIC_BS1_CONFIGr_GET(r) (r).cmic_bs1_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_CONFIGr_BS_TC_OUTPUT_LOWf_GET(r) (((r).cmic_bs1_config[0]) & 0x1)
#define CMIC_BS1_CONFIGr_BS_TC_OUTPUT_LOWf_SET(r,f) (r).cmic_bs1_config[0]=(((r).cmic_bs1_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_BS1_CONFIGr_BS_HB_OUTPUT_LOWf_GET(r) ((((r).cmic_bs1_config[0]) >> 1) & 0x1)
#define CMIC_BS1_CONFIGr_BS_HB_OUTPUT_LOWf_SET(r,f) (r).cmic_bs1_config[0]=(((r).cmic_bs1_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_BS1_CONFIGr_BS_CLK_OUTPUT_LOWf_GET(r) ((((r).cmic_bs1_config[0]) >> 2) & 0x1)
#define CMIC_BS1_CONFIGr_BS_CLK_OUTPUT_LOWf_SET(r,f) (r).cmic_bs1_config[0]=(((r).cmic_bs1_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_BS1_CONFIGr_BS_TC_OUTPUT_ENABLEf_GET(r) ((((r).cmic_bs1_config[0]) >> 3) & 0x1)
#define CMIC_BS1_CONFIGr_BS_TC_OUTPUT_ENABLEf_SET(r,f) (r).cmic_bs1_config[0]=(((r).cmic_bs1_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_BS1_CONFIGr_BS_HB_OUTPUT_ENABLEf_GET(r) ((((r).cmic_bs1_config[0]) >> 4) & 0x1)
#define CMIC_BS1_CONFIGr_BS_HB_OUTPUT_ENABLEf_SET(r,f) (r).cmic_bs1_config[0]=(((r).cmic_bs1_config[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_BS1_CONFIGr_BS_CLK_OUTPUT_ENABLEf_GET(r) ((((r).cmic_bs1_config[0]) >> 5) & 0x1)
#define CMIC_BS1_CONFIGr_BS_CLK_OUTPUT_ENABLEf_SET(r,f) (r).cmic_bs1_config[0]=(((r).cmic_bs1_config[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_BS1_CONFIGr_MODEf_GET(r) ((((r).cmic_bs1_config[0]) >> 6) & 0x1)
#define CMIC_BS1_CONFIGr_MODEf_SET(r,f) (r).cmic_bs1_config[0]=(((r).cmic_bs1_config[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))

/*******************************************************************************
 * End of 'CMIC_BS1_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_HEARTBEAT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_HEARTBEAT_CTRLr_OFFSET 0x00010808

#define CMIC_BS1_HEARTBEAT_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_HEARTBEAT_CTRL.
 */
typedef union CMIC_BS1_HEARTBEAT_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_bs1_heartbeat_ctrl[1];
	uint32_t _cmic_bs1_heartbeat_ctrl;
} CMIC_BS1_HEARTBEAT_CTRLr_t;

#define CMIC_BS1_HEARTBEAT_CTRLr_CLR(r) (r).cmic_bs1_heartbeat_ctrl[0] = 0
#define CMIC_BS1_HEARTBEAT_CTRLr_SET(r,d) (r).cmic_bs1_heartbeat_ctrl[0] = d
#define CMIC_BS1_HEARTBEAT_CTRLr_GET(r) (r).cmic_bs1_heartbeat_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_HEARTBEAT_CTRLr_ENABLEf_GET(r) (((r).cmic_bs1_heartbeat_ctrl[0]) & 0x1)
#define CMIC_BS1_HEARTBEAT_CTRLr_ENABLEf_SET(r,f) (r).cmic_bs1_heartbeat_ctrl[0]=(((r).cmic_bs1_heartbeat_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_BS1_HEARTBEAT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_HEARTBEAT_DOWN_DURATION
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_HEARTBEAT_DOWN_DURATIONr_OFFSET 0x00010810

#define CMIC_BS1_HEARTBEAT_DOWN_DURATIONr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_HEARTBEAT_DOWN_DURATION.
 */
typedef union CMIC_BS1_HEARTBEAT_DOWN_DURATIONr_s {
	uint32_t v[1];
	uint32_t cmic_bs1_heartbeat_down_duration[1];
	uint32_t _cmic_bs1_heartbeat_down_duration;
} CMIC_BS1_HEARTBEAT_DOWN_DURATIONr_t;

#define CMIC_BS1_HEARTBEAT_DOWN_DURATIONr_CLR(r) (r).cmic_bs1_heartbeat_down_duration[0] = 0
#define CMIC_BS1_HEARTBEAT_DOWN_DURATIONr_SET(r,d) (r).cmic_bs1_heartbeat_down_duration[0] = d
#define CMIC_BS1_HEARTBEAT_DOWN_DURATIONr_GET(r) (r).cmic_bs1_heartbeat_down_duration[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_HEARTBEAT_DOWN_DURATIONr_DOWN_DURATIONf_GET(r) (((r).cmic_bs1_heartbeat_down_duration[0]) & 0x3ffffff)
#define CMIC_BS1_HEARTBEAT_DOWN_DURATIONr_DOWN_DURATIONf_SET(r,f) (r).cmic_bs1_heartbeat_down_duration[0]=(((r).cmic_bs1_heartbeat_down_duration[0] & ~((uint32_t)0x3ffffff)) | (((uint32_t)f) & 0x3ffffff))

/*******************************************************************************
 * End of 'CMIC_BS1_HEARTBEAT_DOWN_DURATIONr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_HEARTBEAT_UP_DURATION
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_HEARTBEAT_UP_DURATIONr_OFFSET 0x0001080c

#define CMIC_BS1_HEARTBEAT_UP_DURATIONr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_HEARTBEAT_UP_DURATION.
 */
typedef union CMIC_BS1_HEARTBEAT_UP_DURATIONr_s {
	uint32_t v[1];
	uint32_t cmic_bs1_heartbeat_up_duration[1];
	uint32_t _cmic_bs1_heartbeat_up_duration;
} CMIC_BS1_HEARTBEAT_UP_DURATIONr_t;

#define CMIC_BS1_HEARTBEAT_UP_DURATIONr_CLR(r) (r).cmic_bs1_heartbeat_up_duration[0] = 0
#define CMIC_BS1_HEARTBEAT_UP_DURATIONr_SET(r,d) (r).cmic_bs1_heartbeat_up_duration[0] = d
#define CMIC_BS1_HEARTBEAT_UP_DURATIONr_GET(r) (r).cmic_bs1_heartbeat_up_duration[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_HEARTBEAT_UP_DURATIONr_UP_DURATIONf_GET(r) (((r).cmic_bs1_heartbeat_up_duration[0]) & 0x3ffffff)
#define CMIC_BS1_HEARTBEAT_UP_DURATIONr_UP_DURATIONf_SET(r,f) (r).cmic_bs1_heartbeat_up_duration[0]=(((r).cmic_bs1_heartbeat_up_duration[0] & ~((uint32_t)0x3ffffff)) | (((uint32_t)f) & 0x3ffffff))

/*******************************************************************************
 * End of 'CMIC_BS1_HEARTBEAT_UP_DURATIONr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_INITIAL_CRC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_INITIAL_CRCr_OFFSET 0x0001082c

#define CMIC_BS1_INITIAL_CRCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_INITIAL_CRC.
 */
typedef union CMIC_BS1_INITIAL_CRCr_s {
	uint32_t v[1];
	uint32_t cmic_bs1_initial_crc[1];
	uint32_t _cmic_bs1_initial_crc;
} CMIC_BS1_INITIAL_CRCr_t;

#define CMIC_BS1_INITIAL_CRCr_CLR(r) (r).cmic_bs1_initial_crc[0] = 0
#define CMIC_BS1_INITIAL_CRCr_SET(r,d) (r).cmic_bs1_initial_crc[0] = d
#define CMIC_BS1_INITIAL_CRCr_GET(r) (r).cmic_bs1_initial_crc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_INITIAL_CRCr_INITIAL_CRCf_GET(r) (((r).cmic_bs1_initial_crc[0]) & 0xff)
#define CMIC_BS1_INITIAL_CRCr_INITIAL_CRCf_SET(r,f) (r).cmic_bs1_initial_crc[0]=(((r).cmic_bs1_initial_crc[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_BS1_INITIAL_CRCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_INPUT_TIME_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_INPUT_TIME_0r_OFFSET 0x00010820

#define CMIC_BS1_INPUT_TIME_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_INPUT_TIME_0.
 */
typedef union CMIC_BS1_INPUT_TIME_0r_s {
	uint32_t v[1];
	uint32_t cmic_bs1_input_time_0[1];
	uint32_t _cmic_bs1_input_time_0;
} CMIC_BS1_INPUT_TIME_0r_t;

#define CMIC_BS1_INPUT_TIME_0r_CLR(r) (r).cmic_bs1_input_time_0[0] = 0
#define CMIC_BS1_INPUT_TIME_0r_SET(r,d) (r).cmic_bs1_input_time_0[0] = d
#define CMIC_BS1_INPUT_TIME_0r_GET(r) (r).cmic_bs1_input_time_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_INPUT_TIME_0r_DATAf_GET(r) ((r).cmic_bs1_input_time_0[0])
#define CMIC_BS1_INPUT_TIME_0r_DATAf_SET(r,f) (r).cmic_bs1_input_time_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_BS1_INPUT_TIME_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_INPUT_TIME_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_INPUT_TIME_1r_OFFSET 0x00010824

#define CMIC_BS1_INPUT_TIME_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_INPUT_TIME_1.
 */
typedef union CMIC_BS1_INPUT_TIME_1r_s {
	uint32_t v[1];
	uint32_t cmic_bs1_input_time_1[1];
	uint32_t _cmic_bs1_input_time_1;
} CMIC_BS1_INPUT_TIME_1r_t;

#define CMIC_BS1_INPUT_TIME_1r_CLR(r) (r).cmic_bs1_input_time_1[0] = 0
#define CMIC_BS1_INPUT_TIME_1r_SET(r,d) (r).cmic_bs1_input_time_1[0] = d
#define CMIC_BS1_INPUT_TIME_1r_GET(r) (r).cmic_bs1_input_time_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_INPUT_TIME_1r_DATAf_GET(r) ((r).cmic_bs1_input_time_1[0])
#define CMIC_BS1_INPUT_TIME_1r_DATAf_SET(r,f) (r).cmic_bs1_input_time_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_BS1_INPUT_TIME_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_INPUT_TIME_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_INPUT_TIME_2r_OFFSET 0x00010828

#define CMIC_BS1_INPUT_TIME_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_INPUT_TIME_2.
 */
typedef union CMIC_BS1_INPUT_TIME_2r_s {
	uint32_t v[1];
	uint32_t cmic_bs1_input_time_2[1];
	uint32_t _cmic_bs1_input_time_2;
} CMIC_BS1_INPUT_TIME_2r_t;

#define CMIC_BS1_INPUT_TIME_2r_CLR(r) (r).cmic_bs1_input_time_2[0] = 0
#define CMIC_BS1_INPUT_TIME_2r_SET(r,d) (r).cmic_bs1_input_time_2[0] = d
#define CMIC_BS1_INPUT_TIME_2r_GET(r) (r).cmic_bs1_input_time_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_INPUT_TIME_2r_DATAf_GET(r) (((r).cmic_bs1_input_time_2[0]) & 0x1ffffff)
#define CMIC_BS1_INPUT_TIME_2r_DATAf_SET(r,f) (r).cmic_bs1_input_time_2[0]=(((r).cmic_bs1_input_time_2[0] & ~((uint32_t)0x1ffffff)) | (((uint32_t)f) & 0x1ffffff))
#define CMIC_BS1_INPUT_TIME_2r_CHECKSUM_ERRORf_GET(r) ((((r).cmic_bs1_input_time_2[0]) >> 25) & 0x1)
#define CMIC_BS1_INPUT_TIME_2r_CHECKSUM_ERRORf_SET(r,f) (r).cmic_bs1_input_time_2[0]=(((r).cmic_bs1_input_time_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_BS1_INPUT_TIME_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_OUTPUT_TIME_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_OUTPUT_TIME_0r_OFFSET 0x00010814

#define CMIC_BS1_OUTPUT_TIME_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_OUTPUT_TIME_0.
 */
typedef union CMIC_BS1_OUTPUT_TIME_0r_s {
	uint32_t v[1];
	uint32_t cmic_bs1_output_time_0[1];
	uint32_t _cmic_bs1_output_time_0;
} CMIC_BS1_OUTPUT_TIME_0r_t;

#define CMIC_BS1_OUTPUT_TIME_0r_CLR(r) (r).cmic_bs1_output_time_0[0] = 0
#define CMIC_BS1_OUTPUT_TIME_0r_SET(r,d) (r).cmic_bs1_output_time_0[0] = d
#define CMIC_BS1_OUTPUT_TIME_0r_GET(r) (r).cmic_bs1_output_time_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_OUTPUT_TIME_0r_ACCURACYf_GET(r) (((r).cmic_bs1_output_time_0[0]) & 0xff)
#define CMIC_BS1_OUTPUT_TIME_0r_ACCURACYf_SET(r,f) (r).cmic_bs1_output_time_0[0]=(((r).cmic_bs1_output_time_0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_BS1_OUTPUT_TIME_0r_EPOCHf_GET(r) ((((r).cmic_bs1_output_time_0[0]) >> 8) & 0xffff)
#define CMIC_BS1_OUTPUT_TIME_0r_EPOCHf_SET(r,f) (r).cmic_bs1_output_time_0[0]=(((r).cmic_bs1_output_time_0[0] & ~((uint32_t)0xffff << 8)) | ((((uint32_t)f) & 0xffff) << 8))
#define CMIC_BS1_OUTPUT_TIME_0r_LOCKf_GET(r) ((((r).cmic_bs1_output_time_0[0]) >> 24) & 0x1)
#define CMIC_BS1_OUTPUT_TIME_0r_LOCKf_SET(r,f) (r).cmic_bs1_output_time_0[0]=(((r).cmic_bs1_output_time_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))

/*******************************************************************************
 * End of 'CMIC_BS1_OUTPUT_TIME_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_OUTPUT_TIME_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_OUTPUT_TIME_1r_OFFSET 0x00010818

#define CMIC_BS1_OUTPUT_TIME_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_OUTPUT_TIME_1.
 */
typedef union CMIC_BS1_OUTPUT_TIME_1r_s {
	uint32_t v[1];
	uint32_t cmic_bs1_output_time_1[1];
	uint32_t _cmic_bs1_output_time_1;
} CMIC_BS1_OUTPUT_TIME_1r_t;

#define CMIC_BS1_OUTPUT_TIME_1r_CLR(r) (r).cmic_bs1_output_time_1[0] = 0
#define CMIC_BS1_OUTPUT_TIME_1r_SET(r,d) (r).cmic_bs1_output_time_1[0] = d
#define CMIC_BS1_OUTPUT_TIME_1r_GET(r) (r).cmic_bs1_output_time_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_OUTPUT_TIME_1r_SECOND_TIMEf_GET(r) ((r).cmic_bs1_output_time_1[0])
#define CMIC_BS1_OUTPUT_TIME_1r_SECOND_TIMEf_SET(r,f) (r).cmic_bs1_output_time_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_BS1_OUTPUT_TIME_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_BS1_OUTPUT_TIME_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_BS1_OUTPUT_TIME_2r_OFFSET 0x0001081c

#define CMIC_BS1_OUTPUT_TIME_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_BS1_OUTPUT_TIME_2.
 */
typedef union CMIC_BS1_OUTPUT_TIME_2r_s {
	uint32_t v[1];
	uint32_t cmic_bs1_output_time_2[1];
	uint32_t _cmic_bs1_output_time_2;
} CMIC_BS1_OUTPUT_TIME_2r_t;

#define CMIC_BS1_OUTPUT_TIME_2r_CLR(r) (r).cmic_bs1_output_time_2[0] = 0
#define CMIC_BS1_OUTPUT_TIME_2r_SET(r,d) (r).cmic_bs1_output_time_2[0] = d
#define CMIC_BS1_OUTPUT_TIME_2r_GET(r) (r).cmic_bs1_output_time_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_BS1_OUTPUT_TIME_2r_NS_TIMEf_GET(r) (((r).cmic_bs1_output_time_2[0]) & 0x3fffffff)
#define CMIC_BS1_OUTPUT_TIME_2r_NS_TIMEf_SET(r,f) (r).cmic_bs1_output_time_2[0]=(((r).cmic_bs1_output_time_2[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*******************************************************************************
 * End of 'CMIC_BS1_OUTPUT_TIME_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_2BIT_ECC_ERROR_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_OFFSET 0x00031454

#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_2BIT_ECC_ERROR_STATUS.
 */
typedef union CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_2bit_ecc_error_status[1];
	uint32_t _cmic_cmc0_2bit_ecc_error_status;
} CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_t;

#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_CLR(r) (r).cmic_cmc0_2bit_ecc_error_status[0] = 0
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_SET(r,d) (r).cmic_cmc0_2bit_ecc_error_status[0] = d
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_GET(r) (r).cmic_cmc0_2bit_ecc_error_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH0_2BIT_ECCERRf_GET(r) (((r).cmic_cmc0_2bit_ecc_error_status[0]) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status[0]=(((r).cmic_cmc0_2bit_ecc_error_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status[0]) >> 1) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status[0]=(((r).cmic_cmc0_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status[0]) >> 2) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status[0]=(((r).cmic_cmc0_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH0_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status[0]) >> 3) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status[0]=(((r).cmic_cmc0_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status[0]) >> 4) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status[0]=(((r).cmic_cmc0_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status[0]) >> 5) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status[0]=(((r).cmic_cmc0_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH3_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status[0]) >> 6) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH3_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status[0]=(((r).cmic_cmc0_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_CCMDMA_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status[0]) >> 7) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUSr_CCMDMA_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status[0]=(((r).cmic_cmc0_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*******************************************************************************
 * End of 'CMIC_CMC0_2BIT_ECC_ERROR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASK
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_OFFSET 0x00031458

#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASK.
 */
typedef union CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_2bit_ecc_error_status_mask[1];
	uint32_t _cmic_cmc0_2bit_ecc_error_status_mask;
} CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_t;

#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_CLR(r) (r).cmic_cmc0_2bit_ecc_error_status_mask[0] = 0
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_SET(r,d) (r).cmic_cmc0_2bit_ecc_error_status_mask[0] = d
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_GET(r) (r).cmic_cmc0_2bit_ecc_error_status_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH0_2BIT_ECCERRf_GET(r) (((r).cmic_cmc0_2bit_ecc_error_status_mask[0]) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc0_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status_mask[0]) >> 1) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc0_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status_mask[0]) >> 2) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc0_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH0_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status_mask[0]) >> 3) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc0_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status_mask[0]) >> 4) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc0_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status_mask[0]) >> 5) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc0_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH3_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status_mask[0]) >> 6) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH3_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc0_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_CCMDMA_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc0_2bit_ecc_error_status_mask[0]) >> 7) & 0x1)
#define CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr_CCMDMA_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc0_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc0_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*******************************************************************************
 * End of 'CMIC_CMC0_2BIT_ECC_ERROR_STATUS_MASKr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_AXIIC_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_AXIIC_TM_CONTROL_0r_OFFSET 0x00031850

#define CMIC_CMC0_AXIIC_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_AXIIC_TM_CONTROL_0.
 */
typedef union CMIC_CMC0_AXIIC_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_axiic_tm_control_0[1];
	uint32_t _cmic_cmc0_axiic_tm_control_0;
} CMIC_CMC0_AXIIC_TM_CONTROL_0r_t;

#define CMIC_CMC0_AXIIC_TM_CONTROL_0r_CLR(r) (r).cmic_cmc0_axiic_tm_control_0[0] = 0
#define CMIC_CMC0_AXIIC_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc0_axiic_tm_control_0[0] = d
#define CMIC_CMC0_AXIIC_TM_CONTROL_0r_GET(r) (r).cmic_cmc0_axiic_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_TMf_GET(r) (((r).cmic_cmc0_axiic_tm_control_0[0]) & 0xfff)
#define CMIC_CMC0_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_TMf_SET(r,f) (r).cmic_cmc0_axiic_tm_control_0[0]=(((r).cmic_cmc0_axiic_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_LVMf_GET(r) ((((r).cmic_cmc0_axiic_tm_control_0[0]) >> 12) & 0x1)
#define CMIC_CMC0_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_LVMf_SET(r,f) (r).cmic_cmc0_axiic_tm_control_0[0]=(((r).cmic_cmc0_axiic_tm_control_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC0_AXIIC_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_AXIIC_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_OFFSET 0x00031854

#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_AXIIC_TM_CONTROL_1.
 */
typedef union CMIC_CMC0_AXIIC_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_axiic_tm_control_1[1];
	uint32_t _cmic_cmc0_axiic_tm_control_1;
} CMIC_CMC0_AXIIC_TM_CONTROL_1r_t;

#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_CLR(r) (r).cmic_cmc0_axiic_tm_control_1[0] = 0
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc0_axiic_tm_control_1[0] = d
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_GET(r) (r).cmic_cmc0_axiic_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_00f_GET(r) (((r).cmic_cmc0_axiic_tm_control_1[0]) & 0xfff)
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_00f_SET(r,f) (r).cmic_cmc0_axiic_tm_control_1[0]=(((r).cmic_cmc0_axiic_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_00f_GET(r) ((((r).cmic_cmc0_axiic_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_00f_SET(r,f) (r).cmic_cmc0_axiic_tm_control_1[0]=(((r).cmic_cmc0_axiic_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_01f_GET(r) ((((r).cmic_cmc0_axiic_tm_control_1[0]) >> 13) & 0xfff)
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_01f_SET(r,f) (r).cmic_cmc0_axiic_tm_control_1[0]=(((r).cmic_cmc0_axiic_tm_control_1[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_01f_GET(r) ((((r).cmic_cmc0_axiic_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC0_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_01f_SET(r,f) (r).cmic_cmc0_axiic_tm_control_1[0]=(((r).cmic_cmc0_axiic_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_AXIIC_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_AXIIC_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_OFFSET 0x00031858

#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_AXIIC_TM_CONTROL_2.
 */
typedef union CMIC_CMC0_AXIIC_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_axiic_tm_control_2[1];
	uint32_t _cmic_cmc0_axiic_tm_control_2;
} CMIC_CMC0_AXIIC_TM_CONTROL_2r_t;

#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_CLR(r) (r).cmic_cmc0_axiic_tm_control_2[0] = 0
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc0_axiic_tm_control_2[0] = d
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_GET(r) (r).cmic_cmc0_axiic_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_00f_GET(r) (((r).cmic_cmc0_axiic_tm_control_2[0]) & 0xfff)
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_00f_SET(r,f) (r).cmic_cmc0_axiic_tm_control_2[0]=(((r).cmic_cmc0_axiic_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_00f_GET(r) ((((r).cmic_cmc0_axiic_tm_control_2[0]) >> 12) & 0x1)
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_00f_SET(r,f) (r).cmic_cmc0_axiic_tm_control_2[0]=(((r).cmic_cmc0_axiic_tm_control_2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_01f_GET(r) ((((r).cmic_cmc0_axiic_tm_control_2[0]) >> 13) & 0xfff)
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_01f_SET(r,f) (r).cmic_cmc0_axiic_tm_control_2[0]=(((r).cmic_cmc0_axiic_tm_control_2[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_01f_GET(r) ((((r).cmic_cmc0_axiic_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC0_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_01f_SET(r,f) (r).cmic_cmc0_axiic_tm_control_2[0]=(((r).cmic_cmc0_axiic_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_AXIIC_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCMDMA_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_OFFSET 0x00031848

#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCMDMA_TM_CONTROL_0.
 */
typedef union CMIC_CMC0_CCMDMA_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccmdma_tm_control_0[1];
	uint32_t _cmic_cmc0_ccmdma_tm_control_0;
} CMIC_CMC0_CCMDMA_TM_CONTROL_0r_t;

#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_CLR(r) (r).cmic_cmc0_ccmdma_tm_control_0[0] = 0
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc0_ccmdma_tm_control_0[0] = d
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_GET(r) (r).cmic_cmc0_ccmdma_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_BUFF_TM0f_GET(r) (((r).cmic_cmc0_ccmdma_tm_control_0[0]) & 0xfff)
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_BUFF_TM0f_SET(r,f) (r).cmic_cmc0_ccmdma_tm_control_0[0]=(((r).cmic_cmc0_ccmdma_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_BUFF_TM1f_GET(r) ((((r).cmic_cmc0_ccmdma_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_BUFF_TM1f_SET(r,f) (r).cmic_cmc0_ccmdma_tm_control_0[0]=(((r).cmic_cmc0_ccmdma_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_BUFF_LVM0f_GET(r) ((((r).cmic_cmc0_ccmdma_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_BUFF_LVM0f_SET(r,f) (r).cmic_cmc0_ccmdma_tm_control_0[0]=(((r).cmic_cmc0_ccmdma_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_BUFF_LVM1f_GET(r) ((((r).cmic_cmc0_ccmdma_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC0_CCMDMA_TM_CONTROL_0r_BUFF_LVM1f_SET(r,f) (r).cmic_cmc0_ccmdma_tm_control_0[0]=(((r).cmic_cmc0_ccmdma_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_CCMDMA_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCMDMA_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCMDMA_TM_CONTROL_1r_OFFSET 0x0003184c

#define CMIC_CMC0_CCMDMA_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCMDMA_TM_CONTROL_1.
 */
typedef union CMIC_CMC0_CCMDMA_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccmdma_tm_control_1[1];
	uint32_t _cmic_cmc0_ccmdma_tm_control_1;
} CMIC_CMC0_CCMDMA_TM_CONTROL_1r_t;

#define CMIC_CMC0_CCMDMA_TM_CONTROL_1r_CLR(r) (r).cmic_cmc0_ccmdma_tm_control_1[0] = 0
#define CMIC_CMC0_CCMDMA_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc0_ccmdma_tm_control_1[0] = d
#define CMIC_CMC0_CCMDMA_TM_CONTROL_1r_GET(r) (r).cmic_cmc0_ccmdma_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCMDMA_TM_CONTROL_1r_ECCBUFF_TM0f_GET(r) (((r).cmic_cmc0_ccmdma_tm_control_1[0]) & 0xfff)
#define CMIC_CMC0_CCMDMA_TM_CONTROL_1r_ECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_ccmdma_tm_control_1[0]=(((r).cmic_cmc0_ccmdma_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_CCMDMA_TM_CONTROL_1r_ECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_ccmdma_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC0_CCMDMA_TM_CONTROL_1r_ECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_ccmdma_tm_control_1[0]=(((r).cmic_cmc0_ccmdma_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC0_CCMDMA_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_CFGr_OFFSET 0x000313ac

#define CMIC_CMC0_CCM_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_CFG.
 */
typedef union CMIC_CMC0_CCM_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_cfg[1];
	uint32_t _cmic_cmc0_ccm_dma_cfg;
} CMIC_CMC0_CCM_DMA_CFGr_t;

#define CMIC_CMC0_CCM_DMA_CFGr_CLR(r) (r).cmic_cmc0_ccm_dma_cfg[0] = 0
#define CMIC_CMC0_CCM_DMA_CFGr_SET(r,d) (r).cmic_cmc0_ccm_dma_cfg[0] = d
#define CMIC_CMC0_CCM_DMA_CFGr_GET(r) (r).cmic_cmc0_ccm_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_CFGr_ENf_GET(r) (((r).cmic_cmc0_ccm_dma_cfg[0]) & 0x1)
#define CMIC_CMC0_CCM_DMA_CFGr_ENf_SET(r,f) (r).cmic_cmc0_ccm_dma_cfg[0]=(((r).cmic_cmc0_ccm_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_CCM_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc0_ccm_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC0_CCM_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc0_ccm_dma_cfg[0]=(((r).cmic_cmc0_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_CCM_DMA_CFGr_PROCESSOR0_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ccm_dma_cfg[0]) >> 2) & 0x1)
#define CMIC_CMC0_CCM_DMA_CFGr_PROCESSOR0_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ccm_dma_cfg[0]=(((r).cmic_cmc0_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_CCM_DMA_CFGr_PROCESSOR1_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ccm_dma_cfg[0]) >> 3) & 0x1)
#define CMIC_CMC0_CCM_DMA_CFGr_PROCESSOR1_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ccm_dma_cfg[0]=(((r).cmic_cmc0_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr_OFFSET 0x000313b4

#define CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDR.
 */
typedef union CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_cur_host0_addr[1];
	uint32_t _cmic_cmc0_ccm_dma_cur_host0_addr;
} CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr_t;

#define CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr_CLR(r) (r).cmic_cmc0_ccm_dma_cur_host0_addr[0] = 0
#define CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr_SET(r,d) (r).cmic_cmc0_ccm_dma_cur_host0_addr[0] = d
#define CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr_GET(r) (r).cmic_cmc0_ccm_dma_cur_host0_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr_ADDRf_GET(r) ((r).cmic_cmc0_ccm_dma_cur_host0_addr[0])
#define CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc0_ccm_dma_cur_host0_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_CUR_HOST0_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr_OFFSET 0x000313b8

#define CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDR.
 */
typedef union CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_cur_host1_addr[1];
	uint32_t _cmic_cmc0_ccm_dma_cur_host1_addr;
} CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr_t;

#define CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr_CLR(r) (r).cmic_cmc0_ccm_dma_cur_host1_addr[0] = 0
#define CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr_SET(r,d) (r).cmic_cmc0_ccm_dma_cur_host1_addr[0] = d
#define CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr_GET(r) (r).cmic_cmc0_ccm_dma_cur_host1_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr_ADDRf_GET(r) ((r).cmic_cmc0_ccm_dma_cur_host1_addr[0])
#define CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc0_ccm_dma_cur_host1_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_CUR_HOST1_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_ECCERR_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_ECCERR_ADDRr_OFFSET 0x000313bc

#define CMIC_CMC0_CCM_DMA_ECCERR_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_ECCERR_ADDR.
 */
typedef union CMIC_CMC0_CCM_DMA_ECCERR_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_eccerr_addr[1];
	uint32_t _cmic_cmc0_ccm_dma_eccerr_addr;
} CMIC_CMC0_CCM_DMA_ECCERR_ADDRr_t;

#define CMIC_CMC0_CCM_DMA_ECCERR_ADDRr_CLR(r) (r).cmic_cmc0_ccm_dma_eccerr_addr[0] = 0
#define CMIC_CMC0_CCM_DMA_ECCERR_ADDRr_SET(r,d) (r).cmic_cmc0_ccm_dma_eccerr_addr[0] = d
#define CMIC_CMC0_CCM_DMA_ECCERR_ADDRr_GET(r) (r).cmic_cmc0_ccm_dma_eccerr_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_ECCERR_ADDRr_ADDRf_GET(r) ((r).cmic_cmc0_ccm_dma_eccerr_addr[0])
#define CMIC_CMC0_CCM_DMA_ECCERR_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc0_ccm_dma_eccerr_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_ECCERR_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_OFFSET 0x000313c4

#define CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_eccerr_control[1];
	uint32_t _cmic_cmc0_ccm_dma_eccerr_control;
} CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc0_ccm_dma_eccerr_control[0] = 0
#define CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc0_ccm_dma_eccerr_control[0] = d
#define CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc0_ccm_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc0_ccm_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_ccm_dma_eccerr_control[0]=(((r).cmic_cmc0_ccm_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc0_ccm_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_ccm_dma_eccerr_control[0]=(((r).cmic_cmc0_ccm_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_ENTRY_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_ENTRY_COUNTr_OFFSET 0x000313a8

#define CMIC_CMC0_CCM_DMA_ENTRY_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_ENTRY_COUNT.
 */
typedef union CMIC_CMC0_CCM_DMA_ENTRY_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_entry_count[1];
	uint32_t _cmic_cmc0_ccm_dma_entry_count;
} CMIC_CMC0_CCM_DMA_ENTRY_COUNTr_t;

#define CMIC_CMC0_CCM_DMA_ENTRY_COUNTr_CLR(r) (r).cmic_cmc0_ccm_dma_entry_count[0] = 0
#define CMIC_CMC0_CCM_DMA_ENTRY_COUNTr_SET(r,d) (r).cmic_cmc0_ccm_dma_entry_count[0] = d
#define CMIC_CMC0_CCM_DMA_ENTRY_COUNTr_GET(r) (r).cmic_cmc0_ccm_dma_entry_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_ENTRY_COUNTr_COUNTf_GET(r) (((r).cmic_cmc0_ccm_dma_entry_count[0]) & 0x3fffffff)
#define CMIC_CMC0_CCM_DMA_ENTRY_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc0_ccm_dma_entry_count[0]=(((r).cmic_cmc0_ccm_dma_entry_count[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_ENTRY_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr_OFFSET 0x000313a0

#define CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDR.
 */
typedef union CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_host0_mem_start_addr[1];
	uint32_t _cmic_cmc0_ccm_dma_host0_mem_start_addr;
} CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr_t;

#define CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr_CLR(r) (r).cmic_cmc0_ccm_dma_host0_mem_start_addr[0] = 0
#define CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr_SET(r,d) (r).cmic_cmc0_ccm_dma_host0_mem_start_addr[0] = d
#define CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr_GET(r) (r).cmic_cmc0_ccm_dma_host0_mem_start_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr_ADDRf_GET(r) ((r).cmic_cmc0_ccm_dma_host0_mem_start_addr[0])
#define CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc0_ccm_dma_host0_mem_start_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_HOST0_MEM_START_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr_OFFSET 0x000313a4

#define CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDR.
 */
typedef union CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_host1_mem_start_addr[1];
	uint32_t _cmic_cmc0_ccm_dma_host1_mem_start_addr;
} CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr_t;

#define CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr_CLR(r) (r).cmic_cmc0_ccm_dma_host1_mem_start_addr[0] = 0
#define CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr_SET(r,d) (r).cmic_cmc0_ccm_dma_host1_mem_start_addr[0] = d
#define CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr_GET(r) (r).cmic_cmc0_ccm_dma_host1_mem_start_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr_ADDRf_GET(r) ((r).cmic_cmc0_ccm_dma_host1_mem_start_addr[0])
#define CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc0_ccm_dma_host1_mem_start_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_HOST1_MEM_START_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_STATr_OFFSET 0x000313b0

#define CMIC_CMC0_CCM_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_STAT.
 */
typedef union CMIC_CMC0_CCM_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_stat[1];
	uint32_t _cmic_cmc0_ccm_dma_stat;
} CMIC_CMC0_CCM_DMA_STATr_t;

#define CMIC_CMC0_CCM_DMA_STATr_CLR(r) (r).cmic_cmc0_ccm_dma_stat[0] = 0
#define CMIC_CMC0_CCM_DMA_STATr_SET(r,d) (r).cmic_cmc0_ccm_dma_stat[0] = d
#define CMIC_CMC0_CCM_DMA_STATr_GET(r) (r).cmic_cmc0_ccm_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_STATr_DONEf_GET(r) (((r).cmic_cmc0_ccm_dma_stat[0]) & 0x1)
#define CMIC_CMC0_CCM_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc0_ccm_dma_stat[0]=(((r).cmic_cmc0_ccm_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_CCM_DMA_STATr_ERRORf_GET(r) ((((r).cmic_cmc0_ccm_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC0_CCM_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc0_ccm_dma_stat[0]=(((r).cmic_cmc0_ccm_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_CCM_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_ccm_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC0_CCM_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_ccm_dma_stat[0]=(((r).cmic_cmc0_ccm_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CCM_DMA_STATUS_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CCM_DMA_STATUS_CLRr_OFFSET 0x000313c0

#define CMIC_CMC0_CCM_DMA_STATUS_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CCM_DMA_STATUS_CLR.
 */
typedef union CMIC_CMC0_CCM_DMA_STATUS_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ccm_dma_status_clr[1];
	uint32_t _cmic_cmc0_ccm_dma_status_clr;
} CMIC_CMC0_CCM_DMA_STATUS_CLRr_t;

#define CMIC_CMC0_CCM_DMA_STATUS_CLRr_CLR(r) (r).cmic_cmc0_ccm_dma_status_clr[0] = 0
#define CMIC_CMC0_CCM_DMA_STATUS_CLRr_SET(r,d) (r).cmic_cmc0_ccm_dma_status_clr[0] = d
#define CMIC_CMC0_CCM_DMA_STATUS_CLRr_GET(r) (r).cmic_cmc0_ccm_dma_status_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CCM_DMA_STATUS_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) (((r).cmic_cmc0_ccm_dma_status_clr[0]) & 0x1)
#define CMIC_CMC0_CCM_DMA_STATUS_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_ccm_dma_status_clr[0]=(((r).cmic_cmc0_ccm_dma_status_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC0_CCM_DMA_STATUS_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH0_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH0_COS_CTRL_RX_0r_OFFSET 0x00031168

#define CMIC_CMC0_CH0_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH0_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC0_CH0_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch0_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc0_ch0_cos_ctrl_rx_0;
} CMIC_CMC0_CH0_COS_CTRL_RX_0r_t;

#define CMIC_CMC0_CH0_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc0_ch0_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC0_CH0_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc0_ch0_cos_ctrl_rx_0[0] = d
#define CMIC_CMC0_CH0_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc0_ch0_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH0_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc0_ch0_cos_ctrl_rx_0[0])
#define CMIC_CMC0_CH0_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc0_ch0_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH0_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH0_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH0_COS_CTRL_RX_1r_OFFSET 0x0003116c

#define CMIC_CMC0_CH0_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH0_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC0_CH0_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch0_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc0_ch0_cos_ctrl_rx_1;
} CMIC_CMC0_CH0_COS_CTRL_RX_1r_t;

#define CMIC_CMC0_CH0_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc0_ch0_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC0_CH0_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc0_ch0_cos_ctrl_rx_1[0] = d
#define CMIC_CMC0_CH0_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc0_ch0_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH0_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc0_ch0_cos_ctrl_rx_1[0])
#define CMIC_CMC0_CH0_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc0_ch0_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH0_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH0_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH0_DMA_CTRLr_OFFSET 0x00031140

#define CMIC_CMC0_CH0_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH0_DMA_CTRL.
 */
typedef union CMIC_CMC0_CH0_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch0_dma_ctrl[1];
	uint32_t _cmic_cmc0_ch0_dma_ctrl;
} CMIC_CMC0_CH0_DMA_CTRLr_t;

#define CMIC_CMC0_CH0_DMA_CTRLr_CLR(r) (r).cmic_cmc0_ch0_dma_ctrl[0] = 0
#define CMIC_CMC0_CH0_DMA_CTRLr_SET(r,d) (r).cmic_cmc0_ch0_dma_ctrl[0] = d
#define CMIC_CMC0_CH0_DMA_CTRLr_GET(r) (r).cmic_cmc0_ch0_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH0_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc0_ch0_dma_ctrl[0]) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_CH0_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc0_ch0_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_CH0_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc0_ch0_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_CH0_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc0_ch0_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_CH0_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ch0_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_CH0_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ch0_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_CH0_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc0_ch0_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_CH0_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc0_ch0_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_CH0_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc0_ch0_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_CH0_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc0_ch0_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC0_CH0_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc0_ch0_dma_ctrl[0]=(((r).cmic_cmc0_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC0_CH0_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH0_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH0_DMA_CURR_DESCr_OFFSET 0x000311a8

#define CMIC_CMC0_CH0_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH0_DMA_CURR_DESC.
 */
typedef union CMIC_CMC0_CH0_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch0_dma_curr_desc[1];
	uint32_t _cmic_cmc0_ch0_dma_curr_desc;
} CMIC_CMC0_CH0_DMA_CURR_DESCr_t;

#define CMIC_CMC0_CH0_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc0_ch0_dma_curr_desc[0] = 0
#define CMIC_CMC0_CH0_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc0_ch0_dma_curr_desc[0] = d
#define CMIC_CMC0_CH0_DMA_CURR_DESCr_GET(r) (r).cmic_cmc0_ch0_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH0_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc0_ch0_dma_curr_desc[0])
#define CMIC_CMC0_CH0_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc0_ch0_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH0_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00031110

#define CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch0_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc0_ch0_rxbuf_threshold_config;
} CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc0_ch0_rxbuf_threshold_config[0] = 0
#define CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc0_ch0_rxbuf_threshold_config[0] = d
#define CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc0_ch0_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc0_ch0_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc0_ch0_rxbuf_threshold_config[0]=(((r).cmic_cmc0_ch0_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc0_ch0_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc0_ch0_rxbuf_threshold_config[0]=(((r).cmic_cmc0_ch0_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC0_CH0_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH1_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH1_COS_CTRL_RX_0r_OFFSET 0x00031170

#define CMIC_CMC0_CH1_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH1_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC0_CH1_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch1_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc0_ch1_cos_ctrl_rx_0;
} CMIC_CMC0_CH1_COS_CTRL_RX_0r_t;

#define CMIC_CMC0_CH1_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc0_ch1_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC0_CH1_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc0_ch1_cos_ctrl_rx_0[0] = d
#define CMIC_CMC0_CH1_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc0_ch1_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH1_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc0_ch1_cos_ctrl_rx_0[0])
#define CMIC_CMC0_CH1_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc0_ch1_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH1_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH1_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH1_COS_CTRL_RX_1r_OFFSET 0x00031174

#define CMIC_CMC0_CH1_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH1_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC0_CH1_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch1_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc0_ch1_cos_ctrl_rx_1;
} CMIC_CMC0_CH1_COS_CTRL_RX_1r_t;

#define CMIC_CMC0_CH1_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc0_ch1_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC0_CH1_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc0_ch1_cos_ctrl_rx_1[0] = d
#define CMIC_CMC0_CH1_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc0_ch1_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH1_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc0_ch1_cos_ctrl_rx_1[0])
#define CMIC_CMC0_CH1_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc0_ch1_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH1_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH1_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH1_DMA_CTRLr_OFFSET 0x00031144

#define CMIC_CMC0_CH1_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH1_DMA_CTRL.
 */
typedef union CMIC_CMC0_CH1_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch1_dma_ctrl[1];
	uint32_t _cmic_cmc0_ch1_dma_ctrl;
} CMIC_CMC0_CH1_DMA_CTRLr_t;

#define CMIC_CMC0_CH1_DMA_CTRLr_CLR(r) (r).cmic_cmc0_ch1_dma_ctrl[0] = 0
#define CMIC_CMC0_CH1_DMA_CTRLr_SET(r,d) (r).cmic_cmc0_ch1_dma_ctrl[0] = d
#define CMIC_CMC0_CH1_DMA_CTRLr_GET(r) (r).cmic_cmc0_ch1_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH1_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc0_ch1_dma_ctrl[0]) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_CH1_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc0_ch1_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_CH1_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc0_ch1_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_CH1_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc0_ch1_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_CH1_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ch1_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_CH1_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ch1_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_CH1_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc0_ch1_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_CH1_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc0_ch1_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_CH1_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc0_ch1_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_CH1_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc0_ch1_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC0_CH1_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc0_ch1_dma_ctrl[0]=(((r).cmic_cmc0_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC0_CH1_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH1_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH1_DMA_CURR_DESCr_OFFSET 0x000311ac

#define CMIC_CMC0_CH1_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH1_DMA_CURR_DESC.
 */
typedef union CMIC_CMC0_CH1_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch1_dma_curr_desc[1];
	uint32_t _cmic_cmc0_ch1_dma_curr_desc;
} CMIC_CMC0_CH1_DMA_CURR_DESCr_t;

#define CMIC_CMC0_CH1_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc0_ch1_dma_curr_desc[0] = 0
#define CMIC_CMC0_CH1_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc0_ch1_dma_curr_desc[0] = d
#define CMIC_CMC0_CH1_DMA_CURR_DESCr_GET(r) (r).cmic_cmc0_ch1_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH1_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc0_ch1_dma_curr_desc[0])
#define CMIC_CMC0_CH1_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc0_ch1_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH1_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00031114

#define CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch1_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc0_ch1_rxbuf_threshold_config;
} CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc0_ch1_rxbuf_threshold_config[0] = 0
#define CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc0_ch1_rxbuf_threshold_config[0] = d
#define CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc0_ch1_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc0_ch1_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc0_ch1_rxbuf_threshold_config[0]=(((r).cmic_cmc0_ch1_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc0_ch1_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc0_ch1_rxbuf_threshold_config[0]=(((r).cmic_cmc0_ch1_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC0_CH1_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH2_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH2_COS_CTRL_RX_0r_OFFSET 0x00031178

#define CMIC_CMC0_CH2_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH2_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC0_CH2_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch2_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc0_ch2_cos_ctrl_rx_0;
} CMIC_CMC0_CH2_COS_CTRL_RX_0r_t;

#define CMIC_CMC0_CH2_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc0_ch2_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC0_CH2_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc0_ch2_cos_ctrl_rx_0[0] = d
#define CMIC_CMC0_CH2_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc0_ch2_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH2_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc0_ch2_cos_ctrl_rx_0[0])
#define CMIC_CMC0_CH2_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc0_ch2_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH2_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH2_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH2_COS_CTRL_RX_1r_OFFSET 0x0003117c

#define CMIC_CMC0_CH2_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH2_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC0_CH2_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch2_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc0_ch2_cos_ctrl_rx_1;
} CMIC_CMC0_CH2_COS_CTRL_RX_1r_t;

#define CMIC_CMC0_CH2_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc0_ch2_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC0_CH2_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc0_ch2_cos_ctrl_rx_1[0] = d
#define CMIC_CMC0_CH2_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc0_ch2_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH2_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc0_ch2_cos_ctrl_rx_1[0])
#define CMIC_CMC0_CH2_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc0_ch2_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH2_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH2_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH2_DMA_CTRLr_OFFSET 0x00031148

#define CMIC_CMC0_CH2_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH2_DMA_CTRL.
 */
typedef union CMIC_CMC0_CH2_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch2_dma_ctrl[1];
	uint32_t _cmic_cmc0_ch2_dma_ctrl;
} CMIC_CMC0_CH2_DMA_CTRLr_t;

#define CMIC_CMC0_CH2_DMA_CTRLr_CLR(r) (r).cmic_cmc0_ch2_dma_ctrl[0] = 0
#define CMIC_CMC0_CH2_DMA_CTRLr_SET(r,d) (r).cmic_cmc0_ch2_dma_ctrl[0] = d
#define CMIC_CMC0_CH2_DMA_CTRLr_GET(r) (r).cmic_cmc0_ch2_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH2_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc0_ch2_dma_ctrl[0]) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_CH2_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc0_ch2_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_CH2_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc0_ch2_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_CH2_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc0_ch2_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_CH2_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ch2_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_CH2_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ch2_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_CH2_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc0_ch2_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_CH2_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc0_ch2_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_CH2_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc0_ch2_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_CH2_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc0_ch2_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC0_CH2_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc0_ch2_dma_ctrl[0]=(((r).cmic_cmc0_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC0_CH2_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH2_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH2_DMA_CURR_DESCr_OFFSET 0x000311b0

#define CMIC_CMC0_CH2_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH2_DMA_CURR_DESC.
 */
typedef union CMIC_CMC0_CH2_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch2_dma_curr_desc[1];
	uint32_t _cmic_cmc0_ch2_dma_curr_desc;
} CMIC_CMC0_CH2_DMA_CURR_DESCr_t;

#define CMIC_CMC0_CH2_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc0_ch2_dma_curr_desc[0] = 0
#define CMIC_CMC0_CH2_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc0_ch2_dma_curr_desc[0] = d
#define CMIC_CMC0_CH2_DMA_CURR_DESCr_GET(r) (r).cmic_cmc0_ch2_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH2_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc0_ch2_dma_curr_desc[0])
#define CMIC_CMC0_CH2_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc0_ch2_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH2_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00031118

#define CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch2_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc0_ch2_rxbuf_threshold_config;
} CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc0_ch2_rxbuf_threshold_config[0] = 0
#define CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc0_ch2_rxbuf_threshold_config[0] = d
#define CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc0_ch2_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc0_ch2_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc0_ch2_rxbuf_threshold_config[0]=(((r).cmic_cmc0_ch2_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc0_ch2_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc0_ch2_rxbuf_threshold_config[0]=(((r).cmic_cmc0_ch2_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC0_CH2_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH3_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH3_COS_CTRL_RX_0r_OFFSET 0x00031180

#define CMIC_CMC0_CH3_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH3_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC0_CH3_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch3_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc0_ch3_cos_ctrl_rx_0;
} CMIC_CMC0_CH3_COS_CTRL_RX_0r_t;

#define CMIC_CMC0_CH3_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc0_ch3_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC0_CH3_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc0_ch3_cos_ctrl_rx_0[0] = d
#define CMIC_CMC0_CH3_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc0_ch3_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH3_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc0_ch3_cos_ctrl_rx_0[0])
#define CMIC_CMC0_CH3_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc0_ch3_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH3_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH3_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH3_COS_CTRL_RX_1r_OFFSET 0x00031184

#define CMIC_CMC0_CH3_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH3_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC0_CH3_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch3_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc0_ch3_cos_ctrl_rx_1;
} CMIC_CMC0_CH3_COS_CTRL_RX_1r_t;

#define CMIC_CMC0_CH3_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc0_ch3_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC0_CH3_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc0_ch3_cos_ctrl_rx_1[0] = d
#define CMIC_CMC0_CH3_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc0_ch3_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH3_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc0_ch3_cos_ctrl_rx_1[0])
#define CMIC_CMC0_CH3_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc0_ch3_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH3_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH3_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH3_DMA_CTRLr_OFFSET 0x0003114c

#define CMIC_CMC0_CH3_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH3_DMA_CTRL.
 */
typedef union CMIC_CMC0_CH3_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch3_dma_ctrl[1];
	uint32_t _cmic_cmc0_ch3_dma_ctrl;
} CMIC_CMC0_CH3_DMA_CTRLr_t;

#define CMIC_CMC0_CH3_DMA_CTRLr_CLR(r) (r).cmic_cmc0_ch3_dma_ctrl[0] = 0
#define CMIC_CMC0_CH3_DMA_CTRLr_SET(r,d) (r).cmic_cmc0_ch3_dma_ctrl[0] = d
#define CMIC_CMC0_CH3_DMA_CTRLr_GET(r) (r).cmic_cmc0_ch3_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH3_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc0_ch3_dma_ctrl[0]) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_CH3_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc0_ch3_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_CH3_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc0_ch3_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_CH3_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc0_ch3_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_CH3_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ch3_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_CH3_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc0_ch3_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_CH3_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc0_ch3_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_CH3_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc0_ch3_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_CH3_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc0_ch3_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_CH3_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc0_ch3_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC0_CH3_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc0_ch3_dma_ctrl[0]=(((r).cmic_cmc0_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC0_CH3_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH3_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH3_DMA_CURR_DESCr_OFFSET 0x000311b4

#define CMIC_CMC0_CH3_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH3_DMA_CURR_DESC.
 */
typedef union CMIC_CMC0_CH3_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch3_dma_curr_desc[1];
	uint32_t _cmic_cmc0_ch3_dma_curr_desc;
} CMIC_CMC0_CH3_DMA_CURR_DESCr_t;

#define CMIC_CMC0_CH3_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc0_ch3_dma_curr_desc[0] = 0
#define CMIC_CMC0_CH3_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc0_ch3_dma_curr_desc[0] = d
#define CMIC_CMC0_CH3_DMA_CURR_DESCr_GET(r) (r).cmic_cmc0_ch3_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH3_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc0_ch3_dma_curr_desc[0])
#define CMIC_CMC0_CH3_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc0_ch3_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_CH3_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x0003111c

#define CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_ch3_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc0_ch3_rxbuf_threshold_config;
} CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc0_ch3_rxbuf_threshold_config[0] = 0
#define CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc0_ch3_rxbuf_threshold_config[0] = d
#define CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc0_ch3_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc0_ch3_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc0_ch3_rxbuf_threshold_config[0]=(((r).cmic_cmc0_ch3_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc0_ch3_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc0_ch3_rxbuf_threshold_config[0]=(((r).cmic_cmc0_ch3_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC0_CH3_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_CONFIGr_OFFSET 0x00031108

#define CMIC_CMC0_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_CONFIG.
 */
typedef union CMIC_CMC0_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_config[1];
	uint32_t _cmic_cmc0_config;
} CMIC_CMC0_CONFIGr_t;

#define CMIC_CMC0_CONFIGr_CLR(r) (r).cmic_cmc0_config[0] = 0
#define CMIC_CMC0_CONFIGr_SET(r,d) (r).cmic_cmc0_config[0] = d
#define CMIC_CMC0_CONFIGr_GET(r) (r).cmic_cmc0_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_CONFIGr_ENABLE_SBUSDMA_CH0_FLOW_CONTROLf_GET(r) (((r).cmic_cmc0_config[0]) & 0x1)
#define CMIC_CMC0_CONFIGr_ENABLE_SBUSDMA_CH0_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc0_config[0]=(((r).cmic_cmc0_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_CONFIGr_ENABLE_SBUSDMA_CH1_FLOW_CONTROLf_GET(r) ((((r).cmic_cmc0_config[0]) >> 1) & 0x1)
#define CMIC_CMC0_CONFIGr_ENABLE_SBUSDMA_CH1_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc0_config[0]=(((r).cmic_cmc0_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_CONFIGr_ENABLE_SBUSDMA_CH2_FLOW_CONTROLf_GET(r) ((((r).cmic_cmc0_config[0]) >> 2) & 0x1)
#define CMIC_CMC0_CONFIGr_ENABLE_SBUSDMA_CH2_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc0_config[0]=(((r).cmic_cmc0_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_CONFIGr_ENABLE_EARLY_BRESPf_GET(r) ((((r).cmic_cmc0_config[0]) >> 3) & 0x1)
#define CMIC_CMC0_CONFIGr_ENABLE_EARLY_BRESPf_SET(r,f) (r).cmic_cmc0_config[0]=(((r).cmic_cmc0_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC0_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_CH0_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr_OFFSET 0x00031120

#define CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_CH0_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_ch0_desc_halt_addr[1];
	uint32_t _cmic_cmc0_dma_ch0_desc_halt_addr;
} CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr_t;

#define CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc0_dma_ch0_desc_halt_addr[0] = 0
#define CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc0_dma_ch0_desc_halt_addr[0] = d
#define CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc0_dma_ch0_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc0_dma_ch0_desc_halt_addr[0])
#define CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc0_dma_ch0_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_CH0_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_CH0_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_CH0_INTR_COALr_OFFSET 0x00031188

#define CMIC_CMC0_DMA_CH0_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_CH0_INTR_COAL.
 */
typedef union CMIC_CMC0_DMA_CH0_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_ch0_intr_coal[1];
	uint32_t _cmic_cmc0_dma_ch0_intr_coal;
} CMIC_CMC0_DMA_CH0_INTR_COALr_t;

#define CMIC_CMC0_DMA_CH0_INTR_COALr_CLR(r) (r).cmic_cmc0_dma_ch0_intr_coal[0] = 0
#define CMIC_CMC0_DMA_CH0_INTR_COALr_SET(r,d) (r).cmic_cmc0_dma_ch0_intr_coal[0] = d
#define CMIC_CMC0_DMA_CH0_INTR_COALr_GET(r) (r).cmic_cmc0_dma_ch0_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_CH0_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc0_dma_ch0_intr_coal[0]) & 0xffff)
#define CMIC_CMC0_DMA_CH0_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc0_dma_ch0_intr_coal[0]=(((r).cmic_cmc0_dma_ch0_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC0_DMA_CH0_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc0_dma_ch0_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC0_DMA_CH0_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc0_dma_ch0_intr_coal[0]=(((r).cmic_cmc0_dma_ch0_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC0_DMA_CH0_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc0_dma_ch0_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC0_DMA_CH0_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc0_dma_ch0_intr_coal[0]=(((r).cmic_cmc0_dma_ch0_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_CH0_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_CH1_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr_OFFSET 0x00031124

#define CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_CH1_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_ch1_desc_halt_addr[1];
	uint32_t _cmic_cmc0_dma_ch1_desc_halt_addr;
} CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr_t;

#define CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc0_dma_ch1_desc_halt_addr[0] = 0
#define CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc0_dma_ch1_desc_halt_addr[0] = d
#define CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc0_dma_ch1_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc0_dma_ch1_desc_halt_addr[0])
#define CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc0_dma_ch1_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_CH1_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_CH1_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_CH1_INTR_COALr_OFFSET 0x0003118c

#define CMIC_CMC0_DMA_CH1_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_CH1_INTR_COAL.
 */
typedef union CMIC_CMC0_DMA_CH1_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_ch1_intr_coal[1];
	uint32_t _cmic_cmc0_dma_ch1_intr_coal;
} CMIC_CMC0_DMA_CH1_INTR_COALr_t;

#define CMIC_CMC0_DMA_CH1_INTR_COALr_CLR(r) (r).cmic_cmc0_dma_ch1_intr_coal[0] = 0
#define CMIC_CMC0_DMA_CH1_INTR_COALr_SET(r,d) (r).cmic_cmc0_dma_ch1_intr_coal[0] = d
#define CMIC_CMC0_DMA_CH1_INTR_COALr_GET(r) (r).cmic_cmc0_dma_ch1_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_CH1_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc0_dma_ch1_intr_coal[0]) & 0xffff)
#define CMIC_CMC0_DMA_CH1_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc0_dma_ch1_intr_coal[0]=(((r).cmic_cmc0_dma_ch1_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC0_DMA_CH1_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc0_dma_ch1_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC0_DMA_CH1_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc0_dma_ch1_intr_coal[0]=(((r).cmic_cmc0_dma_ch1_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC0_DMA_CH1_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc0_dma_ch1_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC0_DMA_CH1_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc0_dma_ch1_intr_coal[0]=(((r).cmic_cmc0_dma_ch1_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_CH1_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_CH2_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr_OFFSET 0x00031128

#define CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_CH2_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_ch2_desc_halt_addr[1];
	uint32_t _cmic_cmc0_dma_ch2_desc_halt_addr;
} CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr_t;

#define CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc0_dma_ch2_desc_halt_addr[0] = 0
#define CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc0_dma_ch2_desc_halt_addr[0] = d
#define CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc0_dma_ch2_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc0_dma_ch2_desc_halt_addr[0])
#define CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc0_dma_ch2_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_CH2_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_CH2_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_CH2_INTR_COALr_OFFSET 0x00031190

#define CMIC_CMC0_DMA_CH2_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_CH2_INTR_COAL.
 */
typedef union CMIC_CMC0_DMA_CH2_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_ch2_intr_coal[1];
	uint32_t _cmic_cmc0_dma_ch2_intr_coal;
} CMIC_CMC0_DMA_CH2_INTR_COALr_t;

#define CMIC_CMC0_DMA_CH2_INTR_COALr_CLR(r) (r).cmic_cmc0_dma_ch2_intr_coal[0] = 0
#define CMIC_CMC0_DMA_CH2_INTR_COALr_SET(r,d) (r).cmic_cmc0_dma_ch2_intr_coal[0] = d
#define CMIC_CMC0_DMA_CH2_INTR_COALr_GET(r) (r).cmic_cmc0_dma_ch2_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_CH2_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc0_dma_ch2_intr_coal[0]) & 0xffff)
#define CMIC_CMC0_DMA_CH2_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc0_dma_ch2_intr_coal[0]=(((r).cmic_cmc0_dma_ch2_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC0_DMA_CH2_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc0_dma_ch2_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC0_DMA_CH2_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc0_dma_ch2_intr_coal[0]=(((r).cmic_cmc0_dma_ch2_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC0_DMA_CH2_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc0_dma_ch2_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC0_DMA_CH2_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc0_dma_ch2_intr_coal[0]=(((r).cmic_cmc0_dma_ch2_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_CH2_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_CH3_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr_OFFSET 0x0003112c

#define CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_CH3_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_ch3_desc_halt_addr[1];
	uint32_t _cmic_cmc0_dma_ch3_desc_halt_addr;
} CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr_t;

#define CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc0_dma_ch3_desc_halt_addr[0] = 0
#define CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc0_dma_ch3_desc_halt_addr[0] = d
#define CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc0_dma_ch3_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc0_dma_ch3_desc_halt_addr[0])
#define CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc0_dma_ch3_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_CH3_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_CH3_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_CH3_INTR_COALr_OFFSET 0x00031194

#define CMIC_CMC0_DMA_CH3_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_CH3_INTR_COAL.
 */
typedef union CMIC_CMC0_DMA_CH3_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_ch3_intr_coal[1];
	uint32_t _cmic_cmc0_dma_ch3_intr_coal;
} CMIC_CMC0_DMA_CH3_INTR_COALr_t;

#define CMIC_CMC0_DMA_CH3_INTR_COALr_CLR(r) (r).cmic_cmc0_dma_ch3_intr_coal[0] = 0
#define CMIC_CMC0_DMA_CH3_INTR_COALr_SET(r,d) (r).cmic_cmc0_dma_ch3_intr_coal[0] = d
#define CMIC_CMC0_DMA_CH3_INTR_COALr_GET(r) (r).cmic_cmc0_dma_ch3_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_CH3_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc0_dma_ch3_intr_coal[0]) & 0xffff)
#define CMIC_CMC0_DMA_CH3_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc0_dma_ch3_intr_coal[0]=(((r).cmic_cmc0_dma_ch3_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC0_DMA_CH3_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc0_dma_ch3_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC0_DMA_CH3_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc0_dma_ch3_intr_coal[0]=(((r).cmic_cmc0_dma_ch3_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC0_DMA_CH3_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc0_dma_ch3_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC0_DMA_CH3_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc0_dma_ch3_intr_coal[0]=(((r).cmic_cmc0_dma_ch3_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_CH3_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_DESC0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_DESC0r_OFFSET 0x00031158

#define CMIC_CMC0_DMA_DESC0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_DESC0.
 */
typedef union CMIC_CMC0_DMA_DESC0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_desc0[1];
	uint32_t _cmic_cmc0_dma_desc0;
} CMIC_CMC0_DMA_DESC0r_t;

#define CMIC_CMC0_DMA_DESC0r_CLR(r) (r).cmic_cmc0_dma_desc0[0] = 0
#define CMIC_CMC0_DMA_DESC0r_SET(r,d) (r).cmic_cmc0_dma_desc0[0] = d
#define CMIC_CMC0_DMA_DESC0r_GET(r) (r).cmic_cmc0_dma_desc0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_DESC0r_ADDRf_GET(r) ((r).cmic_cmc0_dma_desc0[0])
#define CMIC_CMC0_DMA_DESC0r_ADDRf_SET(r,f) (r).cmic_cmc0_dma_desc0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_DESC0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_DESC1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_DESC1r_OFFSET 0x0003115c

#define CMIC_CMC0_DMA_DESC1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_DESC1.
 */
typedef union CMIC_CMC0_DMA_DESC1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_desc1[1];
	uint32_t _cmic_cmc0_dma_desc1;
} CMIC_CMC0_DMA_DESC1r_t;

#define CMIC_CMC0_DMA_DESC1r_CLR(r) (r).cmic_cmc0_dma_desc1[0] = 0
#define CMIC_CMC0_DMA_DESC1r_SET(r,d) (r).cmic_cmc0_dma_desc1[0] = d
#define CMIC_CMC0_DMA_DESC1r_GET(r) (r).cmic_cmc0_dma_desc1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_DESC1r_ADDRf_GET(r) ((r).cmic_cmc0_dma_desc1[0])
#define CMIC_CMC0_DMA_DESC1r_ADDRf_SET(r,f) (r).cmic_cmc0_dma_desc1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_DESC1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_DESC2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_DESC2r_OFFSET 0x00031160

#define CMIC_CMC0_DMA_DESC2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_DESC2.
 */
typedef union CMIC_CMC0_DMA_DESC2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_desc2[1];
	uint32_t _cmic_cmc0_dma_desc2;
} CMIC_CMC0_DMA_DESC2r_t;

#define CMIC_CMC0_DMA_DESC2r_CLR(r) (r).cmic_cmc0_dma_desc2[0] = 0
#define CMIC_CMC0_DMA_DESC2r_SET(r,d) (r).cmic_cmc0_dma_desc2[0] = d
#define CMIC_CMC0_DMA_DESC2r_GET(r) (r).cmic_cmc0_dma_desc2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_DESC2r_ADDRf_GET(r) ((r).cmic_cmc0_dma_desc2[0])
#define CMIC_CMC0_DMA_DESC2r_ADDRf_SET(r,f) (r).cmic_cmc0_dma_desc2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_DESC2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_DESC3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_DESC3r_OFFSET 0x00031164

#define CMIC_CMC0_DMA_DESC3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_DESC3.
 */
typedef union CMIC_CMC0_DMA_DESC3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_desc3[1];
	uint32_t _cmic_cmc0_dma_desc3;
} CMIC_CMC0_DMA_DESC3r_t;

#define CMIC_CMC0_DMA_DESC3r_CLR(r) (r).cmic_cmc0_dma_desc3[0] = 0
#define CMIC_CMC0_DMA_DESC3r_SET(r,d) (r).cmic_cmc0_dma_desc3[0] = d
#define CMIC_CMC0_DMA_DESC3r_GET(r) (r).cmic_cmc0_dma_desc3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_DESC3r_ADDRf_GET(r) ((r).cmic_cmc0_dma_desc3[0])
#define CMIC_CMC0_DMA_DESC3r_ADDRf_SET(r,f) (r).cmic_cmc0_dma_desc3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_DESC3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_STATr_OFFSET 0x00031150

#define CMIC_CMC0_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_STAT.
 */
typedef union CMIC_CMC0_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_stat[1];
	uint32_t _cmic_cmc0_dma_stat;
} CMIC_CMC0_DMA_STATr_t;

#define CMIC_CMC0_DMA_STATr_CLR(r) (r).cmic_cmc0_dma_stat[0] = 0
#define CMIC_CMC0_DMA_STATr_SET(r,d) (r).cmic_cmc0_dma_stat[0] = d
#define CMIC_CMC0_DMA_STATr_GET(r) (r).cmic_cmc0_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_STATr_CHAIN_DONEf_GET(r) (((r).cmic_cmc0_dma_stat[0]) & 0xf)
#define CMIC_CMC0_DMA_STATr_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC0_DMA_STATr_CH0_CHAIN_DONEf_GET(r) (((r).cmic_cmc0_dma_stat[0]) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_DMA_STATr_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_DMA_STATr_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_DMA_STATr_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_DMA_STATr_DESC_DONEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 4) & 0xf)
#define CMIC_CMC0_DMA_STATr_DESC_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_CMC0_DMA_STATr_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_DMA_STATr_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_DMA_STATr_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_DMA_STATr_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_DMA_STATr_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 8) & 0xf)
#define CMIC_CMC0_DMA_STATr_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define CMIC_CMC0_DMA_STATr_CH0_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH0_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_DMA_STATr_CH1_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH1_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_DMA_STATr_CH2_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH2_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_DMA_STATr_CH3_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH3_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_DMA_STATr_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 12) & 0xf)
#define CMIC_CMC0_DMA_STATr_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define CMIC_CMC0_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 12) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 13) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC0_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 14) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC0_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 15) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC0_DMA_STATr_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 16) & 0xf)
#define CMIC_CMC0_DMA_STATr_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0xf << 16)) | ((((uint32_t)f) & 0xf) << 16))
#define CMIC_CMC0_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 16) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC0_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 17) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC0_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 18) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC0_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 19) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_DMA_STATr_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 20) & 0xf)
#define CMIC_CMC0_DMA_STATr_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0xf << 20)) | ((((uint32_t)f) & 0xf) << 20))
#define CMIC_CMC0_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 20) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 21) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 22) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC0_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 23) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC0_DMA_STATr_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 24) & 0xf)
#define CMIC_CMC0_DMA_STATr_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0xf << 24)) | ((((uint32_t)f) & 0xf) << 24))
#define CMIC_CMC0_DMA_STATr_CH0_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 24) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH0_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_DMA_STATr_CH1_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 25) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH1_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC0_DMA_STATr_CH2_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 26) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH2_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_DMA_STATr_CH3_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 27) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH3_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_DMA_STATr_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 28) & 0xf)
#define CMIC_CMC0_DMA_STATr_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0xf << 28)) | ((((uint32_t)f) & 0xf) << 28))
#define CMIC_CMC0_DMA_STATr_CH0_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 28) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH0_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_DMA_STATr_CH1_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 29) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH1_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_DMA_STATr_CH2_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 30) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH2_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC0_DMA_STATr_CH3_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc0_dma_stat[0]) >> 31) & 0x1)
#define CMIC_CMC0_DMA_STATr_CH3_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc0_dma_stat[0]=(((r).cmic_cmc0_dma_stat[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_STAT_CLRr_OFFSET 0x000311a4

#define CMIC_CMC0_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_STAT_CLR.
 */
typedef union CMIC_CMC0_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_stat_clr[1];
	uint32_t _cmic_cmc0_dma_stat_clr;
} CMIC_CMC0_DMA_STAT_CLRr_t;

#define CMIC_CMC0_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc0_dma_stat_clr[0] = 0
#define CMIC_CMC0_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc0_dma_stat_clr[0] = d
#define CMIC_CMC0_DMA_STAT_CLRr_GET(r) (r).cmic_cmc0_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_STAT_CLRr_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc0_dma_stat_clr[0]) & 0xf)
#define CMIC_CMC0_DMA_STAT_CLRr_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC0_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc0_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 3) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_DMA_STAT_CLRr_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 4) & 0xf)
#define CMIC_CMC0_DMA_STAT_CLRr_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_CMC0_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 4) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 5) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 6) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 7) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_DMA_STAT_CLRr_CH0_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 8) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH0_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_DMA_STAT_CLRr_CH1_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 9) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH1_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_DMA_STAT_CLRr_CH2_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 10) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH2_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_DMA_STAT_CLRr_CH3_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc0_dma_stat_clr[0]) >> 11) & 0x1)
#define CMIC_CMC0_DMA_STAT_CLRr_CH3_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc0_dma_stat_clr[0]=(((r).cmic_cmc0_dma_stat_clr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_DMA_STAT_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_DMA_STAT_HIr_OFFSET 0x00031130

#define CMIC_CMC0_DMA_STAT_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_DMA_STAT_HI.
 */
typedef union CMIC_CMC0_DMA_STAT_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_dma_stat_hi[1];
	uint32_t _cmic_cmc0_dma_stat_hi;
} CMIC_CMC0_DMA_STAT_HIr_t;

#define CMIC_CMC0_DMA_STAT_HIr_CLR(r) (r).cmic_cmc0_dma_stat_hi[0] = 0
#define CMIC_CMC0_DMA_STAT_HIr_SET(r,d) (r).cmic_cmc0_dma_stat_hi[0] = d
#define CMIC_CMC0_DMA_STAT_HIr_GET(r) (r).cmic_cmc0_dma_stat_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_DMA_STAT_HIr_CH0_IN_HALTf_GET(r) ((((r).cmic_cmc0_dma_stat_hi[0]) >> 27) & 0x1)
#define CMIC_CMC0_DMA_STAT_HIr_CH0_IN_HALTf_SET(r,f) (r).cmic_cmc0_dma_stat_hi[0]=(((r).cmic_cmc0_dma_stat_hi[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_DMA_STAT_HIr_CH1_IN_HALTf_GET(r) ((((r).cmic_cmc0_dma_stat_hi[0]) >> 28) & 0x1)
#define CMIC_CMC0_DMA_STAT_HIr_CH1_IN_HALTf_SET(r,f) (r).cmic_cmc0_dma_stat_hi[0]=(((r).cmic_cmc0_dma_stat_hi[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_DMA_STAT_HIr_CH2_IN_HALTf_GET(r) ((((r).cmic_cmc0_dma_stat_hi[0]) >> 29) & 0x1)
#define CMIC_CMC0_DMA_STAT_HIr_CH2_IN_HALTf_SET(r,f) (r).cmic_cmc0_dma_stat_hi[0]=(((r).cmic_cmc0_dma_stat_hi[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_DMA_STAT_HIr_CH3_IN_HALTf_GET(r) ((((r).cmic_cmc0_dma_stat_hi[0]) >> 30) & 0x1)
#define CMIC_CMC0_DMA_STAT_HIr_CH3_IN_HALTf_SET(r,f) (r).cmic_cmc0_dma_stat_hi[0]=(((r).cmic_cmc0_dma_stat_hi[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC0_DMA_STAT_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_OFFSET 0x00031828

#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0.
 */
typedef union CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fiforddma_ch0_tm_control_0[1];
	uint32_t _cmic_cmc0_fiforddma_ch0_tm_control_0;
} CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_t;

#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_CLR(r) (r).cmic_cmc0_fiforddma_ch0_tm_control_0[0] = 0
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc0_fiforddma_ch0_tm_control_0[0] = d
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_GET(r) (r).cmic_cmc0_fiforddma_ch0_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc0_fiforddma_ch0_tm_control_0[0]) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc0_fiforddma_ch0_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc0_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_fiforddma_ch0_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_fiforddma_ch0_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_OFFSET 0x0003182c

#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1.
 */
typedef union CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fiforddma_ch0_tm_control_1[1];
	uint32_t _cmic_cmc0_fiforddma_ch0_tm_control_1;
} CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_t;

#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_CLR(r) (r).cmic_cmc0_fiforddma_ch0_tm_control_1[0] = 0
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc0_fiforddma_ch0_tm_control_1[0] = d
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_GET(r) (r).cmic_cmc0_fiforddma_ch0_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc0_fiforddma_ch0_tm_control_1[0]) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch0_tm_control_1[0]=(((r).cmic_cmc0_fiforddma_ch0_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_fiforddma_ch0_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch0_tm_control_1[0]=(((r).cmic_cmc0_fiforddma_ch0_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFORDDMA_CH0_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_OFFSET 0x00031830

#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0.
 */
typedef union CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fiforddma_ch1_tm_control_0[1];
	uint32_t _cmic_cmc0_fiforddma_ch1_tm_control_0;
} CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_t;

#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_CLR(r) (r).cmic_cmc0_fiforddma_ch1_tm_control_0[0] = 0
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc0_fiforddma_ch1_tm_control_0[0] = d
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_GET(r) (r).cmic_cmc0_fiforddma_ch1_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc0_fiforddma_ch1_tm_control_0[0]) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc0_fiforddma_ch1_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc0_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_fiforddma_ch1_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_fiforddma_ch1_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_OFFSET 0x00031834

#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1.
 */
typedef union CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fiforddma_ch1_tm_control_1[1];
	uint32_t _cmic_cmc0_fiforddma_ch1_tm_control_1;
} CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_t;

#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_CLR(r) (r).cmic_cmc0_fiforddma_ch1_tm_control_1[0] = 0
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc0_fiforddma_ch1_tm_control_1[0] = d
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_GET(r) (r).cmic_cmc0_fiforddma_ch1_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc0_fiforddma_ch1_tm_control_1[0]) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch1_tm_control_1[0]=(((r).cmic_cmc0_fiforddma_ch1_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_fiforddma_ch1_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch1_tm_control_1[0]=(((r).cmic_cmc0_fiforddma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFORDDMA_CH1_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_OFFSET 0x00031838

#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0.
 */
typedef union CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fiforddma_ch2_tm_control_0[1];
	uint32_t _cmic_cmc0_fiforddma_ch2_tm_control_0;
} CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_t;

#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_CLR(r) (r).cmic_cmc0_fiforddma_ch2_tm_control_0[0] = 0
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc0_fiforddma_ch2_tm_control_0[0] = d
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_GET(r) (r).cmic_cmc0_fiforddma_ch2_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc0_fiforddma_ch2_tm_control_0[0]) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc0_fiforddma_ch2_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc0_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_fiforddma_ch2_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_fiforddma_ch2_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_OFFSET 0x0003183c

#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1.
 */
typedef union CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fiforddma_ch2_tm_control_1[1];
	uint32_t _cmic_cmc0_fiforddma_ch2_tm_control_1;
} CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_t;

#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_CLR(r) (r).cmic_cmc0_fiforddma_ch2_tm_control_1[0] = 0
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc0_fiforddma_ch2_tm_control_1[0] = d
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_GET(r) (r).cmic_cmc0_fiforddma_ch2_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc0_fiforddma_ch2_tm_control_1[0]) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch2_tm_control_1[0]=(((r).cmic_cmc0_fiforddma_ch2_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_fiforddma_ch2_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch2_tm_control_1[0]=(((r).cmic_cmc0_fiforddma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFORDDMA_CH2_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_OFFSET 0x00031840

#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0.
 */
typedef union CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fiforddma_ch3_tm_control_0[1];
	uint32_t _cmic_cmc0_fiforddma_ch3_tm_control_0;
} CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_t;

#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_CLR(r) (r).cmic_cmc0_fiforddma_ch3_tm_control_0[0] = 0
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc0_fiforddma_ch3_tm_control_0[0] = d
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_GET(r) (r).cmic_cmc0_fiforddma_ch3_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc0_fiforddma_ch3_tm_control_0[0]) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc0_fiforddma_ch3_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc0_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_fiforddma_ch3_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_fiforddma_ch3_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc0_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_OFFSET 0x00031844

#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1.
 */
typedef union CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fiforddma_ch3_tm_control_1[1];
	uint32_t _cmic_cmc0_fiforddma_ch3_tm_control_1;
} CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_t;

#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_CLR(r) (r).cmic_cmc0_fiforddma_ch3_tm_control_1[0] = 0
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc0_fiforddma_ch3_tm_control_1[0] = d
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_GET(r) (r).cmic_cmc0_fiforddma_ch3_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc0_fiforddma_ch3_tm_control_1[0]) & 0xfff)
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch3_tm_control_1[0]=(((r).cmic_cmc0_fiforddma_ch3_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_fiforddma_ch3_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_fiforddma_ch3_tm_control_1[0]=(((r).cmic_cmc0_fiforddma_ch3_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFORDDMA_CH3_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_OFFSET 0x000312c0

#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_CFG.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_cfg[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_cfg;
} CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00031330

#define CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00031310

#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_eccerr_address;
} CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_address[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_address[0])
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00031320

#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_eccerr_control;
} CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000312e0

#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_hostmem_start_address;
} CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_start_address[0])
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00031354

#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_hostmem_threshold;
} CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_threshold[0])
#define CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x000312f0

#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x000312f4

#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr_OFFSET 0x00031384

#define CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_opcode[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_opcode;
} CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_opcode[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_opcode[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_fifo_ch0_rd_dma_opcode[0])
#define CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000312d0

#define CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_sbus_start_address;
} CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch0_rd_dma_sbus_start_address[0])
#define CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_OFFSET 0x00031364

#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_STAT.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_stat[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_stat;
} CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_OFFSET 0x00031374

#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch0_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc0_fifo_ch0_rd_dma_stat_clr;
} CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0] = 0
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0] = d
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch0_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH0_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_OFFSET 0x000312c4

#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_CFG.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_cfg[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_cfg;
} CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00031334

#define CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00031314

#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_eccerr_address;
} CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_address[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_address[0])
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00031324

#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_eccerr_control;
} CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000312e4

#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_hostmem_start_address;
} CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_start_address[0])
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00031358

#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_hostmem_threshold;
} CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_threshold[0])
#define CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x000312f8

#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x000312fc

#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr_OFFSET 0x00031388

#define CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_opcode[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_opcode;
} CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_opcode[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_opcode[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_fifo_ch1_rd_dma_opcode[0])
#define CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000312d4

#define CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_sbus_start_address;
} CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch1_rd_dma_sbus_start_address[0])
#define CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_OFFSET 0x00031368

#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_STAT.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_stat[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_stat;
} CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_OFFSET 0x00031378

#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch1_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc0_fifo_ch1_rd_dma_stat_clr;
} CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0] = 0
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0] = d
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch1_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH1_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_OFFSET 0x000312c8

#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_CFG.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_cfg[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_cfg;
} CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00031338

#define CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00031318

#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_eccerr_address;
} CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_address[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_address[0])
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00031328

#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_eccerr_control;
} CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000312e8

#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_hostmem_start_address;
} CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_start_address[0])
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x0003135c

#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_hostmem_threshold;
} CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_threshold[0])
#define CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x00031300

#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x00031304

#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr_OFFSET 0x0003138c

#define CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_opcode[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_opcode;
} CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_opcode[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_opcode[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_fifo_ch2_rd_dma_opcode[0])
#define CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000312d8

#define CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_sbus_start_address;
} CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch2_rd_dma_sbus_start_address[0])
#define CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_OFFSET 0x0003136c

#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_STAT.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_stat[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_stat;
} CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_OFFSET 0x0003137c

#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch2_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc0_fifo_ch2_rd_dma_stat_clr;
} CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0] = 0
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0] = d
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch2_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH2_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_OFFSET 0x000312cc

#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_CFG.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_cfg[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_cfg;
} CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x0003133c

#define CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x0003131c

#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_eccerr_address;
} CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_address[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_address[0])
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_OFFSET 0x0003132c

#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_eccerr_control;
} CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000312ec

#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_hostmem_start_address;
} CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_start_address[0])
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00031360

#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_hostmem_threshold;
} CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_threshold[0])
#define CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x00031308

#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x0003130c

#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr_OFFSET 0x00031390

#define CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_opcode[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_opcode;
} CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_opcode[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_opcode[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_fifo_ch3_rd_dma_opcode[0])
#define CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000312dc

#define CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_sbus_start_address;
} CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_fifo_ch3_rd_dma_sbus_start_address[0])
#define CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_OFFSET 0x00031370

#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_STAT.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_stat[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_stat;
} CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_OFFSET 0x00031380

#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fifo_ch3_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc0_fifo_ch3_rd_dma_stat_clr;
} CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0] = 0
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0] = d
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0]=(((r).cmic_cmc0_fifo_ch3_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC0_FIFO_CH3_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FSCHAN_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FSCHAN_ADDRESSr_OFFSET 0x00031070

#define CMIC_CMC0_FSCHAN_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FSCHAN_ADDRESS.
 */
typedef union CMIC_CMC0_FSCHAN_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fschan_address[1];
	uint32_t _cmic_cmc0_fschan_address;
} CMIC_CMC0_FSCHAN_ADDRESSr_t;

#define CMIC_CMC0_FSCHAN_ADDRESSr_CLR(r) (r).cmic_cmc0_fschan_address[0] = 0
#define CMIC_CMC0_FSCHAN_ADDRESSr_SET(r,d) (r).cmic_cmc0_fschan_address[0] = d
#define CMIC_CMC0_FSCHAN_ADDRESSr_GET(r) (r).cmic_cmc0_fschan_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FSCHAN_ADDRESSr_ADDRRESSf_GET(r) ((r).cmic_cmc0_fschan_address[0])
#define CMIC_CMC0_FSCHAN_ADDRESSr_ADDRRESSf_SET(r,f) (r).cmic_cmc0_fschan_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FSCHAN_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FSCHAN_DATA32
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FSCHAN_DATA32r_OFFSET 0x00031074

#define CMIC_CMC0_FSCHAN_DATA32r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FSCHAN_DATA32.
 */
typedef union CMIC_CMC0_FSCHAN_DATA32r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fschan_data32[1];
	uint32_t _cmic_cmc0_fschan_data32;
} CMIC_CMC0_FSCHAN_DATA32r_t;

#define CMIC_CMC0_FSCHAN_DATA32r_CLR(r) (r).cmic_cmc0_fschan_data32[0] = 0
#define CMIC_CMC0_FSCHAN_DATA32r_SET(r,d) (r).cmic_cmc0_fschan_data32[0] = d
#define CMIC_CMC0_FSCHAN_DATA32r_GET(r) (r).cmic_cmc0_fschan_data32[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FSCHAN_DATA32r_DATA32f_GET(r) ((r).cmic_cmc0_fschan_data32[0])
#define CMIC_CMC0_FSCHAN_DATA32r_DATA32f_SET(r,f) (r).cmic_cmc0_fschan_data32[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FSCHAN_DATA32r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FSCHAN_DATA64_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FSCHAN_DATA64_HIr_OFFSET 0x0003107c

#define CMIC_CMC0_FSCHAN_DATA64_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FSCHAN_DATA64_HI.
 */
typedef union CMIC_CMC0_FSCHAN_DATA64_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fschan_data64_hi[1];
	uint32_t _cmic_cmc0_fschan_data64_hi;
} CMIC_CMC0_FSCHAN_DATA64_HIr_t;

#define CMIC_CMC0_FSCHAN_DATA64_HIr_CLR(r) (r).cmic_cmc0_fschan_data64_hi[0] = 0
#define CMIC_CMC0_FSCHAN_DATA64_HIr_SET(r,d) (r).cmic_cmc0_fschan_data64_hi[0] = d
#define CMIC_CMC0_FSCHAN_DATA64_HIr_GET(r) (r).cmic_cmc0_fschan_data64_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FSCHAN_DATA64_HIr_DATA64_HIf_GET(r) ((r).cmic_cmc0_fschan_data64_hi[0])
#define CMIC_CMC0_FSCHAN_DATA64_HIr_DATA64_HIf_SET(r,f) (r).cmic_cmc0_fschan_data64_hi[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FSCHAN_DATA64_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FSCHAN_DATA64_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FSCHAN_DATA64_LOr_OFFSET 0x00031078

#define CMIC_CMC0_FSCHAN_DATA64_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FSCHAN_DATA64_LO.
 */
typedef union CMIC_CMC0_FSCHAN_DATA64_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fschan_data64_lo[1];
	uint32_t _cmic_cmc0_fschan_data64_lo;
} CMIC_CMC0_FSCHAN_DATA64_LOr_t;

#define CMIC_CMC0_FSCHAN_DATA64_LOr_CLR(r) (r).cmic_cmc0_fschan_data64_lo[0] = 0
#define CMIC_CMC0_FSCHAN_DATA64_LOr_SET(r,d) (r).cmic_cmc0_fschan_data64_lo[0] = d
#define CMIC_CMC0_FSCHAN_DATA64_LOr_GET(r) (r).cmic_cmc0_fschan_data64_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FSCHAN_DATA64_LOr_DATA64_LOf_GET(r) ((r).cmic_cmc0_fschan_data64_lo[0])
#define CMIC_CMC0_FSCHAN_DATA64_LOr_DATA64_LOf_SET(r,f) (r).cmic_cmc0_fschan_data64_lo[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FSCHAN_DATA64_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FSCHAN_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FSCHAN_OPCODEr_OFFSET 0x0003106c

#define CMIC_CMC0_FSCHAN_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FSCHAN_OPCODE.
 */
typedef union CMIC_CMC0_FSCHAN_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fschan_opcode[1];
	uint32_t _cmic_cmc0_fschan_opcode;
} CMIC_CMC0_FSCHAN_OPCODEr_t;

#define CMIC_CMC0_FSCHAN_OPCODEr_CLR(r) (r).cmic_cmc0_fschan_opcode[0] = 0
#define CMIC_CMC0_FSCHAN_OPCODEr_SET(r,d) (r).cmic_cmc0_fschan_opcode[0] = d
#define CMIC_CMC0_FSCHAN_OPCODEr_GET(r) (r).cmic_cmc0_fschan_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FSCHAN_OPCODEr_ADDRRESSf_GET(r) ((r).cmic_cmc0_fschan_opcode[0])
#define CMIC_CMC0_FSCHAN_OPCODEr_ADDRRESSf_SET(r,f) (r).cmic_cmc0_fschan_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_FSCHAN_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_FSCHAN_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_FSCHAN_STATUSr_OFFSET 0x00031068

#define CMIC_CMC0_FSCHAN_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_FSCHAN_STATUS.
 */
typedef union CMIC_CMC0_FSCHAN_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_fschan_status[1];
	uint32_t _cmic_cmc0_fschan_status;
} CMIC_CMC0_FSCHAN_STATUSr_t;

#define CMIC_CMC0_FSCHAN_STATUSr_CLR(r) (r).cmic_cmc0_fschan_status[0] = 0
#define CMIC_CMC0_FSCHAN_STATUSr_SET(r,d) (r).cmic_cmc0_fschan_status[0] = d
#define CMIC_CMC0_FSCHAN_STATUSr_GET(r) (r).cmic_cmc0_fschan_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_FSCHAN_STATUSr_FSCHAN_BUSYf_GET(r) (((r).cmic_cmc0_fschan_status[0]) & 0x1)
#define CMIC_CMC0_FSCHAN_STATUSr_FSCHAN_BUSYf_SET(r,f) (r).cmic_cmc0_fschan_status[0]=(((r).cmic_cmc0_fschan_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC0_FSCHAN_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_HOSTMEM_ADDR_REMAP_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_OFFSET 0x00031474

#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_HOSTMEM_ADDR_REMAP_0.
 */
typedef union CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_hostmem_addr_remap_0[1];
	uint32_t _cmic_cmc0_hostmem_addr_remap_0;
} CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_t;

#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_CLR(r) (r).cmic_cmc0_hostmem_addr_remap_0[0] = 0
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_SET(r,d) (r).cmic_cmc0_hostmem_addr_remap_0[0] = d
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_GET(r) (r).cmic_cmc0_hostmem_addr_remap_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_0f_GET(r) (((r).cmic_cmc0_hostmem_addr_remap_0[0]) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_0f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_0[0]=(((r).cmic_cmc0_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_1f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_0[0]) >> 6) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_1f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_0[0]=(((r).cmic_cmc0_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_2f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_0[0]) >> 12) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_2f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_0[0]=(((r).cmic_cmc0_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_3f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_0[0]) >> 18) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_3f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_0[0]=(((r).cmic_cmc0_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_4f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_0[0]) >> 24) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r_ADDR_4f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_0[0]=(((r).cmic_cmc0_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC0_HOSTMEM_ADDR_REMAP_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_HOSTMEM_ADDR_REMAP_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_OFFSET 0x00031478

#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_HOSTMEM_ADDR_REMAP_1.
 */
typedef union CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_hostmem_addr_remap_1[1];
	uint32_t _cmic_cmc0_hostmem_addr_remap_1;
} CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_t;

#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_CLR(r) (r).cmic_cmc0_hostmem_addr_remap_1[0] = 0
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_SET(r,d) (r).cmic_cmc0_hostmem_addr_remap_1[0] = d
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_GET(r) (r).cmic_cmc0_hostmem_addr_remap_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_0f_GET(r) (((r).cmic_cmc0_hostmem_addr_remap_1[0]) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_0f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_1[0]=(((r).cmic_cmc0_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_1f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_1[0]) >> 6) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_1f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_1[0]=(((r).cmic_cmc0_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_2f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_1[0]) >> 12) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_2f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_1[0]=(((r).cmic_cmc0_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_3f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_1[0]) >> 18) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_3f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_1[0]=(((r).cmic_cmc0_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_4f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_1[0]) >> 24) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r_ADDR_4f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_1[0]=(((r).cmic_cmc0_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC0_HOSTMEM_ADDR_REMAP_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_HOSTMEM_ADDR_REMAP_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_OFFSET 0x0003147c

#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_HOSTMEM_ADDR_REMAP_2.
 */
typedef union CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_hostmem_addr_remap_2[1];
	uint32_t _cmic_cmc0_hostmem_addr_remap_2;
} CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_t;

#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_CLR(r) (r).cmic_cmc0_hostmem_addr_remap_2[0] = 0
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_SET(r,d) (r).cmic_cmc0_hostmem_addr_remap_2[0] = d
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_GET(r) (r).cmic_cmc0_hostmem_addr_remap_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_0f_GET(r) (((r).cmic_cmc0_hostmem_addr_remap_2[0]) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_0f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_2[0]=(((r).cmic_cmc0_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_1f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_2[0]) >> 6) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_1f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_2[0]=(((r).cmic_cmc0_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_2f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_2[0]) >> 12) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_2f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_2[0]=(((r).cmic_cmc0_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_3f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_2[0]) >> 18) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_3f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_2[0]=(((r).cmic_cmc0_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_4f_GET(r) ((((r).cmic_cmc0_hostmem_addr_remap_2[0]) >> 24) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r_ADDR_4f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_2[0]=(((r).cmic_cmc0_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC0_HOSTMEM_ADDR_REMAP_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_HOSTMEM_ADDR_REMAP_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r_OFFSET 0x000314ac

#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_HOSTMEM_ADDR_REMAP_3.
 */
typedef union CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_hostmem_addr_remap_3[1];
	uint32_t _cmic_cmc0_hostmem_addr_remap_3;
} CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r_t;

#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r_CLR(r) (r).cmic_cmc0_hostmem_addr_remap_3[0] = 0
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r_SET(r,d) (r).cmic_cmc0_hostmem_addr_remap_3[0] = d
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r_GET(r) (r).cmic_cmc0_hostmem_addr_remap_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r_ADDR_0f_GET(r) (((r).cmic_cmc0_hostmem_addr_remap_3[0]) & 0x3f)
#define CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r_ADDR_0f_SET(r,f) (r).cmic_cmc0_hostmem_addr_remap_3[0]=(((r).cmic_cmc0_hostmem_addr_remap_3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*******************************************************************************
 * End of 'CMIC_CMC0_HOSTMEM_ADDR_REMAP_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_IRQ_STAT0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_IRQ_STAT0r_OFFSET 0x00031400

#define CMIC_CMC0_IRQ_STAT0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_IRQ_STAT0.
 */
typedef union CMIC_CMC0_IRQ_STAT0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_irq_stat0[1];
	uint32_t _cmic_cmc0_irq_stat0;
} CMIC_CMC0_IRQ_STAT0r_t;

#define CMIC_CMC0_IRQ_STAT0r_CLR(r) (r).cmic_cmc0_irq_stat0[0] = 0
#define CMIC_CMC0_IRQ_STAT0r_SET(r,d) (r).cmic_cmc0_irq_stat0[0] = d
#define CMIC_CMC0_IRQ_STAT0r_GET(r) (r).cmic_cmc0_irq_stat0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_IRQ_STAT0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc0_irq_stat0[0]) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_IRQ_STAT0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 1) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 2) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 3) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 4) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 5) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_IRQ_STAT0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 6) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_IRQ_STAT0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 7) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_IRQ_STAT0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 8) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_IRQ_STAT0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 9) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_IRQ_STAT0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 10) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_IRQ_STAT0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 11) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_IRQ_STAT0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 12) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_IRQ_STAT0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 13) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC0_IRQ_STAT0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 14) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC0_IRQ_STAT0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 15) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC0_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 16) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC0_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 17) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC0_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 18) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC0_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 19) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_IRQ_STAT0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 20) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 21) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_IRQ_STAT0r_SW_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 22) & 0xf)
#define CMIC_CMC0_IRQ_STAT0r_SW_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC0_IRQ_STAT0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 26) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_IRQ_STAT0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 27) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_IRQ_STAT0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 28) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_IRQ_STAT0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 29) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_IRQ_STAT0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat0[0]) >> 30) & 0x1)
#define CMIC_CMC0_IRQ_STAT0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat0[0]=(((r).cmic_cmc0_irq_stat0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC0_IRQ_STAT0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_IRQ_STAT1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_IRQ_STAT1r_OFFSET 0x00031404

#define CMIC_CMC0_IRQ_STAT1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_IRQ_STAT1.
 */
typedef union CMIC_CMC0_IRQ_STAT1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_irq_stat1[1];
	uint32_t _cmic_cmc0_irq_stat1;
} CMIC_CMC0_IRQ_STAT1r_t;

#define CMIC_CMC0_IRQ_STAT1r_CLR(r) (r).cmic_cmc0_irq_stat1[0] = 0
#define CMIC_CMC0_IRQ_STAT1r_SET(r,d) (r).cmic_cmc0_irq_stat1[0] = d
#define CMIC_CMC0_IRQ_STAT1r_GET(r) (r).cmic_cmc0_irq_stat1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_IRQ_STAT1r_I2C_INTRf_GET(r) (((r).cmic_cmc0_irq_stat1[0]) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_I2C_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 1) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_IRQ_STAT1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 2) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 3) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 4) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_IRQ_STAT1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 5) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_IRQ_STAT1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 6) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_IRQ_STAT1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 7) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_IRQ_STAT1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 8) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_IRQ_STAT1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 9) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_IRQ_STAT1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 10) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_IRQ_STAT1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 11) & 0xff)
#define CMIC_CMC0_IRQ_STAT1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC0_IRQ_STAT1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 19) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_IRQ_STAT1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 20) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_IRQ_STAT1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 21) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_IRQ_STAT1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 22) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC0_IRQ_STAT1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 23) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC0_IRQ_STAT1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 24) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_IRQ_STAT1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 25) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC0_IRQ_STAT1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 26) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 27) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_IRQ_STAT1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 28) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_IRQ_STAT1r_SER_INTRf_GET(r) ((((r).cmic_cmc0_irq_stat1[0]) >> 29) & 0x1)
#define CMIC_CMC0_IRQ_STAT1r_SER_INTRf_SET(r,f) (r).cmic_cmc0_irq_stat1[0]=(((r).cmic_cmc0_irq_stat1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC0_IRQ_STAT1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_IRQ_STAT2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_IRQ_STAT2r_OFFSET 0x00031408

#define CMIC_CMC0_IRQ_STAT2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_IRQ_STAT2.
 */
typedef union CMIC_CMC0_IRQ_STAT2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_irq_stat2[1];
	uint32_t _cmic_cmc0_irq_stat2;
} CMIC_CMC0_IRQ_STAT2r_t;

#define CMIC_CMC0_IRQ_STAT2r_CLR(r) (r).cmic_cmc0_irq_stat2[0] = 0
#define CMIC_CMC0_IRQ_STAT2r_SET(r,d) (r).cmic_cmc0_irq_stat2[0] = d
#define CMIC_CMC0_IRQ_STAT2r_GET(r) (r).cmic_cmc0_irq_stat2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_GET(r) ((r).cmic_cmc0_irq_stat2[0])
#define CMIC_CMC0_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_SET(r,f) (r).cmic_cmc0_irq_stat2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_IRQ_STAT2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_IRQ_STAT3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_IRQ_STAT3r_OFFSET 0x0003140c

#define CMIC_CMC0_IRQ_STAT3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_IRQ_STAT3.
 */
typedef union CMIC_CMC0_IRQ_STAT3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_irq_stat3[1];
	uint32_t _cmic_cmc0_irq_stat3;
} CMIC_CMC0_IRQ_STAT3r_t;

#define CMIC_CMC0_IRQ_STAT3r_CLR(r) (r).cmic_cmc0_irq_stat3[0] = 0
#define CMIC_CMC0_IRQ_STAT3r_SET(r,d) (r).cmic_cmc0_irq_stat3[0] = d
#define CMIC_CMC0_IRQ_STAT3r_GET(r) (r).cmic_cmc0_irq_stat3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc0_irq_stat3[0])
#define CMIC_CMC0_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc0_irq_stat3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_IRQ_STAT3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_IRQ_STAT4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_IRQ_STAT4r_OFFSET 0x00031410

#define CMIC_CMC0_IRQ_STAT4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_IRQ_STAT4.
 */
typedef union CMIC_CMC0_IRQ_STAT4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_irq_stat4[1];
	uint32_t _cmic_cmc0_irq_stat4;
} CMIC_CMC0_IRQ_STAT4r_t;

#define CMIC_CMC0_IRQ_STAT4r_CLR(r) (r).cmic_cmc0_irq_stat4[0] = 0
#define CMIC_CMC0_IRQ_STAT4r_SET(r,d) (r).cmic_cmc0_irq_stat4[0] = d
#define CMIC_CMC0_IRQ_STAT4r_GET(r) (r).cmic_cmc0_irq_stat4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc0_irq_stat4[0])
#define CMIC_CMC0_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc0_irq_stat4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_IRQ_STAT4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_IRQ_STAT5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_IRQ_STAT5r_OFFSET 0x000314b0

#define CMIC_CMC0_IRQ_STAT5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_IRQ_STAT5.
 */
typedef union CMIC_CMC0_IRQ_STAT5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_irq_stat5[1];
	uint32_t _cmic_cmc0_irq_stat5;
} CMIC_CMC0_IRQ_STAT5r_t;

#define CMIC_CMC0_IRQ_STAT5r_CLR(r) (r).cmic_cmc0_irq_stat5[0] = 0
#define CMIC_CMC0_IRQ_STAT5r_SET(r,d) (r).cmic_cmc0_irq_stat5[0] = d
#define CMIC_CMC0_IRQ_STAT5r_GET(r) (r).cmic_cmc0_irq_stat5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc0_irq_stat5[0])
#define CMIC_CMC0_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc0_irq_stat5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_IRQ_STAT5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_IRQ_STAT6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_IRQ_STAT6r_OFFSET 0x000314b4

#define CMIC_CMC0_IRQ_STAT6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_IRQ_STAT6.
 */
typedef union CMIC_CMC0_IRQ_STAT6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_irq_stat6[1];
	uint32_t _cmic_cmc0_irq_stat6;
} CMIC_CMC0_IRQ_STAT6r_t;

#define CMIC_CMC0_IRQ_STAT6r_CLR(r) (r).cmic_cmc0_irq_stat6[0] = 0
#define CMIC_CMC0_IRQ_STAT6r_SET(r,d) (r).cmic_cmc0_irq_stat6[0] = d
#define CMIC_CMC0_IRQ_STAT6r_GET(r) (r).cmic_cmc0_irq_stat6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc0_irq_stat6[0])
#define CMIC_CMC0_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc0_irq_stat6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_IRQ_STAT6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_MIIM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_MIIM_ADDRESSr_OFFSET 0x00031088

#define CMIC_CMC0_MIIM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_MIIM_ADDRESS.
 */
typedef union CMIC_CMC0_MIIM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_miim_address[1];
	uint32_t _cmic_cmc0_miim_address;
} CMIC_CMC0_MIIM_ADDRESSr_t;

#define CMIC_CMC0_MIIM_ADDRESSr_CLR(r) (r).cmic_cmc0_miim_address[0] = 0
#define CMIC_CMC0_MIIM_ADDRESSr_SET(r,d) (r).cmic_cmc0_miim_address[0] = d
#define CMIC_CMC0_MIIM_ADDRESSr_GET(r) (r).cmic_cmc0_miim_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_MIIM_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_cmc0_miim_address[0]) & 0xffff)
#define CMIC_CMC0_MIIM_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_cmc0_miim_address[0]=(((r).cmic_cmc0_miim_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC0_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_cmc0_miim_address[0]) >> 16) & 0x1f)
#define CMIC_CMC0_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_cmc0_miim_address[0]=(((r).cmic_cmc0_miim_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))

/*******************************************************************************
 * End of 'CMIC_CMC0_MIIM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_MIIM_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_MIIM_CTRLr_OFFSET 0x0003108c

#define CMIC_CMC0_MIIM_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_MIIM_CTRL.
 */
typedef union CMIC_CMC0_MIIM_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_miim_ctrl[1];
	uint32_t _cmic_cmc0_miim_ctrl;
} CMIC_CMC0_MIIM_CTRLr_t;

#define CMIC_CMC0_MIIM_CTRLr_CLR(r) (r).cmic_cmc0_miim_ctrl[0] = 0
#define CMIC_CMC0_MIIM_CTRLr_SET(r,d) (r).cmic_cmc0_miim_ctrl[0] = d
#define CMIC_CMC0_MIIM_CTRLr_GET(r) (r).cmic_cmc0_miim_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_MIIM_CTRLr_MIIM_WR_STARTf_GET(r) (((r).cmic_cmc0_miim_ctrl[0]) & 0x1)
#define CMIC_CMC0_MIIM_CTRLr_MIIM_WR_STARTf_SET(r,f) (r).cmic_cmc0_miim_ctrl[0]=(((r).cmic_cmc0_miim_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_MIIM_CTRLr_MIIM_RD_STARTf_GET(r) ((((r).cmic_cmc0_miim_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC0_MIIM_CTRLr_MIIM_RD_STARTf_SET(r,f) (r).cmic_cmc0_miim_ctrl[0]=(((r).cmic_cmc0_miim_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC0_MIIM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_MIIM_PARAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_MIIM_PARAMr_OFFSET 0x00031080

#define CMIC_CMC0_MIIM_PARAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_MIIM_PARAM.
 */
typedef union CMIC_CMC0_MIIM_PARAMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_miim_param[1];
	uint32_t _cmic_cmc0_miim_param;
} CMIC_CMC0_MIIM_PARAMr_t;

#define CMIC_CMC0_MIIM_PARAMr_CLR(r) (r).cmic_cmc0_miim_param[0] = 0
#define CMIC_CMC0_MIIM_PARAMr_SET(r,d) (r).cmic_cmc0_miim_param[0] = d
#define CMIC_CMC0_MIIM_PARAMr_GET(r) (r).cmic_cmc0_miim_param[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_MIIM_PARAMr_PHY_DATAf_GET(r) (((r).cmic_cmc0_miim_param[0]) & 0xffff)
#define CMIC_CMC0_MIIM_PARAMr_PHY_DATAf_SET(r,f) (r).cmic_cmc0_miim_param[0]=(((r).cmic_cmc0_miim_param[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC0_MIIM_PARAMr_PHY_IDf_GET(r) ((((r).cmic_cmc0_miim_param[0]) >> 16) & 0x1f)
#define CMIC_CMC0_MIIM_PARAMr_PHY_IDf_SET(r,f) (r).cmic_cmc0_miim_param[0]=(((r).cmic_cmc0_miim_param[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_CMC0_MIIM_PARAMr_C45_SELf_GET(r) ((((r).cmic_cmc0_miim_param[0]) >> 21) & 0x1)
#define CMIC_CMC0_MIIM_PARAMr_C45_SELf_SET(r,f) (r).cmic_cmc0_miim_param[0]=(((r).cmic_cmc0_miim_param[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_MIIM_PARAMr_BUS_IDf_GET(r) ((((r).cmic_cmc0_miim_param[0]) >> 22) & 0x7)
#define CMIC_CMC0_MIIM_PARAMr_BUS_IDf_SET(r,f) (r).cmic_cmc0_miim_param[0]=(((r).cmic_cmc0_miim_param[0] & ~((uint32_t)0x7 << 22)) | ((((uint32_t)f) & 0x7) << 22))
#define CMIC_CMC0_MIIM_PARAMr_INTERNAL_SELf_GET(r) ((((r).cmic_cmc0_miim_param[0]) >> 25) & 0x1)
#define CMIC_CMC0_MIIM_PARAMr_INTERNAL_SELf_SET(r,f) (r).cmic_cmc0_miim_param[0]=(((r).cmic_cmc0_miim_param[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC0_MIIM_PARAMr_MIIM_CYCLEf_GET(r) ((((r).cmic_cmc0_miim_param[0]) >> 29) & 0x7)
#define CMIC_CMC0_MIIM_PARAMr_MIIM_CYCLEf_SET(r,f) (r).cmic_cmc0_miim_param[0]=(((r).cmic_cmc0_miim_param[0] & ~((uint32_t)0x7 << 29)) | ((((uint32_t)f) & 0x7) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC0_MIIM_PARAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_MIIM_READ_DATA
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_MIIM_READ_DATAr_OFFSET 0x00031084

#define CMIC_CMC0_MIIM_READ_DATAr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_MIIM_READ_DATA.
 */
typedef union CMIC_CMC0_MIIM_READ_DATAr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_miim_read_data[1];
	uint32_t _cmic_cmc0_miim_read_data;
} CMIC_CMC0_MIIM_READ_DATAr_t;

#define CMIC_CMC0_MIIM_READ_DATAr_CLR(r) (r).cmic_cmc0_miim_read_data[0] = 0
#define CMIC_CMC0_MIIM_READ_DATAr_SET(r,d) (r).cmic_cmc0_miim_read_data[0] = d
#define CMIC_CMC0_MIIM_READ_DATAr_GET(r) (r).cmic_cmc0_miim_read_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_MIIM_READ_DATAr_DATAf_GET(r) (((r).cmic_cmc0_miim_read_data[0]) & 0xffff)
#define CMIC_CMC0_MIIM_READ_DATAr_DATAf_SET(r,f) (r).cmic_cmc0_miim_read_data[0]=(((r).cmic_cmc0_miim_read_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_CMC0_MIIM_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_MIIM_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_MIIM_STATr_OFFSET 0x00031090

#define CMIC_CMC0_MIIM_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_MIIM_STAT.
 */
typedef union CMIC_CMC0_MIIM_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_miim_stat[1];
	uint32_t _cmic_cmc0_miim_stat;
} CMIC_CMC0_MIIM_STATr_t;

#define CMIC_CMC0_MIIM_STATr_CLR(r) (r).cmic_cmc0_miim_stat[0] = 0
#define CMIC_CMC0_MIIM_STATr_SET(r,d) (r).cmic_cmc0_miim_stat[0] = d
#define CMIC_CMC0_MIIM_STATr_GET(r) (r).cmic_cmc0_miim_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_MIIM_STATr_MIIM_OPN_DONEf_GET(r) (((r).cmic_cmc0_miim_stat[0]) & 0x1)
#define CMIC_CMC0_MIIM_STATr_MIIM_OPN_DONEf_SET(r,f) (r).cmic_cmc0_miim_stat[0]=(((r).cmic_cmc0_miim_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC0_MIIM_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PCIE_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PCIE_IRQ_MASK0r_OFFSET 0x00031414

#define CMIC_CMC0_PCIE_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PCIE_IRQ_MASK0.
 */
typedef union CMIC_CMC0_PCIE_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pcie_irq_mask0[1];
	uint32_t _cmic_cmc0_pcie_irq_mask0;
} CMIC_CMC0_PCIE_IRQ_MASK0r_t;

#define CMIC_CMC0_PCIE_IRQ_MASK0r_CLR(r) (r).cmic_cmc0_pcie_irq_mask0[0] = 0
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SET(r,d) (r).cmic_cmc0_pcie_irq_mask0[0] = d
#define CMIC_CMC0_PCIE_IRQ_MASK0r_GET(r) (r).cmic_cmc0_pcie_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc0_pcie_irq_mask0[0]) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask0[0]=(((r).cmic_cmc0_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC0_PCIE_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PCIE_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PCIE_IRQ_MASK1r_OFFSET 0x00031418

#define CMIC_CMC0_PCIE_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PCIE_IRQ_MASK1.
 */
typedef union CMIC_CMC0_PCIE_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pcie_irq_mask1[1];
	uint32_t _cmic_cmc0_pcie_irq_mask1;
} CMIC_CMC0_PCIE_IRQ_MASK1r_t;

#define CMIC_CMC0_PCIE_IRQ_MASK1r_CLR(r) (r).cmic_cmc0_pcie_irq_mask1[0] = 0
#define CMIC_CMC0_PCIE_IRQ_MASK1r_SET(r,d) (r).cmic_cmc0_pcie_irq_mask1[0] = d
#define CMIC_CMC0_PCIE_IRQ_MASK1r_GET(r) (r).cmic_cmc0_pcie_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PCIE_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc0_pcie_irq_mask1[0]) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_PCIE_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc0_pcie_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC0_PCIE_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask1[0]=(((r).cmic_cmc0_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC0_PCIE_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PCIE_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PCIE_IRQ_MASK2r_OFFSET 0x0003141c

#define CMIC_CMC0_PCIE_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PCIE_IRQ_MASK2.
 */
typedef union CMIC_CMC0_PCIE_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pcie_irq_mask2[1];
	uint32_t _cmic_cmc0_pcie_irq_mask2;
} CMIC_CMC0_PCIE_IRQ_MASK2r_t;

#define CMIC_CMC0_PCIE_IRQ_MASK2r_CLR(r) (r).cmic_cmc0_pcie_irq_mask2[0] = 0
#define CMIC_CMC0_PCIE_IRQ_MASK2r_SET(r,d) (r).cmic_cmc0_pcie_irq_mask2[0] = d
#define CMIC_CMC0_PCIE_IRQ_MASK2r_GET(r) (r).cmic_cmc0_pcie_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PCIE_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc0_pcie_irq_mask2[0])
#define CMIC_CMC0_PCIE_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PCIE_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PCIE_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PCIE_IRQ_MASK3r_OFFSET 0x00031420

#define CMIC_CMC0_PCIE_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PCIE_IRQ_MASK3.
 */
typedef union CMIC_CMC0_PCIE_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pcie_irq_mask3[1];
	uint32_t _cmic_cmc0_pcie_irq_mask3;
} CMIC_CMC0_PCIE_IRQ_MASK3r_t;

#define CMIC_CMC0_PCIE_IRQ_MASK3r_CLR(r) (r).cmic_cmc0_pcie_irq_mask3[0] = 0
#define CMIC_CMC0_PCIE_IRQ_MASK3r_SET(r,d) (r).cmic_cmc0_pcie_irq_mask3[0] = d
#define CMIC_CMC0_PCIE_IRQ_MASK3r_GET(r) (r).cmic_cmc0_pcie_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PCIE_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc0_pcie_irq_mask3[0])
#define CMIC_CMC0_PCIE_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PCIE_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PCIE_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PCIE_IRQ_MASK4r_OFFSET 0x00031424

#define CMIC_CMC0_PCIE_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PCIE_IRQ_MASK4.
 */
typedef union CMIC_CMC0_PCIE_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pcie_irq_mask4[1];
	uint32_t _cmic_cmc0_pcie_irq_mask4;
} CMIC_CMC0_PCIE_IRQ_MASK4r_t;

#define CMIC_CMC0_PCIE_IRQ_MASK4r_CLR(r) (r).cmic_cmc0_pcie_irq_mask4[0] = 0
#define CMIC_CMC0_PCIE_IRQ_MASK4r_SET(r,d) (r).cmic_cmc0_pcie_irq_mask4[0] = d
#define CMIC_CMC0_PCIE_IRQ_MASK4r_GET(r) (r).cmic_cmc0_pcie_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PCIE_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc0_pcie_irq_mask4[0])
#define CMIC_CMC0_PCIE_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PCIE_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PCIE_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PCIE_IRQ_MASK5r_OFFSET 0x000314b8

#define CMIC_CMC0_PCIE_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PCIE_IRQ_MASK5.
 */
typedef union CMIC_CMC0_PCIE_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pcie_irq_mask5[1];
	uint32_t _cmic_cmc0_pcie_irq_mask5;
} CMIC_CMC0_PCIE_IRQ_MASK5r_t;

#define CMIC_CMC0_PCIE_IRQ_MASK5r_CLR(r) (r).cmic_cmc0_pcie_irq_mask5[0] = 0
#define CMIC_CMC0_PCIE_IRQ_MASK5r_SET(r,d) (r).cmic_cmc0_pcie_irq_mask5[0] = d
#define CMIC_CMC0_PCIE_IRQ_MASK5r_GET(r) (r).cmic_cmc0_pcie_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PCIE_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc0_pcie_irq_mask5[0])
#define CMIC_CMC0_PCIE_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PCIE_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PCIE_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PCIE_IRQ_MASK6r_OFFSET 0x000314bc

#define CMIC_CMC0_PCIE_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PCIE_IRQ_MASK6.
 */
typedef union CMIC_CMC0_PCIE_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pcie_irq_mask6[1];
	uint32_t _cmic_cmc0_pcie_irq_mask6;
} CMIC_CMC0_PCIE_IRQ_MASK6r_t;

#define CMIC_CMC0_PCIE_IRQ_MASK6r_CLR(r) (r).cmic_cmc0_pcie_irq_mask6[0] = 0
#define CMIC_CMC0_PCIE_IRQ_MASK6r_SET(r,d) (r).cmic_cmc0_pcie_irq_mask6[0] = d
#define CMIC_CMC0_PCIE_IRQ_MASK6r_GET(r) (r).cmic_cmc0_pcie_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PCIE_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc0_pcie_irq_mask6[0])
#define CMIC_CMC0_PCIE_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc0_pcie_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PCIE_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PCIE_MISCEL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PCIE_MISCELr_OFFSET 0x00031470

#define CMIC_CMC0_PCIE_MISCELr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PCIE_MISCEL.
 */
typedef union CMIC_CMC0_PCIE_MISCELr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pcie_miscel[1];
	uint32_t _cmic_cmc0_pcie_miscel;
} CMIC_CMC0_PCIE_MISCELr_t;

#define CMIC_CMC0_PCIE_MISCELr_CLR(r) (r).cmic_cmc0_pcie_miscel[0] = 0
#define CMIC_CMC0_PCIE_MISCELr_SET(r,d) (r).cmic_cmc0_pcie_miscel[0] = d
#define CMIC_CMC0_PCIE_MISCELr_GET(r) (r).cmic_cmc0_pcie_miscel[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PCIE_MISCELr_MSI_PACING_DELAYf_GET(r) (((r).cmic_cmc0_pcie_miscel[0]) & 0xf)
#define CMIC_CMC0_PCIE_MISCELr_MSI_PACING_DELAYf_SET(r,f) (r).cmic_cmc0_pcie_miscel[0]=(((r).cmic_cmc0_pcie_miscel[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC0_PCIE_MISCELr_ENABLE_MSIf_GET(r) ((((r).cmic_cmc0_pcie_miscel[0]) >> 4) & 0x1)
#define CMIC_CMC0_PCIE_MISCELr_ENABLE_MSIf_SET(r,f) (r).cmic_cmc0_pcie_miscel[0]=(((r).cmic_cmc0_pcie_miscel[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_PCIE_MISCELr_MSI_PACING_DELAY_GRANULARITYf_GET(r) ((((r).cmic_cmc0_pcie_miscel[0]) >> 5) & 0x7)
#define CMIC_CMC0_PCIE_MISCELr_MSI_PACING_DELAY_GRANULARITYf_SET(r,f) (r).cmic_cmc0_pcie_miscel[0]=(((r).cmic_cmc0_pcie_miscel[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define CMIC_CMC0_PCIE_MISCELr_MSI_ADDR_SELf_GET(r) ((((r).cmic_cmc0_pcie_miscel[0]) >> 8) & 0x1)
#define CMIC_CMC0_PCIE_MISCELr_MSI_ADDR_SELf_SET(r,f) (r).cmic_cmc0_pcie_miscel[0]=(((r).cmic_cmc0_pcie_miscel[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC0_PCIE_MISCELr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_CH0_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_CH0_RXPKTr_OFFSET 0x00031480

#define CMIC_CMC0_PKT_COUNT_CH0_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_CH0_RXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_CH0_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_ch0_rxpkt[1];
	uint32_t _cmic_cmc0_pkt_count_ch0_rxpkt;
} CMIC_CMC0_PKT_COUNT_CH0_RXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_CH0_RXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_ch0_rxpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_CH0_RXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_ch0_rxpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_CH0_RXPKTr_GET(r) (r).cmic_cmc0_pkt_count_ch0_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_CH0_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_ch0_rxpkt[0])
#define CMIC_CMC0_PKT_COUNT_CH0_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_ch0_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_CH0_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_CH0_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_CH0_TXPKTr_OFFSET 0x00031484

#define CMIC_CMC0_PKT_COUNT_CH0_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_CH0_TXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_CH0_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_ch0_txpkt[1];
	uint32_t _cmic_cmc0_pkt_count_ch0_txpkt;
} CMIC_CMC0_PKT_COUNT_CH0_TXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_CH0_TXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_ch0_txpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_CH0_TXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_ch0_txpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_CH0_TXPKTr_GET(r) (r).cmic_cmc0_pkt_count_ch0_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_CH0_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_ch0_txpkt[0])
#define CMIC_CMC0_PKT_COUNT_CH0_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_ch0_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_CH0_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_CH1_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_CH1_RXPKTr_OFFSET 0x00031488

#define CMIC_CMC0_PKT_COUNT_CH1_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_CH1_RXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_CH1_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_ch1_rxpkt[1];
	uint32_t _cmic_cmc0_pkt_count_ch1_rxpkt;
} CMIC_CMC0_PKT_COUNT_CH1_RXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_CH1_RXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_ch1_rxpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_CH1_RXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_ch1_rxpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_CH1_RXPKTr_GET(r) (r).cmic_cmc0_pkt_count_ch1_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_CH1_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_ch1_rxpkt[0])
#define CMIC_CMC0_PKT_COUNT_CH1_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_ch1_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_CH1_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_CH1_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_CH1_TXPKTr_OFFSET 0x0003148c

#define CMIC_CMC0_PKT_COUNT_CH1_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_CH1_TXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_CH1_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_ch1_txpkt[1];
	uint32_t _cmic_cmc0_pkt_count_ch1_txpkt;
} CMIC_CMC0_PKT_COUNT_CH1_TXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_CH1_TXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_ch1_txpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_CH1_TXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_ch1_txpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_CH1_TXPKTr_GET(r) (r).cmic_cmc0_pkt_count_ch1_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_CH1_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_ch1_txpkt[0])
#define CMIC_CMC0_PKT_COUNT_CH1_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_ch1_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_CH1_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_CH2_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_CH2_RXPKTr_OFFSET 0x00031490

#define CMIC_CMC0_PKT_COUNT_CH2_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_CH2_RXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_CH2_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_ch2_rxpkt[1];
	uint32_t _cmic_cmc0_pkt_count_ch2_rxpkt;
} CMIC_CMC0_PKT_COUNT_CH2_RXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_CH2_RXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_ch2_rxpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_CH2_RXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_ch2_rxpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_CH2_RXPKTr_GET(r) (r).cmic_cmc0_pkt_count_ch2_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_CH2_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_ch2_rxpkt[0])
#define CMIC_CMC0_PKT_COUNT_CH2_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_ch2_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_CH2_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_CH2_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_CH2_TXPKTr_OFFSET 0x00031494

#define CMIC_CMC0_PKT_COUNT_CH2_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_CH2_TXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_CH2_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_ch2_txpkt[1];
	uint32_t _cmic_cmc0_pkt_count_ch2_txpkt;
} CMIC_CMC0_PKT_COUNT_CH2_TXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_CH2_TXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_ch2_txpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_CH2_TXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_ch2_txpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_CH2_TXPKTr_GET(r) (r).cmic_cmc0_pkt_count_ch2_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_CH2_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_ch2_txpkt[0])
#define CMIC_CMC0_PKT_COUNT_CH2_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_ch2_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_CH2_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_CH3_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_CH3_RXPKTr_OFFSET 0x00031498

#define CMIC_CMC0_PKT_COUNT_CH3_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_CH3_RXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_CH3_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_ch3_rxpkt[1];
	uint32_t _cmic_cmc0_pkt_count_ch3_rxpkt;
} CMIC_CMC0_PKT_COUNT_CH3_RXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_CH3_RXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_ch3_rxpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_CH3_RXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_ch3_rxpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_CH3_RXPKTr_GET(r) (r).cmic_cmc0_pkt_count_ch3_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_CH3_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_ch3_rxpkt[0])
#define CMIC_CMC0_PKT_COUNT_CH3_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_ch3_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_CH3_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_CH3_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_CH3_TXPKTr_OFFSET 0x0003149c

#define CMIC_CMC0_PKT_COUNT_CH3_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_CH3_TXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_CH3_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_ch3_txpkt[1];
	uint32_t _cmic_cmc0_pkt_count_ch3_txpkt;
} CMIC_CMC0_PKT_COUNT_CH3_TXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_CH3_TXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_ch3_txpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_CH3_TXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_ch3_txpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_CH3_TXPKTr_GET(r) (r).cmic_cmc0_pkt_count_ch3_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_CH3_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_ch3_txpkt[0])
#define CMIC_CMC0_PKT_COUNT_CH3_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_ch3_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_CH3_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_RXPKTr_OFFSET 0x000314a0

#define CMIC_CMC0_PKT_COUNT_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_RXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_rxpkt[1];
	uint32_t _cmic_cmc0_pkt_count_rxpkt;
} CMIC_CMC0_PKT_COUNT_RXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_RXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_rxpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_RXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_rxpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_RXPKTr_GET(r) (r).cmic_cmc0_pkt_count_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_rxpkt[0])
#define CMIC_CMC0_PKT_COUNT_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PKT_COUNT_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PKT_COUNT_TXPKTr_OFFSET 0x000314a4

#define CMIC_CMC0_PKT_COUNT_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PKT_COUNT_TXPKT.
 */
typedef union CMIC_CMC0_PKT_COUNT_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_pkt_count_txpkt[1];
	uint32_t _cmic_cmc0_pkt_count_txpkt;
} CMIC_CMC0_PKT_COUNT_TXPKTr_t;

#define CMIC_CMC0_PKT_COUNT_TXPKTr_CLR(r) (r).cmic_cmc0_pkt_count_txpkt[0] = 0
#define CMIC_CMC0_PKT_COUNT_TXPKTr_SET(r,d) (r).cmic_cmc0_pkt_count_txpkt[0] = d
#define CMIC_CMC0_PKT_COUNT_TXPKTr_GET(r) (r).cmic_cmc0_pkt_count_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PKT_COUNT_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc0_pkt_count_txpkt[0])
#define CMIC_CMC0_PKT_COUNT_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc0_pkt_count_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PKT_COUNT_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PROGRAMMABLE_COS_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK0r_OFFSET 0x0003119c

#define CMIC_CMC0_PROGRAMMABLE_COS_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PROGRAMMABLE_COS_MASK0.
 */
typedef union CMIC_CMC0_PROGRAMMABLE_COS_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_programmable_cos_mask0[1];
	uint32_t _cmic_cmc0_programmable_cos_mask0;
} CMIC_CMC0_PROGRAMMABLE_COS_MASK0r_t;

#define CMIC_CMC0_PROGRAMMABLE_COS_MASK0r_CLR(r) (r).cmic_cmc0_programmable_cos_mask0[0] = 0
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK0r_SET(r,d) (r).cmic_cmc0_programmable_cos_mask0[0] = d
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK0r_GET(r) (r).cmic_cmc0_programmable_cos_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK0r_COS_MASKf_GET(r) ((r).cmic_cmc0_programmable_cos_mask0[0])
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK0r_COS_MASKf_SET(r,f) (r).cmic_cmc0_programmable_cos_mask0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PROGRAMMABLE_COS_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_PROGRAMMABLE_COS_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK1r_OFFSET 0x000311a0

#define CMIC_CMC0_PROGRAMMABLE_COS_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_PROGRAMMABLE_COS_MASK1.
 */
typedef union CMIC_CMC0_PROGRAMMABLE_COS_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_programmable_cos_mask1[1];
	uint32_t _cmic_cmc0_programmable_cos_mask1;
} CMIC_CMC0_PROGRAMMABLE_COS_MASK1r_t;

#define CMIC_CMC0_PROGRAMMABLE_COS_MASK1r_CLR(r) (r).cmic_cmc0_programmable_cos_mask1[0] = 0
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK1r_SET(r,d) (r).cmic_cmc0_programmable_cos_mask1[0] = d
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK1r_GET(r) (r).cmic_cmc0_programmable_cos_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK1r_COS_MASKf_GET(r) ((r).cmic_cmc0_programmable_cos_mask1[0])
#define CMIC_CMC0_PROGRAMMABLE_COS_MASK1r_COS_MASKf_SET(r,f) (r).cmic_cmc0_programmable_cos_mask1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_PROGRAMMABLE_COS_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_RCPU_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_RCPU_IRQ_MASK0r_OFFSET 0x00031450

#define CMIC_CMC0_RCPU_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_RCPU_IRQ_MASK0.
 */
typedef union CMIC_CMC0_RCPU_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_rcpu_irq_mask0[1];
	uint32_t _cmic_cmc0_rcpu_irq_mask0;
} CMIC_CMC0_RCPU_IRQ_MASK0r_t;

#define CMIC_CMC0_RCPU_IRQ_MASK0r_CLR(r) (r).cmic_cmc0_rcpu_irq_mask0[0] = 0
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SET(r,d) (r).cmic_cmc0_rcpu_irq_mask0[0] = d
#define CMIC_CMC0_RCPU_IRQ_MASK0r_GET(r) (r).cmic_cmc0_rcpu_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc0_rcpu_irq_mask0[0]) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_rcpu_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC0_RCPU_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_rcpu_irq_mask0[0]=(((r).cmic_cmc0_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC0_RCPU_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_OFFSET 0x00031600

#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_CONTROL.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_control[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_control;
} CMIC_CMC0_SBUSDMA_CH0_CONTROLr_t;

#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_control[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_control[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_GET(r) (r).cmic_cmc0_sbusdma_ch0_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_STARTf_GET(r) (((r).cmic_cmc0_sbusdma_ch0_control[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_control[0]=(((r).cmic_cmc0_sbusdma_ch0_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_control[0]=(((r).cmic_cmc0_sbusdma_ch0_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_control[0]) >> 2) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_control[0]=(((r).cmic_cmc0_sbusdma_ch0_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_control[0]) >> 3) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_control[0]=(((r).cmic_cmc0_sbusdma_ch0_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_COUNTr_OFFSET 0x00031608

#define CMIC_CMC0_SBUSDMA_CH0_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_COUNT.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_count[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_count;
} CMIC_CMC0_SBUSDMA_CH0_COUNTr_t;

#define CMIC_CMC0_SBUSDMA_CH0_COUNTr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_count[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_COUNTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_count[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_COUNTr_GET(r) (r).cmic_cmc0_sbusdma_ch0_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_COUNTr_COUNTf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_count[0])
#define CMIC_CMC0_SBUSDMA_CH0_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr_OFFSET 0x00031628

#define CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_cur_desc_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_cur_desc_address;
} CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_cur_desc_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_cur_desc_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_cur_desc_address[0])
#define CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_OFFSET 0x00031620

#define CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_cur_hostmem_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_cur_hostmem_address;
} CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_cur_hostmem_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_cur_hostmem_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_cur_hostmem_address[0])
#define CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x00031630

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_count;
} CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_count[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_count[0])
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x00031638

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x0003163c

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_opcode;
} CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_opcode[0])
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x0003162c

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_request;
} CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_request[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_request[0])
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x00031634

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_OFFSET 0x00031624

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_cur_sbus_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_cur_sbus_address;
} CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbus_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_cur_sbus_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_cur_sbus_address[0])
#define CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr_OFFSET 0x00031618

#define CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_desc_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_desc_start_address;
} CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_desc_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_desc_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_desc_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_OFFSET 0x00031614

#define CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_hostmem_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_hostmem_start_address;
} CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_hostmem_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_hostmem_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_hostmem_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr_OFFSET 0x000316fc

#define CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_ITER_COUNT.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_iter_count[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_iter_count;
} CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr_t;

#define CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_iter_count[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_iter_count[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr_GET(r) (r).cmic_cmc0_sbusdma_ch0_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_iter_count[0])
#define CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_OPCODEr_OFFSET 0x0003160c

#define CMIC_CMC0_SBUSDMA_CH0_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_OPCODE.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_opcode[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_opcode;
} CMIC_CMC0_SBUSDMA_CH0_OPCODEr_t;

#define CMIC_CMC0_SBUSDMA_CH0_OPCODEr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_opcode[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_OPCODEr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_opcode[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_OPCODEr_GET(r) (r).cmic_cmc0_sbusdma_ch0_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_opcode[0])
#define CMIC_CMC0_SBUSDMA_CH0_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_OFFSET 0x00031604

#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_REQUEST.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_request[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_request;
} CMIC_CMC0_SBUSDMA_CH0_REQUESTr_t;

#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_request[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_request[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_GET(r) (r).cmic_cmc0_sbusdma_ch0_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc0_sbusdma_ch0_request[0]) & 0x1f)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 5) & 0x1f)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 10) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 11) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 12) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 13) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 16) & 0xff)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 24) & 0x1f)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 29) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 30) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_request[0]) >> 31) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_request[0]=(((r).cmic_cmc0_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr_OFFSET 0x00031640

#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_sbusdma_debug[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_sbusdma_debug;
} CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr_t;

#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_sbusdma_debug[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_sbusdma_debug[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc0_sbusdma_ch0_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc0_sbusdma_ch0_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_sbusdma_debug[0]=(((r).cmic_cmc0_sbusdma_ch0_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_OFFSET 0x00031644

#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr;
} CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[0]=(((r).cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[0]=(((r).cmic_cmc0_sbusdma_ch0_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x00031648

#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_address;
} CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_address[0])
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x0003164c

#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control;
} CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr_OFFSET 0x00031610

#define CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_sbus_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_sbus_start_address;
} CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_sbus_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_sbus_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_sbus_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_OFFSET 0x0003161c

#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_STATUS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_status[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_status;
} CMIC_CMC0_SBUSDMA_CH0_STATUSr_t;

#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_status[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_status[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_GET(r) (r).cmic_cmc0_sbusdma_ch0_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_DONEf_GET(r) (((r).cmic_cmc0_sbusdma_ch0_status[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_DONEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 2) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 3) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 4) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 5) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 6) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 7) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 8) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 9) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 10) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 11) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 12) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_status[0]) >> 13) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_status[0]=(((r).cmic_cmc0_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_TIMERr_OFFSET 0x000316f0

#define CMIC_CMC0_SBUSDMA_CH0_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_TIMER.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_timer[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_timer;
} CMIC_CMC0_SBUSDMA_CH0_TIMERr_t;

#define CMIC_CMC0_SBUSDMA_CH0_TIMERr_CLR(r) (r).cmic_cmc0_sbusdma_ch0_timer[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_TIMERr_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_timer[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_TIMERr_GET(r) (r).cmic_cmc0_sbusdma_ch0_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_TIMERr_TIMERf_GET(r) ((r).cmic_cmc0_sbusdma_ch0_timer[0])
#define CMIC_CMC0_SBUSDMA_CH0_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_OFFSET 0x00031800

#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_tm_control_0[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_tm_control_0;
} CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_t;

#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_CLR(r) (r).cmic_cmc0_sbusdma_ch0_tm_control_0[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_tm_control_0[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_GET(r) (r).cmic_cmc0_sbusdma_ch0_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc0_sbusdma_ch0_tm_control_0[0]) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_OFFSET 0x00031804

#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_tm_control_1[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_tm_control_1;
} CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_t;

#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_CLR(r) (r).cmic_cmc0_sbusdma_ch0_tm_control_1[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_tm_control_1[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_GET(r) (r).cmic_cmc0_sbusdma_ch0_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc0_sbusdma_ch0_tm_control_1[0]) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_OFFSET 0x0003180c

#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2.
 */
typedef union CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch0_tm_control_2[1];
	uint32_t _cmic_cmc0_sbusdma_ch0_tm_control_2;
} CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_t;

#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_CLR(r) (r).cmic_cmc0_sbusdma_ch0_tm_control_2[0] = 0
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc0_sbusdma_ch0_tm_control_2[0] = d
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_GET(r) (r).cmic_cmc0_sbusdma_ch0_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc0_sbusdma_ch0_tm_control_2[0]) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch0_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH0_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_OFFSET 0x00031650

#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_CONTROL.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_control[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_control;
} CMIC_CMC0_SBUSDMA_CH1_CONTROLr_t;

#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_control[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_control[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_GET(r) (r).cmic_cmc0_sbusdma_ch1_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_STARTf_GET(r) (((r).cmic_cmc0_sbusdma_ch1_control[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_control[0]=(((r).cmic_cmc0_sbusdma_ch1_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_control[0]=(((r).cmic_cmc0_sbusdma_ch1_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_control[0]) >> 2) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_control[0]=(((r).cmic_cmc0_sbusdma_ch1_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_control[0]) >> 3) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_control[0]=(((r).cmic_cmc0_sbusdma_ch1_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_COUNTr_OFFSET 0x00031658

#define CMIC_CMC0_SBUSDMA_CH1_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_COUNT.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_count[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_count;
} CMIC_CMC0_SBUSDMA_CH1_COUNTr_t;

#define CMIC_CMC0_SBUSDMA_CH1_COUNTr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_count[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_COUNTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_count[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_COUNTr_GET(r) (r).cmic_cmc0_sbusdma_ch1_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_COUNTr_COUNTf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_count[0])
#define CMIC_CMC0_SBUSDMA_CH1_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr_OFFSET 0x00031678

#define CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_cur_desc_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_cur_desc_address;
} CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_cur_desc_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_cur_desc_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_cur_desc_address[0])
#define CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_OFFSET 0x00031670

#define CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_cur_hostmem_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_cur_hostmem_address;
} CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_cur_hostmem_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_cur_hostmem_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_cur_hostmem_address[0])
#define CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x00031680

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_count;
} CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_count[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_count[0])
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x00031688

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x0003168c

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_opcode;
} CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_opcode[0])
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x0003167c

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_request;
} CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_request[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_request[0])
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x00031684

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_OFFSET 0x00031674

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_cur_sbus_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_cur_sbus_address;
} CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbus_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_cur_sbus_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_cur_sbus_address[0])
#define CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr_OFFSET 0x00031668

#define CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_desc_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_desc_start_address;
} CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_desc_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_desc_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_desc_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_OFFSET 0x00031664

#define CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_hostmem_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_hostmem_start_address;
} CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_hostmem_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_hostmem_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_hostmem_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr_OFFSET 0x00031700

#define CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_ITER_COUNT.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_iter_count[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_iter_count;
} CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr_t;

#define CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_iter_count[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_iter_count[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr_GET(r) (r).cmic_cmc0_sbusdma_ch1_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_iter_count[0])
#define CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_OPCODEr_OFFSET 0x0003165c

#define CMIC_CMC0_SBUSDMA_CH1_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_OPCODE.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_opcode[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_opcode;
} CMIC_CMC0_SBUSDMA_CH1_OPCODEr_t;

#define CMIC_CMC0_SBUSDMA_CH1_OPCODEr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_opcode[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_OPCODEr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_opcode[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_OPCODEr_GET(r) (r).cmic_cmc0_sbusdma_ch1_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_opcode[0])
#define CMIC_CMC0_SBUSDMA_CH1_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_OFFSET 0x00031654

#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_REQUEST.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_request[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_request;
} CMIC_CMC0_SBUSDMA_CH1_REQUESTr_t;

#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_request[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_request[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_GET(r) (r).cmic_cmc0_sbusdma_ch1_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc0_sbusdma_ch1_request[0]) & 0x1f)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 5) & 0x1f)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 10) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 11) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 12) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 13) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 16) & 0xff)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 24) & 0x1f)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 29) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 30) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_request[0]) >> 31) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_request[0]=(((r).cmic_cmc0_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr_OFFSET 0x00031690

#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_sbusdma_debug[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_sbusdma_debug;
} CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr_t;

#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_sbusdma_debug[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_sbusdma_debug[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc0_sbusdma_ch1_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc0_sbusdma_ch1_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_sbusdma_debug[0]=(((r).cmic_cmc0_sbusdma_ch1_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_OFFSET 0x00031694

#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr;
} CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[0]=(((r).cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[0]=(((r).cmic_cmc0_sbusdma_ch1_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x00031698

#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_address;
} CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_address[0])
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x0003169c

#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control;
} CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr_OFFSET 0x00031660

#define CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_sbus_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_sbus_start_address;
} CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_sbus_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_sbus_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_sbus_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_OFFSET 0x0003166c

#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_STATUS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_status[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_status;
} CMIC_CMC0_SBUSDMA_CH1_STATUSr_t;

#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_status[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_status[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_GET(r) (r).cmic_cmc0_sbusdma_ch1_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_DONEf_GET(r) (((r).cmic_cmc0_sbusdma_ch1_status[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_DONEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 2) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 3) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 4) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 5) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 6) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 7) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 8) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 9) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 10) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 11) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 12) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_status[0]) >> 13) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_status[0]=(((r).cmic_cmc0_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_TIMERr_OFFSET 0x000316f4

#define CMIC_CMC0_SBUSDMA_CH1_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_TIMER.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_timer[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_timer;
} CMIC_CMC0_SBUSDMA_CH1_TIMERr_t;

#define CMIC_CMC0_SBUSDMA_CH1_TIMERr_CLR(r) (r).cmic_cmc0_sbusdma_ch1_timer[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_TIMERr_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_timer[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_TIMERr_GET(r) (r).cmic_cmc0_sbusdma_ch1_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_TIMERr_TIMERf_GET(r) ((r).cmic_cmc0_sbusdma_ch1_timer[0])
#define CMIC_CMC0_SBUSDMA_CH1_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_OFFSET 0x00031810

#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_tm_control_0[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_tm_control_0;
} CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_t;

#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_CLR(r) (r).cmic_cmc0_sbusdma_ch1_tm_control_0[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_tm_control_0[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_GET(r) (r).cmic_cmc0_sbusdma_ch1_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc0_sbusdma_ch1_tm_control_0[0]) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_OFFSET 0x00031814

#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_tm_control_1[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_tm_control_1;
} CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_t;

#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_CLR(r) (r).cmic_cmc0_sbusdma_ch1_tm_control_1[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_tm_control_1[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_GET(r) (r).cmic_cmc0_sbusdma_ch1_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc0_sbusdma_ch1_tm_control_1[0]) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_OFFSET 0x00031818

#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2.
 */
typedef union CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch1_tm_control_2[1];
	uint32_t _cmic_cmc0_sbusdma_ch1_tm_control_2;
} CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_t;

#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_CLR(r) (r).cmic_cmc0_sbusdma_ch1_tm_control_2[0] = 0
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc0_sbusdma_ch1_tm_control_2[0] = d
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_GET(r) (r).cmic_cmc0_sbusdma_ch1_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc0_sbusdma_ch1_tm_control_2[0]) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch1_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH1_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_OFFSET 0x000316a0

#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_CONTROL.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_control[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_control;
} CMIC_CMC0_SBUSDMA_CH2_CONTROLr_t;

#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_control[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_control[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_GET(r) (r).cmic_cmc0_sbusdma_ch2_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_STARTf_GET(r) (((r).cmic_cmc0_sbusdma_ch2_control[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_control[0]=(((r).cmic_cmc0_sbusdma_ch2_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_control[0]=(((r).cmic_cmc0_sbusdma_ch2_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_control[0]) >> 2) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_control[0]=(((r).cmic_cmc0_sbusdma_ch2_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_control[0]) >> 3) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_control[0]=(((r).cmic_cmc0_sbusdma_ch2_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_COUNTr_OFFSET 0x000316a8

#define CMIC_CMC0_SBUSDMA_CH2_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_COUNT.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_count[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_count;
} CMIC_CMC0_SBUSDMA_CH2_COUNTr_t;

#define CMIC_CMC0_SBUSDMA_CH2_COUNTr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_count[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_COUNTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_count[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_COUNTr_GET(r) (r).cmic_cmc0_sbusdma_ch2_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_COUNTr_COUNTf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_count[0])
#define CMIC_CMC0_SBUSDMA_CH2_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr_OFFSET 0x000316c8

#define CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_cur_desc_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_cur_desc_address;
} CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_cur_desc_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_cur_desc_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_cur_desc_address[0])
#define CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_OFFSET 0x000316c0

#define CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_cur_hostmem_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_cur_hostmem_address;
} CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_cur_hostmem_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_cur_hostmem_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_cur_hostmem_address[0])
#define CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x000316d0

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_count;
} CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_count[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_count[0])
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x000316d8

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x000316dc

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_opcode;
} CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_opcode[0])
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x000316cc

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_request;
} CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_request[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_request[0])
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x000316d4

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_OFFSET 0x000316c4

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_cur_sbus_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_cur_sbus_address;
} CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbus_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_cur_sbus_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_cur_sbus_address[0])
#define CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr_OFFSET 0x000316b8

#define CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_desc_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_desc_start_address;
} CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_desc_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_desc_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_desc_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_OFFSET 0x000316b4

#define CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_hostmem_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_hostmem_start_address;
} CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_hostmem_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_hostmem_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_hostmem_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr_OFFSET 0x00031704

#define CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_ITER_COUNT.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_iter_count[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_iter_count;
} CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr_t;

#define CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_iter_count[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_iter_count[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr_GET(r) (r).cmic_cmc0_sbusdma_ch2_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_iter_count[0])
#define CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_OPCODEr_OFFSET 0x000316ac

#define CMIC_CMC0_SBUSDMA_CH2_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_OPCODE.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_opcode[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_opcode;
} CMIC_CMC0_SBUSDMA_CH2_OPCODEr_t;

#define CMIC_CMC0_SBUSDMA_CH2_OPCODEr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_opcode[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_OPCODEr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_opcode[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_OPCODEr_GET(r) (r).cmic_cmc0_sbusdma_ch2_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_opcode[0])
#define CMIC_CMC0_SBUSDMA_CH2_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_OFFSET 0x000316a4

#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_REQUEST.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_request[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_request;
} CMIC_CMC0_SBUSDMA_CH2_REQUESTr_t;

#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_request[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_request[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_GET(r) (r).cmic_cmc0_sbusdma_ch2_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc0_sbusdma_ch2_request[0]) & 0x1f)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 5) & 0x1f)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 10) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 11) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 12) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 13) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 16) & 0xff)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 24) & 0x1f)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 29) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 30) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_request[0]) >> 31) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_request[0]=(((r).cmic_cmc0_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr_OFFSET 0x000316e0

#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_sbusdma_debug[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_sbusdma_debug;
} CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr_t;

#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_sbusdma_debug[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_sbusdma_debug[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc0_sbusdma_ch2_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc0_sbusdma_ch2_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_sbusdma_debug[0]=(((r).cmic_cmc0_sbusdma_ch2_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_OFFSET 0x000316e4

#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr;
} CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[0]=(((r).cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[0]=(((r).cmic_cmc0_sbusdma_ch2_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x000316e8

#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_address;
} CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_address[0])
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x000316ec

#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control;
} CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc0_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr_OFFSET 0x000316b0

#define CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_sbus_start_address[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_sbus_start_address;
} CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_sbus_start_address[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_sbus_start_address[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_sbus_start_address[0])
#define CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_OFFSET 0x000316bc

#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_STATUS.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_status[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_status;
} CMIC_CMC0_SBUSDMA_CH2_STATUSr_t;

#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_status[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_status[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_GET(r) (r).cmic_cmc0_sbusdma_ch2_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_DONEf_GET(r) (((r).cmic_cmc0_sbusdma_ch2_status[0]) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_DONEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 1) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 2) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 3) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 4) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 5) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 6) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 7) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 8) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 9) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 10) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 11) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 12) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_status[0]) >> 13) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_status[0]=(((r).cmic_cmc0_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_TIMERr_OFFSET 0x000316f8

#define CMIC_CMC0_SBUSDMA_CH2_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_TIMER.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_timer[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_timer;
} CMIC_CMC0_SBUSDMA_CH2_TIMERr_t;

#define CMIC_CMC0_SBUSDMA_CH2_TIMERr_CLR(r) (r).cmic_cmc0_sbusdma_ch2_timer[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_TIMERr_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_timer[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_TIMERr_GET(r) (r).cmic_cmc0_sbusdma_ch2_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_TIMERr_TIMERf_GET(r) ((r).cmic_cmc0_sbusdma_ch2_timer[0])
#define CMIC_CMC0_SBUSDMA_CH2_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_OFFSET 0x0003181c

#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_tm_control_0[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_tm_control_0;
} CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_t;

#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_CLR(r) (r).cmic_cmc0_sbusdma_ch2_tm_control_0[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_tm_control_0[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_GET(r) (r).cmic_cmc0_sbusdma_ch2_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc0_sbusdma_ch2_tm_control_0[0]) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_OFFSET 0x00031820

#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_tm_control_1[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_tm_control_1;
} CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_t;

#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_CLR(r) (r).cmic_cmc0_sbusdma_ch2_tm_control_1[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_tm_control_1[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_GET(r) (r).cmic_cmc0_sbusdma_ch2_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc0_sbusdma_ch2_tm_control_1[0]) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_OFFSET 0x00031824

#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2.
 */
typedef union CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sbusdma_ch2_tm_control_2[1];
	uint32_t _cmic_cmc0_sbusdma_ch2_tm_control_2;
} CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_t;

#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_CLR(r) (r).cmic_cmc0_sbusdma_ch2_tm_control_2[0] = 0
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc0_sbusdma_ch2_tm_control_2[0] = d
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_GET(r) (r).cmic_cmc0_sbusdma_ch2_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc0_sbusdma_ch2_tm_control_2[0]) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc0_sbusdma_ch2_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc0_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc0_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC0_SBUSDMA_CH2_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET 0x00031004

#define CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNT.
 */
typedef union CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_schan_ack_data_beat_count[1];
	uint32_t _cmic_cmc0_schan_ack_data_beat_count;
} CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_t;

#define CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_CLR(r) (r).cmic_cmc0_schan_ack_data_beat_count[0] = 0
#define CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_SET(r,d) (r).cmic_cmc0_schan_ack_data_beat_count[0] = d
#define CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_GET(r) (r).cmic_cmc0_schan_ack_data_beat_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_GET(r) (((r).cmic_cmc0_schan_ack_data_beat_count[0]) & 0x1f)
#define CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc0_schan_ack_data_beat_count[0]=(((r).cmic_cmc0_schan_ack_data_beat_count[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_GET(r) ((((r).cmic_cmc0_schan_ack_data_beat_count[0]) >> 5) & 0x7ffffff)
#define CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_SET(r,f) (r).cmic_cmc0_schan_ack_data_beat_count[0]=(((r).cmic_cmc0_schan_ack_data_beat_count[0] & ~((uint32_t)0x7ffffff << 5)) | ((((uint32_t)f) & 0x7ffffff) << 5))

/*******************************************************************************
 * End of 'CMIC_CMC0_SCHAN_ACK_DATA_BEAT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SCHAN_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SCHAN_CTRLr_OFFSET 0x00031000

#define CMIC_CMC0_SCHAN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SCHAN_CTRL.
 */
typedef union CMIC_CMC0_SCHAN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_schan_ctrl[1];
	uint32_t _cmic_cmc0_schan_ctrl;
} CMIC_CMC0_SCHAN_CTRLr_t;

#define CMIC_CMC0_SCHAN_CTRLr_CLR(r) (r).cmic_cmc0_schan_ctrl[0] = 0
#define CMIC_CMC0_SCHAN_CTRLr_SET(r,d) (r).cmic_cmc0_schan_ctrl[0] = d
#define CMIC_CMC0_SCHAN_CTRLr_GET(r) (r).cmic_cmc0_schan_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SCHAN_CTRLr_MSG_STARTf_GET(r) (((r).cmic_cmc0_schan_ctrl[0]) & 0x1)
#define CMIC_CMC0_SCHAN_CTRLr_MSG_STARTf_SET(r,f) (r).cmic_cmc0_schan_ctrl[0]=(((r).cmic_cmc0_schan_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SCHAN_CTRLr_MSG_DONEf_GET(r) ((((r).cmic_cmc0_schan_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC0_SCHAN_CTRLr_MSG_DONEf_SET(r,f) (r).cmic_cmc0_schan_ctrl[0]=(((r).cmic_cmc0_schan_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_SCHAN_CTRLr_ABORTf_GET(r) ((((r).cmic_cmc0_schan_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC0_SCHAN_CTRLr_ABORTf_SET(r,f) (r).cmic_cmc0_schan_ctrl[0]=(((r).cmic_cmc0_schan_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_SCHAN_CTRLr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc0_schan_ctrl[0]) >> 20) & 0x1)
#define CMIC_CMC0_SCHAN_CTRLr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc0_schan_ctrl[0]=(((r).cmic_cmc0_schan_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_SCHAN_CTRLr_NACKf_GET(r) ((((r).cmic_cmc0_schan_ctrl[0]) >> 21) & 0x1)
#define CMIC_CMC0_SCHAN_CTRLr_NACKf_SET(r,f) (r).cmic_cmc0_schan_ctrl[0]=(((r).cmic_cmc0_schan_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_SCHAN_CTRLr_TIMEOUTf_GET(r) ((((r).cmic_cmc0_schan_ctrl[0]) >> 22) & 0x1)
#define CMIC_CMC0_SCHAN_CTRLr_TIMEOUTf_SET(r,f) (r).cmic_cmc0_schan_ctrl[0]=(((r).cmic_cmc0_schan_ctrl[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC0_SCHAN_CTRLr_SCHAN_ERRORf_GET(r) ((((r).cmic_cmc0_schan_ctrl[0]) >> 23) & 0x1)
#define CMIC_CMC0_SCHAN_CTRLr_SCHAN_ERRORf_SET(r,f) (r).cmic_cmc0_schan_ctrl[0]=(((r).cmic_cmc0_schan_ctrl[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))

/*******************************************************************************
 * End of 'CMIC_CMC0_SCHAN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SCHAN_ERR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SCHAN_ERRr_OFFSET 0x00031008

#define CMIC_CMC0_SCHAN_ERRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SCHAN_ERR.
 */
typedef union CMIC_CMC0_SCHAN_ERRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_schan_err[1];
	uint32_t _cmic_cmc0_schan_err;
} CMIC_CMC0_SCHAN_ERRr_t;

#define CMIC_CMC0_SCHAN_ERRr_CLR(r) (r).cmic_cmc0_schan_err[0] = 0
#define CMIC_CMC0_SCHAN_ERRr_SET(r,d) (r).cmic_cmc0_schan_err[0] = d
#define CMIC_CMC0_SCHAN_ERRr_GET(r) (r).cmic_cmc0_schan_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SCHAN_ERRr_NACKf_GET(r) (((r).cmic_cmc0_schan_err[0]) & 0x1)
#define CMIC_CMC0_SCHAN_ERRr_NACKf_SET(r,f) (r).cmic_cmc0_schan_err[0]=(((r).cmic_cmc0_schan_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_SCHAN_ERRr_ERR_CODEf_GET(r) ((((r).cmic_cmc0_schan_err[0]) >> 4) & 0x3)
#define CMIC_CMC0_SCHAN_ERRr_ERR_CODEf_SET(r,f) (r).cmic_cmc0_schan_err[0]=(((r).cmic_cmc0_schan_err[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define CMIC_CMC0_SCHAN_ERRr_ERRBITf_GET(r) ((((r).cmic_cmc0_schan_err[0]) >> 6) & 0x1)
#define CMIC_CMC0_SCHAN_ERRr_ERRBITf_SET(r,f) (r).cmic_cmc0_schan_err[0]=(((r).cmic_cmc0_schan_err[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_SCHAN_ERRr_DATA_LENf_GET(r) ((((r).cmic_cmc0_schan_err[0]) >> 7) & 0x7f)
#define CMIC_CMC0_SCHAN_ERRr_DATA_LENf_SET(r,f) (r).cmic_cmc0_schan_err[0]=(((r).cmic_cmc0_schan_err[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define CMIC_CMC0_SCHAN_ERRr_SRC_PORTf_GET(r) ((((r).cmic_cmc0_schan_err[0]) >> 14) & 0x3f)
#define CMIC_CMC0_SCHAN_ERRr_SRC_PORTf_SET(r,f) (r).cmic_cmc0_schan_err[0]=(((r).cmic_cmc0_schan_err[0] & ~((uint32_t)0x3f << 14)) | ((((uint32_t)f) & 0x3f) << 14))
#define CMIC_CMC0_SCHAN_ERRr_DST_PORTf_GET(r) ((((r).cmic_cmc0_schan_err[0]) >> 20) & 0x3f)
#define CMIC_CMC0_SCHAN_ERRr_DST_PORTf_SET(r,f) (r).cmic_cmc0_schan_err[0]=(((r).cmic_cmc0_schan_err[0] & ~((uint32_t)0x3f << 20)) | ((((uint32_t)f) & 0x3f) << 20))
#define CMIC_CMC0_SCHAN_ERRr_OP_CODEf_GET(r) ((((r).cmic_cmc0_schan_err[0]) >> 26) & 0x3f)
#define CMIC_CMC0_SCHAN_ERRr_OP_CODEf_SET(r,f) (r).cmic_cmc0_schan_err[0]=(((r).cmic_cmc0_schan_err[0] & ~((uint32_t)0x3f << 26)) | ((((uint32_t)f) & 0x3f) << 26))

/*******************************************************************************
 * End of 'CMIC_CMC0_SCHAN_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SCHAN_MESSAGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SCHAN_MESSAGEr_OFFSET 0x0003100c

#define CMIC_CMC0_SCHAN_MESSAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SCHAN_MESSAGE.
 */
typedef union CMIC_CMC0_SCHAN_MESSAGEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_schan_message[1];
	uint32_t _cmic_cmc0_schan_message;
} CMIC_CMC0_SCHAN_MESSAGEr_t;

#define CMIC_CMC0_SCHAN_MESSAGEr_CLR(r) (r).cmic_cmc0_schan_message[0] = 0
#define CMIC_CMC0_SCHAN_MESSAGEr_SET(r,d) (r).cmic_cmc0_schan_message[0] = d
#define CMIC_CMC0_SCHAN_MESSAGEr_GET(r) (r).cmic_cmc0_schan_message[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SCHAN_MESSAGEr_DATAf_GET(r) ((r).cmic_cmc0_schan_message[0])
#define CMIC_CMC0_SCHAN_MESSAGEr_DATAf_SET(r,f) (r).cmic_cmc0_schan_message[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_SCHAN_MESSAGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_STATr_OFFSET 0x0003110c

#define CMIC_CMC0_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_STAT.
 */
typedef union CMIC_CMC0_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_stat[1];
	uint32_t _cmic_cmc0_stat;
} CMIC_CMC0_STATr_t;

#define CMIC_CMC0_STATr_CLR(r) (r).cmic_cmc0_stat[0] = 0
#define CMIC_CMC0_STATr_SET(r,d) (r).cmic_cmc0_stat[0] = d
#define CMIC_CMC0_STATr_GET(r) (r).cmic_cmc0_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_STATr_PEND_BRESP_COUNTf_GET(r) (((r).cmic_cmc0_stat[0]) & 0x7)
#define CMIC_CMC0_STATr_PEND_BRESP_COUNTf_SET(r,f) (r).cmic_cmc0_stat[0]=(((r).cmic_cmc0_stat[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*******************************************************************************
 * End of 'CMIC_CMC0_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_SW_INTR_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_SW_INTR_CONFIGr_OFFSET 0x000314a8

#define CMIC_CMC0_SW_INTR_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_SW_INTR_CONFIG.
 */
typedef union CMIC_CMC0_SW_INTR_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_sw_intr_config[1];
	uint32_t _cmic_cmc0_sw_intr_config;
} CMIC_CMC0_SW_INTR_CONFIGr_t;

#define CMIC_CMC0_SW_INTR_CONFIGr_CLR(r) (r).cmic_cmc0_sw_intr_config[0] = 0
#define CMIC_CMC0_SW_INTR_CONFIGr_SET(r,d) (r).cmic_cmc0_sw_intr_config[0] = d
#define CMIC_CMC0_SW_INTR_CONFIGr_GET(r) (r).cmic_cmc0_sw_intr_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_GET(r) (((r).cmic_cmc0_sw_intr_config[0]) & 0x3)
#define CMIC_CMC0_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_SET(r,f) (r).cmic_cmc0_sw_intr_config[0]=(((r).cmic_cmc0_sw_intr_config[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define CMIC_CMC0_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_GET(r) ((((r).cmic_cmc0_sw_intr_config[0]) >> 2) & 0x1)
#define CMIC_CMC0_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_SET(r,f) (r).cmic_cmc0_sw_intr_config[0]=(((r).cmic_cmc0_sw_intr_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC0_SW_INTR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC0_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC0_IRQ_MASK0r_OFFSET 0x00031428

#define CMIC_CMC0_UC0_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC0_IRQ_MASK0.
 */
typedef union CMIC_CMC0_UC0_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc0_irq_mask0[1];
	uint32_t _cmic_cmc0_uc0_irq_mask0;
} CMIC_CMC0_UC0_IRQ_MASK0r_t;

#define CMIC_CMC0_UC0_IRQ_MASK0r_CLR(r) (r).cmic_cmc0_uc0_irq_mask0[0] = 0
#define CMIC_CMC0_UC0_IRQ_MASK0r_SET(r,d) (r).cmic_cmc0_uc0_irq_mask0[0] = d
#define CMIC_CMC0_UC0_IRQ_MASK0r_GET(r) (r).cmic_cmc0_uc0_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC0_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc0_uc0_irq_mask0[0]) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_UC0_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_UC0_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_UC0_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_UC0_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_UC0_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_UC0_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_UC0_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_UC0_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_UC0_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC0_UC0_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC0_UC0_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask0[0]=(((r).cmic_cmc0_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC0_UC0_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC0_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC0_IRQ_MASK1r_OFFSET 0x0003142c

#define CMIC_CMC0_UC0_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC0_IRQ_MASK1.
 */
typedef union CMIC_CMC0_UC0_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc0_irq_mask1[1];
	uint32_t _cmic_cmc0_uc0_irq_mask1;
} CMIC_CMC0_UC0_IRQ_MASK1r_t;

#define CMIC_CMC0_UC0_IRQ_MASK1r_CLR(r) (r).cmic_cmc0_uc0_irq_mask1[0] = 0
#define CMIC_CMC0_UC0_IRQ_MASK1r_SET(r,d) (r).cmic_cmc0_uc0_irq_mask1[0] = d
#define CMIC_CMC0_UC0_IRQ_MASK1r_GET(r) (r).cmic_cmc0_uc0_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC0_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc0_uc0_irq_mask1[0]) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_UC0_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_UC0_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_UC0_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_UC0_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_UC0_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_UC0_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_UC0_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_UC0_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_UC0_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_UC0_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC0_UC0_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC0_UC0_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_UC0_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_UC0_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_UC0_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_UC0_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_UC0_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_UC0_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc0_uc0_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC0_UC0_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask1[0]=(((r).cmic_cmc0_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC0_UC0_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC0_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC0_IRQ_MASK2r_OFFSET 0x00031430

#define CMIC_CMC0_UC0_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC0_IRQ_MASK2.
 */
typedef union CMIC_CMC0_UC0_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc0_irq_mask2[1];
	uint32_t _cmic_cmc0_uc0_irq_mask2;
} CMIC_CMC0_UC0_IRQ_MASK2r_t;

#define CMIC_CMC0_UC0_IRQ_MASK2r_CLR(r) (r).cmic_cmc0_uc0_irq_mask2[0] = 0
#define CMIC_CMC0_UC0_IRQ_MASK2r_SET(r,d) (r).cmic_cmc0_uc0_irq_mask2[0] = d
#define CMIC_CMC0_UC0_IRQ_MASK2r_GET(r) (r).cmic_cmc0_uc0_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC0_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc0_uc0_irq_mask2[0])
#define CMIC_CMC0_UC0_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC0_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC0_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC0_IRQ_MASK3r_OFFSET 0x00031434

#define CMIC_CMC0_UC0_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC0_IRQ_MASK3.
 */
typedef union CMIC_CMC0_UC0_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc0_irq_mask3[1];
	uint32_t _cmic_cmc0_uc0_irq_mask3;
} CMIC_CMC0_UC0_IRQ_MASK3r_t;

#define CMIC_CMC0_UC0_IRQ_MASK3r_CLR(r) (r).cmic_cmc0_uc0_irq_mask3[0] = 0
#define CMIC_CMC0_UC0_IRQ_MASK3r_SET(r,d) (r).cmic_cmc0_uc0_irq_mask3[0] = d
#define CMIC_CMC0_UC0_IRQ_MASK3r_GET(r) (r).cmic_cmc0_uc0_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC0_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc0_uc0_irq_mask3[0])
#define CMIC_CMC0_UC0_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC0_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC0_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC0_IRQ_MASK4r_OFFSET 0x00031438

#define CMIC_CMC0_UC0_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC0_IRQ_MASK4.
 */
typedef union CMIC_CMC0_UC0_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc0_irq_mask4[1];
	uint32_t _cmic_cmc0_uc0_irq_mask4;
} CMIC_CMC0_UC0_IRQ_MASK4r_t;

#define CMIC_CMC0_UC0_IRQ_MASK4r_CLR(r) (r).cmic_cmc0_uc0_irq_mask4[0] = 0
#define CMIC_CMC0_UC0_IRQ_MASK4r_SET(r,d) (r).cmic_cmc0_uc0_irq_mask4[0] = d
#define CMIC_CMC0_UC0_IRQ_MASK4r_GET(r) (r).cmic_cmc0_uc0_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC0_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc0_uc0_irq_mask4[0])
#define CMIC_CMC0_UC0_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC0_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC0_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC0_IRQ_MASK5r_OFFSET 0x000314c0

#define CMIC_CMC0_UC0_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC0_IRQ_MASK5.
 */
typedef union CMIC_CMC0_UC0_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc0_irq_mask5[1];
	uint32_t _cmic_cmc0_uc0_irq_mask5;
} CMIC_CMC0_UC0_IRQ_MASK5r_t;

#define CMIC_CMC0_UC0_IRQ_MASK5r_CLR(r) (r).cmic_cmc0_uc0_irq_mask5[0] = 0
#define CMIC_CMC0_UC0_IRQ_MASK5r_SET(r,d) (r).cmic_cmc0_uc0_irq_mask5[0] = d
#define CMIC_CMC0_UC0_IRQ_MASK5r_GET(r) (r).cmic_cmc0_uc0_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC0_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc0_uc0_irq_mask5[0])
#define CMIC_CMC0_UC0_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC0_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC0_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC0_IRQ_MASK6r_OFFSET 0x000314c4

#define CMIC_CMC0_UC0_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC0_IRQ_MASK6.
 */
typedef union CMIC_CMC0_UC0_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc0_irq_mask6[1];
	uint32_t _cmic_cmc0_uc0_irq_mask6;
} CMIC_CMC0_UC0_IRQ_MASK6r_t;

#define CMIC_CMC0_UC0_IRQ_MASK6r_CLR(r) (r).cmic_cmc0_uc0_irq_mask6[0] = 0
#define CMIC_CMC0_UC0_IRQ_MASK6r_SET(r,d) (r).cmic_cmc0_uc0_irq_mask6[0] = d
#define CMIC_CMC0_UC0_IRQ_MASK6r_GET(r) (r).cmic_cmc0_uc0_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC0_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc0_uc0_irq_mask6[0])
#define CMIC_CMC0_UC0_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc0_uc0_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC0_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC1_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC1_IRQ_MASK0r_OFFSET 0x0003143c

#define CMIC_CMC0_UC1_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC1_IRQ_MASK0.
 */
typedef union CMIC_CMC0_UC1_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc1_irq_mask0[1];
	uint32_t _cmic_cmc0_uc1_irq_mask0;
} CMIC_CMC0_UC1_IRQ_MASK0r_t;

#define CMIC_CMC0_UC1_IRQ_MASK0r_CLR(r) (r).cmic_cmc0_uc1_irq_mask0[0] = 0
#define CMIC_CMC0_UC1_IRQ_MASK0r_SET(r,d) (r).cmic_cmc0_uc1_irq_mask0[0] = d
#define CMIC_CMC0_UC1_IRQ_MASK0r_GET(r) (r).cmic_cmc0_uc1_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC1_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc0_uc1_irq_mask0[0]) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_UC1_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_UC1_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_UC1_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_UC1_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_UC1_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_UC1_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_UC1_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_UC1_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_UC1_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC0_UC1_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC0_UC1_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask0[0]=(((r).cmic_cmc0_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC0_UC1_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC1_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC1_IRQ_MASK1r_OFFSET 0x00031440

#define CMIC_CMC0_UC1_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC1_IRQ_MASK1.
 */
typedef union CMIC_CMC0_UC1_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc1_irq_mask1[1];
	uint32_t _cmic_cmc0_uc1_irq_mask1;
} CMIC_CMC0_UC1_IRQ_MASK1r_t;

#define CMIC_CMC0_UC1_IRQ_MASK1r_CLR(r) (r).cmic_cmc0_uc1_irq_mask1[0] = 0
#define CMIC_CMC0_UC1_IRQ_MASK1r_SET(r,d) (r).cmic_cmc0_uc1_irq_mask1[0] = d
#define CMIC_CMC0_UC1_IRQ_MASK1r_GET(r) (r).cmic_cmc0_uc1_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC1_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc0_uc1_irq_mask1[0]) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC0_UC1_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC0_UC1_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC0_UC1_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC0_UC1_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC0_UC1_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC0_UC1_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC0_UC1_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC0_UC1_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC0_UC1_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC0_UC1_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC0_UC1_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC0_UC1_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC0_UC1_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC0_UC1_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC0_UC1_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC0_UC1_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC0_UC1_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC0_UC1_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc0_uc1_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC0_UC1_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask1[0]=(((r).cmic_cmc0_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC0_UC1_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC1_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC1_IRQ_MASK2r_OFFSET 0x00031444

#define CMIC_CMC0_UC1_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC1_IRQ_MASK2.
 */
typedef union CMIC_CMC0_UC1_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc1_irq_mask2[1];
	uint32_t _cmic_cmc0_uc1_irq_mask2;
} CMIC_CMC0_UC1_IRQ_MASK2r_t;

#define CMIC_CMC0_UC1_IRQ_MASK2r_CLR(r) (r).cmic_cmc0_uc1_irq_mask2[0] = 0
#define CMIC_CMC0_UC1_IRQ_MASK2r_SET(r,d) (r).cmic_cmc0_uc1_irq_mask2[0] = d
#define CMIC_CMC0_UC1_IRQ_MASK2r_GET(r) (r).cmic_cmc0_uc1_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC1_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc0_uc1_irq_mask2[0])
#define CMIC_CMC0_UC1_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC1_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC1_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC1_IRQ_MASK3r_OFFSET 0x00031448

#define CMIC_CMC0_UC1_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC1_IRQ_MASK3.
 */
typedef union CMIC_CMC0_UC1_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc1_irq_mask3[1];
	uint32_t _cmic_cmc0_uc1_irq_mask3;
} CMIC_CMC0_UC1_IRQ_MASK3r_t;

#define CMIC_CMC0_UC1_IRQ_MASK3r_CLR(r) (r).cmic_cmc0_uc1_irq_mask3[0] = 0
#define CMIC_CMC0_UC1_IRQ_MASK3r_SET(r,d) (r).cmic_cmc0_uc1_irq_mask3[0] = d
#define CMIC_CMC0_UC1_IRQ_MASK3r_GET(r) (r).cmic_cmc0_uc1_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC1_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc0_uc1_irq_mask3[0])
#define CMIC_CMC0_UC1_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC1_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC1_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC1_IRQ_MASK4r_OFFSET 0x0003144c

#define CMIC_CMC0_UC1_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC1_IRQ_MASK4.
 */
typedef union CMIC_CMC0_UC1_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc1_irq_mask4[1];
	uint32_t _cmic_cmc0_uc1_irq_mask4;
} CMIC_CMC0_UC1_IRQ_MASK4r_t;

#define CMIC_CMC0_UC1_IRQ_MASK4r_CLR(r) (r).cmic_cmc0_uc1_irq_mask4[0] = 0
#define CMIC_CMC0_UC1_IRQ_MASK4r_SET(r,d) (r).cmic_cmc0_uc1_irq_mask4[0] = d
#define CMIC_CMC0_UC1_IRQ_MASK4r_GET(r) (r).cmic_cmc0_uc1_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC1_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc0_uc1_irq_mask4[0])
#define CMIC_CMC0_UC1_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC1_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC1_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC1_IRQ_MASK5r_OFFSET 0x000314c8

#define CMIC_CMC0_UC1_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC1_IRQ_MASK5.
 */
typedef union CMIC_CMC0_UC1_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc1_irq_mask5[1];
	uint32_t _cmic_cmc0_uc1_irq_mask5;
} CMIC_CMC0_UC1_IRQ_MASK5r_t;

#define CMIC_CMC0_UC1_IRQ_MASK5r_CLR(r) (r).cmic_cmc0_uc1_irq_mask5[0] = 0
#define CMIC_CMC0_UC1_IRQ_MASK5r_SET(r,d) (r).cmic_cmc0_uc1_irq_mask5[0] = d
#define CMIC_CMC0_UC1_IRQ_MASK5r_GET(r) (r).cmic_cmc0_uc1_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC1_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc0_uc1_irq_mask5[0])
#define CMIC_CMC0_UC1_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC1_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC0_UC1_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC0_UC1_IRQ_MASK6r_OFFSET 0x000314cc

#define CMIC_CMC0_UC1_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC0_UC1_IRQ_MASK6.
 */
typedef union CMIC_CMC0_UC1_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc0_uc1_irq_mask6[1];
	uint32_t _cmic_cmc0_uc1_irq_mask6;
} CMIC_CMC0_UC1_IRQ_MASK6r_t;

#define CMIC_CMC0_UC1_IRQ_MASK6r_CLR(r) (r).cmic_cmc0_uc1_irq_mask6[0] = 0
#define CMIC_CMC0_UC1_IRQ_MASK6r_SET(r,d) (r).cmic_cmc0_uc1_irq_mask6[0] = d
#define CMIC_CMC0_UC1_IRQ_MASK6r_GET(r) (r).cmic_cmc0_uc1_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC0_UC1_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc0_uc1_irq_mask6[0])
#define CMIC_CMC0_UC1_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc0_uc1_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC0_UC1_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_2BIT_ECC_ERROR_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_OFFSET 0x00032454

#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_2BIT_ECC_ERROR_STATUS.
 */
typedef union CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_2bit_ecc_error_status[1];
	uint32_t _cmic_cmc1_2bit_ecc_error_status;
} CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_t;

#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_CLR(r) (r).cmic_cmc1_2bit_ecc_error_status[0] = 0
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_SET(r,d) (r).cmic_cmc1_2bit_ecc_error_status[0] = d
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_GET(r) (r).cmic_cmc1_2bit_ecc_error_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH0_2BIT_ECCERRf_GET(r) (((r).cmic_cmc1_2bit_ecc_error_status[0]) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status[0]=(((r).cmic_cmc1_2bit_ecc_error_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status[0]) >> 1) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status[0]=(((r).cmic_cmc1_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status[0]) >> 2) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status[0]=(((r).cmic_cmc1_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH0_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status[0]) >> 3) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status[0]=(((r).cmic_cmc1_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status[0]) >> 4) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status[0]=(((r).cmic_cmc1_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status[0]) >> 5) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status[0]=(((r).cmic_cmc1_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH3_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status[0]) >> 6) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH3_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status[0]=(((r).cmic_cmc1_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_CCMDMA_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status[0]) >> 7) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUSr_CCMDMA_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status[0]=(((r).cmic_cmc1_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*******************************************************************************
 * End of 'CMIC_CMC1_2BIT_ECC_ERROR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASK
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_OFFSET 0x00032458

#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASK.
 */
typedef union CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_2bit_ecc_error_status_mask[1];
	uint32_t _cmic_cmc1_2bit_ecc_error_status_mask;
} CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_t;

#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_CLR(r) (r).cmic_cmc1_2bit_ecc_error_status_mask[0] = 0
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_SET(r,d) (r).cmic_cmc1_2bit_ecc_error_status_mask[0] = d
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_GET(r) (r).cmic_cmc1_2bit_ecc_error_status_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH0_2BIT_ECCERRf_GET(r) (((r).cmic_cmc1_2bit_ecc_error_status_mask[0]) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc1_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status_mask[0]) >> 1) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc1_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status_mask[0]) >> 2) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc1_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH0_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status_mask[0]) >> 3) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc1_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status_mask[0]) >> 4) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc1_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status_mask[0]) >> 5) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc1_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH3_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status_mask[0]) >> 6) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH3_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc1_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_CCMDMA_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc1_2bit_ecc_error_status_mask[0]) >> 7) & 0x1)
#define CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr_CCMDMA_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc1_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc1_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*******************************************************************************
 * End of 'CMIC_CMC1_2BIT_ECC_ERROR_STATUS_MASKr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_AXIIC_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_AXIIC_TM_CONTROL_0r_OFFSET 0x00032850

#define CMIC_CMC1_AXIIC_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_AXIIC_TM_CONTROL_0.
 */
typedef union CMIC_CMC1_AXIIC_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_axiic_tm_control_0[1];
	uint32_t _cmic_cmc1_axiic_tm_control_0;
} CMIC_CMC1_AXIIC_TM_CONTROL_0r_t;

#define CMIC_CMC1_AXIIC_TM_CONTROL_0r_CLR(r) (r).cmic_cmc1_axiic_tm_control_0[0] = 0
#define CMIC_CMC1_AXIIC_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc1_axiic_tm_control_0[0] = d
#define CMIC_CMC1_AXIIC_TM_CONTROL_0r_GET(r) (r).cmic_cmc1_axiic_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_TMf_GET(r) (((r).cmic_cmc1_axiic_tm_control_0[0]) & 0xfff)
#define CMIC_CMC1_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_TMf_SET(r,f) (r).cmic_cmc1_axiic_tm_control_0[0]=(((r).cmic_cmc1_axiic_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_LVMf_GET(r) ((((r).cmic_cmc1_axiic_tm_control_0[0]) >> 12) & 0x1)
#define CMIC_CMC1_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_LVMf_SET(r,f) (r).cmic_cmc1_axiic_tm_control_0[0]=(((r).cmic_cmc1_axiic_tm_control_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC1_AXIIC_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_AXIIC_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_OFFSET 0x00032854

#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_AXIIC_TM_CONTROL_1.
 */
typedef union CMIC_CMC1_AXIIC_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_axiic_tm_control_1[1];
	uint32_t _cmic_cmc1_axiic_tm_control_1;
} CMIC_CMC1_AXIIC_TM_CONTROL_1r_t;

#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_CLR(r) (r).cmic_cmc1_axiic_tm_control_1[0] = 0
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc1_axiic_tm_control_1[0] = d
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_GET(r) (r).cmic_cmc1_axiic_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_00f_GET(r) (((r).cmic_cmc1_axiic_tm_control_1[0]) & 0xfff)
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_00f_SET(r,f) (r).cmic_cmc1_axiic_tm_control_1[0]=(((r).cmic_cmc1_axiic_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_00f_GET(r) ((((r).cmic_cmc1_axiic_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_00f_SET(r,f) (r).cmic_cmc1_axiic_tm_control_1[0]=(((r).cmic_cmc1_axiic_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_01f_GET(r) ((((r).cmic_cmc1_axiic_tm_control_1[0]) >> 13) & 0xfff)
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_01f_SET(r,f) (r).cmic_cmc1_axiic_tm_control_1[0]=(((r).cmic_cmc1_axiic_tm_control_1[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_01f_GET(r) ((((r).cmic_cmc1_axiic_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC1_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_01f_SET(r,f) (r).cmic_cmc1_axiic_tm_control_1[0]=(((r).cmic_cmc1_axiic_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_AXIIC_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_AXIIC_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_OFFSET 0x00032858

#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_AXIIC_TM_CONTROL_2.
 */
typedef union CMIC_CMC1_AXIIC_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_axiic_tm_control_2[1];
	uint32_t _cmic_cmc1_axiic_tm_control_2;
} CMIC_CMC1_AXIIC_TM_CONTROL_2r_t;

#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_CLR(r) (r).cmic_cmc1_axiic_tm_control_2[0] = 0
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc1_axiic_tm_control_2[0] = d
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_GET(r) (r).cmic_cmc1_axiic_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_00f_GET(r) (((r).cmic_cmc1_axiic_tm_control_2[0]) & 0xfff)
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_00f_SET(r,f) (r).cmic_cmc1_axiic_tm_control_2[0]=(((r).cmic_cmc1_axiic_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_00f_GET(r) ((((r).cmic_cmc1_axiic_tm_control_2[0]) >> 12) & 0x1)
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_00f_SET(r,f) (r).cmic_cmc1_axiic_tm_control_2[0]=(((r).cmic_cmc1_axiic_tm_control_2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_01f_GET(r) ((((r).cmic_cmc1_axiic_tm_control_2[0]) >> 13) & 0xfff)
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_01f_SET(r,f) (r).cmic_cmc1_axiic_tm_control_2[0]=(((r).cmic_cmc1_axiic_tm_control_2[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_01f_GET(r) ((((r).cmic_cmc1_axiic_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC1_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_01f_SET(r,f) (r).cmic_cmc1_axiic_tm_control_2[0]=(((r).cmic_cmc1_axiic_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_AXIIC_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCMDMA_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_OFFSET 0x00032848

#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCMDMA_TM_CONTROL_0.
 */
typedef union CMIC_CMC1_CCMDMA_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccmdma_tm_control_0[1];
	uint32_t _cmic_cmc1_ccmdma_tm_control_0;
} CMIC_CMC1_CCMDMA_TM_CONTROL_0r_t;

#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_CLR(r) (r).cmic_cmc1_ccmdma_tm_control_0[0] = 0
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc1_ccmdma_tm_control_0[0] = d
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_GET(r) (r).cmic_cmc1_ccmdma_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_BUFF_TM0f_GET(r) (((r).cmic_cmc1_ccmdma_tm_control_0[0]) & 0xfff)
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_BUFF_TM0f_SET(r,f) (r).cmic_cmc1_ccmdma_tm_control_0[0]=(((r).cmic_cmc1_ccmdma_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_BUFF_TM1f_GET(r) ((((r).cmic_cmc1_ccmdma_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_BUFF_TM1f_SET(r,f) (r).cmic_cmc1_ccmdma_tm_control_0[0]=(((r).cmic_cmc1_ccmdma_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_BUFF_LVM0f_GET(r) ((((r).cmic_cmc1_ccmdma_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_BUFF_LVM0f_SET(r,f) (r).cmic_cmc1_ccmdma_tm_control_0[0]=(((r).cmic_cmc1_ccmdma_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_BUFF_LVM1f_GET(r) ((((r).cmic_cmc1_ccmdma_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC1_CCMDMA_TM_CONTROL_0r_BUFF_LVM1f_SET(r,f) (r).cmic_cmc1_ccmdma_tm_control_0[0]=(((r).cmic_cmc1_ccmdma_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_CCMDMA_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCMDMA_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCMDMA_TM_CONTROL_1r_OFFSET 0x0003284c

#define CMIC_CMC1_CCMDMA_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCMDMA_TM_CONTROL_1.
 */
typedef union CMIC_CMC1_CCMDMA_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccmdma_tm_control_1[1];
	uint32_t _cmic_cmc1_ccmdma_tm_control_1;
} CMIC_CMC1_CCMDMA_TM_CONTROL_1r_t;

#define CMIC_CMC1_CCMDMA_TM_CONTROL_1r_CLR(r) (r).cmic_cmc1_ccmdma_tm_control_1[0] = 0
#define CMIC_CMC1_CCMDMA_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc1_ccmdma_tm_control_1[0] = d
#define CMIC_CMC1_CCMDMA_TM_CONTROL_1r_GET(r) (r).cmic_cmc1_ccmdma_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCMDMA_TM_CONTROL_1r_ECCBUFF_TM0f_GET(r) (((r).cmic_cmc1_ccmdma_tm_control_1[0]) & 0xfff)
#define CMIC_CMC1_CCMDMA_TM_CONTROL_1r_ECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_ccmdma_tm_control_1[0]=(((r).cmic_cmc1_ccmdma_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_CCMDMA_TM_CONTROL_1r_ECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_ccmdma_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC1_CCMDMA_TM_CONTROL_1r_ECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_ccmdma_tm_control_1[0]=(((r).cmic_cmc1_ccmdma_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC1_CCMDMA_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_CFGr_OFFSET 0x000323ac

#define CMIC_CMC1_CCM_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_CFG.
 */
typedef union CMIC_CMC1_CCM_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_cfg[1];
	uint32_t _cmic_cmc1_ccm_dma_cfg;
} CMIC_CMC1_CCM_DMA_CFGr_t;

#define CMIC_CMC1_CCM_DMA_CFGr_CLR(r) (r).cmic_cmc1_ccm_dma_cfg[0] = 0
#define CMIC_CMC1_CCM_DMA_CFGr_SET(r,d) (r).cmic_cmc1_ccm_dma_cfg[0] = d
#define CMIC_CMC1_CCM_DMA_CFGr_GET(r) (r).cmic_cmc1_ccm_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_CFGr_ENf_GET(r) (((r).cmic_cmc1_ccm_dma_cfg[0]) & 0x1)
#define CMIC_CMC1_CCM_DMA_CFGr_ENf_SET(r,f) (r).cmic_cmc1_ccm_dma_cfg[0]=(((r).cmic_cmc1_ccm_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_CCM_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc1_ccm_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC1_CCM_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc1_ccm_dma_cfg[0]=(((r).cmic_cmc1_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_CCM_DMA_CFGr_PROCESSOR0_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ccm_dma_cfg[0]) >> 2) & 0x1)
#define CMIC_CMC1_CCM_DMA_CFGr_PROCESSOR0_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ccm_dma_cfg[0]=(((r).cmic_cmc1_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_CCM_DMA_CFGr_PROCESSOR1_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ccm_dma_cfg[0]) >> 3) & 0x1)
#define CMIC_CMC1_CCM_DMA_CFGr_PROCESSOR1_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ccm_dma_cfg[0]=(((r).cmic_cmc1_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr_OFFSET 0x000323b4

#define CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDR.
 */
typedef union CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_cur_host0_addr[1];
	uint32_t _cmic_cmc1_ccm_dma_cur_host0_addr;
} CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr_t;

#define CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr_CLR(r) (r).cmic_cmc1_ccm_dma_cur_host0_addr[0] = 0
#define CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr_SET(r,d) (r).cmic_cmc1_ccm_dma_cur_host0_addr[0] = d
#define CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr_GET(r) (r).cmic_cmc1_ccm_dma_cur_host0_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr_ADDRf_GET(r) ((r).cmic_cmc1_ccm_dma_cur_host0_addr[0])
#define CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc1_ccm_dma_cur_host0_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_CUR_HOST0_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr_OFFSET 0x000323b8

#define CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDR.
 */
typedef union CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_cur_host1_addr[1];
	uint32_t _cmic_cmc1_ccm_dma_cur_host1_addr;
} CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr_t;

#define CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr_CLR(r) (r).cmic_cmc1_ccm_dma_cur_host1_addr[0] = 0
#define CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr_SET(r,d) (r).cmic_cmc1_ccm_dma_cur_host1_addr[0] = d
#define CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr_GET(r) (r).cmic_cmc1_ccm_dma_cur_host1_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr_ADDRf_GET(r) ((r).cmic_cmc1_ccm_dma_cur_host1_addr[0])
#define CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc1_ccm_dma_cur_host1_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_CUR_HOST1_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_ECCERR_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_ECCERR_ADDRr_OFFSET 0x000323bc

#define CMIC_CMC1_CCM_DMA_ECCERR_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_ECCERR_ADDR.
 */
typedef union CMIC_CMC1_CCM_DMA_ECCERR_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_eccerr_addr[1];
	uint32_t _cmic_cmc1_ccm_dma_eccerr_addr;
} CMIC_CMC1_CCM_DMA_ECCERR_ADDRr_t;

#define CMIC_CMC1_CCM_DMA_ECCERR_ADDRr_CLR(r) (r).cmic_cmc1_ccm_dma_eccerr_addr[0] = 0
#define CMIC_CMC1_CCM_DMA_ECCERR_ADDRr_SET(r,d) (r).cmic_cmc1_ccm_dma_eccerr_addr[0] = d
#define CMIC_CMC1_CCM_DMA_ECCERR_ADDRr_GET(r) (r).cmic_cmc1_ccm_dma_eccerr_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_ECCERR_ADDRr_ADDRf_GET(r) ((r).cmic_cmc1_ccm_dma_eccerr_addr[0])
#define CMIC_CMC1_CCM_DMA_ECCERR_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc1_ccm_dma_eccerr_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_ECCERR_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_OFFSET 0x000323c4

#define CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_eccerr_control[1];
	uint32_t _cmic_cmc1_ccm_dma_eccerr_control;
} CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc1_ccm_dma_eccerr_control[0] = 0
#define CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc1_ccm_dma_eccerr_control[0] = d
#define CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc1_ccm_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc1_ccm_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_ccm_dma_eccerr_control[0]=(((r).cmic_cmc1_ccm_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc1_ccm_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_ccm_dma_eccerr_control[0]=(((r).cmic_cmc1_ccm_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_ENTRY_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_ENTRY_COUNTr_OFFSET 0x000323a8

#define CMIC_CMC1_CCM_DMA_ENTRY_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_ENTRY_COUNT.
 */
typedef union CMIC_CMC1_CCM_DMA_ENTRY_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_entry_count[1];
	uint32_t _cmic_cmc1_ccm_dma_entry_count;
} CMIC_CMC1_CCM_DMA_ENTRY_COUNTr_t;

#define CMIC_CMC1_CCM_DMA_ENTRY_COUNTr_CLR(r) (r).cmic_cmc1_ccm_dma_entry_count[0] = 0
#define CMIC_CMC1_CCM_DMA_ENTRY_COUNTr_SET(r,d) (r).cmic_cmc1_ccm_dma_entry_count[0] = d
#define CMIC_CMC1_CCM_DMA_ENTRY_COUNTr_GET(r) (r).cmic_cmc1_ccm_dma_entry_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_ENTRY_COUNTr_COUNTf_GET(r) (((r).cmic_cmc1_ccm_dma_entry_count[0]) & 0x3fffffff)
#define CMIC_CMC1_CCM_DMA_ENTRY_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc1_ccm_dma_entry_count[0]=(((r).cmic_cmc1_ccm_dma_entry_count[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_ENTRY_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr_OFFSET 0x000323a0

#define CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDR.
 */
typedef union CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_host0_mem_start_addr[1];
	uint32_t _cmic_cmc1_ccm_dma_host0_mem_start_addr;
} CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr_t;

#define CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr_CLR(r) (r).cmic_cmc1_ccm_dma_host0_mem_start_addr[0] = 0
#define CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr_SET(r,d) (r).cmic_cmc1_ccm_dma_host0_mem_start_addr[0] = d
#define CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr_GET(r) (r).cmic_cmc1_ccm_dma_host0_mem_start_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr_ADDRf_GET(r) ((r).cmic_cmc1_ccm_dma_host0_mem_start_addr[0])
#define CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc1_ccm_dma_host0_mem_start_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_HOST0_MEM_START_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr_OFFSET 0x000323a4

#define CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDR.
 */
typedef union CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_host1_mem_start_addr[1];
	uint32_t _cmic_cmc1_ccm_dma_host1_mem_start_addr;
} CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr_t;

#define CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr_CLR(r) (r).cmic_cmc1_ccm_dma_host1_mem_start_addr[0] = 0
#define CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr_SET(r,d) (r).cmic_cmc1_ccm_dma_host1_mem_start_addr[0] = d
#define CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr_GET(r) (r).cmic_cmc1_ccm_dma_host1_mem_start_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr_ADDRf_GET(r) ((r).cmic_cmc1_ccm_dma_host1_mem_start_addr[0])
#define CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc1_ccm_dma_host1_mem_start_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_HOST1_MEM_START_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_STATr_OFFSET 0x000323b0

#define CMIC_CMC1_CCM_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_STAT.
 */
typedef union CMIC_CMC1_CCM_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_stat[1];
	uint32_t _cmic_cmc1_ccm_dma_stat;
} CMIC_CMC1_CCM_DMA_STATr_t;

#define CMIC_CMC1_CCM_DMA_STATr_CLR(r) (r).cmic_cmc1_ccm_dma_stat[0] = 0
#define CMIC_CMC1_CCM_DMA_STATr_SET(r,d) (r).cmic_cmc1_ccm_dma_stat[0] = d
#define CMIC_CMC1_CCM_DMA_STATr_GET(r) (r).cmic_cmc1_ccm_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_STATr_DONEf_GET(r) (((r).cmic_cmc1_ccm_dma_stat[0]) & 0x1)
#define CMIC_CMC1_CCM_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc1_ccm_dma_stat[0]=(((r).cmic_cmc1_ccm_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_CCM_DMA_STATr_ERRORf_GET(r) ((((r).cmic_cmc1_ccm_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC1_CCM_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc1_ccm_dma_stat[0]=(((r).cmic_cmc1_ccm_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_CCM_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_ccm_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC1_CCM_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_ccm_dma_stat[0]=(((r).cmic_cmc1_ccm_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CCM_DMA_STATUS_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CCM_DMA_STATUS_CLRr_OFFSET 0x000323c0

#define CMIC_CMC1_CCM_DMA_STATUS_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CCM_DMA_STATUS_CLR.
 */
typedef union CMIC_CMC1_CCM_DMA_STATUS_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ccm_dma_status_clr[1];
	uint32_t _cmic_cmc1_ccm_dma_status_clr;
} CMIC_CMC1_CCM_DMA_STATUS_CLRr_t;

#define CMIC_CMC1_CCM_DMA_STATUS_CLRr_CLR(r) (r).cmic_cmc1_ccm_dma_status_clr[0] = 0
#define CMIC_CMC1_CCM_DMA_STATUS_CLRr_SET(r,d) (r).cmic_cmc1_ccm_dma_status_clr[0] = d
#define CMIC_CMC1_CCM_DMA_STATUS_CLRr_GET(r) (r).cmic_cmc1_ccm_dma_status_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CCM_DMA_STATUS_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) (((r).cmic_cmc1_ccm_dma_status_clr[0]) & 0x1)
#define CMIC_CMC1_CCM_DMA_STATUS_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_ccm_dma_status_clr[0]=(((r).cmic_cmc1_ccm_dma_status_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC1_CCM_DMA_STATUS_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH0_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH0_COS_CTRL_RX_0r_OFFSET 0x00032168

#define CMIC_CMC1_CH0_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH0_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC1_CH0_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch0_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc1_ch0_cos_ctrl_rx_0;
} CMIC_CMC1_CH0_COS_CTRL_RX_0r_t;

#define CMIC_CMC1_CH0_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc1_ch0_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC1_CH0_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc1_ch0_cos_ctrl_rx_0[0] = d
#define CMIC_CMC1_CH0_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc1_ch0_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH0_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc1_ch0_cos_ctrl_rx_0[0])
#define CMIC_CMC1_CH0_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc1_ch0_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH0_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH0_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH0_COS_CTRL_RX_1r_OFFSET 0x0003216c

#define CMIC_CMC1_CH0_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH0_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC1_CH0_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch0_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc1_ch0_cos_ctrl_rx_1;
} CMIC_CMC1_CH0_COS_CTRL_RX_1r_t;

#define CMIC_CMC1_CH0_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc1_ch0_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC1_CH0_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc1_ch0_cos_ctrl_rx_1[0] = d
#define CMIC_CMC1_CH0_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc1_ch0_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH0_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc1_ch0_cos_ctrl_rx_1[0])
#define CMIC_CMC1_CH0_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc1_ch0_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH0_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH0_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH0_DMA_CTRLr_OFFSET 0x00032140

#define CMIC_CMC1_CH0_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH0_DMA_CTRL.
 */
typedef union CMIC_CMC1_CH0_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch0_dma_ctrl[1];
	uint32_t _cmic_cmc1_ch0_dma_ctrl;
} CMIC_CMC1_CH0_DMA_CTRLr_t;

#define CMIC_CMC1_CH0_DMA_CTRLr_CLR(r) (r).cmic_cmc1_ch0_dma_ctrl[0] = 0
#define CMIC_CMC1_CH0_DMA_CTRLr_SET(r,d) (r).cmic_cmc1_ch0_dma_ctrl[0] = d
#define CMIC_CMC1_CH0_DMA_CTRLr_GET(r) (r).cmic_cmc1_ch0_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH0_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc1_ch0_dma_ctrl[0]) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_CH0_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc1_ch0_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_CH0_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc1_ch0_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_CH0_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc1_ch0_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_CH0_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ch0_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_CH0_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ch0_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_CH0_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc1_ch0_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_CH0_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc1_ch0_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_CH0_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc1_ch0_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_CH0_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc1_ch0_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC1_CH0_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc1_ch0_dma_ctrl[0]=(((r).cmic_cmc1_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC1_CH0_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH0_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH0_DMA_CURR_DESCr_OFFSET 0x000321a8

#define CMIC_CMC1_CH0_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH0_DMA_CURR_DESC.
 */
typedef union CMIC_CMC1_CH0_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch0_dma_curr_desc[1];
	uint32_t _cmic_cmc1_ch0_dma_curr_desc;
} CMIC_CMC1_CH0_DMA_CURR_DESCr_t;

#define CMIC_CMC1_CH0_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc1_ch0_dma_curr_desc[0] = 0
#define CMIC_CMC1_CH0_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc1_ch0_dma_curr_desc[0] = d
#define CMIC_CMC1_CH0_DMA_CURR_DESCr_GET(r) (r).cmic_cmc1_ch0_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH0_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc1_ch0_dma_curr_desc[0])
#define CMIC_CMC1_CH0_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc1_ch0_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH0_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00032110

#define CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch0_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc1_ch0_rxbuf_threshold_config;
} CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc1_ch0_rxbuf_threshold_config[0] = 0
#define CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc1_ch0_rxbuf_threshold_config[0] = d
#define CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc1_ch0_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc1_ch0_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc1_ch0_rxbuf_threshold_config[0]=(((r).cmic_cmc1_ch0_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc1_ch0_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc1_ch0_rxbuf_threshold_config[0]=(((r).cmic_cmc1_ch0_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC1_CH0_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH1_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH1_COS_CTRL_RX_0r_OFFSET 0x00032170

#define CMIC_CMC1_CH1_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH1_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC1_CH1_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch1_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc1_ch1_cos_ctrl_rx_0;
} CMIC_CMC1_CH1_COS_CTRL_RX_0r_t;

#define CMIC_CMC1_CH1_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc1_ch1_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC1_CH1_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc1_ch1_cos_ctrl_rx_0[0] = d
#define CMIC_CMC1_CH1_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc1_ch1_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH1_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc1_ch1_cos_ctrl_rx_0[0])
#define CMIC_CMC1_CH1_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc1_ch1_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH1_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH1_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH1_COS_CTRL_RX_1r_OFFSET 0x00032174

#define CMIC_CMC1_CH1_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH1_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC1_CH1_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch1_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc1_ch1_cos_ctrl_rx_1;
} CMIC_CMC1_CH1_COS_CTRL_RX_1r_t;

#define CMIC_CMC1_CH1_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc1_ch1_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC1_CH1_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc1_ch1_cos_ctrl_rx_1[0] = d
#define CMIC_CMC1_CH1_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc1_ch1_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH1_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc1_ch1_cos_ctrl_rx_1[0])
#define CMIC_CMC1_CH1_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc1_ch1_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH1_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH1_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH1_DMA_CTRLr_OFFSET 0x00032144

#define CMIC_CMC1_CH1_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH1_DMA_CTRL.
 */
typedef union CMIC_CMC1_CH1_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch1_dma_ctrl[1];
	uint32_t _cmic_cmc1_ch1_dma_ctrl;
} CMIC_CMC1_CH1_DMA_CTRLr_t;

#define CMIC_CMC1_CH1_DMA_CTRLr_CLR(r) (r).cmic_cmc1_ch1_dma_ctrl[0] = 0
#define CMIC_CMC1_CH1_DMA_CTRLr_SET(r,d) (r).cmic_cmc1_ch1_dma_ctrl[0] = d
#define CMIC_CMC1_CH1_DMA_CTRLr_GET(r) (r).cmic_cmc1_ch1_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH1_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc1_ch1_dma_ctrl[0]) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_CH1_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc1_ch1_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_CH1_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc1_ch1_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_CH1_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc1_ch1_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_CH1_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ch1_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_CH1_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ch1_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_CH1_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc1_ch1_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_CH1_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc1_ch1_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_CH1_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc1_ch1_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_CH1_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc1_ch1_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC1_CH1_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc1_ch1_dma_ctrl[0]=(((r).cmic_cmc1_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC1_CH1_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH1_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH1_DMA_CURR_DESCr_OFFSET 0x000321ac

#define CMIC_CMC1_CH1_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH1_DMA_CURR_DESC.
 */
typedef union CMIC_CMC1_CH1_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch1_dma_curr_desc[1];
	uint32_t _cmic_cmc1_ch1_dma_curr_desc;
} CMIC_CMC1_CH1_DMA_CURR_DESCr_t;

#define CMIC_CMC1_CH1_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc1_ch1_dma_curr_desc[0] = 0
#define CMIC_CMC1_CH1_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc1_ch1_dma_curr_desc[0] = d
#define CMIC_CMC1_CH1_DMA_CURR_DESCr_GET(r) (r).cmic_cmc1_ch1_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH1_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc1_ch1_dma_curr_desc[0])
#define CMIC_CMC1_CH1_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc1_ch1_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH1_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00032114

#define CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch1_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc1_ch1_rxbuf_threshold_config;
} CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc1_ch1_rxbuf_threshold_config[0] = 0
#define CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc1_ch1_rxbuf_threshold_config[0] = d
#define CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc1_ch1_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc1_ch1_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc1_ch1_rxbuf_threshold_config[0]=(((r).cmic_cmc1_ch1_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc1_ch1_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc1_ch1_rxbuf_threshold_config[0]=(((r).cmic_cmc1_ch1_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC1_CH1_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH2_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH2_COS_CTRL_RX_0r_OFFSET 0x00032178

#define CMIC_CMC1_CH2_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH2_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC1_CH2_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch2_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc1_ch2_cos_ctrl_rx_0;
} CMIC_CMC1_CH2_COS_CTRL_RX_0r_t;

#define CMIC_CMC1_CH2_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc1_ch2_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC1_CH2_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc1_ch2_cos_ctrl_rx_0[0] = d
#define CMIC_CMC1_CH2_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc1_ch2_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH2_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc1_ch2_cos_ctrl_rx_0[0])
#define CMIC_CMC1_CH2_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc1_ch2_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH2_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH2_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH2_COS_CTRL_RX_1r_OFFSET 0x0003217c

#define CMIC_CMC1_CH2_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH2_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC1_CH2_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch2_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc1_ch2_cos_ctrl_rx_1;
} CMIC_CMC1_CH2_COS_CTRL_RX_1r_t;

#define CMIC_CMC1_CH2_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc1_ch2_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC1_CH2_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc1_ch2_cos_ctrl_rx_1[0] = d
#define CMIC_CMC1_CH2_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc1_ch2_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH2_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc1_ch2_cos_ctrl_rx_1[0])
#define CMIC_CMC1_CH2_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc1_ch2_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH2_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH2_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH2_DMA_CTRLr_OFFSET 0x00032148

#define CMIC_CMC1_CH2_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH2_DMA_CTRL.
 */
typedef union CMIC_CMC1_CH2_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch2_dma_ctrl[1];
	uint32_t _cmic_cmc1_ch2_dma_ctrl;
} CMIC_CMC1_CH2_DMA_CTRLr_t;

#define CMIC_CMC1_CH2_DMA_CTRLr_CLR(r) (r).cmic_cmc1_ch2_dma_ctrl[0] = 0
#define CMIC_CMC1_CH2_DMA_CTRLr_SET(r,d) (r).cmic_cmc1_ch2_dma_ctrl[0] = d
#define CMIC_CMC1_CH2_DMA_CTRLr_GET(r) (r).cmic_cmc1_ch2_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH2_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc1_ch2_dma_ctrl[0]) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_CH2_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc1_ch2_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_CH2_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc1_ch2_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_CH2_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc1_ch2_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_CH2_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ch2_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_CH2_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ch2_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_CH2_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc1_ch2_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_CH2_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc1_ch2_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_CH2_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc1_ch2_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_CH2_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc1_ch2_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC1_CH2_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc1_ch2_dma_ctrl[0]=(((r).cmic_cmc1_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC1_CH2_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH2_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH2_DMA_CURR_DESCr_OFFSET 0x000321b0

#define CMIC_CMC1_CH2_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH2_DMA_CURR_DESC.
 */
typedef union CMIC_CMC1_CH2_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch2_dma_curr_desc[1];
	uint32_t _cmic_cmc1_ch2_dma_curr_desc;
} CMIC_CMC1_CH2_DMA_CURR_DESCr_t;

#define CMIC_CMC1_CH2_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc1_ch2_dma_curr_desc[0] = 0
#define CMIC_CMC1_CH2_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc1_ch2_dma_curr_desc[0] = d
#define CMIC_CMC1_CH2_DMA_CURR_DESCr_GET(r) (r).cmic_cmc1_ch2_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH2_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc1_ch2_dma_curr_desc[0])
#define CMIC_CMC1_CH2_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc1_ch2_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH2_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00032118

#define CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch2_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc1_ch2_rxbuf_threshold_config;
} CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc1_ch2_rxbuf_threshold_config[0] = 0
#define CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc1_ch2_rxbuf_threshold_config[0] = d
#define CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc1_ch2_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc1_ch2_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc1_ch2_rxbuf_threshold_config[0]=(((r).cmic_cmc1_ch2_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc1_ch2_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc1_ch2_rxbuf_threshold_config[0]=(((r).cmic_cmc1_ch2_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC1_CH2_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH3_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH3_COS_CTRL_RX_0r_OFFSET 0x00032180

#define CMIC_CMC1_CH3_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH3_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC1_CH3_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch3_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc1_ch3_cos_ctrl_rx_0;
} CMIC_CMC1_CH3_COS_CTRL_RX_0r_t;

#define CMIC_CMC1_CH3_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc1_ch3_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC1_CH3_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc1_ch3_cos_ctrl_rx_0[0] = d
#define CMIC_CMC1_CH3_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc1_ch3_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH3_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc1_ch3_cos_ctrl_rx_0[0])
#define CMIC_CMC1_CH3_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc1_ch3_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH3_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH3_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH3_COS_CTRL_RX_1r_OFFSET 0x00032184

#define CMIC_CMC1_CH3_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH3_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC1_CH3_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch3_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc1_ch3_cos_ctrl_rx_1;
} CMIC_CMC1_CH3_COS_CTRL_RX_1r_t;

#define CMIC_CMC1_CH3_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc1_ch3_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC1_CH3_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc1_ch3_cos_ctrl_rx_1[0] = d
#define CMIC_CMC1_CH3_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc1_ch3_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH3_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc1_ch3_cos_ctrl_rx_1[0])
#define CMIC_CMC1_CH3_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc1_ch3_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH3_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH3_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH3_DMA_CTRLr_OFFSET 0x0003214c

#define CMIC_CMC1_CH3_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH3_DMA_CTRL.
 */
typedef union CMIC_CMC1_CH3_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch3_dma_ctrl[1];
	uint32_t _cmic_cmc1_ch3_dma_ctrl;
} CMIC_CMC1_CH3_DMA_CTRLr_t;

#define CMIC_CMC1_CH3_DMA_CTRLr_CLR(r) (r).cmic_cmc1_ch3_dma_ctrl[0] = 0
#define CMIC_CMC1_CH3_DMA_CTRLr_SET(r,d) (r).cmic_cmc1_ch3_dma_ctrl[0] = d
#define CMIC_CMC1_CH3_DMA_CTRLr_GET(r) (r).cmic_cmc1_ch3_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH3_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc1_ch3_dma_ctrl[0]) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_CH3_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc1_ch3_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_CH3_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc1_ch3_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_CH3_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc1_ch3_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_CH3_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ch3_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_CH3_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc1_ch3_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_CH3_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc1_ch3_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_CH3_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc1_ch3_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_CH3_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc1_ch3_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_CH3_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc1_ch3_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC1_CH3_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc1_ch3_dma_ctrl[0]=(((r).cmic_cmc1_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC1_CH3_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH3_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH3_DMA_CURR_DESCr_OFFSET 0x000321b4

#define CMIC_CMC1_CH3_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH3_DMA_CURR_DESC.
 */
typedef union CMIC_CMC1_CH3_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch3_dma_curr_desc[1];
	uint32_t _cmic_cmc1_ch3_dma_curr_desc;
} CMIC_CMC1_CH3_DMA_CURR_DESCr_t;

#define CMIC_CMC1_CH3_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc1_ch3_dma_curr_desc[0] = 0
#define CMIC_CMC1_CH3_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc1_ch3_dma_curr_desc[0] = d
#define CMIC_CMC1_CH3_DMA_CURR_DESCr_GET(r) (r).cmic_cmc1_ch3_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH3_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc1_ch3_dma_curr_desc[0])
#define CMIC_CMC1_CH3_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc1_ch3_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_CH3_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x0003211c

#define CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_ch3_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc1_ch3_rxbuf_threshold_config;
} CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc1_ch3_rxbuf_threshold_config[0] = 0
#define CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc1_ch3_rxbuf_threshold_config[0] = d
#define CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc1_ch3_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc1_ch3_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc1_ch3_rxbuf_threshold_config[0]=(((r).cmic_cmc1_ch3_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc1_ch3_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc1_ch3_rxbuf_threshold_config[0]=(((r).cmic_cmc1_ch3_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC1_CH3_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_CONFIGr_OFFSET 0x00032108

#define CMIC_CMC1_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_CONFIG.
 */
typedef union CMIC_CMC1_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_config[1];
	uint32_t _cmic_cmc1_config;
} CMIC_CMC1_CONFIGr_t;

#define CMIC_CMC1_CONFIGr_CLR(r) (r).cmic_cmc1_config[0] = 0
#define CMIC_CMC1_CONFIGr_SET(r,d) (r).cmic_cmc1_config[0] = d
#define CMIC_CMC1_CONFIGr_GET(r) (r).cmic_cmc1_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_CONFIGr_ENABLE_SBUSDMA_CH0_FLOW_CONTROLf_GET(r) (((r).cmic_cmc1_config[0]) & 0x1)
#define CMIC_CMC1_CONFIGr_ENABLE_SBUSDMA_CH0_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc1_config[0]=(((r).cmic_cmc1_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_CONFIGr_ENABLE_SBUSDMA_CH1_FLOW_CONTROLf_GET(r) ((((r).cmic_cmc1_config[0]) >> 1) & 0x1)
#define CMIC_CMC1_CONFIGr_ENABLE_SBUSDMA_CH1_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc1_config[0]=(((r).cmic_cmc1_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_CONFIGr_ENABLE_SBUSDMA_CH2_FLOW_CONTROLf_GET(r) ((((r).cmic_cmc1_config[0]) >> 2) & 0x1)
#define CMIC_CMC1_CONFIGr_ENABLE_SBUSDMA_CH2_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc1_config[0]=(((r).cmic_cmc1_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_CONFIGr_ENABLE_EARLY_BRESPf_GET(r) ((((r).cmic_cmc1_config[0]) >> 3) & 0x1)
#define CMIC_CMC1_CONFIGr_ENABLE_EARLY_BRESPf_SET(r,f) (r).cmic_cmc1_config[0]=(((r).cmic_cmc1_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC1_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_CH0_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr_OFFSET 0x00032120

#define CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_CH0_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_ch0_desc_halt_addr[1];
	uint32_t _cmic_cmc1_dma_ch0_desc_halt_addr;
} CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr_t;

#define CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc1_dma_ch0_desc_halt_addr[0] = 0
#define CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc1_dma_ch0_desc_halt_addr[0] = d
#define CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc1_dma_ch0_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc1_dma_ch0_desc_halt_addr[0])
#define CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc1_dma_ch0_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_CH0_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_CH0_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_CH0_INTR_COALr_OFFSET 0x00032188

#define CMIC_CMC1_DMA_CH0_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_CH0_INTR_COAL.
 */
typedef union CMIC_CMC1_DMA_CH0_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_ch0_intr_coal[1];
	uint32_t _cmic_cmc1_dma_ch0_intr_coal;
} CMIC_CMC1_DMA_CH0_INTR_COALr_t;

#define CMIC_CMC1_DMA_CH0_INTR_COALr_CLR(r) (r).cmic_cmc1_dma_ch0_intr_coal[0] = 0
#define CMIC_CMC1_DMA_CH0_INTR_COALr_SET(r,d) (r).cmic_cmc1_dma_ch0_intr_coal[0] = d
#define CMIC_CMC1_DMA_CH0_INTR_COALr_GET(r) (r).cmic_cmc1_dma_ch0_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_CH0_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc1_dma_ch0_intr_coal[0]) & 0xffff)
#define CMIC_CMC1_DMA_CH0_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc1_dma_ch0_intr_coal[0]=(((r).cmic_cmc1_dma_ch0_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC1_DMA_CH0_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc1_dma_ch0_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC1_DMA_CH0_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc1_dma_ch0_intr_coal[0]=(((r).cmic_cmc1_dma_ch0_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC1_DMA_CH0_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc1_dma_ch0_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC1_DMA_CH0_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc1_dma_ch0_intr_coal[0]=(((r).cmic_cmc1_dma_ch0_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_CH0_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_CH1_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr_OFFSET 0x00032124

#define CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_CH1_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_ch1_desc_halt_addr[1];
	uint32_t _cmic_cmc1_dma_ch1_desc_halt_addr;
} CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr_t;

#define CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc1_dma_ch1_desc_halt_addr[0] = 0
#define CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc1_dma_ch1_desc_halt_addr[0] = d
#define CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc1_dma_ch1_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc1_dma_ch1_desc_halt_addr[0])
#define CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc1_dma_ch1_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_CH1_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_CH1_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_CH1_INTR_COALr_OFFSET 0x0003218c

#define CMIC_CMC1_DMA_CH1_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_CH1_INTR_COAL.
 */
typedef union CMIC_CMC1_DMA_CH1_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_ch1_intr_coal[1];
	uint32_t _cmic_cmc1_dma_ch1_intr_coal;
} CMIC_CMC1_DMA_CH1_INTR_COALr_t;

#define CMIC_CMC1_DMA_CH1_INTR_COALr_CLR(r) (r).cmic_cmc1_dma_ch1_intr_coal[0] = 0
#define CMIC_CMC1_DMA_CH1_INTR_COALr_SET(r,d) (r).cmic_cmc1_dma_ch1_intr_coal[0] = d
#define CMIC_CMC1_DMA_CH1_INTR_COALr_GET(r) (r).cmic_cmc1_dma_ch1_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_CH1_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc1_dma_ch1_intr_coal[0]) & 0xffff)
#define CMIC_CMC1_DMA_CH1_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc1_dma_ch1_intr_coal[0]=(((r).cmic_cmc1_dma_ch1_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC1_DMA_CH1_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc1_dma_ch1_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC1_DMA_CH1_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc1_dma_ch1_intr_coal[0]=(((r).cmic_cmc1_dma_ch1_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC1_DMA_CH1_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc1_dma_ch1_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC1_DMA_CH1_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc1_dma_ch1_intr_coal[0]=(((r).cmic_cmc1_dma_ch1_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_CH1_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_CH2_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr_OFFSET 0x00032128

#define CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_CH2_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_ch2_desc_halt_addr[1];
	uint32_t _cmic_cmc1_dma_ch2_desc_halt_addr;
} CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr_t;

#define CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc1_dma_ch2_desc_halt_addr[0] = 0
#define CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc1_dma_ch2_desc_halt_addr[0] = d
#define CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc1_dma_ch2_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc1_dma_ch2_desc_halt_addr[0])
#define CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc1_dma_ch2_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_CH2_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_CH2_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_CH2_INTR_COALr_OFFSET 0x00032190

#define CMIC_CMC1_DMA_CH2_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_CH2_INTR_COAL.
 */
typedef union CMIC_CMC1_DMA_CH2_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_ch2_intr_coal[1];
	uint32_t _cmic_cmc1_dma_ch2_intr_coal;
} CMIC_CMC1_DMA_CH2_INTR_COALr_t;

#define CMIC_CMC1_DMA_CH2_INTR_COALr_CLR(r) (r).cmic_cmc1_dma_ch2_intr_coal[0] = 0
#define CMIC_CMC1_DMA_CH2_INTR_COALr_SET(r,d) (r).cmic_cmc1_dma_ch2_intr_coal[0] = d
#define CMIC_CMC1_DMA_CH2_INTR_COALr_GET(r) (r).cmic_cmc1_dma_ch2_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_CH2_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc1_dma_ch2_intr_coal[0]) & 0xffff)
#define CMIC_CMC1_DMA_CH2_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc1_dma_ch2_intr_coal[0]=(((r).cmic_cmc1_dma_ch2_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC1_DMA_CH2_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc1_dma_ch2_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC1_DMA_CH2_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc1_dma_ch2_intr_coal[0]=(((r).cmic_cmc1_dma_ch2_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC1_DMA_CH2_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc1_dma_ch2_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC1_DMA_CH2_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc1_dma_ch2_intr_coal[0]=(((r).cmic_cmc1_dma_ch2_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_CH2_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_CH3_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr_OFFSET 0x0003212c

#define CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_CH3_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_ch3_desc_halt_addr[1];
	uint32_t _cmic_cmc1_dma_ch3_desc_halt_addr;
} CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr_t;

#define CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc1_dma_ch3_desc_halt_addr[0] = 0
#define CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc1_dma_ch3_desc_halt_addr[0] = d
#define CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc1_dma_ch3_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc1_dma_ch3_desc_halt_addr[0])
#define CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc1_dma_ch3_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_CH3_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_CH3_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_CH3_INTR_COALr_OFFSET 0x00032194

#define CMIC_CMC1_DMA_CH3_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_CH3_INTR_COAL.
 */
typedef union CMIC_CMC1_DMA_CH3_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_ch3_intr_coal[1];
	uint32_t _cmic_cmc1_dma_ch3_intr_coal;
} CMIC_CMC1_DMA_CH3_INTR_COALr_t;

#define CMIC_CMC1_DMA_CH3_INTR_COALr_CLR(r) (r).cmic_cmc1_dma_ch3_intr_coal[0] = 0
#define CMIC_CMC1_DMA_CH3_INTR_COALr_SET(r,d) (r).cmic_cmc1_dma_ch3_intr_coal[0] = d
#define CMIC_CMC1_DMA_CH3_INTR_COALr_GET(r) (r).cmic_cmc1_dma_ch3_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_CH3_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc1_dma_ch3_intr_coal[0]) & 0xffff)
#define CMIC_CMC1_DMA_CH3_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc1_dma_ch3_intr_coal[0]=(((r).cmic_cmc1_dma_ch3_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC1_DMA_CH3_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc1_dma_ch3_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC1_DMA_CH3_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc1_dma_ch3_intr_coal[0]=(((r).cmic_cmc1_dma_ch3_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC1_DMA_CH3_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc1_dma_ch3_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC1_DMA_CH3_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc1_dma_ch3_intr_coal[0]=(((r).cmic_cmc1_dma_ch3_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_CH3_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_DESC0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_DESC0r_OFFSET 0x00032158

#define CMIC_CMC1_DMA_DESC0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_DESC0.
 */
typedef union CMIC_CMC1_DMA_DESC0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_desc0[1];
	uint32_t _cmic_cmc1_dma_desc0;
} CMIC_CMC1_DMA_DESC0r_t;

#define CMIC_CMC1_DMA_DESC0r_CLR(r) (r).cmic_cmc1_dma_desc0[0] = 0
#define CMIC_CMC1_DMA_DESC0r_SET(r,d) (r).cmic_cmc1_dma_desc0[0] = d
#define CMIC_CMC1_DMA_DESC0r_GET(r) (r).cmic_cmc1_dma_desc0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_DESC0r_ADDRf_GET(r) ((r).cmic_cmc1_dma_desc0[0])
#define CMIC_CMC1_DMA_DESC0r_ADDRf_SET(r,f) (r).cmic_cmc1_dma_desc0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_DESC0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_DESC1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_DESC1r_OFFSET 0x0003215c

#define CMIC_CMC1_DMA_DESC1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_DESC1.
 */
typedef union CMIC_CMC1_DMA_DESC1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_desc1[1];
	uint32_t _cmic_cmc1_dma_desc1;
} CMIC_CMC1_DMA_DESC1r_t;

#define CMIC_CMC1_DMA_DESC1r_CLR(r) (r).cmic_cmc1_dma_desc1[0] = 0
#define CMIC_CMC1_DMA_DESC1r_SET(r,d) (r).cmic_cmc1_dma_desc1[0] = d
#define CMIC_CMC1_DMA_DESC1r_GET(r) (r).cmic_cmc1_dma_desc1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_DESC1r_ADDRf_GET(r) ((r).cmic_cmc1_dma_desc1[0])
#define CMIC_CMC1_DMA_DESC1r_ADDRf_SET(r,f) (r).cmic_cmc1_dma_desc1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_DESC1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_DESC2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_DESC2r_OFFSET 0x00032160

#define CMIC_CMC1_DMA_DESC2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_DESC2.
 */
typedef union CMIC_CMC1_DMA_DESC2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_desc2[1];
	uint32_t _cmic_cmc1_dma_desc2;
} CMIC_CMC1_DMA_DESC2r_t;

#define CMIC_CMC1_DMA_DESC2r_CLR(r) (r).cmic_cmc1_dma_desc2[0] = 0
#define CMIC_CMC1_DMA_DESC2r_SET(r,d) (r).cmic_cmc1_dma_desc2[0] = d
#define CMIC_CMC1_DMA_DESC2r_GET(r) (r).cmic_cmc1_dma_desc2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_DESC2r_ADDRf_GET(r) ((r).cmic_cmc1_dma_desc2[0])
#define CMIC_CMC1_DMA_DESC2r_ADDRf_SET(r,f) (r).cmic_cmc1_dma_desc2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_DESC2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_DESC3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_DESC3r_OFFSET 0x00032164

#define CMIC_CMC1_DMA_DESC3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_DESC3.
 */
typedef union CMIC_CMC1_DMA_DESC3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_desc3[1];
	uint32_t _cmic_cmc1_dma_desc3;
} CMIC_CMC1_DMA_DESC3r_t;

#define CMIC_CMC1_DMA_DESC3r_CLR(r) (r).cmic_cmc1_dma_desc3[0] = 0
#define CMIC_CMC1_DMA_DESC3r_SET(r,d) (r).cmic_cmc1_dma_desc3[0] = d
#define CMIC_CMC1_DMA_DESC3r_GET(r) (r).cmic_cmc1_dma_desc3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_DESC3r_ADDRf_GET(r) ((r).cmic_cmc1_dma_desc3[0])
#define CMIC_CMC1_DMA_DESC3r_ADDRf_SET(r,f) (r).cmic_cmc1_dma_desc3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_DESC3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_STATr_OFFSET 0x00032150

#define CMIC_CMC1_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_STAT.
 */
typedef union CMIC_CMC1_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_stat[1];
	uint32_t _cmic_cmc1_dma_stat;
} CMIC_CMC1_DMA_STATr_t;

#define CMIC_CMC1_DMA_STATr_CLR(r) (r).cmic_cmc1_dma_stat[0] = 0
#define CMIC_CMC1_DMA_STATr_SET(r,d) (r).cmic_cmc1_dma_stat[0] = d
#define CMIC_CMC1_DMA_STATr_GET(r) (r).cmic_cmc1_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_STATr_CH0_CHAIN_DONEf_GET(r) (((r).cmic_cmc1_dma_stat[0]) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_DMA_STATr_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_DMA_STATr_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_DMA_STATr_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_DMA_STATr_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_DMA_STATr_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_DMA_STATr_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_DMA_STATr_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_DMA_STATr_CH0_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH0_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_DMA_STATr_CH1_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH1_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_DMA_STATr_CH2_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH2_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_DMA_STATr_CH3_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH3_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 12) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 13) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC1_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 14) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC1_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 15) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC1_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 16) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC1_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 17) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC1_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 18) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC1_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 19) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 20) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 21) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 22) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC1_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 23) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC1_DMA_STATr_CH0_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 24) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH0_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_DMA_STATr_CH1_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 25) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH1_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC1_DMA_STATr_CH2_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 26) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH2_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_DMA_STATr_CH3_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 27) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH3_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_DMA_STATr_CH0_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 28) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH0_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_DMA_STATr_CH1_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 29) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH1_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_DMA_STATr_CH2_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 30) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH2_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC1_DMA_STATr_CH3_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc1_dma_stat[0]) >> 31) & 0x1)
#define CMIC_CMC1_DMA_STATr_CH3_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc1_dma_stat[0]=(((r).cmic_cmc1_dma_stat[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_STAT_CLRr_OFFSET 0x000321a4

#define CMIC_CMC1_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_STAT_CLR.
 */
typedef union CMIC_CMC1_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_stat_clr[1];
	uint32_t _cmic_cmc1_dma_stat_clr;
} CMIC_CMC1_DMA_STAT_CLRr_t;

#define CMIC_CMC1_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc1_dma_stat_clr[0] = 0
#define CMIC_CMC1_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc1_dma_stat_clr[0] = d
#define CMIC_CMC1_DMA_STAT_CLRr_GET(r) (r).cmic_cmc1_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc1_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 3) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 4) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 5) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 6) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 7) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_DMA_STAT_CLRr_CH0_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 8) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH0_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_DMA_STAT_CLRr_CH1_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 9) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH1_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_DMA_STAT_CLRr_CH2_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 10) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH2_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_DMA_STAT_CLRr_CH3_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc1_dma_stat_clr[0]) >> 11) & 0x1)
#define CMIC_CMC1_DMA_STAT_CLRr_CH3_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc1_dma_stat_clr[0]=(((r).cmic_cmc1_dma_stat_clr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_DMA_STAT_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_DMA_STAT_HIr_OFFSET 0x00032130

#define CMIC_CMC1_DMA_STAT_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_DMA_STAT_HI.
 */
typedef union CMIC_CMC1_DMA_STAT_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_dma_stat_hi[1];
	uint32_t _cmic_cmc1_dma_stat_hi;
} CMIC_CMC1_DMA_STAT_HIr_t;

#define CMIC_CMC1_DMA_STAT_HIr_CLR(r) (r).cmic_cmc1_dma_stat_hi[0] = 0
#define CMIC_CMC1_DMA_STAT_HIr_SET(r,d) (r).cmic_cmc1_dma_stat_hi[0] = d
#define CMIC_CMC1_DMA_STAT_HIr_GET(r) (r).cmic_cmc1_dma_stat_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_DMA_STAT_HIr_CH0_IN_HALTf_GET(r) ((((r).cmic_cmc1_dma_stat_hi[0]) >> 27) & 0x1)
#define CMIC_CMC1_DMA_STAT_HIr_CH0_IN_HALTf_SET(r,f) (r).cmic_cmc1_dma_stat_hi[0]=(((r).cmic_cmc1_dma_stat_hi[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_DMA_STAT_HIr_CH1_IN_HALTf_GET(r) ((((r).cmic_cmc1_dma_stat_hi[0]) >> 28) & 0x1)
#define CMIC_CMC1_DMA_STAT_HIr_CH1_IN_HALTf_SET(r,f) (r).cmic_cmc1_dma_stat_hi[0]=(((r).cmic_cmc1_dma_stat_hi[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_DMA_STAT_HIr_CH2_IN_HALTf_GET(r) ((((r).cmic_cmc1_dma_stat_hi[0]) >> 29) & 0x1)
#define CMIC_CMC1_DMA_STAT_HIr_CH2_IN_HALTf_SET(r,f) (r).cmic_cmc1_dma_stat_hi[0]=(((r).cmic_cmc1_dma_stat_hi[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_DMA_STAT_HIr_CH3_IN_HALTf_GET(r) ((((r).cmic_cmc1_dma_stat_hi[0]) >> 30) & 0x1)
#define CMIC_CMC1_DMA_STAT_HIr_CH3_IN_HALTf_SET(r,f) (r).cmic_cmc1_dma_stat_hi[0]=(((r).cmic_cmc1_dma_stat_hi[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC1_DMA_STAT_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_OFFSET 0x00032828

#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0.
 */
typedef union CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fiforddma_ch0_tm_control_0[1];
	uint32_t _cmic_cmc1_fiforddma_ch0_tm_control_0;
} CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_t;

#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_CLR(r) (r).cmic_cmc1_fiforddma_ch0_tm_control_0[0] = 0
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc1_fiforddma_ch0_tm_control_0[0] = d
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_GET(r) (r).cmic_cmc1_fiforddma_ch0_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc1_fiforddma_ch0_tm_control_0[0]) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc1_fiforddma_ch0_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc1_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_fiforddma_ch0_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_fiforddma_ch0_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_OFFSET 0x0003282c

#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1.
 */
typedef union CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fiforddma_ch0_tm_control_1[1];
	uint32_t _cmic_cmc1_fiforddma_ch0_tm_control_1;
} CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_t;

#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_CLR(r) (r).cmic_cmc1_fiforddma_ch0_tm_control_1[0] = 0
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc1_fiforddma_ch0_tm_control_1[0] = d
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_GET(r) (r).cmic_cmc1_fiforddma_ch0_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc1_fiforddma_ch0_tm_control_1[0]) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch0_tm_control_1[0]=(((r).cmic_cmc1_fiforddma_ch0_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_fiforddma_ch0_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch0_tm_control_1[0]=(((r).cmic_cmc1_fiforddma_ch0_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFORDDMA_CH0_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_OFFSET 0x00032830

#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0.
 */
typedef union CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fiforddma_ch1_tm_control_0[1];
	uint32_t _cmic_cmc1_fiforddma_ch1_tm_control_0;
} CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_t;

#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_CLR(r) (r).cmic_cmc1_fiforddma_ch1_tm_control_0[0] = 0
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc1_fiforddma_ch1_tm_control_0[0] = d
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_GET(r) (r).cmic_cmc1_fiforddma_ch1_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc1_fiforddma_ch1_tm_control_0[0]) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc1_fiforddma_ch1_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc1_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_fiforddma_ch1_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_fiforddma_ch1_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_OFFSET 0x00032834

#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1.
 */
typedef union CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fiforddma_ch1_tm_control_1[1];
	uint32_t _cmic_cmc1_fiforddma_ch1_tm_control_1;
} CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_t;

#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_CLR(r) (r).cmic_cmc1_fiforddma_ch1_tm_control_1[0] = 0
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc1_fiforddma_ch1_tm_control_1[0] = d
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_GET(r) (r).cmic_cmc1_fiforddma_ch1_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc1_fiforddma_ch1_tm_control_1[0]) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch1_tm_control_1[0]=(((r).cmic_cmc1_fiforddma_ch1_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_fiforddma_ch1_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch1_tm_control_1[0]=(((r).cmic_cmc1_fiforddma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFORDDMA_CH1_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_OFFSET 0x00032838

#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0.
 */
typedef union CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fiforddma_ch2_tm_control_0[1];
	uint32_t _cmic_cmc1_fiforddma_ch2_tm_control_0;
} CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_t;

#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_CLR(r) (r).cmic_cmc1_fiforddma_ch2_tm_control_0[0] = 0
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc1_fiforddma_ch2_tm_control_0[0] = d
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_GET(r) (r).cmic_cmc1_fiforddma_ch2_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc1_fiforddma_ch2_tm_control_0[0]) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc1_fiforddma_ch2_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc1_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_fiforddma_ch2_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_fiforddma_ch2_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_OFFSET 0x0003283c

#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1.
 */
typedef union CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fiforddma_ch2_tm_control_1[1];
	uint32_t _cmic_cmc1_fiforddma_ch2_tm_control_1;
} CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_t;

#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_CLR(r) (r).cmic_cmc1_fiforddma_ch2_tm_control_1[0] = 0
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc1_fiforddma_ch2_tm_control_1[0] = d
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_GET(r) (r).cmic_cmc1_fiforddma_ch2_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc1_fiforddma_ch2_tm_control_1[0]) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch2_tm_control_1[0]=(((r).cmic_cmc1_fiforddma_ch2_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_fiforddma_ch2_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch2_tm_control_1[0]=(((r).cmic_cmc1_fiforddma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFORDDMA_CH2_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_OFFSET 0x00032840

#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0.
 */
typedef union CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fiforddma_ch3_tm_control_0[1];
	uint32_t _cmic_cmc1_fiforddma_ch3_tm_control_0;
} CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_t;

#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_CLR(r) (r).cmic_cmc1_fiforddma_ch3_tm_control_0[0] = 0
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc1_fiforddma_ch3_tm_control_0[0] = d
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_GET(r) (r).cmic_cmc1_fiforddma_ch3_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc1_fiforddma_ch3_tm_control_0[0]) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc1_fiforddma_ch3_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc1_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_fiforddma_ch3_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_fiforddma_ch3_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc1_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_OFFSET 0x00032844

#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1.
 */
typedef union CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fiforddma_ch3_tm_control_1[1];
	uint32_t _cmic_cmc1_fiforddma_ch3_tm_control_1;
} CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_t;

#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_CLR(r) (r).cmic_cmc1_fiforddma_ch3_tm_control_1[0] = 0
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc1_fiforddma_ch3_tm_control_1[0] = d
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_GET(r) (r).cmic_cmc1_fiforddma_ch3_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc1_fiforddma_ch3_tm_control_1[0]) & 0xfff)
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch3_tm_control_1[0]=(((r).cmic_cmc1_fiforddma_ch3_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_fiforddma_ch3_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_fiforddma_ch3_tm_control_1[0]=(((r).cmic_cmc1_fiforddma_ch3_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFORDDMA_CH3_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_OFFSET 0x000322c0

#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_CFG.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_cfg[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_cfg;
} CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00032330

#define CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00032310

#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_eccerr_address;
} CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_address[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_address[0])
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00032320

#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_eccerr_control;
} CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000322e0

#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_hostmem_start_address;
} CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_start_address[0])
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00032354

#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_hostmem_threshold;
} CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_threshold[0])
#define CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x000322f0

#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x000322f4

#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr_OFFSET 0x00032384

#define CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_opcode[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_opcode;
} CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_opcode[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_opcode[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_fifo_ch0_rd_dma_opcode[0])
#define CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000322d0

#define CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_sbus_start_address;
} CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch0_rd_dma_sbus_start_address[0])
#define CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_OFFSET 0x00032364

#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_STAT.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_stat[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_stat;
} CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_OFFSET 0x00032374

#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch0_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc1_fifo_ch0_rd_dma_stat_clr;
} CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0] = 0
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0] = d
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch0_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH0_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_OFFSET 0x000322c4

#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_CFG.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_cfg[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_cfg;
} CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00032334

#define CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00032314

#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_eccerr_address;
} CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_address[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_address[0])
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00032324

#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_eccerr_control;
} CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000322e4

#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_hostmem_start_address;
} CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_start_address[0])
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00032358

#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_hostmem_threshold;
} CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_threshold[0])
#define CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x000322f8

#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x000322fc

#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr_OFFSET 0x00032388

#define CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_opcode[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_opcode;
} CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_opcode[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_opcode[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_fifo_ch1_rd_dma_opcode[0])
#define CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000322d4

#define CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_sbus_start_address;
} CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch1_rd_dma_sbus_start_address[0])
#define CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_OFFSET 0x00032368

#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_STAT.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_stat[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_stat;
} CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_OFFSET 0x00032378

#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch1_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc1_fifo_ch1_rd_dma_stat_clr;
} CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0] = 0
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0] = d
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch1_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH1_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_OFFSET 0x000322c8

#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_CFG.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_cfg[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_cfg;
} CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00032338

#define CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00032318

#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_eccerr_address;
} CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_address[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_address[0])
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00032328

#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_eccerr_control;
} CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000322e8

#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_hostmem_start_address;
} CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_start_address[0])
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x0003235c

#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_hostmem_threshold;
} CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_threshold[0])
#define CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x00032300

#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x00032304

#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr_OFFSET 0x0003238c

#define CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_opcode[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_opcode;
} CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_opcode[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_opcode[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_fifo_ch2_rd_dma_opcode[0])
#define CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000322d8

#define CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_sbus_start_address;
} CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch2_rd_dma_sbus_start_address[0])
#define CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_OFFSET 0x0003236c

#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_STAT.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_stat[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_stat;
} CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_OFFSET 0x0003237c

#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch2_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc1_fifo_ch2_rd_dma_stat_clr;
} CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0] = 0
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0] = d
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch2_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH2_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_OFFSET 0x000322cc

#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_CFG.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_cfg[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_cfg;
} CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x0003233c

#define CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x0003231c

#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_eccerr_address;
} CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_address[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_address[0])
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_OFFSET 0x0003232c

#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_eccerr_control;
} CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000322ec

#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_hostmem_start_address;
} CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_start_address[0])
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00032360

#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_hostmem_threshold;
} CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_threshold[0])
#define CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x00032308

#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x0003230c

#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr_OFFSET 0x00032390

#define CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_opcode[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_opcode;
} CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_opcode[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_opcode[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_fifo_ch3_rd_dma_opcode[0])
#define CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000322dc

#define CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_sbus_start_address;
} CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_fifo_ch3_rd_dma_sbus_start_address[0])
#define CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_OFFSET 0x00032370

#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_STAT.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_stat[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_stat;
} CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_OFFSET 0x00032380

#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fifo_ch3_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc1_fifo_ch3_rd_dma_stat_clr;
} CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0] = 0
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0] = d
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0]=(((r).cmic_cmc1_fifo_ch3_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC1_FIFO_CH3_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FSCHAN_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FSCHAN_ADDRESSr_OFFSET 0x00032070

#define CMIC_CMC1_FSCHAN_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FSCHAN_ADDRESS.
 */
typedef union CMIC_CMC1_FSCHAN_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fschan_address[1];
	uint32_t _cmic_cmc1_fschan_address;
} CMIC_CMC1_FSCHAN_ADDRESSr_t;

#define CMIC_CMC1_FSCHAN_ADDRESSr_CLR(r) (r).cmic_cmc1_fschan_address[0] = 0
#define CMIC_CMC1_FSCHAN_ADDRESSr_SET(r,d) (r).cmic_cmc1_fschan_address[0] = d
#define CMIC_CMC1_FSCHAN_ADDRESSr_GET(r) (r).cmic_cmc1_fschan_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FSCHAN_ADDRESSr_ADDRRESSf_GET(r) ((r).cmic_cmc1_fschan_address[0])
#define CMIC_CMC1_FSCHAN_ADDRESSr_ADDRRESSf_SET(r,f) (r).cmic_cmc1_fschan_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FSCHAN_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FSCHAN_DATA32
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FSCHAN_DATA32r_OFFSET 0x00032074

#define CMIC_CMC1_FSCHAN_DATA32r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FSCHAN_DATA32.
 */
typedef union CMIC_CMC1_FSCHAN_DATA32r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fschan_data32[1];
	uint32_t _cmic_cmc1_fschan_data32;
} CMIC_CMC1_FSCHAN_DATA32r_t;

#define CMIC_CMC1_FSCHAN_DATA32r_CLR(r) (r).cmic_cmc1_fschan_data32[0] = 0
#define CMIC_CMC1_FSCHAN_DATA32r_SET(r,d) (r).cmic_cmc1_fschan_data32[0] = d
#define CMIC_CMC1_FSCHAN_DATA32r_GET(r) (r).cmic_cmc1_fschan_data32[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FSCHAN_DATA32r_DATA32f_GET(r) ((r).cmic_cmc1_fschan_data32[0])
#define CMIC_CMC1_FSCHAN_DATA32r_DATA32f_SET(r,f) (r).cmic_cmc1_fschan_data32[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FSCHAN_DATA32r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FSCHAN_DATA64_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FSCHAN_DATA64_HIr_OFFSET 0x0003207c

#define CMIC_CMC1_FSCHAN_DATA64_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FSCHAN_DATA64_HI.
 */
typedef union CMIC_CMC1_FSCHAN_DATA64_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fschan_data64_hi[1];
	uint32_t _cmic_cmc1_fschan_data64_hi;
} CMIC_CMC1_FSCHAN_DATA64_HIr_t;

#define CMIC_CMC1_FSCHAN_DATA64_HIr_CLR(r) (r).cmic_cmc1_fschan_data64_hi[0] = 0
#define CMIC_CMC1_FSCHAN_DATA64_HIr_SET(r,d) (r).cmic_cmc1_fschan_data64_hi[0] = d
#define CMIC_CMC1_FSCHAN_DATA64_HIr_GET(r) (r).cmic_cmc1_fschan_data64_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FSCHAN_DATA64_HIr_DATA64_HIf_GET(r) ((r).cmic_cmc1_fschan_data64_hi[0])
#define CMIC_CMC1_FSCHAN_DATA64_HIr_DATA64_HIf_SET(r,f) (r).cmic_cmc1_fschan_data64_hi[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FSCHAN_DATA64_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FSCHAN_DATA64_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FSCHAN_DATA64_LOr_OFFSET 0x00032078

#define CMIC_CMC1_FSCHAN_DATA64_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FSCHAN_DATA64_LO.
 */
typedef union CMIC_CMC1_FSCHAN_DATA64_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fschan_data64_lo[1];
	uint32_t _cmic_cmc1_fschan_data64_lo;
} CMIC_CMC1_FSCHAN_DATA64_LOr_t;

#define CMIC_CMC1_FSCHAN_DATA64_LOr_CLR(r) (r).cmic_cmc1_fschan_data64_lo[0] = 0
#define CMIC_CMC1_FSCHAN_DATA64_LOr_SET(r,d) (r).cmic_cmc1_fschan_data64_lo[0] = d
#define CMIC_CMC1_FSCHAN_DATA64_LOr_GET(r) (r).cmic_cmc1_fschan_data64_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FSCHAN_DATA64_LOr_DATA64_LOf_GET(r) ((r).cmic_cmc1_fschan_data64_lo[0])
#define CMIC_CMC1_FSCHAN_DATA64_LOr_DATA64_LOf_SET(r,f) (r).cmic_cmc1_fschan_data64_lo[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FSCHAN_DATA64_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FSCHAN_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FSCHAN_OPCODEr_OFFSET 0x0003206c

#define CMIC_CMC1_FSCHAN_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FSCHAN_OPCODE.
 */
typedef union CMIC_CMC1_FSCHAN_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fschan_opcode[1];
	uint32_t _cmic_cmc1_fschan_opcode;
} CMIC_CMC1_FSCHAN_OPCODEr_t;

#define CMIC_CMC1_FSCHAN_OPCODEr_CLR(r) (r).cmic_cmc1_fschan_opcode[0] = 0
#define CMIC_CMC1_FSCHAN_OPCODEr_SET(r,d) (r).cmic_cmc1_fschan_opcode[0] = d
#define CMIC_CMC1_FSCHAN_OPCODEr_GET(r) (r).cmic_cmc1_fschan_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FSCHAN_OPCODEr_ADDRRESSf_GET(r) ((r).cmic_cmc1_fschan_opcode[0])
#define CMIC_CMC1_FSCHAN_OPCODEr_ADDRRESSf_SET(r,f) (r).cmic_cmc1_fschan_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_FSCHAN_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_FSCHAN_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_FSCHAN_STATUSr_OFFSET 0x00032068

#define CMIC_CMC1_FSCHAN_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_FSCHAN_STATUS.
 */
typedef union CMIC_CMC1_FSCHAN_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_fschan_status[1];
	uint32_t _cmic_cmc1_fschan_status;
} CMIC_CMC1_FSCHAN_STATUSr_t;

#define CMIC_CMC1_FSCHAN_STATUSr_CLR(r) (r).cmic_cmc1_fschan_status[0] = 0
#define CMIC_CMC1_FSCHAN_STATUSr_SET(r,d) (r).cmic_cmc1_fschan_status[0] = d
#define CMIC_CMC1_FSCHAN_STATUSr_GET(r) (r).cmic_cmc1_fschan_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_FSCHAN_STATUSr_FSCHAN_BUSYf_GET(r) (((r).cmic_cmc1_fschan_status[0]) & 0x1)
#define CMIC_CMC1_FSCHAN_STATUSr_FSCHAN_BUSYf_SET(r,f) (r).cmic_cmc1_fschan_status[0]=(((r).cmic_cmc1_fschan_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC1_FSCHAN_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_HOSTMEM_ADDR_REMAP_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_OFFSET 0x00032474

#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_HOSTMEM_ADDR_REMAP_0.
 */
typedef union CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_hostmem_addr_remap_0[1];
	uint32_t _cmic_cmc1_hostmem_addr_remap_0;
} CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_t;

#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_CLR(r) (r).cmic_cmc1_hostmem_addr_remap_0[0] = 0
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_SET(r,d) (r).cmic_cmc1_hostmem_addr_remap_0[0] = d
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_GET(r) (r).cmic_cmc1_hostmem_addr_remap_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_0f_GET(r) (((r).cmic_cmc1_hostmem_addr_remap_0[0]) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_0f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_0[0]=(((r).cmic_cmc1_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_1f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_0[0]) >> 6) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_1f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_0[0]=(((r).cmic_cmc1_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_2f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_0[0]) >> 12) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_2f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_0[0]=(((r).cmic_cmc1_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_3f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_0[0]) >> 18) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_3f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_0[0]=(((r).cmic_cmc1_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_4f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_0[0]) >> 24) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r_ADDR_4f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_0[0]=(((r).cmic_cmc1_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC1_HOSTMEM_ADDR_REMAP_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_HOSTMEM_ADDR_REMAP_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_OFFSET 0x00032478

#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_HOSTMEM_ADDR_REMAP_1.
 */
typedef union CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_hostmem_addr_remap_1[1];
	uint32_t _cmic_cmc1_hostmem_addr_remap_1;
} CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_t;

#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_CLR(r) (r).cmic_cmc1_hostmem_addr_remap_1[0] = 0
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_SET(r,d) (r).cmic_cmc1_hostmem_addr_remap_1[0] = d
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_GET(r) (r).cmic_cmc1_hostmem_addr_remap_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_0f_GET(r) (((r).cmic_cmc1_hostmem_addr_remap_1[0]) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_0f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_1[0]=(((r).cmic_cmc1_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_1f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_1[0]) >> 6) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_1f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_1[0]=(((r).cmic_cmc1_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_2f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_1[0]) >> 12) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_2f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_1[0]=(((r).cmic_cmc1_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_3f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_1[0]) >> 18) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_3f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_1[0]=(((r).cmic_cmc1_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_4f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_1[0]) >> 24) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r_ADDR_4f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_1[0]=(((r).cmic_cmc1_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC1_HOSTMEM_ADDR_REMAP_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_HOSTMEM_ADDR_REMAP_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_OFFSET 0x0003247c

#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_HOSTMEM_ADDR_REMAP_2.
 */
typedef union CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_hostmem_addr_remap_2[1];
	uint32_t _cmic_cmc1_hostmem_addr_remap_2;
} CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_t;

#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_CLR(r) (r).cmic_cmc1_hostmem_addr_remap_2[0] = 0
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_SET(r,d) (r).cmic_cmc1_hostmem_addr_remap_2[0] = d
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_GET(r) (r).cmic_cmc1_hostmem_addr_remap_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_0f_GET(r) (((r).cmic_cmc1_hostmem_addr_remap_2[0]) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_0f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_2[0]=(((r).cmic_cmc1_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_1f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_2[0]) >> 6) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_1f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_2[0]=(((r).cmic_cmc1_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_2f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_2[0]) >> 12) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_2f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_2[0]=(((r).cmic_cmc1_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_3f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_2[0]) >> 18) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_3f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_2[0]=(((r).cmic_cmc1_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_4f_GET(r) ((((r).cmic_cmc1_hostmem_addr_remap_2[0]) >> 24) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r_ADDR_4f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_2[0]=(((r).cmic_cmc1_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC1_HOSTMEM_ADDR_REMAP_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_HOSTMEM_ADDR_REMAP_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r_OFFSET 0x000324ac

#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_HOSTMEM_ADDR_REMAP_3.
 */
typedef union CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_hostmem_addr_remap_3[1];
	uint32_t _cmic_cmc1_hostmem_addr_remap_3;
} CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r_t;

#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r_CLR(r) (r).cmic_cmc1_hostmem_addr_remap_3[0] = 0
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r_SET(r,d) (r).cmic_cmc1_hostmem_addr_remap_3[0] = d
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r_GET(r) (r).cmic_cmc1_hostmem_addr_remap_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r_ADDR_0f_GET(r) (((r).cmic_cmc1_hostmem_addr_remap_3[0]) & 0x3f)
#define CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r_ADDR_0f_SET(r,f) (r).cmic_cmc1_hostmem_addr_remap_3[0]=(((r).cmic_cmc1_hostmem_addr_remap_3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*******************************************************************************
 * End of 'CMIC_CMC1_HOSTMEM_ADDR_REMAP_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_IRQ_STAT0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_IRQ_STAT0r_OFFSET 0x00032400

#define CMIC_CMC1_IRQ_STAT0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_IRQ_STAT0.
 */
typedef union CMIC_CMC1_IRQ_STAT0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_irq_stat0[1];
	uint32_t _cmic_cmc1_irq_stat0;
} CMIC_CMC1_IRQ_STAT0r_t;

#define CMIC_CMC1_IRQ_STAT0r_CLR(r) (r).cmic_cmc1_irq_stat0[0] = 0
#define CMIC_CMC1_IRQ_STAT0r_SET(r,d) (r).cmic_cmc1_irq_stat0[0] = d
#define CMIC_CMC1_IRQ_STAT0r_GET(r) (r).cmic_cmc1_irq_stat0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_IRQ_STAT0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc1_irq_stat0[0]) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_IRQ_STAT0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 1) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 2) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 3) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 4) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 5) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_IRQ_STAT0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 6) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_IRQ_STAT0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 7) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_IRQ_STAT0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 8) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_IRQ_STAT0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 9) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_IRQ_STAT0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 10) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_IRQ_STAT0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 11) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_IRQ_STAT0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 12) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_IRQ_STAT0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 13) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC1_IRQ_STAT0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 14) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC1_IRQ_STAT0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 15) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC1_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 16) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC1_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 17) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC1_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 18) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC1_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 19) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_IRQ_STAT0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 20) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 21) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_IRQ_STAT0r_SW_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 22) & 0xf)
#define CMIC_CMC1_IRQ_STAT0r_SW_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC1_IRQ_STAT0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 26) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_IRQ_STAT0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 27) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_IRQ_STAT0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 28) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_IRQ_STAT0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 29) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_IRQ_STAT0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat0[0]) >> 30) & 0x1)
#define CMIC_CMC1_IRQ_STAT0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat0[0]=(((r).cmic_cmc1_irq_stat0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC1_IRQ_STAT0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_IRQ_STAT1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_IRQ_STAT1r_OFFSET 0x00032404

#define CMIC_CMC1_IRQ_STAT1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_IRQ_STAT1.
 */
typedef union CMIC_CMC1_IRQ_STAT1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_irq_stat1[1];
	uint32_t _cmic_cmc1_irq_stat1;
} CMIC_CMC1_IRQ_STAT1r_t;

#define CMIC_CMC1_IRQ_STAT1r_CLR(r) (r).cmic_cmc1_irq_stat1[0] = 0
#define CMIC_CMC1_IRQ_STAT1r_SET(r,d) (r).cmic_cmc1_irq_stat1[0] = d
#define CMIC_CMC1_IRQ_STAT1r_GET(r) (r).cmic_cmc1_irq_stat1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_IRQ_STAT1r_I2C_INTRf_GET(r) (((r).cmic_cmc1_irq_stat1[0]) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_I2C_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 1) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_IRQ_STAT1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 2) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 3) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 4) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_IRQ_STAT1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 5) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_IRQ_STAT1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 6) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_IRQ_STAT1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 7) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_IRQ_STAT1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 8) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_IRQ_STAT1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 9) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_IRQ_STAT1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 10) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_IRQ_STAT1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 11) & 0xff)
#define CMIC_CMC1_IRQ_STAT1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC1_IRQ_STAT1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 19) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_IRQ_STAT1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 20) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_IRQ_STAT1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 21) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_IRQ_STAT1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 22) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC1_IRQ_STAT1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 23) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC1_IRQ_STAT1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 24) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_IRQ_STAT1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 25) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC1_IRQ_STAT1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 26) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 27) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_IRQ_STAT1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 28) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_IRQ_STAT1r_SER_INTRf_GET(r) ((((r).cmic_cmc1_irq_stat1[0]) >> 29) & 0x1)
#define CMIC_CMC1_IRQ_STAT1r_SER_INTRf_SET(r,f) (r).cmic_cmc1_irq_stat1[0]=(((r).cmic_cmc1_irq_stat1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC1_IRQ_STAT1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_IRQ_STAT2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_IRQ_STAT2r_OFFSET 0x00032408

#define CMIC_CMC1_IRQ_STAT2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_IRQ_STAT2.
 */
typedef union CMIC_CMC1_IRQ_STAT2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_irq_stat2[1];
	uint32_t _cmic_cmc1_irq_stat2;
} CMIC_CMC1_IRQ_STAT2r_t;

#define CMIC_CMC1_IRQ_STAT2r_CLR(r) (r).cmic_cmc1_irq_stat2[0] = 0
#define CMIC_CMC1_IRQ_STAT2r_SET(r,d) (r).cmic_cmc1_irq_stat2[0] = d
#define CMIC_CMC1_IRQ_STAT2r_GET(r) (r).cmic_cmc1_irq_stat2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_GET(r) ((r).cmic_cmc1_irq_stat2[0])
#define CMIC_CMC1_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_SET(r,f) (r).cmic_cmc1_irq_stat2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_IRQ_STAT2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_IRQ_STAT3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_IRQ_STAT3r_OFFSET 0x0003240c

#define CMIC_CMC1_IRQ_STAT3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_IRQ_STAT3.
 */
typedef union CMIC_CMC1_IRQ_STAT3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_irq_stat3[1];
	uint32_t _cmic_cmc1_irq_stat3;
} CMIC_CMC1_IRQ_STAT3r_t;

#define CMIC_CMC1_IRQ_STAT3r_CLR(r) (r).cmic_cmc1_irq_stat3[0] = 0
#define CMIC_CMC1_IRQ_STAT3r_SET(r,d) (r).cmic_cmc1_irq_stat3[0] = d
#define CMIC_CMC1_IRQ_STAT3r_GET(r) (r).cmic_cmc1_irq_stat3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc1_irq_stat3[0])
#define CMIC_CMC1_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc1_irq_stat3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_IRQ_STAT3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_IRQ_STAT4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_IRQ_STAT4r_OFFSET 0x00032410

#define CMIC_CMC1_IRQ_STAT4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_IRQ_STAT4.
 */
typedef union CMIC_CMC1_IRQ_STAT4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_irq_stat4[1];
	uint32_t _cmic_cmc1_irq_stat4;
} CMIC_CMC1_IRQ_STAT4r_t;

#define CMIC_CMC1_IRQ_STAT4r_CLR(r) (r).cmic_cmc1_irq_stat4[0] = 0
#define CMIC_CMC1_IRQ_STAT4r_SET(r,d) (r).cmic_cmc1_irq_stat4[0] = d
#define CMIC_CMC1_IRQ_STAT4r_GET(r) (r).cmic_cmc1_irq_stat4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc1_irq_stat4[0])
#define CMIC_CMC1_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc1_irq_stat4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_IRQ_STAT4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_IRQ_STAT5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_IRQ_STAT5r_OFFSET 0x000324b0

#define CMIC_CMC1_IRQ_STAT5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_IRQ_STAT5.
 */
typedef union CMIC_CMC1_IRQ_STAT5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_irq_stat5[1];
	uint32_t _cmic_cmc1_irq_stat5;
} CMIC_CMC1_IRQ_STAT5r_t;

#define CMIC_CMC1_IRQ_STAT5r_CLR(r) (r).cmic_cmc1_irq_stat5[0] = 0
#define CMIC_CMC1_IRQ_STAT5r_SET(r,d) (r).cmic_cmc1_irq_stat5[0] = d
#define CMIC_CMC1_IRQ_STAT5r_GET(r) (r).cmic_cmc1_irq_stat5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc1_irq_stat5[0])
#define CMIC_CMC1_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc1_irq_stat5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_IRQ_STAT5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_IRQ_STAT6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_IRQ_STAT6r_OFFSET 0x000324b4

#define CMIC_CMC1_IRQ_STAT6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_IRQ_STAT6.
 */
typedef union CMIC_CMC1_IRQ_STAT6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_irq_stat6[1];
	uint32_t _cmic_cmc1_irq_stat6;
} CMIC_CMC1_IRQ_STAT6r_t;

#define CMIC_CMC1_IRQ_STAT6r_CLR(r) (r).cmic_cmc1_irq_stat6[0] = 0
#define CMIC_CMC1_IRQ_STAT6r_SET(r,d) (r).cmic_cmc1_irq_stat6[0] = d
#define CMIC_CMC1_IRQ_STAT6r_GET(r) (r).cmic_cmc1_irq_stat6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc1_irq_stat6[0])
#define CMIC_CMC1_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc1_irq_stat6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_IRQ_STAT6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_MIIM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_MIIM_ADDRESSr_OFFSET 0x00032088

#define CMIC_CMC1_MIIM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_MIIM_ADDRESS.
 */
typedef union CMIC_CMC1_MIIM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_miim_address[1];
	uint32_t _cmic_cmc1_miim_address;
} CMIC_CMC1_MIIM_ADDRESSr_t;

#define CMIC_CMC1_MIIM_ADDRESSr_CLR(r) (r).cmic_cmc1_miim_address[0] = 0
#define CMIC_CMC1_MIIM_ADDRESSr_SET(r,d) (r).cmic_cmc1_miim_address[0] = d
#define CMIC_CMC1_MIIM_ADDRESSr_GET(r) (r).cmic_cmc1_miim_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_MIIM_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_cmc1_miim_address[0]) & 0xffff)
#define CMIC_CMC1_MIIM_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_cmc1_miim_address[0]=(((r).cmic_cmc1_miim_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC1_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_cmc1_miim_address[0]) >> 16) & 0x1f)
#define CMIC_CMC1_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_cmc1_miim_address[0]=(((r).cmic_cmc1_miim_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))

/*******************************************************************************
 * End of 'CMIC_CMC1_MIIM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_MIIM_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_MIIM_CTRLr_OFFSET 0x0003208c

#define CMIC_CMC1_MIIM_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_MIIM_CTRL.
 */
typedef union CMIC_CMC1_MIIM_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_miim_ctrl[1];
	uint32_t _cmic_cmc1_miim_ctrl;
} CMIC_CMC1_MIIM_CTRLr_t;

#define CMIC_CMC1_MIIM_CTRLr_CLR(r) (r).cmic_cmc1_miim_ctrl[0] = 0
#define CMIC_CMC1_MIIM_CTRLr_SET(r,d) (r).cmic_cmc1_miim_ctrl[0] = d
#define CMIC_CMC1_MIIM_CTRLr_GET(r) (r).cmic_cmc1_miim_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_MIIM_CTRLr_MIIM_WR_STARTf_GET(r) (((r).cmic_cmc1_miim_ctrl[0]) & 0x1)
#define CMIC_CMC1_MIIM_CTRLr_MIIM_WR_STARTf_SET(r,f) (r).cmic_cmc1_miim_ctrl[0]=(((r).cmic_cmc1_miim_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_MIIM_CTRLr_MIIM_RD_STARTf_GET(r) ((((r).cmic_cmc1_miim_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC1_MIIM_CTRLr_MIIM_RD_STARTf_SET(r,f) (r).cmic_cmc1_miim_ctrl[0]=(((r).cmic_cmc1_miim_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC1_MIIM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_MIIM_PARAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_MIIM_PARAMr_OFFSET 0x00032080

#define CMIC_CMC1_MIIM_PARAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_MIIM_PARAM.
 */
typedef union CMIC_CMC1_MIIM_PARAMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_miim_param[1];
	uint32_t _cmic_cmc1_miim_param;
} CMIC_CMC1_MIIM_PARAMr_t;

#define CMIC_CMC1_MIIM_PARAMr_CLR(r) (r).cmic_cmc1_miim_param[0] = 0
#define CMIC_CMC1_MIIM_PARAMr_SET(r,d) (r).cmic_cmc1_miim_param[0] = d
#define CMIC_CMC1_MIIM_PARAMr_GET(r) (r).cmic_cmc1_miim_param[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_MIIM_PARAMr_PHY_DATAf_GET(r) (((r).cmic_cmc1_miim_param[0]) & 0xffff)
#define CMIC_CMC1_MIIM_PARAMr_PHY_DATAf_SET(r,f) (r).cmic_cmc1_miim_param[0]=(((r).cmic_cmc1_miim_param[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC1_MIIM_PARAMr_PHY_IDf_GET(r) ((((r).cmic_cmc1_miim_param[0]) >> 16) & 0x1f)
#define CMIC_CMC1_MIIM_PARAMr_PHY_IDf_SET(r,f) (r).cmic_cmc1_miim_param[0]=(((r).cmic_cmc1_miim_param[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_CMC1_MIIM_PARAMr_C45_SELf_GET(r) ((((r).cmic_cmc1_miim_param[0]) >> 21) & 0x1)
#define CMIC_CMC1_MIIM_PARAMr_C45_SELf_SET(r,f) (r).cmic_cmc1_miim_param[0]=(((r).cmic_cmc1_miim_param[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_MIIM_PARAMr_BUS_IDf_GET(r) ((((r).cmic_cmc1_miim_param[0]) >> 22) & 0x7)
#define CMIC_CMC1_MIIM_PARAMr_BUS_IDf_SET(r,f) (r).cmic_cmc1_miim_param[0]=(((r).cmic_cmc1_miim_param[0] & ~((uint32_t)0x7 << 22)) | ((((uint32_t)f) & 0x7) << 22))
#define CMIC_CMC1_MIIM_PARAMr_INTERNAL_SELf_GET(r) ((((r).cmic_cmc1_miim_param[0]) >> 25) & 0x1)
#define CMIC_CMC1_MIIM_PARAMr_INTERNAL_SELf_SET(r,f) (r).cmic_cmc1_miim_param[0]=(((r).cmic_cmc1_miim_param[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC1_MIIM_PARAMr_MIIM_CYCLEf_GET(r) ((((r).cmic_cmc1_miim_param[0]) >> 29) & 0x7)
#define CMIC_CMC1_MIIM_PARAMr_MIIM_CYCLEf_SET(r,f) (r).cmic_cmc1_miim_param[0]=(((r).cmic_cmc1_miim_param[0] & ~((uint32_t)0x7 << 29)) | ((((uint32_t)f) & 0x7) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC1_MIIM_PARAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_MIIM_READ_DATA
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_MIIM_READ_DATAr_OFFSET 0x00032084

#define CMIC_CMC1_MIIM_READ_DATAr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_MIIM_READ_DATA.
 */
typedef union CMIC_CMC1_MIIM_READ_DATAr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_miim_read_data[1];
	uint32_t _cmic_cmc1_miim_read_data;
} CMIC_CMC1_MIIM_READ_DATAr_t;

#define CMIC_CMC1_MIIM_READ_DATAr_CLR(r) (r).cmic_cmc1_miim_read_data[0] = 0
#define CMIC_CMC1_MIIM_READ_DATAr_SET(r,d) (r).cmic_cmc1_miim_read_data[0] = d
#define CMIC_CMC1_MIIM_READ_DATAr_GET(r) (r).cmic_cmc1_miim_read_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_MIIM_READ_DATAr_DATAf_GET(r) (((r).cmic_cmc1_miim_read_data[0]) & 0xffff)
#define CMIC_CMC1_MIIM_READ_DATAr_DATAf_SET(r,f) (r).cmic_cmc1_miim_read_data[0]=(((r).cmic_cmc1_miim_read_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_CMC1_MIIM_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_MIIM_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_MIIM_STATr_OFFSET 0x00032090

#define CMIC_CMC1_MIIM_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_MIIM_STAT.
 */
typedef union CMIC_CMC1_MIIM_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_miim_stat[1];
	uint32_t _cmic_cmc1_miim_stat;
} CMIC_CMC1_MIIM_STATr_t;

#define CMIC_CMC1_MIIM_STATr_CLR(r) (r).cmic_cmc1_miim_stat[0] = 0
#define CMIC_CMC1_MIIM_STATr_SET(r,d) (r).cmic_cmc1_miim_stat[0] = d
#define CMIC_CMC1_MIIM_STATr_GET(r) (r).cmic_cmc1_miim_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_MIIM_STATr_MIIM_OPN_DONEf_GET(r) (((r).cmic_cmc1_miim_stat[0]) & 0x1)
#define CMIC_CMC1_MIIM_STATr_MIIM_OPN_DONEf_SET(r,f) (r).cmic_cmc1_miim_stat[0]=(((r).cmic_cmc1_miim_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC1_MIIM_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PCIE_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PCIE_IRQ_MASK0r_OFFSET 0x00032414

#define CMIC_CMC1_PCIE_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PCIE_IRQ_MASK0.
 */
typedef union CMIC_CMC1_PCIE_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pcie_irq_mask0[1];
	uint32_t _cmic_cmc1_pcie_irq_mask0;
} CMIC_CMC1_PCIE_IRQ_MASK0r_t;

#define CMIC_CMC1_PCIE_IRQ_MASK0r_CLR(r) (r).cmic_cmc1_pcie_irq_mask0[0] = 0
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SET(r,d) (r).cmic_cmc1_pcie_irq_mask0[0] = d
#define CMIC_CMC1_PCIE_IRQ_MASK0r_GET(r) (r).cmic_cmc1_pcie_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc1_pcie_irq_mask0[0]) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask0[0]=(((r).cmic_cmc1_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC1_PCIE_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PCIE_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PCIE_IRQ_MASK1r_OFFSET 0x00032418

#define CMIC_CMC1_PCIE_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PCIE_IRQ_MASK1.
 */
typedef union CMIC_CMC1_PCIE_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pcie_irq_mask1[1];
	uint32_t _cmic_cmc1_pcie_irq_mask1;
} CMIC_CMC1_PCIE_IRQ_MASK1r_t;

#define CMIC_CMC1_PCIE_IRQ_MASK1r_CLR(r) (r).cmic_cmc1_pcie_irq_mask1[0] = 0
#define CMIC_CMC1_PCIE_IRQ_MASK1r_SET(r,d) (r).cmic_cmc1_pcie_irq_mask1[0] = d
#define CMIC_CMC1_PCIE_IRQ_MASK1r_GET(r) (r).cmic_cmc1_pcie_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PCIE_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc1_pcie_irq_mask1[0]) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_PCIE_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc1_pcie_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC1_PCIE_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask1[0]=(((r).cmic_cmc1_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC1_PCIE_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PCIE_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PCIE_IRQ_MASK2r_OFFSET 0x0003241c

#define CMIC_CMC1_PCIE_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PCIE_IRQ_MASK2.
 */
typedef union CMIC_CMC1_PCIE_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pcie_irq_mask2[1];
	uint32_t _cmic_cmc1_pcie_irq_mask2;
} CMIC_CMC1_PCIE_IRQ_MASK2r_t;

#define CMIC_CMC1_PCIE_IRQ_MASK2r_CLR(r) (r).cmic_cmc1_pcie_irq_mask2[0] = 0
#define CMIC_CMC1_PCIE_IRQ_MASK2r_SET(r,d) (r).cmic_cmc1_pcie_irq_mask2[0] = d
#define CMIC_CMC1_PCIE_IRQ_MASK2r_GET(r) (r).cmic_cmc1_pcie_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PCIE_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc1_pcie_irq_mask2[0])
#define CMIC_CMC1_PCIE_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PCIE_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PCIE_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PCIE_IRQ_MASK3r_OFFSET 0x00032420

#define CMIC_CMC1_PCIE_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PCIE_IRQ_MASK3.
 */
typedef union CMIC_CMC1_PCIE_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pcie_irq_mask3[1];
	uint32_t _cmic_cmc1_pcie_irq_mask3;
} CMIC_CMC1_PCIE_IRQ_MASK3r_t;

#define CMIC_CMC1_PCIE_IRQ_MASK3r_CLR(r) (r).cmic_cmc1_pcie_irq_mask3[0] = 0
#define CMIC_CMC1_PCIE_IRQ_MASK3r_SET(r,d) (r).cmic_cmc1_pcie_irq_mask3[0] = d
#define CMIC_CMC1_PCIE_IRQ_MASK3r_GET(r) (r).cmic_cmc1_pcie_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PCIE_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc1_pcie_irq_mask3[0])
#define CMIC_CMC1_PCIE_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PCIE_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PCIE_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PCIE_IRQ_MASK4r_OFFSET 0x00032424

#define CMIC_CMC1_PCIE_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PCIE_IRQ_MASK4.
 */
typedef union CMIC_CMC1_PCIE_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pcie_irq_mask4[1];
	uint32_t _cmic_cmc1_pcie_irq_mask4;
} CMIC_CMC1_PCIE_IRQ_MASK4r_t;

#define CMIC_CMC1_PCIE_IRQ_MASK4r_CLR(r) (r).cmic_cmc1_pcie_irq_mask4[0] = 0
#define CMIC_CMC1_PCIE_IRQ_MASK4r_SET(r,d) (r).cmic_cmc1_pcie_irq_mask4[0] = d
#define CMIC_CMC1_PCIE_IRQ_MASK4r_GET(r) (r).cmic_cmc1_pcie_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PCIE_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc1_pcie_irq_mask4[0])
#define CMIC_CMC1_PCIE_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PCIE_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PCIE_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PCIE_IRQ_MASK5r_OFFSET 0x000324b8

#define CMIC_CMC1_PCIE_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PCIE_IRQ_MASK5.
 */
typedef union CMIC_CMC1_PCIE_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pcie_irq_mask5[1];
	uint32_t _cmic_cmc1_pcie_irq_mask5;
} CMIC_CMC1_PCIE_IRQ_MASK5r_t;

#define CMIC_CMC1_PCIE_IRQ_MASK5r_CLR(r) (r).cmic_cmc1_pcie_irq_mask5[0] = 0
#define CMIC_CMC1_PCIE_IRQ_MASK5r_SET(r,d) (r).cmic_cmc1_pcie_irq_mask5[0] = d
#define CMIC_CMC1_PCIE_IRQ_MASK5r_GET(r) (r).cmic_cmc1_pcie_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PCIE_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc1_pcie_irq_mask5[0])
#define CMIC_CMC1_PCIE_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PCIE_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PCIE_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PCIE_IRQ_MASK6r_OFFSET 0x000324bc

#define CMIC_CMC1_PCIE_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PCIE_IRQ_MASK6.
 */
typedef union CMIC_CMC1_PCIE_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pcie_irq_mask6[1];
	uint32_t _cmic_cmc1_pcie_irq_mask6;
} CMIC_CMC1_PCIE_IRQ_MASK6r_t;

#define CMIC_CMC1_PCIE_IRQ_MASK6r_CLR(r) (r).cmic_cmc1_pcie_irq_mask6[0] = 0
#define CMIC_CMC1_PCIE_IRQ_MASK6r_SET(r,d) (r).cmic_cmc1_pcie_irq_mask6[0] = d
#define CMIC_CMC1_PCIE_IRQ_MASK6r_GET(r) (r).cmic_cmc1_pcie_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PCIE_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc1_pcie_irq_mask6[0])
#define CMIC_CMC1_PCIE_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc1_pcie_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PCIE_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PCIE_MISCEL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PCIE_MISCELr_OFFSET 0x00032470

#define CMIC_CMC1_PCIE_MISCELr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PCIE_MISCEL.
 */
typedef union CMIC_CMC1_PCIE_MISCELr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pcie_miscel[1];
	uint32_t _cmic_cmc1_pcie_miscel;
} CMIC_CMC1_PCIE_MISCELr_t;

#define CMIC_CMC1_PCIE_MISCELr_CLR(r) (r).cmic_cmc1_pcie_miscel[0] = 0
#define CMIC_CMC1_PCIE_MISCELr_SET(r,d) (r).cmic_cmc1_pcie_miscel[0] = d
#define CMIC_CMC1_PCIE_MISCELr_GET(r) (r).cmic_cmc1_pcie_miscel[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PCIE_MISCELr_MSI_PACING_DELAYf_GET(r) (((r).cmic_cmc1_pcie_miscel[0]) & 0xf)
#define CMIC_CMC1_PCIE_MISCELr_MSI_PACING_DELAYf_SET(r,f) (r).cmic_cmc1_pcie_miscel[0]=(((r).cmic_cmc1_pcie_miscel[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC1_PCIE_MISCELr_ENABLE_MSIf_GET(r) ((((r).cmic_cmc1_pcie_miscel[0]) >> 4) & 0x1)
#define CMIC_CMC1_PCIE_MISCELr_ENABLE_MSIf_SET(r,f) (r).cmic_cmc1_pcie_miscel[0]=(((r).cmic_cmc1_pcie_miscel[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_PCIE_MISCELr_MSI_PACING_DELAY_GRANULARITYf_GET(r) ((((r).cmic_cmc1_pcie_miscel[0]) >> 5) & 0x7)
#define CMIC_CMC1_PCIE_MISCELr_MSI_PACING_DELAY_GRANULARITYf_SET(r,f) (r).cmic_cmc1_pcie_miscel[0]=(((r).cmic_cmc1_pcie_miscel[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define CMIC_CMC1_PCIE_MISCELr_MSI_ADDR_SELf_GET(r) ((((r).cmic_cmc1_pcie_miscel[0]) >> 8) & 0x1)
#define CMIC_CMC1_PCIE_MISCELr_MSI_ADDR_SELf_SET(r,f) (r).cmic_cmc1_pcie_miscel[0]=(((r).cmic_cmc1_pcie_miscel[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC1_PCIE_MISCELr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_CH0_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_CH0_RXPKTr_OFFSET 0x00032480

#define CMIC_CMC1_PKT_COUNT_CH0_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_CH0_RXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_CH0_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_ch0_rxpkt[1];
	uint32_t _cmic_cmc1_pkt_count_ch0_rxpkt;
} CMIC_CMC1_PKT_COUNT_CH0_RXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_CH0_RXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_ch0_rxpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_CH0_RXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_ch0_rxpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_CH0_RXPKTr_GET(r) (r).cmic_cmc1_pkt_count_ch0_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_CH0_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_ch0_rxpkt[0])
#define CMIC_CMC1_PKT_COUNT_CH0_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_ch0_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_CH0_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_CH0_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_CH0_TXPKTr_OFFSET 0x00032484

#define CMIC_CMC1_PKT_COUNT_CH0_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_CH0_TXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_CH0_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_ch0_txpkt[1];
	uint32_t _cmic_cmc1_pkt_count_ch0_txpkt;
} CMIC_CMC1_PKT_COUNT_CH0_TXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_CH0_TXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_ch0_txpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_CH0_TXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_ch0_txpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_CH0_TXPKTr_GET(r) (r).cmic_cmc1_pkt_count_ch0_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_CH0_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_ch0_txpkt[0])
#define CMIC_CMC1_PKT_COUNT_CH0_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_ch0_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_CH0_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_CH1_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_CH1_RXPKTr_OFFSET 0x00032488

#define CMIC_CMC1_PKT_COUNT_CH1_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_CH1_RXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_CH1_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_ch1_rxpkt[1];
	uint32_t _cmic_cmc1_pkt_count_ch1_rxpkt;
} CMIC_CMC1_PKT_COUNT_CH1_RXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_CH1_RXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_ch1_rxpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_CH1_RXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_ch1_rxpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_CH1_RXPKTr_GET(r) (r).cmic_cmc1_pkt_count_ch1_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_CH1_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_ch1_rxpkt[0])
#define CMIC_CMC1_PKT_COUNT_CH1_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_ch1_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_CH1_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_CH1_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_CH1_TXPKTr_OFFSET 0x0003248c

#define CMIC_CMC1_PKT_COUNT_CH1_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_CH1_TXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_CH1_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_ch1_txpkt[1];
	uint32_t _cmic_cmc1_pkt_count_ch1_txpkt;
} CMIC_CMC1_PKT_COUNT_CH1_TXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_CH1_TXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_ch1_txpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_CH1_TXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_ch1_txpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_CH1_TXPKTr_GET(r) (r).cmic_cmc1_pkt_count_ch1_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_CH1_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_ch1_txpkt[0])
#define CMIC_CMC1_PKT_COUNT_CH1_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_ch1_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_CH1_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_CH2_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_CH2_RXPKTr_OFFSET 0x00032490

#define CMIC_CMC1_PKT_COUNT_CH2_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_CH2_RXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_CH2_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_ch2_rxpkt[1];
	uint32_t _cmic_cmc1_pkt_count_ch2_rxpkt;
} CMIC_CMC1_PKT_COUNT_CH2_RXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_CH2_RXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_ch2_rxpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_CH2_RXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_ch2_rxpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_CH2_RXPKTr_GET(r) (r).cmic_cmc1_pkt_count_ch2_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_CH2_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_ch2_rxpkt[0])
#define CMIC_CMC1_PKT_COUNT_CH2_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_ch2_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_CH2_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_CH2_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_CH2_TXPKTr_OFFSET 0x00032494

#define CMIC_CMC1_PKT_COUNT_CH2_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_CH2_TXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_CH2_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_ch2_txpkt[1];
	uint32_t _cmic_cmc1_pkt_count_ch2_txpkt;
} CMIC_CMC1_PKT_COUNT_CH2_TXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_CH2_TXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_ch2_txpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_CH2_TXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_ch2_txpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_CH2_TXPKTr_GET(r) (r).cmic_cmc1_pkt_count_ch2_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_CH2_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_ch2_txpkt[0])
#define CMIC_CMC1_PKT_COUNT_CH2_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_ch2_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_CH2_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_CH3_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_CH3_RXPKTr_OFFSET 0x00032498

#define CMIC_CMC1_PKT_COUNT_CH3_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_CH3_RXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_CH3_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_ch3_rxpkt[1];
	uint32_t _cmic_cmc1_pkt_count_ch3_rxpkt;
} CMIC_CMC1_PKT_COUNT_CH3_RXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_CH3_RXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_ch3_rxpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_CH3_RXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_ch3_rxpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_CH3_RXPKTr_GET(r) (r).cmic_cmc1_pkt_count_ch3_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_CH3_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_ch3_rxpkt[0])
#define CMIC_CMC1_PKT_COUNT_CH3_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_ch3_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_CH3_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_CH3_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_CH3_TXPKTr_OFFSET 0x0003249c

#define CMIC_CMC1_PKT_COUNT_CH3_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_CH3_TXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_CH3_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_ch3_txpkt[1];
	uint32_t _cmic_cmc1_pkt_count_ch3_txpkt;
} CMIC_CMC1_PKT_COUNT_CH3_TXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_CH3_TXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_ch3_txpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_CH3_TXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_ch3_txpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_CH3_TXPKTr_GET(r) (r).cmic_cmc1_pkt_count_ch3_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_CH3_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_ch3_txpkt[0])
#define CMIC_CMC1_PKT_COUNT_CH3_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_ch3_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_CH3_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_RXPKTr_OFFSET 0x000324a0

#define CMIC_CMC1_PKT_COUNT_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_RXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_rxpkt[1];
	uint32_t _cmic_cmc1_pkt_count_rxpkt;
} CMIC_CMC1_PKT_COUNT_RXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_RXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_rxpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_RXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_rxpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_RXPKTr_GET(r) (r).cmic_cmc1_pkt_count_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_rxpkt[0])
#define CMIC_CMC1_PKT_COUNT_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PKT_COUNT_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PKT_COUNT_TXPKTr_OFFSET 0x000324a4

#define CMIC_CMC1_PKT_COUNT_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PKT_COUNT_TXPKT.
 */
typedef union CMIC_CMC1_PKT_COUNT_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_pkt_count_txpkt[1];
	uint32_t _cmic_cmc1_pkt_count_txpkt;
} CMIC_CMC1_PKT_COUNT_TXPKTr_t;

#define CMIC_CMC1_PKT_COUNT_TXPKTr_CLR(r) (r).cmic_cmc1_pkt_count_txpkt[0] = 0
#define CMIC_CMC1_PKT_COUNT_TXPKTr_SET(r,d) (r).cmic_cmc1_pkt_count_txpkt[0] = d
#define CMIC_CMC1_PKT_COUNT_TXPKTr_GET(r) (r).cmic_cmc1_pkt_count_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PKT_COUNT_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc1_pkt_count_txpkt[0])
#define CMIC_CMC1_PKT_COUNT_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc1_pkt_count_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PKT_COUNT_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PROGRAMMABLE_COS_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK0r_OFFSET 0x0003219c

#define CMIC_CMC1_PROGRAMMABLE_COS_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PROGRAMMABLE_COS_MASK0.
 */
typedef union CMIC_CMC1_PROGRAMMABLE_COS_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_programmable_cos_mask0[1];
	uint32_t _cmic_cmc1_programmable_cos_mask0;
} CMIC_CMC1_PROGRAMMABLE_COS_MASK0r_t;

#define CMIC_CMC1_PROGRAMMABLE_COS_MASK0r_CLR(r) (r).cmic_cmc1_programmable_cos_mask0[0] = 0
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK0r_SET(r,d) (r).cmic_cmc1_programmable_cos_mask0[0] = d
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK0r_GET(r) (r).cmic_cmc1_programmable_cos_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK0r_COS_MASKf_GET(r) ((r).cmic_cmc1_programmable_cos_mask0[0])
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK0r_COS_MASKf_SET(r,f) (r).cmic_cmc1_programmable_cos_mask0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PROGRAMMABLE_COS_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_PROGRAMMABLE_COS_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK1r_OFFSET 0x000321a0

#define CMIC_CMC1_PROGRAMMABLE_COS_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_PROGRAMMABLE_COS_MASK1.
 */
typedef union CMIC_CMC1_PROGRAMMABLE_COS_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_programmable_cos_mask1[1];
	uint32_t _cmic_cmc1_programmable_cos_mask1;
} CMIC_CMC1_PROGRAMMABLE_COS_MASK1r_t;

#define CMIC_CMC1_PROGRAMMABLE_COS_MASK1r_CLR(r) (r).cmic_cmc1_programmable_cos_mask1[0] = 0
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK1r_SET(r,d) (r).cmic_cmc1_programmable_cos_mask1[0] = d
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK1r_GET(r) (r).cmic_cmc1_programmable_cos_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK1r_COS_MASKf_GET(r) ((r).cmic_cmc1_programmable_cos_mask1[0])
#define CMIC_CMC1_PROGRAMMABLE_COS_MASK1r_COS_MASKf_SET(r,f) (r).cmic_cmc1_programmable_cos_mask1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_PROGRAMMABLE_COS_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_RCPU_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_RCPU_IRQ_MASK0r_OFFSET 0x00032450

#define CMIC_CMC1_RCPU_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_RCPU_IRQ_MASK0.
 */
typedef union CMIC_CMC1_RCPU_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_rcpu_irq_mask0[1];
	uint32_t _cmic_cmc1_rcpu_irq_mask0;
} CMIC_CMC1_RCPU_IRQ_MASK0r_t;

#define CMIC_CMC1_RCPU_IRQ_MASK0r_CLR(r) (r).cmic_cmc1_rcpu_irq_mask0[0] = 0
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SET(r,d) (r).cmic_cmc1_rcpu_irq_mask0[0] = d
#define CMIC_CMC1_RCPU_IRQ_MASK0r_GET(r) (r).cmic_cmc1_rcpu_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc1_rcpu_irq_mask0[0]) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_rcpu_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC1_RCPU_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_rcpu_irq_mask0[0]=(((r).cmic_cmc1_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC1_RCPU_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_OFFSET 0x00032600

#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_CONTROL.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_control[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_control;
} CMIC_CMC1_SBUSDMA_CH0_CONTROLr_t;

#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_control[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_control[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_GET(r) (r).cmic_cmc1_sbusdma_ch0_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_STARTf_GET(r) (((r).cmic_cmc1_sbusdma_ch0_control[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_control[0]=(((r).cmic_cmc1_sbusdma_ch0_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_control[0]=(((r).cmic_cmc1_sbusdma_ch0_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_control[0]) >> 2) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_control[0]=(((r).cmic_cmc1_sbusdma_ch0_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_control[0]) >> 3) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_control[0]=(((r).cmic_cmc1_sbusdma_ch0_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_COUNTr_OFFSET 0x00032608

#define CMIC_CMC1_SBUSDMA_CH0_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_COUNT.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_count[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_count;
} CMIC_CMC1_SBUSDMA_CH0_COUNTr_t;

#define CMIC_CMC1_SBUSDMA_CH0_COUNTr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_count[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_COUNTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_count[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_COUNTr_GET(r) (r).cmic_cmc1_sbusdma_ch0_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_COUNTr_COUNTf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_count[0])
#define CMIC_CMC1_SBUSDMA_CH0_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr_OFFSET 0x00032628

#define CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_cur_desc_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_cur_desc_address;
} CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_cur_desc_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_cur_desc_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_cur_desc_address[0])
#define CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_OFFSET 0x00032620

#define CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_cur_hostmem_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_cur_hostmem_address;
} CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_cur_hostmem_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_cur_hostmem_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_cur_hostmem_address[0])
#define CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x00032630

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_count;
} CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_count[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_count[0])
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x00032638

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x0003263c

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_opcode;
} CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_opcode[0])
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x0003262c

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_request;
} CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_request[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_request[0])
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x00032634

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_OFFSET 0x00032624

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_cur_sbus_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_cur_sbus_address;
} CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbus_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_cur_sbus_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_cur_sbus_address[0])
#define CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr_OFFSET 0x00032618

#define CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_desc_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_desc_start_address;
} CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_desc_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_desc_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_desc_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_OFFSET 0x00032614

#define CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_hostmem_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_hostmem_start_address;
} CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_hostmem_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_hostmem_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_hostmem_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr_OFFSET 0x000326fc

#define CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_ITER_COUNT.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_iter_count[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_iter_count;
} CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr_t;

#define CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_iter_count[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_iter_count[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr_GET(r) (r).cmic_cmc1_sbusdma_ch0_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_iter_count[0])
#define CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_OPCODEr_OFFSET 0x0003260c

#define CMIC_CMC1_SBUSDMA_CH0_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_OPCODE.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_opcode[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_opcode;
} CMIC_CMC1_SBUSDMA_CH0_OPCODEr_t;

#define CMIC_CMC1_SBUSDMA_CH0_OPCODEr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_opcode[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_OPCODEr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_opcode[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_OPCODEr_GET(r) (r).cmic_cmc1_sbusdma_ch0_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_opcode[0])
#define CMIC_CMC1_SBUSDMA_CH0_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_OFFSET 0x00032604

#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_REQUEST.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_request[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_request;
} CMIC_CMC1_SBUSDMA_CH0_REQUESTr_t;

#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_request[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_request[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_GET(r) (r).cmic_cmc1_sbusdma_ch0_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc1_sbusdma_ch0_request[0]) & 0x1f)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 5) & 0x1f)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 10) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 11) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 12) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 13) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 16) & 0xff)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 24) & 0x1f)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 29) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 30) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_request[0]) >> 31) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_request[0]=(((r).cmic_cmc1_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr_OFFSET 0x00032640

#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_sbusdma_debug[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_sbusdma_debug;
} CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr_t;

#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_sbusdma_debug[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_sbusdma_debug[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc1_sbusdma_ch0_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc1_sbusdma_ch0_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_sbusdma_debug[0]=(((r).cmic_cmc1_sbusdma_ch0_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_OFFSET 0x00032644

#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr;
} CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[0]=(((r).cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[0]=(((r).cmic_cmc1_sbusdma_ch0_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x00032648

#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_address;
} CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_address[0])
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x0003264c

#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control;
} CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr_OFFSET 0x00032610

#define CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_sbus_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_sbus_start_address;
} CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_sbus_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_sbus_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_sbus_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_OFFSET 0x0003261c

#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_STATUS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_status[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_status;
} CMIC_CMC1_SBUSDMA_CH0_STATUSr_t;

#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_status[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_status[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_GET(r) (r).cmic_cmc1_sbusdma_ch0_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_DONEf_GET(r) (((r).cmic_cmc1_sbusdma_ch0_status[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_DONEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 2) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 3) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 4) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 5) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 6) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 7) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 8) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 9) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 10) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 11) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 12) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_status[0]) >> 13) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_status[0]=(((r).cmic_cmc1_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_TIMERr_OFFSET 0x000326f0

#define CMIC_CMC1_SBUSDMA_CH0_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_TIMER.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_timer[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_timer;
} CMIC_CMC1_SBUSDMA_CH0_TIMERr_t;

#define CMIC_CMC1_SBUSDMA_CH0_TIMERr_CLR(r) (r).cmic_cmc1_sbusdma_ch0_timer[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_TIMERr_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_timer[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_TIMERr_GET(r) (r).cmic_cmc1_sbusdma_ch0_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_TIMERr_TIMERf_GET(r) ((r).cmic_cmc1_sbusdma_ch0_timer[0])
#define CMIC_CMC1_SBUSDMA_CH0_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_OFFSET 0x00032800

#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_tm_control_0[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_tm_control_0;
} CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_t;

#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_CLR(r) (r).cmic_cmc1_sbusdma_ch0_tm_control_0[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_tm_control_0[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_GET(r) (r).cmic_cmc1_sbusdma_ch0_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc1_sbusdma_ch0_tm_control_0[0]) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_OFFSET 0x00032804

#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_tm_control_1[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_tm_control_1;
} CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_t;

#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_CLR(r) (r).cmic_cmc1_sbusdma_ch0_tm_control_1[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_tm_control_1[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_GET(r) (r).cmic_cmc1_sbusdma_ch0_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc1_sbusdma_ch0_tm_control_1[0]) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_OFFSET 0x0003280c

#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2.
 */
typedef union CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch0_tm_control_2[1];
	uint32_t _cmic_cmc1_sbusdma_ch0_tm_control_2;
} CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_t;

#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_CLR(r) (r).cmic_cmc1_sbusdma_ch0_tm_control_2[0] = 0
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc1_sbusdma_ch0_tm_control_2[0] = d
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_GET(r) (r).cmic_cmc1_sbusdma_ch0_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc1_sbusdma_ch0_tm_control_2[0]) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch0_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH0_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_OFFSET 0x00032650

#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_CONTROL.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_control[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_control;
} CMIC_CMC1_SBUSDMA_CH1_CONTROLr_t;

#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_control[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_control[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_GET(r) (r).cmic_cmc1_sbusdma_ch1_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_STARTf_GET(r) (((r).cmic_cmc1_sbusdma_ch1_control[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_control[0]=(((r).cmic_cmc1_sbusdma_ch1_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_control[0]=(((r).cmic_cmc1_sbusdma_ch1_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_control[0]) >> 2) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_control[0]=(((r).cmic_cmc1_sbusdma_ch1_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_control[0]) >> 3) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_control[0]=(((r).cmic_cmc1_sbusdma_ch1_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_COUNTr_OFFSET 0x00032658

#define CMIC_CMC1_SBUSDMA_CH1_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_COUNT.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_count[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_count;
} CMIC_CMC1_SBUSDMA_CH1_COUNTr_t;

#define CMIC_CMC1_SBUSDMA_CH1_COUNTr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_count[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_COUNTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_count[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_COUNTr_GET(r) (r).cmic_cmc1_sbusdma_ch1_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_COUNTr_COUNTf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_count[0])
#define CMIC_CMC1_SBUSDMA_CH1_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr_OFFSET 0x00032678

#define CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_cur_desc_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_cur_desc_address;
} CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_cur_desc_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_cur_desc_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_cur_desc_address[0])
#define CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_OFFSET 0x00032670

#define CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_cur_hostmem_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_cur_hostmem_address;
} CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_cur_hostmem_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_cur_hostmem_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_cur_hostmem_address[0])
#define CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x00032680

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_count;
} CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_count[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_count[0])
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x00032688

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x0003268c

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_opcode;
} CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_opcode[0])
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x0003267c

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_request;
} CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_request[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_request[0])
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x00032684

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_OFFSET 0x00032674

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_cur_sbus_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_cur_sbus_address;
} CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbus_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_cur_sbus_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_cur_sbus_address[0])
#define CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr_OFFSET 0x00032668

#define CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_desc_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_desc_start_address;
} CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_desc_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_desc_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_desc_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_OFFSET 0x00032664

#define CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_hostmem_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_hostmem_start_address;
} CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_hostmem_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_hostmem_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_hostmem_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr_OFFSET 0x00032700

#define CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_ITER_COUNT.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_iter_count[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_iter_count;
} CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr_t;

#define CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_iter_count[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_iter_count[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr_GET(r) (r).cmic_cmc1_sbusdma_ch1_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_iter_count[0])
#define CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_OPCODEr_OFFSET 0x0003265c

#define CMIC_CMC1_SBUSDMA_CH1_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_OPCODE.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_opcode[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_opcode;
} CMIC_CMC1_SBUSDMA_CH1_OPCODEr_t;

#define CMIC_CMC1_SBUSDMA_CH1_OPCODEr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_opcode[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_OPCODEr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_opcode[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_OPCODEr_GET(r) (r).cmic_cmc1_sbusdma_ch1_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_opcode[0])
#define CMIC_CMC1_SBUSDMA_CH1_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_OFFSET 0x00032654

#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_REQUEST.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_request[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_request;
} CMIC_CMC1_SBUSDMA_CH1_REQUESTr_t;

#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_request[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_request[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_GET(r) (r).cmic_cmc1_sbusdma_ch1_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc1_sbusdma_ch1_request[0]) & 0x1f)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 5) & 0x1f)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 10) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 11) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 12) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 13) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 16) & 0xff)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 24) & 0x1f)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 29) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 30) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_request[0]) >> 31) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_request[0]=(((r).cmic_cmc1_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr_OFFSET 0x00032690

#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_sbusdma_debug[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_sbusdma_debug;
} CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr_t;

#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_sbusdma_debug[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_sbusdma_debug[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc1_sbusdma_ch1_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc1_sbusdma_ch1_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_sbusdma_debug[0]=(((r).cmic_cmc1_sbusdma_ch1_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_OFFSET 0x00032694

#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr;
} CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[0]=(((r).cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[0]=(((r).cmic_cmc1_sbusdma_ch1_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x00032698

#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_address;
} CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_address[0])
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x0003269c

#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control;
} CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr_OFFSET 0x00032660

#define CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_sbus_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_sbus_start_address;
} CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_sbus_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_sbus_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_sbus_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_OFFSET 0x0003266c

#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_STATUS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_status[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_status;
} CMIC_CMC1_SBUSDMA_CH1_STATUSr_t;

#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_status[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_status[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_GET(r) (r).cmic_cmc1_sbusdma_ch1_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_DONEf_GET(r) (((r).cmic_cmc1_sbusdma_ch1_status[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_DONEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 2) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 3) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 4) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 5) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 6) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 7) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 8) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 9) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 10) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 11) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 12) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_status[0]) >> 13) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_status[0]=(((r).cmic_cmc1_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_TIMERr_OFFSET 0x000326f4

#define CMIC_CMC1_SBUSDMA_CH1_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_TIMER.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_timer[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_timer;
} CMIC_CMC1_SBUSDMA_CH1_TIMERr_t;

#define CMIC_CMC1_SBUSDMA_CH1_TIMERr_CLR(r) (r).cmic_cmc1_sbusdma_ch1_timer[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_TIMERr_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_timer[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_TIMERr_GET(r) (r).cmic_cmc1_sbusdma_ch1_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_TIMERr_TIMERf_GET(r) ((r).cmic_cmc1_sbusdma_ch1_timer[0])
#define CMIC_CMC1_SBUSDMA_CH1_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_OFFSET 0x00032810

#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_tm_control_0[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_tm_control_0;
} CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_t;

#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_CLR(r) (r).cmic_cmc1_sbusdma_ch1_tm_control_0[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_tm_control_0[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_GET(r) (r).cmic_cmc1_sbusdma_ch1_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc1_sbusdma_ch1_tm_control_0[0]) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_OFFSET 0x00032814

#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_tm_control_1[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_tm_control_1;
} CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_t;

#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_CLR(r) (r).cmic_cmc1_sbusdma_ch1_tm_control_1[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_tm_control_1[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_GET(r) (r).cmic_cmc1_sbusdma_ch1_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc1_sbusdma_ch1_tm_control_1[0]) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_OFFSET 0x00032818

#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2.
 */
typedef union CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch1_tm_control_2[1];
	uint32_t _cmic_cmc1_sbusdma_ch1_tm_control_2;
} CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_t;

#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_CLR(r) (r).cmic_cmc1_sbusdma_ch1_tm_control_2[0] = 0
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc1_sbusdma_ch1_tm_control_2[0] = d
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_GET(r) (r).cmic_cmc1_sbusdma_ch1_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc1_sbusdma_ch1_tm_control_2[0]) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch1_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH1_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_OFFSET 0x000326a0

#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_CONTROL.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_control[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_control;
} CMIC_CMC1_SBUSDMA_CH2_CONTROLr_t;

#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_control[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_control[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_GET(r) (r).cmic_cmc1_sbusdma_ch2_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_STARTf_GET(r) (((r).cmic_cmc1_sbusdma_ch2_control[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_control[0]=(((r).cmic_cmc1_sbusdma_ch2_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_control[0]=(((r).cmic_cmc1_sbusdma_ch2_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_control[0]) >> 2) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_control[0]=(((r).cmic_cmc1_sbusdma_ch2_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_control[0]) >> 3) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_control[0]=(((r).cmic_cmc1_sbusdma_ch2_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_COUNTr_OFFSET 0x000326a8

#define CMIC_CMC1_SBUSDMA_CH2_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_COUNT.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_count[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_count;
} CMIC_CMC1_SBUSDMA_CH2_COUNTr_t;

#define CMIC_CMC1_SBUSDMA_CH2_COUNTr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_count[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_COUNTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_count[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_COUNTr_GET(r) (r).cmic_cmc1_sbusdma_ch2_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_COUNTr_COUNTf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_count[0])
#define CMIC_CMC1_SBUSDMA_CH2_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr_OFFSET 0x000326c8

#define CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_cur_desc_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_cur_desc_address;
} CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_cur_desc_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_cur_desc_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_cur_desc_address[0])
#define CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_OFFSET 0x000326c0

#define CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_cur_hostmem_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_cur_hostmem_address;
} CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_cur_hostmem_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_cur_hostmem_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_cur_hostmem_address[0])
#define CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x000326d0

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_count;
} CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_count[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_count[0])
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x000326d8

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x000326dc

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_opcode;
} CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_opcode[0])
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x000326cc

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_request;
} CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_request[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_request[0])
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x000326d4

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_OFFSET 0x000326c4

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_cur_sbus_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_cur_sbus_address;
} CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbus_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_cur_sbus_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_cur_sbus_address[0])
#define CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr_OFFSET 0x000326b8

#define CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_desc_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_desc_start_address;
} CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_desc_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_desc_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_desc_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_OFFSET 0x000326b4

#define CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_hostmem_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_hostmem_start_address;
} CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_hostmem_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_hostmem_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_hostmem_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr_OFFSET 0x00032704

#define CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_ITER_COUNT.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_iter_count[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_iter_count;
} CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr_t;

#define CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_iter_count[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_iter_count[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr_GET(r) (r).cmic_cmc1_sbusdma_ch2_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_iter_count[0])
#define CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_OPCODEr_OFFSET 0x000326ac

#define CMIC_CMC1_SBUSDMA_CH2_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_OPCODE.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_opcode[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_opcode;
} CMIC_CMC1_SBUSDMA_CH2_OPCODEr_t;

#define CMIC_CMC1_SBUSDMA_CH2_OPCODEr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_opcode[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_OPCODEr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_opcode[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_OPCODEr_GET(r) (r).cmic_cmc1_sbusdma_ch2_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_opcode[0])
#define CMIC_CMC1_SBUSDMA_CH2_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_OFFSET 0x000326a4

#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_REQUEST.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_request[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_request;
} CMIC_CMC1_SBUSDMA_CH2_REQUESTr_t;

#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_request[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_request[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_GET(r) (r).cmic_cmc1_sbusdma_ch2_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc1_sbusdma_ch2_request[0]) & 0x1f)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 5) & 0x1f)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 10) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 11) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 12) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 13) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 16) & 0xff)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 24) & 0x1f)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 29) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 30) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_request[0]) >> 31) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_request[0]=(((r).cmic_cmc1_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr_OFFSET 0x000326e0

#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_sbusdma_debug[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_sbusdma_debug;
} CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr_t;

#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_sbusdma_debug[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_sbusdma_debug[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc1_sbusdma_ch2_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc1_sbusdma_ch2_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_sbusdma_debug[0]=(((r).cmic_cmc1_sbusdma_ch2_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_OFFSET 0x000326e4

#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr;
} CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[0]=(((r).cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[0]=(((r).cmic_cmc1_sbusdma_ch2_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x000326e8

#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_address;
} CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_address[0])
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x000326ec

#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control;
} CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc1_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr_OFFSET 0x000326b0

#define CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_sbus_start_address[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_sbus_start_address;
} CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_sbus_start_address[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_sbus_start_address[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_sbus_start_address[0])
#define CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_OFFSET 0x000326bc

#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_STATUS.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_status[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_status;
} CMIC_CMC1_SBUSDMA_CH2_STATUSr_t;

#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_status[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_status[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_GET(r) (r).cmic_cmc1_sbusdma_ch2_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_DONEf_GET(r) (((r).cmic_cmc1_sbusdma_ch2_status[0]) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_DONEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 1) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 2) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 3) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 4) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 5) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 6) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 7) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 8) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 9) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 10) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 11) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 12) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_status[0]) >> 13) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_status[0]=(((r).cmic_cmc1_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_TIMERr_OFFSET 0x000326f8

#define CMIC_CMC1_SBUSDMA_CH2_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_TIMER.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_timer[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_timer;
} CMIC_CMC1_SBUSDMA_CH2_TIMERr_t;

#define CMIC_CMC1_SBUSDMA_CH2_TIMERr_CLR(r) (r).cmic_cmc1_sbusdma_ch2_timer[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_TIMERr_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_timer[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_TIMERr_GET(r) (r).cmic_cmc1_sbusdma_ch2_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_TIMERr_TIMERf_GET(r) ((r).cmic_cmc1_sbusdma_ch2_timer[0])
#define CMIC_CMC1_SBUSDMA_CH2_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_OFFSET 0x0003281c

#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_tm_control_0[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_tm_control_0;
} CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_t;

#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_CLR(r) (r).cmic_cmc1_sbusdma_ch2_tm_control_0[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_tm_control_0[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_GET(r) (r).cmic_cmc1_sbusdma_ch2_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc1_sbusdma_ch2_tm_control_0[0]) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_OFFSET 0x00032820

#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_tm_control_1[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_tm_control_1;
} CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_t;

#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_CLR(r) (r).cmic_cmc1_sbusdma_ch2_tm_control_1[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_tm_control_1[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_GET(r) (r).cmic_cmc1_sbusdma_ch2_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc1_sbusdma_ch2_tm_control_1[0]) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_OFFSET 0x00032824

#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2.
 */
typedef union CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sbusdma_ch2_tm_control_2[1];
	uint32_t _cmic_cmc1_sbusdma_ch2_tm_control_2;
} CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_t;

#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_CLR(r) (r).cmic_cmc1_sbusdma_ch2_tm_control_2[0] = 0
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc1_sbusdma_ch2_tm_control_2[0] = d
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_GET(r) (r).cmic_cmc1_sbusdma_ch2_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc1_sbusdma_ch2_tm_control_2[0]) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc1_sbusdma_ch2_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc1_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc1_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC1_SBUSDMA_CH2_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET 0x00032004

#define CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNT.
 */
typedef union CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_schan_ack_data_beat_count[1];
	uint32_t _cmic_cmc1_schan_ack_data_beat_count;
} CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_t;

#define CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_CLR(r) (r).cmic_cmc1_schan_ack_data_beat_count[0] = 0
#define CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_SET(r,d) (r).cmic_cmc1_schan_ack_data_beat_count[0] = d
#define CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_GET(r) (r).cmic_cmc1_schan_ack_data_beat_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_GET(r) (((r).cmic_cmc1_schan_ack_data_beat_count[0]) & 0x1f)
#define CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc1_schan_ack_data_beat_count[0]=(((r).cmic_cmc1_schan_ack_data_beat_count[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_GET(r) ((((r).cmic_cmc1_schan_ack_data_beat_count[0]) >> 5) & 0x7ffffff)
#define CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_SET(r,f) (r).cmic_cmc1_schan_ack_data_beat_count[0]=(((r).cmic_cmc1_schan_ack_data_beat_count[0] & ~((uint32_t)0x7ffffff << 5)) | ((((uint32_t)f) & 0x7ffffff) << 5))

/*******************************************************************************
 * End of 'CMIC_CMC1_SCHAN_ACK_DATA_BEAT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SCHAN_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SCHAN_CTRLr_OFFSET 0x00032000

#define CMIC_CMC1_SCHAN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SCHAN_CTRL.
 */
typedef union CMIC_CMC1_SCHAN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_schan_ctrl[1];
	uint32_t _cmic_cmc1_schan_ctrl;
} CMIC_CMC1_SCHAN_CTRLr_t;

#define CMIC_CMC1_SCHAN_CTRLr_CLR(r) (r).cmic_cmc1_schan_ctrl[0] = 0
#define CMIC_CMC1_SCHAN_CTRLr_SET(r,d) (r).cmic_cmc1_schan_ctrl[0] = d
#define CMIC_CMC1_SCHAN_CTRLr_GET(r) (r).cmic_cmc1_schan_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SCHAN_CTRLr_MSG_STARTf_GET(r) (((r).cmic_cmc1_schan_ctrl[0]) & 0x1)
#define CMIC_CMC1_SCHAN_CTRLr_MSG_STARTf_SET(r,f) (r).cmic_cmc1_schan_ctrl[0]=(((r).cmic_cmc1_schan_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SCHAN_CTRLr_MSG_DONEf_GET(r) ((((r).cmic_cmc1_schan_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC1_SCHAN_CTRLr_MSG_DONEf_SET(r,f) (r).cmic_cmc1_schan_ctrl[0]=(((r).cmic_cmc1_schan_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_SCHAN_CTRLr_ABORTf_GET(r) ((((r).cmic_cmc1_schan_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC1_SCHAN_CTRLr_ABORTf_SET(r,f) (r).cmic_cmc1_schan_ctrl[0]=(((r).cmic_cmc1_schan_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_SCHAN_CTRLr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc1_schan_ctrl[0]) >> 20) & 0x1)
#define CMIC_CMC1_SCHAN_CTRLr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc1_schan_ctrl[0]=(((r).cmic_cmc1_schan_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_SCHAN_CTRLr_NACKf_GET(r) ((((r).cmic_cmc1_schan_ctrl[0]) >> 21) & 0x1)
#define CMIC_CMC1_SCHAN_CTRLr_NACKf_SET(r,f) (r).cmic_cmc1_schan_ctrl[0]=(((r).cmic_cmc1_schan_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_SCHAN_CTRLr_TIMEOUTf_GET(r) ((((r).cmic_cmc1_schan_ctrl[0]) >> 22) & 0x1)
#define CMIC_CMC1_SCHAN_CTRLr_TIMEOUTf_SET(r,f) (r).cmic_cmc1_schan_ctrl[0]=(((r).cmic_cmc1_schan_ctrl[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC1_SCHAN_CTRLr_SCHAN_ERRORf_GET(r) ((((r).cmic_cmc1_schan_ctrl[0]) >> 23) & 0x1)
#define CMIC_CMC1_SCHAN_CTRLr_SCHAN_ERRORf_SET(r,f) (r).cmic_cmc1_schan_ctrl[0]=(((r).cmic_cmc1_schan_ctrl[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))

/*******************************************************************************
 * End of 'CMIC_CMC1_SCHAN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SCHAN_ERR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SCHAN_ERRr_OFFSET 0x00032008

#define CMIC_CMC1_SCHAN_ERRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SCHAN_ERR.
 */
typedef union CMIC_CMC1_SCHAN_ERRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_schan_err[1];
	uint32_t _cmic_cmc1_schan_err;
} CMIC_CMC1_SCHAN_ERRr_t;

#define CMIC_CMC1_SCHAN_ERRr_CLR(r) (r).cmic_cmc1_schan_err[0] = 0
#define CMIC_CMC1_SCHAN_ERRr_SET(r,d) (r).cmic_cmc1_schan_err[0] = d
#define CMIC_CMC1_SCHAN_ERRr_GET(r) (r).cmic_cmc1_schan_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SCHAN_ERRr_NACKf_GET(r) (((r).cmic_cmc1_schan_err[0]) & 0x1)
#define CMIC_CMC1_SCHAN_ERRr_NACKf_SET(r,f) (r).cmic_cmc1_schan_err[0]=(((r).cmic_cmc1_schan_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_SCHAN_ERRr_ERR_CODEf_GET(r) ((((r).cmic_cmc1_schan_err[0]) >> 4) & 0x3)
#define CMIC_CMC1_SCHAN_ERRr_ERR_CODEf_SET(r,f) (r).cmic_cmc1_schan_err[0]=(((r).cmic_cmc1_schan_err[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define CMIC_CMC1_SCHAN_ERRr_ERRBITf_GET(r) ((((r).cmic_cmc1_schan_err[0]) >> 6) & 0x1)
#define CMIC_CMC1_SCHAN_ERRr_ERRBITf_SET(r,f) (r).cmic_cmc1_schan_err[0]=(((r).cmic_cmc1_schan_err[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_SCHAN_ERRr_DATA_LENf_GET(r) ((((r).cmic_cmc1_schan_err[0]) >> 7) & 0x7f)
#define CMIC_CMC1_SCHAN_ERRr_DATA_LENf_SET(r,f) (r).cmic_cmc1_schan_err[0]=(((r).cmic_cmc1_schan_err[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define CMIC_CMC1_SCHAN_ERRr_SRC_PORTf_GET(r) ((((r).cmic_cmc1_schan_err[0]) >> 14) & 0x3f)
#define CMIC_CMC1_SCHAN_ERRr_SRC_PORTf_SET(r,f) (r).cmic_cmc1_schan_err[0]=(((r).cmic_cmc1_schan_err[0] & ~((uint32_t)0x3f << 14)) | ((((uint32_t)f) & 0x3f) << 14))
#define CMIC_CMC1_SCHAN_ERRr_DST_PORTf_GET(r) ((((r).cmic_cmc1_schan_err[0]) >> 20) & 0x3f)
#define CMIC_CMC1_SCHAN_ERRr_DST_PORTf_SET(r,f) (r).cmic_cmc1_schan_err[0]=(((r).cmic_cmc1_schan_err[0] & ~((uint32_t)0x3f << 20)) | ((((uint32_t)f) & 0x3f) << 20))
#define CMIC_CMC1_SCHAN_ERRr_OP_CODEf_GET(r) ((((r).cmic_cmc1_schan_err[0]) >> 26) & 0x3f)
#define CMIC_CMC1_SCHAN_ERRr_OP_CODEf_SET(r,f) (r).cmic_cmc1_schan_err[0]=(((r).cmic_cmc1_schan_err[0] & ~((uint32_t)0x3f << 26)) | ((((uint32_t)f) & 0x3f) << 26))

/*******************************************************************************
 * End of 'CMIC_CMC1_SCHAN_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SCHAN_MESSAGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SCHAN_MESSAGEr_OFFSET 0x0003200c

#define CMIC_CMC1_SCHAN_MESSAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SCHAN_MESSAGE.
 */
typedef union CMIC_CMC1_SCHAN_MESSAGEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_schan_message[1];
	uint32_t _cmic_cmc1_schan_message;
} CMIC_CMC1_SCHAN_MESSAGEr_t;

#define CMIC_CMC1_SCHAN_MESSAGEr_CLR(r) (r).cmic_cmc1_schan_message[0] = 0
#define CMIC_CMC1_SCHAN_MESSAGEr_SET(r,d) (r).cmic_cmc1_schan_message[0] = d
#define CMIC_CMC1_SCHAN_MESSAGEr_GET(r) (r).cmic_cmc1_schan_message[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SCHAN_MESSAGEr_DATAf_GET(r) ((r).cmic_cmc1_schan_message[0])
#define CMIC_CMC1_SCHAN_MESSAGEr_DATAf_SET(r,f) (r).cmic_cmc1_schan_message[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_SCHAN_MESSAGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_STATr_OFFSET 0x0003210c

#define CMIC_CMC1_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_STAT.
 */
typedef union CMIC_CMC1_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_stat[1];
	uint32_t _cmic_cmc1_stat;
} CMIC_CMC1_STATr_t;

#define CMIC_CMC1_STATr_CLR(r) (r).cmic_cmc1_stat[0] = 0
#define CMIC_CMC1_STATr_SET(r,d) (r).cmic_cmc1_stat[0] = d
#define CMIC_CMC1_STATr_GET(r) (r).cmic_cmc1_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_STATr_PEND_BRESP_COUNTf_GET(r) (((r).cmic_cmc1_stat[0]) & 0x7)
#define CMIC_CMC1_STATr_PEND_BRESP_COUNTf_SET(r,f) (r).cmic_cmc1_stat[0]=(((r).cmic_cmc1_stat[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*******************************************************************************
 * End of 'CMIC_CMC1_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_SW_INTR_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_SW_INTR_CONFIGr_OFFSET 0x000324a8

#define CMIC_CMC1_SW_INTR_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_SW_INTR_CONFIG.
 */
typedef union CMIC_CMC1_SW_INTR_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_sw_intr_config[1];
	uint32_t _cmic_cmc1_sw_intr_config;
} CMIC_CMC1_SW_INTR_CONFIGr_t;

#define CMIC_CMC1_SW_INTR_CONFIGr_CLR(r) (r).cmic_cmc1_sw_intr_config[0] = 0
#define CMIC_CMC1_SW_INTR_CONFIGr_SET(r,d) (r).cmic_cmc1_sw_intr_config[0] = d
#define CMIC_CMC1_SW_INTR_CONFIGr_GET(r) (r).cmic_cmc1_sw_intr_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_GET(r) (((r).cmic_cmc1_sw_intr_config[0]) & 0x3)
#define CMIC_CMC1_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_SET(r,f) (r).cmic_cmc1_sw_intr_config[0]=(((r).cmic_cmc1_sw_intr_config[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define CMIC_CMC1_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_GET(r) ((((r).cmic_cmc1_sw_intr_config[0]) >> 2) & 0x1)
#define CMIC_CMC1_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_SET(r,f) (r).cmic_cmc1_sw_intr_config[0]=(((r).cmic_cmc1_sw_intr_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC1_SW_INTR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC0_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC0_IRQ_MASK0r_OFFSET 0x00032428

#define CMIC_CMC1_UC0_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC0_IRQ_MASK0.
 */
typedef union CMIC_CMC1_UC0_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc0_irq_mask0[1];
	uint32_t _cmic_cmc1_uc0_irq_mask0;
} CMIC_CMC1_UC0_IRQ_MASK0r_t;

#define CMIC_CMC1_UC0_IRQ_MASK0r_CLR(r) (r).cmic_cmc1_uc0_irq_mask0[0] = 0
#define CMIC_CMC1_UC0_IRQ_MASK0r_SET(r,d) (r).cmic_cmc1_uc0_irq_mask0[0] = d
#define CMIC_CMC1_UC0_IRQ_MASK0r_GET(r) (r).cmic_cmc1_uc0_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC0_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc1_uc0_irq_mask0[0]) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_UC0_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_UC0_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_UC0_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_UC0_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_UC0_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_UC0_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_UC0_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_UC0_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_UC0_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC1_UC0_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC1_UC0_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask0[0]=(((r).cmic_cmc1_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC1_UC0_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC0_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC0_IRQ_MASK1r_OFFSET 0x0003242c

#define CMIC_CMC1_UC0_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC0_IRQ_MASK1.
 */
typedef union CMIC_CMC1_UC0_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc0_irq_mask1[1];
	uint32_t _cmic_cmc1_uc0_irq_mask1;
} CMIC_CMC1_UC0_IRQ_MASK1r_t;

#define CMIC_CMC1_UC0_IRQ_MASK1r_CLR(r) (r).cmic_cmc1_uc0_irq_mask1[0] = 0
#define CMIC_CMC1_UC0_IRQ_MASK1r_SET(r,d) (r).cmic_cmc1_uc0_irq_mask1[0] = d
#define CMIC_CMC1_UC0_IRQ_MASK1r_GET(r) (r).cmic_cmc1_uc0_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC0_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc1_uc0_irq_mask1[0]) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_UC0_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_UC0_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_UC0_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_UC0_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_UC0_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_UC0_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_UC0_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_UC0_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_UC0_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_UC0_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC1_UC0_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC1_UC0_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_UC0_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_UC0_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_UC0_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_UC0_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_UC0_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_UC0_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc1_uc0_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC1_UC0_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask1[0]=(((r).cmic_cmc1_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC1_UC0_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC0_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC0_IRQ_MASK2r_OFFSET 0x00032430

#define CMIC_CMC1_UC0_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC0_IRQ_MASK2.
 */
typedef union CMIC_CMC1_UC0_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc0_irq_mask2[1];
	uint32_t _cmic_cmc1_uc0_irq_mask2;
} CMIC_CMC1_UC0_IRQ_MASK2r_t;

#define CMIC_CMC1_UC0_IRQ_MASK2r_CLR(r) (r).cmic_cmc1_uc0_irq_mask2[0] = 0
#define CMIC_CMC1_UC0_IRQ_MASK2r_SET(r,d) (r).cmic_cmc1_uc0_irq_mask2[0] = d
#define CMIC_CMC1_UC0_IRQ_MASK2r_GET(r) (r).cmic_cmc1_uc0_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC0_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc1_uc0_irq_mask2[0])
#define CMIC_CMC1_UC0_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC0_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC0_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC0_IRQ_MASK3r_OFFSET 0x00032434

#define CMIC_CMC1_UC0_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC0_IRQ_MASK3.
 */
typedef union CMIC_CMC1_UC0_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc0_irq_mask3[1];
	uint32_t _cmic_cmc1_uc0_irq_mask3;
} CMIC_CMC1_UC0_IRQ_MASK3r_t;

#define CMIC_CMC1_UC0_IRQ_MASK3r_CLR(r) (r).cmic_cmc1_uc0_irq_mask3[0] = 0
#define CMIC_CMC1_UC0_IRQ_MASK3r_SET(r,d) (r).cmic_cmc1_uc0_irq_mask3[0] = d
#define CMIC_CMC1_UC0_IRQ_MASK3r_GET(r) (r).cmic_cmc1_uc0_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC0_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc1_uc0_irq_mask3[0])
#define CMIC_CMC1_UC0_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC0_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC0_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC0_IRQ_MASK4r_OFFSET 0x00032438

#define CMIC_CMC1_UC0_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC0_IRQ_MASK4.
 */
typedef union CMIC_CMC1_UC0_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc0_irq_mask4[1];
	uint32_t _cmic_cmc1_uc0_irq_mask4;
} CMIC_CMC1_UC0_IRQ_MASK4r_t;

#define CMIC_CMC1_UC0_IRQ_MASK4r_CLR(r) (r).cmic_cmc1_uc0_irq_mask4[0] = 0
#define CMIC_CMC1_UC0_IRQ_MASK4r_SET(r,d) (r).cmic_cmc1_uc0_irq_mask4[0] = d
#define CMIC_CMC1_UC0_IRQ_MASK4r_GET(r) (r).cmic_cmc1_uc0_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC0_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc1_uc0_irq_mask4[0])
#define CMIC_CMC1_UC0_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC0_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC0_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC0_IRQ_MASK5r_OFFSET 0x000324c0

#define CMIC_CMC1_UC0_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC0_IRQ_MASK5.
 */
typedef union CMIC_CMC1_UC0_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc0_irq_mask5[1];
	uint32_t _cmic_cmc1_uc0_irq_mask5;
} CMIC_CMC1_UC0_IRQ_MASK5r_t;

#define CMIC_CMC1_UC0_IRQ_MASK5r_CLR(r) (r).cmic_cmc1_uc0_irq_mask5[0] = 0
#define CMIC_CMC1_UC0_IRQ_MASK5r_SET(r,d) (r).cmic_cmc1_uc0_irq_mask5[0] = d
#define CMIC_CMC1_UC0_IRQ_MASK5r_GET(r) (r).cmic_cmc1_uc0_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC0_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc1_uc0_irq_mask5[0])
#define CMIC_CMC1_UC0_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC0_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC0_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC0_IRQ_MASK6r_OFFSET 0x000324c4

#define CMIC_CMC1_UC0_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC0_IRQ_MASK6.
 */
typedef union CMIC_CMC1_UC0_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc0_irq_mask6[1];
	uint32_t _cmic_cmc1_uc0_irq_mask6;
} CMIC_CMC1_UC0_IRQ_MASK6r_t;

#define CMIC_CMC1_UC0_IRQ_MASK6r_CLR(r) (r).cmic_cmc1_uc0_irq_mask6[0] = 0
#define CMIC_CMC1_UC0_IRQ_MASK6r_SET(r,d) (r).cmic_cmc1_uc0_irq_mask6[0] = d
#define CMIC_CMC1_UC0_IRQ_MASK6r_GET(r) (r).cmic_cmc1_uc0_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC0_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc1_uc0_irq_mask6[0])
#define CMIC_CMC1_UC0_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc1_uc0_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC0_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC1_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC1_IRQ_MASK0r_OFFSET 0x0003243c

#define CMIC_CMC1_UC1_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC1_IRQ_MASK0.
 */
typedef union CMIC_CMC1_UC1_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc1_irq_mask0[1];
	uint32_t _cmic_cmc1_uc1_irq_mask0;
} CMIC_CMC1_UC1_IRQ_MASK0r_t;

#define CMIC_CMC1_UC1_IRQ_MASK0r_CLR(r) (r).cmic_cmc1_uc1_irq_mask0[0] = 0
#define CMIC_CMC1_UC1_IRQ_MASK0r_SET(r,d) (r).cmic_cmc1_uc1_irq_mask0[0] = d
#define CMIC_CMC1_UC1_IRQ_MASK0r_GET(r) (r).cmic_cmc1_uc1_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC1_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc1_uc1_irq_mask0[0]) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_UC1_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_UC1_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_UC1_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_UC1_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_UC1_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_UC1_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_UC1_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_UC1_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_UC1_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC1_UC1_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC1_UC1_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask0[0]=(((r).cmic_cmc1_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC1_UC1_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC1_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC1_IRQ_MASK1r_OFFSET 0x00032440

#define CMIC_CMC1_UC1_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC1_IRQ_MASK1.
 */
typedef union CMIC_CMC1_UC1_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc1_irq_mask1[1];
	uint32_t _cmic_cmc1_uc1_irq_mask1;
} CMIC_CMC1_UC1_IRQ_MASK1r_t;

#define CMIC_CMC1_UC1_IRQ_MASK1r_CLR(r) (r).cmic_cmc1_uc1_irq_mask1[0] = 0
#define CMIC_CMC1_UC1_IRQ_MASK1r_SET(r,d) (r).cmic_cmc1_uc1_irq_mask1[0] = d
#define CMIC_CMC1_UC1_IRQ_MASK1r_GET(r) (r).cmic_cmc1_uc1_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC1_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc1_uc1_irq_mask1[0]) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC1_UC1_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC1_UC1_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC1_UC1_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC1_UC1_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC1_UC1_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC1_UC1_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC1_UC1_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC1_UC1_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC1_UC1_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC1_UC1_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC1_UC1_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC1_UC1_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC1_UC1_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC1_UC1_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC1_UC1_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC1_UC1_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC1_UC1_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC1_UC1_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc1_uc1_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC1_UC1_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask1[0]=(((r).cmic_cmc1_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC1_UC1_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC1_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC1_IRQ_MASK2r_OFFSET 0x00032444

#define CMIC_CMC1_UC1_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC1_IRQ_MASK2.
 */
typedef union CMIC_CMC1_UC1_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc1_irq_mask2[1];
	uint32_t _cmic_cmc1_uc1_irq_mask2;
} CMIC_CMC1_UC1_IRQ_MASK2r_t;

#define CMIC_CMC1_UC1_IRQ_MASK2r_CLR(r) (r).cmic_cmc1_uc1_irq_mask2[0] = 0
#define CMIC_CMC1_UC1_IRQ_MASK2r_SET(r,d) (r).cmic_cmc1_uc1_irq_mask2[0] = d
#define CMIC_CMC1_UC1_IRQ_MASK2r_GET(r) (r).cmic_cmc1_uc1_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC1_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc1_uc1_irq_mask2[0])
#define CMIC_CMC1_UC1_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC1_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC1_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC1_IRQ_MASK3r_OFFSET 0x00032448

#define CMIC_CMC1_UC1_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC1_IRQ_MASK3.
 */
typedef union CMIC_CMC1_UC1_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc1_irq_mask3[1];
	uint32_t _cmic_cmc1_uc1_irq_mask3;
} CMIC_CMC1_UC1_IRQ_MASK3r_t;

#define CMIC_CMC1_UC1_IRQ_MASK3r_CLR(r) (r).cmic_cmc1_uc1_irq_mask3[0] = 0
#define CMIC_CMC1_UC1_IRQ_MASK3r_SET(r,d) (r).cmic_cmc1_uc1_irq_mask3[0] = d
#define CMIC_CMC1_UC1_IRQ_MASK3r_GET(r) (r).cmic_cmc1_uc1_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC1_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc1_uc1_irq_mask3[0])
#define CMIC_CMC1_UC1_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC1_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC1_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC1_IRQ_MASK4r_OFFSET 0x0003244c

#define CMIC_CMC1_UC1_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC1_IRQ_MASK4.
 */
typedef union CMIC_CMC1_UC1_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc1_irq_mask4[1];
	uint32_t _cmic_cmc1_uc1_irq_mask4;
} CMIC_CMC1_UC1_IRQ_MASK4r_t;

#define CMIC_CMC1_UC1_IRQ_MASK4r_CLR(r) (r).cmic_cmc1_uc1_irq_mask4[0] = 0
#define CMIC_CMC1_UC1_IRQ_MASK4r_SET(r,d) (r).cmic_cmc1_uc1_irq_mask4[0] = d
#define CMIC_CMC1_UC1_IRQ_MASK4r_GET(r) (r).cmic_cmc1_uc1_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC1_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc1_uc1_irq_mask4[0])
#define CMIC_CMC1_UC1_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC1_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC1_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC1_IRQ_MASK5r_OFFSET 0x000324c8

#define CMIC_CMC1_UC1_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC1_IRQ_MASK5.
 */
typedef union CMIC_CMC1_UC1_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc1_irq_mask5[1];
	uint32_t _cmic_cmc1_uc1_irq_mask5;
} CMIC_CMC1_UC1_IRQ_MASK5r_t;

#define CMIC_CMC1_UC1_IRQ_MASK5r_CLR(r) (r).cmic_cmc1_uc1_irq_mask5[0] = 0
#define CMIC_CMC1_UC1_IRQ_MASK5r_SET(r,d) (r).cmic_cmc1_uc1_irq_mask5[0] = d
#define CMIC_CMC1_UC1_IRQ_MASK5r_GET(r) (r).cmic_cmc1_uc1_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC1_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc1_uc1_irq_mask5[0])
#define CMIC_CMC1_UC1_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC1_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC1_UC1_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC1_UC1_IRQ_MASK6r_OFFSET 0x000324cc

#define CMIC_CMC1_UC1_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC1_UC1_IRQ_MASK6.
 */
typedef union CMIC_CMC1_UC1_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc1_uc1_irq_mask6[1];
	uint32_t _cmic_cmc1_uc1_irq_mask6;
} CMIC_CMC1_UC1_IRQ_MASK6r_t;

#define CMIC_CMC1_UC1_IRQ_MASK6r_CLR(r) (r).cmic_cmc1_uc1_irq_mask6[0] = 0
#define CMIC_CMC1_UC1_IRQ_MASK6r_SET(r,d) (r).cmic_cmc1_uc1_irq_mask6[0] = d
#define CMIC_CMC1_UC1_IRQ_MASK6r_GET(r) (r).cmic_cmc1_uc1_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC1_UC1_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc1_uc1_irq_mask6[0])
#define CMIC_CMC1_UC1_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc1_uc1_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC1_UC1_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_2BIT_ECC_ERROR_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_OFFSET 0x00033454

#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_2BIT_ECC_ERROR_STATUS.
 */
typedef union CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_2bit_ecc_error_status[1];
	uint32_t _cmic_cmc2_2bit_ecc_error_status;
} CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_t;

#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_CLR(r) (r).cmic_cmc2_2bit_ecc_error_status[0] = 0
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_SET(r,d) (r).cmic_cmc2_2bit_ecc_error_status[0] = d
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_GET(r) (r).cmic_cmc2_2bit_ecc_error_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH0_2BIT_ECCERRf_GET(r) (((r).cmic_cmc2_2bit_ecc_error_status[0]) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status[0]=(((r).cmic_cmc2_2bit_ecc_error_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status[0]) >> 1) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status[0]=(((r).cmic_cmc2_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status[0]) >> 2) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status[0]=(((r).cmic_cmc2_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH0_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status[0]) >> 3) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status[0]=(((r).cmic_cmc2_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status[0]) >> 4) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status[0]=(((r).cmic_cmc2_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status[0]) >> 5) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status[0]=(((r).cmic_cmc2_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH3_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status[0]) >> 6) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH3_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status[0]=(((r).cmic_cmc2_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_CCMDMA_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status[0]) >> 7) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUSr_CCMDMA_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status[0]=(((r).cmic_cmc2_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*******************************************************************************
 * End of 'CMIC_CMC2_2BIT_ECC_ERROR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASK
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_OFFSET 0x00033458

#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASK.
 */
typedef union CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_2bit_ecc_error_status_mask[1];
	uint32_t _cmic_cmc2_2bit_ecc_error_status_mask;
} CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_t;

#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_CLR(r) (r).cmic_cmc2_2bit_ecc_error_status_mask[0] = 0
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_SET(r,d) (r).cmic_cmc2_2bit_ecc_error_status_mask[0] = d
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_GET(r) (r).cmic_cmc2_2bit_ecc_error_status_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH0_2BIT_ECCERRf_GET(r) (((r).cmic_cmc2_2bit_ecc_error_status_mask[0]) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc2_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status_mask[0]) >> 1) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc2_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status_mask[0]) >> 2) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc2_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH0_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status_mask[0]) >> 3) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc2_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status_mask[0]) >> 4) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc2_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status_mask[0]) >> 5) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc2_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH3_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status_mask[0]) >> 6) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH3_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc2_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_CCMDMA_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc2_2bit_ecc_error_status_mask[0]) >> 7) & 0x1)
#define CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr_CCMDMA_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc2_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc2_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*******************************************************************************
 * End of 'CMIC_CMC2_2BIT_ECC_ERROR_STATUS_MASKr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_AXIIC_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_AXIIC_TM_CONTROL_0r_OFFSET 0x00033850

#define CMIC_CMC2_AXIIC_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_AXIIC_TM_CONTROL_0.
 */
typedef union CMIC_CMC2_AXIIC_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_axiic_tm_control_0[1];
	uint32_t _cmic_cmc2_axiic_tm_control_0;
} CMIC_CMC2_AXIIC_TM_CONTROL_0r_t;

#define CMIC_CMC2_AXIIC_TM_CONTROL_0r_CLR(r) (r).cmic_cmc2_axiic_tm_control_0[0] = 0
#define CMIC_CMC2_AXIIC_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc2_axiic_tm_control_0[0] = d
#define CMIC_CMC2_AXIIC_TM_CONTROL_0r_GET(r) (r).cmic_cmc2_axiic_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_TMf_GET(r) (((r).cmic_cmc2_axiic_tm_control_0[0]) & 0xfff)
#define CMIC_CMC2_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_TMf_SET(r,f) (r).cmic_cmc2_axiic_tm_control_0[0]=(((r).cmic_cmc2_axiic_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_LVMf_GET(r) ((((r).cmic_cmc2_axiic_tm_control_0[0]) >> 12) & 0x1)
#define CMIC_CMC2_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_LVMf_SET(r,f) (r).cmic_cmc2_axiic_tm_control_0[0]=(((r).cmic_cmc2_axiic_tm_control_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC2_AXIIC_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_AXIIC_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_OFFSET 0x00033854

#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_AXIIC_TM_CONTROL_1.
 */
typedef union CMIC_CMC2_AXIIC_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_axiic_tm_control_1[1];
	uint32_t _cmic_cmc2_axiic_tm_control_1;
} CMIC_CMC2_AXIIC_TM_CONTROL_1r_t;

#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_CLR(r) (r).cmic_cmc2_axiic_tm_control_1[0] = 0
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc2_axiic_tm_control_1[0] = d
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_GET(r) (r).cmic_cmc2_axiic_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_00f_GET(r) (((r).cmic_cmc2_axiic_tm_control_1[0]) & 0xfff)
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_00f_SET(r,f) (r).cmic_cmc2_axiic_tm_control_1[0]=(((r).cmic_cmc2_axiic_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_00f_GET(r) ((((r).cmic_cmc2_axiic_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_00f_SET(r,f) (r).cmic_cmc2_axiic_tm_control_1[0]=(((r).cmic_cmc2_axiic_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_01f_GET(r) ((((r).cmic_cmc2_axiic_tm_control_1[0]) >> 13) & 0xfff)
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_01f_SET(r,f) (r).cmic_cmc2_axiic_tm_control_1[0]=(((r).cmic_cmc2_axiic_tm_control_1[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_01f_GET(r) ((((r).cmic_cmc2_axiic_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC2_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_01f_SET(r,f) (r).cmic_cmc2_axiic_tm_control_1[0]=(((r).cmic_cmc2_axiic_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_AXIIC_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_AXIIC_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_OFFSET 0x00033858

#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_AXIIC_TM_CONTROL_2.
 */
typedef union CMIC_CMC2_AXIIC_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_axiic_tm_control_2[1];
	uint32_t _cmic_cmc2_axiic_tm_control_2;
} CMIC_CMC2_AXIIC_TM_CONTROL_2r_t;

#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_CLR(r) (r).cmic_cmc2_axiic_tm_control_2[0] = 0
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc2_axiic_tm_control_2[0] = d
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_GET(r) (r).cmic_cmc2_axiic_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_00f_GET(r) (((r).cmic_cmc2_axiic_tm_control_2[0]) & 0xfff)
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_00f_SET(r,f) (r).cmic_cmc2_axiic_tm_control_2[0]=(((r).cmic_cmc2_axiic_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_00f_GET(r) ((((r).cmic_cmc2_axiic_tm_control_2[0]) >> 12) & 0x1)
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_00f_SET(r,f) (r).cmic_cmc2_axiic_tm_control_2[0]=(((r).cmic_cmc2_axiic_tm_control_2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_01f_GET(r) ((((r).cmic_cmc2_axiic_tm_control_2[0]) >> 13) & 0xfff)
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_01f_SET(r,f) (r).cmic_cmc2_axiic_tm_control_2[0]=(((r).cmic_cmc2_axiic_tm_control_2[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_01f_GET(r) ((((r).cmic_cmc2_axiic_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC2_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_01f_SET(r,f) (r).cmic_cmc2_axiic_tm_control_2[0]=(((r).cmic_cmc2_axiic_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_AXIIC_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCMDMA_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_OFFSET 0x00033848

#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCMDMA_TM_CONTROL_0.
 */
typedef union CMIC_CMC2_CCMDMA_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccmdma_tm_control_0[1];
	uint32_t _cmic_cmc2_ccmdma_tm_control_0;
} CMIC_CMC2_CCMDMA_TM_CONTROL_0r_t;

#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_CLR(r) (r).cmic_cmc2_ccmdma_tm_control_0[0] = 0
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc2_ccmdma_tm_control_0[0] = d
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_GET(r) (r).cmic_cmc2_ccmdma_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_BUFF_TM0f_GET(r) (((r).cmic_cmc2_ccmdma_tm_control_0[0]) & 0xfff)
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_BUFF_TM0f_SET(r,f) (r).cmic_cmc2_ccmdma_tm_control_0[0]=(((r).cmic_cmc2_ccmdma_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_BUFF_TM1f_GET(r) ((((r).cmic_cmc2_ccmdma_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_BUFF_TM1f_SET(r,f) (r).cmic_cmc2_ccmdma_tm_control_0[0]=(((r).cmic_cmc2_ccmdma_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_BUFF_LVM0f_GET(r) ((((r).cmic_cmc2_ccmdma_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_BUFF_LVM0f_SET(r,f) (r).cmic_cmc2_ccmdma_tm_control_0[0]=(((r).cmic_cmc2_ccmdma_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_BUFF_LVM1f_GET(r) ((((r).cmic_cmc2_ccmdma_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC2_CCMDMA_TM_CONTROL_0r_BUFF_LVM1f_SET(r,f) (r).cmic_cmc2_ccmdma_tm_control_0[0]=(((r).cmic_cmc2_ccmdma_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_CCMDMA_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCMDMA_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCMDMA_TM_CONTROL_1r_OFFSET 0x0003384c

#define CMIC_CMC2_CCMDMA_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCMDMA_TM_CONTROL_1.
 */
typedef union CMIC_CMC2_CCMDMA_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccmdma_tm_control_1[1];
	uint32_t _cmic_cmc2_ccmdma_tm_control_1;
} CMIC_CMC2_CCMDMA_TM_CONTROL_1r_t;

#define CMIC_CMC2_CCMDMA_TM_CONTROL_1r_CLR(r) (r).cmic_cmc2_ccmdma_tm_control_1[0] = 0
#define CMIC_CMC2_CCMDMA_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc2_ccmdma_tm_control_1[0] = d
#define CMIC_CMC2_CCMDMA_TM_CONTROL_1r_GET(r) (r).cmic_cmc2_ccmdma_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCMDMA_TM_CONTROL_1r_ECCBUFF_TM0f_GET(r) (((r).cmic_cmc2_ccmdma_tm_control_1[0]) & 0xfff)
#define CMIC_CMC2_CCMDMA_TM_CONTROL_1r_ECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_ccmdma_tm_control_1[0]=(((r).cmic_cmc2_ccmdma_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_CCMDMA_TM_CONTROL_1r_ECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_ccmdma_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC2_CCMDMA_TM_CONTROL_1r_ECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_ccmdma_tm_control_1[0]=(((r).cmic_cmc2_ccmdma_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC2_CCMDMA_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_CFGr_OFFSET 0x000333ac

#define CMIC_CMC2_CCM_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_CFG.
 */
typedef union CMIC_CMC2_CCM_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_cfg[1];
	uint32_t _cmic_cmc2_ccm_dma_cfg;
} CMIC_CMC2_CCM_DMA_CFGr_t;

#define CMIC_CMC2_CCM_DMA_CFGr_CLR(r) (r).cmic_cmc2_ccm_dma_cfg[0] = 0
#define CMIC_CMC2_CCM_DMA_CFGr_SET(r,d) (r).cmic_cmc2_ccm_dma_cfg[0] = d
#define CMIC_CMC2_CCM_DMA_CFGr_GET(r) (r).cmic_cmc2_ccm_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_CFGr_ENf_GET(r) (((r).cmic_cmc2_ccm_dma_cfg[0]) & 0x1)
#define CMIC_CMC2_CCM_DMA_CFGr_ENf_SET(r,f) (r).cmic_cmc2_ccm_dma_cfg[0]=(((r).cmic_cmc2_ccm_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_CCM_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc2_ccm_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC2_CCM_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc2_ccm_dma_cfg[0]=(((r).cmic_cmc2_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_CCM_DMA_CFGr_PROCESSOR0_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ccm_dma_cfg[0]) >> 2) & 0x1)
#define CMIC_CMC2_CCM_DMA_CFGr_PROCESSOR0_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ccm_dma_cfg[0]=(((r).cmic_cmc2_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_CCM_DMA_CFGr_PROCESSOR1_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ccm_dma_cfg[0]) >> 3) & 0x1)
#define CMIC_CMC2_CCM_DMA_CFGr_PROCESSOR1_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ccm_dma_cfg[0]=(((r).cmic_cmc2_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr_OFFSET 0x000333b4

#define CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDR.
 */
typedef union CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_cur_host0_addr[1];
	uint32_t _cmic_cmc2_ccm_dma_cur_host0_addr;
} CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr_t;

#define CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr_CLR(r) (r).cmic_cmc2_ccm_dma_cur_host0_addr[0] = 0
#define CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr_SET(r,d) (r).cmic_cmc2_ccm_dma_cur_host0_addr[0] = d
#define CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr_GET(r) (r).cmic_cmc2_ccm_dma_cur_host0_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr_ADDRf_GET(r) ((r).cmic_cmc2_ccm_dma_cur_host0_addr[0])
#define CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc2_ccm_dma_cur_host0_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_CUR_HOST0_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr_OFFSET 0x000333b8

#define CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDR.
 */
typedef union CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_cur_host1_addr[1];
	uint32_t _cmic_cmc2_ccm_dma_cur_host1_addr;
} CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr_t;

#define CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr_CLR(r) (r).cmic_cmc2_ccm_dma_cur_host1_addr[0] = 0
#define CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr_SET(r,d) (r).cmic_cmc2_ccm_dma_cur_host1_addr[0] = d
#define CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr_GET(r) (r).cmic_cmc2_ccm_dma_cur_host1_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr_ADDRf_GET(r) ((r).cmic_cmc2_ccm_dma_cur_host1_addr[0])
#define CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc2_ccm_dma_cur_host1_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_CUR_HOST1_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_ECCERR_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_ECCERR_ADDRr_OFFSET 0x000333bc

#define CMIC_CMC2_CCM_DMA_ECCERR_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_ECCERR_ADDR.
 */
typedef union CMIC_CMC2_CCM_DMA_ECCERR_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_eccerr_addr[1];
	uint32_t _cmic_cmc2_ccm_dma_eccerr_addr;
} CMIC_CMC2_CCM_DMA_ECCERR_ADDRr_t;

#define CMIC_CMC2_CCM_DMA_ECCERR_ADDRr_CLR(r) (r).cmic_cmc2_ccm_dma_eccerr_addr[0] = 0
#define CMIC_CMC2_CCM_DMA_ECCERR_ADDRr_SET(r,d) (r).cmic_cmc2_ccm_dma_eccerr_addr[0] = d
#define CMIC_CMC2_CCM_DMA_ECCERR_ADDRr_GET(r) (r).cmic_cmc2_ccm_dma_eccerr_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_ECCERR_ADDRr_ADDRf_GET(r) ((r).cmic_cmc2_ccm_dma_eccerr_addr[0])
#define CMIC_CMC2_CCM_DMA_ECCERR_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc2_ccm_dma_eccerr_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_ECCERR_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_OFFSET 0x000333c4

#define CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_eccerr_control[1];
	uint32_t _cmic_cmc2_ccm_dma_eccerr_control;
} CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc2_ccm_dma_eccerr_control[0] = 0
#define CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc2_ccm_dma_eccerr_control[0] = d
#define CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc2_ccm_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc2_ccm_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_ccm_dma_eccerr_control[0]=(((r).cmic_cmc2_ccm_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc2_ccm_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_ccm_dma_eccerr_control[0]=(((r).cmic_cmc2_ccm_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_ENTRY_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_ENTRY_COUNTr_OFFSET 0x000333a8

#define CMIC_CMC2_CCM_DMA_ENTRY_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_ENTRY_COUNT.
 */
typedef union CMIC_CMC2_CCM_DMA_ENTRY_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_entry_count[1];
	uint32_t _cmic_cmc2_ccm_dma_entry_count;
} CMIC_CMC2_CCM_DMA_ENTRY_COUNTr_t;

#define CMIC_CMC2_CCM_DMA_ENTRY_COUNTr_CLR(r) (r).cmic_cmc2_ccm_dma_entry_count[0] = 0
#define CMIC_CMC2_CCM_DMA_ENTRY_COUNTr_SET(r,d) (r).cmic_cmc2_ccm_dma_entry_count[0] = d
#define CMIC_CMC2_CCM_DMA_ENTRY_COUNTr_GET(r) (r).cmic_cmc2_ccm_dma_entry_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_ENTRY_COUNTr_COUNTf_GET(r) (((r).cmic_cmc2_ccm_dma_entry_count[0]) & 0x3fffffff)
#define CMIC_CMC2_CCM_DMA_ENTRY_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc2_ccm_dma_entry_count[0]=(((r).cmic_cmc2_ccm_dma_entry_count[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_ENTRY_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr_OFFSET 0x000333a0

#define CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDR.
 */
typedef union CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_host0_mem_start_addr[1];
	uint32_t _cmic_cmc2_ccm_dma_host0_mem_start_addr;
} CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr_t;

#define CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr_CLR(r) (r).cmic_cmc2_ccm_dma_host0_mem_start_addr[0] = 0
#define CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr_SET(r,d) (r).cmic_cmc2_ccm_dma_host0_mem_start_addr[0] = d
#define CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr_GET(r) (r).cmic_cmc2_ccm_dma_host0_mem_start_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr_ADDRf_GET(r) ((r).cmic_cmc2_ccm_dma_host0_mem_start_addr[0])
#define CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc2_ccm_dma_host0_mem_start_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_HOST0_MEM_START_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr_OFFSET 0x000333a4

#define CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDR.
 */
typedef union CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_host1_mem_start_addr[1];
	uint32_t _cmic_cmc2_ccm_dma_host1_mem_start_addr;
} CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr_t;

#define CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr_CLR(r) (r).cmic_cmc2_ccm_dma_host1_mem_start_addr[0] = 0
#define CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr_SET(r,d) (r).cmic_cmc2_ccm_dma_host1_mem_start_addr[0] = d
#define CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr_GET(r) (r).cmic_cmc2_ccm_dma_host1_mem_start_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr_ADDRf_GET(r) ((r).cmic_cmc2_ccm_dma_host1_mem_start_addr[0])
#define CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc2_ccm_dma_host1_mem_start_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_HOST1_MEM_START_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_STATr_OFFSET 0x000333b0

#define CMIC_CMC2_CCM_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_STAT.
 */
typedef union CMIC_CMC2_CCM_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_stat[1];
	uint32_t _cmic_cmc2_ccm_dma_stat;
} CMIC_CMC2_CCM_DMA_STATr_t;

#define CMIC_CMC2_CCM_DMA_STATr_CLR(r) (r).cmic_cmc2_ccm_dma_stat[0] = 0
#define CMIC_CMC2_CCM_DMA_STATr_SET(r,d) (r).cmic_cmc2_ccm_dma_stat[0] = d
#define CMIC_CMC2_CCM_DMA_STATr_GET(r) (r).cmic_cmc2_ccm_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_STATr_DONEf_GET(r) (((r).cmic_cmc2_ccm_dma_stat[0]) & 0x1)
#define CMIC_CMC2_CCM_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc2_ccm_dma_stat[0]=(((r).cmic_cmc2_ccm_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_CCM_DMA_STATr_ERRORf_GET(r) ((((r).cmic_cmc2_ccm_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC2_CCM_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc2_ccm_dma_stat[0]=(((r).cmic_cmc2_ccm_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_CCM_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_ccm_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC2_CCM_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_ccm_dma_stat[0]=(((r).cmic_cmc2_ccm_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CCM_DMA_STATUS_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CCM_DMA_STATUS_CLRr_OFFSET 0x000333c0

#define CMIC_CMC2_CCM_DMA_STATUS_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CCM_DMA_STATUS_CLR.
 */
typedef union CMIC_CMC2_CCM_DMA_STATUS_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ccm_dma_status_clr[1];
	uint32_t _cmic_cmc2_ccm_dma_status_clr;
} CMIC_CMC2_CCM_DMA_STATUS_CLRr_t;

#define CMIC_CMC2_CCM_DMA_STATUS_CLRr_CLR(r) (r).cmic_cmc2_ccm_dma_status_clr[0] = 0
#define CMIC_CMC2_CCM_DMA_STATUS_CLRr_SET(r,d) (r).cmic_cmc2_ccm_dma_status_clr[0] = d
#define CMIC_CMC2_CCM_DMA_STATUS_CLRr_GET(r) (r).cmic_cmc2_ccm_dma_status_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CCM_DMA_STATUS_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) (((r).cmic_cmc2_ccm_dma_status_clr[0]) & 0x1)
#define CMIC_CMC2_CCM_DMA_STATUS_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_ccm_dma_status_clr[0]=(((r).cmic_cmc2_ccm_dma_status_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC2_CCM_DMA_STATUS_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH0_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH0_COS_CTRL_RX_0r_OFFSET 0x00033168

#define CMIC_CMC2_CH0_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH0_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC2_CH0_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch0_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc2_ch0_cos_ctrl_rx_0;
} CMIC_CMC2_CH0_COS_CTRL_RX_0r_t;

#define CMIC_CMC2_CH0_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc2_ch0_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC2_CH0_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc2_ch0_cos_ctrl_rx_0[0] = d
#define CMIC_CMC2_CH0_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc2_ch0_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH0_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc2_ch0_cos_ctrl_rx_0[0])
#define CMIC_CMC2_CH0_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc2_ch0_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH0_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH0_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH0_COS_CTRL_RX_1r_OFFSET 0x0003316c

#define CMIC_CMC2_CH0_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH0_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC2_CH0_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch0_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc2_ch0_cos_ctrl_rx_1;
} CMIC_CMC2_CH0_COS_CTRL_RX_1r_t;

#define CMIC_CMC2_CH0_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc2_ch0_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC2_CH0_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc2_ch0_cos_ctrl_rx_1[0] = d
#define CMIC_CMC2_CH0_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc2_ch0_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH0_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc2_ch0_cos_ctrl_rx_1[0])
#define CMIC_CMC2_CH0_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc2_ch0_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH0_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH0_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH0_DMA_CTRLr_OFFSET 0x00033140

#define CMIC_CMC2_CH0_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH0_DMA_CTRL.
 */
typedef union CMIC_CMC2_CH0_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch0_dma_ctrl[1];
	uint32_t _cmic_cmc2_ch0_dma_ctrl;
} CMIC_CMC2_CH0_DMA_CTRLr_t;

#define CMIC_CMC2_CH0_DMA_CTRLr_CLR(r) (r).cmic_cmc2_ch0_dma_ctrl[0] = 0
#define CMIC_CMC2_CH0_DMA_CTRLr_SET(r,d) (r).cmic_cmc2_ch0_dma_ctrl[0] = d
#define CMIC_CMC2_CH0_DMA_CTRLr_GET(r) (r).cmic_cmc2_ch0_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH0_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc2_ch0_dma_ctrl[0]) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_CH0_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc2_ch0_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_CH0_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc2_ch0_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_CH0_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc2_ch0_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_CH0_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ch0_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_CH0_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ch0_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_CH0_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc2_ch0_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_CH0_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc2_ch0_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_CH0_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc2_ch0_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_CH0_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc2_ch0_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC2_CH0_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc2_ch0_dma_ctrl[0]=(((r).cmic_cmc2_ch0_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC2_CH0_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH0_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH0_DMA_CURR_DESCr_OFFSET 0x000331a8

#define CMIC_CMC2_CH0_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH0_DMA_CURR_DESC.
 */
typedef union CMIC_CMC2_CH0_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch0_dma_curr_desc[1];
	uint32_t _cmic_cmc2_ch0_dma_curr_desc;
} CMIC_CMC2_CH0_DMA_CURR_DESCr_t;

#define CMIC_CMC2_CH0_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc2_ch0_dma_curr_desc[0] = 0
#define CMIC_CMC2_CH0_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc2_ch0_dma_curr_desc[0] = d
#define CMIC_CMC2_CH0_DMA_CURR_DESCr_GET(r) (r).cmic_cmc2_ch0_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH0_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc2_ch0_dma_curr_desc[0])
#define CMIC_CMC2_CH0_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc2_ch0_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH0_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00033110

#define CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch0_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc2_ch0_rxbuf_threshold_config;
} CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc2_ch0_rxbuf_threshold_config[0] = 0
#define CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc2_ch0_rxbuf_threshold_config[0] = d
#define CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc2_ch0_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc2_ch0_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc2_ch0_rxbuf_threshold_config[0]=(((r).cmic_cmc2_ch0_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc2_ch0_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc2_ch0_rxbuf_threshold_config[0]=(((r).cmic_cmc2_ch0_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC2_CH0_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH1_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH1_COS_CTRL_RX_0r_OFFSET 0x00033170

#define CMIC_CMC2_CH1_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH1_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC2_CH1_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch1_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc2_ch1_cos_ctrl_rx_0;
} CMIC_CMC2_CH1_COS_CTRL_RX_0r_t;

#define CMIC_CMC2_CH1_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc2_ch1_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC2_CH1_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc2_ch1_cos_ctrl_rx_0[0] = d
#define CMIC_CMC2_CH1_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc2_ch1_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH1_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc2_ch1_cos_ctrl_rx_0[0])
#define CMIC_CMC2_CH1_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc2_ch1_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH1_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH1_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH1_COS_CTRL_RX_1r_OFFSET 0x00033174

#define CMIC_CMC2_CH1_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH1_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC2_CH1_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch1_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc2_ch1_cos_ctrl_rx_1;
} CMIC_CMC2_CH1_COS_CTRL_RX_1r_t;

#define CMIC_CMC2_CH1_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc2_ch1_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC2_CH1_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc2_ch1_cos_ctrl_rx_1[0] = d
#define CMIC_CMC2_CH1_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc2_ch1_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH1_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc2_ch1_cos_ctrl_rx_1[0])
#define CMIC_CMC2_CH1_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc2_ch1_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH1_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH1_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH1_DMA_CTRLr_OFFSET 0x00033144

#define CMIC_CMC2_CH1_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH1_DMA_CTRL.
 */
typedef union CMIC_CMC2_CH1_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch1_dma_ctrl[1];
	uint32_t _cmic_cmc2_ch1_dma_ctrl;
} CMIC_CMC2_CH1_DMA_CTRLr_t;

#define CMIC_CMC2_CH1_DMA_CTRLr_CLR(r) (r).cmic_cmc2_ch1_dma_ctrl[0] = 0
#define CMIC_CMC2_CH1_DMA_CTRLr_SET(r,d) (r).cmic_cmc2_ch1_dma_ctrl[0] = d
#define CMIC_CMC2_CH1_DMA_CTRLr_GET(r) (r).cmic_cmc2_ch1_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH1_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc2_ch1_dma_ctrl[0]) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_CH1_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc2_ch1_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_CH1_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc2_ch1_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_CH1_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc2_ch1_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_CH1_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ch1_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_CH1_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ch1_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_CH1_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc2_ch1_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_CH1_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc2_ch1_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_CH1_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc2_ch1_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_CH1_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc2_ch1_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC2_CH1_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc2_ch1_dma_ctrl[0]=(((r).cmic_cmc2_ch1_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC2_CH1_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH1_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH1_DMA_CURR_DESCr_OFFSET 0x000331ac

#define CMIC_CMC2_CH1_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH1_DMA_CURR_DESC.
 */
typedef union CMIC_CMC2_CH1_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch1_dma_curr_desc[1];
	uint32_t _cmic_cmc2_ch1_dma_curr_desc;
} CMIC_CMC2_CH1_DMA_CURR_DESCr_t;

#define CMIC_CMC2_CH1_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc2_ch1_dma_curr_desc[0] = 0
#define CMIC_CMC2_CH1_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc2_ch1_dma_curr_desc[0] = d
#define CMIC_CMC2_CH1_DMA_CURR_DESCr_GET(r) (r).cmic_cmc2_ch1_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH1_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc2_ch1_dma_curr_desc[0])
#define CMIC_CMC2_CH1_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc2_ch1_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH1_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00033114

#define CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch1_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc2_ch1_rxbuf_threshold_config;
} CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc2_ch1_rxbuf_threshold_config[0] = 0
#define CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc2_ch1_rxbuf_threshold_config[0] = d
#define CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc2_ch1_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc2_ch1_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc2_ch1_rxbuf_threshold_config[0]=(((r).cmic_cmc2_ch1_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc2_ch1_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc2_ch1_rxbuf_threshold_config[0]=(((r).cmic_cmc2_ch1_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC2_CH1_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH2_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH2_COS_CTRL_RX_0r_OFFSET 0x00033178

#define CMIC_CMC2_CH2_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH2_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC2_CH2_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch2_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc2_ch2_cos_ctrl_rx_0;
} CMIC_CMC2_CH2_COS_CTRL_RX_0r_t;

#define CMIC_CMC2_CH2_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc2_ch2_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC2_CH2_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc2_ch2_cos_ctrl_rx_0[0] = d
#define CMIC_CMC2_CH2_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc2_ch2_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH2_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc2_ch2_cos_ctrl_rx_0[0])
#define CMIC_CMC2_CH2_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc2_ch2_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH2_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH2_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH2_COS_CTRL_RX_1r_OFFSET 0x0003317c

#define CMIC_CMC2_CH2_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH2_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC2_CH2_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch2_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc2_ch2_cos_ctrl_rx_1;
} CMIC_CMC2_CH2_COS_CTRL_RX_1r_t;

#define CMIC_CMC2_CH2_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc2_ch2_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC2_CH2_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc2_ch2_cos_ctrl_rx_1[0] = d
#define CMIC_CMC2_CH2_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc2_ch2_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH2_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc2_ch2_cos_ctrl_rx_1[0])
#define CMIC_CMC2_CH2_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc2_ch2_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH2_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH2_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH2_DMA_CTRLr_OFFSET 0x00033148

#define CMIC_CMC2_CH2_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH2_DMA_CTRL.
 */
typedef union CMIC_CMC2_CH2_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch2_dma_ctrl[1];
	uint32_t _cmic_cmc2_ch2_dma_ctrl;
} CMIC_CMC2_CH2_DMA_CTRLr_t;

#define CMIC_CMC2_CH2_DMA_CTRLr_CLR(r) (r).cmic_cmc2_ch2_dma_ctrl[0] = 0
#define CMIC_CMC2_CH2_DMA_CTRLr_SET(r,d) (r).cmic_cmc2_ch2_dma_ctrl[0] = d
#define CMIC_CMC2_CH2_DMA_CTRLr_GET(r) (r).cmic_cmc2_ch2_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH2_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc2_ch2_dma_ctrl[0]) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_CH2_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc2_ch2_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_CH2_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc2_ch2_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_CH2_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc2_ch2_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_CH2_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ch2_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_CH2_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ch2_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_CH2_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc2_ch2_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_CH2_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc2_ch2_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_CH2_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc2_ch2_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_CH2_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc2_ch2_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC2_CH2_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc2_ch2_dma_ctrl[0]=(((r).cmic_cmc2_ch2_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC2_CH2_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH2_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH2_DMA_CURR_DESCr_OFFSET 0x000331b0

#define CMIC_CMC2_CH2_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH2_DMA_CURR_DESC.
 */
typedef union CMIC_CMC2_CH2_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch2_dma_curr_desc[1];
	uint32_t _cmic_cmc2_ch2_dma_curr_desc;
} CMIC_CMC2_CH2_DMA_CURR_DESCr_t;

#define CMIC_CMC2_CH2_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc2_ch2_dma_curr_desc[0] = 0
#define CMIC_CMC2_CH2_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc2_ch2_dma_curr_desc[0] = d
#define CMIC_CMC2_CH2_DMA_CURR_DESCr_GET(r) (r).cmic_cmc2_ch2_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH2_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc2_ch2_dma_curr_desc[0])
#define CMIC_CMC2_CH2_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc2_ch2_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH2_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00033118

#define CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch2_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc2_ch2_rxbuf_threshold_config;
} CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc2_ch2_rxbuf_threshold_config[0] = 0
#define CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc2_ch2_rxbuf_threshold_config[0] = d
#define CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc2_ch2_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc2_ch2_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc2_ch2_rxbuf_threshold_config[0]=(((r).cmic_cmc2_ch2_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc2_ch2_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc2_ch2_rxbuf_threshold_config[0]=(((r).cmic_cmc2_ch2_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC2_CH2_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH3_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH3_COS_CTRL_RX_0r_OFFSET 0x00033180

#define CMIC_CMC2_CH3_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH3_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC2_CH3_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch3_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc2_ch3_cos_ctrl_rx_0;
} CMIC_CMC2_CH3_COS_CTRL_RX_0r_t;

#define CMIC_CMC2_CH3_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc2_ch3_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC2_CH3_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc2_ch3_cos_ctrl_rx_0[0] = d
#define CMIC_CMC2_CH3_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc2_ch3_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH3_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc2_ch3_cos_ctrl_rx_0[0])
#define CMIC_CMC2_CH3_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc2_ch3_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH3_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH3_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH3_COS_CTRL_RX_1r_OFFSET 0x00033184

#define CMIC_CMC2_CH3_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH3_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC2_CH3_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch3_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc2_ch3_cos_ctrl_rx_1;
} CMIC_CMC2_CH3_COS_CTRL_RX_1r_t;

#define CMIC_CMC2_CH3_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc2_ch3_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC2_CH3_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc2_ch3_cos_ctrl_rx_1[0] = d
#define CMIC_CMC2_CH3_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc2_ch3_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH3_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc2_ch3_cos_ctrl_rx_1[0])
#define CMIC_CMC2_CH3_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc2_ch3_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH3_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH3_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH3_DMA_CTRLr_OFFSET 0x0003314c

#define CMIC_CMC2_CH3_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH3_DMA_CTRL.
 */
typedef union CMIC_CMC2_CH3_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch3_dma_ctrl[1];
	uint32_t _cmic_cmc2_ch3_dma_ctrl;
} CMIC_CMC2_CH3_DMA_CTRLr_t;

#define CMIC_CMC2_CH3_DMA_CTRLr_CLR(r) (r).cmic_cmc2_ch3_dma_ctrl[0] = 0
#define CMIC_CMC2_CH3_DMA_CTRLr_SET(r,d) (r).cmic_cmc2_ch3_dma_ctrl[0] = d
#define CMIC_CMC2_CH3_DMA_CTRLr_GET(r) (r).cmic_cmc2_ch3_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH3_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc2_ch3_dma_ctrl[0]) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_CH3_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc2_ch3_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_CH3_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc2_ch3_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_CH3_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc2_ch3_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_CH3_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ch3_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_CH3_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc2_ch3_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_CH3_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc2_ch3_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_CH3_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc2_ch3_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_CH3_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc2_ch3_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_CH3_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc2_ch3_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC2_CH3_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc2_ch3_dma_ctrl[0]=(((r).cmic_cmc2_ch3_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC2_CH3_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH3_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH3_DMA_CURR_DESCr_OFFSET 0x000331b4

#define CMIC_CMC2_CH3_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH3_DMA_CURR_DESC.
 */
typedef union CMIC_CMC2_CH3_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch3_dma_curr_desc[1];
	uint32_t _cmic_cmc2_ch3_dma_curr_desc;
} CMIC_CMC2_CH3_DMA_CURR_DESCr_t;

#define CMIC_CMC2_CH3_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc2_ch3_dma_curr_desc[0] = 0
#define CMIC_CMC2_CH3_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc2_ch3_dma_curr_desc[0] = d
#define CMIC_CMC2_CH3_DMA_CURR_DESCr_GET(r) (r).cmic_cmc2_ch3_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH3_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc2_ch3_dma_curr_desc[0])
#define CMIC_CMC2_CH3_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc2_ch3_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_CH3_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x0003311c

#define CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_ch3_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc2_ch3_rxbuf_threshold_config;
} CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc2_ch3_rxbuf_threshold_config[0] = 0
#define CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc2_ch3_rxbuf_threshold_config[0] = d
#define CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc2_ch3_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc2_ch3_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc2_ch3_rxbuf_threshold_config[0]=(((r).cmic_cmc2_ch3_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc2_ch3_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc2_ch3_rxbuf_threshold_config[0]=(((r).cmic_cmc2_ch3_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC2_CH3_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_CONFIGr_OFFSET 0x00033108

#define CMIC_CMC2_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_CONFIG.
 */
typedef union CMIC_CMC2_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_config[1];
	uint32_t _cmic_cmc2_config;
} CMIC_CMC2_CONFIGr_t;

#define CMIC_CMC2_CONFIGr_CLR(r) (r).cmic_cmc2_config[0] = 0
#define CMIC_CMC2_CONFIGr_SET(r,d) (r).cmic_cmc2_config[0] = d
#define CMIC_CMC2_CONFIGr_GET(r) (r).cmic_cmc2_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_CONFIGr_ENABLE_SBUSDMA_CH0_FLOW_CONTROLf_GET(r) (((r).cmic_cmc2_config[0]) & 0x1)
#define CMIC_CMC2_CONFIGr_ENABLE_SBUSDMA_CH0_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc2_config[0]=(((r).cmic_cmc2_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_CONFIGr_ENABLE_SBUSDMA_CH1_FLOW_CONTROLf_GET(r) ((((r).cmic_cmc2_config[0]) >> 1) & 0x1)
#define CMIC_CMC2_CONFIGr_ENABLE_SBUSDMA_CH1_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc2_config[0]=(((r).cmic_cmc2_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_CONFIGr_ENABLE_SBUSDMA_CH2_FLOW_CONTROLf_GET(r) ((((r).cmic_cmc2_config[0]) >> 2) & 0x1)
#define CMIC_CMC2_CONFIGr_ENABLE_SBUSDMA_CH2_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc2_config[0]=(((r).cmic_cmc2_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_CONFIGr_ENABLE_EARLY_BRESPf_GET(r) ((((r).cmic_cmc2_config[0]) >> 3) & 0x1)
#define CMIC_CMC2_CONFIGr_ENABLE_EARLY_BRESPf_SET(r,f) (r).cmic_cmc2_config[0]=(((r).cmic_cmc2_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC2_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_CH0_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr_OFFSET 0x00033120

#define CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_CH0_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_ch0_desc_halt_addr[1];
	uint32_t _cmic_cmc2_dma_ch0_desc_halt_addr;
} CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr_t;

#define CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc2_dma_ch0_desc_halt_addr[0] = 0
#define CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc2_dma_ch0_desc_halt_addr[0] = d
#define CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc2_dma_ch0_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc2_dma_ch0_desc_halt_addr[0])
#define CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc2_dma_ch0_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_CH0_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_CH0_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_CH0_INTR_COALr_OFFSET 0x00033188

#define CMIC_CMC2_DMA_CH0_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_CH0_INTR_COAL.
 */
typedef union CMIC_CMC2_DMA_CH0_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_ch0_intr_coal[1];
	uint32_t _cmic_cmc2_dma_ch0_intr_coal;
} CMIC_CMC2_DMA_CH0_INTR_COALr_t;

#define CMIC_CMC2_DMA_CH0_INTR_COALr_CLR(r) (r).cmic_cmc2_dma_ch0_intr_coal[0] = 0
#define CMIC_CMC2_DMA_CH0_INTR_COALr_SET(r,d) (r).cmic_cmc2_dma_ch0_intr_coal[0] = d
#define CMIC_CMC2_DMA_CH0_INTR_COALr_GET(r) (r).cmic_cmc2_dma_ch0_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_CH0_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc2_dma_ch0_intr_coal[0]) & 0xffff)
#define CMIC_CMC2_DMA_CH0_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc2_dma_ch0_intr_coal[0]=(((r).cmic_cmc2_dma_ch0_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC2_DMA_CH0_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc2_dma_ch0_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC2_DMA_CH0_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc2_dma_ch0_intr_coal[0]=(((r).cmic_cmc2_dma_ch0_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC2_DMA_CH0_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc2_dma_ch0_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC2_DMA_CH0_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc2_dma_ch0_intr_coal[0]=(((r).cmic_cmc2_dma_ch0_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_CH0_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_CH1_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr_OFFSET 0x00033124

#define CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_CH1_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_ch1_desc_halt_addr[1];
	uint32_t _cmic_cmc2_dma_ch1_desc_halt_addr;
} CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr_t;

#define CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc2_dma_ch1_desc_halt_addr[0] = 0
#define CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc2_dma_ch1_desc_halt_addr[0] = d
#define CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc2_dma_ch1_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc2_dma_ch1_desc_halt_addr[0])
#define CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc2_dma_ch1_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_CH1_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_CH1_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_CH1_INTR_COALr_OFFSET 0x0003318c

#define CMIC_CMC2_DMA_CH1_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_CH1_INTR_COAL.
 */
typedef union CMIC_CMC2_DMA_CH1_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_ch1_intr_coal[1];
	uint32_t _cmic_cmc2_dma_ch1_intr_coal;
} CMIC_CMC2_DMA_CH1_INTR_COALr_t;

#define CMIC_CMC2_DMA_CH1_INTR_COALr_CLR(r) (r).cmic_cmc2_dma_ch1_intr_coal[0] = 0
#define CMIC_CMC2_DMA_CH1_INTR_COALr_SET(r,d) (r).cmic_cmc2_dma_ch1_intr_coal[0] = d
#define CMIC_CMC2_DMA_CH1_INTR_COALr_GET(r) (r).cmic_cmc2_dma_ch1_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_CH1_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc2_dma_ch1_intr_coal[0]) & 0xffff)
#define CMIC_CMC2_DMA_CH1_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc2_dma_ch1_intr_coal[0]=(((r).cmic_cmc2_dma_ch1_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC2_DMA_CH1_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc2_dma_ch1_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC2_DMA_CH1_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc2_dma_ch1_intr_coal[0]=(((r).cmic_cmc2_dma_ch1_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC2_DMA_CH1_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc2_dma_ch1_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC2_DMA_CH1_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc2_dma_ch1_intr_coal[0]=(((r).cmic_cmc2_dma_ch1_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_CH1_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_CH2_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr_OFFSET 0x00033128

#define CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_CH2_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_ch2_desc_halt_addr[1];
	uint32_t _cmic_cmc2_dma_ch2_desc_halt_addr;
} CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr_t;

#define CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc2_dma_ch2_desc_halt_addr[0] = 0
#define CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc2_dma_ch2_desc_halt_addr[0] = d
#define CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc2_dma_ch2_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc2_dma_ch2_desc_halt_addr[0])
#define CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc2_dma_ch2_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_CH2_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_CH2_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_CH2_INTR_COALr_OFFSET 0x00033190

#define CMIC_CMC2_DMA_CH2_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_CH2_INTR_COAL.
 */
typedef union CMIC_CMC2_DMA_CH2_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_ch2_intr_coal[1];
	uint32_t _cmic_cmc2_dma_ch2_intr_coal;
} CMIC_CMC2_DMA_CH2_INTR_COALr_t;

#define CMIC_CMC2_DMA_CH2_INTR_COALr_CLR(r) (r).cmic_cmc2_dma_ch2_intr_coal[0] = 0
#define CMIC_CMC2_DMA_CH2_INTR_COALr_SET(r,d) (r).cmic_cmc2_dma_ch2_intr_coal[0] = d
#define CMIC_CMC2_DMA_CH2_INTR_COALr_GET(r) (r).cmic_cmc2_dma_ch2_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_CH2_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc2_dma_ch2_intr_coal[0]) & 0xffff)
#define CMIC_CMC2_DMA_CH2_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc2_dma_ch2_intr_coal[0]=(((r).cmic_cmc2_dma_ch2_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC2_DMA_CH2_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc2_dma_ch2_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC2_DMA_CH2_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc2_dma_ch2_intr_coal[0]=(((r).cmic_cmc2_dma_ch2_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC2_DMA_CH2_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc2_dma_ch2_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC2_DMA_CH2_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc2_dma_ch2_intr_coal[0]=(((r).cmic_cmc2_dma_ch2_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_CH2_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_CH3_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr_OFFSET 0x0003312c

#define CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_CH3_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_ch3_desc_halt_addr[1];
	uint32_t _cmic_cmc2_dma_ch3_desc_halt_addr;
} CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr_t;

#define CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc2_dma_ch3_desc_halt_addr[0] = 0
#define CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc2_dma_ch3_desc_halt_addr[0] = d
#define CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc2_dma_ch3_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc2_dma_ch3_desc_halt_addr[0])
#define CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc2_dma_ch3_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_CH3_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_CH3_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_CH3_INTR_COALr_OFFSET 0x00033194

#define CMIC_CMC2_DMA_CH3_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_CH3_INTR_COAL.
 */
typedef union CMIC_CMC2_DMA_CH3_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_ch3_intr_coal[1];
	uint32_t _cmic_cmc2_dma_ch3_intr_coal;
} CMIC_CMC2_DMA_CH3_INTR_COALr_t;

#define CMIC_CMC2_DMA_CH3_INTR_COALr_CLR(r) (r).cmic_cmc2_dma_ch3_intr_coal[0] = 0
#define CMIC_CMC2_DMA_CH3_INTR_COALr_SET(r,d) (r).cmic_cmc2_dma_ch3_intr_coal[0] = d
#define CMIC_CMC2_DMA_CH3_INTR_COALr_GET(r) (r).cmic_cmc2_dma_ch3_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_CH3_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc2_dma_ch3_intr_coal[0]) & 0xffff)
#define CMIC_CMC2_DMA_CH3_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc2_dma_ch3_intr_coal[0]=(((r).cmic_cmc2_dma_ch3_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC2_DMA_CH3_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc2_dma_ch3_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC2_DMA_CH3_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc2_dma_ch3_intr_coal[0]=(((r).cmic_cmc2_dma_ch3_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC2_DMA_CH3_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc2_dma_ch3_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC2_DMA_CH3_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc2_dma_ch3_intr_coal[0]=(((r).cmic_cmc2_dma_ch3_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_CH3_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_DESC0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_DESC0r_OFFSET 0x00033158

#define CMIC_CMC2_DMA_DESC0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_DESC0.
 */
typedef union CMIC_CMC2_DMA_DESC0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_desc0[1];
	uint32_t _cmic_cmc2_dma_desc0;
} CMIC_CMC2_DMA_DESC0r_t;

#define CMIC_CMC2_DMA_DESC0r_CLR(r) (r).cmic_cmc2_dma_desc0[0] = 0
#define CMIC_CMC2_DMA_DESC0r_SET(r,d) (r).cmic_cmc2_dma_desc0[0] = d
#define CMIC_CMC2_DMA_DESC0r_GET(r) (r).cmic_cmc2_dma_desc0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_DESC0r_ADDRf_GET(r) ((r).cmic_cmc2_dma_desc0[0])
#define CMIC_CMC2_DMA_DESC0r_ADDRf_SET(r,f) (r).cmic_cmc2_dma_desc0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_DESC0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_DESC1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_DESC1r_OFFSET 0x0003315c

#define CMIC_CMC2_DMA_DESC1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_DESC1.
 */
typedef union CMIC_CMC2_DMA_DESC1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_desc1[1];
	uint32_t _cmic_cmc2_dma_desc1;
} CMIC_CMC2_DMA_DESC1r_t;

#define CMIC_CMC2_DMA_DESC1r_CLR(r) (r).cmic_cmc2_dma_desc1[0] = 0
#define CMIC_CMC2_DMA_DESC1r_SET(r,d) (r).cmic_cmc2_dma_desc1[0] = d
#define CMIC_CMC2_DMA_DESC1r_GET(r) (r).cmic_cmc2_dma_desc1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_DESC1r_ADDRf_GET(r) ((r).cmic_cmc2_dma_desc1[0])
#define CMIC_CMC2_DMA_DESC1r_ADDRf_SET(r,f) (r).cmic_cmc2_dma_desc1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_DESC1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_DESC2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_DESC2r_OFFSET 0x00033160

#define CMIC_CMC2_DMA_DESC2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_DESC2.
 */
typedef union CMIC_CMC2_DMA_DESC2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_desc2[1];
	uint32_t _cmic_cmc2_dma_desc2;
} CMIC_CMC2_DMA_DESC2r_t;

#define CMIC_CMC2_DMA_DESC2r_CLR(r) (r).cmic_cmc2_dma_desc2[0] = 0
#define CMIC_CMC2_DMA_DESC2r_SET(r,d) (r).cmic_cmc2_dma_desc2[0] = d
#define CMIC_CMC2_DMA_DESC2r_GET(r) (r).cmic_cmc2_dma_desc2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_DESC2r_ADDRf_GET(r) ((r).cmic_cmc2_dma_desc2[0])
#define CMIC_CMC2_DMA_DESC2r_ADDRf_SET(r,f) (r).cmic_cmc2_dma_desc2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_DESC2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_DESC3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_DESC3r_OFFSET 0x00033164

#define CMIC_CMC2_DMA_DESC3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_DESC3.
 */
typedef union CMIC_CMC2_DMA_DESC3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_desc3[1];
	uint32_t _cmic_cmc2_dma_desc3;
} CMIC_CMC2_DMA_DESC3r_t;

#define CMIC_CMC2_DMA_DESC3r_CLR(r) (r).cmic_cmc2_dma_desc3[0] = 0
#define CMIC_CMC2_DMA_DESC3r_SET(r,d) (r).cmic_cmc2_dma_desc3[0] = d
#define CMIC_CMC2_DMA_DESC3r_GET(r) (r).cmic_cmc2_dma_desc3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_DESC3r_ADDRf_GET(r) ((r).cmic_cmc2_dma_desc3[0])
#define CMIC_CMC2_DMA_DESC3r_ADDRf_SET(r,f) (r).cmic_cmc2_dma_desc3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_DESC3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_STATr_OFFSET 0x00033150

#define CMIC_CMC2_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_STAT.
 */
typedef union CMIC_CMC2_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_stat[1];
	uint32_t _cmic_cmc2_dma_stat;
} CMIC_CMC2_DMA_STATr_t;

#define CMIC_CMC2_DMA_STATr_CLR(r) (r).cmic_cmc2_dma_stat[0] = 0
#define CMIC_CMC2_DMA_STATr_SET(r,d) (r).cmic_cmc2_dma_stat[0] = d
#define CMIC_CMC2_DMA_STATr_GET(r) (r).cmic_cmc2_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_STATr_CH0_CHAIN_DONEf_GET(r) (((r).cmic_cmc2_dma_stat[0]) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_DMA_STATr_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_DMA_STATr_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_DMA_STATr_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_DMA_STATr_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_DMA_STATr_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_DMA_STATr_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_DMA_STATr_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_DMA_STATr_CH0_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH0_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_DMA_STATr_CH1_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH1_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_DMA_STATr_CH2_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH2_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_DMA_STATr_CH3_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH3_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 12) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 13) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC2_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 14) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC2_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 15) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC2_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 16) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC2_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 17) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC2_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 18) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC2_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 19) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 20) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 21) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 22) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC2_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 23) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC2_DMA_STATr_CH0_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 24) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH0_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_DMA_STATr_CH1_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 25) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH1_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC2_DMA_STATr_CH2_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 26) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH2_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_DMA_STATr_CH3_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 27) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH3_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_DMA_STATr_CH0_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 28) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH0_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_DMA_STATr_CH1_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 29) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH1_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_DMA_STATr_CH2_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 30) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH2_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC2_DMA_STATr_CH3_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc2_dma_stat[0]) >> 31) & 0x1)
#define CMIC_CMC2_DMA_STATr_CH3_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc2_dma_stat[0]=(((r).cmic_cmc2_dma_stat[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_STAT_CLRr_OFFSET 0x000331a4

#define CMIC_CMC2_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_STAT_CLR.
 */
typedef union CMIC_CMC2_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_stat_clr[1];
	uint32_t _cmic_cmc2_dma_stat_clr;
} CMIC_CMC2_DMA_STAT_CLRr_t;

#define CMIC_CMC2_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc2_dma_stat_clr[0] = 0
#define CMIC_CMC2_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc2_dma_stat_clr[0] = d
#define CMIC_CMC2_DMA_STAT_CLRr_GET(r) (r).cmic_cmc2_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc2_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 3) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 4) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 5) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 6) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 7) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_DMA_STAT_CLRr_CH0_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 8) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH0_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_DMA_STAT_CLRr_CH1_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 9) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH1_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_DMA_STAT_CLRr_CH2_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 10) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH2_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_DMA_STAT_CLRr_CH3_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc2_dma_stat_clr[0]) >> 11) & 0x1)
#define CMIC_CMC2_DMA_STAT_CLRr_CH3_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc2_dma_stat_clr[0]=(((r).cmic_cmc2_dma_stat_clr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_DMA_STAT_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_DMA_STAT_HIr_OFFSET 0x00033130

#define CMIC_CMC2_DMA_STAT_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_DMA_STAT_HI.
 */
typedef union CMIC_CMC2_DMA_STAT_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_dma_stat_hi[1];
	uint32_t _cmic_cmc2_dma_stat_hi;
} CMIC_CMC2_DMA_STAT_HIr_t;

#define CMIC_CMC2_DMA_STAT_HIr_CLR(r) (r).cmic_cmc2_dma_stat_hi[0] = 0
#define CMIC_CMC2_DMA_STAT_HIr_SET(r,d) (r).cmic_cmc2_dma_stat_hi[0] = d
#define CMIC_CMC2_DMA_STAT_HIr_GET(r) (r).cmic_cmc2_dma_stat_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_DMA_STAT_HIr_CH0_IN_HALTf_GET(r) ((((r).cmic_cmc2_dma_stat_hi[0]) >> 27) & 0x1)
#define CMIC_CMC2_DMA_STAT_HIr_CH0_IN_HALTf_SET(r,f) (r).cmic_cmc2_dma_stat_hi[0]=(((r).cmic_cmc2_dma_stat_hi[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_DMA_STAT_HIr_CH1_IN_HALTf_GET(r) ((((r).cmic_cmc2_dma_stat_hi[0]) >> 28) & 0x1)
#define CMIC_CMC2_DMA_STAT_HIr_CH1_IN_HALTf_SET(r,f) (r).cmic_cmc2_dma_stat_hi[0]=(((r).cmic_cmc2_dma_stat_hi[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_DMA_STAT_HIr_CH2_IN_HALTf_GET(r) ((((r).cmic_cmc2_dma_stat_hi[0]) >> 29) & 0x1)
#define CMIC_CMC2_DMA_STAT_HIr_CH2_IN_HALTf_SET(r,f) (r).cmic_cmc2_dma_stat_hi[0]=(((r).cmic_cmc2_dma_stat_hi[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_DMA_STAT_HIr_CH3_IN_HALTf_GET(r) ((((r).cmic_cmc2_dma_stat_hi[0]) >> 30) & 0x1)
#define CMIC_CMC2_DMA_STAT_HIr_CH3_IN_HALTf_SET(r,f) (r).cmic_cmc2_dma_stat_hi[0]=(((r).cmic_cmc2_dma_stat_hi[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC2_DMA_STAT_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_OFFSET 0x00033828

#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0.
 */
typedef union CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fiforddma_ch0_tm_control_0[1];
	uint32_t _cmic_cmc2_fiforddma_ch0_tm_control_0;
} CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_t;

#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_CLR(r) (r).cmic_cmc2_fiforddma_ch0_tm_control_0[0] = 0
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc2_fiforddma_ch0_tm_control_0[0] = d
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_GET(r) (r).cmic_cmc2_fiforddma_ch0_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc2_fiforddma_ch0_tm_control_0[0]) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc2_fiforddma_ch0_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc2_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_fiforddma_ch0_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_fiforddma_ch0_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_fiforddma_ch0_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_OFFSET 0x0003382c

#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1.
 */
typedef union CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fiforddma_ch0_tm_control_1[1];
	uint32_t _cmic_cmc2_fiforddma_ch0_tm_control_1;
} CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_t;

#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_CLR(r) (r).cmic_cmc2_fiforddma_ch0_tm_control_1[0] = 0
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc2_fiforddma_ch0_tm_control_1[0] = d
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_GET(r) (r).cmic_cmc2_fiforddma_ch0_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc2_fiforddma_ch0_tm_control_1[0]) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch0_tm_control_1[0]=(((r).cmic_cmc2_fiforddma_ch0_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_fiforddma_ch0_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch0_tm_control_1[0]=(((r).cmic_cmc2_fiforddma_ch0_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFORDDMA_CH0_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_OFFSET 0x00033830

#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0.
 */
typedef union CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fiforddma_ch1_tm_control_0[1];
	uint32_t _cmic_cmc2_fiforddma_ch1_tm_control_0;
} CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_t;

#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_CLR(r) (r).cmic_cmc2_fiforddma_ch1_tm_control_0[0] = 0
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc2_fiforddma_ch1_tm_control_0[0] = d
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_GET(r) (r).cmic_cmc2_fiforddma_ch1_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc2_fiforddma_ch1_tm_control_0[0]) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc2_fiforddma_ch1_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc2_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_fiforddma_ch1_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_fiforddma_ch1_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_OFFSET 0x00033834

#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1.
 */
typedef union CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fiforddma_ch1_tm_control_1[1];
	uint32_t _cmic_cmc2_fiforddma_ch1_tm_control_1;
} CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_t;

#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_CLR(r) (r).cmic_cmc2_fiforddma_ch1_tm_control_1[0] = 0
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc2_fiforddma_ch1_tm_control_1[0] = d
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_GET(r) (r).cmic_cmc2_fiforddma_ch1_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc2_fiforddma_ch1_tm_control_1[0]) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch1_tm_control_1[0]=(((r).cmic_cmc2_fiforddma_ch1_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_fiforddma_ch1_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch1_tm_control_1[0]=(((r).cmic_cmc2_fiforddma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFORDDMA_CH1_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_OFFSET 0x00033838

#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0.
 */
typedef union CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fiforddma_ch2_tm_control_0[1];
	uint32_t _cmic_cmc2_fiforddma_ch2_tm_control_0;
} CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_t;

#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_CLR(r) (r).cmic_cmc2_fiforddma_ch2_tm_control_0[0] = 0
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc2_fiforddma_ch2_tm_control_0[0] = d
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_GET(r) (r).cmic_cmc2_fiforddma_ch2_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc2_fiforddma_ch2_tm_control_0[0]) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc2_fiforddma_ch2_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc2_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_fiforddma_ch2_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_fiforddma_ch2_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_OFFSET 0x0003383c

#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1.
 */
typedef union CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fiforddma_ch2_tm_control_1[1];
	uint32_t _cmic_cmc2_fiforddma_ch2_tm_control_1;
} CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_t;

#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_CLR(r) (r).cmic_cmc2_fiforddma_ch2_tm_control_1[0] = 0
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc2_fiforddma_ch2_tm_control_1[0] = d
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_GET(r) (r).cmic_cmc2_fiforddma_ch2_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc2_fiforddma_ch2_tm_control_1[0]) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch2_tm_control_1[0]=(((r).cmic_cmc2_fiforddma_ch2_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_fiforddma_ch2_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch2_tm_control_1[0]=(((r).cmic_cmc2_fiforddma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFORDDMA_CH2_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_OFFSET 0x00033840

#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0.
 */
typedef union CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fiforddma_ch3_tm_control_0[1];
	uint32_t _cmic_cmc2_fiforddma_ch3_tm_control_0;
} CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_t;

#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_CLR(r) (r).cmic_cmc2_fiforddma_ch3_tm_control_0[0] = 0
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc2_fiforddma_ch3_tm_control_0[0] = d
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_GET(r) (r).cmic_cmc2_fiforddma_ch3_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc2_fiforddma_ch3_tm_control_0[0]) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc2_fiforddma_ch3_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc2_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_fiforddma_ch3_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_fiforddma_ch3_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc2_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_OFFSET 0x00033844

#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1.
 */
typedef union CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fiforddma_ch3_tm_control_1[1];
	uint32_t _cmic_cmc2_fiforddma_ch3_tm_control_1;
} CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_t;

#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_CLR(r) (r).cmic_cmc2_fiforddma_ch3_tm_control_1[0] = 0
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc2_fiforddma_ch3_tm_control_1[0] = d
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_GET(r) (r).cmic_cmc2_fiforddma_ch3_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc2_fiforddma_ch3_tm_control_1[0]) & 0xfff)
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch3_tm_control_1[0]=(((r).cmic_cmc2_fiforddma_ch3_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_fiforddma_ch3_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_fiforddma_ch3_tm_control_1[0]=(((r).cmic_cmc2_fiforddma_ch3_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFORDDMA_CH3_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_OFFSET 0x000332c0

#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_CFG.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_cfg[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_cfg;
} CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00033330

#define CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00033310

#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_eccerr_address;
} CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_address[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_address[0])
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00033320

#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_eccerr_control;
} CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000332e0

#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_hostmem_start_address;
} CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_start_address[0])
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00033354

#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_hostmem_threshold;
} CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_threshold[0])
#define CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x000332f0

#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x000332f4

#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr_OFFSET 0x00033384

#define CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_opcode[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_opcode;
} CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_opcode[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_opcode[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_fifo_ch0_rd_dma_opcode[0])
#define CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000332d0

#define CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_sbus_start_address;
} CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch0_rd_dma_sbus_start_address[0])
#define CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_OFFSET 0x00033364

#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_STAT.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_stat[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_stat;
} CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_OFFSET 0x00033374

#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch0_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc2_fifo_ch0_rd_dma_stat_clr;
} CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0] = 0
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0] = d
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch0_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH0_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_OFFSET 0x000332c4

#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_CFG.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_cfg[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_cfg;
} CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00033334

#define CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00033314

#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_eccerr_address;
} CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_address[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_address[0])
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00033324

#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_eccerr_control;
} CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000332e4

#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_hostmem_start_address;
} CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_start_address[0])
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00033358

#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_hostmem_threshold;
} CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_threshold[0])
#define CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x000332f8

#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x000332fc

#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr_OFFSET 0x00033388

#define CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_opcode[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_opcode;
} CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_opcode[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_opcode[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_fifo_ch1_rd_dma_opcode[0])
#define CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000332d4

#define CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_sbus_start_address;
} CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch1_rd_dma_sbus_start_address[0])
#define CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_OFFSET 0x00033368

#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_STAT.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_stat[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_stat;
} CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_OFFSET 0x00033378

#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch1_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc2_fifo_ch1_rd_dma_stat_clr;
} CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0] = 0
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0] = d
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch1_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH1_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_OFFSET 0x000332c8

#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_CFG.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_cfg[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_cfg;
} CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00033338

#define CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00033318

#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_eccerr_address;
} CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_address[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_address[0])
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00033328

#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_eccerr_control;
} CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000332e8

#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_hostmem_start_address;
} CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_start_address[0])
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x0003335c

#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_hostmem_threshold;
} CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_threshold[0])
#define CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x00033300

#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x00033304

#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr_OFFSET 0x0003338c

#define CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_opcode[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_opcode;
} CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_opcode[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_opcode[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_fifo_ch2_rd_dma_opcode[0])
#define CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000332d8

#define CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_sbus_start_address;
} CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch2_rd_dma_sbus_start_address[0])
#define CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_OFFSET 0x0003336c

#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_STAT.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_stat[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_stat;
} CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_OFFSET 0x0003337c

#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch2_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc2_fifo_ch2_rd_dma_stat_clr;
} CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0] = 0
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0] = d
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch2_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH2_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_OFFSET 0x000332cc

#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_CFG.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_cfg[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_cfg;
} CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x0003333c

#define CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x0003331c

#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_eccerr_address;
} CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_address[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_address[0])
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_OFFSET 0x0003332c

#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_eccerr_control;
} CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000332ec

#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_hostmem_start_address;
} CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_start_address[0])
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00033360

#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_hostmem_threshold;
} CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_threshold[0])
#define CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x00033308

#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x0003330c

#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr_OFFSET 0x00033390

#define CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_opcode[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_opcode;
} CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_opcode[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_opcode[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_fifo_ch3_rd_dma_opcode[0])
#define CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000332dc

#define CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_sbus_start_address;
} CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_fifo_ch3_rd_dma_sbus_start_address[0])
#define CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_OFFSET 0x00033370

#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_STAT.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_stat[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_stat;
} CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_OFFSET 0x00033380

#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fifo_ch3_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc2_fifo_ch3_rd_dma_stat_clr;
} CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0] = 0
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0] = d
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0]=(((r).cmic_cmc2_fifo_ch3_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC2_FIFO_CH3_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FSCHAN_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FSCHAN_ADDRESSr_OFFSET 0x00033070

#define CMIC_CMC2_FSCHAN_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FSCHAN_ADDRESS.
 */
typedef union CMIC_CMC2_FSCHAN_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fschan_address[1];
	uint32_t _cmic_cmc2_fschan_address;
} CMIC_CMC2_FSCHAN_ADDRESSr_t;

#define CMIC_CMC2_FSCHAN_ADDRESSr_CLR(r) (r).cmic_cmc2_fschan_address[0] = 0
#define CMIC_CMC2_FSCHAN_ADDRESSr_SET(r,d) (r).cmic_cmc2_fschan_address[0] = d
#define CMIC_CMC2_FSCHAN_ADDRESSr_GET(r) (r).cmic_cmc2_fschan_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FSCHAN_ADDRESSr_ADDRRESSf_GET(r) ((r).cmic_cmc2_fschan_address[0])
#define CMIC_CMC2_FSCHAN_ADDRESSr_ADDRRESSf_SET(r,f) (r).cmic_cmc2_fschan_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FSCHAN_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FSCHAN_DATA32
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FSCHAN_DATA32r_OFFSET 0x00033074

#define CMIC_CMC2_FSCHAN_DATA32r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FSCHAN_DATA32.
 */
typedef union CMIC_CMC2_FSCHAN_DATA32r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fschan_data32[1];
	uint32_t _cmic_cmc2_fschan_data32;
} CMIC_CMC2_FSCHAN_DATA32r_t;

#define CMIC_CMC2_FSCHAN_DATA32r_CLR(r) (r).cmic_cmc2_fschan_data32[0] = 0
#define CMIC_CMC2_FSCHAN_DATA32r_SET(r,d) (r).cmic_cmc2_fschan_data32[0] = d
#define CMIC_CMC2_FSCHAN_DATA32r_GET(r) (r).cmic_cmc2_fschan_data32[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FSCHAN_DATA32r_DATA32f_GET(r) ((r).cmic_cmc2_fschan_data32[0])
#define CMIC_CMC2_FSCHAN_DATA32r_DATA32f_SET(r,f) (r).cmic_cmc2_fschan_data32[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FSCHAN_DATA32r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FSCHAN_DATA64_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FSCHAN_DATA64_HIr_OFFSET 0x0003307c

#define CMIC_CMC2_FSCHAN_DATA64_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FSCHAN_DATA64_HI.
 */
typedef union CMIC_CMC2_FSCHAN_DATA64_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fschan_data64_hi[1];
	uint32_t _cmic_cmc2_fschan_data64_hi;
} CMIC_CMC2_FSCHAN_DATA64_HIr_t;

#define CMIC_CMC2_FSCHAN_DATA64_HIr_CLR(r) (r).cmic_cmc2_fschan_data64_hi[0] = 0
#define CMIC_CMC2_FSCHAN_DATA64_HIr_SET(r,d) (r).cmic_cmc2_fschan_data64_hi[0] = d
#define CMIC_CMC2_FSCHAN_DATA64_HIr_GET(r) (r).cmic_cmc2_fschan_data64_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FSCHAN_DATA64_HIr_DATA64_HIf_GET(r) ((r).cmic_cmc2_fschan_data64_hi[0])
#define CMIC_CMC2_FSCHAN_DATA64_HIr_DATA64_HIf_SET(r,f) (r).cmic_cmc2_fschan_data64_hi[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FSCHAN_DATA64_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FSCHAN_DATA64_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FSCHAN_DATA64_LOr_OFFSET 0x00033078

#define CMIC_CMC2_FSCHAN_DATA64_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FSCHAN_DATA64_LO.
 */
typedef union CMIC_CMC2_FSCHAN_DATA64_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fschan_data64_lo[1];
	uint32_t _cmic_cmc2_fschan_data64_lo;
} CMIC_CMC2_FSCHAN_DATA64_LOr_t;

#define CMIC_CMC2_FSCHAN_DATA64_LOr_CLR(r) (r).cmic_cmc2_fschan_data64_lo[0] = 0
#define CMIC_CMC2_FSCHAN_DATA64_LOr_SET(r,d) (r).cmic_cmc2_fschan_data64_lo[0] = d
#define CMIC_CMC2_FSCHAN_DATA64_LOr_GET(r) (r).cmic_cmc2_fschan_data64_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FSCHAN_DATA64_LOr_DATA64_LOf_GET(r) ((r).cmic_cmc2_fschan_data64_lo[0])
#define CMIC_CMC2_FSCHAN_DATA64_LOr_DATA64_LOf_SET(r,f) (r).cmic_cmc2_fschan_data64_lo[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FSCHAN_DATA64_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FSCHAN_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FSCHAN_OPCODEr_OFFSET 0x0003306c

#define CMIC_CMC2_FSCHAN_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FSCHAN_OPCODE.
 */
typedef union CMIC_CMC2_FSCHAN_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fschan_opcode[1];
	uint32_t _cmic_cmc2_fschan_opcode;
} CMIC_CMC2_FSCHAN_OPCODEr_t;

#define CMIC_CMC2_FSCHAN_OPCODEr_CLR(r) (r).cmic_cmc2_fschan_opcode[0] = 0
#define CMIC_CMC2_FSCHAN_OPCODEr_SET(r,d) (r).cmic_cmc2_fschan_opcode[0] = d
#define CMIC_CMC2_FSCHAN_OPCODEr_GET(r) (r).cmic_cmc2_fschan_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FSCHAN_OPCODEr_ADDRRESSf_GET(r) ((r).cmic_cmc2_fschan_opcode[0])
#define CMIC_CMC2_FSCHAN_OPCODEr_ADDRRESSf_SET(r,f) (r).cmic_cmc2_fschan_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_FSCHAN_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_FSCHAN_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_FSCHAN_STATUSr_OFFSET 0x00033068

#define CMIC_CMC2_FSCHAN_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_FSCHAN_STATUS.
 */
typedef union CMIC_CMC2_FSCHAN_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_fschan_status[1];
	uint32_t _cmic_cmc2_fschan_status;
} CMIC_CMC2_FSCHAN_STATUSr_t;

#define CMIC_CMC2_FSCHAN_STATUSr_CLR(r) (r).cmic_cmc2_fschan_status[0] = 0
#define CMIC_CMC2_FSCHAN_STATUSr_SET(r,d) (r).cmic_cmc2_fschan_status[0] = d
#define CMIC_CMC2_FSCHAN_STATUSr_GET(r) (r).cmic_cmc2_fschan_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_FSCHAN_STATUSr_FSCHAN_BUSYf_GET(r) (((r).cmic_cmc2_fschan_status[0]) & 0x1)
#define CMIC_CMC2_FSCHAN_STATUSr_FSCHAN_BUSYf_SET(r,f) (r).cmic_cmc2_fschan_status[0]=(((r).cmic_cmc2_fschan_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC2_FSCHAN_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_HOSTMEM_ADDR_REMAP_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_OFFSET 0x00033474

#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_HOSTMEM_ADDR_REMAP_0.
 */
typedef union CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_hostmem_addr_remap_0[1];
	uint32_t _cmic_cmc2_hostmem_addr_remap_0;
} CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_t;

#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_CLR(r) (r).cmic_cmc2_hostmem_addr_remap_0[0] = 0
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_SET(r,d) (r).cmic_cmc2_hostmem_addr_remap_0[0] = d
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_GET(r) (r).cmic_cmc2_hostmem_addr_remap_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_0f_GET(r) (((r).cmic_cmc2_hostmem_addr_remap_0[0]) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_0f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_0[0]=(((r).cmic_cmc2_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_1f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_0[0]) >> 6) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_1f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_0[0]=(((r).cmic_cmc2_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_2f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_0[0]) >> 12) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_2f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_0[0]=(((r).cmic_cmc2_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_3f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_0[0]) >> 18) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_3f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_0[0]=(((r).cmic_cmc2_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_4f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_0[0]) >> 24) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r_ADDR_4f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_0[0]=(((r).cmic_cmc2_hostmem_addr_remap_0[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC2_HOSTMEM_ADDR_REMAP_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_HOSTMEM_ADDR_REMAP_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_OFFSET 0x00033478

#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_HOSTMEM_ADDR_REMAP_1.
 */
typedef union CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_hostmem_addr_remap_1[1];
	uint32_t _cmic_cmc2_hostmem_addr_remap_1;
} CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_t;

#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_CLR(r) (r).cmic_cmc2_hostmem_addr_remap_1[0] = 0
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_SET(r,d) (r).cmic_cmc2_hostmem_addr_remap_1[0] = d
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_GET(r) (r).cmic_cmc2_hostmem_addr_remap_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_0f_GET(r) (((r).cmic_cmc2_hostmem_addr_remap_1[0]) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_0f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_1[0]=(((r).cmic_cmc2_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_1f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_1[0]) >> 6) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_1f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_1[0]=(((r).cmic_cmc2_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_2f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_1[0]) >> 12) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_2f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_1[0]=(((r).cmic_cmc2_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_3f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_1[0]) >> 18) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_3f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_1[0]=(((r).cmic_cmc2_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_4f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_1[0]) >> 24) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r_ADDR_4f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_1[0]=(((r).cmic_cmc2_hostmem_addr_remap_1[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC2_HOSTMEM_ADDR_REMAP_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_HOSTMEM_ADDR_REMAP_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_OFFSET 0x0003347c

#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_HOSTMEM_ADDR_REMAP_2.
 */
typedef union CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_hostmem_addr_remap_2[1];
	uint32_t _cmic_cmc2_hostmem_addr_remap_2;
} CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_t;

#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_CLR(r) (r).cmic_cmc2_hostmem_addr_remap_2[0] = 0
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_SET(r,d) (r).cmic_cmc2_hostmem_addr_remap_2[0] = d
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_GET(r) (r).cmic_cmc2_hostmem_addr_remap_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_0f_GET(r) (((r).cmic_cmc2_hostmem_addr_remap_2[0]) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_0f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_2[0]=(((r).cmic_cmc2_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_1f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_2[0]) >> 6) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_1f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_2[0]=(((r).cmic_cmc2_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_2f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_2[0]) >> 12) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_2f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_2[0]=(((r).cmic_cmc2_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_3f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_2[0]) >> 18) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_3f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_2[0]=(((r).cmic_cmc2_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_4f_GET(r) ((((r).cmic_cmc2_hostmem_addr_remap_2[0]) >> 24) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r_ADDR_4f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_2[0]=(((r).cmic_cmc2_hostmem_addr_remap_2[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC2_HOSTMEM_ADDR_REMAP_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_HOSTMEM_ADDR_REMAP_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r_OFFSET 0x000334ac

#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_HOSTMEM_ADDR_REMAP_3.
 */
typedef union CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_hostmem_addr_remap_3[1];
	uint32_t _cmic_cmc2_hostmem_addr_remap_3;
} CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r_t;

#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r_CLR(r) (r).cmic_cmc2_hostmem_addr_remap_3[0] = 0
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r_SET(r,d) (r).cmic_cmc2_hostmem_addr_remap_3[0] = d
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r_GET(r) (r).cmic_cmc2_hostmem_addr_remap_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r_ADDR_0f_GET(r) (((r).cmic_cmc2_hostmem_addr_remap_3[0]) & 0x3f)
#define CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r_ADDR_0f_SET(r,f) (r).cmic_cmc2_hostmem_addr_remap_3[0]=(((r).cmic_cmc2_hostmem_addr_remap_3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*******************************************************************************
 * End of 'CMIC_CMC2_HOSTMEM_ADDR_REMAP_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_IRQ_STAT0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_IRQ_STAT0r_OFFSET 0x00033400

#define CMIC_CMC2_IRQ_STAT0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_IRQ_STAT0.
 */
typedef union CMIC_CMC2_IRQ_STAT0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_irq_stat0[1];
	uint32_t _cmic_cmc2_irq_stat0;
} CMIC_CMC2_IRQ_STAT0r_t;

#define CMIC_CMC2_IRQ_STAT0r_CLR(r) (r).cmic_cmc2_irq_stat0[0] = 0
#define CMIC_CMC2_IRQ_STAT0r_SET(r,d) (r).cmic_cmc2_irq_stat0[0] = d
#define CMIC_CMC2_IRQ_STAT0r_GET(r) (r).cmic_cmc2_irq_stat0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_IRQ_STAT0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc2_irq_stat0[0]) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_IRQ_STAT0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 1) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 2) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 3) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 4) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 5) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_IRQ_STAT0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 6) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_IRQ_STAT0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 7) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_IRQ_STAT0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 8) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_IRQ_STAT0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 9) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_IRQ_STAT0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 10) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_IRQ_STAT0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 11) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_IRQ_STAT0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 12) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_IRQ_STAT0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 13) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC2_IRQ_STAT0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 14) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC2_IRQ_STAT0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 15) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC2_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 16) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC2_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 17) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC2_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 18) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC2_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 19) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_IRQ_STAT0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 20) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 21) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_IRQ_STAT0r_SW_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 22) & 0xf)
#define CMIC_CMC2_IRQ_STAT0r_SW_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC2_IRQ_STAT0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 26) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_IRQ_STAT0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 27) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_IRQ_STAT0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 28) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_IRQ_STAT0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 29) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_IRQ_STAT0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat0[0]) >> 30) & 0x1)
#define CMIC_CMC2_IRQ_STAT0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat0[0]=(((r).cmic_cmc2_irq_stat0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC2_IRQ_STAT0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_IRQ_STAT1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_IRQ_STAT1r_OFFSET 0x00033404

#define CMIC_CMC2_IRQ_STAT1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_IRQ_STAT1.
 */
typedef union CMIC_CMC2_IRQ_STAT1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_irq_stat1[1];
	uint32_t _cmic_cmc2_irq_stat1;
} CMIC_CMC2_IRQ_STAT1r_t;

#define CMIC_CMC2_IRQ_STAT1r_CLR(r) (r).cmic_cmc2_irq_stat1[0] = 0
#define CMIC_CMC2_IRQ_STAT1r_SET(r,d) (r).cmic_cmc2_irq_stat1[0] = d
#define CMIC_CMC2_IRQ_STAT1r_GET(r) (r).cmic_cmc2_irq_stat1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_IRQ_STAT1r_I2C_INTRf_GET(r) (((r).cmic_cmc2_irq_stat1[0]) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_I2C_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 1) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_IRQ_STAT1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 2) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 3) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 4) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_IRQ_STAT1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 5) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_IRQ_STAT1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 6) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_IRQ_STAT1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 7) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_IRQ_STAT1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 8) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_IRQ_STAT1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 9) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_IRQ_STAT1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 10) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_IRQ_STAT1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 11) & 0xff)
#define CMIC_CMC2_IRQ_STAT1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC2_IRQ_STAT1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 19) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_IRQ_STAT1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 20) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_IRQ_STAT1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 21) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_IRQ_STAT1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 22) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC2_IRQ_STAT1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 23) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC2_IRQ_STAT1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 24) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_IRQ_STAT1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 25) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC2_IRQ_STAT1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 26) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 27) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_IRQ_STAT1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 28) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_IRQ_STAT1r_SER_INTRf_GET(r) ((((r).cmic_cmc2_irq_stat1[0]) >> 29) & 0x1)
#define CMIC_CMC2_IRQ_STAT1r_SER_INTRf_SET(r,f) (r).cmic_cmc2_irq_stat1[0]=(((r).cmic_cmc2_irq_stat1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC2_IRQ_STAT1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_IRQ_STAT2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_IRQ_STAT2r_OFFSET 0x00033408

#define CMIC_CMC2_IRQ_STAT2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_IRQ_STAT2.
 */
typedef union CMIC_CMC2_IRQ_STAT2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_irq_stat2[1];
	uint32_t _cmic_cmc2_irq_stat2;
} CMIC_CMC2_IRQ_STAT2r_t;

#define CMIC_CMC2_IRQ_STAT2r_CLR(r) (r).cmic_cmc2_irq_stat2[0] = 0
#define CMIC_CMC2_IRQ_STAT2r_SET(r,d) (r).cmic_cmc2_irq_stat2[0] = d
#define CMIC_CMC2_IRQ_STAT2r_GET(r) (r).cmic_cmc2_irq_stat2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_GET(r) ((r).cmic_cmc2_irq_stat2[0])
#define CMIC_CMC2_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_SET(r,f) (r).cmic_cmc2_irq_stat2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_IRQ_STAT2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_IRQ_STAT3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_IRQ_STAT3r_OFFSET 0x0003340c

#define CMIC_CMC2_IRQ_STAT3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_IRQ_STAT3.
 */
typedef union CMIC_CMC2_IRQ_STAT3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_irq_stat3[1];
	uint32_t _cmic_cmc2_irq_stat3;
} CMIC_CMC2_IRQ_STAT3r_t;

#define CMIC_CMC2_IRQ_STAT3r_CLR(r) (r).cmic_cmc2_irq_stat3[0] = 0
#define CMIC_CMC2_IRQ_STAT3r_SET(r,d) (r).cmic_cmc2_irq_stat3[0] = d
#define CMIC_CMC2_IRQ_STAT3r_GET(r) (r).cmic_cmc2_irq_stat3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc2_irq_stat3[0])
#define CMIC_CMC2_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc2_irq_stat3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_IRQ_STAT3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_IRQ_STAT4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_IRQ_STAT4r_OFFSET 0x00033410

#define CMIC_CMC2_IRQ_STAT4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_IRQ_STAT4.
 */
typedef union CMIC_CMC2_IRQ_STAT4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_irq_stat4[1];
	uint32_t _cmic_cmc2_irq_stat4;
} CMIC_CMC2_IRQ_STAT4r_t;

#define CMIC_CMC2_IRQ_STAT4r_CLR(r) (r).cmic_cmc2_irq_stat4[0] = 0
#define CMIC_CMC2_IRQ_STAT4r_SET(r,d) (r).cmic_cmc2_irq_stat4[0] = d
#define CMIC_CMC2_IRQ_STAT4r_GET(r) (r).cmic_cmc2_irq_stat4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc2_irq_stat4[0])
#define CMIC_CMC2_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc2_irq_stat4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_IRQ_STAT4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_IRQ_STAT5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_IRQ_STAT5r_OFFSET 0x000334b0

#define CMIC_CMC2_IRQ_STAT5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_IRQ_STAT5.
 */
typedef union CMIC_CMC2_IRQ_STAT5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_irq_stat5[1];
	uint32_t _cmic_cmc2_irq_stat5;
} CMIC_CMC2_IRQ_STAT5r_t;

#define CMIC_CMC2_IRQ_STAT5r_CLR(r) (r).cmic_cmc2_irq_stat5[0] = 0
#define CMIC_CMC2_IRQ_STAT5r_SET(r,d) (r).cmic_cmc2_irq_stat5[0] = d
#define CMIC_CMC2_IRQ_STAT5r_GET(r) (r).cmic_cmc2_irq_stat5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc2_irq_stat5[0])
#define CMIC_CMC2_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc2_irq_stat5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_IRQ_STAT5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_IRQ_STAT6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_IRQ_STAT6r_OFFSET 0x000334b4

#define CMIC_CMC2_IRQ_STAT6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_IRQ_STAT6.
 */
typedef union CMIC_CMC2_IRQ_STAT6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_irq_stat6[1];
	uint32_t _cmic_cmc2_irq_stat6;
} CMIC_CMC2_IRQ_STAT6r_t;

#define CMIC_CMC2_IRQ_STAT6r_CLR(r) (r).cmic_cmc2_irq_stat6[0] = 0
#define CMIC_CMC2_IRQ_STAT6r_SET(r,d) (r).cmic_cmc2_irq_stat6[0] = d
#define CMIC_CMC2_IRQ_STAT6r_GET(r) (r).cmic_cmc2_irq_stat6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc2_irq_stat6[0])
#define CMIC_CMC2_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc2_irq_stat6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_IRQ_STAT6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_MIIM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_MIIM_ADDRESSr_OFFSET 0x00033088

#define CMIC_CMC2_MIIM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_MIIM_ADDRESS.
 */
typedef union CMIC_CMC2_MIIM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_miim_address[1];
	uint32_t _cmic_cmc2_miim_address;
} CMIC_CMC2_MIIM_ADDRESSr_t;

#define CMIC_CMC2_MIIM_ADDRESSr_CLR(r) (r).cmic_cmc2_miim_address[0] = 0
#define CMIC_CMC2_MIIM_ADDRESSr_SET(r,d) (r).cmic_cmc2_miim_address[0] = d
#define CMIC_CMC2_MIIM_ADDRESSr_GET(r) (r).cmic_cmc2_miim_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_MIIM_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_cmc2_miim_address[0]) & 0xffff)
#define CMIC_CMC2_MIIM_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_cmc2_miim_address[0]=(((r).cmic_cmc2_miim_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC2_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_cmc2_miim_address[0]) >> 16) & 0x1f)
#define CMIC_CMC2_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_cmc2_miim_address[0]=(((r).cmic_cmc2_miim_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))

/*******************************************************************************
 * End of 'CMIC_CMC2_MIIM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_MIIM_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_MIIM_CTRLr_OFFSET 0x0003308c

#define CMIC_CMC2_MIIM_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_MIIM_CTRL.
 */
typedef union CMIC_CMC2_MIIM_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_miim_ctrl[1];
	uint32_t _cmic_cmc2_miim_ctrl;
} CMIC_CMC2_MIIM_CTRLr_t;

#define CMIC_CMC2_MIIM_CTRLr_CLR(r) (r).cmic_cmc2_miim_ctrl[0] = 0
#define CMIC_CMC2_MIIM_CTRLr_SET(r,d) (r).cmic_cmc2_miim_ctrl[0] = d
#define CMIC_CMC2_MIIM_CTRLr_GET(r) (r).cmic_cmc2_miim_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_MIIM_CTRLr_MIIM_WR_STARTf_GET(r) (((r).cmic_cmc2_miim_ctrl[0]) & 0x1)
#define CMIC_CMC2_MIIM_CTRLr_MIIM_WR_STARTf_SET(r,f) (r).cmic_cmc2_miim_ctrl[0]=(((r).cmic_cmc2_miim_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_MIIM_CTRLr_MIIM_RD_STARTf_GET(r) ((((r).cmic_cmc2_miim_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC2_MIIM_CTRLr_MIIM_RD_STARTf_SET(r,f) (r).cmic_cmc2_miim_ctrl[0]=(((r).cmic_cmc2_miim_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC2_MIIM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_MIIM_PARAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_MIIM_PARAMr_OFFSET 0x00033080

#define CMIC_CMC2_MIIM_PARAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_MIIM_PARAM.
 */
typedef union CMIC_CMC2_MIIM_PARAMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_miim_param[1];
	uint32_t _cmic_cmc2_miim_param;
} CMIC_CMC2_MIIM_PARAMr_t;

#define CMIC_CMC2_MIIM_PARAMr_CLR(r) (r).cmic_cmc2_miim_param[0] = 0
#define CMIC_CMC2_MIIM_PARAMr_SET(r,d) (r).cmic_cmc2_miim_param[0] = d
#define CMIC_CMC2_MIIM_PARAMr_GET(r) (r).cmic_cmc2_miim_param[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_MIIM_PARAMr_PHY_DATAf_GET(r) (((r).cmic_cmc2_miim_param[0]) & 0xffff)
#define CMIC_CMC2_MIIM_PARAMr_PHY_DATAf_SET(r,f) (r).cmic_cmc2_miim_param[0]=(((r).cmic_cmc2_miim_param[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC2_MIIM_PARAMr_PHY_IDf_GET(r) ((((r).cmic_cmc2_miim_param[0]) >> 16) & 0x1f)
#define CMIC_CMC2_MIIM_PARAMr_PHY_IDf_SET(r,f) (r).cmic_cmc2_miim_param[0]=(((r).cmic_cmc2_miim_param[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_CMC2_MIIM_PARAMr_C45_SELf_GET(r) ((((r).cmic_cmc2_miim_param[0]) >> 21) & 0x1)
#define CMIC_CMC2_MIIM_PARAMr_C45_SELf_SET(r,f) (r).cmic_cmc2_miim_param[0]=(((r).cmic_cmc2_miim_param[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_MIIM_PARAMr_BUS_IDf_GET(r) ((((r).cmic_cmc2_miim_param[0]) >> 22) & 0x7)
#define CMIC_CMC2_MIIM_PARAMr_BUS_IDf_SET(r,f) (r).cmic_cmc2_miim_param[0]=(((r).cmic_cmc2_miim_param[0] & ~((uint32_t)0x7 << 22)) | ((((uint32_t)f) & 0x7) << 22))
#define CMIC_CMC2_MIIM_PARAMr_INTERNAL_SELf_GET(r) ((((r).cmic_cmc2_miim_param[0]) >> 25) & 0x1)
#define CMIC_CMC2_MIIM_PARAMr_INTERNAL_SELf_SET(r,f) (r).cmic_cmc2_miim_param[0]=(((r).cmic_cmc2_miim_param[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC2_MIIM_PARAMr_MIIM_CYCLEf_GET(r) ((((r).cmic_cmc2_miim_param[0]) >> 29) & 0x7)
#define CMIC_CMC2_MIIM_PARAMr_MIIM_CYCLEf_SET(r,f) (r).cmic_cmc2_miim_param[0]=(((r).cmic_cmc2_miim_param[0] & ~((uint32_t)0x7 << 29)) | ((((uint32_t)f) & 0x7) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC2_MIIM_PARAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_MIIM_READ_DATA
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_MIIM_READ_DATAr_OFFSET 0x00033084

#define CMIC_CMC2_MIIM_READ_DATAr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_MIIM_READ_DATA.
 */
typedef union CMIC_CMC2_MIIM_READ_DATAr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_miim_read_data[1];
	uint32_t _cmic_cmc2_miim_read_data;
} CMIC_CMC2_MIIM_READ_DATAr_t;

#define CMIC_CMC2_MIIM_READ_DATAr_CLR(r) (r).cmic_cmc2_miim_read_data[0] = 0
#define CMIC_CMC2_MIIM_READ_DATAr_SET(r,d) (r).cmic_cmc2_miim_read_data[0] = d
#define CMIC_CMC2_MIIM_READ_DATAr_GET(r) (r).cmic_cmc2_miim_read_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_MIIM_READ_DATAr_DATAf_GET(r) (((r).cmic_cmc2_miim_read_data[0]) & 0xffff)
#define CMIC_CMC2_MIIM_READ_DATAr_DATAf_SET(r,f) (r).cmic_cmc2_miim_read_data[0]=(((r).cmic_cmc2_miim_read_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_CMC2_MIIM_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_MIIM_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_MIIM_STATr_OFFSET 0x00033090

#define CMIC_CMC2_MIIM_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_MIIM_STAT.
 */
typedef union CMIC_CMC2_MIIM_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_miim_stat[1];
	uint32_t _cmic_cmc2_miim_stat;
} CMIC_CMC2_MIIM_STATr_t;

#define CMIC_CMC2_MIIM_STATr_CLR(r) (r).cmic_cmc2_miim_stat[0] = 0
#define CMIC_CMC2_MIIM_STATr_SET(r,d) (r).cmic_cmc2_miim_stat[0] = d
#define CMIC_CMC2_MIIM_STATr_GET(r) (r).cmic_cmc2_miim_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_MIIM_STATr_MIIM_OPN_DONEf_GET(r) (((r).cmic_cmc2_miim_stat[0]) & 0x1)
#define CMIC_CMC2_MIIM_STATr_MIIM_OPN_DONEf_SET(r,f) (r).cmic_cmc2_miim_stat[0]=(((r).cmic_cmc2_miim_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC2_MIIM_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PCIE_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PCIE_IRQ_MASK0r_OFFSET 0x00033414

#define CMIC_CMC2_PCIE_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PCIE_IRQ_MASK0.
 */
typedef union CMIC_CMC2_PCIE_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pcie_irq_mask0[1];
	uint32_t _cmic_cmc2_pcie_irq_mask0;
} CMIC_CMC2_PCIE_IRQ_MASK0r_t;

#define CMIC_CMC2_PCIE_IRQ_MASK0r_CLR(r) (r).cmic_cmc2_pcie_irq_mask0[0] = 0
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SET(r,d) (r).cmic_cmc2_pcie_irq_mask0[0] = d
#define CMIC_CMC2_PCIE_IRQ_MASK0r_GET(r) (r).cmic_cmc2_pcie_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc2_pcie_irq_mask0[0]) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask0[0]=(((r).cmic_cmc2_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC2_PCIE_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PCIE_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PCIE_IRQ_MASK1r_OFFSET 0x00033418

#define CMIC_CMC2_PCIE_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PCIE_IRQ_MASK1.
 */
typedef union CMIC_CMC2_PCIE_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pcie_irq_mask1[1];
	uint32_t _cmic_cmc2_pcie_irq_mask1;
} CMIC_CMC2_PCIE_IRQ_MASK1r_t;

#define CMIC_CMC2_PCIE_IRQ_MASK1r_CLR(r) (r).cmic_cmc2_pcie_irq_mask1[0] = 0
#define CMIC_CMC2_PCIE_IRQ_MASK1r_SET(r,d) (r).cmic_cmc2_pcie_irq_mask1[0] = d
#define CMIC_CMC2_PCIE_IRQ_MASK1r_GET(r) (r).cmic_cmc2_pcie_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PCIE_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc2_pcie_irq_mask1[0]) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_PCIE_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc2_pcie_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC2_PCIE_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask1[0]=(((r).cmic_cmc2_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC2_PCIE_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PCIE_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PCIE_IRQ_MASK2r_OFFSET 0x0003341c

#define CMIC_CMC2_PCIE_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PCIE_IRQ_MASK2.
 */
typedef union CMIC_CMC2_PCIE_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pcie_irq_mask2[1];
	uint32_t _cmic_cmc2_pcie_irq_mask2;
} CMIC_CMC2_PCIE_IRQ_MASK2r_t;

#define CMIC_CMC2_PCIE_IRQ_MASK2r_CLR(r) (r).cmic_cmc2_pcie_irq_mask2[0] = 0
#define CMIC_CMC2_PCIE_IRQ_MASK2r_SET(r,d) (r).cmic_cmc2_pcie_irq_mask2[0] = d
#define CMIC_CMC2_PCIE_IRQ_MASK2r_GET(r) (r).cmic_cmc2_pcie_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PCIE_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc2_pcie_irq_mask2[0])
#define CMIC_CMC2_PCIE_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PCIE_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PCIE_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PCIE_IRQ_MASK3r_OFFSET 0x00033420

#define CMIC_CMC2_PCIE_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PCIE_IRQ_MASK3.
 */
typedef union CMIC_CMC2_PCIE_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pcie_irq_mask3[1];
	uint32_t _cmic_cmc2_pcie_irq_mask3;
} CMIC_CMC2_PCIE_IRQ_MASK3r_t;

#define CMIC_CMC2_PCIE_IRQ_MASK3r_CLR(r) (r).cmic_cmc2_pcie_irq_mask3[0] = 0
#define CMIC_CMC2_PCIE_IRQ_MASK3r_SET(r,d) (r).cmic_cmc2_pcie_irq_mask3[0] = d
#define CMIC_CMC2_PCIE_IRQ_MASK3r_GET(r) (r).cmic_cmc2_pcie_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PCIE_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc2_pcie_irq_mask3[0])
#define CMIC_CMC2_PCIE_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PCIE_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PCIE_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PCIE_IRQ_MASK4r_OFFSET 0x00033424

#define CMIC_CMC2_PCIE_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PCIE_IRQ_MASK4.
 */
typedef union CMIC_CMC2_PCIE_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pcie_irq_mask4[1];
	uint32_t _cmic_cmc2_pcie_irq_mask4;
} CMIC_CMC2_PCIE_IRQ_MASK4r_t;

#define CMIC_CMC2_PCIE_IRQ_MASK4r_CLR(r) (r).cmic_cmc2_pcie_irq_mask4[0] = 0
#define CMIC_CMC2_PCIE_IRQ_MASK4r_SET(r,d) (r).cmic_cmc2_pcie_irq_mask4[0] = d
#define CMIC_CMC2_PCIE_IRQ_MASK4r_GET(r) (r).cmic_cmc2_pcie_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PCIE_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc2_pcie_irq_mask4[0])
#define CMIC_CMC2_PCIE_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PCIE_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PCIE_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PCIE_IRQ_MASK5r_OFFSET 0x000334b8

#define CMIC_CMC2_PCIE_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PCIE_IRQ_MASK5.
 */
typedef union CMIC_CMC2_PCIE_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pcie_irq_mask5[1];
	uint32_t _cmic_cmc2_pcie_irq_mask5;
} CMIC_CMC2_PCIE_IRQ_MASK5r_t;

#define CMIC_CMC2_PCIE_IRQ_MASK5r_CLR(r) (r).cmic_cmc2_pcie_irq_mask5[0] = 0
#define CMIC_CMC2_PCIE_IRQ_MASK5r_SET(r,d) (r).cmic_cmc2_pcie_irq_mask5[0] = d
#define CMIC_CMC2_PCIE_IRQ_MASK5r_GET(r) (r).cmic_cmc2_pcie_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PCIE_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc2_pcie_irq_mask5[0])
#define CMIC_CMC2_PCIE_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PCIE_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PCIE_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PCIE_IRQ_MASK6r_OFFSET 0x000334bc

#define CMIC_CMC2_PCIE_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PCIE_IRQ_MASK6.
 */
typedef union CMIC_CMC2_PCIE_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pcie_irq_mask6[1];
	uint32_t _cmic_cmc2_pcie_irq_mask6;
} CMIC_CMC2_PCIE_IRQ_MASK6r_t;

#define CMIC_CMC2_PCIE_IRQ_MASK6r_CLR(r) (r).cmic_cmc2_pcie_irq_mask6[0] = 0
#define CMIC_CMC2_PCIE_IRQ_MASK6r_SET(r,d) (r).cmic_cmc2_pcie_irq_mask6[0] = d
#define CMIC_CMC2_PCIE_IRQ_MASK6r_GET(r) (r).cmic_cmc2_pcie_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PCIE_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc2_pcie_irq_mask6[0])
#define CMIC_CMC2_PCIE_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc2_pcie_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PCIE_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PCIE_MISCEL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PCIE_MISCELr_OFFSET 0x00033470

#define CMIC_CMC2_PCIE_MISCELr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PCIE_MISCEL.
 */
typedef union CMIC_CMC2_PCIE_MISCELr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pcie_miscel[1];
	uint32_t _cmic_cmc2_pcie_miscel;
} CMIC_CMC2_PCIE_MISCELr_t;

#define CMIC_CMC2_PCIE_MISCELr_CLR(r) (r).cmic_cmc2_pcie_miscel[0] = 0
#define CMIC_CMC2_PCIE_MISCELr_SET(r,d) (r).cmic_cmc2_pcie_miscel[0] = d
#define CMIC_CMC2_PCIE_MISCELr_GET(r) (r).cmic_cmc2_pcie_miscel[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PCIE_MISCELr_MSI_PACING_DELAYf_GET(r) (((r).cmic_cmc2_pcie_miscel[0]) & 0xf)
#define CMIC_CMC2_PCIE_MISCELr_MSI_PACING_DELAYf_SET(r,f) (r).cmic_cmc2_pcie_miscel[0]=(((r).cmic_cmc2_pcie_miscel[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC2_PCIE_MISCELr_ENABLE_MSIf_GET(r) ((((r).cmic_cmc2_pcie_miscel[0]) >> 4) & 0x1)
#define CMIC_CMC2_PCIE_MISCELr_ENABLE_MSIf_SET(r,f) (r).cmic_cmc2_pcie_miscel[0]=(((r).cmic_cmc2_pcie_miscel[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_PCIE_MISCELr_MSI_PACING_DELAY_GRANULARITYf_GET(r) ((((r).cmic_cmc2_pcie_miscel[0]) >> 5) & 0x7)
#define CMIC_CMC2_PCIE_MISCELr_MSI_PACING_DELAY_GRANULARITYf_SET(r,f) (r).cmic_cmc2_pcie_miscel[0]=(((r).cmic_cmc2_pcie_miscel[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define CMIC_CMC2_PCIE_MISCELr_MSI_ADDR_SELf_GET(r) ((((r).cmic_cmc2_pcie_miscel[0]) >> 8) & 0x1)
#define CMIC_CMC2_PCIE_MISCELr_MSI_ADDR_SELf_SET(r,f) (r).cmic_cmc2_pcie_miscel[0]=(((r).cmic_cmc2_pcie_miscel[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC2_PCIE_MISCELr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_CH0_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_CH0_RXPKTr_OFFSET 0x00033480

#define CMIC_CMC2_PKT_COUNT_CH0_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_CH0_RXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_CH0_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_ch0_rxpkt[1];
	uint32_t _cmic_cmc2_pkt_count_ch0_rxpkt;
} CMIC_CMC2_PKT_COUNT_CH0_RXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_CH0_RXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_ch0_rxpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_CH0_RXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_ch0_rxpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_CH0_RXPKTr_GET(r) (r).cmic_cmc2_pkt_count_ch0_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_CH0_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_ch0_rxpkt[0])
#define CMIC_CMC2_PKT_COUNT_CH0_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_ch0_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_CH0_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_CH0_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_CH0_TXPKTr_OFFSET 0x00033484

#define CMIC_CMC2_PKT_COUNT_CH0_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_CH0_TXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_CH0_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_ch0_txpkt[1];
	uint32_t _cmic_cmc2_pkt_count_ch0_txpkt;
} CMIC_CMC2_PKT_COUNT_CH0_TXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_CH0_TXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_ch0_txpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_CH0_TXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_ch0_txpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_CH0_TXPKTr_GET(r) (r).cmic_cmc2_pkt_count_ch0_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_CH0_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_ch0_txpkt[0])
#define CMIC_CMC2_PKT_COUNT_CH0_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_ch0_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_CH0_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_CH1_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_CH1_RXPKTr_OFFSET 0x00033488

#define CMIC_CMC2_PKT_COUNT_CH1_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_CH1_RXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_CH1_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_ch1_rxpkt[1];
	uint32_t _cmic_cmc2_pkt_count_ch1_rxpkt;
} CMIC_CMC2_PKT_COUNT_CH1_RXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_CH1_RXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_ch1_rxpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_CH1_RXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_ch1_rxpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_CH1_RXPKTr_GET(r) (r).cmic_cmc2_pkt_count_ch1_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_CH1_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_ch1_rxpkt[0])
#define CMIC_CMC2_PKT_COUNT_CH1_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_ch1_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_CH1_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_CH1_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_CH1_TXPKTr_OFFSET 0x0003348c

#define CMIC_CMC2_PKT_COUNT_CH1_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_CH1_TXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_CH1_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_ch1_txpkt[1];
	uint32_t _cmic_cmc2_pkt_count_ch1_txpkt;
} CMIC_CMC2_PKT_COUNT_CH1_TXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_CH1_TXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_ch1_txpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_CH1_TXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_ch1_txpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_CH1_TXPKTr_GET(r) (r).cmic_cmc2_pkt_count_ch1_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_CH1_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_ch1_txpkt[0])
#define CMIC_CMC2_PKT_COUNT_CH1_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_ch1_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_CH1_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_CH2_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_CH2_RXPKTr_OFFSET 0x00033490

#define CMIC_CMC2_PKT_COUNT_CH2_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_CH2_RXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_CH2_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_ch2_rxpkt[1];
	uint32_t _cmic_cmc2_pkt_count_ch2_rxpkt;
} CMIC_CMC2_PKT_COUNT_CH2_RXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_CH2_RXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_ch2_rxpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_CH2_RXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_ch2_rxpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_CH2_RXPKTr_GET(r) (r).cmic_cmc2_pkt_count_ch2_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_CH2_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_ch2_rxpkt[0])
#define CMIC_CMC2_PKT_COUNT_CH2_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_ch2_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_CH2_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_CH2_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_CH2_TXPKTr_OFFSET 0x00033494

#define CMIC_CMC2_PKT_COUNT_CH2_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_CH2_TXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_CH2_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_ch2_txpkt[1];
	uint32_t _cmic_cmc2_pkt_count_ch2_txpkt;
} CMIC_CMC2_PKT_COUNT_CH2_TXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_CH2_TXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_ch2_txpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_CH2_TXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_ch2_txpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_CH2_TXPKTr_GET(r) (r).cmic_cmc2_pkt_count_ch2_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_CH2_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_ch2_txpkt[0])
#define CMIC_CMC2_PKT_COUNT_CH2_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_ch2_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_CH2_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_CH3_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_CH3_RXPKTr_OFFSET 0x00033498

#define CMIC_CMC2_PKT_COUNT_CH3_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_CH3_RXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_CH3_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_ch3_rxpkt[1];
	uint32_t _cmic_cmc2_pkt_count_ch3_rxpkt;
} CMIC_CMC2_PKT_COUNT_CH3_RXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_CH3_RXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_ch3_rxpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_CH3_RXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_ch3_rxpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_CH3_RXPKTr_GET(r) (r).cmic_cmc2_pkt_count_ch3_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_CH3_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_ch3_rxpkt[0])
#define CMIC_CMC2_PKT_COUNT_CH3_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_ch3_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_CH3_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_CH3_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_CH3_TXPKTr_OFFSET 0x0003349c

#define CMIC_CMC2_PKT_COUNT_CH3_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_CH3_TXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_CH3_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_ch3_txpkt[1];
	uint32_t _cmic_cmc2_pkt_count_ch3_txpkt;
} CMIC_CMC2_PKT_COUNT_CH3_TXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_CH3_TXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_ch3_txpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_CH3_TXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_ch3_txpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_CH3_TXPKTr_GET(r) (r).cmic_cmc2_pkt_count_ch3_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_CH3_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_ch3_txpkt[0])
#define CMIC_CMC2_PKT_COUNT_CH3_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_ch3_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_CH3_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_RXPKTr_OFFSET 0x000334a0

#define CMIC_CMC2_PKT_COUNT_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_RXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_rxpkt[1];
	uint32_t _cmic_cmc2_pkt_count_rxpkt;
} CMIC_CMC2_PKT_COUNT_RXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_RXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_rxpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_RXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_rxpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_RXPKTr_GET(r) (r).cmic_cmc2_pkt_count_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_rxpkt[0])
#define CMIC_CMC2_PKT_COUNT_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PKT_COUNT_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PKT_COUNT_TXPKTr_OFFSET 0x000334a4

#define CMIC_CMC2_PKT_COUNT_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PKT_COUNT_TXPKT.
 */
typedef union CMIC_CMC2_PKT_COUNT_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_pkt_count_txpkt[1];
	uint32_t _cmic_cmc2_pkt_count_txpkt;
} CMIC_CMC2_PKT_COUNT_TXPKTr_t;

#define CMIC_CMC2_PKT_COUNT_TXPKTr_CLR(r) (r).cmic_cmc2_pkt_count_txpkt[0] = 0
#define CMIC_CMC2_PKT_COUNT_TXPKTr_SET(r,d) (r).cmic_cmc2_pkt_count_txpkt[0] = d
#define CMIC_CMC2_PKT_COUNT_TXPKTr_GET(r) (r).cmic_cmc2_pkt_count_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PKT_COUNT_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc2_pkt_count_txpkt[0])
#define CMIC_CMC2_PKT_COUNT_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc2_pkt_count_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PKT_COUNT_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PROGRAMMABLE_COS_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK0r_OFFSET 0x0003319c

#define CMIC_CMC2_PROGRAMMABLE_COS_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PROGRAMMABLE_COS_MASK0.
 */
typedef union CMIC_CMC2_PROGRAMMABLE_COS_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_programmable_cos_mask0[1];
	uint32_t _cmic_cmc2_programmable_cos_mask0;
} CMIC_CMC2_PROGRAMMABLE_COS_MASK0r_t;

#define CMIC_CMC2_PROGRAMMABLE_COS_MASK0r_CLR(r) (r).cmic_cmc2_programmable_cos_mask0[0] = 0
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK0r_SET(r,d) (r).cmic_cmc2_programmable_cos_mask0[0] = d
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK0r_GET(r) (r).cmic_cmc2_programmable_cos_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK0r_COS_MASKf_GET(r) ((r).cmic_cmc2_programmable_cos_mask0[0])
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK0r_COS_MASKf_SET(r,f) (r).cmic_cmc2_programmable_cos_mask0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PROGRAMMABLE_COS_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_PROGRAMMABLE_COS_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK1r_OFFSET 0x000331a0

#define CMIC_CMC2_PROGRAMMABLE_COS_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_PROGRAMMABLE_COS_MASK1.
 */
typedef union CMIC_CMC2_PROGRAMMABLE_COS_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_programmable_cos_mask1[1];
	uint32_t _cmic_cmc2_programmable_cos_mask1;
} CMIC_CMC2_PROGRAMMABLE_COS_MASK1r_t;

#define CMIC_CMC2_PROGRAMMABLE_COS_MASK1r_CLR(r) (r).cmic_cmc2_programmable_cos_mask1[0] = 0
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK1r_SET(r,d) (r).cmic_cmc2_programmable_cos_mask1[0] = d
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK1r_GET(r) (r).cmic_cmc2_programmable_cos_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK1r_COS_MASKf_GET(r) ((r).cmic_cmc2_programmable_cos_mask1[0])
#define CMIC_CMC2_PROGRAMMABLE_COS_MASK1r_COS_MASKf_SET(r,f) (r).cmic_cmc2_programmable_cos_mask1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_PROGRAMMABLE_COS_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_RCPU_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_RCPU_IRQ_MASK0r_OFFSET 0x00033450

#define CMIC_CMC2_RCPU_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_RCPU_IRQ_MASK0.
 */
typedef union CMIC_CMC2_RCPU_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_rcpu_irq_mask0[1];
	uint32_t _cmic_cmc2_rcpu_irq_mask0;
} CMIC_CMC2_RCPU_IRQ_MASK0r_t;

#define CMIC_CMC2_RCPU_IRQ_MASK0r_CLR(r) (r).cmic_cmc2_rcpu_irq_mask0[0] = 0
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SET(r,d) (r).cmic_cmc2_rcpu_irq_mask0[0] = d
#define CMIC_CMC2_RCPU_IRQ_MASK0r_GET(r) (r).cmic_cmc2_rcpu_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc2_rcpu_irq_mask0[0]) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_rcpu_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC2_RCPU_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_rcpu_irq_mask0[0]=(((r).cmic_cmc2_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC2_RCPU_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_OFFSET 0x00033600

#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_CONTROL.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_control[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_control;
} CMIC_CMC2_SBUSDMA_CH0_CONTROLr_t;

#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_control[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_control[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_GET(r) (r).cmic_cmc2_sbusdma_ch0_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_STARTf_GET(r) (((r).cmic_cmc2_sbusdma_ch0_control[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_control[0]=(((r).cmic_cmc2_sbusdma_ch0_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_control[0]=(((r).cmic_cmc2_sbusdma_ch0_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_control[0]) >> 2) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_control[0]=(((r).cmic_cmc2_sbusdma_ch0_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_control[0]) >> 3) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_control[0]=(((r).cmic_cmc2_sbusdma_ch0_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_COUNTr_OFFSET 0x00033608

#define CMIC_CMC2_SBUSDMA_CH0_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_COUNT.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_count[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_count;
} CMIC_CMC2_SBUSDMA_CH0_COUNTr_t;

#define CMIC_CMC2_SBUSDMA_CH0_COUNTr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_count[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_COUNTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_count[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_COUNTr_GET(r) (r).cmic_cmc2_sbusdma_ch0_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_COUNTr_COUNTf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_count[0])
#define CMIC_CMC2_SBUSDMA_CH0_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr_OFFSET 0x00033628

#define CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_cur_desc_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_cur_desc_address;
} CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_cur_desc_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_cur_desc_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_cur_desc_address[0])
#define CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_OFFSET 0x00033620

#define CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_cur_hostmem_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_cur_hostmem_address;
} CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_cur_hostmem_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_cur_hostmem_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_cur_hostmem_address[0])
#define CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x00033630

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_count;
} CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_count[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_count[0])
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x00033638

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x0003363c

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_opcode;
} CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_opcode[0])
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x0003362c

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_request;
} CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_request[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_request[0])
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x00033634

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_OFFSET 0x00033624

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_cur_sbus_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_cur_sbus_address;
} CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbus_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_cur_sbus_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_cur_sbus_address[0])
#define CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr_OFFSET 0x00033618

#define CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_desc_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_desc_start_address;
} CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_desc_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_desc_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_desc_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_OFFSET 0x00033614

#define CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_hostmem_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_hostmem_start_address;
} CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_hostmem_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_hostmem_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_hostmem_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr_OFFSET 0x000336fc

#define CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_ITER_COUNT.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_iter_count[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_iter_count;
} CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr_t;

#define CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_iter_count[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_iter_count[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr_GET(r) (r).cmic_cmc2_sbusdma_ch0_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_iter_count[0])
#define CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_OPCODEr_OFFSET 0x0003360c

#define CMIC_CMC2_SBUSDMA_CH0_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_OPCODE.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_opcode[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_opcode;
} CMIC_CMC2_SBUSDMA_CH0_OPCODEr_t;

#define CMIC_CMC2_SBUSDMA_CH0_OPCODEr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_opcode[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_OPCODEr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_opcode[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_OPCODEr_GET(r) (r).cmic_cmc2_sbusdma_ch0_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_opcode[0])
#define CMIC_CMC2_SBUSDMA_CH0_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_OFFSET 0x00033604

#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_REQUEST.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_request[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_request;
} CMIC_CMC2_SBUSDMA_CH0_REQUESTr_t;

#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_request[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_request[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_GET(r) (r).cmic_cmc2_sbusdma_ch0_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc2_sbusdma_ch0_request[0]) & 0x1f)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 5) & 0x1f)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 10) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 11) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 12) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 13) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 16) & 0xff)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 24) & 0x1f)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 29) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 30) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_request[0]) >> 31) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_request[0]=(((r).cmic_cmc2_sbusdma_ch0_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr_OFFSET 0x00033640

#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_sbusdma_debug[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_sbusdma_debug;
} CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr_t;

#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_sbusdma_debug[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_sbusdma_debug[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc2_sbusdma_ch0_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc2_sbusdma_ch0_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_sbusdma_debug[0]=(((r).cmic_cmc2_sbusdma_ch0_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_OFFSET 0x00033644

#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr;
} CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[0]=(((r).cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[0]=(((r).cmic_cmc2_sbusdma_ch0_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x00033648

#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_address;
} CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_address[0])
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x0003364c

#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control;
} CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch0_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr_OFFSET 0x00033610

#define CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_sbus_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_sbus_start_address;
} CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_sbus_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_sbus_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_sbus_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_OFFSET 0x0003361c

#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_STATUS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_status[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_status;
} CMIC_CMC2_SBUSDMA_CH0_STATUSr_t;

#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_status[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_status[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_GET(r) (r).cmic_cmc2_sbusdma_ch0_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_DONEf_GET(r) (((r).cmic_cmc2_sbusdma_ch0_status[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_DONEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 2) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 3) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 4) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 5) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 6) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 7) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 8) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 9) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 10) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 11) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 12) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_status[0]) >> 13) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_status[0]=(((r).cmic_cmc2_sbusdma_ch0_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_TIMERr_OFFSET 0x000336f0

#define CMIC_CMC2_SBUSDMA_CH0_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_TIMER.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_timer[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_timer;
} CMIC_CMC2_SBUSDMA_CH0_TIMERr_t;

#define CMIC_CMC2_SBUSDMA_CH0_TIMERr_CLR(r) (r).cmic_cmc2_sbusdma_ch0_timer[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_TIMERr_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_timer[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_TIMERr_GET(r) (r).cmic_cmc2_sbusdma_ch0_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_TIMERr_TIMERf_GET(r) ((r).cmic_cmc2_sbusdma_ch0_timer[0])
#define CMIC_CMC2_SBUSDMA_CH0_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_OFFSET 0x00033800

#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_tm_control_0[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_tm_control_0;
} CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_t;

#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_CLR(r) (r).cmic_cmc2_sbusdma_ch0_tm_control_0[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_tm_control_0[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_GET(r) (r).cmic_cmc2_sbusdma_ch0_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc2_sbusdma_ch0_tm_control_0[0]) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_OFFSET 0x00033804

#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_tm_control_1[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_tm_control_1;
} CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_t;

#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_CLR(r) (r).cmic_cmc2_sbusdma_ch0_tm_control_1[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_tm_control_1[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_GET(r) (r).cmic_cmc2_sbusdma_ch0_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc2_sbusdma_ch0_tm_control_1[0]) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_OFFSET 0x0003380c

#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2.
 */
typedef union CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch0_tm_control_2[1];
	uint32_t _cmic_cmc2_sbusdma_ch0_tm_control_2;
} CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_t;

#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_CLR(r) (r).cmic_cmc2_sbusdma_ch0_tm_control_2[0] = 0
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc2_sbusdma_ch0_tm_control_2[0] = d
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_GET(r) (r).cmic_cmc2_sbusdma_ch0_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc2_sbusdma_ch0_tm_control_2[0]) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch0_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch0_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch0_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH0_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_OFFSET 0x00033650

#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_CONTROL.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_control[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_control;
} CMIC_CMC2_SBUSDMA_CH1_CONTROLr_t;

#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_control[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_control[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_GET(r) (r).cmic_cmc2_sbusdma_ch1_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_STARTf_GET(r) (((r).cmic_cmc2_sbusdma_ch1_control[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_control[0]=(((r).cmic_cmc2_sbusdma_ch1_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_control[0]=(((r).cmic_cmc2_sbusdma_ch1_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_control[0]) >> 2) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_control[0]=(((r).cmic_cmc2_sbusdma_ch1_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_control[0]) >> 3) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_control[0]=(((r).cmic_cmc2_sbusdma_ch1_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_COUNTr_OFFSET 0x00033658

#define CMIC_CMC2_SBUSDMA_CH1_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_COUNT.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_count[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_count;
} CMIC_CMC2_SBUSDMA_CH1_COUNTr_t;

#define CMIC_CMC2_SBUSDMA_CH1_COUNTr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_count[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_COUNTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_count[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_COUNTr_GET(r) (r).cmic_cmc2_sbusdma_ch1_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_COUNTr_COUNTf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_count[0])
#define CMIC_CMC2_SBUSDMA_CH1_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr_OFFSET 0x00033678

#define CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_cur_desc_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_cur_desc_address;
} CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_cur_desc_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_cur_desc_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_cur_desc_address[0])
#define CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_OFFSET 0x00033670

#define CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_cur_hostmem_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_cur_hostmem_address;
} CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_cur_hostmem_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_cur_hostmem_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_cur_hostmem_address[0])
#define CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x00033680

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_count;
} CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_count[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_count[0])
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x00033688

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x0003368c

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_opcode;
} CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_opcode[0])
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x0003367c

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_request;
} CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_request[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_request[0])
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x00033684

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_OFFSET 0x00033674

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_cur_sbus_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_cur_sbus_address;
} CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbus_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_cur_sbus_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_cur_sbus_address[0])
#define CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr_OFFSET 0x00033668

#define CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_desc_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_desc_start_address;
} CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_desc_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_desc_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_desc_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_OFFSET 0x00033664

#define CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_hostmem_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_hostmem_start_address;
} CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_hostmem_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_hostmem_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_hostmem_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr_OFFSET 0x00033700

#define CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_ITER_COUNT.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_iter_count[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_iter_count;
} CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr_t;

#define CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_iter_count[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_iter_count[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr_GET(r) (r).cmic_cmc2_sbusdma_ch1_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_iter_count[0])
#define CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_OPCODEr_OFFSET 0x0003365c

#define CMIC_CMC2_SBUSDMA_CH1_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_OPCODE.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_opcode[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_opcode;
} CMIC_CMC2_SBUSDMA_CH1_OPCODEr_t;

#define CMIC_CMC2_SBUSDMA_CH1_OPCODEr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_opcode[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_OPCODEr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_opcode[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_OPCODEr_GET(r) (r).cmic_cmc2_sbusdma_ch1_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_opcode[0])
#define CMIC_CMC2_SBUSDMA_CH1_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_OFFSET 0x00033654

#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_REQUEST.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_request[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_request;
} CMIC_CMC2_SBUSDMA_CH1_REQUESTr_t;

#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_request[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_request[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_GET(r) (r).cmic_cmc2_sbusdma_ch1_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc2_sbusdma_ch1_request[0]) & 0x1f)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 5) & 0x1f)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 10) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 11) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 12) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 13) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 16) & 0xff)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 24) & 0x1f)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 29) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 30) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_request[0]) >> 31) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_request[0]=(((r).cmic_cmc2_sbusdma_ch1_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr_OFFSET 0x00033690

#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_sbusdma_debug[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_sbusdma_debug;
} CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr_t;

#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_sbusdma_debug[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_sbusdma_debug[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc2_sbusdma_ch1_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc2_sbusdma_ch1_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_sbusdma_debug[0]=(((r).cmic_cmc2_sbusdma_ch1_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_OFFSET 0x00033694

#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr;
} CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[0]=(((r).cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[0]=(((r).cmic_cmc2_sbusdma_ch1_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x00033698

#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_address;
} CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_address[0])
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x0003369c

#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control;
} CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch1_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr_OFFSET 0x00033660

#define CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_sbus_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_sbus_start_address;
} CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_sbus_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_sbus_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_sbus_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_OFFSET 0x0003366c

#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_STATUS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_status[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_status;
} CMIC_CMC2_SBUSDMA_CH1_STATUSr_t;

#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_status[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_status[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_GET(r) (r).cmic_cmc2_sbusdma_ch1_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_DONEf_GET(r) (((r).cmic_cmc2_sbusdma_ch1_status[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_DONEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 2) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 3) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 4) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 5) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 6) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 7) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 8) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 9) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 10) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 11) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 12) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_status[0]) >> 13) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_status[0]=(((r).cmic_cmc2_sbusdma_ch1_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_TIMERr_OFFSET 0x000336f4

#define CMIC_CMC2_SBUSDMA_CH1_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_TIMER.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_timer[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_timer;
} CMIC_CMC2_SBUSDMA_CH1_TIMERr_t;

#define CMIC_CMC2_SBUSDMA_CH1_TIMERr_CLR(r) (r).cmic_cmc2_sbusdma_ch1_timer[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_TIMERr_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_timer[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_TIMERr_GET(r) (r).cmic_cmc2_sbusdma_ch1_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_TIMERr_TIMERf_GET(r) ((r).cmic_cmc2_sbusdma_ch1_timer[0])
#define CMIC_CMC2_SBUSDMA_CH1_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_OFFSET 0x00033810

#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_tm_control_0[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_tm_control_0;
} CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_t;

#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_CLR(r) (r).cmic_cmc2_sbusdma_ch1_tm_control_0[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_tm_control_0[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_GET(r) (r).cmic_cmc2_sbusdma_ch1_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc2_sbusdma_ch1_tm_control_0[0]) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_OFFSET 0x00033814

#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_tm_control_1[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_tm_control_1;
} CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_t;

#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_CLR(r) (r).cmic_cmc2_sbusdma_ch1_tm_control_1[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_tm_control_1[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_GET(r) (r).cmic_cmc2_sbusdma_ch1_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc2_sbusdma_ch1_tm_control_1[0]) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_OFFSET 0x00033818

#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2.
 */
typedef union CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch1_tm_control_2[1];
	uint32_t _cmic_cmc2_sbusdma_ch1_tm_control_2;
} CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_t;

#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_CLR(r) (r).cmic_cmc2_sbusdma_ch1_tm_control_2[0] = 0
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc2_sbusdma_ch1_tm_control_2[0] = d
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_GET(r) (r).cmic_cmc2_sbusdma_ch1_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc2_sbusdma_ch1_tm_control_2[0]) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch1_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch1_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch1_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH1_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_OFFSET 0x000336a0

#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_CONTROL.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_control[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_control;
} CMIC_CMC2_SBUSDMA_CH2_CONTROLr_t;

#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_control[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_control[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_GET(r) (r).cmic_cmc2_sbusdma_ch2_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_STARTf_GET(r) (((r).cmic_cmc2_sbusdma_ch2_control[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_control[0]=(((r).cmic_cmc2_sbusdma_ch2_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_control[0]=(((r).cmic_cmc2_sbusdma_ch2_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_control[0]) >> 2) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_control[0]=(((r).cmic_cmc2_sbusdma_ch2_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_control[0]) >> 3) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_control[0]=(((r).cmic_cmc2_sbusdma_ch2_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_COUNTr_OFFSET 0x000336a8

#define CMIC_CMC2_SBUSDMA_CH2_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_COUNT.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_count[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_count;
} CMIC_CMC2_SBUSDMA_CH2_COUNTr_t;

#define CMIC_CMC2_SBUSDMA_CH2_COUNTr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_count[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_COUNTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_count[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_COUNTr_GET(r) (r).cmic_cmc2_sbusdma_ch2_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_COUNTr_COUNTf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_count[0])
#define CMIC_CMC2_SBUSDMA_CH2_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr_OFFSET 0x000336c8

#define CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_cur_desc_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_cur_desc_address;
} CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_cur_desc_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_cur_desc_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_cur_desc_address[0])
#define CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_OFFSET 0x000336c0

#define CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_cur_hostmem_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_cur_hostmem_address;
} CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_cur_hostmem_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_cur_hostmem_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_cur_hostmem_address[0])
#define CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x000336d0

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_count;
} CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_count[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_count[0])
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x000336d8

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x000336dc

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_opcode;
} CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_opcode[0])
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x000336cc

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_request;
} CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_request[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_request[0])
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x000336d4

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_OFFSET 0x000336c4

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_cur_sbus_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_cur_sbus_address;
} CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbus_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_cur_sbus_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_cur_sbus_address[0])
#define CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr_OFFSET 0x000336b8

#define CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_desc_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_desc_start_address;
} CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_desc_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_desc_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_desc_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_OFFSET 0x000336b4

#define CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_hostmem_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_hostmem_start_address;
} CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_hostmem_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_hostmem_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_hostmem_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr_OFFSET 0x00033704

#define CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_ITER_COUNT.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_iter_count[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_iter_count;
} CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr_t;

#define CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_iter_count[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_iter_count[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr_GET(r) (r).cmic_cmc2_sbusdma_ch2_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_iter_count[0])
#define CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_OPCODEr_OFFSET 0x000336ac

#define CMIC_CMC2_SBUSDMA_CH2_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_OPCODE.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_opcode[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_opcode;
} CMIC_CMC2_SBUSDMA_CH2_OPCODEr_t;

#define CMIC_CMC2_SBUSDMA_CH2_OPCODEr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_opcode[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_OPCODEr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_opcode[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_OPCODEr_GET(r) (r).cmic_cmc2_sbusdma_ch2_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_opcode[0])
#define CMIC_CMC2_SBUSDMA_CH2_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_OFFSET 0x000336a4

#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_REQUEST.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_request[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_request;
} CMIC_CMC2_SBUSDMA_CH2_REQUESTr_t;

#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_request[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_request[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_GET(r) (r).cmic_cmc2_sbusdma_ch2_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc2_sbusdma_ch2_request[0]) & 0x1f)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 5) & 0x1f)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 10) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 11) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 12) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 13) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 16) & 0xff)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 24) & 0x1f)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 29) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 30) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_request[0]) >> 31) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_request[0]=(((r).cmic_cmc2_sbusdma_ch2_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr_OFFSET 0x000336e0

#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_sbusdma_debug[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_sbusdma_debug;
} CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr_t;

#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_sbusdma_debug[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_sbusdma_debug[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc2_sbusdma_ch2_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc2_sbusdma_ch2_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_sbusdma_debug[0]=(((r).cmic_cmc2_sbusdma_ch2_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_OFFSET 0x000336e4

#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr;
} CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[0]=(((r).cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[0]=(((r).cmic_cmc2_sbusdma_ch2_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x000336e8

#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_address;
} CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_address[0])
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x000336ec

#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control;
} CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0]=(((r).cmic_cmc2_sbusdma_ch2_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr_OFFSET 0x000336b0

#define CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_sbus_start_address[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_sbus_start_address;
} CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_sbus_start_address[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_sbus_start_address[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_sbus_start_address[0])
#define CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_OFFSET 0x000336bc

#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_STATUS.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_status[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_status;
} CMIC_CMC2_SBUSDMA_CH2_STATUSr_t;

#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_status[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_status[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_GET(r) (r).cmic_cmc2_sbusdma_ch2_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_DONEf_GET(r) (((r).cmic_cmc2_sbusdma_ch2_status[0]) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_DONEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 1) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 2) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 3) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 4) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 5) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 6) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 7) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 8) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 9) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 10) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 11) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 12) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_status[0]) >> 13) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_status[0]=(((r).cmic_cmc2_sbusdma_ch2_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_TIMERr_OFFSET 0x000336f8

#define CMIC_CMC2_SBUSDMA_CH2_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_TIMER.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_timer[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_timer;
} CMIC_CMC2_SBUSDMA_CH2_TIMERr_t;

#define CMIC_CMC2_SBUSDMA_CH2_TIMERr_CLR(r) (r).cmic_cmc2_sbusdma_ch2_timer[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_TIMERr_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_timer[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_TIMERr_GET(r) (r).cmic_cmc2_sbusdma_ch2_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_TIMERr_TIMERf_GET(r) ((r).cmic_cmc2_sbusdma_ch2_timer[0])
#define CMIC_CMC2_SBUSDMA_CH2_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_OFFSET 0x0003381c

#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_tm_control_0[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_tm_control_0;
} CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_t;

#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_CLR(r) (r).cmic_cmc2_sbusdma_ch2_tm_control_0[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_tm_control_0[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_GET(r) (r).cmic_cmc2_sbusdma_ch2_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc2_sbusdma_ch2_tm_control_0[0]) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_0[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_OFFSET 0x00033820

#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_tm_control_1[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_tm_control_1;
} CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_t;

#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_CLR(r) (r).cmic_cmc2_sbusdma_ch2_tm_control_1[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_tm_control_1[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_GET(r) (r).cmic_cmc2_sbusdma_ch2_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc2_sbusdma_ch2_tm_control_1[0]) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_1[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_OFFSET 0x00033824

#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2.
 */
typedef union CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sbusdma_ch2_tm_control_2[1];
	uint32_t _cmic_cmc2_sbusdma_ch2_tm_control_2;
} CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_t;

#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_CLR(r) (r).cmic_cmc2_sbusdma_ch2_tm_control_2[0] = 0
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc2_sbusdma_ch2_tm_control_2[0] = d
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_GET(r) (r).cmic_cmc2_sbusdma_ch2_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc2_sbusdma_ch2_tm_control_2[0]) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc2_sbusdma_ch2_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc2_sbusdma_ch2_tm_control_2[0]=(((r).cmic_cmc2_sbusdma_ch2_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC2_SBUSDMA_CH2_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET 0x00033004

#define CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNT.
 */
typedef union CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_schan_ack_data_beat_count[1];
	uint32_t _cmic_cmc2_schan_ack_data_beat_count;
} CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_t;

#define CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_CLR(r) (r).cmic_cmc2_schan_ack_data_beat_count[0] = 0
#define CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_SET(r,d) (r).cmic_cmc2_schan_ack_data_beat_count[0] = d
#define CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_GET(r) (r).cmic_cmc2_schan_ack_data_beat_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_GET(r) (((r).cmic_cmc2_schan_ack_data_beat_count[0]) & 0x1f)
#define CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc2_schan_ack_data_beat_count[0]=(((r).cmic_cmc2_schan_ack_data_beat_count[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_GET(r) ((((r).cmic_cmc2_schan_ack_data_beat_count[0]) >> 5) & 0x7ffffff)
#define CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_SET(r,f) (r).cmic_cmc2_schan_ack_data_beat_count[0]=(((r).cmic_cmc2_schan_ack_data_beat_count[0] & ~((uint32_t)0x7ffffff << 5)) | ((((uint32_t)f) & 0x7ffffff) << 5))

/*******************************************************************************
 * End of 'CMIC_CMC2_SCHAN_ACK_DATA_BEAT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SCHAN_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SCHAN_CTRLr_OFFSET 0x00033000

#define CMIC_CMC2_SCHAN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SCHAN_CTRL.
 */
typedef union CMIC_CMC2_SCHAN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_schan_ctrl[1];
	uint32_t _cmic_cmc2_schan_ctrl;
} CMIC_CMC2_SCHAN_CTRLr_t;

#define CMIC_CMC2_SCHAN_CTRLr_CLR(r) (r).cmic_cmc2_schan_ctrl[0] = 0
#define CMIC_CMC2_SCHAN_CTRLr_SET(r,d) (r).cmic_cmc2_schan_ctrl[0] = d
#define CMIC_CMC2_SCHAN_CTRLr_GET(r) (r).cmic_cmc2_schan_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SCHAN_CTRLr_MSG_STARTf_GET(r) (((r).cmic_cmc2_schan_ctrl[0]) & 0x1)
#define CMIC_CMC2_SCHAN_CTRLr_MSG_STARTf_SET(r,f) (r).cmic_cmc2_schan_ctrl[0]=(((r).cmic_cmc2_schan_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SCHAN_CTRLr_MSG_DONEf_GET(r) ((((r).cmic_cmc2_schan_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC2_SCHAN_CTRLr_MSG_DONEf_SET(r,f) (r).cmic_cmc2_schan_ctrl[0]=(((r).cmic_cmc2_schan_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_SCHAN_CTRLr_ABORTf_GET(r) ((((r).cmic_cmc2_schan_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC2_SCHAN_CTRLr_ABORTf_SET(r,f) (r).cmic_cmc2_schan_ctrl[0]=(((r).cmic_cmc2_schan_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_SCHAN_CTRLr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc2_schan_ctrl[0]) >> 20) & 0x1)
#define CMIC_CMC2_SCHAN_CTRLr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc2_schan_ctrl[0]=(((r).cmic_cmc2_schan_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_SCHAN_CTRLr_NACKf_GET(r) ((((r).cmic_cmc2_schan_ctrl[0]) >> 21) & 0x1)
#define CMIC_CMC2_SCHAN_CTRLr_NACKf_SET(r,f) (r).cmic_cmc2_schan_ctrl[0]=(((r).cmic_cmc2_schan_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_SCHAN_CTRLr_TIMEOUTf_GET(r) ((((r).cmic_cmc2_schan_ctrl[0]) >> 22) & 0x1)
#define CMIC_CMC2_SCHAN_CTRLr_TIMEOUTf_SET(r,f) (r).cmic_cmc2_schan_ctrl[0]=(((r).cmic_cmc2_schan_ctrl[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC2_SCHAN_CTRLr_SCHAN_ERRORf_GET(r) ((((r).cmic_cmc2_schan_ctrl[0]) >> 23) & 0x1)
#define CMIC_CMC2_SCHAN_CTRLr_SCHAN_ERRORf_SET(r,f) (r).cmic_cmc2_schan_ctrl[0]=(((r).cmic_cmc2_schan_ctrl[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))

/*******************************************************************************
 * End of 'CMIC_CMC2_SCHAN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SCHAN_ERR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SCHAN_ERRr_OFFSET 0x00033008

#define CMIC_CMC2_SCHAN_ERRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SCHAN_ERR.
 */
typedef union CMIC_CMC2_SCHAN_ERRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_schan_err[1];
	uint32_t _cmic_cmc2_schan_err;
} CMIC_CMC2_SCHAN_ERRr_t;

#define CMIC_CMC2_SCHAN_ERRr_CLR(r) (r).cmic_cmc2_schan_err[0] = 0
#define CMIC_CMC2_SCHAN_ERRr_SET(r,d) (r).cmic_cmc2_schan_err[0] = d
#define CMIC_CMC2_SCHAN_ERRr_GET(r) (r).cmic_cmc2_schan_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SCHAN_ERRr_NACKf_GET(r) (((r).cmic_cmc2_schan_err[0]) & 0x1)
#define CMIC_CMC2_SCHAN_ERRr_NACKf_SET(r,f) (r).cmic_cmc2_schan_err[0]=(((r).cmic_cmc2_schan_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_SCHAN_ERRr_ERR_CODEf_GET(r) ((((r).cmic_cmc2_schan_err[0]) >> 4) & 0x3)
#define CMIC_CMC2_SCHAN_ERRr_ERR_CODEf_SET(r,f) (r).cmic_cmc2_schan_err[0]=(((r).cmic_cmc2_schan_err[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define CMIC_CMC2_SCHAN_ERRr_ERRBITf_GET(r) ((((r).cmic_cmc2_schan_err[0]) >> 6) & 0x1)
#define CMIC_CMC2_SCHAN_ERRr_ERRBITf_SET(r,f) (r).cmic_cmc2_schan_err[0]=(((r).cmic_cmc2_schan_err[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_SCHAN_ERRr_DATA_LENf_GET(r) ((((r).cmic_cmc2_schan_err[0]) >> 7) & 0x7f)
#define CMIC_CMC2_SCHAN_ERRr_DATA_LENf_SET(r,f) (r).cmic_cmc2_schan_err[0]=(((r).cmic_cmc2_schan_err[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define CMIC_CMC2_SCHAN_ERRr_SRC_PORTf_GET(r) ((((r).cmic_cmc2_schan_err[0]) >> 14) & 0x3f)
#define CMIC_CMC2_SCHAN_ERRr_SRC_PORTf_SET(r,f) (r).cmic_cmc2_schan_err[0]=(((r).cmic_cmc2_schan_err[0] & ~((uint32_t)0x3f << 14)) | ((((uint32_t)f) & 0x3f) << 14))
#define CMIC_CMC2_SCHAN_ERRr_DST_PORTf_GET(r) ((((r).cmic_cmc2_schan_err[0]) >> 20) & 0x3f)
#define CMIC_CMC2_SCHAN_ERRr_DST_PORTf_SET(r,f) (r).cmic_cmc2_schan_err[0]=(((r).cmic_cmc2_schan_err[0] & ~((uint32_t)0x3f << 20)) | ((((uint32_t)f) & 0x3f) << 20))
#define CMIC_CMC2_SCHAN_ERRr_OP_CODEf_GET(r) ((((r).cmic_cmc2_schan_err[0]) >> 26) & 0x3f)
#define CMIC_CMC2_SCHAN_ERRr_OP_CODEf_SET(r,f) (r).cmic_cmc2_schan_err[0]=(((r).cmic_cmc2_schan_err[0] & ~((uint32_t)0x3f << 26)) | ((((uint32_t)f) & 0x3f) << 26))

/*******************************************************************************
 * End of 'CMIC_CMC2_SCHAN_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SCHAN_MESSAGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SCHAN_MESSAGEr_OFFSET 0x0003300c

#define CMIC_CMC2_SCHAN_MESSAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SCHAN_MESSAGE.
 */
typedef union CMIC_CMC2_SCHAN_MESSAGEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_schan_message[1];
	uint32_t _cmic_cmc2_schan_message;
} CMIC_CMC2_SCHAN_MESSAGEr_t;

#define CMIC_CMC2_SCHAN_MESSAGEr_CLR(r) (r).cmic_cmc2_schan_message[0] = 0
#define CMIC_CMC2_SCHAN_MESSAGEr_SET(r,d) (r).cmic_cmc2_schan_message[0] = d
#define CMIC_CMC2_SCHAN_MESSAGEr_GET(r) (r).cmic_cmc2_schan_message[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SCHAN_MESSAGEr_DATAf_GET(r) ((r).cmic_cmc2_schan_message[0])
#define CMIC_CMC2_SCHAN_MESSAGEr_DATAf_SET(r,f) (r).cmic_cmc2_schan_message[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_SCHAN_MESSAGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_STATr_OFFSET 0x0003310c

#define CMIC_CMC2_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_STAT.
 */
typedef union CMIC_CMC2_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_stat[1];
	uint32_t _cmic_cmc2_stat;
} CMIC_CMC2_STATr_t;

#define CMIC_CMC2_STATr_CLR(r) (r).cmic_cmc2_stat[0] = 0
#define CMIC_CMC2_STATr_SET(r,d) (r).cmic_cmc2_stat[0] = d
#define CMIC_CMC2_STATr_GET(r) (r).cmic_cmc2_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_STATr_PEND_BRESP_COUNTf_GET(r) (((r).cmic_cmc2_stat[0]) & 0x7)
#define CMIC_CMC2_STATr_PEND_BRESP_COUNTf_SET(r,f) (r).cmic_cmc2_stat[0]=(((r).cmic_cmc2_stat[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*******************************************************************************
 * End of 'CMIC_CMC2_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_SW_INTR_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_SW_INTR_CONFIGr_OFFSET 0x000334a8

#define CMIC_CMC2_SW_INTR_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_SW_INTR_CONFIG.
 */
typedef union CMIC_CMC2_SW_INTR_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_sw_intr_config[1];
	uint32_t _cmic_cmc2_sw_intr_config;
} CMIC_CMC2_SW_INTR_CONFIGr_t;

#define CMIC_CMC2_SW_INTR_CONFIGr_CLR(r) (r).cmic_cmc2_sw_intr_config[0] = 0
#define CMIC_CMC2_SW_INTR_CONFIGr_SET(r,d) (r).cmic_cmc2_sw_intr_config[0] = d
#define CMIC_CMC2_SW_INTR_CONFIGr_GET(r) (r).cmic_cmc2_sw_intr_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_GET(r) (((r).cmic_cmc2_sw_intr_config[0]) & 0x3)
#define CMIC_CMC2_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_SET(r,f) (r).cmic_cmc2_sw_intr_config[0]=(((r).cmic_cmc2_sw_intr_config[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define CMIC_CMC2_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_GET(r) ((((r).cmic_cmc2_sw_intr_config[0]) >> 2) & 0x1)
#define CMIC_CMC2_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_SET(r,f) (r).cmic_cmc2_sw_intr_config[0]=(((r).cmic_cmc2_sw_intr_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC2_SW_INTR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC0_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC0_IRQ_MASK0r_OFFSET 0x00033428

#define CMIC_CMC2_UC0_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC0_IRQ_MASK0.
 */
typedef union CMIC_CMC2_UC0_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc0_irq_mask0[1];
	uint32_t _cmic_cmc2_uc0_irq_mask0;
} CMIC_CMC2_UC0_IRQ_MASK0r_t;

#define CMIC_CMC2_UC0_IRQ_MASK0r_CLR(r) (r).cmic_cmc2_uc0_irq_mask0[0] = 0
#define CMIC_CMC2_UC0_IRQ_MASK0r_SET(r,d) (r).cmic_cmc2_uc0_irq_mask0[0] = d
#define CMIC_CMC2_UC0_IRQ_MASK0r_GET(r) (r).cmic_cmc2_uc0_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC0_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc2_uc0_irq_mask0[0]) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_UC0_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_UC0_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_UC0_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_UC0_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_UC0_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_UC0_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_UC0_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_UC0_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_UC0_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC2_UC0_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC2_UC0_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask0[0]=(((r).cmic_cmc2_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC2_UC0_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC0_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC0_IRQ_MASK1r_OFFSET 0x0003342c

#define CMIC_CMC2_UC0_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC0_IRQ_MASK1.
 */
typedef union CMIC_CMC2_UC0_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc0_irq_mask1[1];
	uint32_t _cmic_cmc2_uc0_irq_mask1;
} CMIC_CMC2_UC0_IRQ_MASK1r_t;

#define CMIC_CMC2_UC0_IRQ_MASK1r_CLR(r) (r).cmic_cmc2_uc0_irq_mask1[0] = 0
#define CMIC_CMC2_UC0_IRQ_MASK1r_SET(r,d) (r).cmic_cmc2_uc0_irq_mask1[0] = d
#define CMIC_CMC2_UC0_IRQ_MASK1r_GET(r) (r).cmic_cmc2_uc0_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC0_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc2_uc0_irq_mask1[0]) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_UC0_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_UC0_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_UC0_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_UC0_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_UC0_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_UC0_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_UC0_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_UC0_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_UC0_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_UC0_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC2_UC0_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC2_UC0_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_UC0_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_UC0_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_UC0_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_UC0_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_UC0_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_UC0_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc2_uc0_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC2_UC0_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask1[0]=(((r).cmic_cmc2_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC2_UC0_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC0_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC0_IRQ_MASK2r_OFFSET 0x00033430

#define CMIC_CMC2_UC0_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC0_IRQ_MASK2.
 */
typedef union CMIC_CMC2_UC0_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc0_irq_mask2[1];
	uint32_t _cmic_cmc2_uc0_irq_mask2;
} CMIC_CMC2_UC0_IRQ_MASK2r_t;

#define CMIC_CMC2_UC0_IRQ_MASK2r_CLR(r) (r).cmic_cmc2_uc0_irq_mask2[0] = 0
#define CMIC_CMC2_UC0_IRQ_MASK2r_SET(r,d) (r).cmic_cmc2_uc0_irq_mask2[0] = d
#define CMIC_CMC2_UC0_IRQ_MASK2r_GET(r) (r).cmic_cmc2_uc0_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC0_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc2_uc0_irq_mask2[0])
#define CMIC_CMC2_UC0_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC0_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC0_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC0_IRQ_MASK3r_OFFSET 0x00033434

#define CMIC_CMC2_UC0_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC0_IRQ_MASK3.
 */
typedef union CMIC_CMC2_UC0_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc0_irq_mask3[1];
	uint32_t _cmic_cmc2_uc0_irq_mask3;
} CMIC_CMC2_UC0_IRQ_MASK3r_t;

#define CMIC_CMC2_UC0_IRQ_MASK3r_CLR(r) (r).cmic_cmc2_uc0_irq_mask3[0] = 0
#define CMIC_CMC2_UC0_IRQ_MASK3r_SET(r,d) (r).cmic_cmc2_uc0_irq_mask3[0] = d
#define CMIC_CMC2_UC0_IRQ_MASK3r_GET(r) (r).cmic_cmc2_uc0_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC0_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc2_uc0_irq_mask3[0])
#define CMIC_CMC2_UC0_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC0_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC0_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC0_IRQ_MASK4r_OFFSET 0x00033438

#define CMIC_CMC2_UC0_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC0_IRQ_MASK4.
 */
typedef union CMIC_CMC2_UC0_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc0_irq_mask4[1];
	uint32_t _cmic_cmc2_uc0_irq_mask4;
} CMIC_CMC2_UC0_IRQ_MASK4r_t;

#define CMIC_CMC2_UC0_IRQ_MASK4r_CLR(r) (r).cmic_cmc2_uc0_irq_mask4[0] = 0
#define CMIC_CMC2_UC0_IRQ_MASK4r_SET(r,d) (r).cmic_cmc2_uc0_irq_mask4[0] = d
#define CMIC_CMC2_UC0_IRQ_MASK4r_GET(r) (r).cmic_cmc2_uc0_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC0_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc2_uc0_irq_mask4[0])
#define CMIC_CMC2_UC0_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC0_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC0_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC0_IRQ_MASK5r_OFFSET 0x000334c0

#define CMIC_CMC2_UC0_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC0_IRQ_MASK5.
 */
typedef union CMIC_CMC2_UC0_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc0_irq_mask5[1];
	uint32_t _cmic_cmc2_uc0_irq_mask5;
} CMIC_CMC2_UC0_IRQ_MASK5r_t;

#define CMIC_CMC2_UC0_IRQ_MASK5r_CLR(r) (r).cmic_cmc2_uc0_irq_mask5[0] = 0
#define CMIC_CMC2_UC0_IRQ_MASK5r_SET(r,d) (r).cmic_cmc2_uc0_irq_mask5[0] = d
#define CMIC_CMC2_UC0_IRQ_MASK5r_GET(r) (r).cmic_cmc2_uc0_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC0_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc2_uc0_irq_mask5[0])
#define CMIC_CMC2_UC0_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC0_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC0_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC0_IRQ_MASK6r_OFFSET 0x000334c4

#define CMIC_CMC2_UC0_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC0_IRQ_MASK6.
 */
typedef union CMIC_CMC2_UC0_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc0_irq_mask6[1];
	uint32_t _cmic_cmc2_uc0_irq_mask6;
} CMIC_CMC2_UC0_IRQ_MASK6r_t;

#define CMIC_CMC2_UC0_IRQ_MASK6r_CLR(r) (r).cmic_cmc2_uc0_irq_mask6[0] = 0
#define CMIC_CMC2_UC0_IRQ_MASK6r_SET(r,d) (r).cmic_cmc2_uc0_irq_mask6[0] = d
#define CMIC_CMC2_UC0_IRQ_MASK6r_GET(r) (r).cmic_cmc2_uc0_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC0_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc2_uc0_irq_mask6[0])
#define CMIC_CMC2_UC0_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc2_uc0_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC0_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC1_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC1_IRQ_MASK0r_OFFSET 0x0003343c

#define CMIC_CMC2_UC1_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC1_IRQ_MASK0.
 */
typedef union CMIC_CMC2_UC1_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc1_irq_mask0[1];
	uint32_t _cmic_cmc2_uc1_irq_mask0;
} CMIC_CMC2_UC1_IRQ_MASK0r_t;

#define CMIC_CMC2_UC1_IRQ_MASK0r_CLR(r) (r).cmic_cmc2_uc1_irq_mask0[0] = 0
#define CMIC_CMC2_UC1_IRQ_MASK0r_SET(r,d) (r).cmic_cmc2_uc1_irq_mask0[0] = d
#define CMIC_CMC2_UC1_IRQ_MASK0r_GET(r) (r).cmic_cmc2_uc1_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC1_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc2_uc1_irq_mask0[0]) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_UC1_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_UC1_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_UC1_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_UC1_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_UC1_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_UC1_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_UC1_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_UC1_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_UC1_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC2_UC1_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC2_UC1_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask0[0]=(((r).cmic_cmc2_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC2_UC1_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC1_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC1_IRQ_MASK1r_OFFSET 0x00033440

#define CMIC_CMC2_UC1_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC1_IRQ_MASK1.
 */
typedef union CMIC_CMC2_UC1_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc1_irq_mask1[1];
	uint32_t _cmic_cmc2_uc1_irq_mask1;
} CMIC_CMC2_UC1_IRQ_MASK1r_t;

#define CMIC_CMC2_UC1_IRQ_MASK1r_CLR(r) (r).cmic_cmc2_uc1_irq_mask1[0] = 0
#define CMIC_CMC2_UC1_IRQ_MASK1r_SET(r,d) (r).cmic_cmc2_uc1_irq_mask1[0] = d
#define CMIC_CMC2_UC1_IRQ_MASK1r_GET(r) (r).cmic_cmc2_uc1_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC1_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc2_uc1_irq_mask1[0]) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC2_UC1_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC2_UC1_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC2_UC1_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC2_UC1_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC2_UC1_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC2_UC1_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC2_UC1_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC2_UC1_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC2_UC1_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC2_UC1_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC2_UC1_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC2_UC1_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC2_UC1_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC2_UC1_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC2_UC1_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC2_UC1_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC2_UC1_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC2_UC1_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc2_uc1_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC2_UC1_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask1[0]=(((r).cmic_cmc2_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC2_UC1_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC1_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC1_IRQ_MASK2r_OFFSET 0x00033444

#define CMIC_CMC2_UC1_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC1_IRQ_MASK2.
 */
typedef union CMIC_CMC2_UC1_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc1_irq_mask2[1];
	uint32_t _cmic_cmc2_uc1_irq_mask2;
} CMIC_CMC2_UC1_IRQ_MASK2r_t;

#define CMIC_CMC2_UC1_IRQ_MASK2r_CLR(r) (r).cmic_cmc2_uc1_irq_mask2[0] = 0
#define CMIC_CMC2_UC1_IRQ_MASK2r_SET(r,d) (r).cmic_cmc2_uc1_irq_mask2[0] = d
#define CMIC_CMC2_UC1_IRQ_MASK2r_GET(r) (r).cmic_cmc2_uc1_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC1_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc2_uc1_irq_mask2[0])
#define CMIC_CMC2_UC1_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC1_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC1_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC1_IRQ_MASK3r_OFFSET 0x00033448

#define CMIC_CMC2_UC1_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC1_IRQ_MASK3.
 */
typedef union CMIC_CMC2_UC1_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc1_irq_mask3[1];
	uint32_t _cmic_cmc2_uc1_irq_mask3;
} CMIC_CMC2_UC1_IRQ_MASK3r_t;

#define CMIC_CMC2_UC1_IRQ_MASK3r_CLR(r) (r).cmic_cmc2_uc1_irq_mask3[0] = 0
#define CMIC_CMC2_UC1_IRQ_MASK3r_SET(r,d) (r).cmic_cmc2_uc1_irq_mask3[0] = d
#define CMIC_CMC2_UC1_IRQ_MASK3r_GET(r) (r).cmic_cmc2_uc1_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC1_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc2_uc1_irq_mask3[0])
#define CMIC_CMC2_UC1_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC1_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC1_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC1_IRQ_MASK4r_OFFSET 0x0003344c

#define CMIC_CMC2_UC1_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC1_IRQ_MASK4.
 */
typedef union CMIC_CMC2_UC1_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc1_irq_mask4[1];
	uint32_t _cmic_cmc2_uc1_irq_mask4;
} CMIC_CMC2_UC1_IRQ_MASK4r_t;

#define CMIC_CMC2_UC1_IRQ_MASK4r_CLR(r) (r).cmic_cmc2_uc1_irq_mask4[0] = 0
#define CMIC_CMC2_UC1_IRQ_MASK4r_SET(r,d) (r).cmic_cmc2_uc1_irq_mask4[0] = d
#define CMIC_CMC2_UC1_IRQ_MASK4r_GET(r) (r).cmic_cmc2_uc1_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC1_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc2_uc1_irq_mask4[0])
#define CMIC_CMC2_UC1_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC1_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC1_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC1_IRQ_MASK5r_OFFSET 0x000334c8

#define CMIC_CMC2_UC1_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC1_IRQ_MASK5.
 */
typedef union CMIC_CMC2_UC1_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc1_irq_mask5[1];
	uint32_t _cmic_cmc2_uc1_irq_mask5;
} CMIC_CMC2_UC1_IRQ_MASK5r_t;

#define CMIC_CMC2_UC1_IRQ_MASK5r_CLR(r) (r).cmic_cmc2_uc1_irq_mask5[0] = 0
#define CMIC_CMC2_UC1_IRQ_MASK5r_SET(r,d) (r).cmic_cmc2_uc1_irq_mask5[0] = d
#define CMIC_CMC2_UC1_IRQ_MASK5r_GET(r) (r).cmic_cmc2_uc1_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC1_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc2_uc1_irq_mask5[0])
#define CMIC_CMC2_UC1_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC1_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC2_UC1_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC2_UC1_IRQ_MASK6r_OFFSET 0x000334cc

#define CMIC_CMC2_UC1_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC2_UC1_IRQ_MASK6.
 */
typedef union CMIC_CMC2_UC1_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc2_uc1_irq_mask6[1];
	uint32_t _cmic_cmc2_uc1_irq_mask6;
} CMIC_CMC2_UC1_IRQ_MASK6r_t;

#define CMIC_CMC2_UC1_IRQ_MASK6r_CLR(r) (r).cmic_cmc2_uc1_irq_mask6[0] = 0
#define CMIC_CMC2_UC1_IRQ_MASK6r_SET(r,d) (r).cmic_cmc2_uc1_irq_mask6[0] = d
#define CMIC_CMC2_UC1_IRQ_MASK6r_GET(r) (r).cmic_cmc2_uc1_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC2_UC1_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc2_uc1_irq_mask6[0])
#define CMIC_CMC2_UC1_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc2_uc1_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC2_UC1_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_2BIT_ECC_ERROR_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_OFFSET 0x00031454

#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_2BIT_ECC_ERROR_STATUS.
 */
typedef union CMIC_CMC_2BIT_ECC_ERROR_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_2bit_ecc_error_status[1];
	uint32_t _cmic_cmc_2bit_ecc_error_status;
} CMIC_CMC_2BIT_ECC_ERROR_STATUSr_t;

#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_CLR(r) (r).cmic_cmc_2bit_ecc_error_status[0] = 0
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_SET(r,d) (r).cmic_cmc_2bit_ecc_error_status[0] = d
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_GET(r) (r).cmic_cmc_2bit_ecc_error_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH0_2BIT_ECCERRf_GET(r) (((r).cmic_cmc_2bit_ecc_error_status[0]) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status[0]=(((r).cmic_cmc_2bit_ecc_error_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status[0]) >> 1) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status[0]=(((r).cmic_cmc_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status[0]) >> 2) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_SBUSDMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status[0]=(((r).cmic_cmc_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH0_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status[0]) >> 3) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status[0]=(((r).cmic_cmc_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status[0]) >> 4) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status[0]=(((r).cmic_cmc_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status[0]) >> 5) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status[0]=(((r).cmic_cmc_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH3_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status[0]) >> 6) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_FIFODMA_CH3_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status[0]=(((r).cmic_cmc_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_CCMDMA_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status[0]) >> 7) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUSr_CCMDMA_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status[0]=(((r).cmic_cmc_2bit_ecc_error_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*******************************************************************************
 * End of 'CMIC_CMC_2BIT_ECC_ERROR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASK
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_OFFSET 0x00031458

#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASK.
 */
typedef union CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_2bit_ecc_error_status_mask[1];
	uint32_t _cmic_cmc_2bit_ecc_error_status_mask;
} CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_t;

#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_CLR(r) (r).cmic_cmc_2bit_ecc_error_status_mask[0] = 0
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_SET(r,d) (r).cmic_cmc_2bit_ecc_error_status_mask[0] = d
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_GET(r) (r).cmic_cmc_2bit_ecc_error_status_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH0_2BIT_ECCERRf_GET(r) (((r).cmic_cmc_2bit_ecc_error_status_mask[0]) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status_mask[0]) >> 1) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status_mask[0]) >> 2) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_SBUSDMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH0_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status_mask[0]) >> 3) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH0_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH1_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status_mask[0]) >> 4) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH1_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH2_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status_mask[0]) >> 5) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH2_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH3_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status_mask[0]) >> 6) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_FIFODMA_CH3_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_CCMDMA_2BIT_ECCERRf_GET(r) ((((r).cmic_cmc_2bit_ecc_error_status_mask[0]) >> 7) & 0x1)
#define CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr_CCMDMA_2BIT_ECCERRf_SET(r,f) (r).cmic_cmc_2bit_ecc_error_status_mask[0]=(((r).cmic_cmc_2bit_ecc_error_status_mask[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*******************************************************************************
 * End of 'CMIC_CMC_2BIT_ECC_ERROR_STATUS_MASKr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_AXIIC_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_AXIIC_TM_CONTROL_0r_OFFSET 0x00031850

#define CMIC_CMC_AXIIC_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_AXIIC_TM_CONTROL_0.
 */
typedef union CMIC_CMC_AXIIC_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_axiic_tm_control_0[1];
	uint32_t _cmic_cmc_axiic_tm_control_0;
} CMIC_CMC_AXIIC_TM_CONTROL_0r_t;

#define CMIC_CMC_AXIIC_TM_CONTROL_0r_CLR(r) (r).cmic_cmc_axiic_tm_control_0[0] = 0
#define CMIC_CMC_AXIIC_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc_axiic_tm_control_0[0] = d
#define CMIC_CMC_AXIIC_TM_CONTROL_0r_GET(r) (r).cmic_cmc_axiic_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_TMf_GET(r) (((r).cmic_cmc_axiic_tm_control_0[0]) & 0xfff)
#define CMIC_CMC_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_TMf_SET(r,f) (r).cmic_cmc_axiic_tm_control_0[0]=(((r).cmic_cmc_axiic_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_LVMf_GET(r) ((((r).cmic_cmc_axiic_tm_control_0[0]) >> 12) & 0x1)
#define CMIC_CMC_AXIIC_TM_CONTROL_0r_AXIIC_DMA_RDBUF_LVMf_SET(r,f) (r).cmic_cmc_axiic_tm_control_0[0]=(((r).cmic_cmc_axiic_tm_control_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC_AXIIC_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_AXIIC_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_OFFSET 0x00031854

#define CMIC_CMC_AXIIC_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_AXIIC_TM_CONTROL_1.
 */
typedef union CMIC_CMC_AXIIC_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_axiic_tm_control_1[1];
	uint32_t _cmic_cmc_axiic_tm_control_1;
} CMIC_CMC_AXIIC_TM_CONTROL_1r_t;

#define CMIC_CMC_AXIIC_TM_CONTROL_1r_CLR(r) (r).cmic_cmc_axiic_tm_control_1[0] = 0
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc_axiic_tm_control_1[0] = d
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_GET(r) (r).cmic_cmc_axiic_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_00f_GET(r) (((r).cmic_cmc_axiic_tm_control_1[0]) & 0xfff)
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_00f_SET(r,f) (r).cmic_cmc_axiic_tm_control_1[0]=(((r).cmic_cmc_axiic_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_00f_GET(r) ((((r).cmic_cmc_axiic_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_00f_SET(r,f) (r).cmic_cmc_axiic_tm_control_1[0]=(((r).cmic_cmc_axiic_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_01f_GET(r) ((((r).cmic_cmc_axiic_tm_control_1[0]) >> 13) & 0xfff)
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDBUF_TM_01f_SET(r,f) (r).cmic_cmc_axiic_tm_control_1[0]=(((r).cmic_cmc_axiic_tm_control_1[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_01f_GET(r) ((((r).cmic_cmc_axiic_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC_AXIIC_TM_CONTROL_1r_AXIIC_DMA_WDDBUF_LVM_01f_SET(r,f) (r).cmic_cmc_axiic_tm_control_1[0]=(((r).cmic_cmc_axiic_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_AXIIC_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_AXIIC_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_OFFSET 0x00031858

#define CMIC_CMC_AXIIC_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_AXIIC_TM_CONTROL_2.
 */
typedef union CMIC_CMC_AXIIC_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_axiic_tm_control_2[1];
	uint32_t _cmic_cmc_axiic_tm_control_2;
} CMIC_CMC_AXIIC_TM_CONTROL_2r_t;

#define CMIC_CMC_AXIIC_TM_CONTROL_2r_CLR(r) (r).cmic_cmc_axiic_tm_control_2[0] = 0
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc_axiic_tm_control_2[0] = d
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_GET(r) (r).cmic_cmc_axiic_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_00f_GET(r) (((r).cmic_cmc_axiic_tm_control_2[0]) & 0xfff)
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_00f_SET(r,f) (r).cmic_cmc_axiic_tm_control_2[0]=(((r).cmic_cmc_axiic_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_00f_GET(r) ((((r).cmic_cmc_axiic_tm_control_2[0]) >> 12) & 0x1)
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_00f_SET(r,f) (r).cmic_cmc_axiic_tm_control_2[0]=(((r).cmic_cmc_axiic_tm_control_2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_01f_GET(r) ((((r).cmic_cmc_axiic_tm_control_2[0]) >> 13) & 0xfff)
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDBUF_TM_01f_SET(r,f) (r).cmic_cmc_axiic_tm_control_2[0]=(((r).cmic_cmc_axiic_tm_control_2[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_01f_GET(r) ((((r).cmic_cmc_axiic_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC_AXIIC_TM_CONTROL_2r_AXIIC_DMA_WDDBUF_LVM_01f_SET(r,f) (r).cmic_cmc_axiic_tm_control_2[0]=(((r).cmic_cmc_axiic_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_AXIIC_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_OFFSET 0x00031848

#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_TM_CONTROL_0.
 */
typedef union CMIC_CMC_CCMDMA_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_tm_control_0[1];
	uint32_t _cmic_cmc_ccmdma_tm_control_0;
} CMIC_CMC_CCMDMA_TM_CONTROL_0r_t;

#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_CLR(r) (r).cmic_cmc_ccmdma_tm_control_0[0] = 0
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc_ccmdma_tm_control_0[0] = d
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_GET(r) (r).cmic_cmc_ccmdma_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_BUFF_TM0f_GET(r) (((r).cmic_cmc_ccmdma_tm_control_0[0]) & 0xfff)
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_BUFF_TM0f_SET(r,f) (r).cmic_cmc_ccmdma_tm_control_0[0]=(((r).cmic_cmc_ccmdma_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_BUFF_TM1f_GET(r) ((((r).cmic_cmc_ccmdma_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_BUFF_TM1f_SET(r,f) (r).cmic_cmc_ccmdma_tm_control_0[0]=(((r).cmic_cmc_ccmdma_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_BUFF_LVM0f_GET(r) ((((r).cmic_cmc_ccmdma_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_BUFF_LVM0f_SET(r,f) (r).cmic_cmc_ccmdma_tm_control_0[0]=(((r).cmic_cmc_ccmdma_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_BUFF_LVM1f_GET(r) ((((r).cmic_cmc_ccmdma_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC_CCMDMA_TM_CONTROL_0r_BUFF_LVM1f_SET(r,f) (r).cmic_cmc_ccmdma_tm_control_0[0]=(((r).cmic_cmc_ccmdma_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCMDMA_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCMDMA_TM_CONTROL_1r_OFFSET 0x0003184c

#define CMIC_CMC_CCMDMA_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCMDMA_TM_CONTROL_1.
 */
typedef union CMIC_CMC_CCMDMA_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccmdma_tm_control_1[1];
	uint32_t _cmic_cmc_ccmdma_tm_control_1;
} CMIC_CMC_CCMDMA_TM_CONTROL_1r_t;

#define CMIC_CMC_CCMDMA_TM_CONTROL_1r_CLR(r) (r).cmic_cmc_ccmdma_tm_control_1[0] = 0
#define CMIC_CMC_CCMDMA_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc_ccmdma_tm_control_1[0] = d
#define CMIC_CMC_CCMDMA_TM_CONTROL_1r_GET(r) (r).cmic_cmc_ccmdma_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCMDMA_TM_CONTROL_1r_ECCBUFF_TM0f_GET(r) (((r).cmic_cmc_ccmdma_tm_control_1[0]) & 0xfff)
#define CMIC_CMC_CCMDMA_TM_CONTROL_1r_ECCBUFF_TM0f_SET(r,f) (r).cmic_cmc_ccmdma_tm_control_1[0]=(((r).cmic_cmc_ccmdma_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_CCMDMA_TM_CONTROL_1r_ECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc_ccmdma_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC_CCMDMA_TM_CONTROL_1r_ECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc_ccmdma_tm_control_1[0]=(((r).cmic_cmc_ccmdma_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC_CCMDMA_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_CFGr_OFFSET 0x000313ac

#define CMIC_CMC_CCM_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_CFG.
 */
typedef union CMIC_CMC_CCM_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_cfg[1];
	uint32_t _cmic_cmc_ccm_dma_cfg;
} CMIC_CMC_CCM_DMA_CFGr_t;

#define CMIC_CMC_CCM_DMA_CFGr_CLR(r) (r).cmic_cmc_ccm_dma_cfg[0] = 0
#define CMIC_CMC_CCM_DMA_CFGr_SET(r,d) (r).cmic_cmc_ccm_dma_cfg[0] = d
#define CMIC_CMC_CCM_DMA_CFGr_GET(r) (r).cmic_cmc_ccm_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_CFGr_ENf_GET(r) (((r).cmic_cmc_ccm_dma_cfg[0]) & 0x1)
#define CMIC_CMC_CCM_DMA_CFGr_ENf_SET(r,f) (r).cmic_cmc_ccm_dma_cfg[0]=(((r).cmic_cmc_ccm_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_CCM_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc_ccm_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC_CCM_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc_ccm_dma_cfg[0]=(((r).cmic_cmc_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_CCM_DMA_CFGr_PROCESSOR0_ENDIANESSf_GET(r) ((((r).cmic_cmc_ccm_dma_cfg[0]) >> 2) & 0x1)
#define CMIC_CMC_CCM_DMA_CFGr_PROCESSOR0_ENDIANESSf_SET(r,f) (r).cmic_cmc_ccm_dma_cfg[0]=(((r).cmic_cmc_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_CCM_DMA_CFGr_PROCESSOR1_ENDIANESSf_GET(r) ((((r).cmic_cmc_ccm_dma_cfg[0]) >> 3) & 0x1)
#define CMIC_CMC_CCM_DMA_CFGr_PROCESSOR1_ENDIANESSf_SET(r,f) (r).cmic_cmc_ccm_dma_cfg[0]=(((r).cmic_cmc_ccm_dma_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_CUR_HOST0_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr_OFFSET 0x000313b4

#define CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_CUR_HOST0_ADDR.
 */
typedef union CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_cur_host0_addr[1];
	uint32_t _cmic_cmc_ccm_dma_cur_host0_addr;
} CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr_t;

#define CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr_CLR(r) (r).cmic_cmc_ccm_dma_cur_host0_addr[0] = 0
#define CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr_SET(r,d) (r).cmic_cmc_ccm_dma_cur_host0_addr[0] = d
#define CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr_GET(r) (r).cmic_cmc_ccm_dma_cur_host0_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr_ADDRf_GET(r) ((r).cmic_cmc_ccm_dma_cur_host0_addr[0])
#define CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc_ccm_dma_cur_host0_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_CUR_HOST0_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_CUR_HOST1_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr_OFFSET 0x000313b8

#define CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_CUR_HOST1_ADDR.
 */
typedef union CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_cur_host1_addr[1];
	uint32_t _cmic_cmc_ccm_dma_cur_host1_addr;
} CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr_t;

#define CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr_CLR(r) (r).cmic_cmc_ccm_dma_cur_host1_addr[0] = 0
#define CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr_SET(r,d) (r).cmic_cmc_ccm_dma_cur_host1_addr[0] = d
#define CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr_GET(r) (r).cmic_cmc_ccm_dma_cur_host1_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr_ADDRf_GET(r) ((r).cmic_cmc_ccm_dma_cur_host1_addr[0])
#define CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc_ccm_dma_cur_host1_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_CUR_HOST1_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_ECCERR_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_ECCERR_ADDRr_OFFSET 0x000313bc

#define CMIC_CMC_CCM_DMA_ECCERR_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_ECCERR_ADDR.
 */
typedef union CMIC_CMC_CCM_DMA_ECCERR_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_eccerr_addr[1];
	uint32_t _cmic_cmc_ccm_dma_eccerr_addr;
} CMIC_CMC_CCM_DMA_ECCERR_ADDRr_t;

#define CMIC_CMC_CCM_DMA_ECCERR_ADDRr_CLR(r) (r).cmic_cmc_ccm_dma_eccerr_addr[0] = 0
#define CMIC_CMC_CCM_DMA_ECCERR_ADDRr_SET(r,d) (r).cmic_cmc_ccm_dma_eccerr_addr[0] = d
#define CMIC_CMC_CCM_DMA_ECCERR_ADDRr_GET(r) (r).cmic_cmc_ccm_dma_eccerr_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_ECCERR_ADDRr_ADDRf_GET(r) ((r).cmic_cmc_ccm_dma_eccerr_addr[0])
#define CMIC_CMC_CCM_DMA_ECCERR_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc_ccm_dma_eccerr_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_ECCERR_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_OFFSET 0x000313c4

#define CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_eccerr_control[1];
	uint32_t _cmic_cmc_ccm_dma_eccerr_control;
} CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc_ccm_dma_eccerr_control[0] = 0
#define CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc_ccm_dma_eccerr_control[0] = d
#define CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc_ccm_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc_ccm_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_ccm_dma_eccerr_control[0]=(((r).cmic_cmc_ccm_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc_ccm_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC_CCM_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_ccm_dma_eccerr_control[0]=(((r).cmic_cmc_ccm_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_ENTRY_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_ENTRY_COUNTr_OFFSET 0x000313a8

#define CMIC_CMC_CCM_DMA_ENTRY_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_ENTRY_COUNT.
 */
typedef union CMIC_CMC_CCM_DMA_ENTRY_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_entry_count[1];
	uint32_t _cmic_cmc_ccm_dma_entry_count;
} CMIC_CMC_CCM_DMA_ENTRY_COUNTr_t;

#define CMIC_CMC_CCM_DMA_ENTRY_COUNTr_CLR(r) (r).cmic_cmc_ccm_dma_entry_count[0] = 0
#define CMIC_CMC_CCM_DMA_ENTRY_COUNTr_SET(r,d) (r).cmic_cmc_ccm_dma_entry_count[0] = d
#define CMIC_CMC_CCM_DMA_ENTRY_COUNTr_GET(r) (r).cmic_cmc_ccm_dma_entry_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_ENTRY_COUNTr_COUNTf_GET(r) (((r).cmic_cmc_ccm_dma_entry_count[0]) & 0x3fffffff)
#define CMIC_CMC_CCM_DMA_ENTRY_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc_ccm_dma_entry_count[0]=(((r).cmic_cmc_ccm_dma_entry_count[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_ENTRY_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr_OFFSET 0x000313a0

#define CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDR.
 */
typedef union CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_host0_mem_start_addr[1];
	uint32_t _cmic_cmc_ccm_dma_host0_mem_start_addr;
} CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr_t;

#define CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr_CLR(r) (r).cmic_cmc_ccm_dma_host0_mem_start_addr[0] = 0
#define CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr_SET(r,d) (r).cmic_cmc_ccm_dma_host0_mem_start_addr[0] = d
#define CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr_GET(r) (r).cmic_cmc_ccm_dma_host0_mem_start_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr_ADDRf_GET(r) ((r).cmic_cmc_ccm_dma_host0_mem_start_addr[0])
#define CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc_ccm_dma_host0_mem_start_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_HOST0_MEM_START_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr_OFFSET 0x000313a4

#define CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDR.
 */
typedef union CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_host1_mem_start_addr[1];
	uint32_t _cmic_cmc_ccm_dma_host1_mem_start_addr;
} CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr_t;

#define CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr_CLR(r) (r).cmic_cmc_ccm_dma_host1_mem_start_addr[0] = 0
#define CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr_SET(r,d) (r).cmic_cmc_ccm_dma_host1_mem_start_addr[0] = d
#define CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr_GET(r) (r).cmic_cmc_ccm_dma_host1_mem_start_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr_ADDRf_GET(r) ((r).cmic_cmc_ccm_dma_host1_mem_start_addr[0])
#define CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc_ccm_dma_host1_mem_start_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_HOST1_MEM_START_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_STATr_OFFSET 0x000313b0

#define CMIC_CMC_CCM_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_STAT.
 */
typedef union CMIC_CMC_CCM_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_stat[1];
	uint32_t _cmic_cmc_ccm_dma_stat;
} CMIC_CMC_CCM_DMA_STATr_t;

#define CMIC_CMC_CCM_DMA_STATr_CLR(r) (r).cmic_cmc_ccm_dma_stat[0] = 0
#define CMIC_CMC_CCM_DMA_STATr_SET(r,d) (r).cmic_cmc_ccm_dma_stat[0] = d
#define CMIC_CMC_CCM_DMA_STATr_GET(r) (r).cmic_cmc_ccm_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_STATr_DONEf_GET(r) (((r).cmic_cmc_ccm_dma_stat[0]) & 0x1)
#define CMIC_CMC_CCM_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc_ccm_dma_stat[0]=(((r).cmic_cmc_ccm_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_CCM_DMA_STATr_ERRORf_GET(r) ((((r).cmic_cmc_ccm_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC_CCM_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc_ccm_dma_stat[0]=(((r).cmic_cmc_ccm_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_CCM_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_ccm_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC_CCM_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_ccm_dma_stat[0]=(((r).cmic_cmc_ccm_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CCM_DMA_STATUS_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CCM_DMA_STATUS_CLRr_OFFSET 0x000313c0

#define CMIC_CMC_CCM_DMA_STATUS_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CCM_DMA_STATUS_CLR.
 */
typedef union CMIC_CMC_CCM_DMA_STATUS_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ccm_dma_status_clr[1];
	uint32_t _cmic_cmc_ccm_dma_status_clr;
} CMIC_CMC_CCM_DMA_STATUS_CLRr_t;

#define CMIC_CMC_CCM_DMA_STATUS_CLRr_CLR(r) (r).cmic_cmc_ccm_dma_status_clr[0] = 0
#define CMIC_CMC_CCM_DMA_STATUS_CLRr_SET(r,d) (r).cmic_cmc_ccm_dma_status_clr[0] = d
#define CMIC_CMC_CCM_DMA_STATUS_CLRr_GET(r) (r).cmic_cmc_ccm_dma_status_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CCM_DMA_STATUS_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) (((r).cmic_cmc_ccm_dma_status_clr[0]) & 0x1)
#define CMIC_CMC_CCM_DMA_STATUS_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_ccm_dma_status_clr[0]=(((r).cmic_cmc_ccm_dma_status_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC_CCM_DMA_STATUS_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00031110

#define CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ch0_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc_ch0_rxbuf_threshold_config;
} CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc_ch0_rxbuf_threshold_config[0] = 0
#define CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc_ch0_rxbuf_threshold_config[0] = d
#define CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc_ch0_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc_ch0_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc_ch0_rxbuf_threshold_config[0]=(((r).cmic_cmc_ch0_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc_ch0_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc_ch0_rxbuf_threshold_config[0]=(((r).cmic_cmc_ch0_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC_CH0_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00031114

#define CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ch1_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc_ch1_rxbuf_threshold_config;
} CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc_ch1_rxbuf_threshold_config[0] = 0
#define CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc_ch1_rxbuf_threshold_config[0] = d
#define CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc_ch1_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc_ch1_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc_ch1_rxbuf_threshold_config[0]=(((r).cmic_cmc_ch1_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc_ch1_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc_ch1_rxbuf_threshold_config[0]=(((r).cmic_cmc_ch1_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC_CH1_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x00031118

#define CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ch2_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc_ch2_rxbuf_threshold_config;
} CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc_ch2_rxbuf_threshold_config[0] = 0
#define CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc_ch2_rxbuf_threshold_config[0] = d
#define CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc_ch2_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc_ch2_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc_ch2_rxbuf_threshold_config[0]=(((r).cmic_cmc_ch2_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc_ch2_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc_ch2_rxbuf_threshold_config[0]=(((r).cmic_cmc_ch2_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC_CH2_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_OFFSET 0x0003111c

#define CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIG.
 */
typedef union CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_ch3_rxbuf_threshold_config[1];
	uint32_t _cmic_cmc_ch3_rxbuf_threshold_config;
} CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_t;

#define CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_CLR(r) (r).cmic_cmc_ch3_rxbuf_threshold_config[0] = 0
#define CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_SET(r,d) (r).cmic_cmc_ch3_rxbuf_threshold_config[0] = d
#define CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_GET(r) (r).cmic_cmc_ch3_rxbuf_threshold_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_GET(r) (((r).cmic_cmc_ch3_rxbuf_threshold_config[0]) & 0xff)
#define CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_RXBUF_THRESHOLDf_SET(r,f) (r).cmic_cmc_ch3_rxbuf_threshold_config[0]=(((r).cmic_cmc_ch3_rxbuf_threshold_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_ENABLEf_GET(r) ((((r).cmic_cmc_ch3_rxbuf_threshold_config[0]) >> 8) & 0x1)
#define CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr_ENABLEf_SET(r,f) (r).cmic_cmc_ch3_rxbuf_threshold_config[0]=(((r).cmic_cmc_ch3_rxbuf_threshold_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC_CH3_RXBUF_THRESHOLD_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_CONFIGr_OFFSET 0x00031108

#define CMIC_CMC_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_CONFIG.
 */
typedef union CMIC_CMC_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_config[1];
	uint32_t _cmic_cmc_config;
} CMIC_CMC_CONFIGr_t;

#define CMIC_CMC_CONFIGr_CLR(r) (r).cmic_cmc_config[0] = 0
#define CMIC_CMC_CONFIGr_SET(r,d) (r).cmic_cmc_config[0] = d
#define CMIC_CMC_CONFIGr_GET(r) (r).cmic_cmc_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_CONFIGr_ENABLE_SBUSDMA_CH0_FLOW_CONTROLf_GET(r) (((r).cmic_cmc_config[0]) & 0x1)
#define CMIC_CMC_CONFIGr_ENABLE_SBUSDMA_CH0_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc_config[0]=(((r).cmic_cmc_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_CONFIGr_ENABLE_SBUSDMA_CH1_FLOW_CONTROLf_GET(r) ((((r).cmic_cmc_config[0]) >> 1) & 0x1)
#define CMIC_CMC_CONFIGr_ENABLE_SBUSDMA_CH1_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc_config[0]=(((r).cmic_cmc_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_CONFIGr_ENABLE_SBUSDMA_CH2_FLOW_CONTROLf_GET(r) ((((r).cmic_cmc_config[0]) >> 2) & 0x1)
#define CMIC_CMC_CONFIGr_ENABLE_SBUSDMA_CH2_FLOW_CONTROLf_SET(r,f) (r).cmic_cmc_config[0]=(((r).cmic_cmc_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_CONFIGr_ENABLE_EARLY_BRESPf_GET(r) ((((r).cmic_cmc_config[0]) >> 3) & 0x1)
#define CMIC_CMC_CONFIGr_ENABLE_EARLY_BRESPf_SET(r,f) (r).cmic_cmc_config[0]=(((r).cmic_cmc_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_COS_CTRL_RX_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_COS_CTRL_RX_0r_OFFSET 0x00031168

#define CMIC_CMC_COS_CTRL_RX_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_COS_CTRL_RX_0.
 */
typedef union CMIC_CMC_COS_CTRL_RX_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_cos_ctrl_rx_0[1];
	uint32_t _cmic_cmc_cos_ctrl_rx_0;
} CMIC_CMC_COS_CTRL_RX_0r_t;

#define CMIC_CMC_COS_CTRL_RX_0r_CLR(r) (r).cmic_cmc_cos_ctrl_rx_0[0] = 0
#define CMIC_CMC_COS_CTRL_RX_0r_SET(r,d) (r).cmic_cmc_cos_ctrl_rx_0[0] = d
#define CMIC_CMC_COS_CTRL_RX_0r_GET(r) (r).cmic_cmc_cos_ctrl_rx_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_COS_CTRL_RX_0r_COS_BMPf_GET(r) ((r).cmic_cmc_cos_ctrl_rx_0[0])
#define CMIC_CMC_COS_CTRL_RX_0r_COS_BMPf_SET(r,f) (r).cmic_cmc_cos_ctrl_rx_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_COS_CTRL_RX_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_COS_CTRL_RX_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_COS_CTRL_RX_1r_OFFSET 0x0003116c

#define CMIC_CMC_COS_CTRL_RX_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_COS_CTRL_RX_1.
 */
typedef union CMIC_CMC_COS_CTRL_RX_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_cos_ctrl_rx_1[1];
	uint32_t _cmic_cmc_cos_ctrl_rx_1;
} CMIC_CMC_COS_CTRL_RX_1r_t;

#define CMIC_CMC_COS_CTRL_RX_1r_CLR(r) (r).cmic_cmc_cos_ctrl_rx_1[0] = 0
#define CMIC_CMC_COS_CTRL_RX_1r_SET(r,d) (r).cmic_cmc_cos_ctrl_rx_1[0] = d
#define CMIC_CMC_COS_CTRL_RX_1r_GET(r) (r).cmic_cmc_cos_ctrl_rx_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_COS_CTRL_RX_1r_COS_BMPf_GET(r) ((r).cmic_cmc_cos_ctrl_rx_1[0])
#define CMIC_CMC_COS_CTRL_RX_1r_COS_BMPf_SET(r,f) (r).cmic_cmc_cos_ctrl_rx_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_COS_CTRL_RX_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_CTRLr_OFFSET 0x00031140

#define CMIC_CMC_DMA_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_CTRL.
 */
typedef union CMIC_CMC_DMA_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_ctrl[1];
	uint32_t _cmic_cmc_dma_ctrl;
} CMIC_CMC_DMA_CTRLr_t;

#define CMIC_CMC_DMA_CTRLr_CLR(r) (r).cmic_cmc_dma_ctrl[0] = 0
#define CMIC_CMC_DMA_CTRLr_SET(r,d) (r).cmic_cmc_dma_ctrl[0] = d
#define CMIC_CMC_DMA_CTRLr_GET(r) (r).cmic_cmc_dma_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_CTRLr_DIRECTIONf_GET(r) (((r).cmic_cmc_dma_ctrl[0]) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DIRECTIONf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_DMA_CTRLr_DMA_ENf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DMA_ENf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_DMA_CTRLr_ABORT_DMAf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC_DMA_CTRLr_ABORT_DMAf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 3) & 0x1)
#define CMIC_CMC_DMA_CTRLr_SEL_INTR_ON_DESC_OR_PKTf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_DMA_CTRLr_PKTDMA_ENDIANESSf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 4) & 0x1)
#define CMIC_CMC_DMA_CTRLr_PKTDMA_ENDIANESSf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_DMA_CTRLr_DESC_ENDIANESSf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 5) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DESC_ENDIANESSf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 6) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DROP_RX_PKT_ON_CHAIN_ENDf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_DMA_CTRLr_RLD_STS_UPD_DISf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 7) & 0x1)
#define CMIC_CMC_DMA_CTRLr_RLD_STS_UPD_DISf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_DMA_CTRLr_DESC_DONE_INTR_MODEf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 8) & 0x1)
#define CMIC_CMC_DMA_CTRLr_DESC_DONE_INTR_MODEf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_GET(r) ((((r).cmic_cmc_dma_ctrl[0]) >> 9) & 0x1)
#define CMIC_CMC_DMA_CTRLr_ENABLE_CONTINUOUS_DMAf_SET(r,f) (r).cmic_cmc_dma_ctrl[0]=(((r).cmic_cmc_dma_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_CURR_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_CURR_DESCr_OFFSET 0x000311a8

#define CMIC_CMC_DMA_CURR_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_CURR_DESC.
 */
typedef union CMIC_CMC_DMA_CURR_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_curr_desc[1];
	uint32_t _cmic_cmc_dma_curr_desc;
} CMIC_CMC_DMA_CURR_DESCr_t;

#define CMIC_CMC_DMA_CURR_DESCr_CLR(r) (r).cmic_cmc_dma_curr_desc[0] = 0
#define CMIC_CMC_DMA_CURR_DESCr_SET(r,d) (r).cmic_cmc_dma_curr_desc[0] = d
#define CMIC_CMC_DMA_CURR_DESCr_GET(r) (r).cmic_cmc_dma_curr_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_CURR_DESCr_ADDRf_GET(r) ((r).cmic_cmc_dma_curr_desc[0])
#define CMIC_CMC_DMA_CURR_DESCr_ADDRf_SET(r,f) (r).cmic_cmc_dma_curr_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_CURR_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_DESC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_DESCr_OFFSET 0x00031158

#define CMIC_CMC_DMA_DESCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_DESC.
 */
typedef union CMIC_CMC_DMA_DESCr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_desc[1];
	uint32_t _cmic_cmc_dma_desc;
} CMIC_CMC_DMA_DESCr_t;

#define CMIC_CMC_DMA_DESCr_CLR(r) (r).cmic_cmc_dma_desc[0] = 0
#define CMIC_CMC_DMA_DESCr_SET(r,d) (r).cmic_cmc_dma_desc[0] = d
#define CMIC_CMC_DMA_DESCr_GET(r) (r).cmic_cmc_dma_desc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_DESCr_ADDRf_GET(r) ((r).cmic_cmc_dma_desc[0])
#define CMIC_CMC_DMA_DESCr_ADDRf_SET(r,f) (r).cmic_cmc_dma_desc[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_DESCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_DESC_HALT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_DESC_HALT_ADDRr_OFFSET 0x00031120

#define CMIC_CMC_DMA_DESC_HALT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_DESC_HALT_ADDR.
 */
typedef union CMIC_CMC_DMA_DESC_HALT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_desc_halt_addr[1];
	uint32_t _cmic_cmc_dma_desc_halt_addr;
} CMIC_CMC_DMA_DESC_HALT_ADDRr_t;

#define CMIC_CMC_DMA_DESC_HALT_ADDRr_CLR(r) (r).cmic_cmc_dma_desc_halt_addr[0] = 0
#define CMIC_CMC_DMA_DESC_HALT_ADDRr_SET(r,d) (r).cmic_cmc_dma_desc_halt_addr[0] = d
#define CMIC_CMC_DMA_DESC_HALT_ADDRr_GET(r) (r).cmic_cmc_dma_desc_halt_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_DESC_HALT_ADDRr_ADDRf_GET(r) ((r).cmic_cmc_dma_desc_halt_addr[0])
#define CMIC_CMC_DMA_DESC_HALT_ADDRr_ADDRf_SET(r,f) (r).cmic_cmc_dma_desc_halt_addr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_DESC_HALT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_INTR_COAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_INTR_COALr_OFFSET 0x00031188

#define CMIC_CMC_DMA_INTR_COALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_INTR_COAL.
 */
typedef union CMIC_CMC_DMA_INTR_COALr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_intr_coal[1];
	uint32_t _cmic_cmc_dma_intr_coal;
} CMIC_CMC_DMA_INTR_COALr_t;

#define CMIC_CMC_DMA_INTR_COALr_CLR(r) (r).cmic_cmc_dma_intr_coal[0] = 0
#define CMIC_CMC_DMA_INTR_COALr_SET(r,d) (r).cmic_cmc_dma_intr_coal[0] = d
#define CMIC_CMC_DMA_INTR_COALr_GET(r) (r).cmic_cmc_dma_intr_coal[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_INTR_COALr_TIMERf_GET(r) (((r).cmic_cmc_dma_intr_coal[0]) & 0xffff)
#define CMIC_CMC_DMA_INTR_COALr_TIMERf_SET(r,f) (r).cmic_cmc_dma_intr_coal[0]=(((r).cmic_cmc_dma_intr_coal[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC_DMA_INTR_COALr_COUNTf_GET(r) ((((r).cmic_cmc_dma_intr_coal[0]) >> 16) & 0x7fff)
#define CMIC_CMC_DMA_INTR_COALr_COUNTf_SET(r,f) (r).cmic_cmc_dma_intr_coal[0]=(((r).cmic_cmc_dma_intr_coal[0] & ~((uint32_t)0x7fff << 16)) | ((((uint32_t)f) & 0x7fff) << 16))
#define CMIC_CMC_DMA_INTR_COALr_ENABLEf_GET(r) ((((r).cmic_cmc_dma_intr_coal[0]) >> 31) & 0x1)
#define CMIC_CMC_DMA_INTR_COALr_ENABLEf_SET(r,f) (r).cmic_cmc_dma_intr_coal[0]=(((r).cmic_cmc_dma_intr_coal[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_INTR_COALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_STATr_OFFSET 0x00031150

#define CMIC_CMC_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_STAT.
 */
typedef union CMIC_CMC_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_stat[1];
	uint32_t _cmic_cmc_dma_stat;
} CMIC_CMC_DMA_STATr_t;

#define CMIC_CMC_DMA_STATr_CLR(r) (r).cmic_cmc_dma_stat[0] = 0
#define CMIC_CMC_DMA_STATr_SET(r,d) (r).cmic_cmc_dma_stat[0] = d
#define CMIC_CMC_DMA_STATr_GET(r) (r).cmic_cmc_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_STATr_CHAIN_DONEf_GET(r) (((r).cmic_cmc_dma_stat[0]) & 0xf)
#define CMIC_CMC_DMA_STATr_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC_DMA_STATr_CH0_CHAIN_DONEf_GET(r) (((r).cmic_cmc_dma_stat[0]) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_DMA_STATr_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_DMA_STATr_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_DMA_STATr_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_DMA_STATr_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 4) & 0xf)
#define CMIC_CMC_DMA_STATr_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_CMC_DMA_STATr_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_DMA_STATr_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_DMA_STATr_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_DMA_STATr_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_DMA_STATr_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 8) & 0xf)
#define CMIC_CMC_DMA_STATr_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define CMIC_CMC_DMA_STATr_CH0_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_DMA_STATr_CH1_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_DMA_STATr_CH2_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_DMA_STATr_CH3_DMA_ACTIVEf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_DMA_ACTIVEf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_DMA_STATr_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 12) & 0xf)
#define CMIC_CMC_DMA_STATr_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define CMIC_CMC_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 12) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 13) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 14) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 15) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_STWT_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_DMA_STATr_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 16) & 0xf)
#define CMIC_CMC_DMA_STATr_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 16)) | ((((uint32_t)f) & 0xf) << 16))
#define CMIC_CMC_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 16) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 17) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 18) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 19) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_PKTWRRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_DMA_STATr_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 20) & 0xf)
#define CMIC_CMC_DMA_STATr_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 20)) | ((((uint32_t)f) & 0xf) << 20))
#define CMIC_CMC_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 20) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 21) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 22) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 23) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_DESCRD_ADDR_DECODE_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_DMA_STATr_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 24) & 0xf)
#define CMIC_CMC_DMA_STATr_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 24)) | ((((uint32_t)f) & 0xf) << 24))
#define CMIC_CMC_DMA_STATr_CH0_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 24) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_DMA_STATr_CH1_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 25) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_DMA_STATr_CH2_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 26) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_DMA_STATr_CH3_STWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 27) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_STWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_DMA_STATr_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 28) & 0xf)
#define CMIC_CMC_DMA_STATr_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0xf << 28)) | ((((uint32_t)f) & 0xf) << 28))
#define CMIC_CMC_DMA_STATr_CH0_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 28) & 0x1)
#define CMIC_CMC_DMA_STATr_CH0_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_DMA_STATr_CH1_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 29) & 0x1)
#define CMIC_CMC_DMA_STATr_CH1_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_DMA_STATr_CH2_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 30) & 0x1)
#define CMIC_CMC_DMA_STATr_CH2_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC_DMA_STATr_CH3_PKTWR_ECC_ERRf_GET(r) ((((r).cmic_cmc_dma_stat[0]) >> 31) & 0x1)
#define CMIC_CMC_DMA_STATr_CH3_PKTWR_ECC_ERRf_SET(r,f) (r).cmic_cmc_dma_stat[0]=(((r).cmic_cmc_dma_stat[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_STAT_CLRr_OFFSET 0x000311a4

#define CMIC_CMC_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_STAT_CLR.
 */
typedef union CMIC_CMC_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_stat_clr[1];
	uint32_t _cmic_cmc_dma_stat_clr;
} CMIC_CMC_DMA_STAT_CLRr_t;

#define CMIC_CMC_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc_dma_stat_clr[0] = 0
#define CMIC_CMC_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc_dma_stat_clr[0] = d
#define CMIC_CMC_DMA_STAT_CLRr_GET(r) (r).cmic_cmc_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_STAT_CLRr_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc_dma_stat_clr[0]) & 0xf)
#define CMIC_CMC_DMA_STAT_CLRr_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_GET(r) (((r).cmic_cmc_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH0_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH1_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH2_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 3) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH3_DESCRD_CMPLT_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_DMA_STAT_CLRr_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 4) & 0xf)
#define CMIC_CMC_DMA_STAT_CLRr_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_CMC_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 4) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH0_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 5) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH1_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 6) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH2_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 7) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH3_INTR_COALESCING_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_DMA_STAT_CLRr_CH0_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 8) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH0_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_DMA_STAT_CLRr_CH1_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 9) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH1_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_DMA_STAT_CLRr_CH2_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 10) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH2_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_DMA_STAT_CLRr_CH3_DESC_CONTROLLED_INTR_CLRf_GET(r) ((((r).cmic_cmc_dma_stat_clr[0]) >> 11) & 0x1)
#define CMIC_CMC_DMA_STAT_CLRr_CH3_DESC_CONTROLLED_INTR_CLRf_SET(r,f) (r).cmic_cmc_dma_stat_clr[0]=(((r).cmic_cmc_dma_stat_clr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_DMA_STAT_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_DMA_STAT_HIr_OFFSET 0x00031130

#define CMIC_CMC_DMA_STAT_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_DMA_STAT_HI.
 */
typedef union CMIC_CMC_DMA_STAT_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_dma_stat_hi[1];
	uint32_t _cmic_cmc_dma_stat_hi;
} CMIC_CMC_DMA_STAT_HIr_t;

#define CMIC_CMC_DMA_STAT_HIr_CLR(r) (r).cmic_cmc_dma_stat_hi[0] = 0
#define CMIC_CMC_DMA_STAT_HIr_SET(r,d) (r).cmic_cmc_dma_stat_hi[0] = d
#define CMIC_CMC_DMA_STAT_HIr_GET(r) (r).cmic_cmc_dma_stat_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_DMA_STAT_HIr_CH0_IN_HALTf_GET(r) ((((r).cmic_cmc_dma_stat_hi[0]) >> 27) & 0x1)
#define CMIC_CMC_DMA_STAT_HIr_CH0_IN_HALTf_SET(r,f) (r).cmic_cmc_dma_stat_hi[0]=(((r).cmic_cmc_dma_stat_hi[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_DMA_STAT_HIr_CH1_IN_HALTf_GET(r) ((((r).cmic_cmc_dma_stat_hi[0]) >> 28) & 0x1)
#define CMIC_CMC_DMA_STAT_HIr_CH1_IN_HALTf_SET(r,f) (r).cmic_cmc_dma_stat_hi[0]=(((r).cmic_cmc_dma_stat_hi[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_DMA_STAT_HIr_CH2_IN_HALTf_GET(r) ((((r).cmic_cmc_dma_stat_hi[0]) >> 29) & 0x1)
#define CMIC_CMC_DMA_STAT_HIr_CH2_IN_HALTf_SET(r,f) (r).cmic_cmc_dma_stat_hi[0]=(((r).cmic_cmc_dma_stat_hi[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_DMA_STAT_HIr_CH3_IN_HALTf_GET(r) ((((r).cmic_cmc_dma_stat_hi[0]) >> 30) & 0x1)
#define CMIC_CMC_DMA_STAT_HIr_CH3_IN_HALTf_SET(r,f) (r).cmic_cmc_dma_stat_hi[0]=(((r).cmic_cmc_dma_stat_hi[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC_DMA_STAT_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_OFFSET 0x00031830

#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0.
 */
typedef union CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fiforddma_ch1_tm_control_0[1];
	uint32_t _cmic_cmc_fiforddma_ch1_tm_control_0;
} CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_t;

#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_CLR(r) (r).cmic_cmc_fiforddma_ch1_tm_control_0[0] = 0
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc_fiforddma_ch1_tm_control_0[0] = d
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_GET(r) (r).cmic_cmc_fiforddma_ch1_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc_fiforddma_ch1_tm_control_0[0]) & 0xfff)
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc_fiforddma_ch1_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc_fiforddma_ch1_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc_fiforddma_ch1_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc_fiforddma_ch1_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch1_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_OFFSET 0x00031834

#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1.
 */
typedef union CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fiforddma_ch1_tm_control_1[1];
	uint32_t _cmic_cmc_fiforddma_ch1_tm_control_1;
} CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_t;

#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_CLR(r) (r).cmic_cmc_fiforddma_ch1_tm_control_1[0] = 0
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc_fiforddma_ch1_tm_control_1[0] = d
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_GET(r) (r).cmic_cmc_fiforddma_ch1_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc_fiforddma_ch1_tm_control_1[0]) & 0xfff)
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch1_tm_control_1[0]=(((r).cmic_cmc_fiforddma_ch1_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc_fiforddma_ch1_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch1_tm_control_1[0]=(((r).cmic_cmc_fiforddma_ch1_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFORDDMA_CH1_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_OFFSET 0x00031838

#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0.
 */
typedef union CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fiforddma_ch2_tm_control_0[1];
	uint32_t _cmic_cmc_fiforddma_ch2_tm_control_0;
} CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_t;

#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_CLR(r) (r).cmic_cmc_fiforddma_ch2_tm_control_0[0] = 0
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc_fiforddma_ch2_tm_control_0[0] = d
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_GET(r) (r).cmic_cmc_fiforddma_ch2_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc_fiforddma_ch2_tm_control_0[0]) & 0xfff)
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc_fiforddma_ch2_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc_fiforddma_ch2_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc_fiforddma_ch2_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc_fiforddma_ch2_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch2_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_OFFSET 0x0003183c

#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1.
 */
typedef union CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fiforddma_ch2_tm_control_1[1];
	uint32_t _cmic_cmc_fiforddma_ch2_tm_control_1;
} CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_t;

#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_CLR(r) (r).cmic_cmc_fiforddma_ch2_tm_control_1[0] = 0
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc_fiforddma_ch2_tm_control_1[0] = d
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_GET(r) (r).cmic_cmc_fiforddma_ch2_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc_fiforddma_ch2_tm_control_1[0]) & 0xfff)
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch2_tm_control_1[0]=(((r).cmic_cmc_fiforddma_ch2_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc_fiforddma_ch2_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch2_tm_control_1[0]=(((r).cmic_cmc_fiforddma_ch2_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFORDDMA_CH2_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_OFFSET 0x00031840

#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0.
 */
typedef union CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fiforddma_ch3_tm_control_0[1];
	uint32_t _cmic_cmc_fiforddma_ch3_tm_control_0;
} CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_t;

#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_CLR(r) (r).cmic_cmc_fiforddma_ch3_tm_control_0[0] = 0
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc_fiforddma_ch3_tm_control_0[0] = d
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_GET(r) (r).cmic_cmc_fiforddma_ch3_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc_fiforddma_ch3_tm_control_0[0]) & 0xfff)
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc_fiforddma_ch3_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc_fiforddma_ch3_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc_fiforddma_ch3_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc_fiforddma_ch3_tm_control_0[0]=(((r).cmic_cmc_fiforddma_ch3_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_OFFSET 0x00031844

#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1.
 */
typedef union CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fiforddma_ch3_tm_control_1[1];
	uint32_t _cmic_cmc_fiforddma_ch3_tm_control_1;
} CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_t;

#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_CLR(r) (r).cmic_cmc_fiforddma_ch3_tm_control_1[0] = 0
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc_fiforddma_ch3_tm_control_1[0] = d
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_GET(r) (r).cmic_cmc_fiforddma_ch3_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc_fiforddma_ch3_tm_control_1[0]) & 0xfff)
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch3_tm_control_1[0]=(((r).cmic_cmc_fiforddma_ch3_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc_fiforddma_ch3_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc_fiforddma_ch3_tm_control_1[0]=(((r).cmic_cmc_fiforddma_ch3_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFORDDMA_CH3_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFORDDMA_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_OFFSET 0x00031828

#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFORDDMA_TM_CONTROL_0.
 */
typedef union CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fiforddma_tm_control_0[1];
	uint32_t _cmic_cmc_fiforddma_tm_control_0;
} CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_t;

#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_CLR(r) (r).cmic_cmc_fiforddma_tm_control_0[0] = 0
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc_fiforddma_tm_control_0[0] = d
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_GET(r) (r).cmic_cmc_fiforddma_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc_fiforddma_tm_control_0[0]) & 0xfff)
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc_fiforddma_tm_control_0[0]=(((r).cmic_cmc_fiforddma_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc_fiforddma_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc_fiforddma_tm_control_0[0]=(((r).cmic_cmc_fiforddma_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc_fiforddma_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc_fiforddma_tm_control_0[0]=(((r).cmic_cmc_fiforddma_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc_fiforddma_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc_fiforddma_tm_control_0[0]=(((r).cmic_cmc_fiforddma_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFORDDMA_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFORDDMA_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_OFFSET 0x0003182c

#define CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFORDDMA_TM_CONTROL_1.
 */
typedef union CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fiforddma_tm_control_1[1];
	uint32_t _cmic_cmc_fiforddma_tm_control_1;
} CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_t;

#define CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_CLR(r) (r).cmic_cmc_fiforddma_tm_control_1[0] = 0
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc_fiforddma_tm_control_1[0] = d
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_GET(r) (r).cmic_cmc_fiforddma_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_RDECCBUFF_TM0f_GET(r) (((r).cmic_cmc_fiforddma_tm_control_1[0]) & 0xfff)
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc_fiforddma_tm_control_1[0]=(((r).cmic_cmc_fiforddma_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc_fiforddma_tm_control_1[0]) >> 12) & 0x1)
#define CMIC_CMC_FIFORDDMA_TM_CONTROL_1r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc_fiforddma_tm_control_1[0]=(((r).cmic_cmc_fiforddma_tm_control_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFORDDMA_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_CFG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_CFGr_OFFSET 0x000312c0

#define CMIC_CMC_FIFO_RD_DMA_CFGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_CFG.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_CFGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_cfg[1];
	uint32_t _cmic_cmc_fifo_rd_dma_cfg;
} CMIC_CMC_FIFO_RD_DMA_CFGr_t;

#define CMIC_CMC_FIFO_RD_DMA_CFGr_CLR(r) (r).cmic_cmc_fifo_rd_dma_cfg[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_CFGr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_cfg[0] = d
#define CMIC_CMC_FIFO_RD_DMA_CFGr_GET(r) (r).cmic_cmc_fifo_rd_dma_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ENABLEf_GET(r) (((r).cmic_cmc_fifo_rd_dma_cfg[0]) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ENABLEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_NACK_FATALf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 1) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_NACK_FATALf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_BEAT_COUNTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 2) & 0x1f)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1f << 2)) | ((((uint32_t)f) & 0x1f) << 2))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 7) & 0xf)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_HOST_NUM_ENTRIES_SELf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ENDIANESSf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 11) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ENDIANESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_TIMEOUT_COUNTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 12) & 0x3fff)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_TIMEOUT_COUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x3fff << 12)) | ((((uint32_t)f) & 0x3fff) << 12))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 26) & 0x1f)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_MULTIPLE_SBUS_CMD_SPACINGf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ABORTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_cfg[0]) >> 31) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_CFGr_ABORTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cfg[0]=(((r).cmic_cmc_fifo_rd_dma_cfg[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_CFGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_OFFSET 0x00031330

#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTR.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[1];
	uint32_t _cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr;
} CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_t;

#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_CLR(r) (r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0] = d
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_GET(r) (r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_GET(r) ((r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0])
#define CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr_ADDRESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_cur_hostmem_write_ptr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_CUR_HOSTMEM_WRITE_PTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_OFFSET 0x00031310

#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_eccerr_address[1];
	uint32_t _cmic_cmc_fifo_rd_dma_eccerr_address;
} CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc_fifo_rd_dma_eccerr_address[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_eccerr_address[0] = d
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc_fifo_rd_dma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_fifo_rd_dma_eccerr_address[0])
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_OFFSET 0x00031320

#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_eccerr_control[1];
	uint32_t _cmic_cmc_fifo_rd_dma_eccerr_control;
} CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_t;

#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0] = d
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc_fifo_rd_dma_eccerr_control[0]) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0]=(((r).cmic_cmc_fifo_rd_dma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_eccerr_control[0]=(((r).cmic_cmc_fifo_rd_dma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_OFFSET 0x000312e0

#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_hostmem_start_address[1];
	uint32_t _cmic_cmc_fifo_rd_dma_hostmem_start_address;
} CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0] = d
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0])
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_OFFSET 0x00031354

#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLD.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_hostmem_threshold[1];
	uint32_t _cmic_cmc_fifo_rd_dma_hostmem_threshold;
} CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_t;

#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_CLR(r) (r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0] = d
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_GET(r) (r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_GET(r) ((r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0])
#define CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr_THRESHOLDf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_hostmem_threshold[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_HOSTMEM_THRESHOLDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_OFFSET 0x000312f0

#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEM.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[1];
	uint32_t _cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem;
} CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_t;

#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_CLR(r) (r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] = d
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_GET(r) (r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]) & 0x1ffff)
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0]=(((r).cmic_cmc_fifo_rd_dma_num_of_entries_read_frm_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_READ_FRM_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_OFFSET 0x000312f4

#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEM.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[1];
	uint32_t _cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem;
} CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_t;

#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_CLR(r) (r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0] = d
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_GET(r) (r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_GET(r) (((r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0]) & 0x1ffff)
#define CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr_ENTRYCOUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0]=(((r).cmic_cmc_fifo_rd_dma_num_of_entries_valid_in_hostmem[0] & ~((uint32_t)0x1ffff)) | (((uint32_t)f) & 0x1ffff))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_NUM_OF_ENTRIES_VALID_IN_HOSTMEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_OFFSET 0x00031384

#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_OPCODE.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_opcode[1];
	uint32_t _cmic_cmc_fifo_rd_dma_opcode;
} CMIC_CMC_FIFO_RD_DMA_OPCODEr_t;

#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_CLR(r) (r).cmic_cmc_fifo_rd_dma_opcode[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_opcode[0] = d
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_GET(r) (r).cmic_cmc_fifo_rd_dma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc_fifo_rd_dma_opcode[0])
#define CMIC_CMC_FIFO_RD_DMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_OFFSET 0x000312d0

#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_sbus_start_address[1];
	uint32_t _cmic_cmc_fifo_rd_dma_sbus_start_address;
} CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc_fifo_rd_dma_sbus_start_address[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_sbus_start_address[0] = d
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc_fifo_rd_dma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_fifo_rd_dma_sbus_start_address[0])
#define CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_STATr_OFFSET 0x00031364

#define CMIC_CMC_FIFO_RD_DMA_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_STAT.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_stat[1];
	uint32_t _cmic_cmc_fifo_rd_dma_stat;
} CMIC_CMC_FIFO_RD_DMA_STATr_t;

#define CMIC_CMC_FIFO_RD_DMA_STATr_CLR(r) (r).cmic_cmc_fifo_rd_dma_stat[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_STATr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_stat[0] = d
#define CMIC_CMC_FIFO_RD_DMA_STATr_GET(r) (r).cmic_cmc_fifo_rd_dma_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_STATr_ERRORf_GET(r) (((r).cmic_cmc_fifo_rd_dma_stat[0]) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_ERRORf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_FIFO_RD_DMA_STATr_ACTIVEf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 1) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_ACTIVEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEM_OVERFLOWf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 2) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 3) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_FIFO_RD_DMA_STATr_DONEf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 4) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_DONEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 5) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 6) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 7) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 8) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 9) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 10) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_FIFO_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat[0]) >> 11) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STATr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat[0]=(((r).cmic_cmc_fifo_rd_dma_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FIFO_RD_DMA_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_OFFSET 0x00031374

#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FIFO_RD_DMA_STAT_CLR.
 */
typedef union CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fifo_rd_dma_stat_clr[1];
	uint32_t _cmic_cmc_fifo_rd_dma_stat_clr;
} CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_t;

#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_CLR(r) (r).cmic_cmc_fifo_rd_dma_stat_clr[0] = 0
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_SET(r,d) (r).cmic_cmc_fifo_rd_dma_stat_clr[0] = d
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_GET(r) (r).cmic_cmc_fifo_rd_dma_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_GET(r) (((r).cmic_cmc_fifo_rd_dma_stat_clr[0]) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_OVERFLOWf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat_clr[0]=(((r).cmic_cmc_fifo_rd_dma_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat_clr[0]) >> 1) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_HOSTMEM_TIMEOUTf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat_clr[0]=(((r).cmic_cmc_fifo_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_fifo_rd_dma_stat_clr[0]) >> 2) & 0x1)
#define CMIC_CMC_FIFO_RD_DMA_STAT_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_fifo_rd_dma_stat_clr[0]=(((r).cmic_cmc_fifo_rd_dma_stat_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC_FIFO_RD_DMA_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FSCHAN_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FSCHAN_ADDRESSr_OFFSET 0x00031070

#define CMIC_CMC_FSCHAN_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FSCHAN_ADDRESS.
 */
typedef union CMIC_CMC_FSCHAN_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fschan_address[1];
	uint32_t _cmic_cmc_fschan_address;
} CMIC_CMC_FSCHAN_ADDRESSr_t;

#define CMIC_CMC_FSCHAN_ADDRESSr_CLR(r) (r).cmic_cmc_fschan_address[0] = 0
#define CMIC_CMC_FSCHAN_ADDRESSr_SET(r,d) (r).cmic_cmc_fschan_address[0] = d
#define CMIC_CMC_FSCHAN_ADDRESSr_GET(r) (r).cmic_cmc_fschan_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FSCHAN_ADDRESSr_ADDRRESSf_GET(r) ((r).cmic_cmc_fschan_address[0])
#define CMIC_CMC_FSCHAN_ADDRESSr_ADDRRESSf_SET(r,f) (r).cmic_cmc_fschan_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FSCHAN_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FSCHAN_DATA32
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FSCHAN_DATA32r_OFFSET 0x00031074

#define CMIC_CMC_FSCHAN_DATA32r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FSCHAN_DATA32.
 */
typedef union CMIC_CMC_FSCHAN_DATA32r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fschan_data32[1];
	uint32_t _cmic_cmc_fschan_data32;
} CMIC_CMC_FSCHAN_DATA32r_t;

#define CMIC_CMC_FSCHAN_DATA32r_CLR(r) (r).cmic_cmc_fschan_data32[0] = 0
#define CMIC_CMC_FSCHAN_DATA32r_SET(r,d) (r).cmic_cmc_fschan_data32[0] = d
#define CMIC_CMC_FSCHAN_DATA32r_GET(r) (r).cmic_cmc_fschan_data32[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FSCHAN_DATA32r_DATA32f_GET(r) ((r).cmic_cmc_fschan_data32[0])
#define CMIC_CMC_FSCHAN_DATA32r_DATA32f_SET(r,f) (r).cmic_cmc_fschan_data32[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FSCHAN_DATA32r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FSCHAN_DATA64_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FSCHAN_DATA64_HIr_OFFSET 0x0003107c

#define CMIC_CMC_FSCHAN_DATA64_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FSCHAN_DATA64_HI.
 */
typedef union CMIC_CMC_FSCHAN_DATA64_HIr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fschan_data64_hi[1];
	uint32_t _cmic_cmc_fschan_data64_hi;
} CMIC_CMC_FSCHAN_DATA64_HIr_t;

#define CMIC_CMC_FSCHAN_DATA64_HIr_CLR(r) (r).cmic_cmc_fschan_data64_hi[0] = 0
#define CMIC_CMC_FSCHAN_DATA64_HIr_SET(r,d) (r).cmic_cmc_fschan_data64_hi[0] = d
#define CMIC_CMC_FSCHAN_DATA64_HIr_GET(r) (r).cmic_cmc_fschan_data64_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FSCHAN_DATA64_HIr_DATA64_HIf_GET(r) ((r).cmic_cmc_fschan_data64_hi[0])
#define CMIC_CMC_FSCHAN_DATA64_HIr_DATA64_HIf_SET(r,f) (r).cmic_cmc_fschan_data64_hi[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FSCHAN_DATA64_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FSCHAN_DATA64_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FSCHAN_DATA64_LOr_OFFSET 0x00031078

#define CMIC_CMC_FSCHAN_DATA64_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FSCHAN_DATA64_LO.
 */
typedef union CMIC_CMC_FSCHAN_DATA64_LOr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fschan_data64_lo[1];
	uint32_t _cmic_cmc_fschan_data64_lo;
} CMIC_CMC_FSCHAN_DATA64_LOr_t;

#define CMIC_CMC_FSCHAN_DATA64_LOr_CLR(r) (r).cmic_cmc_fschan_data64_lo[0] = 0
#define CMIC_CMC_FSCHAN_DATA64_LOr_SET(r,d) (r).cmic_cmc_fschan_data64_lo[0] = d
#define CMIC_CMC_FSCHAN_DATA64_LOr_GET(r) (r).cmic_cmc_fschan_data64_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FSCHAN_DATA64_LOr_DATA64_LOf_GET(r) ((r).cmic_cmc_fschan_data64_lo[0])
#define CMIC_CMC_FSCHAN_DATA64_LOr_DATA64_LOf_SET(r,f) (r).cmic_cmc_fschan_data64_lo[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FSCHAN_DATA64_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FSCHAN_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FSCHAN_OPCODEr_OFFSET 0x0003106c

#define CMIC_CMC_FSCHAN_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FSCHAN_OPCODE.
 */
typedef union CMIC_CMC_FSCHAN_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fschan_opcode[1];
	uint32_t _cmic_cmc_fschan_opcode;
} CMIC_CMC_FSCHAN_OPCODEr_t;

#define CMIC_CMC_FSCHAN_OPCODEr_CLR(r) (r).cmic_cmc_fschan_opcode[0] = 0
#define CMIC_CMC_FSCHAN_OPCODEr_SET(r,d) (r).cmic_cmc_fschan_opcode[0] = d
#define CMIC_CMC_FSCHAN_OPCODEr_GET(r) (r).cmic_cmc_fschan_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FSCHAN_OPCODEr_ADDRRESSf_GET(r) ((r).cmic_cmc_fschan_opcode[0])
#define CMIC_CMC_FSCHAN_OPCODEr_ADDRRESSf_SET(r,f) (r).cmic_cmc_fschan_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_FSCHAN_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_FSCHAN_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_FSCHAN_STATUSr_OFFSET 0x00031068

#define CMIC_CMC_FSCHAN_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_FSCHAN_STATUS.
 */
typedef union CMIC_CMC_FSCHAN_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_fschan_status[1];
	uint32_t _cmic_cmc_fschan_status;
} CMIC_CMC_FSCHAN_STATUSr_t;

#define CMIC_CMC_FSCHAN_STATUSr_CLR(r) (r).cmic_cmc_fschan_status[0] = 0
#define CMIC_CMC_FSCHAN_STATUSr_SET(r,d) (r).cmic_cmc_fschan_status[0] = d
#define CMIC_CMC_FSCHAN_STATUSr_GET(r) (r).cmic_cmc_fschan_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_FSCHAN_STATUSr_FSCHAN_BUSYf_GET(r) (((r).cmic_cmc_fschan_status[0]) & 0x1)
#define CMIC_CMC_FSCHAN_STATUSr_FSCHAN_BUSYf_SET(r,f) (r).cmic_cmc_fschan_status[0]=(((r).cmic_cmc_fschan_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC_FSCHAN_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_HOSTMEM_ADDR_REMAP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_OFFSET 0x00031474

#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_HOSTMEM_ADDR_REMAP.
 */
typedef union CMIC_CMC_HOSTMEM_ADDR_REMAPr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_hostmem_addr_remap[1];
	uint32_t _cmic_cmc_hostmem_addr_remap;
} CMIC_CMC_HOSTMEM_ADDR_REMAPr_t;

#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_CLR(r) (r).cmic_cmc_hostmem_addr_remap[0] = 0
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_SET(r,d) (r).cmic_cmc_hostmem_addr_remap[0] = d
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_GET(r) (r).cmic_cmc_hostmem_addr_remap[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_0f_GET(r) (((r).cmic_cmc_hostmem_addr_remap[0]) & 0x3f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_0f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_1f_GET(r) ((((r).cmic_cmc_hostmem_addr_remap[0]) >> 6) & 0x3f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_1f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_2f_GET(r) ((((r).cmic_cmc_hostmem_addr_remap[0]) >> 12) & 0x3f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_2f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_3f_GET(r) ((((r).cmic_cmc_hostmem_addr_remap[0]) >> 18) & 0x3f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_3f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_4f_GET(r) ((((r).cmic_cmc_hostmem_addr_remap[0]) >> 24) & 0x3f)
#define CMIC_CMC_HOSTMEM_ADDR_REMAPr_ADDR_4f_SET(r,f) (r).cmic_cmc_hostmem_addr_remap[0]=(((r).cmic_cmc_hostmem_addr_remap[0] & ~((uint32_t)0x3f << 24)) | ((((uint32_t)f) & 0x3f) << 24))

/*******************************************************************************
 * End of 'CMIC_CMC_HOSTMEM_ADDR_REMAPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT0r_OFFSET 0x00031400

#define CMIC_CMC_IRQ_STAT0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT0.
 */
typedef union CMIC_CMC_IRQ_STAT0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat0[1];
	uint32_t _cmic_cmc_irq_stat0;
} CMIC_CMC_IRQ_STAT0r_t;

#define CMIC_CMC_IRQ_STAT0r_CLR(r) (r).cmic_cmc_irq_stat0[0] = 0
#define CMIC_CMC_IRQ_STAT0r_SET(r,d) (r).cmic_cmc_irq_stat0[0] = d
#define CMIC_CMC_IRQ_STAT0r_GET(r) (r).cmic_cmc_irq_stat0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc_irq_stat0[0]) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 1) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 2) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 3) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 4) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 5) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 6) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_IRQ_STAT0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 7) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_IRQ_STAT0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 8) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_IRQ_STAT0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 9) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_IRQ_STAT0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 10) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_IRQ_STAT0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 11) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_IRQ_STAT0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 12) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_IRQ_STAT0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 13) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_IRQ_STAT0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 14) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_IRQ_STAT0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 15) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 16) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 17) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 18) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 19) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_IRQ_STAT0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 20) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 21) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_IRQ_STAT0r_SW_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 22) & 0xf)
#define CMIC_CMC_IRQ_STAT0r_SW_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 26) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_IRQ_STAT0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 27) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_IRQ_STAT0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 28) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_IRQ_STAT0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 29) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_IRQ_STAT0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_irq_stat0[0]) >> 30) & 0x1)
#define CMIC_CMC_IRQ_STAT0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_irq_stat0[0]=(((r).cmic_cmc_irq_stat0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT1r_OFFSET 0x00031404

#define CMIC_CMC_IRQ_STAT1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT1.
 */
typedef union CMIC_CMC_IRQ_STAT1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat1[1];
	uint32_t _cmic_cmc_irq_stat1;
} CMIC_CMC_IRQ_STAT1r_t;

#define CMIC_CMC_IRQ_STAT1r_CLR(r) (r).cmic_cmc_irq_stat1[0] = 0
#define CMIC_CMC_IRQ_STAT1r_SET(r,d) (r).cmic_cmc_irq_stat1[0] = d
#define CMIC_CMC_IRQ_STAT1r_GET(r) (r).cmic_cmc_irq_stat1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT1r_I2C_INTRf_GET(r) (((r).cmic_cmc_irq_stat1[0]) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_I2C_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 1) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_IRQ_STAT1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 2) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 3) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 4) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_IRQ_STAT1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 5) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_IRQ_STAT1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 6) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_IRQ_STAT1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 7) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_IRQ_STAT1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 8) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_IRQ_STAT1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 9) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_IRQ_STAT1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 10) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_IRQ_STAT1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 11) & 0xff)
#define CMIC_CMC_IRQ_STAT1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC_IRQ_STAT1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 19) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_IRQ_STAT1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 20) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_IRQ_STAT1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 21) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_IRQ_STAT1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 22) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 23) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 24) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 25) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 26) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 27) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_IRQ_STAT1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 28) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_IRQ_STAT1r_SER_INTRf_GET(r) ((((r).cmic_cmc_irq_stat1[0]) >> 29) & 0x1)
#define CMIC_CMC_IRQ_STAT1r_SER_INTRf_SET(r,f) (r).cmic_cmc_irq_stat1[0]=(((r).cmic_cmc_irq_stat1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT2r_OFFSET 0x00031408

#define CMIC_CMC_IRQ_STAT2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT2.
 */
typedef union CMIC_CMC_IRQ_STAT2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat2[1];
	uint32_t _cmic_cmc_irq_stat2;
} CMIC_CMC_IRQ_STAT2r_t;

#define CMIC_CMC_IRQ_STAT2r_CLR(r) (r).cmic_cmc_irq_stat2[0] = 0
#define CMIC_CMC_IRQ_STAT2r_SET(r,d) (r).cmic_cmc_irq_stat2[0] = d
#define CMIC_CMC_IRQ_STAT2r_GET(r) (r).cmic_cmc_irq_stat2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_GET(r) ((r).cmic_cmc_irq_stat2[0])
#define CMIC_CMC_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_SET(r,f) (r).cmic_cmc_irq_stat2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT3r_OFFSET 0x0003140c

#define CMIC_CMC_IRQ_STAT3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT3.
 */
typedef union CMIC_CMC_IRQ_STAT3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat3[1];
	uint32_t _cmic_cmc_irq_stat3;
} CMIC_CMC_IRQ_STAT3r_t;

#define CMIC_CMC_IRQ_STAT3r_CLR(r) (r).cmic_cmc_irq_stat3[0] = 0
#define CMIC_CMC_IRQ_STAT3r_SET(r,d) (r).cmic_cmc_irq_stat3[0] = d
#define CMIC_CMC_IRQ_STAT3r_GET(r) (r).cmic_cmc_irq_stat3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc_irq_stat3[0])
#define CMIC_CMC_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc_irq_stat3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT4r_OFFSET 0x00031410

#define CMIC_CMC_IRQ_STAT4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT4.
 */
typedef union CMIC_CMC_IRQ_STAT4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat4[1];
	uint32_t _cmic_cmc_irq_stat4;
} CMIC_CMC_IRQ_STAT4r_t;

#define CMIC_CMC_IRQ_STAT4r_CLR(r) (r).cmic_cmc_irq_stat4[0] = 0
#define CMIC_CMC_IRQ_STAT4r_SET(r,d) (r).cmic_cmc_irq_stat4[0] = d
#define CMIC_CMC_IRQ_STAT4r_GET(r) (r).cmic_cmc_irq_stat4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc_irq_stat4[0])
#define CMIC_CMC_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc_irq_stat4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT5r_OFFSET 0x000314b0

#define CMIC_CMC_IRQ_STAT5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT5.
 */
typedef union CMIC_CMC_IRQ_STAT5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat5[1];
	uint32_t _cmic_cmc_irq_stat5;
} CMIC_CMC_IRQ_STAT5r_t;

#define CMIC_CMC_IRQ_STAT5r_CLR(r) (r).cmic_cmc_irq_stat5[0] = 0
#define CMIC_CMC_IRQ_STAT5r_SET(r,d) (r).cmic_cmc_irq_stat5[0] = d
#define CMIC_CMC_IRQ_STAT5r_GET(r) (r).cmic_cmc_irq_stat5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc_irq_stat5[0])
#define CMIC_CMC_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc_irq_stat5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_IRQ_STAT6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_IRQ_STAT6r_OFFSET 0x000314b4

#define CMIC_CMC_IRQ_STAT6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_IRQ_STAT6.
 */
typedef union CMIC_CMC_IRQ_STAT6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_irq_stat6[1];
	uint32_t _cmic_cmc_irq_stat6;
} CMIC_CMC_IRQ_STAT6r_t;

#define CMIC_CMC_IRQ_STAT6r_CLR(r) (r).cmic_cmc_irq_stat6[0] = 0
#define CMIC_CMC_IRQ_STAT6r_SET(r,d) (r).cmic_cmc_irq_stat6[0] = d
#define CMIC_CMC_IRQ_STAT6r_GET(r) (r).cmic_cmc_irq_stat6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_cmc_irq_stat6[0])
#define CMIC_CMC_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_cmc_irq_stat6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_IRQ_STAT6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_ADDRESSr_OFFSET 0x00031088

#define CMIC_CMC_MIIM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_ADDRESS.
 */
typedef union CMIC_CMC_MIIM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_address[1];
	uint32_t _cmic_cmc_miim_address;
} CMIC_CMC_MIIM_ADDRESSr_t;

#define CMIC_CMC_MIIM_ADDRESSr_CLR(r) (r).cmic_cmc_miim_address[0] = 0
#define CMIC_CMC_MIIM_ADDRESSr_SET(r,d) (r).cmic_cmc_miim_address[0] = d
#define CMIC_CMC_MIIM_ADDRESSr_GET(r) (r).cmic_cmc_miim_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_cmc_miim_address[0]) & 0xffff)
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_cmc_miim_address[0]=(((r).cmic_cmc_miim_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_cmc_miim_address[0]) >> 16) & 0x1f)
#define CMIC_CMC_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_cmc_miim_address[0]=(((r).cmic_cmc_miim_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_CTRLr_OFFSET 0x0003108c

#define CMIC_CMC_MIIM_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_CTRL.
 */
typedef union CMIC_CMC_MIIM_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_ctrl[1];
	uint32_t _cmic_cmc_miim_ctrl;
} CMIC_CMC_MIIM_CTRLr_t;

#define CMIC_CMC_MIIM_CTRLr_CLR(r) (r).cmic_cmc_miim_ctrl[0] = 0
#define CMIC_CMC_MIIM_CTRLr_SET(r,d) (r).cmic_cmc_miim_ctrl[0] = d
#define CMIC_CMC_MIIM_CTRLr_GET(r) (r).cmic_cmc_miim_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_CTRLr_MIIM_WR_STARTf_GET(r) (((r).cmic_cmc_miim_ctrl[0]) & 0x1)
#define CMIC_CMC_MIIM_CTRLr_MIIM_WR_STARTf_SET(r,f) (r).cmic_cmc_miim_ctrl[0]=(((r).cmic_cmc_miim_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_MIIM_CTRLr_MIIM_RD_STARTf_GET(r) ((((r).cmic_cmc_miim_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC_MIIM_CTRLr_MIIM_RD_STARTf_SET(r,f) (r).cmic_cmc_miim_ctrl[0]=(((r).cmic_cmc_miim_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_PARAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_PARAMr_OFFSET 0x00031080

#define CMIC_CMC_MIIM_PARAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_PARAM.
 */
typedef union CMIC_CMC_MIIM_PARAMr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_param[1];
	uint32_t _cmic_cmc_miim_param;
} CMIC_CMC_MIIM_PARAMr_t;

#define CMIC_CMC_MIIM_PARAMr_CLR(r) (r).cmic_cmc_miim_param[0] = 0
#define CMIC_CMC_MIIM_PARAMr_SET(r,d) (r).cmic_cmc_miim_param[0] = d
#define CMIC_CMC_MIIM_PARAMr_GET(r) (r).cmic_cmc_miim_param[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_PARAMr_PHY_DATAf_GET(r) (((r).cmic_cmc_miim_param[0]) & 0xffff)
#define CMIC_CMC_MIIM_PARAMr_PHY_DATAf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_CMC_MIIM_PARAMr_PHY_IDf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 16) & 0x1f)
#define CMIC_CMC_MIIM_PARAMr_PHY_IDf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_CMC_MIIM_PARAMr_C45_SELf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 21) & 0x1)
#define CMIC_CMC_MIIM_PARAMr_C45_SELf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_MIIM_PARAMr_BUS_IDf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 22) & 0x7)
#define CMIC_CMC_MIIM_PARAMr_BUS_IDf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x7 << 22)) | ((((uint32_t)f) & 0x7) << 22))
#define CMIC_CMC_MIIM_PARAMr_INTERNAL_SELf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 25) & 0x1)
#define CMIC_CMC_MIIM_PARAMr_INTERNAL_SELf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_MIIM_PARAMr_MIIM_CYCLEf_GET(r) ((((r).cmic_cmc_miim_param[0]) >> 29) & 0x7)
#define CMIC_CMC_MIIM_PARAMr_MIIM_CYCLEf_SET(r,f) (r).cmic_cmc_miim_param[0]=(((r).cmic_cmc_miim_param[0] & ~((uint32_t)0x7 << 29)) | ((((uint32_t)f) & 0x7) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_PARAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_READ_DATA
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_READ_DATAr_OFFSET 0x00031084

#define CMIC_CMC_MIIM_READ_DATAr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_READ_DATA.
 */
typedef union CMIC_CMC_MIIM_READ_DATAr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_read_data[1];
	uint32_t _cmic_cmc_miim_read_data;
} CMIC_CMC_MIIM_READ_DATAr_t;

#define CMIC_CMC_MIIM_READ_DATAr_CLR(r) (r).cmic_cmc_miim_read_data[0] = 0
#define CMIC_CMC_MIIM_READ_DATAr_SET(r,d) (r).cmic_cmc_miim_read_data[0] = d
#define CMIC_CMC_MIIM_READ_DATAr_GET(r) (r).cmic_cmc_miim_read_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_READ_DATAr_DATAf_GET(r) (((r).cmic_cmc_miim_read_data[0]) & 0xffff)
#define CMIC_CMC_MIIM_READ_DATAr_DATAf_SET(r,f) (r).cmic_cmc_miim_read_data[0]=(((r).cmic_cmc_miim_read_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_MIIM_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_MIIM_STATr_OFFSET 0x00031090

#define CMIC_CMC_MIIM_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_MIIM_STAT.
 */
typedef union CMIC_CMC_MIIM_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_miim_stat[1];
	uint32_t _cmic_cmc_miim_stat;
} CMIC_CMC_MIIM_STATr_t;

#define CMIC_CMC_MIIM_STATr_CLR(r) (r).cmic_cmc_miim_stat[0] = 0
#define CMIC_CMC_MIIM_STATr_SET(r,d) (r).cmic_cmc_miim_stat[0] = d
#define CMIC_CMC_MIIM_STATr_GET(r) (r).cmic_cmc_miim_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_MIIM_STATr_MIIM_OPN_DONEf_GET(r) (((r).cmic_cmc_miim_stat[0]) & 0x1)
#define CMIC_CMC_MIIM_STATr_MIIM_OPN_DONEf_SET(r,f) (r).cmic_cmc_miim_stat[0]=(((r).cmic_cmc_miim_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC_MIIM_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK0r_OFFSET 0x00031414

#define CMIC_CMC_PCIE_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK0.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask0[1];
	uint32_t _cmic_cmc_pcie_irq_mask0;
} CMIC_CMC_PCIE_IRQ_MASK0r_t;

#define CMIC_CMC_PCIE_IRQ_MASK0r_CLR(r) (r).cmic_cmc_pcie_irq_mask0[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK0r_SET(r,d) (r).cmic_cmc_pcie_irq_mask0[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK0r_GET(r) (r).cmic_cmc_pcie_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc_pcie_irq_mask0[0]) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask0[0]=(((r).cmic_cmc_pcie_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK1r_OFFSET 0x00031418

#define CMIC_CMC_PCIE_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK1.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask1[1];
	uint32_t _cmic_cmc_pcie_irq_mask1;
} CMIC_CMC_PCIE_IRQ_MASK1r_t;

#define CMIC_CMC_PCIE_IRQ_MASK1r_CLR(r) (r).cmic_cmc_pcie_irq_mask1[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK1r_SET(r,d) (r).cmic_cmc_pcie_irq_mask1[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK1r_GET(r) (r).cmic_cmc_pcie_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc_pcie_irq_mask1[0]) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_PCIE_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC_PCIE_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_PCIE_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc_pcie_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC_PCIE_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc_pcie_irq_mask1[0]=(((r).cmic_cmc_pcie_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK2r_OFFSET 0x0003141c

#define CMIC_CMC_PCIE_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK2.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask2[1];
	uint32_t _cmic_cmc_pcie_irq_mask2;
} CMIC_CMC_PCIE_IRQ_MASK2r_t;

#define CMIC_CMC_PCIE_IRQ_MASK2r_CLR(r) (r).cmic_cmc_pcie_irq_mask2[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK2r_SET(r,d) (r).cmic_cmc_pcie_irq_mask2[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK2r_GET(r) (r).cmic_cmc_pcie_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc_pcie_irq_mask2[0])
#define CMIC_CMC_PCIE_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc_pcie_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK3r_OFFSET 0x00031420

#define CMIC_CMC_PCIE_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK3.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask3[1];
	uint32_t _cmic_cmc_pcie_irq_mask3;
} CMIC_CMC_PCIE_IRQ_MASK3r_t;

#define CMIC_CMC_PCIE_IRQ_MASK3r_CLR(r) (r).cmic_cmc_pcie_irq_mask3[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK3r_SET(r,d) (r).cmic_cmc_pcie_irq_mask3[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK3r_GET(r) (r).cmic_cmc_pcie_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc_pcie_irq_mask3[0])
#define CMIC_CMC_PCIE_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc_pcie_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK4r_OFFSET 0x00031424

#define CMIC_CMC_PCIE_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK4.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask4[1];
	uint32_t _cmic_cmc_pcie_irq_mask4;
} CMIC_CMC_PCIE_IRQ_MASK4r_t;

#define CMIC_CMC_PCIE_IRQ_MASK4r_CLR(r) (r).cmic_cmc_pcie_irq_mask4[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK4r_SET(r,d) (r).cmic_cmc_pcie_irq_mask4[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK4r_GET(r) (r).cmic_cmc_pcie_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc_pcie_irq_mask4[0])
#define CMIC_CMC_PCIE_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc_pcie_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK5r_OFFSET 0x000314b8

#define CMIC_CMC_PCIE_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK5.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask5[1];
	uint32_t _cmic_cmc_pcie_irq_mask5;
} CMIC_CMC_PCIE_IRQ_MASK5r_t;

#define CMIC_CMC_PCIE_IRQ_MASK5r_CLR(r) (r).cmic_cmc_pcie_irq_mask5[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK5r_SET(r,d) (r).cmic_cmc_pcie_irq_mask5[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK5r_GET(r) (r).cmic_cmc_pcie_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc_pcie_irq_mask5[0])
#define CMIC_CMC_PCIE_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc_pcie_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_IRQ_MASK6r_OFFSET 0x000314bc

#define CMIC_CMC_PCIE_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_IRQ_MASK6.
 */
typedef union CMIC_CMC_PCIE_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_irq_mask6[1];
	uint32_t _cmic_cmc_pcie_irq_mask6;
} CMIC_CMC_PCIE_IRQ_MASK6r_t;

#define CMIC_CMC_PCIE_IRQ_MASK6r_CLR(r) (r).cmic_cmc_pcie_irq_mask6[0] = 0
#define CMIC_CMC_PCIE_IRQ_MASK6r_SET(r,d) (r).cmic_cmc_pcie_irq_mask6[0] = d
#define CMIC_CMC_PCIE_IRQ_MASK6r_GET(r) (r).cmic_cmc_pcie_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc_pcie_irq_mask6[0])
#define CMIC_CMC_PCIE_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc_pcie_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PCIE_MISCEL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PCIE_MISCELr_OFFSET 0x00031470

#define CMIC_CMC_PCIE_MISCELr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PCIE_MISCEL.
 */
typedef union CMIC_CMC_PCIE_MISCELr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pcie_miscel[1];
	uint32_t _cmic_cmc_pcie_miscel;
} CMIC_CMC_PCIE_MISCELr_t;

#define CMIC_CMC_PCIE_MISCELr_CLR(r) (r).cmic_cmc_pcie_miscel[0] = 0
#define CMIC_CMC_PCIE_MISCELr_SET(r,d) (r).cmic_cmc_pcie_miscel[0] = d
#define CMIC_CMC_PCIE_MISCELr_GET(r) (r).cmic_cmc_pcie_miscel[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PCIE_MISCELr_MSI_PACING_DELAYf_GET(r) (((r).cmic_cmc_pcie_miscel[0]) & 0xf)
#define CMIC_CMC_PCIE_MISCELr_MSI_PACING_DELAYf_SET(r,f) (r).cmic_cmc_pcie_miscel[0]=(((r).cmic_cmc_pcie_miscel[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_CMC_PCIE_MISCELr_ENABLE_MSIf_GET(r) ((((r).cmic_cmc_pcie_miscel[0]) >> 4) & 0x1)
#define CMIC_CMC_PCIE_MISCELr_ENABLE_MSIf_SET(r,f) (r).cmic_cmc_pcie_miscel[0]=(((r).cmic_cmc_pcie_miscel[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_PCIE_MISCELr_MSI_PACING_DELAY_GRANULARITYf_GET(r) ((((r).cmic_cmc_pcie_miscel[0]) >> 5) & 0x7)
#define CMIC_CMC_PCIE_MISCELr_MSI_PACING_DELAY_GRANULARITYf_SET(r,f) (r).cmic_cmc_pcie_miscel[0]=(((r).cmic_cmc_pcie_miscel[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define CMIC_CMC_PCIE_MISCELr_MSI_ADDR_SELf_GET(r) ((((r).cmic_cmc_pcie_miscel[0]) >> 8) & 0x1)
#define CMIC_CMC_PCIE_MISCELr_MSI_ADDR_SELf_SET(r,f) (r).cmic_cmc_pcie_miscel[0]=(((r).cmic_cmc_pcie_miscel[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*******************************************************************************
 * End of 'CMIC_CMC_PCIE_MISCELr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_CH0_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_CH0_RXPKTr_OFFSET 0x00031480

#define CMIC_CMC_PKT_COUNT_CH0_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_CH0_RXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_CH0_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_ch0_rxpkt[1];
	uint32_t _cmic_cmc_pkt_count_ch0_rxpkt;
} CMIC_CMC_PKT_COUNT_CH0_RXPKTr_t;

#define CMIC_CMC_PKT_COUNT_CH0_RXPKTr_CLR(r) (r).cmic_cmc_pkt_count_ch0_rxpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_CH0_RXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_ch0_rxpkt[0] = d
#define CMIC_CMC_PKT_COUNT_CH0_RXPKTr_GET(r) (r).cmic_cmc_pkt_count_ch0_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_CH0_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_ch0_rxpkt[0])
#define CMIC_CMC_PKT_COUNT_CH0_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_ch0_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_CH0_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_CH0_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_CH0_TXPKTr_OFFSET 0x00031484

#define CMIC_CMC_PKT_COUNT_CH0_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_CH0_TXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_CH0_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_ch0_txpkt[1];
	uint32_t _cmic_cmc_pkt_count_ch0_txpkt;
} CMIC_CMC_PKT_COUNT_CH0_TXPKTr_t;

#define CMIC_CMC_PKT_COUNT_CH0_TXPKTr_CLR(r) (r).cmic_cmc_pkt_count_ch0_txpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_CH0_TXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_ch0_txpkt[0] = d
#define CMIC_CMC_PKT_COUNT_CH0_TXPKTr_GET(r) (r).cmic_cmc_pkt_count_ch0_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_CH0_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_ch0_txpkt[0])
#define CMIC_CMC_PKT_COUNT_CH0_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_ch0_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_CH0_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_CH1_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_CH1_RXPKTr_OFFSET 0x00031488

#define CMIC_CMC_PKT_COUNT_CH1_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_CH1_RXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_CH1_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_ch1_rxpkt[1];
	uint32_t _cmic_cmc_pkt_count_ch1_rxpkt;
} CMIC_CMC_PKT_COUNT_CH1_RXPKTr_t;

#define CMIC_CMC_PKT_COUNT_CH1_RXPKTr_CLR(r) (r).cmic_cmc_pkt_count_ch1_rxpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_CH1_RXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_ch1_rxpkt[0] = d
#define CMIC_CMC_PKT_COUNT_CH1_RXPKTr_GET(r) (r).cmic_cmc_pkt_count_ch1_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_CH1_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_ch1_rxpkt[0])
#define CMIC_CMC_PKT_COUNT_CH1_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_ch1_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_CH1_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_CH1_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_CH1_TXPKTr_OFFSET 0x0003148c

#define CMIC_CMC_PKT_COUNT_CH1_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_CH1_TXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_CH1_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_ch1_txpkt[1];
	uint32_t _cmic_cmc_pkt_count_ch1_txpkt;
} CMIC_CMC_PKT_COUNT_CH1_TXPKTr_t;

#define CMIC_CMC_PKT_COUNT_CH1_TXPKTr_CLR(r) (r).cmic_cmc_pkt_count_ch1_txpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_CH1_TXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_ch1_txpkt[0] = d
#define CMIC_CMC_PKT_COUNT_CH1_TXPKTr_GET(r) (r).cmic_cmc_pkt_count_ch1_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_CH1_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_ch1_txpkt[0])
#define CMIC_CMC_PKT_COUNT_CH1_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_ch1_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_CH1_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_CH2_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_CH2_RXPKTr_OFFSET 0x00031490

#define CMIC_CMC_PKT_COUNT_CH2_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_CH2_RXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_CH2_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_ch2_rxpkt[1];
	uint32_t _cmic_cmc_pkt_count_ch2_rxpkt;
} CMIC_CMC_PKT_COUNT_CH2_RXPKTr_t;

#define CMIC_CMC_PKT_COUNT_CH2_RXPKTr_CLR(r) (r).cmic_cmc_pkt_count_ch2_rxpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_CH2_RXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_ch2_rxpkt[0] = d
#define CMIC_CMC_PKT_COUNT_CH2_RXPKTr_GET(r) (r).cmic_cmc_pkt_count_ch2_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_CH2_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_ch2_rxpkt[0])
#define CMIC_CMC_PKT_COUNT_CH2_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_ch2_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_CH2_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_CH2_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_CH2_TXPKTr_OFFSET 0x00031494

#define CMIC_CMC_PKT_COUNT_CH2_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_CH2_TXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_CH2_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_ch2_txpkt[1];
	uint32_t _cmic_cmc_pkt_count_ch2_txpkt;
} CMIC_CMC_PKT_COUNT_CH2_TXPKTr_t;

#define CMIC_CMC_PKT_COUNT_CH2_TXPKTr_CLR(r) (r).cmic_cmc_pkt_count_ch2_txpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_CH2_TXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_ch2_txpkt[0] = d
#define CMIC_CMC_PKT_COUNT_CH2_TXPKTr_GET(r) (r).cmic_cmc_pkt_count_ch2_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_CH2_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_ch2_txpkt[0])
#define CMIC_CMC_PKT_COUNT_CH2_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_ch2_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_CH2_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_CH3_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_CH3_RXPKTr_OFFSET 0x00031498

#define CMIC_CMC_PKT_COUNT_CH3_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_CH3_RXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_CH3_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_ch3_rxpkt[1];
	uint32_t _cmic_cmc_pkt_count_ch3_rxpkt;
} CMIC_CMC_PKT_COUNT_CH3_RXPKTr_t;

#define CMIC_CMC_PKT_COUNT_CH3_RXPKTr_CLR(r) (r).cmic_cmc_pkt_count_ch3_rxpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_CH3_RXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_ch3_rxpkt[0] = d
#define CMIC_CMC_PKT_COUNT_CH3_RXPKTr_GET(r) (r).cmic_cmc_pkt_count_ch3_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_CH3_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_ch3_rxpkt[0])
#define CMIC_CMC_PKT_COUNT_CH3_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_ch3_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_CH3_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_CH3_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_CH3_TXPKTr_OFFSET 0x0003149c

#define CMIC_CMC_PKT_COUNT_CH3_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_CH3_TXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_CH3_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_ch3_txpkt[1];
	uint32_t _cmic_cmc_pkt_count_ch3_txpkt;
} CMIC_CMC_PKT_COUNT_CH3_TXPKTr_t;

#define CMIC_CMC_PKT_COUNT_CH3_TXPKTr_CLR(r) (r).cmic_cmc_pkt_count_ch3_txpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_CH3_TXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_ch3_txpkt[0] = d
#define CMIC_CMC_PKT_COUNT_CH3_TXPKTr_GET(r) (r).cmic_cmc_pkt_count_ch3_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_CH3_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_ch3_txpkt[0])
#define CMIC_CMC_PKT_COUNT_CH3_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_ch3_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_CH3_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_RXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_RXPKTr_OFFSET 0x000314a0

#define CMIC_CMC_PKT_COUNT_RXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_RXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_RXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_rxpkt[1];
	uint32_t _cmic_cmc_pkt_count_rxpkt;
} CMIC_CMC_PKT_COUNT_RXPKTr_t;

#define CMIC_CMC_PKT_COUNT_RXPKTr_CLR(r) (r).cmic_cmc_pkt_count_rxpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_RXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_rxpkt[0] = d
#define CMIC_CMC_PKT_COUNT_RXPKTr_GET(r) (r).cmic_cmc_pkt_count_rxpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_RXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_rxpkt[0])
#define CMIC_CMC_PKT_COUNT_RXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_rxpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_RXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PKT_COUNT_TXPKT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PKT_COUNT_TXPKTr_OFFSET 0x000314a4

#define CMIC_CMC_PKT_COUNT_TXPKTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PKT_COUNT_TXPKT.
 */
typedef union CMIC_CMC_PKT_COUNT_TXPKTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_pkt_count_txpkt[1];
	uint32_t _cmic_cmc_pkt_count_txpkt;
} CMIC_CMC_PKT_COUNT_TXPKTr_t;

#define CMIC_CMC_PKT_COUNT_TXPKTr_CLR(r) (r).cmic_cmc_pkt_count_txpkt[0] = 0
#define CMIC_CMC_PKT_COUNT_TXPKTr_SET(r,d) (r).cmic_cmc_pkt_count_txpkt[0] = d
#define CMIC_CMC_PKT_COUNT_TXPKTr_GET(r) (r).cmic_cmc_pkt_count_txpkt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PKT_COUNT_TXPKTr_COUNTf_GET(r) ((r).cmic_cmc_pkt_count_txpkt[0])
#define CMIC_CMC_PKT_COUNT_TXPKTr_COUNTf_SET(r,f) (r).cmic_cmc_pkt_count_txpkt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PKT_COUNT_TXPKTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PROGRAMMABLE_COS_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PROGRAMMABLE_COS_MASK0r_OFFSET 0x0003119c

#define CMIC_CMC_PROGRAMMABLE_COS_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PROGRAMMABLE_COS_MASK0.
 */
typedef union CMIC_CMC_PROGRAMMABLE_COS_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_programmable_cos_mask0[1];
	uint32_t _cmic_cmc_programmable_cos_mask0;
} CMIC_CMC_PROGRAMMABLE_COS_MASK0r_t;

#define CMIC_CMC_PROGRAMMABLE_COS_MASK0r_CLR(r) (r).cmic_cmc_programmable_cos_mask0[0] = 0
#define CMIC_CMC_PROGRAMMABLE_COS_MASK0r_SET(r,d) (r).cmic_cmc_programmable_cos_mask0[0] = d
#define CMIC_CMC_PROGRAMMABLE_COS_MASK0r_GET(r) (r).cmic_cmc_programmable_cos_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PROGRAMMABLE_COS_MASK0r_COS_MASKf_GET(r) ((r).cmic_cmc_programmable_cos_mask0[0])
#define CMIC_CMC_PROGRAMMABLE_COS_MASK0r_COS_MASKf_SET(r,f) (r).cmic_cmc_programmable_cos_mask0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PROGRAMMABLE_COS_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_PROGRAMMABLE_COS_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_PROGRAMMABLE_COS_MASK1r_OFFSET 0x000311a0

#define CMIC_CMC_PROGRAMMABLE_COS_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_PROGRAMMABLE_COS_MASK1.
 */
typedef union CMIC_CMC_PROGRAMMABLE_COS_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_programmable_cos_mask1[1];
	uint32_t _cmic_cmc_programmable_cos_mask1;
} CMIC_CMC_PROGRAMMABLE_COS_MASK1r_t;

#define CMIC_CMC_PROGRAMMABLE_COS_MASK1r_CLR(r) (r).cmic_cmc_programmable_cos_mask1[0] = 0
#define CMIC_CMC_PROGRAMMABLE_COS_MASK1r_SET(r,d) (r).cmic_cmc_programmable_cos_mask1[0] = d
#define CMIC_CMC_PROGRAMMABLE_COS_MASK1r_GET(r) (r).cmic_cmc_programmable_cos_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_PROGRAMMABLE_COS_MASK1r_COS_MASKf_GET(r) ((r).cmic_cmc_programmable_cos_mask1[0])
#define CMIC_CMC_PROGRAMMABLE_COS_MASK1r_COS_MASKf_SET(r,f) (r).cmic_cmc_programmable_cos_mask1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_PROGRAMMABLE_COS_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_RCPU_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_RCPU_IRQ_MASK0r_OFFSET 0x00031450

#define CMIC_CMC_RCPU_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_RCPU_IRQ_MASK0.
 */
typedef union CMIC_CMC_RCPU_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_rcpu_irq_mask0[1];
	uint32_t _cmic_cmc_rcpu_irq_mask0;
} CMIC_CMC_RCPU_IRQ_MASK0r_t;

#define CMIC_CMC_RCPU_IRQ_MASK0r_CLR(r) (r).cmic_cmc_rcpu_irq_mask0[0] = 0
#define CMIC_CMC_RCPU_IRQ_MASK0r_SET(r,d) (r).cmic_cmc_rcpu_irq_mask0[0] = d
#define CMIC_CMC_RCPU_IRQ_MASK0r_GET(r) (r).cmic_cmc_rcpu_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_RCPU_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc_rcpu_irq_mask0[0]) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_RCPU_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_RCPU_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_RCPU_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_RCPU_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_RCPU_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_RCPU_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_RCPU_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_RCPU_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC_RCPU_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC_RCPU_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_rcpu_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC_RCPU_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_rcpu_irq_mask0[0]=(((r).cmic_cmc_rcpu_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC_RCPU_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CONTROLr_OFFSET 0x00031600

#define CMIC_CMC_SBUSDMA_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CONTROL.
 */
typedef union CMIC_CMC_SBUSDMA_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_control[1];
	uint32_t _cmic_cmc_sbusdma_control;
} CMIC_CMC_SBUSDMA_CONTROLr_t;

#define CMIC_CMC_SBUSDMA_CONTROLr_CLR(r) (r).cmic_cmc_sbusdma_control[0] = 0
#define CMIC_CMC_SBUSDMA_CONTROLr_SET(r,d) (r).cmic_cmc_sbusdma_control[0] = d
#define CMIC_CMC_SBUSDMA_CONTROLr_GET(r) (r).cmic_cmc_sbusdma_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CONTROLr_STARTf_GET(r) (((r).cmic_cmc_sbusdma_control[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_STARTf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_CONTROLr_ABORTf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_ABORTf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_CONTROLr_MODEf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_MODEf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_CONTROLr_DESCRIPTOR_ENDIANESSf_GET(r) ((((r).cmic_cmc_sbusdma_control[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_CONTROLr_DESCRIPTOR_ENDIANESSf_SET(r,f) (r).cmic_cmc_sbusdma_control[0]=(((r).cmic_cmc_sbusdma_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_COUNTr_OFFSET 0x00031608

#define CMIC_CMC_SBUSDMA_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_COUNT.
 */
typedef union CMIC_CMC_SBUSDMA_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_count[1];
	uint32_t _cmic_cmc_sbusdma_count;
} CMIC_CMC_SBUSDMA_COUNTr_t;

#define CMIC_CMC_SBUSDMA_COUNTr_CLR(r) (r).cmic_cmc_sbusdma_count[0] = 0
#define CMIC_CMC_SBUSDMA_COUNTr_SET(r,d) (r).cmic_cmc_sbusdma_count[0] = d
#define CMIC_CMC_SBUSDMA_COUNTr_GET(r) (r).cmic_cmc_sbusdma_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_COUNTr_COUNTf_GET(r) ((r).cmic_cmc_sbusdma_count[0])
#define CMIC_CMC_SBUSDMA_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc_sbusdma_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_OFFSET 0x00031628

#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_desc_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_desc_address;
} CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_desc_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_desc_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_desc_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_desc_address[0])
#define CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_desc_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_DESC_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_OFFSET 0x00031620

#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_hostmem_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_hostmem_address;
} CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_hostmem_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_hostmem_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_hostmem_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_hostmem_address[0])
#define CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_hostmem_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_HOSTMEM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_OFFSET 0x00031630

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNT.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_count[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_count;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr_COUNTf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_OFFSET 0x00031638

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OFFSET 0x0003163c

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODE.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_opcode[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_opcode;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_OFFSET 0x0003162c

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUEST.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_request[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_request;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr_REQUESTf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_request[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_OFFSET 0x00031634

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address;
} CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbusdma_config_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUSDMA_CONFIG_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_OFFSET 0x00031624

#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_cur_sbus_address[1];
	uint32_t _cmic_cmc_sbusdma_cur_sbus_address;
} CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_cur_sbus_address[0] = 0
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_cur_sbus_address[0] = d
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_cur_sbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_cur_sbus_address[0])
#define CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_cur_sbus_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_CUR_SBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_DESC_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_OFFSET 0x00031618

#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_DESC_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_desc_start_address[1];
	uint32_t _cmic_cmc_sbusdma_desc_start_address;
} CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_desc_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_desc_start_address[0] = d
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_desc_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_desc_start_address[0])
#define CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_desc_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_DESC_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_OFFSET 0x00031614

#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_hostmem_start_address[1];
	uint32_t _cmic_cmc_sbusdma_hostmem_start_address;
} CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_hostmem_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_hostmem_start_address[0] = d
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_hostmem_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_hostmem_start_address[0])
#define CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_hostmem_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_HOSTMEM_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_ITER_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_OFFSET 0x000316fc

#define CMIC_CMC_SBUSDMA_ITER_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_ITER_COUNT.
 */
typedef union CMIC_CMC_SBUSDMA_ITER_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_iter_count[1];
	uint32_t _cmic_cmc_sbusdma_iter_count;
} CMIC_CMC_SBUSDMA_ITER_COUNTr_t;

#define CMIC_CMC_SBUSDMA_ITER_COUNTr_CLR(r) (r).cmic_cmc_sbusdma_iter_count[0] = 0
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_SET(r,d) (r).cmic_cmc_sbusdma_iter_count[0] = d
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_GET(r) (r).cmic_cmc_sbusdma_iter_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_TIMERf_GET(r) ((r).cmic_cmc_sbusdma_iter_count[0])
#define CMIC_CMC_SBUSDMA_ITER_COUNTr_TIMERf_SET(r,f) (r).cmic_cmc_sbusdma_iter_count[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_ITER_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_OPCODEr_OFFSET 0x0003160c

#define CMIC_CMC_SBUSDMA_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_OPCODE.
 */
typedef union CMIC_CMC_SBUSDMA_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_opcode[1];
	uint32_t _cmic_cmc_sbusdma_opcode;
} CMIC_CMC_SBUSDMA_OPCODEr_t;

#define CMIC_CMC_SBUSDMA_OPCODEr_CLR(r) (r).cmic_cmc_sbusdma_opcode[0] = 0
#define CMIC_CMC_SBUSDMA_OPCODEr_SET(r,d) (r).cmic_cmc_sbusdma_opcode[0] = d
#define CMIC_CMC_SBUSDMA_OPCODEr_GET(r) (r).cmic_cmc_sbusdma_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_OPCODEr_OPCODEf_GET(r) ((r).cmic_cmc_sbusdma_opcode[0])
#define CMIC_CMC_SBUSDMA_OPCODEr_OPCODEf_SET(r,f) (r).cmic_cmc_sbusdma_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_REQUEST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_REQUESTr_OFFSET 0x00031604

#define CMIC_CMC_SBUSDMA_REQUESTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_REQUEST.
 */
typedef union CMIC_CMC_SBUSDMA_REQUESTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_request[1];
	uint32_t _cmic_cmc_sbusdma_request;
} CMIC_CMC_SBUSDMA_REQUESTr_t;

#define CMIC_CMC_SBUSDMA_REQUESTr_CLR(r) (r).cmic_cmc_sbusdma_request[0] = 0
#define CMIC_CMC_SBUSDMA_REQUESTr_SET(r,d) (r).cmic_cmc_sbusdma_request[0] = d
#define CMIC_CMC_SBUSDMA_REQUESTr_GET(r) (r).cmic_cmc_sbusdma_request[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_REQUESTr_REP_WORDSf_GET(r) (((r).cmic_cmc_sbusdma_request[0]) & 0x1f)
#define CMIC_CMC_SBUSDMA_REQUESTr_REP_WORDSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_WORDSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 5) & 0x1f)
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_WORDSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMRD_ENDIANESSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 10) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMRD_ENDIANESSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMWR_ENDIANESSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 11) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_HOSTMEMWR_ENDIANESSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_SBUSDMA_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 12) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_WORDSWAP_IN_64BIT_SBUSDATAf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_SBUSDMA_REQUESTr_DMA_WR_TO_NULLSPACEf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 13) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_DMA_WR_TO_NULLSPACEf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_SBUSDMA_REQUESTr_PEND_CLOCKSf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 16) & 0xff)
#define CMIC_CMC_SBUSDMA_REQUESTr_PEND_CLOCKSf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_SHIFTf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 24) & 0x1f)
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_SHIFTf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_NOADDf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 29) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_INCR_NOADDf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_SINGLEf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 30) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_REQ_SINGLEf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_CMC_SBUSDMA_REQUESTr_DECRf_GET(r) ((((r).cmic_cmc_sbusdma_request[0]) >> 31) & 0x1)
#define CMIC_CMC_SBUSDMA_REQUESTr_DECRf_SET(r,f) (r).cmic_cmc_sbusdma_request[0]=(((r).cmic_cmc_sbusdma_request[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_REQUESTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_OFFSET 0x00031640

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_debug[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_debug;
} CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_debug[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_debug[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_DESC_DONEf_GET(r) (((r).cmic_cmc_sbusdma_sbusdma_debug[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr_DESC_DONEf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_debug[0]=(((r).cmic_cmc_sbusdma_sbusdma_debug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_OFFSET 0x00031644

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLR.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_debug_clr[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_debug_clr;
} CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_DESC_DONEf_GET(r) (((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_DESC_DONEf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]=(((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_debug_clr[0]=(((r).cmic_cmc_sbusdma_sbusdma_debug_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_DEBUG_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_OFFSET 0x00031648

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_eccerr_address[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_eccerr_address;
} CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0])
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_OFFSET 0x0003164c

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROL.
 */
typedef union CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbusdma_eccerr_control[1];
	uint32_t _cmic_cmc_sbusdma_sbusdma_eccerr_control;
} CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_t;

#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_CLR(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] = 0
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_SET(r,d) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] = d
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_GET(r) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_GET(r) (((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]=(((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_GET(r) ((((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DMARDf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]=(((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]=(((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_GET(r) ((((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_SBUSRDf_SET(r,f) (r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0]=(((r).cmic_cmc_sbusdma_sbusdma_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUSDMA_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_SBUS_START_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_OFFSET 0x00031610

#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_SBUS_START_ADDRESS.
 */
typedef union CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_sbus_start_address[1];
	uint32_t _cmic_cmc_sbusdma_sbus_start_address;
} CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_t;

#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_CLR(r) (r).cmic_cmc_sbusdma_sbus_start_address[0] = 0
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_SET(r,d) (r).cmic_cmc_sbusdma_sbus_start_address[0] = d
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_GET(r) (r).cmic_cmc_sbusdma_sbus_start_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_ADDRESSf_GET(r) ((r).cmic_cmc_sbusdma_sbus_start_address[0])
#define CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr_ADDRESSf_SET(r,f) (r).cmic_cmc_sbusdma_sbus_start_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_SBUS_START_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_STATUSr_OFFSET 0x0003161c

#define CMIC_CMC_SBUSDMA_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_STATUS.
 */
typedef union CMIC_CMC_SBUSDMA_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_status[1];
	uint32_t _cmic_cmc_sbusdma_status;
} CMIC_CMC_SBUSDMA_STATUSr_t;

#define CMIC_CMC_SBUSDMA_STATUSr_CLR(r) (r).cmic_cmc_sbusdma_status[0] = 0
#define CMIC_CMC_SBUSDMA_STATUSr_SET(r,d) (r).cmic_cmc_sbusdma_status[0] = d
#define CMIC_CMC_SBUSDMA_STATUSr_GET(r) (r).cmic_cmc_sbusdma_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_STATUSr_DONEf_GET(r) (((r).cmic_cmc_sbusdma_status[0]) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_DONEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SBUSDMA_STATUSr_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 1) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMWR_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 2) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMWR_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMRD_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 3) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_HOSTMEMRD_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_SBUSDMA_STATUSr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 4) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_BEATCOUNTf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 5) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_BEATCOUNTf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_OPCODEf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 6) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_WRONG_OPCODEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_NACKf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 7) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_NACKf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 8) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_TIMEOUTf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 9) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSACK_TIMEOUTf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_SBUSDMA_STATUSr_DESCRD_ERRORf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 10) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_DESCRD_ERRORf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_SBUSDMA_STATUSr_ACTIVEf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 11) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_ACTIVEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSDMA_ACTIVEf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 12) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_SBUSDMA_ACTIVEf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_SBUSDMA_STATUSr_ECC_2BIT_CHECK_FAILf_GET(r) ((((r).cmic_cmc_sbusdma_status[0]) >> 13) & 0x1)
#define CMIC_CMC_SBUSDMA_STATUSr_ECC_2BIT_CHECK_FAILf_SET(r,f) (r).cmic_cmc_sbusdma_status[0]=(((r).cmic_cmc_sbusdma_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_TIMER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_TIMERr_OFFSET 0x000316f0

#define CMIC_CMC_SBUSDMA_TIMERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_TIMER.
 */
typedef union CMIC_CMC_SBUSDMA_TIMERr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_timer[1];
	uint32_t _cmic_cmc_sbusdma_timer;
} CMIC_CMC_SBUSDMA_TIMERr_t;

#define CMIC_CMC_SBUSDMA_TIMERr_CLR(r) (r).cmic_cmc_sbusdma_timer[0] = 0
#define CMIC_CMC_SBUSDMA_TIMERr_SET(r,d) (r).cmic_cmc_sbusdma_timer[0] = d
#define CMIC_CMC_SBUSDMA_TIMERr_GET(r) (r).cmic_cmc_sbusdma_timer[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_TIMERr_TIMERf_GET(r) ((r).cmic_cmc_sbusdma_timer[0])
#define CMIC_CMC_SBUSDMA_TIMERr_TIMERf_SET(r,f) (r).cmic_cmc_sbusdma_timer[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_TIMERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_TM_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_OFFSET 0x00031800

#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_TM_CONTROL_0.
 */
typedef union CMIC_CMC_SBUSDMA_TM_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_tm_control_0[1];
	uint32_t _cmic_cmc_sbusdma_tm_control_0;
} CMIC_CMC_SBUSDMA_TM_CONTROL_0r_t;

#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_CLR(r) (r).cmic_cmc_sbusdma_tm_control_0[0] = 0
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_SET(r,d) (r).cmic_cmc_sbusdma_tm_control_0[0] = d
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_GET(r) (r).cmic_cmc_sbusdma_tm_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_RDBUFF_TM0f_GET(r) (((r).cmic_cmc_sbusdma_tm_control_0[0]) & 0xfff)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_RDBUFF_TM0f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_0[0]=(((r).cmic_cmc_sbusdma_tm_control_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_RDBUFF_TM1f_GET(r) ((((r).cmic_cmc_sbusdma_tm_control_0[0]) >> 12) & 0xfff)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_RDBUFF_TM1f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_0[0]=(((r).cmic_cmc_sbusdma_tm_control_0[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_RDBUFF_LVM0f_GET(r) ((((r).cmic_cmc_sbusdma_tm_control_0[0]) >> 24) & 0x1)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_RDBUFF_LVM0f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_0[0]=(((r).cmic_cmc_sbusdma_tm_control_0[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_RDBUFF_LVM1f_GET(r) ((((r).cmic_cmc_sbusdma_tm_control_0[0]) >> 25) & 0x1)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_0r_RDBUFF_LVM1f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_0[0]=(((r).cmic_cmc_sbusdma_tm_control_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_TM_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_TM_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_OFFSET 0x00031804

#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_TM_CONTROL_1.
 */
typedef union CMIC_CMC_SBUSDMA_TM_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_tm_control_1[1];
	uint32_t _cmic_cmc_sbusdma_tm_control_1;
} CMIC_CMC_SBUSDMA_TM_CONTROL_1r_t;

#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_CLR(r) (r).cmic_cmc_sbusdma_tm_control_1[0] = 0
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_SET(r,d) (r).cmic_cmc_sbusdma_tm_control_1[0] = d
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_GET(r) (r).cmic_cmc_sbusdma_tm_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_WRBUFF_TM0f_GET(r) (((r).cmic_cmc_sbusdma_tm_control_1[0]) & 0xfff)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_WRBUFF_TM0f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_1[0]=(((r).cmic_cmc_sbusdma_tm_control_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_WRBUFF_TM1f_GET(r) ((((r).cmic_cmc_sbusdma_tm_control_1[0]) >> 12) & 0xfff)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_WRBUFF_TM1f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_1[0]=(((r).cmic_cmc_sbusdma_tm_control_1[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_WRBUFF_LVM0f_GET(r) ((((r).cmic_cmc_sbusdma_tm_control_1[0]) >> 24) & 0x1)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_WRBUFF_LVM0f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_1[0]=(((r).cmic_cmc_sbusdma_tm_control_1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_WRBUFF_LVM1f_GET(r) ((((r).cmic_cmc_sbusdma_tm_control_1[0]) >> 25) & 0x1)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_1r_WRBUFF_LVM1f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_1[0]=(((r).cmic_cmc_sbusdma_tm_control_1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_TM_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SBUSDMA_TM_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_OFFSET 0x0003180c

#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SBUSDMA_TM_CONTROL_2.
 */
typedef union CMIC_CMC_SBUSDMA_TM_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sbusdma_tm_control_2[1];
	uint32_t _cmic_cmc_sbusdma_tm_control_2;
} CMIC_CMC_SBUSDMA_TM_CONTROL_2r_t;

#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_CLR(r) (r).cmic_cmc_sbusdma_tm_control_2[0] = 0
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_SET(r,d) (r).cmic_cmc_sbusdma_tm_control_2[0] = d
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_GET(r) (r).cmic_cmc_sbusdma_tm_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_WRECCBUFF_TM0f_GET(r) (((r).cmic_cmc_sbusdma_tm_control_2[0]) & 0xfff)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_WRECCBUFF_TM0f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_2[0]=(((r).cmic_cmc_sbusdma_tm_control_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_RDECCBUFF_TM0f_GET(r) ((((r).cmic_cmc_sbusdma_tm_control_2[0]) >> 12) & 0xfff)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_RDECCBUFF_TM0f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_2[0]=(((r).cmic_cmc_sbusdma_tm_control_2[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_WRECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc_sbusdma_tm_control_2[0]) >> 24) & 0x1)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_WRECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_2[0]=(((r).cmic_cmc_sbusdma_tm_control_2[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_RDECCBUFF_LVM0f_GET(r) ((((r).cmic_cmc_sbusdma_tm_control_2[0]) >> 25) & 0x1)
#define CMIC_CMC_SBUSDMA_TM_CONTROL_2r_RDECCBUFF_LVM0f_SET(r,f) (r).cmic_cmc_sbusdma_tm_control_2[0]=(((r).cmic_cmc_sbusdma_tm_control_2[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_CMC_SBUSDMA_TM_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET 0x00031004

#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNT.
 */
typedef union CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_ack_data_beat_count[1];
	uint32_t _cmic_cmc_schan_ack_data_beat_count;
} CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_t;

#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_CLR(r) (r).cmic_cmc_schan_ack_data_beat_count[0] = 0
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_SET(r,d) (r).cmic_cmc_schan_ack_data_beat_count[0] = d
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_GET(r) (r).cmic_cmc_schan_ack_data_beat_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_GET(r) (((r).cmic_cmc_schan_ack_data_beat_count[0]) & 0x1f)
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_SET(r,f) (r).cmic_cmc_schan_ack_data_beat_count[0]=(((r).cmic_cmc_schan_ack_data_beat_count[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_GET(r) ((((r).cmic_cmc_schan_ack_data_beat_count[0]) >> 5) & 0x7ffffff)
#define CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_SET(r,f) (r).cmic_cmc_schan_ack_data_beat_count[0]=(((r).cmic_cmc_schan_ack_data_beat_count[0] & ~((uint32_t)0x7ffffff << 5)) | ((((uint32_t)f) & 0x7ffffff) << 5))

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_ACK_DATA_BEAT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_CTRLr_OFFSET 0x00031000

#define CMIC_CMC_SCHAN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_CTRL.
 */
typedef union CMIC_CMC_SCHAN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_ctrl[1];
	uint32_t _cmic_cmc_schan_ctrl;
} CMIC_CMC_SCHAN_CTRLr_t;

#define CMIC_CMC_SCHAN_CTRLr_CLR(r) (r).cmic_cmc_schan_ctrl[0] = 0
#define CMIC_CMC_SCHAN_CTRLr_SET(r,d) (r).cmic_cmc_schan_ctrl[0] = d
#define CMIC_CMC_SCHAN_CTRLr_GET(r) (r).cmic_cmc_schan_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_CTRLr_MSG_STARTf_GET(r) (((r).cmic_cmc_schan_ctrl[0]) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_MSG_STARTf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SCHAN_CTRLr_MSG_DONEf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 1) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_MSG_DONEf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_SCHAN_CTRLr_ABORTf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 2) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_ABORTf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_SCHAN_CTRLr_SER_CHECK_FAILf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 20) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_SER_CHECK_FAILf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_SCHAN_CTRLr_NACKf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 21) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_NACKf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_SCHAN_CTRLr_TIMEOUTf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 22) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_TIMEOUTf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_SCHAN_CTRLr_SCHAN_ERRORf_GET(r) ((((r).cmic_cmc_schan_ctrl[0]) >> 23) & 0x1)
#define CMIC_CMC_SCHAN_CTRLr_SCHAN_ERRORf_SET(r,f) (r).cmic_cmc_schan_ctrl[0]=(((r).cmic_cmc_schan_ctrl[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_ERR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_ERRr_OFFSET 0x00031008

#define CMIC_CMC_SCHAN_ERRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_ERR.
 */
typedef union CMIC_CMC_SCHAN_ERRr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_err[1];
	uint32_t _cmic_cmc_schan_err;
} CMIC_CMC_SCHAN_ERRr_t;

#define CMIC_CMC_SCHAN_ERRr_CLR(r) (r).cmic_cmc_schan_err[0] = 0
#define CMIC_CMC_SCHAN_ERRr_SET(r,d) (r).cmic_cmc_schan_err[0] = d
#define CMIC_CMC_SCHAN_ERRr_GET(r) (r).cmic_cmc_schan_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_ERRr_NACKf_GET(r) (((r).cmic_cmc_schan_err[0]) & 0x1)
#define CMIC_CMC_SCHAN_ERRr_NACKf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_SCHAN_ERRr_ERR_CODEf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 4) & 0x3)
#define CMIC_CMC_SCHAN_ERRr_ERR_CODEf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define CMIC_CMC_SCHAN_ERRr_ERRBITf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 6) & 0x1)
#define CMIC_CMC_SCHAN_ERRr_ERRBITf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_SCHAN_ERRr_DATA_LENf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 7) & 0x7f)
#define CMIC_CMC_SCHAN_ERRr_DATA_LENf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define CMIC_CMC_SCHAN_ERRr_SRC_PORTf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 14) & 0x3f)
#define CMIC_CMC_SCHAN_ERRr_SRC_PORTf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3f << 14)) | ((((uint32_t)f) & 0x3f) << 14))
#define CMIC_CMC_SCHAN_ERRr_DST_PORTf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 20) & 0x3f)
#define CMIC_CMC_SCHAN_ERRr_DST_PORTf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3f << 20)) | ((((uint32_t)f) & 0x3f) << 20))
#define CMIC_CMC_SCHAN_ERRr_OP_CODEf_GET(r) ((((r).cmic_cmc_schan_err[0]) >> 26) & 0x3f)
#define CMIC_CMC_SCHAN_ERRr_OP_CODEf_SET(r,f) (r).cmic_cmc_schan_err[0]=(((r).cmic_cmc_schan_err[0] & ~((uint32_t)0x3f << 26)) | ((((uint32_t)f) & 0x3f) << 26))

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SCHAN_MESSAGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SCHAN_MESSAGEr_OFFSET 0x0003100c

#define CMIC_CMC_SCHAN_MESSAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SCHAN_MESSAGE.
 */
typedef union CMIC_CMC_SCHAN_MESSAGEr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_schan_message[1];
	uint32_t _cmic_cmc_schan_message;
} CMIC_CMC_SCHAN_MESSAGEr_t;

#define CMIC_CMC_SCHAN_MESSAGEr_CLR(r) (r).cmic_cmc_schan_message[0] = 0
#define CMIC_CMC_SCHAN_MESSAGEr_SET(r,d) (r).cmic_cmc_schan_message[0] = d
#define CMIC_CMC_SCHAN_MESSAGEr_GET(r) (r).cmic_cmc_schan_message[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SCHAN_MESSAGEr_DATAf_GET(r) ((r).cmic_cmc_schan_message[0])
#define CMIC_CMC_SCHAN_MESSAGEr_DATAf_SET(r,f) (r).cmic_cmc_schan_message[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_SCHAN_MESSAGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_STATr_OFFSET 0x0003110c

#define CMIC_CMC_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_STAT.
 */
typedef union CMIC_CMC_STATr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_stat[1];
	uint32_t _cmic_cmc_stat;
} CMIC_CMC_STATr_t;

#define CMIC_CMC_STATr_CLR(r) (r).cmic_cmc_stat[0] = 0
#define CMIC_CMC_STATr_SET(r,d) (r).cmic_cmc_stat[0] = d
#define CMIC_CMC_STATr_GET(r) (r).cmic_cmc_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_STATr_PEND_BRESP_COUNTf_GET(r) (((r).cmic_cmc_stat[0]) & 0x7)
#define CMIC_CMC_STATr_PEND_BRESP_COUNTf_SET(r,f) (r).cmic_cmc_stat[0]=(((r).cmic_cmc_stat[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*******************************************************************************
 * End of 'CMIC_CMC_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_SW_INTR_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_SW_INTR_CONFIGr_OFFSET 0x000314a8

#define CMIC_CMC_SW_INTR_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_SW_INTR_CONFIG.
 */
typedef union CMIC_CMC_SW_INTR_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_cmc_sw_intr_config[1];
	uint32_t _cmic_cmc_sw_intr_config;
} CMIC_CMC_SW_INTR_CONFIGr_t;

#define CMIC_CMC_SW_INTR_CONFIGr_CLR(r) (r).cmic_cmc_sw_intr_config[0] = 0
#define CMIC_CMC_SW_INTR_CONFIGr_SET(r,d) (r).cmic_cmc_sw_intr_config[0] = d
#define CMIC_CMC_SW_INTR_CONFIGr_GET(r) (r).cmic_cmc_sw_intr_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_GET(r) (((r).cmic_cmc_sw_intr_config[0]) & 0x3)
#define CMIC_CMC_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_SET(r,f) (r).cmic_cmc_sw_intr_config[0]=(((r).cmic_cmc_sw_intr_config[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define CMIC_CMC_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_GET(r) ((((r).cmic_cmc_sw_intr_config[0]) >> 2) & 0x1)
#define CMIC_CMC_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_SET(r,f) (r).cmic_cmc_sw_intr_config[0]=(((r).cmic_cmc_sw_intr_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_CMC_SW_INTR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC0_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC0_IRQ_MASK0r_OFFSET 0x00031428

#define CMIC_CMC_UC0_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC0_IRQ_MASK0.
 */
typedef union CMIC_CMC_UC0_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc0_irq_mask0[1];
	uint32_t _cmic_cmc_uc0_irq_mask0;
} CMIC_CMC_UC0_IRQ_MASK0r_t;

#define CMIC_CMC_UC0_IRQ_MASK0r_CLR(r) (r).cmic_cmc_uc0_irq_mask0[0] = 0
#define CMIC_CMC_UC0_IRQ_MASK0r_SET(r,d) (r).cmic_cmc_uc0_irq_mask0[0] = d
#define CMIC_CMC_UC0_IRQ_MASK0r_GET(r) (r).cmic_cmc_uc0_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC0_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc_uc0_irq_mask0[0]) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_UC0_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_UC0_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_UC0_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_UC0_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_UC0_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_UC0_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_UC0_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_UC0_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_UC0_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_UC0_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC_UC0_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC_UC0_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_UC0_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask0[0]=(((r).cmic_cmc_uc0_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC_UC0_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC0_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC0_IRQ_MASK1r_OFFSET 0x0003142c

#define CMIC_CMC_UC0_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC0_IRQ_MASK1.
 */
typedef union CMIC_CMC_UC0_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc0_irq_mask1[1];
	uint32_t _cmic_cmc_uc0_irq_mask1;
} CMIC_CMC_UC0_IRQ_MASK1r_t;

#define CMIC_CMC_UC0_IRQ_MASK1r_CLR(r) (r).cmic_cmc_uc0_irq_mask1[0] = 0
#define CMIC_CMC_UC0_IRQ_MASK1r_SET(r,d) (r).cmic_cmc_uc0_irq_mask1[0] = d
#define CMIC_CMC_UC0_IRQ_MASK1r_GET(r) (r).cmic_cmc_uc0_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC0_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc_uc0_irq_mask1[0]) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_UC0_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_UC0_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_UC0_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_UC0_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_UC0_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_UC0_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_UC0_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_UC0_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_UC0_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_UC0_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_UC0_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC_UC0_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC_UC0_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_UC0_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_UC0_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_UC0_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_UC0_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_UC0_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_UC0_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_UC0_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_UC0_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_UC0_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_UC0_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc_uc0_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC_UC0_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc_uc0_irq_mask1[0]=(((r).cmic_cmc_uc0_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC_UC0_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC0_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC0_IRQ_MASK2r_OFFSET 0x00031430

#define CMIC_CMC_UC0_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC0_IRQ_MASK2.
 */
typedef union CMIC_CMC_UC0_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc0_irq_mask2[1];
	uint32_t _cmic_cmc_uc0_irq_mask2;
} CMIC_CMC_UC0_IRQ_MASK2r_t;

#define CMIC_CMC_UC0_IRQ_MASK2r_CLR(r) (r).cmic_cmc_uc0_irq_mask2[0] = 0
#define CMIC_CMC_UC0_IRQ_MASK2r_SET(r,d) (r).cmic_cmc_uc0_irq_mask2[0] = d
#define CMIC_CMC_UC0_IRQ_MASK2r_GET(r) (r).cmic_cmc_uc0_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC0_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc_uc0_irq_mask2[0])
#define CMIC_CMC_UC0_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc_uc0_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC0_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC0_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC0_IRQ_MASK3r_OFFSET 0x00031434

#define CMIC_CMC_UC0_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC0_IRQ_MASK3.
 */
typedef union CMIC_CMC_UC0_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc0_irq_mask3[1];
	uint32_t _cmic_cmc_uc0_irq_mask3;
} CMIC_CMC_UC0_IRQ_MASK3r_t;

#define CMIC_CMC_UC0_IRQ_MASK3r_CLR(r) (r).cmic_cmc_uc0_irq_mask3[0] = 0
#define CMIC_CMC_UC0_IRQ_MASK3r_SET(r,d) (r).cmic_cmc_uc0_irq_mask3[0] = d
#define CMIC_CMC_UC0_IRQ_MASK3r_GET(r) (r).cmic_cmc_uc0_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC0_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc_uc0_irq_mask3[0])
#define CMIC_CMC_UC0_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc_uc0_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC0_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC0_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC0_IRQ_MASK4r_OFFSET 0x00031438

#define CMIC_CMC_UC0_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC0_IRQ_MASK4.
 */
typedef union CMIC_CMC_UC0_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc0_irq_mask4[1];
	uint32_t _cmic_cmc_uc0_irq_mask4;
} CMIC_CMC_UC0_IRQ_MASK4r_t;

#define CMIC_CMC_UC0_IRQ_MASK4r_CLR(r) (r).cmic_cmc_uc0_irq_mask4[0] = 0
#define CMIC_CMC_UC0_IRQ_MASK4r_SET(r,d) (r).cmic_cmc_uc0_irq_mask4[0] = d
#define CMIC_CMC_UC0_IRQ_MASK4r_GET(r) (r).cmic_cmc_uc0_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC0_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc_uc0_irq_mask4[0])
#define CMIC_CMC_UC0_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc_uc0_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC0_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC0_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC0_IRQ_MASK5r_OFFSET 0x000314c0

#define CMIC_CMC_UC0_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC0_IRQ_MASK5.
 */
typedef union CMIC_CMC_UC0_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc0_irq_mask5[1];
	uint32_t _cmic_cmc_uc0_irq_mask5;
} CMIC_CMC_UC0_IRQ_MASK5r_t;

#define CMIC_CMC_UC0_IRQ_MASK5r_CLR(r) (r).cmic_cmc_uc0_irq_mask5[0] = 0
#define CMIC_CMC_UC0_IRQ_MASK5r_SET(r,d) (r).cmic_cmc_uc0_irq_mask5[0] = d
#define CMIC_CMC_UC0_IRQ_MASK5r_GET(r) (r).cmic_cmc_uc0_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC0_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc_uc0_irq_mask5[0])
#define CMIC_CMC_UC0_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc_uc0_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC0_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC0_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC0_IRQ_MASK6r_OFFSET 0x000314c4

#define CMIC_CMC_UC0_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC0_IRQ_MASK6.
 */
typedef union CMIC_CMC_UC0_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc0_irq_mask6[1];
	uint32_t _cmic_cmc_uc0_irq_mask6;
} CMIC_CMC_UC0_IRQ_MASK6r_t;

#define CMIC_CMC_UC0_IRQ_MASK6r_CLR(r) (r).cmic_cmc_uc0_irq_mask6[0] = 0
#define CMIC_CMC_UC0_IRQ_MASK6r_SET(r,d) (r).cmic_cmc_uc0_irq_mask6[0] = d
#define CMIC_CMC_UC0_IRQ_MASK6r_GET(r) (r).cmic_cmc_uc0_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC0_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc_uc0_irq_mask6[0])
#define CMIC_CMC_UC0_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc_uc0_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC0_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC1_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC1_IRQ_MASK0r_OFFSET 0x0003143c

#define CMIC_CMC_UC1_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC1_IRQ_MASK0.
 */
typedef union CMIC_CMC_UC1_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc1_irq_mask0[1];
	uint32_t _cmic_cmc_uc1_irq_mask0;
} CMIC_CMC_UC1_IRQ_MASK0r_t;

#define CMIC_CMC_UC1_IRQ_MASK0r_CLR(r) (r).cmic_cmc_uc1_irq_mask0[0] = 0
#define CMIC_CMC_UC1_IRQ_MASK0r_SET(r,d) (r).cmic_cmc_uc1_irq_mask0[0] = d
#define CMIC_CMC_UC1_IRQ_MASK0r_GET(r) (r).cmic_cmc_uc1_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC1_IRQ_MASK0r_SBUSDMA_CH1_DONEf_GET(r) (((r).cmic_cmc_uc1_irq_mask0[0]) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_SBUSDMA_CH1_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_UC1_IRQ_MASK0r_SBUSDMA_CH0_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 1) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_SBUSDMA_CH0_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_UC1_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 2) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_FIFO_CH3_DMA_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_UC1_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 3) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_FIFO_CH2_DMA_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_UC1_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 4) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_FIFO_CH1_DMA_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_UC1_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 5) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_FIFO_CH0_DMA_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_UC1_IRQ_MASK0r_SBUSDMA_CH2_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 6) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_SBUSDMA_CH2_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_UC1_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 7) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH3_DESC_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 8) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH3_DESC_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH3_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 9) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH3_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH2_DESC_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 10) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH2_DESC_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH2_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 11) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH2_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH1_DESC_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 12) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH1_DESC_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH1_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 13) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH1_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH0_DESC_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 14) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH0_DESC_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH0_CHAIN_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 15) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH0_CHAIN_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 16) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH3_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 17) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH2_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 18) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH1_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 19) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH0_INTR_COALESCING_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_UC1_IRQ_MASK0r_SCHAN_OP_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 20) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_SCHAN_OP_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_UC1_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 21) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CROSS_COUPLED_MEMORYDMA_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_UC1_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 22) & 0xf)
#define CMIC_CMC_UC1_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0xf << 22)) | ((((uint32_t)f) & 0xf) << 22))
#define CMIC_CMC_UC1_IRQ_MASK0r_SBUSDMA_ECCERRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 26) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_SBUSDMA_ECCERRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 27) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH0_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 28) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH1_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 29) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH2_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_CMC_UC1_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask0[0]) >> 30) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK0r_CH3_DESC_CONTROLLED_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask0[0]=(((r).cmic_cmc_uc1_irq_mask0[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_CMC_UC1_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC1_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC1_IRQ_MASK1r_OFFSET 0x00031440

#define CMIC_CMC_UC1_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC1_IRQ_MASK1.
 */
typedef union CMIC_CMC_UC1_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc1_irq_mask1[1];
	uint32_t _cmic_cmc_uc1_irq_mask1;
} CMIC_CMC_UC1_IRQ_MASK1r_t;

#define CMIC_CMC_UC1_IRQ_MASK1r_CLR(r) (r).cmic_cmc_uc1_irq_mask1[0] = 0
#define CMIC_CMC_UC1_IRQ_MASK1r_SET(r,d) (r).cmic_cmc_uc1_irq_mask1[0] = d
#define CMIC_CMC_UC1_IRQ_MASK1r_GET(r) (r).cmic_cmc_uc1_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC1_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_cmc_uc1_irq_mask1[0]) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CMC_UC1_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_CMC_UC1_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_CMC_UC1_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_CMC_UC1_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_CMC_UC1_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_CMC_UC1_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_CMC_UC1_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_CMC_UC1_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_CMC_UC1_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_CMC_UC1_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_CMC_UC1_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_CMC_UC1_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_CMC_UC1_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_CMC_UC1_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_CMC_UC1_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_CMC_UC1_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_CMC_UC1_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_CMC_UC1_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_CMC_UC1_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_CMC_UC1_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_CMC_UC1_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_CMC_UC1_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_CMC_UC1_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_cmc_uc1_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_CMC_UC1_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_cmc_uc1_irq_mask1[0]=(((r).cmic_cmc_uc1_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_CMC_UC1_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC1_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC1_IRQ_MASK2r_OFFSET 0x00031444

#define CMIC_CMC_UC1_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC1_IRQ_MASK2.
 */
typedef union CMIC_CMC_UC1_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc1_irq_mask2[1];
	uint32_t _cmic_cmc_uc1_irq_mask2;
} CMIC_CMC_UC1_IRQ_MASK2r_t;

#define CMIC_CMC_UC1_IRQ_MASK2r_CLR(r) (r).cmic_cmc_uc1_irq_mask2[0] = 0
#define CMIC_CMC_UC1_IRQ_MASK2r_SET(r,d) (r).cmic_cmc_uc1_irq_mask2[0] = d
#define CMIC_CMC_UC1_IRQ_MASK2r_GET(r) (r).cmic_cmc_uc1_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC1_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_cmc_uc1_irq_mask2[0])
#define CMIC_CMC_UC1_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_cmc_uc1_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC1_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC1_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC1_IRQ_MASK3r_OFFSET 0x00031448

#define CMIC_CMC_UC1_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC1_IRQ_MASK3.
 */
typedef union CMIC_CMC_UC1_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc1_irq_mask3[1];
	uint32_t _cmic_cmc_uc1_irq_mask3;
} CMIC_CMC_UC1_IRQ_MASK3r_t;

#define CMIC_CMC_UC1_IRQ_MASK3r_CLR(r) (r).cmic_cmc_uc1_irq_mask3[0] = 0
#define CMIC_CMC_UC1_IRQ_MASK3r_SET(r,d) (r).cmic_cmc_uc1_irq_mask3[0] = d
#define CMIC_CMC_UC1_IRQ_MASK3r_GET(r) (r).cmic_cmc_uc1_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC1_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_cmc_uc1_irq_mask3[0])
#define CMIC_CMC_UC1_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_cmc_uc1_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC1_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC1_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC1_IRQ_MASK4r_OFFSET 0x0003144c

#define CMIC_CMC_UC1_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC1_IRQ_MASK4.
 */
typedef union CMIC_CMC_UC1_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc1_irq_mask4[1];
	uint32_t _cmic_cmc_uc1_irq_mask4;
} CMIC_CMC_UC1_IRQ_MASK4r_t;

#define CMIC_CMC_UC1_IRQ_MASK4r_CLR(r) (r).cmic_cmc_uc1_irq_mask4[0] = 0
#define CMIC_CMC_UC1_IRQ_MASK4r_SET(r,d) (r).cmic_cmc_uc1_irq_mask4[0] = d
#define CMIC_CMC_UC1_IRQ_MASK4r_GET(r) (r).cmic_cmc_uc1_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC1_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_cmc_uc1_irq_mask4[0])
#define CMIC_CMC_UC1_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_cmc_uc1_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC1_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC1_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC1_IRQ_MASK5r_OFFSET 0x000314c8

#define CMIC_CMC_UC1_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC1_IRQ_MASK5.
 */
typedef union CMIC_CMC_UC1_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc1_irq_mask5[1];
	uint32_t _cmic_cmc_uc1_irq_mask5;
} CMIC_CMC_UC1_IRQ_MASK5r_t;

#define CMIC_CMC_UC1_IRQ_MASK5r_CLR(r) (r).cmic_cmc_uc1_irq_mask5[0] = 0
#define CMIC_CMC_UC1_IRQ_MASK5r_SET(r,d) (r).cmic_cmc_uc1_irq_mask5[0] = d
#define CMIC_CMC_UC1_IRQ_MASK5r_GET(r) (r).cmic_cmc_uc1_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC1_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_cmc_uc1_irq_mask5[0])
#define CMIC_CMC_UC1_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_cmc_uc1_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC1_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CMC_UC1_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CMC_UC1_IRQ_MASK6r_OFFSET 0x000314cc

#define CMIC_CMC_UC1_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CMC_UC1_IRQ_MASK6.
 */
typedef union CMIC_CMC_UC1_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_cmc_uc1_irq_mask6[1];
	uint32_t _cmic_cmc_uc1_irq_mask6;
} CMIC_CMC_UC1_IRQ_MASK6r_t;

#define CMIC_CMC_UC1_IRQ_MASK6r_CLR(r) (r).cmic_cmc_uc1_irq_mask6[0] = 0
#define CMIC_CMC_UC1_IRQ_MASK6r_SET(r,d) (r).cmic_cmc_uc1_irq_mask6[0] = d
#define CMIC_CMC_UC1_IRQ_MASK6r_GET(r) (r).cmic_cmc_uc1_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CMC_UC1_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_cmc_uc1_irq_mask6[0])
#define CMIC_CMC_UC1_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_cmc_uc1_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_CMC_UC1_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_BSPI_BIGENDIAN
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_BSPI_BIGENDIANr_OFFSET 0x00010238

#define CMIC_COMMON_BSPI_BIGENDIANr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_BSPI_BIGENDIAN.
 */
typedef union CMIC_COMMON_BSPI_BIGENDIANr_s {
	uint32_t v[1];
	uint32_t cmic_common_bspi_bigendian[1];
	uint32_t _cmic_common_bspi_bigendian;
} CMIC_COMMON_BSPI_BIGENDIANr_t;

#define CMIC_COMMON_BSPI_BIGENDIANr_CLR(r) (r).cmic_common_bspi_bigendian[0] = 0
#define CMIC_COMMON_BSPI_BIGENDIANr_SET(r,d) (r).cmic_common_bspi_bigendian[0] = d
#define CMIC_COMMON_BSPI_BIGENDIANr_GET(r) (r).cmic_common_bspi_bigendian[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_BSPI_BIGENDIANr_ENDIANESSf_GET(r) (((r).cmic_common_bspi_bigendian[0]) & 0x1)
#define CMIC_COMMON_BSPI_BIGENDIANr_ENDIANESSf_SET(r,f) (r).cmic_common_bspi_bigendian[0]=(((r).cmic_common_bspi_bigendian[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_COMMON_BSPI_BIGENDIANr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_I2C_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_I2C_PIO_ENDIANESSr_OFFSET 0x000101fc

#define CMIC_COMMON_I2C_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_I2C_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_I2C_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_i2c_pio_endianess[1];
	uint32_t _cmic_common_i2c_pio_endianess;
} CMIC_COMMON_I2C_PIO_ENDIANESSr_t;

#define CMIC_COMMON_I2C_PIO_ENDIANESSr_CLR(r) (r).cmic_common_i2c_pio_endianess[0] = 0
#define CMIC_COMMON_I2C_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_i2c_pio_endianess[0] = d
#define CMIC_COMMON_I2C_PIO_ENDIANESSr_GET(r) (r).cmic_common_i2c_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_I2C_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_i2c_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_I2C_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_i2c_pio_endianess[0]=(((r).cmic_common_i2c_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_COMMON_I2C_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_MIIM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_MIIM_ADDRESSr_OFFSET 0x00010088

#define CMIC_COMMON_MIIM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_MIIM_ADDRESS.
 */
typedef union CMIC_COMMON_MIIM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_miim_address[1];
	uint32_t _cmic_common_miim_address;
} CMIC_COMMON_MIIM_ADDRESSr_t;

#define CMIC_COMMON_MIIM_ADDRESSr_CLR(r) (r).cmic_common_miim_address[0] = 0
#define CMIC_COMMON_MIIM_ADDRESSr_SET(r,d) (r).cmic_common_miim_address[0] = d
#define CMIC_COMMON_MIIM_ADDRESSr_GET(r) (r).cmic_common_miim_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_MIIM_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_common_miim_address[0]) & 0xffff)
#define CMIC_COMMON_MIIM_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_common_miim_address[0]=(((r).cmic_common_miim_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_COMMON_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_common_miim_address[0]) >> 16) & 0x1f)
#define CMIC_COMMON_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_common_miim_address[0]=(((r).cmic_common_miim_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))

/*******************************************************************************
 * End of 'CMIC_COMMON_MIIM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_MIIM_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_MIIM_CTRLr_OFFSET 0x0001008c

#define CMIC_COMMON_MIIM_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_MIIM_CTRL.
 */
typedef union CMIC_COMMON_MIIM_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_common_miim_ctrl[1];
	uint32_t _cmic_common_miim_ctrl;
} CMIC_COMMON_MIIM_CTRLr_t;

#define CMIC_COMMON_MIIM_CTRLr_CLR(r) (r).cmic_common_miim_ctrl[0] = 0
#define CMIC_COMMON_MIIM_CTRLr_SET(r,d) (r).cmic_common_miim_ctrl[0] = d
#define CMIC_COMMON_MIIM_CTRLr_GET(r) (r).cmic_common_miim_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_MIIM_CTRLr_MIIM_WR_STARTf_GET(r) (((r).cmic_common_miim_ctrl[0]) & 0x1)
#define CMIC_COMMON_MIIM_CTRLr_MIIM_WR_STARTf_SET(r,f) (r).cmic_common_miim_ctrl[0]=(((r).cmic_common_miim_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_COMMON_MIIM_CTRLr_MIIM_RD_STARTf_GET(r) ((((r).cmic_common_miim_ctrl[0]) >> 1) & 0x1)
#define CMIC_COMMON_MIIM_CTRLr_MIIM_RD_STARTf_SET(r,f) (r).cmic_common_miim_ctrl[0]=(((r).cmic_common_miim_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_COMMON_MIIM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_MIIM_PARAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_MIIM_PARAMr_OFFSET 0x00010080

#define CMIC_COMMON_MIIM_PARAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_MIIM_PARAM.
 */
typedef union CMIC_COMMON_MIIM_PARAMr_s {
	uint32_t v[1];
	uint32_t cmic_common_miim_param[1];
	uint32_t _cmic_common_miim_param;
} CMIC_COMMON_MIIM_PARAMr_t;

#define CMIC_COMMON_MIIM_PARAMr_CLR(r) (r).cmic_common_miim_param[0] = 0
#define CMIC_COMMON_MIIM_PARAMr_SET(r,d) (r).cmic_common_miim_param[0] = d
#define CMIC_COMMON_MIIM_PARAMr_GET(r) (r).cmic_common_miim_param[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_MIIM_PARAMr_PHY_DATAf_GET(r) (((r).cmic_common_miim_param[0]) & 0xffff)
#define CMIC_COMMON_MIIM_PARAMr_PHY_DATAf_SET(r,f) (r).cmic_common_miim_param[0]=(((r).cmic_common_miim_param[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_COMMON_MIIM_PARAMr_PHY_IDf_GET(r) ((((r).cmic_common_miim_param[0]) >> 16) & 0x1f)
#define CMIC_COMMON_MIIM_PARAMr_PHY_IDf_SET(r,f) (r).cmic_common_miim_param[0]=(((r).cmic_common_miim_param[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_COMMON_MIIM_PARAMr_C45_SELf_GET(r) ((((r).cmic_common_miim_param[0]) >> 21) & 0x1)
#define CMIC_COMMON_MIIM_PARAMr_C45_SELf_SET(r,f) (r).cmic_common_miim_param[0]=(((r).cmic_common_miim_param[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_COMMON_MIIM_PARAMr_BUS_IDf_GET(r) ((((r).cmic_common_miim_param[0]) >> 22) & 0x7)
#define CMIC_COMMON_MIIM_PARAMr_BUS_IDf_SET(r,f) (r).cmic_common_miim_param[0]=(((r).cmic_common_miim_param[0] & ~((uint32_t)0x7 << 22)) | ((((uint32_t)f) & 0x7) << 22))
#define CMIC_COMMON_MIIM_PARAMr_INTERNAL_SELf_GET(r) ((((r).cmic_common_miim_param[0]) >> 25) & 0x1)
#define CMIC_COMMON_MIIM_PARAMr_INTERNAL_SELf_SET(r,f) (r).cmic_common_miim_param[0]=(((r).cmic_common_miim_param[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_COMMON_MIIM_PARAMr_MIIM_CYCLEf_GET(r) ((((r).cmic_common_miim_param[0]) >> 29) & 0x7)
#define CMIC_COMMON_MIIM_PARAMr_MIIM_CYCLEf_SET(r,f) (r).cmic_common_miim_param[0]=(((r).cmic_common_miim_param[0] & ~((uint32_t)0x7 << 29)) | ((((uint32_t)f) & 0x7) << 29))

/*******************************************************************************
 * End of 'CMIC_COMMON_MIIM_PARAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_MIIM_READ_DATA
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_MIIM_READ_DATAr_OFFSET 0x00010084

#define CMIC_COMMON_MIIM_READ_DATAr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_MIIM_READ_DATA.
 */
typedef union CMIC_COMMON_MIIM_READ_DATAr_s {
	uint32_t v[1];
	uint32_t cmic_common_miim_read_data[1];
	uint32_t _cmic_common_miim_read_data;
} CMIC_COMMON_MIIM_READ_DATAr_t;

#define CMIC_COMMON_MIIM_READ_DATAr_CLR(r) (r).cmic_common_miim_read_data[0] = 0
#define CMIC_COMMON_MIIM_READ_DATAr_SET(r,d) (r).cmic_common_miim_read_data[0] = d
#define CMIC_COMMON_MIIM_READ_DATAr_GET(r) (r).cmic_common_miim_read_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_MIIM_READ_DATAr_DATAf_GET(r) (((r).cmic_common_miim_read_data[0]) & 0xffff)
#define CMIC_COMMON_MIIM_READ_DATAr_DATAf_SET(r,f) (r).cmic_common_miim_read_data[0]=(((r).cmic_common_miim_read_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_COMMON_MIIM_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_MIIM_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_MIIM_STATr_OFFSET 0x00010090

#define CMIC_COMMON_MIIM_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_MIIM_STAT.
 */
typedef union CMIC_COMMON_MIIM_STATr_s {
	uint32_t v[1];
	uint32_t cmic_common_miim_stat[1];
	uint32_t _cmic_common_miim_stat;
} CMIC_COMMON_MIIM_STATr_t;

#define CMIC_COMMON_MIIM_STATr_CLR(r) (r).cmic_common_miim_stat[0] = 0
#define CMIC_COMMON_MIIM_STATr_SET(r,d) (r).cmic_common_miim_stat[0] = d
#define CMIC_COMMON_MIIM_STATr_GET(r) (r).cmic_common_miim_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_MIIM_STATr_MIIM_OPN_DONEf_GET(r) (((r).cmic_common_miim_stat[0]) & 0x1)
#define CMIC_COMMON_MIIM_STATr_MIIM_OPN_DONEf_SET(r,f) (r).cmic_common_miim_stat[0]=(((r).cmic_common_miim_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_COMMON_MIIM_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_PCIE_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_OFFSET 0x000101ec

#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_PCIE_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_PCIE_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_pcie_pio_endianess[1];
	uint32_t _cmic_common_pcie_pio_endianess;
} CMIC_COMMON_PCIE_PIO_ENDIANESSr_t;

#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_CLR(r) (r).cmic_common_pcie_pio_endianess[0] = 0
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_pcie_pio_endianess[0] = d
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_GET(r) (r).cmic_common_pcie_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_pcie_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_PCIE_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_pcie_pio_endianess[0]=(((r).cmic_common_pcie_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_COMMON_PCIE_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_RPE_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_RPE_PIO_ENDIANESSr_OFFSET 0x00010200

#define CMIC_COMMON_RPE_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_RPE_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_RPE_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_rpe_pio_endianess[1];
	uint32_t _cmic_common_rpe_pio_endianess;
} CMIC_COMMON_RPE_PIO_ENDIANESSr_t;

#define CMIC_COMMON_RPE_PIO_ENDIANESSr_CLR(r) (r).cmic_common_rpe_pio_endianess[0] = 0
#define CMIC_COMMON_RPE_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_rpe_pio_endianess[0] = d
#define CMIC_COMMON_RPE_PIO_ENDIANESSr_GET(r) (r).cmic_common_rpe_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_RPE_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_rpe_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_RPE_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_rpe_pio_endianess[0]=(((r).cmic_common_rpe_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_COMMON_RPE_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_OFFSET 0x00010004

#define CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNT.
 */
typedef union CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_s {
	uint32_t v[1];
	uint32_t cmic_common_schan_ack_data_beat_count[1];
	uint32_t _cmic_common_schan_ack_data_beat_count;
} CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_t;

#define CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_CLR(r) (r).cmic_common_schan_ack_data_beat_count[0] = 0
#define CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_SET(r,d) (r).cmic_common_schan_ack_data_beat_count[0] = d
#define CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_GET(r) (r).cmic_common_schan_ack_data_beat_count[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_GET(r) (((r).cmic_common_schan_ack_data_beat_count[0]) & 0x1f)
#define CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_BEAT_COUNTf_SET(r,f) (r).cmic_common_schan_ack_data_beat_count[0]=(((r).cmic_common_schan_ack_data_beat_count[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_GET(r) ((((r).cmic_common_schan_ack_data_beat_count[0]) >> 5) & 0x7ffffff)
#define CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr_RESERVED_0f_SET(r,f) (r).cmic_common_schan_ack_data_beat_count[0]=(((r).cmic_common_schan_ack_data_beat_count[0] & ~((uint32_t)0x7ffffff << 5)) | ((((uint32_t)f) & 0x7ffffff) << 5))

/*******************************************************************************
 * End of 'CMIC_COMMON_SCHAN_ACK_DATA_BEAT_COUNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_SCHAN_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_SCHAN_CTRLr_OFFSET 0x00010000

#define CMIC_COMMON_SCHAN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_SCHAN_CTRL.
 */
typedef union CMIC_COMMON_SCHAN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_common_schan_ctrl[1];
	uint32_t _cmic_common_schan_ctrl;
} CMIC_COMMON_SCHAN_CTRLr_t;

#define CMIC_COMMON_SCHAN_CTRLr_CLR(r) (r).cmic_common_schan_ctrl[0] = 0
#define CMIC_COMMON_SCHAN_CTRLr_SET(r,d) (r).cmic_common_schan_ctrl[0] = d
#define CMIC_COMMON_SCHAN_CTRLr_GET(r) (r).cmic_common_schan_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_SCHAN_CTRLr_MSG_STARTf_GET(r) (((r).cmic_common_schan_ctrl[0]) & 0x1)
#define CMIC_COMMON_SCHAN_CTRLr_MSG_STARTf_SET(r,f) (r).cmic_common_schan_ctrl[0]=(((r).cmic_common_schan_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_COMMON_SCHAN_CTRLr_MSG_DONEf_GET(r) ((((r).cmic_common_schan_ctrl[0]) >> 1) & 0x1)
#define CMIC_COMMON_SCHAN_CTRLr_MSG_DONEf_SET(r,f) (r).cmic_common_schan_ctrl[0]=(((r).cmic_common_schan_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_COMMON_SCHAN_CTRLr_ABORTf_GET(r) ((((r).cmic_common_schan_ctrl[0]) >> 2) & 0x1)
#define CMIC_COMMON_SCHAN_CTRLr_ABORTf_SET(r,f) (r).cmic_common_schan_ctrl[0]=(((r).cmic_common_schan_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_COMMON_SCHAN_CTRLr_SER_CHECK_FAILf_GET(r) ((((r).cmic_common_schan_ctrl[0]) >> 20) & 0x1)
#define CMIC_COMMON_SCHAN_CTRLr_SER_CHECK_FAILf_SET(r,f) (r).cmic_common_schan_ctrl[0]=(((r).cmic_common_schan_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_COMMON_SCHAN_CTRLr_NACKf_GET(r) ((((r).cmic_common_schan_ctrl[0]) >> 21) & 0x1)
#define CMIC_COMMON_SCHAN_CTRLr_NACKf_SET(r,f) (r).cmic_common_schan_ctrl[0]=(((r).cmic_common_schan_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_COMMON_SCHAN_CTRLr_TIMEOUTf_GET(r) ((((r).cmic_common_schan_ctrl[0]) >> 22) & 0x1)
#define CMIC_COMMON_SCHAN_CTRLr_TIMEOUTf_SET(r,f) (r).cmic_common_schan_ctrl[0]=(((r).cmic_common_schan_ctrl[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_COMMON_SCHAN_CTRLr_SCHAN_ERRORf_GET(r) ((((r).cmic_common_schan_ctrl[0]) >> 23) & 0x1)
#define CMIC_COMMON_SCHAN_CTRLr_SCHAN_ERRORf_SET(r,f) (r).cmic_common_schan_ctrl[0]=(((r).cmic_common_schan_ctrl[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))

/*******************************************************************************
 * End of 'CMIC_COMMON_SCHAN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_SCHAN_ERR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_SCHAN_ERRr_OFFSET 0x00010008

#define CMIC_COMMON_SCHAN_ERRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_SCHAN_ERR.
 */
typedef union CMIC_COMMON_SCHAN_ERRr_s {
	uint32_t v[1];
	uint32_t cmic_common_schan_err[1];
	uint32_t _cmic_common_schan_err;
} CMIC_COMMON_SCHAN_ERRr_t;

#define CMIC_COMMON_SCHAN_ERRr_CLR(r) (r).cmic_common_schan_err[0] = 0
#define CMIC_COMMON_SCHAN_ERRr_SET(r,d) (r).cmic_common_schan_err[0] = d
#define CMIC_COMMON_SCHAN_ERRr_GET(r) (r).cmic_common_schan_err[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_SCHAN_ERRr_NACKf_GET(r) (((r).cmic_common_schan_err[0]) & 0x1)
#define CMIC_COMMON_SCHAN_ERRr_NACKf_SET(r,f) (r).cmic_common_schan_err[0]=(((r).cmic_common_schan_err[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_COMMON_SCHAN_ERRr_ERR_CODEf_GET(r) ((((r).cmic_common_schan_err[0]) >> 4) & 0x3)
#define CMIC_COMMON_SCHAN_ERRr_ERR_CODEf_SET(r,f) (r).cmic_common_schan_err[0]=(((r).cmic_common_schan_err[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define CMIC_COMMON_SCHAN_ERRr_ERRBITf_GET(r) ((((r).cmic_common_schan_err[0]) >> 6) & 0x1)
#define CMIC_COMMON_SCHAN_ERRr_ERRBITf_SET(r,f) (r).cmic_common_schan_err[0]=(((r).cmic_common_schan_err[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_COMMON_SCHAN_ERRr_DATA_LENf_GET(r) ((((r).cmic_common_schan_err[0]) >> 7) & 0x7f)
#define CMIC_COMMON_SCHAN_ERRr_DATA_LENf_SET(r,f) (r).cmic_common_schan_err[0]=(((r).cmic_common_schan_err[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define CMIC_COMMON_SCHAN_ERRr_SRC_PORTf_GET(r) ((((r).cmic_common_schan_err[0]) >> 14) & 0x3f)
#define CMIC_COMMON_SCHAN_ERRr_SRC_PORTf_SET(r,f) (r).cmic_common_schan_err[0]=(((r).cmic_common_schan_err[0] & ~((uint32_t)0x3f << 14)) | ((((uint32_t)f) & 0x3f) << 14))
#define CMIC_COMMON_SCHAN_ERRr_DST_PORTf_GET(r) ((((r).cmic_common_schan_err[0]) >> 20) & 0x3f)
#define CMIC_COMMON_SCHAN_ERRr_DST_PORTf_SET(r,f) (r).cmic_common_schan_err[0]=(((r).cmic_common_schan_err[0] & ~((uint32_t)0x3f << 20)) | ((((uint32_t)f) & 0x3f) << 20))
#define CMIC_COMMON_SCHAN_ERRr_OP_CODEf_GET(r) ((((r).cmic_common_schan_err[0]) >> 26) & 0x3f)
#define CMIC_COMMON_SCHAN_ERRr_OP_CODEf_SET(r,f) (r).cmic_common_schan_err[0]=(((r).cmic_common_schan_err[0] & ~((uint32_t)0x3f << 26)) | ((((uint32_t)f) & 0x3f) << 26))

/*******************************************************************************
 * End of 'CMIC_COMMON_SCHAN_ERRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_SCHAN_MESSAGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_SCHAN_MESSAGEr_OFFSET 0x0001000c

#define CMIC_COMMON_SCHAN_MESSAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_SCHAN_MESSAGE.
 */
typedef union CMIC_COMMON_SCHAN_MESSAGEr_s {
	uint32_t v[1];
	uint32_t cmic_common_schan_message[1];
	uint32_t _cmic_common_schan_message;
} CMIC_COMMON_SCHAN_MESSAGEr_t;

#define CMIC_COMMON_SCHAN_MESSAGEr_CLR(r) (r).cmic_common_schan_message[0] = 0
#define CMIC_COMMON_SCHAN_MESSAGEr_SET(r,d) (r).cmic_common_schan_message[0] = d
#define CMIC_COMMON_SCHAN_MESSAGEr_GET(r) (r).cmic_common_schan_message[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_SCHAN_MESSAGEr_DATAf_GET(r) ((r).cmic_common_schan_message[0])
#define CMIC_COMMON_SCHAN_MESSAGEr_DATAf_SET(r,f) (r).cmic_common_schan_message[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_COMMON_SCHAN_MESSAGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_SPI_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_SPI_PIO_ENDIANESSr_OFFSET 0x000101f8

#define CMIC_COMMON_SPI_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_SPI_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_SPI_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_spi_pio_endianess[1];
	uint32_t _cmic_common_spi_pio_endianess;
} CMIC_COMMON_SPI_PIO_ENDIANESSr_t;

#define CMIC_COMMON_SPI_PIO_ENDIANESSr_CLR(r) (r).cmic_common_spi_pio_endianess[0] = 0
#define CMIC_COMMON_SPI_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_spi_pio_endianess[0] = d
#define CMIC_COMMON_SPI_PIO_ENDIANESSr_GET(r) (r).cmic_common_spi_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_SPI_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_spi_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_SPI_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_spi_pio_endianess[0]=(((r).cmic_common_spi_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_COMMON_SPI_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_STRAP_STATUS_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_STRAP_STATUS_0r_OFFSET 0x00010240

#define CMIC_COMMON_STRAP_STATUS_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_STRAP_STATUS_0.
 */
typedef union CMIC_COMMON_STRAP_STATUS_0r_s {
	uint32_t v[1];
	uint32_t cmic_common_strap_status_0[1];
	uint32_t _cmic_common_strap_status_0;
} CMIC_COMMON_STRAP_STATUS_0r_t;

#define CMIC_COMMON_STRAP_STATUS_0r_CLR(r) (r).cmic_common_strap_status_0[0] = 0
#define CMIC_COMMON_STRAP_STATUS_0r_SET(r,d) (r).cmic_common_strap_status_0[0] = d
#define CMIC_COMMON_STRAP_STATUS_0r_GET(r) (r).cmic_common_strap_status_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_PCIE_PRESENTf_GET(r) (((r).cmic_common_strap_status_0[0]) & 0x1)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_PCIE_PRESENTf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_MCS_PRESENTf_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 1) & 0x1)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_MCS_PRESENTf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_RESET_SEQf_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 2) & 0x3)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_RESET_SEQf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_EXT_UC_PRESENTf_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 4) & 0x1)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_EXT_UC_PRESENTf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_EXT_UC_IS_SPIf_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 5) & 0x1)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_EXT_UC_IS_SPIf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_SPI_CODE_SIZEf_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 6) & 0x3)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_SPI_CODE_SIZEf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_SPI_MASTER_CLK_DIVf_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 8) & 0x3)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_SPI_MASTER_CLK_DIVf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_I2C_SA0f_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 10) & 0x1)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_I2C_SA0f_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_I2C_SA1f_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 11) & 0x1)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_I2C_SA1f_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_I2C_DEBUG_MODEf_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 12) & 0x1)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_I2C_DEBUG_MODEf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_EEPROM_LOAD_ENABLEf_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 13) & 0x1)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_EEPROM_LOAD_ENABLEf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_CHIPID_TO_SPI_SLAVEf_GET(r) ((((r).cmic_common_strap_status_0[0]) >> 14) & 0x7)
#define CMIC_COMMON_STRAP_STATUS_0r_STRAP_CMICM_CHIPID_TO_SPI_SLAVEf_SET(r,f) (r).cmic_common_strap_status_0[0]=(((r).cmic_common_strap_status_0[0] & ~((uint32_t)0x7 << 14)) | ((((uint32_t)f) & 0x7) << 14))

/*******************************************************************************
 * End of 'CMIC_COMMON_STRAP_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_STRAP_STATUS_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_STRAP_STATUS_1r_OFFSET 0x00010244

#define CMIC_COMMON_STRAP_STATUS_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_STRAP_STATUS_1.
 */
typedef union CMIC_COMMON_STRAP_STATUS_1r_s {
	uint32_t v[1];
	uint32_t cmic_common_strap_status_1[1];
	uint32_t _cmic_common_strap_status_1;
} CMIC_COMMON_STRAP_STATUS_1r_t;

#define CMIC_COMMON_STRAP_STATUS_1r_CLR(r) (r).cmic_common_strap_status_1[0] = 0
#define CMIC_COMMON_STRAP_STATUS_1r_SET(r,d) (r).cmic_common_strap_status_1[0] = d
#define CMIC_COMMON_STRAP_STATUS_1r_GET(r) (r).cmic_common_strap_status_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_STRAP_STATUS_1r_STRAP_CMICM_LED0_RETIMINGFLOPSf_GET(r) (((r).cmic_common_strap_status_1[0]) & 0x1ff)
#define CMIC_COMMON_STRAP_STATUS_1r_STRAP_CMICM_LED0_RETIMINGFLOPSf_SET(r,f) (r).cmic_common_strap_status_1[0]=(((r).cmic_common_strap_status_1[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))
#define CMIC_COMMON_STRAP_STATUS_1r_STRAP_CMICM_LED1_RETIMINGFLOPSf_GET(r) ((((r).cmic_common_strap_status_1[0]) >> 9) & 0x1ff)
#define CMIC_COMMON_STRAP_STATUS_1r_STRAP_CMICM_LED1_RETIMINGFLOPSf_SET(r,f) (r).cmic_common_strap_status_1[0]=(((r).cmic_common_strap_status_1[0] & ~((uint32_t)0x1ff << 9)) | ((((uint32_t)f) & 0x1ff) << 9))
#define CMIC_COMMON_STRAP_STATUS_1r_OTP_TO_CMICM_PCIE_MAX_LINK_SPEEDf_GET(r) ((((r).cmic_common_strap_status_1[0]) >> 18) & 0x3)
#define CMIC_COMMON_STRAP_STATUS_1r_OTP_TO_CMICM_PCIE_MAX_LINK_SPEEDf_SET(r,f) (r).cmic_common_strap_status_1[0]=(((r).cmic_common_strap_status_1[0] & ~((uint32_t)0x3 << 18)) | ((((uint32_t)f) & 0x3) << 18))
#define CMIC_COMMON_STRAP_STATUS_1r_OTP_TO_CMICM_PCIE_MAX_LINK_WIDTHf_GET(r) ((((r).cmic_common_strap_status_1[0]) >> 20) & 0x3)
#define CMIC_COMMON_STRAP_STATUS_1r_OTP_TO_CMICM_PCIE_MAX_LINK_WIDTHf_SET(r,f) (r).cmic_common_strap_status_1[0]=(((r).cmic_common_strap_status_1[0] & ~((uint32_t)0x3 << 20)) | ((((uint32_t)f) & 0x3) << 20))
#define CMIC_COMMON_STRAP_STATUS_1r_STRAP_CMICM_LED2_RETIMINGFLOPSf_GET(r) ((((r).cmic_common_strap_status_1[0]) >> 22) & 0x1ff)
#define CMIC_COMMON_STRAP_STATUS_1r_STRAP_CMICM_LED2_RETIMINGFLOPSf_SET(r,f) (r).cmic_common_strap_status_1[0]=(((r).cmic_common_strap_status_1[0] & ~((uint32_t)0x1ff << 22)) | ((((uint32_t)f) & 0x1ff) << 22))

/*******************************************************************************
 * End of 'CMIC_COMMON_STRAP_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_UC0_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_OFFSET 0x000101f0

#define CMIC_COMMON_UC0_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_UC0_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_UC0_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_uc0_pio_endianess[1];
	uint32_t _cmic_common_uc0_pio_endianess;
} CMIC_COMMON_UC0_PIO_ENDIANESSr_t;

#define CMIC_COMMON_UC0_PIO_ENDIANESSr_CLR(r) (r).cmic_common_uc0_pio_endianess[0] = 0
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_uc0_pio_endianess[0] = d
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_GET(r) (r).cmic_common_uc0_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_uc0_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_UC0_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_uc0_pio_endianess[0]=(((r).cmic_common_uc0_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_COMMON_UC0_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_COMMON_UC1_PIO_ENDIANESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_COMMON_UC1_PIO_ENDIANESSr_OFFSET 0x000101f4

#define CMIC_COMMON_UC1_PIO_ENDIANESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_COMMON_UC1_PIO_ENDIANESS.
 */
typedef union CMIC_COMMON_UC1_PIO_ENDIANESSr_s {
	uint32_t v[1];
	uint32_t cmic_common_uc1_pio_endianess[1];
	uint32_t _cmic_common_uc1_pio_endianess;
} CMIC_COMMON_UC1_PIO_ENDIANESSr_t;

#define CMIC_COMMON_UC1_PIO_ENDIANESSr_CLR(r) (r).cmic_common_uc1_pio_endianess[0] = 0
#define CMIC_COMMON_UC1_PIO_ENDIANESSr_SET(r,d) (r).cmic_common_uc1_pio_endianess[0] = d
#define CMIC_COMMON_UC1_PIO_ENDIANESSr_GET(r) (r).cmic_common_uc1_pio_endianess[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_COMMON_UC1_PIO_ENDIANESSr_ENDIANESSf_GET(r) (((r).cmic_common_uc1_pio_endianess[0]) & 0x1)
#define CMIC_COMMON_UC1_PIO_ENDIANESSr_ENDIANESSf_SET(r,f) (r).cmic_common_uc1_pio_endianess[0]=(((r).cmic_common_uc1_pio_endianess[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_COMMON_UC1_PIO_ENDIANESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_CPS_RESET
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_CPS_RESETr_OFFSET 0x00010220

#define CMIC_CPS_RESETr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_CPS_RESET.
 */
typedef union CMIC_CPS_RESETr_s {
	uint32_t v[1];
	uint32_t cmic_cps_reset[1];
	uint32_t _cmic_cps_reset;
} CMIC_CPS_RESETr_t;

#define CMIC_CPS_RESETr_CLR(r) (r).cmic_cps_reset[0] = 0
#define CMIC_CPS_RESETr_SET(r,d) (r).cmic_cps_reset[0] = d
#define CMIC_CPS_RESETr_GET(r) (r).cmic_cps_reset[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_CPS_RESETr_CPS_RESETf_GET(r) (((r).cmic_cps_reset[0]) & 0x1)
#define CMIC_CPS_RESETr_CPS_RESETf_SET(r,f) (r).cmic_cps_reset[0]=(((r).cmic_cps_reset[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_CPS_RESETr_CHIP_SOFT_RESETf_GET(r) ((((r).cmic_cps_reset[0]) >> 1) & 0x1)
#define CMIC_CPS_RESETr_CHIP_SOFT_RESETf_SET(r,f) (r).cmic_cps_reset[0]=(((r).cmic_cps_reset[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_CPS_RESETr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_DEV_REV_ID
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_DEV_REV_IDr_OFFSET 0x00010224

#define CMIC_DEV_REV_IDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_DEV_REV_ID.
 */
typedef union CMIC_DEV_REV_IDr_s {
	uint32_t v[1];
	uint32_t cmic_dev_rev_id[1];
	uint32_t _cmic_dev_rev_id;
} CMIC_DEV_REV_IDr_t;

#define CMIC_DEV_REV_IDr_CLR(r) (r).cmic_dev_rev_id[0] = 0
#define CMIC_DEV_REV_IDr_SET(r,d) (r).cmic_dev_rev_id[0] = d
#define CMIC_DEV_REV_IDr_GET(r) (r).cmic_dev_rev_id[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_DEV_REV_IDr_DEV_IDf_GET(r) (((r).cmic_dev_rev_id[0]) & 0xffff)
#define CMIC_DEV_REV_IDr_DEV_IDf_SET(r,f) (r).cmic_dev_rev_id[0]=(((r).cmic_dev_rev_id[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_DEV_REV_IDr_REV_IDf_GET(r) ((((r).cmic_dev_rev_id[0]) >> 16) & 0xff)
#define CMIC_DEV_REV_IDr_REV_IDf_SET(r,f) (r).cmic_dev_rev_id[0]=(((r).cmic_dev_rev_id[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))

/*******************************************************************************
 * End of 'CMIC_DEV_REV_IDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FINE_GRAIN_COUNTERS_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FINE_GRAIN_COUNTERS_CTRLr_OFFSET 0x00025000

#define CMIC_FINE_GRAIN_COUNTERS_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FINE_GRAIN_COUNTERS_CTRL.
 */
typedef union CMIC_FINE_GRAIN_COUNTERS_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_fine_grain_counters_ctrl[1];
	uint32_t _cmic_fine_grain_counters_ctrl;
} CMIC_FINE_GRAIN_COUNTERS_CTRLr_t;

#define CMIC_FINE_GRAIN_COUNTERS_CTRLr_CLR(r) (r).cmic_fine_grain_counters_ctrl[0] = 0
#define CMIC_FINE_GRAIN_COUNTERS_CTRLr_SET(r,d) (r).cmic_fine_grain_counters_ctrl[0] = d
#define CMIC_FINE_GRAIN_COUNTERS_CTRLr_GET(r) (r).cmic_fine_grain_counters_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FINE_GRAIN_COUNTERS_CTRLr_ENABLEf_GET(r) (((r).cmic_fine_grain_counters_ctrl[0]) & 0x1)
#define CMIC_FINE_GRAIN_COUNTERS_CTRLr_ENABLEf_SET(r,f) (r).cmic_fine_grain_counters_ctrl[0]=(((r).cmic_fine_grain_counters_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_FINE_GRAIN_COUNTERS_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FINE_GRAIN_COUNTERS_NS_VALUE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr_OFFSET 0x00025004

#define CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FINE_GRAIN_COUNTERS_NS_VALUE.
 */
typedef union CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr_s {
	uint32_t v[1];
	uint32_t cmic_fine_grain_counters_ns_value[1];
	uint32_t _cmic_fine_grain_counters_ns_value;
} CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr_t;

#define CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr_CLR(r) (r).cmic_fine_grain_counters_ns_value[0] = 0
#define CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr_SET(r,d) (r).cmic_fine_grain_counters_ns_value[0] = d
#define CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr_GET(r) (r).cmic_fine_grain_counters_ns_value[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr_NS_VALUEf_GET(r) (((r).cmic_fine_grain_counters_ns_value[0]) & 0x3fffffff)
#define CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr_NS_VALUEf_SET(r,f) (r).cmic_fine_grain_counters_ns_value[0]=(((r).cmic_fine_grain_counters_ns_value[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*******************************************************************************
 * End of 'CMIC_FINE_GRAIN_COUNTERS_NS_VALUEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr_OFFSET 0x00025008

#define CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUE.
 */
typedef union CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr_s {
	uint32_t v[1];
	uint32_t cmic_fine_grain_counters_second_value[1];
	uint32_t _cmic_fine_grain_counters_second_value;
} CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr_t;

#define CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr_CLR(r) (r).cmic_fine_grain_counters_second_value[0] = 0
#define CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr_SET(r,d) (r).cmic_fine_grain_counters_second_value[0] = d
#define CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr_GET(r) (r).cmic_fine_grain_counters_second_value[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr_SECOND_VALUEf_GET(r) ((r).cmic_fine_grain_counters_second_value[0])
#define CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr_SECOND_VALUEf_SET(r,f) (r).cmic_fine_grain_counters_second_value[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_FINE_GRAIN_COUNTERS_SECOND_VALUEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FSCHAN_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FSCHAN_ADDRESSr_OFFSET 0x00030070

#define CMIC_FSCHAN_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FSCHAN_ADDRESS.
 */
typedef union CMIC_FSCHAN_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_fschan_address[1];
	uint32_t _cmic_fschan_address;
} CMIC_FSCHAN_ADDRESSr_t;

#define CMIC_FSCHAN_ADDRESSr_CLR(r) (r).cmic_fschan_address[0] = 0
#define CMIC_FSCHAN_ADDRESSr_SET(r,d) (r).cmic_fschan_address[0] = d
#define CMIC_FSCHAN_ADDRESSr_GET(r) (r).cmic_fschan_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FSCHAN_ADDRESSr_ADDRRESSf_GET(r) ((r).cmic_fschan_address[0])
#define CMIC_FSCHAN_ADDRESSr_ADDRRESSf_SET(r,f) (r).cmic_fschan_address[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_FSCHAN_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FSCHAN_DATA32
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FSCHAN_DATA32r_OFFSET 0x00030074

#define CMIC_FSCHAN_DATA32r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FSCHAN_DATA32.
 */
typedef union CMIC_FSCHAN_DATA32r_s {
	uint32_t v[1];
	uint32_t cmic_fschan_data32[1];
	uint32_t _cmic_fschan_data32;
} CMIC_FSCHAN_DATA32r_t;

#define CMIC_FSCHAN_DATA32r_CLR(r) (r).cmic_fschan_data32[0] = 0
#define CMIC_FSCHAN_DATA32r_SET(r,d) (r).cmic_fschan_data32[0] = d
#define CMIC_FSCHAN_DATA32r_GET(r) (r).cmic_fschan_data32[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FSCHAN_DATA32r_DATA32f_GET(r) ((r).cmic_fschan_data32[0])
#define CMIC_FSCHAN_DATA32r_DATA32f_SET(r,f) (r).cmic_fschan_data32[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_FSCHAN_DATA32r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FSCHAN_DATA64_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FSCHAN_DATA64_HIr_OFFSET 0x0003007c

#define CMIC_FSCHAN_DATA64_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FSCHAN_DATA64_HI.
 */
typedef union CMIC_FSCHAN_DATA64_HIr_s {
	uint32_t v[1];
	uint32_t cmic_fschan_data64_hi[1];
	uint32_t _cmic_fschan_data64_hi;
} CMIC_FSCHAN_DATA64_HIr_t;

#define CMIC_FSCHAN_DATA64_HIr_CLR(r) (r).cmic_fschan_data64_hi[0] = 0
#define CMIC_FSCHAN_DATA64_HIr_SET(r,d) (r).cmic_fschan_data64_hi[0] = d
#define CMIC_FSCHAN_DATA64_HIr_GET(r) (r).cmic_fschan_data64_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FSCHAN_DATA64_HIr_DATA64_HIf_GET(r) ((r).cmic_fschan_data64_hi[0])
#define CMIC_FSCHAN_DATA64_HIr_DATA64_HIf_SET(r,f) (r).cmic_fschan_data64_hi[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_FSCHAN_DATA64_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FSCHAN_DATA64_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FSCHAN_DATA64_LOr_OFFSET 0x00030078

#define CMIC_FSCHAN_DATA64_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FSCHAN_DATA64_LO.
 */
typedef union CMIC_FSCHAN_DATA64_LOr_s {
	uint32_t v[1];
	uint32_t cmic_fschan_data64_lo[1];
	uint32_t _cmic_fschan_data64_lo;
} CMIC_FSCHAN_DATA64_LOr_t;

#define CMIC_FSCHAN_DATA64_LOr_CLR(r) (r).cmic_fschan_data64_lo[0] = 0
#define CMIC_FSCHAN_DATA64_LOr_SET(r,d) (r).cmic_fschan_data64_lo[0] = d
#define CMIC_FSCHAN_DATA64_LOr_GET(r) (r).cmic_fschan_data64_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FSCHAN_DATA64_LOr_DATA64_LOf_GET(r) ((r).cmic_fschan_data64_lo[0])
#define CMIC_FSCHAN_DATA64_LOr_DATA64_LOf_SET(r,f) (r).cmic_fschan_data64_lo[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_FSCHAN_DATA64_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FSCHAN_OPCODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FSCHAN_OPCODEr_OFFSET 0x0003006c

#define CMIC_FSCHAN_OPCODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FSCHAN_OPCODE.
 */
typedef union CMIC_FSCHAN_OPCODEr_s {
	uint32_t v[1];
	uint32_t cmic_fschan_opcode[1];
	uint32_t _cmic_fschan_opcode;
} CMIC_FSCHAN_OPCODEr_t;

#define CMIC_FSCHAN_OPCODEr_CLR(r) (r).cmic_fschan_opcode[0] = 0
#define CMIC_FSCHAN_OPCODEr_SET(r,d) (r).cmic_fschan_opcode[0] = d
#define CMIC_FSCHAN_OPCODEr_GET(r) (r).cmic_fschan_opcode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FSCHAN_OPCODEr_ADDRRESSf_GET(r) ((r).cmic_fschan_opcode[0])
#define CMIC_FSCHAN_OPCODEr_ADDRRESSf_SET(r,f) (r).cmic_fschan_opcode[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_FSCHAN_OPCODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FSCHAN_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FSCHAN_STATUSr_OFFSET 0x00030068

#define CMIC_FSCHAN_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FSCHAN_STATUS.
 */
typedef union CMIC_FSCHAN_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_fschan_status[1];
	uint32_t _cmic_fschan_status;
} CMIC_FSCHAN_STATUSr_t;

#define CMIC_FSCHAN_STATUSr_CLR(r) (r).cmic_fschan_status[0] = 0
#define CMIC_FSCHAN_STATUSr_SET(r,d) (r).cmic_fschan_status[0] = d
#define CMIC_FSCHAN_STATUSr_GET(r) (r).cmic_fschan_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FSCHAN_STATUSr_FSCHAN_BUSYf_GET(r) (((r).cmic_fschan_status[0]) & 0x1)
#define CMIC_FSCHAN_STATUSr_FSCHAN_BUSYf_SET(r,f) (r).cmic_fschan_status[0]=(((r).cmic_fschan_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_FSCHAN_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_FSRF_STBY_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_FSRF_STBY_CONTROLr_OFFSET 0x00010248

#define CMIC_FSRF_STBY_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_FSRF_STBY_CONTROL.
 */
typedef union CMIC_FSRF_STBY_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_fsrf_stby_control[1];
	uint32_t _cmic_fsrf_stby_control;
} CMIC_FSRF_STBY_CONTROLr_t;

#define CMIC_FSRF_STBY_CONTROLr_CLR(r) (r).cmic_fsrf_stby_control[0] = 0
#define CMIC_FSRF_STBY_CONTROLr_SET(r,d) (r).cmic_fsrf_stby_control[0] = d
#define CMIC_FSRF_STBY_CONTROLr_GET(r) (r).cmic_fsrf_stby_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_WRBUF0_MEM0_STBYf_GET(r) (((r).cmic_fsrf_stby_control[0]) & 0x1)
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_WRBUF0_MEM0_STBYf_SET(r,f) (r).cmic_fsrf_stby_control[0]=(((r).cmic_fsrf_stby_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_WRBUF0_MEM1_STBYf_GET(r) ((((r).cmic_fsrf_stby_control[0]) >> 1) & 0x1)
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_WRBUF0_MEM1_STBYf_SET(r,f) (r).cmic_fsrf_stby_control[0]=(((r).cmic_fsrf_stby_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_WRBUF1_MEM0_STBYf_GET(r) ((((r).cmic_fsrf_stby_control[0]) >> 2) & 0x1)
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_WRBUF1_MEM0_STBYf_SET(r,f) (r).cmic_fsrf_stby_control[0]=(((r).cmic_fsrf_stby_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_WRBUF1_MEM1_STBYf_GET(r) ((((r).cmic_fsrf_stby_control[0]) >> 3) & 0x1)
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_WRBUF1_MEM1_STBYf_SET(r,f) (r).cmic_fsrf_stby_control[0]=(((r).cmic_fsrf_stby_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_RDBUF0_MEM0_STBYf_GET(r) ((((r).cmic_fsrf_stby_control[0]) >> 4) & 0x1)
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_RDBUF0_MEM0_STBYf_SET(r,f) (r).cmic_fsrf_stby_control[0]=(((r).cmic_fsrf_stby_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_RDBUF0_MEM1_STBYf_GET(r) ((((r).cmic_fsrf_stby_control[0]) >> 5) & 0x1)
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_RDBUF0_MEM1_STBYf_SET(r,f) (r).cmic_fsrf_stby_control[0]=(((r).cmic_fsrf_stby_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_RDBUF1_MEM0_STBYf_GET(r) ((((r).cmic_fsrf_stby_control[0]) >> 6) & 0x1)
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_RDBUF1_MEM0_STBYf_SET(r,f) (r).cmic_fsrf_stby_control[0]=(((r).cmic_fsrf_stby_control[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_RDBUF1_MEM1_STBYf_GET(r) ((((r).cmic_fsrf_stby_control[0]) >> 7) & 0x1)
#define CMIC_FSRF_STBY_CONTROLr_CMIC_MCS_PING_PONG_RDBUF1_MEM1_STBYf_SET(r,f) (r).cmic_fsrf_stby_control[0]=(((r).cmic_fsrf_stby_control[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_FSRF_STBY_CONTROLr_RESERVED_0f_GET(r) ((((r).cmic_fsrf_stby_control[0]) >> 8) & 0xffffff)
#define CMIC_FSRF_STBY_CONTROLr_RESERVED_0f_SET(r,f) (r).cmic_fsrf_stby_control[0]=(((r).cmic_fsrf_stby_control[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_FSRF_STBY_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_AUX_SEL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_AUX_SELr_OFFSET 0x00002028

#define CMIC_GP_AUX_SELr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_AUX_SEL.
 */
typedef union CMIC_GP_AUX_SELr_s {
	uint32_t v[1];
	uint32_t cmic_gp_aux_sel[1];
	uint32_t _cmic_gp_aux_sel;
} CMIC_GP_AUX_SELr_t;

#define CMIC_GP_AUX_SELr_CLR(r) (r).cmic_gp_aux_sel[0] = 0
#define CMIC_GP_AUX_SELr_SET(r,d) (r).cmic_gp_aux_sel[0] = d
#define CMIC_GP_AUX_SELr_GET(r) (r).cmic_gp_aux_sel[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_AUX_SELr_AUX_SELf_GET(r) (((r).cmic_gp_aux_sel[0]) & 0xf)
#define CMIC_GP_AUX_SELr_AUX_SELf_SET(r,f) (r).cmic_gp_aux_sel[0]=(((r).cmic_gp_aux_sel[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_AUX_SELr_RESERVEDf_GET(r) ((((r).cmic_gp_aux_sel[0]) >> 4) & 0xfffffff)
#define CMIC_GP_AUX_SELr_RESERVEDf_SET(r,f) (r).cmic_gp_aux_sel[0]=(((r).cmic_gp_aux_sel[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_AUX_SELr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_DATA_IN
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_DATA_INr_OFFSET 0x00002000

#define CMIC_GP_DATA_INr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_DATA_IN.
 */
typedef union CMIC_GP_DATA_INr_s {
	uint32_t v[1];
	uint32_t cmic_gp_data_in[1];
	uint32_t _cmic_gp_data_in;
} CMIC_GP_DATA_INr_t;

#define CMIC_GP_DATA_INr_CLR(r) (r).cmic_gp_data_in[0] = 0
#define CMIC_GP_DATA_INr_SET(r,d) (r).cmic_gp_data_in[0] = d
#define CMIC_GP_DATA_INr_GET(r) (r).cmic_gp_data_in[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_DATA_INr_DATA_INf_GET(r) (((r).cmic_gp_data_in[0]) & 0xf)
#define CMIC_GP_DATA_INr_DATA_INf_SET(r,f) (r).cmic_gp_data_in[0]=(((r).cmic_gp_data_in[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_DATA_INr_RESERVEDf_GET(r) ((((r).cmic_gp_data_in[0]) >> 4) & 0xfffffff)
#define CMIC_GP_DATA_INr_RESERVEDf_SET(r,f) (r).cmic_gp_data_in[0]=(((r).cmic_gp_data_in[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_DATA_INr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_DATA_OUT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_DATA_OUTr_OFFSET 0x00002004

#define CMIC_GP_DATA_OUTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_DATA_OUT.
 */
typedef union CMIC_GP_DATA_OUTr_s {
	uint32_t v[1];
	uint32_t cmic_gp_data_out[1];
	uint32_t _cmic_gp_data_out;
} CMIC_GP_DATA_OUTr_t;

#define CMIC_GP_DATA_OUTr_CLR(r) (r).cmic_gp_data_out[0] = 0
#define CMIC_GP_DATA_OUTr_SET(r,d) (r).cmic_gp_data_out[0] = d
#define CMIC_GP_DATA_OUTr_GET(r) (r).cmic_gp_data_out[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_DATA_OUTr_DATA_OUTf_GET(r) (((r).cmic_gp_data_out[0]) & 0xf)
#define CMIC_GP_DATA_OUTr_DATA_OUTf_SET(r,f) (r).cmic_gp_data_out[0]=(((r).cmic_gp_data_out[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_DATA_OUTr_RESERVEDf_GET(r) ((((r).cmic_gp_data_out[0]) >> 4) & 0xfffffff)
#define CMIC_GP_DATA_OUTr_RESERVEDf_SET(r,f) (r).cmic_gp_data_out[0]=(((r).cmic_gp_data_out[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_DATA_OUTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_INIT_VAL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_INIT_VALr_OFFSET 0x00002030

#define CMIC_GP_INIT_VALr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_INIT_VAL.
 */
typedef union CMIC_GP_INIT_VALr_s {
	uint32_t v[1];
	uint32_t cmic_gp_init_val[1];
	uint32_t _cmic_gp_init_val;
} CMIC_GP_INIT_VALr_t;

#define CMIC_GP_INIT_VALr_CLR(r) (r).cmic_gp_init_val[0] = 0
#define CMIC_GP_INIT_VALr_SET(r,d) (r).cmic_gp_init_val[0] = d
#define CMIC_GP_INIT_VALr_GET(r) (r).cmic_gp_init_val[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_INIT_VALr_INIT_VALf_GET(r) (((r).cmic_gp_init_val[0]) & 0xf)
#define CMIC_GP_INIT_VALr_INIT_VALf_SET(r,f) (r).cmic_gp_init_val[0]=(((r).cmic_gp_init_val[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_INIT_VALr_RESERVEDf_GET(r) ((((r).cmic_gp_init_val[0]) >> 4) & 0xfffffff)
#define CMIC_GP_INIT_VALr_RESERVEDf_SET(r,f) (r).cmic_gp_init_val[0]=(((r).cmic_gp_init_val[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_INIT_VALr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_INT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_INT_CLRr_OFFSET 0x00002024

#define CMIC_GP_INT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_INT_CLR.
 */
typedef union CMIC_GP_INT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_gp_int_clr[1];
	uint32_t _cmic_gp_int_clr;
} CMIC_GP_INT_CLRr_t;

#define CMIC_GP_INT_CLRr_CLR(r) (r).cmic_gp_int_clr[0] = 0
#define CMIC_GP_INT_CLRr_SET(r,d) (r).cmic_gp_int_clr[0] = d
#define CMIC_GP_INT_CLRr_GET(r) (r).cmic_gp_int_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_INT_CLRr_INT_CLRf_GET(r) (((r).cmic_gp_int_clr[0]) & 0xf)
#define CMIC_GP_INT_CLRr_INT_CLRf_SET(r,f) (r).cmic_gp_int_clr[0]=(((r).cmic_gp_int_clr[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_INT_CLRr_RESERVEDf_GET(r) ((((r).cmic_gp_int_clr[0]) >> 4) & 0xfffffff)
#define CMIC_GP_INT_CLRr_RESERVEDf_SET(r,f) (r).cmic_gp_int_clr[0]=(((r).cmic_gp_int_clr[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_INT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_INT_DE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_INT_DEr_OFFSET 0x00002010

#define CMIC_GP_INT_DEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_INT_DE.
 */
typedef union CMIC_GP_INT_DEr_s {
	uint32_t v[1];
	uint32_t cmic_gp_int_de[1];
	uint32_t _cmic_gp_int_de;
} CMIC_GP_INT_DEr_t;

#define CMIC_GP_INT_DEr_CLR(r) (r).cmic_gp_int_de[0] = 0
#define CMIC_GP_INT_DEr_SET(r,d) (r).cmic_gp_int_de[0] = d
#define CMIC_GP_INT_DEr_GET(r) (r).cmic_gp_int_de[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_INT_DEr_INT_DEf_GET(r) (((r).cmic_gp_int_de[0]) & 0xf)
#define CMIC_GP_INT_DEr_INT_DEf_SET(r,f) (r).cmic_gp_int_de[0]=(((r).cmic_gp_int_de[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_INT_DEr_RESERVEDf_GET(r) ((((r).cmic_gp_int_de[0]) >> 4) & 0xfffffff)
#define CMIC_GP_INT_DEr_RESERVEDf_SET(r,f) (r).cmic_gp_int_de[0]=(((r).cmic_gp_int_de[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_INT_DEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_INT_EDGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_INT_EDGEr_OFFSET 0x00002014

#define CMIC_GP_INT_EDGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_INT_EDGE.
 */
typedef union CMIC_GP_INT_EDGEr_s {
	uint32_t v[1];
	uint32_t cmic_gp_int_edge[1];
	uint32_t _cmic_gp_int_edge;
} CMIC_GP_INT_EDGEr_t;

#define CMIC_GP_INT_EDGEr_CLR(r) (r).cmic_gp_int_edge[0] = 0
#define CMIC_GP_INT_EDGEr_SET(r,d) (r).cmic_gp_int_edge[0] = d
#define CMIC_GP_INT_EDGEr_GET(r) (r).cmic_gp_int_edge[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_INT_EDGEr_INT_EDGEf_GET(r) (((r).cmic_gp_int_edge[0]) & 0xf)
#define CMIC_GP_INT_EDGEr_INT_EDGEf_SET(r,f) (r).cmic_gp_int_edge[0]=(((r).cmic_gp_int_edge[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_INT_EDGEr_RESERVEDf_GET(r) ((((r).cmic_gp_int_edge[0]) >> 4) & 0xfffffff)
#define CMIC_GP_INT_EDGEr_RESERVEDf_SET(r,f) (r).cmic_gp_int_edge[0]=(((r).cmic_gp_int_edge[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_INT_EDGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_INT_MSK
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_INT_MSKr_OFFSET 0x00002018

#define CMIC_GP_INT_MSKr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_INT_MSK.
 */
typedef union CMIC_GP_INT_MSKr_s {
	uint32_t v[1];
	uint32_t cmic_gp_int_msk[1];
	uint32_t _cmic_gp_int_msk;
} CMIC_GP_INT_MSKr_t;

#define CMIC_GP_INT_MSKr_CLR(r) (r).cmic_gp_int_msk[0] = 0
#define CMIC_GP_INT_MSKr_SET(r,d) (r).cmic_gp_int_msk[0] = d
#define CMIC_GP_INT_MSKr_GET(r) (r).cmic_gp_int_msk[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_INT_MSKr_INT_MSKf_GET(r) (((r).cmic_gp_int_msk[0]) & 0xf)
#define CMIC_GP_INT_MSKr_INT_MSKf_SET(r,f) (r).cmic_gp_int_msk[0]=(((r).cmic_gp_int_msk[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_INT_MSKr_RESERVEDf_GET(r) ((((r).cmic_gp_int_msk[0]) >> 4) & 0xfffffff)
#define CMIC_GP_INT_MSKr_RESERVEDf_SET(r,f) (r).cmic_gp_int_msk[0]=(((r).cmic_gp_int_msk[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_INT_MSKr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_INT_MSTAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_INT_MSTATr_OFFSET 0x00002020

#define CMIC_GP_INT_MSTATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_INT_MSTAT.
 */
typedef union CMIC_GP_INT_MSTATr_s {
	uint32_t v[1];
	uint32_t cmic_gp_int_mstat[1];
	uint32_t _cmic_gp_int_mstat;
} CMIC_GP_INT_MSTATr_t;

#define CMIC_GP_INT_MSTATr_CLR(r) (r).cmic_gp_int_mstat[0] = 0
#define CMIC_GP_INT_MSTATr_SET(r,d) (r).cmic_gp_int_mstat[0] = d
#define CMIC_GP_INT_MSTATr_GET(r) (r).cmic_gp_int_mstat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_INT_MSTATr_INT_MSTATf_GET(r) (((r).cmic_gp_int_mstat[0]) & 0xf)
#define CMIC_GP_INT_MSTATr_INT_MSTATf_SET(r,f) (r).cmic_gp_int_mstat[0]=(((r).cmic_gp_int_mstat[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_INT_MSTATr_RESERVEDf_GET(r) ((((r).cmic_gp_int_mstat[0]) >> 4) & 0xfffffff)
#define CMIC_GP_INT_MSTATr_RESERVEDf_SET(r,f) (r).cmic_gp_int_mstat[0]=(((r).cmic_gp_int_mstat[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_INT_MSTATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_INT_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_INT_STATr_OFFSET 0x0000201c

#define CMIC_GP_INT_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_INT_STAT.
 */
typedef union CMIC_GP_INT_STATr_s {
	uint32_t v[1];
	uint32_t cmic_gp_int_stat[1];
	uint32_t _cmic_gp_int_stat;
} CMIC_GP_INT_STATr_t;

#define CMIC_GP_INT_STATr_CLR(r) (r).cmic_gp_int_stat[0] = 0
#define CMIC_GP_INT_STATr_SET(r,d) (r).cmic_gp_int_stat[0] = d
#define CMIC_GP_INT_STATr_GET(r) (r).cmic_gp_int_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_INT_STATr_INT_STATf_GET(r) (((r).cmic_gp_int_stat[0]) & 0xf)
#define CMIC_GP_INT_STATr_INT_STATf_SET(r,f) (r).cmic_gp_int_stat[0]=(((r).cmic_gp_int_stat[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_INT_STATr_RESERVEDf_GET(r) ((((r).cmic_gp_int_stat[0]) >> 4) & 0xfffffff)
#define CMIC_GP_INT_STATr_RESERVEDf_SET(r,f) (r).cmic_gp_int_stat[0]=(((r).cmic_gp_int_stat[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_INT_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_INT_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_INT_TYPEr_OFFSET 0x0000200c

#define CMIC_GP_INT_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_INT_TYPE.
 */
typedef union CMIC_GP_INT_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_gp_int_type[1];
	uint32_t _cmic_gp_int_type;
} CMIC_GP_INT_TYPEr_t;

#define CMIC_GP_INT_TYPEr_CLR(r) (r).cmic_gp_int_type[0] = 0
#define CMIC_GP_INT_TYPEr_SET(r,d) (r).cmic_gp_int_type[0] = d
#define CMIC_GP_INT_TYPEr_GET(r) (r).cmic_gp_int_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_INT_TYPEr_INT_TYPEf_GET(r) (((r).cmic_gp_int_type[0]) & 0xf)
#define CMIC_GP_INT_TYPEr_INT_TYPEf_SET(r,f) (r).cmic_gp_int_type[0]=(((r).cmic_gp_int_type[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_INT_TYPEr_RESERVEDf_GET(r) ((((r).cmic_gp_int_type[0]) >> 4) & 0xfffffff)
#define CMIC_GP_INT_TYPEr_RESERVEDf_SET(r,f) (r).cmic_gp_int_type[0]=(((r).cmic_gp_int_type[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_INT_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_OUT_EN
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_OUT_ENr_OFFSET 0x00002008

#define CMIC_GP_OUT_ENr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_OUT_EN.
 */
typedef union CMIC_GP_OUT_ENr_s {
	uint32_t v[1];
	uint32_t cmic_gp_out_en[1];
	uint32_t _cmic_gp_out_en;
} CMIC_GP_OUT_ENr_t;

#define CMIC_GP_OUT_ENr_CLR(r) (r).cmic_gp_out_en[0] = 0
#define CMIC_GP_OUT_ENr_SET(r,d) (r).cmic_gp_out_en[0] = d
#define CMIC_GP_OUT_ENr_GET(r) (r).cmic_gp_out_en[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_OUT_ENr_OUT_ENABLEf_GET(r) (((r).cmic_gp_out_en[0]) & 0xf)
#define CMIC_GP_OUT_ENr_OUT_ENABLEf_SET(r,f) (r).cmic_gp_out_en[0]=(((r).cmic_gp_out_en[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_OUT_ENr_RESERVEDf_GET(r) ((((r).cmic_gp_out_en[0]) >> 4) & 0xfffffff)
#define CMIC_GP_OUT_ENr_RESERVEDf_SET(r,f) (r).cmic_gp_out_en[0]=(((r).cmic_gp_out_en[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_OUT_ENr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_PAD_RES
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_PAD_RESr_OFFSET 0x00002034

#define CMIC_GP_PAD_RESr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_PAD_RES.
 */
typedef union CMIC_GP_PAD_RESr_s {
	uint32_t v[1];
	uint32_t cmic_gp_pad_res[1];
	uint32_t _cmic_gp_pad_res;
} CMIC_GP_PAD_RESr_t;

#define CMIC_GP_PAD_RESr_CLR(r) (r).cmic_gp_pad_res[0] = 0
#define CMIC_GP_PAD_RESr_SET(r,d) (r).cmic_gp_pad_res[0] = d
#define CMIC_GP_PAD_RESr_GET(r) (r).cmic_gp_pad_res[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_PAD_RESr_PAD_RESf_GET(r) (((r).cmic_gp_pad_res[0]) & 0xf)
#define CMIC_GP_PAD_RESr_PAD_RESf_SET(r,f) (r).cmic_gp_pad_res[0]=(((r).cmic_gp_pad_res[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_PAD_RESr_RESERVEDf_GET(r) ((((r).cmic_gp_pad_res[0]) >> 4) & 0xfffffff)
#define CMIC_GP_PAD_RESr_RESERVEDf_SET(r,f) (r).cmic_gp_pad_res[0]=(((r).cmic_gp_pad_res[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_PAD_RESr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_PRB_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_PRB_ENABLEr_OFFSET 0x00002048

#define CMIC_GP_PRB_ENABLEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_PRB_ENABLE.
 */
typedef union CMIC_GP_PRB_ENABLEr_s {
	uint32_t v[1];
	uint32_t cmic_gp_prb_enable[1];
	uint32_t _cmic_gp_prb_enable;
} CMIC_GP_PRB_ENABLEr_t;

#define CMIC_GP_PRB_ENABLEr_CLR(r) (r).cmic_gp_prb_enable[0] = 0
#define CMIC_GP_PRB_ENABLEr_SET(r,d) (r).cmic_gp_prb_enable[0] = d
#define CMIC_GP_PRB_ENABLEr_GET(r) (r).cmic_gp_prb_enable[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_PRB_ENABLEr_PRB_SELf_GET(r) (((r).cmic_gp_prb_enable[0]) & 0x1)
#define CMIC_GP_PRB_ENABLEr_PRB_SELf_SET(r,f) (r).cmic_gp_prb_enable[0]=(((r).cmic_gp_prb_enable[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_GP_PRB_ENABLEr_TEST_SELf_GET(r) ((((r).cmic_gp_prb_enable[0]) >> 1) & 0x1)
#define CMIC_GP_PRB_ENABLEr_TEST_SELf_SET(r,f) (r).cmic_gp_prb_enable[0]=(((r).cmic_gp_prb_enable[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_GP_PRB_ENABLEr_RESERVEDf_GET(r) ((((r).cmic_gp_prb_enable[0]) >> 2) & 0x3fffffff)
#define CMIC_GP_PRB_ENABLEr_RESERVEDf_SET(r,f) (r).cmic_gp_prb_enable[0]=(((r).cmic_gp_prb_enable[0] & ~((uint32_t)0x3fffffff << 2)) | ((((uint32_t)f) & 0x3fffffff) << 2))

/*******************************************************************************
 * End of 'CMIC_GP_PRB_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_PRB_OE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_PRB_OEr_OFFSET 0x0000204c

#define CMIC_GP_PRB_OEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_PRB_OE.
 */
typedef union CMIC_GP_PRB_OEr_s {
	uint32_t v[1];
	uint32_t cmic_gp_prb_oe[1];
	uint32_t _cmic_gp_prb_oe;
} CMIC_GP_PRB_OEr_t;

#define CMIC_GP_PRB_OEr_CLR(r) (r).cmic_gp_prb_oe[0] = 0
#define CMIC_GP_PRB_OEr_SET(r,d) (r).cmic_gp_prb_oe[0] = d
#define CMIC_GP_PRB_OEr_GET(r) (r).cmic_gp_prb_oe[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_PRB_OEr_GP_PRB_OEf_GET(r) (((r).cmic_gp_prb_oe[0]) & 0xf)
#define CMIC_GP_PRB_OEr_GP_PRB_OEf_SET(r,f) (r).cmic_gp_prb_oe[0]=(((r).cmic_gp_prb_oe[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_PRB_OEr_RESERVEDf_GET(r) ((((r).cmic_gp_prb_oe[0]) >> 4) & 0xfffffff)
#define CMIC_GP_PRB_OEr_RESERVEDf_SET(r,f) (r).cmic_gp_prb_oe[0]=(((r).cmic_gp_prb_oe[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_PRB_OEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_RES_EN
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_RES_ENr_OFFSET 0x00002038

#define CMIC_GP_RES_ENr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_RES_EN.
 */
typedef union CMIC_GP_RES_ENr_s {
	uint32_t v[1];
	uint32_t cmic_gp_res_en[1];
	uint32_t _cmic_gp_res_en;
} CMIC_GP_RES_ENr_t;

#define CMIC_GP_RES_ENr_CLR(r) (r).cmic_gp_res_en[0] = 0
#define CMIC_GP_RES_ENr_SET(r,d) (r).cmic_gp_res_en[0] = d
#define CMIC_GP_RES_ENr_GET(r) (r).cmic_gp_res_en[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_RES_ENr_RES_ENf_GET(r) (((r).cmic_gp_res_en[0]) & 0xf)
#define CMIC_GP_RES_ENr_RES_ENf_SET(r,f) (r).cmic_gp_res_en[0]=(((r).cmic_gp_res_en[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_RES_ENr_RESERVEDf_GET(r) ((((r).cmic_gp_res_en[0]) >> 4) & 0xfffffff)
#define CMIC_GP_RES_ENr_RESERVEDf_SET(r,f) (r).cmic_gp_res_en[0]=(((r).cmic_gp_res_en[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_RES_ENr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_TEST_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_TEST_ENABLEr_OFFSET 0x00002044

#define CMIC_GP_TEST_ENABLEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_TEST_ENABLE.
 */
typedef union CMIC_GP_TEST_ENABLEr_s {
	uint32_t v[1];
	uint32_t cmic_gp_test_enable[1];
	uint32_t _cmic_gp_test_enable;
} CMIC_GP_TEST_ENABLEr_t;

#define CMIC_GP_TEST_ENABLEr_CLR(r) (r).cmic_gp_test_enable[0] = 0
#define CMIC_GP_TEST_ENABLEr_SET(r,d) (r).cmic_gp_test_enable[0] = d
#define CMIC_GP_TEST_ENABLEr_GET(r) (r).cmic_gp_test_enable[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_TEST_ENABLEr_TEST_ENABLEf_GET(r) (((r).cmic_gp_test_enable[0]) & 0xf)
#define CMIC_GP_TEST_ENABLEr_TEST_ENABLEf_SET(r,f) (r).cmic_gp_test_enable[0]=(((r).cmic_gp_test_enable[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_TEST_ENABLEr_RESERVEDf_GET(r) ((((r).cmic_gp_test_enable[0]) >> 4) & 0xfffffff)
#define CMIC_GP_TEST_ENABLEr_RESERVEDf_SET(r,f) (r).cmic_gp_test_enable[0]=(((r).cmic_gp_test_enable[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_TEST_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_TEST_INPUT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_TEST_INPUTr_OFFSET 0x0000203c

#define CMIC_GP_TEST_INPUTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_TEST_INPUT.
 */
typedef union CMIC_GP_TEST_INPUTr_s {
	uint32_t v[1];
	uint32_t cmic_gp_test_input[1];
	uint32_t _cmic_gp_test_input;
} CMIC_GP_TEST_INPUTr_t;

#define CMIC_GP_TEST_INPUTr_CLR(r) (r).cmic_gp_test_input[0] = 0
#define CMIC_GP_TEST_INPUTr_SET(r,d) (r).cmic_gp_test_input[0] = d
#define CMIC_GP_TEST_INPUTr_GET(r) (r).cmic_gp_test_input[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_TEST_INPUTr_TEST_INPUTf_GET(r) (((r).cmic_gp_test_input[0]) & 0xf)
#define CMIC_GP_TEST_INPUTr_TEST_INPUTf_SET(r,f) (r).cmic_gp_test_input[0]=(((r).cmic_gp_test_input[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_TEST_INPUTr_RESERVEDf_GET(r) ((((r).cmic_gp_test_input[0]) >> 4) & 0xfffffff)
#define CMIC_GP_TEST_INPUTr_RESERVEDf_SET(r,f) (r).cmic_gp_test_input[0]=(((r).cmic_gp_test_input[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_TEST_INPUTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_GP_TEST_OUTPUT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_GP_TEST_OUTPUTr_OFFSET 0x00002040

#define CMIC_GP_TEST_OUTPUTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_GP_TEST_OUTPUT.
 */
typedef union CMIC_GP_TEST_OUTPUTr_s {
	uint32_t v[1];
	uint32_t cmic_gp_test_output[1];
	uint32_t _cmic_gp_test_output;
} CMIC_GP_TEST_OUTPUTr_t;

#define CMIC_GP_TEST_OUTPUTr_CLR(r) (r).cmic_gp_test_output[0] = 0
#define CMIC_GP_TEST_OUTPUTr_SET(r,d) (r).cmic_gp_test_output[0] = d
#define CMIC_GP_TEST_OUTPUTr_GET(r) (r).cmic_gp_test_output[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_GP_TEST_OUTPUTr_TEST_OUTPUTf_GET(r) (((r).cmic_gp_test_output[0]) & 0xf)
#define CMIC_GP_TEST_OUTPUTr_TEST_OUTPUTf_SET(r,f) (r).cmic_gp_test_output[0]=(((r).cmic_gp_test_output[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_GP_TEST_OUTPUTr_RESERVEDf_GET(r) ((((r).cmic_gp_test_output[0]) >> 4) & 0xfffffff)
#define CMIC_GP_TEST_OUTPUTr_RESERVEDf_SET(r,f) (r).cmic_gp_test_output[0]=(((r).cmic_gp_test_output[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'CMIC_GP_TEST_OUTPUTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Address
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_ADDRESSr_OFFSET 0x00000008

#define CMIC_I2CM_SMBUS_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Address.
 */
typedef union CMIC_I2CM_SMBUS_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_address[1];
	uint32_t _cmic_i2cm_smbus_address;
} CMIC_I2CM_SMBUS_ADDRESSr_t;

#define CMIC_I2CM_SMBUS_ADDRESSr_CLR(r) (r).cmic_i2cm_smbus_address[0] = 0
#define CMIC_I2CM_SMBUS_ADDRESSr_SET(r,d) (r).cmic_i2cm_smbus_address[0] = d
#define CMIC_I2CM_SMBUS_ADDRESSr_GET(r) (r).cmic_i2cm_smbus_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_ADDRESSr_NIC_SMB_ADDR0f_GET(r) (((r).cmic_i2cm_smbus_address[0]) & 0x7f)
#define CMIC_I2CM_SMBUS_ADDRESSr_NIC_SMB_ADDR0f_SET(r,f) (r).cmic_i2cm_smbus_address[0]=(((r).cmic_i2cm_smbus_address[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))
#define CMIC_I2CM_SMBUS_ADDRESSr_EN_NIC_SMB_ADDR0f_GET(r) ((((r).cmic_i2cm_smbus_address[0]) >> 7) & 0x1)
#define CMIC_I2CM_SMBUS_ADDRESSr_EN_NIC_SMB_ADDR0f_SET(r,f) (r).cmic_i2cm_smbus_address[0]=(((r).cmic_i2cm_smbus_address[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_I2CM_SMBUS_ADDRESSr_NIC_SMB_ADDR1f_GET(r) ((((r).cmic_i2cm_smbus_address[0]) >> 8) & 0x7f)
#define CMIC_I2CM_SMBUS_ADDRESSr_NIC_SMB_ADDR1f_SET(r,f) (r).cmic_i2cm_smbus_address[0]=(((r).cmic_i2cm_smbus_address[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))
#define CMIC_I2CM_SMBUS_ADDRESSr_EN_NIC_SMB_ADDR1f_GET(r) ((((r).cmic_i2cm_smbus_address[0]) >> 15) & 0x1)
#define CMIC_I2CM_SMBUS_ADDRESSr_EN_NIC_SMB_ADDR1f_SET(r,f) (r).cmic_i2cm_smbus_address[0]=(((r).cmic_i2cm_smbus_address[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_I2CM_SMBUS_ADDRESSr_NIC_SMB_ADDR2f_GET(r) ((((r).cmic_i2cm_smbus_address[0]) >> 16) & 0x7f)
#define CMIC_I2CM_SMBUS_ADDRESSr_NIC_SMB_ADDR2f_SET(r,f) (r).cmic_i2cm_smbus_address[0]=(((r).cmic_i2cm_smbus_address[0] & ~((uint32_t)0x7f << 16)) | ((((uint32_t)f) & 0x7f) << 16))
#define CMIC_I2CM_SMBUS_ADDRESSr_EN_NIC_SMB_ADDR2f_GET(r) ((((r).cmic_i2cm_smbus_address[0]) >> 23) & 0x1)
#define CMIC_I2CM_SMBUS_ADDRESSr_EN_NIC_SMB_ADDR2f_SET(r,f) (r).cmic_i2cm_smbus_address[0]=(((r).cmic_i2cm_smbus_address[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_I2CM_SMBUS_ADDRESSr_NIC_SMB_ADDR3f_GET(r) ((((r).cmic_i2cm_smbus_address[0]) >> 24) & 0x7f)
#define CMIC_I2CM_SMBUS_ADDRESSr_NIC_SMB_ADDR3f_SET(r,f) (r).cmic_i2cm_smbus_address[0]=(((r).cmic_i2cm_smbus_address[0] & ~((uint32_t)0x7f << 24)) | ((((uint32_t)f) & 0x7f) << 24))
#define CMIC_I2CM_SMBUS_ADDRESSr_EN_NIC_SMB_ADDR3f_GET(r) ((((r).cmic_i2cm_smbus_address[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_ADDRESSr_EN_NIC_SMB_ADDR3f_SET(r,f) (r).cmic_i2cm_smbus_address[0]=(((r).cmic_i2cm_smbus_address[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Bit_Bang_Control
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_OFFSET 0x00000014

#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Bit_Bang_Control.
 */
typedef union CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_bit_bang_control[1];
	uint32_t _cmic_i2cm_smbus_bit_bang_control;
} CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_t;

#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_CLR(r) (r).cmic_i2cm_smbus_bit_bang_control[0] = 0
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SET(r,d) (r).cmic_i2cm_smbus_bit_bang_control[0] = d
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_GET(r) (r).cmic_i2cm_smbus_bit_bang_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_RESERVED_0f_GET(r) (((r).cmic_i2cm_smbus_bit_bang_control[0]) & 0xfffffff)
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_bit_bang_control[0]=(((r).cmic_i2cm_smbus_bit_bang_control[0] & ~((uint32_t)0xfffffff)) | (((uint32_t)f) & 0xfffffff))
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SMBDAT_OUT_ENf_GET(r) ((((r).cmic_i2cm_smbus_bit_bang_control[0]) >> 28) & 0x1)
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SMBDAT_OUT_ENf_SET(r,f) (r).cmic_i2cm_smbus_bit_bang_control[0]=(((r).cmic_i2cm_smbus_bit_bang_control[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SMBDAT_INf_GET(r) ((((r).cmic_i2cm_smbus_bit_bang_control[0]) >> 29) & 0x1)
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SMBDAT_INf_SET(r,f) (r).cmic_i2cm_smbus_bit_bang_control[0]=(((r).cmic_i2cm_smbus_bit_bang_control[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SMBCLK_OUT_ENf_GET(r) ((((r).cmic_i2cm_smbus_bit_bang_control[0]) >> 30) & 0x1)
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SMBCLK_OUT_ENf_SET(r,f) (r).cmic_i2cm_smbus_bit_bang_control[0]=(((r).cmic_i2cm_smbus_bit_bang_control[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SMBCLK_INf_GET(r) ((((r).cmic_i2cm_smbus_bit_bang_control[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr_SMBCLK_INf_SET(r,f) (r).cmic_i2cm_smbus_bit_bang_control[0]=(((r).cmic_i2cm_smbus_bit_bang_control[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_BIT_BANG_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Config
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_CONFIGr_OFFSET 0x00000000

#define CMIC_I2CM_SMBUS_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Config.
 */
typedef union CMIC_I2CM_SMBUS_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_config[1];
	uint32_t _cmic_i2cm_smbus_config;
} CMIC_I2CM_SMBUS_CONFIGr_t;

#define CMIC_I2CM_SMBUS_CONFIGr_CLR(r) (r).cmic_i2cm_smbus_config[0] = 0
#define CMIC_I2CM_SMBUS_CONFIGr_SET(r,d) (r).cmic_i2cm_smbus_config[0] = d
#define CMIC_I2CM_SMBUS_CONFIGr_GET(r) (r).cmic_i2cm_smbus_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_CONFIGr_MASTER_RTRY_CNTf_GET(r) ((((r).cmic_i2cm_smbus_config[0]) >> 16) & 0xf)
#define CMIC_I2CM_SMBUS_CONFIGr_MASTER_RTRY_CNTf_SET(r,f) (r).cmic_i2cm_smbus_config[0]=(((r).cmic_i2cm_smbus_config[0] & ~((uint32_t)0xf << 16)) | ((((uint32_t)f) & 0xf) << 16))
#define CMIC_I2CM_SMBUS_CONFIGr_TIMESTAMP_CNT_ENf_GET(r) ((((r).cmic_i2cm_smbus_config[0]) >> 26) & 0x1)
#define CMIC_I2CM_SMBUS_CONFIGr_TIMESTAMP_CNT_ENf_SET(r,f) (r).cmic_i2cm_smbus_config[0]=(((r).cmic_i2cm_smbus_config[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_I2CM_SMBUS_CONFIGr_PROMISCOUS_MODEf_GET(r) ((((r).cmic_i2cm_smbus_config[0]) >> 27) & 0x1)
#define CMIC_I2CM_SMBUS_CONFIGr_PROMISCOUS_MODEf_SET(r,f) (r).cmic_i2cm_smbus_config[0]=(((r).cmic_i2cm_smbus_config[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_I2CM_SMBUS_CONFIGr_EN_NIC_SMB_ADDR_0f_GET(r) ((((r).cmic_i2cm_smbus_config[0]) >> 28) & 0x1)
#define CMIC_I2CM_SMBUS_CONFIGr_EN_NIC_SMB_ADDR_0f_SET(r,f) (r).cmic_i2cm_smbus_config[0]=(((r).cmic_i2cm_smbus_config[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_I2CM_SMBUS_CONFIGr_BIT_BANG_ENf_GET(r) ((((r).cmic_i2cm_smbus_config[0]) >> 29) & 0x1)
#define CMIC_I2CM_SMBUS_CONFIGr_BIT_BANG_ENf_SET(r,f) (r).cmic_i2cm_smbus_config[0]=(((r).cmic_i2cm_smbus_config[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_I2CM_SMBUS_CONFIGr_SMB_ENf_GET(r) ((((r).cmic_i2cm_smbus_config[0]) >> 30) & 0x1)
#define CMIC_I2CM_SMBUS_CONFIGr_SMB_ENf_SET(r,f) (r).cmic_i2cm_smbus_config[0]=(((r).cmic_i2cm_smbus_config[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_I2CM_SMBUS_CONFIGr_RESETf_GET(r) ((((r).cmic_i2cm_smbus_config[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_CONFIGr_RESETf_SET(r,f) (r).cmic_i2cm_smbus_config[0]=(((r).cmic_i2cm_smbus_config[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Event_Enable
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_OFFSET 0x00000038

#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Event_Enable.
 */
typedef union CMIC_I2CM_SMBUS_EVENT_ENABLEr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_event_enable[1];
	uint32_t _cmic_i2cm_smbus_event_enable;
} CMIC_I2CM_SMBUS_EVENT_ENABLEr_t;

#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_CLR(r) (r).cmic_i2cm_smbus_event_enable[0] = 0
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SET(r,d) (r).cmic_i2cm_smbus_event_enable[0] = d
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_GET(r) (r).cmic_i2cm_smbus_event_enable[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_RESERVED_0f_GET(r) (((r).cmic_i2cm_smbus_event_enable[0]) & 0x1fffff)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1fffff)) | (((uint32_t)f) & 0x1fffff))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_RD_EVENT_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 21) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_RD_EVENT_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_TX_UNDERRUN_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 22) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_TX_UNDERRUN_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_START_BUSY_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 23) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_START_BUSY_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_RX_EVENT_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 24) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_RX_EVENT_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_RX_THRESHOLD_HIT_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 25) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_RX_THRESHOLD_HIT_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_RX_FIFO_FULL_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 26) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_SLAVE_RX_FIFO_FULL_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_TX_UNDERRUN_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 27) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_TX_UNDERRUN_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_START_BUSY_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 28) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_START_BUSY_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_RX_EVENT_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 29) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_RX_EVENT_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_RX_THRESHOLD_HIT_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 30) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_RX_THRESHOLD_HIT_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_RX_FIFO_FULL_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_enable[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_ENABLEr_MASTER_RX_FIFO_FULL_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_enable[0]=(((r).cmic_i2cm_smbus_event_enable[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_EVENT_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Event_Status
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_OFFSET 0x0000003c

#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Event_Status.
 */
typedef union CMIC_I2CM_SMBUS_EVENT_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_event_status[1];
	uint32_t _cmic_i2cm_smbus_event_status;
} CMIC_I2CM_SMBUS_EVENT_STATUSr_t;

#define CMIC_I2CM_SMBUS_EVENT_STATUSr_CLR(r) (r).cmic_i2cm_smbus_event_status[0] = 0
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SET(r,d) (r).cmic_i2cm_smbus_event_status[0] = d
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_GET(r) (r).cmic_i2cm_smbus_event_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_RESERVED_0f_GET(r) (((r).cmic_i2cm_smbus_event_status[0]) & 0x1fffff)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1fffff)) | (((uint32_t)f) & 0x1fffff))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_RD_EVENT_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 21) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_RD_EVENT_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_TX_UNDERRUN_ENf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 22) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_TX_UNDERRUN_ENf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_START_BUSYf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 23) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_START_BUSYf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_RX_EVENTf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 24) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_RX_EVENTf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_RX_THRESHOLD_HITf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 25) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_RX_THRESHOLD_HITf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_RX_FIFO_FULLf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 26) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_SLAVE_RX_FIFO_FULLf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_TX_UNDERRUNf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 27) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_TX_UNDERRUNf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_START_BUSYf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 28) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_START_BUSYf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_RX_EVENTf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 29) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_RX_EVENTf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_RX_THRESHOLD_HITf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 30) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_RX_THRESHOLD_HITf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_RX_FIFO_FULLf_GET(r) ((((r).cmic_i2cm_smbus_event_status[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_EVENT_STATUSr_MASTER_RX_FIFO_FULLf_SET(r,f) (r).cmic_i2cm_smbus_event_status[0]=(((r).cmic_i2cm_smbus_event_status[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_EVENT_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Master_Command
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_OFFSET 0x00000030

#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Master_Command.
 */
typedef union CMIC_I2CM_SMBUS_MASTER_COMMANDr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_master_command[1];
	uint32_t _cmic_i2cm_smbus_master_command;
} CMIC_I2CM_SMBUS_MASTER_COMMANDr_t;

#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_CLR(r) (r).cmic_i2cm_smbus_master_command[0] = 0
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_SET(r,d) (r).cmic_i2cm_smbus_master_command[0] = d
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_GET(r) (r).cmic_i2cm_smbus_master_command[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_RD_BYTE_COUNTf_GET(r) (((r).cmic_i2cm_smbus_master_command[0]) & 0xff)
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_RD_BYTE_COUNTf_SET(r,f) (r).cmic_i2cm_smbus_master_command[0]=(((r).cmic_i2cm_smbus_master_command[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_MASTER_PECf_GET(r) ((((r).cmic_i2cm_smbus_master_command[0]) >> 8) & 0x1)
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_MASTER_PECf_SET(r,f) (r).cmic_i2cm_smbus_master_command[0]=(((r).cmic_i2cm_smbus_master_command[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_SMBUS_PROTOCOLf_GET(r) ((((r).cmic_i2cm_smbus_master_command[0]) >> 9) & 0xf)
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_SMBUS_PROTOCOLf_SET(r,f) (r).cmic_i2cm_smbus_master_command[0]=(((r).cmic_i2cm_smbus_master_command[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_RESERVED_0f_GET(r) ((((r).cmic_i2cm_smbus_master_command[0]) >> 13) & 0xfff)
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_master_command[0]=(((r).cmic_i2cm_smbus_master_command[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_MASTER_STATUSf_GET(r) ((((r).cmic_i2cm_smbus_master_command[0]) >> 25) & 0x7)
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_MASTER_STATUSf_SET(r,f) (r).cmic_i2cm_smbus_master_command[0]=(((r).cmic_i2cm_smbus_master_command[0] & ~((uint32_t)0x7 << 25)) | ((((uint32_t)f) & 0x7) << 25))
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_MASTER_ABORTf_GET(r) ((((r).cmic_i2cm_smbus_master_command[0]) >> 30) & 0x1)
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_MASTER_ABORTf_SET(r,f) (r).cmic_i2cm_smbus_master_command[0]=(((r).cmic_i2cm_smbus_master_command[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_MASTER_START_BUSY_COMMANDf_GET(r) ((((r).cmic_i2cm_smbus_master_command[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_MASTER_COMMANDr_MASTER_START_BUSY_COMMANDf_SET(r,f) (r).cmic_i2cm_smbus_master_command[0]=(((r).cmic_i2cm_smbus_master_command[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_MASTER_COMMANDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Master_Data_Read
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_OFFSET 0x00000044

#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Master_Data_Read.
 */
typedef union CMIC_I2CM_SMBUS_MASTER_DATA_READr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_master_data_read[1];
	uint32_t _cmic_i2cm_smbus_master_data_read;
} CMIC_I2CM_SMBUS_MASTER_DATA_READr_t;

#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_CLR(r) (r).cmic_i2cm_smbus_master_data_read[0] = 0
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_SET(r,d) (r).cmic_i2cm_smbus_master_data_read[0] = d
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_GET(r) (r).cmic_i2cm_smbus_master_data_read[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_MASTER_SMBUS_RD_DATAf_GET(r) (((r).cmic_i2cm_smbus_master_data_read[0]) & 0xff)
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_MASTER_SMBUS_RD_DATAf_SET(r,f) (r).cmic_i2cm_smbus_master_data_read[0]=(((r).cmic_i2cm_smbus_master_data_read[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_RESERVED_0f_GET(r) ((((r).cmic_i2cm_smbus_master_data_read[0]) >> 8) & 0x1fffff)
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_master_data_read[0]=(((r).cmic_i2cm_smbus_master_data_read[0] & ~((uint32_t)0x1fffff << 8)) | ((((uint32_t)f) & 0x1fffff) << 8))
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_PEC_ERRf_GET(r) ((((r).cmic_i2cm_smbus_master_data_read[0]) >> 29) & 0x1)
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_PEC_ERRf_SET(r,f) (r).cmic_i2cm_smbus_master_data_read[0]=(((r).cmic_i2cm_smbus_master_data_read[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_MASTER_RD_STATUSf_GET(r) ((((r).cmic_i2cm_smbus_master_data_read[0]) >> 30) & 0x3)
#define CMIC_I2CM_SMBUS_MASTER_DATA_READr_MASTER_RD_STATUSf_SET(r,f) (r).cmic_i2cm_smbus_master_data_read[0]=(((r).cmic_i2cm_smbus_master_data_read[0] & ~((uint32_t)0x3 << 30)) | ((((uint32_t)f) & 0x3) << 30))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_MASTER_DATA_READr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Master_Data_Write
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_OFFSET 0x00000040

#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Master_Data_Write.
 */
typedef union CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_master_data_write[1];
	uint32_t _cmic_i2cm_smbus_master_data_write;
} CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_t;

#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_CLR(r) (r).cmic_i2cm_smbus_master_data_write[0] = 0
#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_SET(r,d) (r).cmic_i2cm_smbus_master_data_write[0] = d
#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_GET(r) (r).cmic_i2cm_smbus_master_data_write[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_MASTER_SMBUS_WR_DATAf_GET(r) (((r).cmic_i2cm_smbus_master_data_write[0]) & 0xff)
#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_MASTER_SMBUS_WR_DATAf_SET(r,f) (r).cmic_i2cm_smbus_master_data_write[0]=(((r).cmic_i2cm_smbus_master_data_write[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_RESERVED_0f_GET(r) ((((r).cmic_i2cm_smbus_master_data_write[0]) >> 8) & 0x7fffff)
#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_master_data_write[0]=(((r).cmic_i2cm_smbus_master_data_write[0] & ~((uint32_t)0x7fffff << 8)) | ((((uint32_t)f) & 0x7fffff) << 8))
#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_MASTER_WR_STATUSf_GET(r) ((((r).cmic_i2cm_smbus_master_data_write[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr_MASTER_WR_STATUSf_SET(r,f) (r).cmic_i2cm_smbus_master_data_write[0]=(((r).cmic_i2cm_smbus_master_data_write[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_MASTER_DATA_WRITEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Master_FIFO_control
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_OFFSET 0x0000000c

#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Master_FIFO_control.
 */
typedef union CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_master_fifo_control[1];
	uint32_t _cmic_i2cm_smbus_master_fifo_control;
} CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_t;

#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_CLR(r) (r).cmic_i2cm_smbus_master_fifo_control[0] = 0
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_SET(r,d) (r).cmic_i2cm_smbus_master_fifo_control[0] = d
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_GET(r) (r).cmic_i2cm_smbus_master_fifo_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_RESERVED_0f_GET(r) (((r).cmic_i2cm_smbus_master_fifo_control[0]) & 0xff)
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_master_fifo_control[0]=(((r).cmic_i2cm_smbus_master_fifo_control[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_MASTER_RX_FIFO_THRESHOLDf_GET(r) ((((r).cmic_i2cm_smbus_master_fifo_control[0]) >> 8) & 0x3f)
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_MASTER_RX_FIFO_THRESHOLDf_SET(r,f) (r).cmic_i2cm_smbus_master_fifo_control[0]=(((r).cmic_i2cm_smbus_master_fifo_control[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_RESERVED_1f_GET(r) ((((r).cmic_i2cm_smbus_master_fifo_control[0]) >> 14) & 0x3)
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_RESERVED_1f_SET(r,f) (r).cmic_i2cm_smbus_master_fifo_control[0]=(((r).cmic_i2cm_smbus_master_fifo_control[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_MASTER_RX_PKT_COUNTf_GET(r) ((((r).cmic_i2cm_smbus_master_fifo_control[0]) >> 16) & 0x7f)
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_MASTER_RX_PKT_COUNTf_SET(r,f) (r).cmic_i2cm_smbus_master_fifo_control[0]=(((r).cmic_i2cm_smbus_master_fifo_control[0] & ~((uint32_t)0x7f << 16)) | ((((uint32_t)f) & 0x7f) << 16))
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_RESERVED_2f_GET(r) ((((r).cmic_i2cm_smbus_master_fifo_control[0]) >> 23) & 0x7f)
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_RESERVED_2f_SET(r,f) (r).cmic_i2cm_smbus_master_fifo_control[0]=(((r).cmic_i2cm_smbus_master_fifo_control[0] & ~((uint32_t)0x7f << 23)) | ((((uint32_t)f) & 0x7f) << 23))
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_MASTER_TX_FIFO_FLUSHf_GET(r) ((((r).cmic_i2cm_smbus_master_fifo_control[0]) >> 30) & 0x1)
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_MASTER_TX_FIFO_FLUSHf_SET(r,f) (r).cmic_i2cm_smbus_master_fifo_control[0]=(((r).cmic_i2cm_smbus_master_fifo_control[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_MASTER_RX_FIFO_FLUSHf_GET(r) ((((r).cmic_i2cm_smbus_master_fifo_control[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr_MASTER_RX_FIFO_FLUSHf_SET(r,f) (r).cmic_i2cm_smbus_master_fifo_control[0]=(((r).cmic_i2cm_smbus_master_fifo_control[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_MASTER_FIFO_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Slave_Command
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_OFFSET 0x00000034

#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Slave_Command.
 */
typedef union CMIC_I2CM_SMBUS_SLAVE_COMMANDr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_slave_command[1];
	uint32_t _cmic_i2cm_smbus_slave_command;
} CMIC_I2CM_SMBUS_SLAVE_COMMANDr_t;

#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_CLR(r) (r).cmic_i2cm_smbus_slave_command[0] = 0
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SET(r,d) (r).cmic_i2cm_smbus_slave_command[0] = d
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_GET(r) (r).cmic_i2cm_smbus_slave_command[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_RESERVED_0f_GET(r) (((r).cmic_i2cm_smbus_slave_command[0]) & 0xff)
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_slave_command[0]=(((r).cmic_i2cm_smbus_slave_command[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SLAVE_PECf_GET(r) ((((r).cmic_i2cm_smbus_slave_command[0]) >> 8) & 0x1)
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SLAVE_PECf_SET(r,f) (r).cmic_i2cm_smbus_slave_command[0]=(((r).cmic_i2cm_smbus_slave_command[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_RESERVED_1f_GET(r) ((((r).cmic_i2cm_smbus_slave_command[0]) >> 9) & 0x3fff)
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_RESERVED_1f_SET(r,f) (r).cmic_i2cm_smbus_slave_command[0]=(((r).cmic_i2cm_smbus_slave_command[0] & ~((uint32_t)0x3fff << 9)) | ((((uint32_t)f) & 0x3fff) << 9))
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SLAVE_STATUSf_GET(r) ((((r).cmic_i2cm_smbus_slave_command[0]) >> 23) & 0x7)
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SLAVE_STATUSf_SET(r,f) (r).cmic_i2cm_smbus_slave_command[0]=(((r).cmic_i2cm_smbus_slave_command[0] & ~((uint32_t)0x7 << 23)) | ((((uint32_t)f) & 0x7) << 23))
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_RESERVED_2f_GET(r) ((((r).cmic_i2cm_smbus_slave_command[0]) >> 26) & 0xf)
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_RESERVED_2f_SET(r,f) (r).cmic_i2cm_smbus_slave_command[0]=(((r).cmic_i2cm_smbus_slave_command[0] & ~((uint32_t)0xf << 26)) | ((((uint32_t)f) & 0xf) << 26))
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SLAVE_ABORTf_GET(r) ((((r).cmic_i2cm_smbus_slave_command[0]) >> 30) & 0x1)
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SLAVE_ABORTf_SET(r,f) (r).cmic_i2cm_smbus_slave_command[0]=(((r).cmic_i2cm_smbus_slave_command[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SLAVE_START_BUSY_COMMANDf_GET(r) ((((r).cmic_i2cm_smbus_slave_command[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_SLAVE_COMMANDr_SLAVE_START_BUSY_COMMANDf_SET(r,f) (r).cmic_i2cm_smbus_slave_command[0]=(((r).cmic_i2cm_smbus_slave_command[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_SLAVE_COMMANDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Slave_Data_Read
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_OFFSET 0x0000004c

#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Slave_Data_Read.
 */
typedef union CMIC_I2CM_SMBUS_SLAVE_DATA_READr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_slave_data_read[1];
	uint32_t _cmic_i2cm_smbus_slave_data_read;
} CMIC_I2CM_SMBUS_SLAVE_DATA_READr_t;

#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_CLR(r) (r).cmic_i2cm_smbus_slave_data_read[0] = 0
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_SET(r,d) (r).cmic_i2cm_smbus_slave_data_read[0] = d
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_GET(r) (r).cmic_i2cm_smbus_slave_data_read[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_SLAVE_SMBUS_RD_DATAf_GET(r) (((r).cmic_i2cm_smbus_slave_data_read[0]) & 0xff)
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_SLAVE_SMBUS_RD_DATAf_SET(r,f) (r).cmic_i2cm_smbus_slave_data_read[0]=(((r).cmic_i2cm_smbus_slave_data_read[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_RESERVED_0f_GET(r) ((((r).cmic_i2cm_smbus_slave_data_read[0]) >> 8) & 0xfffff)
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_slave_data_read[0]=(((r).cmic_i2cm_smbus_slave_data_read[0] & ~((uint32_t)0xfffff << 8)) | ((((uint32_t)f) & 0xfffff) << 8))
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_ERR_STATUSf_GET(r) ((((r).cmic_i2cm_smbus_slave_data_read[0]) >> 28) & 0x3)
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_ERR_STATUSf_SET(r,f) (r).cmic_i2cm_smbus_slave_data_read[0]=(((r).cmic_i2cm_smbus_slave_data_read[0] & ~((uint32_t)0x3 << 28)) | ((((uint32_t)f) & 0x3) << 28))
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_SLAVE_RD_STATUSf_GET(r) ((((r).cmic_i2cm_smbus_slave_data_read[0]) >> 30) & 0x3)
#define CMIC_I2CM_SMBUS_SLAVE_DATA_READr_SLAVE_RD_STATUSf_SET(r,f) (r).cmic_i2cm_smbus_slave_data_read[0]=(((r).cmic_i2cm_smbus_slave_data_read[0] & ~((uint32_t)0x3 << 30)) | ((((uint32_t)f) & 0x3) << 30))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_SLAVE_DATA_READr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Slave_Data_Write
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_OFFSET 0x00000048

#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Slave_Data_Write.
 */
typedef union CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_slave_data_write[1];
	uint32_t _cmic_i2cm_smbus_slave_data_write;
} CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_t;

#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_CLR(r) (r).cmic_i2cm_smbus_slave_data_write[0] = 0
#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_SET(r,d) (r).cmic_i2cm_smbus_slave_data_write[0] = d
#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_GET(r) (r).cmic_i2cm_smbus_slave_data_write[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_SLAVE_SMBUS_WR_DATAf_GET(r) (((r).cmic_i2cm_smbus_slave_data_write[0]) & 0xff)
#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_SLAVE_SMBUS_WR_DATAf_SET(r,f) (r).cmic_i2cm_smbus_slave_data_write[0]=(((r).cmic_i2cm_smbus_slave_data_write[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_RESERVED_0f_GET(r) ((((r).cmic_i2cm_smbus_slave_data_write[0]) >> 8) & 0x7fffff)
#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_slave_data_write[0]=(((r).cmic_i2cm_smbus_slave_data_write[0] & ~((uint32_t)0x7fffff << 8)) | ((((uint32_t)f) & 0x7fffff) << 8))
#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_SLAVE_WR_STATUSf_GET(r) ((((r).cmic_i2cm_smbus_slave_data_write[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr_SLAVE_WR_STATUSf_SET(r,f) (r).cmic_i2cm_smbus_slave_data_write[0]=(((r).cmic_i2cm_smbus_slave_data_write[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_SLAVE_DATA_WRITEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Slave_FIFO_control
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_OFFSET 0x00000010

#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Slave_FIFO_control.
 */
typedef union CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_slave_fifo_control[1];
	uint32_t _cmic_i2cm_smbus_slave_fifo_control;
} CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_t;

#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_CLR(r) (r).cmic_i2cm_smbus_slave_fifo_control[0] = 0
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SET(r,d) (r).cmic_i2cm_smbus_slave_fifo_control[0] = d
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_GET(r) (r).cmic_i2cm_smbus_slave_fifo_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_RESERVED_0f_GET(r) (((r).cmic_i2cm_smbus_slave_fifo_control[0]) & 0xff)
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_slave_fifo_control[0]=(((r).cmic_i2cm_smbus_slave_fifo_control[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SLAVE_RX_FIFO_THRESHOLDf_GET(r) ((((r).cmic_i2cm_smbus_slave_fifo_control[0]) >> 8) & 0x3f)
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SLAVE_RX_FIFO_THRESHOLDf_SET(r,f) (r).cmic_i2cm_smbus_slave_fifo_control[0]=(((r).cmic_i2cm_smbus_slave_fifo_control[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_RESERVED_1f_GET(r) ((((r).cmic_i2cm_smbus_slave_fifo_control[0]) >> 14) & 0x3)
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_RESERVED_1f_SET(r,f) (r).cmic_i2cm_smbus_slave_fifo_control[0]=(((r).cmic_i2cm_smbus_slave_fifo_control[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SLAVE_RX_PKT_COUNTf_GET(r) ((((r).cmic_i2cm_smbus_slave_fifo_control[0]) >> 16) & 0x7f)
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SLAVE_RX_PKT_COUNTf_SET(r,f) (r).cmic_i2cm_smbus_slave_fifo_control[0]=(((r).cmic_i2cm_smbus_slave_fifo_control[0] & ~((uint32_t)0x7f << 16)) | ((((uint32_t)f) & 0x7f) << 16))
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_RESERVED_2f_GET(r) ((((r).cmic_i2cm_smbus_slave_fifo_control[0]) >> 23) & 0x7f)
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_RESERVED_2f_SET(r,f) (r).cmic_i2cm_smbus_slave_fifo_control[0]=(((r).cmic_i2cm_smbus_slave_fifo_control[0] & ~((uint32_t)0x7f << 23)) | ((((uint32_t)f) & 0x7f) << 23))
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SLAVE_TX_FIFO_FLUSHf_GET(r) ((((r).cmic_i2cm_smbus_slave_fifo_control[0]) >> 30) & 0x1)
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SLAVE_TX_FIFO_FLUSHf_SET(r,f) (r).cmic_i2cm_smbus_slave_fifo_control[0]=(((r).cmic_i2cm_smbus_slave_fifo_control[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SLAVE_RX_FIFO_FLUSHf_GET(r) ((((r).cmic_i2cm_smbus_slave_fifo_control[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr_SLAVE_RX_FIFO_FLUSHf_SET(r,f) (r).cmic_i2cm_smbus_slave_fifo_control[0]=(((r).cmic_i2cm_smbus_slave_fifo_control[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_SLAVE_FIFO_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_I2CM_SMBus_Timing_Config
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_OFFSET 0x00000004

#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_I2CM_SMBus_Timing_Config.
 */
typedef union CMIC_I2CM_SMBUS_TIMING_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_i2cm_smbus_timing_config[1];
	uint32_t _cmic_i2cm_smbus_timing_config;
} CMIC_I2CM_SMBUS_TIMING_CONFIGr_t;

#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_CLR(r) (r).cmic_i2cm_smbus_timing_config[0] = 0
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_SET(r,d) (r).cmic_i2cm_smbus_timing_config[0] = d
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_GET(r) (r).cmic_i2cm_smbus_timing_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_RESERVED_0f_GET(r) (((r).cmic_i2cm_smbus_timing_config[0]) & 0xff)
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_RESERVED_0f_SET(r,f) (r).cmic_i2cm_smbus_timing_config[0]=(((r).cmic_i2cm_smbus_timing_config[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_SMBUS_IDLE_TIMEf_GET(r) ((((r).cmic_i2cm_smbus_timing_config[0]) >> 8) & 0xff)
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_SMBUS_IDLE_TIMEf_SET(r,f) (r).cmic_i2cm_smbus_timing_config[0]=(((r).cmic_i2cm_smbus_timing_config[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_PERIODIC_SLAVE_STRETCHf_GET(r) ((((r).cmic_i2cm_smbus_timing_config[0]) >> 16) & 0xff)
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_PERIODIC_SLAVE_STRETCHf_SET(r,f) (r).cmic_i2cm_smbus_timing_config[0]=(((r).cmic_i2cm_smbus_timing_config[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_RANDOM_SLAVE_STRETCHf_GET(r) ((((r).cmic_i2cm_smbus_timing_config[0]) >> 24) & 0x7f)
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_RANDOM_SLAVE_STRETCHf_SET(r,f) (r).cmic_i2cm_smbus_timing_config[0]=(((r).cmic_i2cm_smbus_timing_config[0] & ~((uint32_t)0x7f << 24)) | ((((uint32_t)f) & 0x7f) << 24))
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_MODE_400f_GET(r) ((((r).cmic_i2cm_smbus_timing_config[0]) >> 31) & 0x1)
#define CMIC_I2CM_SMBUS_TIMING_CONFIGr_MODE_400f_SET(r,f) (r).cmic_i2cm_smbus_timing_config[0]=(((r).cmic_i2cm_smbus_timing_config[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_I2CM_SMBUS_TIMING_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_INTR_PKT_PACING_DELAY
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_INTR_PKT_PACING_DELAYr_OFFSET 0x00022244

#define CMIC_INTR_PKT_PACING_DELAYr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_INTR_PKT_PACING_DELAY.
 */
typedef union CMIC_INTR_PKT_PACING_DELAYr_s {
	uint32_t v[1];
	uint32_t cmic_intr_pkt_pacing_delay[1];
	uint32_t _cmic_intr_pkt_pacing_delay;
} CMIC_INTR_PKT_PACING_DELAYr_t;

#define CMIC_INTR_PKT_PACING_DELAYr_CLR(r) (r).cmic_intr_pkt_pacing_delay[0] = 0
#define CMIC_INTR_PKT_PACING_DELAYr_SET(r,d) (r).cmic_intr_pkt_pacing_delay[0] = d
#define CMIC_INTR_PKT_PACING_DELAYr_GET(r) (r).cmic_intr_pkt_pacing_delay[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_INTR_PKT_PACING_DELAYr_PACING_DELAYf_GET(r) ((r).cmic_intr_pkt_pacing_delay[0])
#define CMIC_INTR_PKT_PACING_DELAYr_PACING_DELAYf_SET(r,f) (r).cmic_intr_pkt_pacing_delay[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_INTR_PKT_PACING_DELAYr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_CLK_DIV
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_CLK_DIVr_OFFSET 0x0002005c

#define CMIC_LEDUP0_CLK_DIVr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_CLK_DIV.
 */
typedef union CMIC_LEDUP0_CLK_DIVr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_clk_div[1];
	uint32_t _cmic_ledup0_clk_div;
} CMIC_LEDUP0_CLK_DIVr_t;

#define CMIC_LEDUP0_CLK_DIVr_CLR(r) (r).cmic_ledup0_clk_div[0] = 0
#define CMIC_LEDUP0_CLK_DIVr_SET(r,d) (r).cmic_ledup0_clk_div[0] = d
#define CMIC_LEDUP0_CLK_DIVr_GET(r) (r).cmic_ledup0_clk_div[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_CLK_DIVr_LEDCLK_HALF_PERIODf_GET(r) (((r).cmic_ledup0_clk_div[0]) & 0xffff)
#define CMIC_LEDUP0_CLK_DIVr_LEDCLK_HALF_PERIODf_SET(r,f) (r).cmic_ledup0_clk_div[0]=(((r).cmic_ledup0_clk_div[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_LEDUP0_CLK_DIVr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_CLK_PARAMS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_CLK_PARAMSr_OFFSET 0x00020050

#define CMIC_LEDUP0_CLK_PARAMSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_CLK_PARAMS.
 */
typedef union CMIC_LEDUP0_CLK_PARAMSr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_clk_params[1];
	uint32_t _cmic_ledup0_clk_params;
} CMIC_LEDUP0_CLK_PARAMSr_t;

#define CMIC_LEDUP0_CLK_PARAMSr_CLR(r) (r).cmic_ledup0_clk_params[0] = 0
#define CMIC_LEDUP0_CLK_PARAMSr_SET(r,d) (r).cmic_ledup0_clk_params[0] = d
#define CMIC_LEDUP0_CLK_PARAMSr_GET(r) (r).cmic_ledup0_clk_params[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_CLK_PARAMSr_REFRESH_CYCLE_PERIODf_GET(r) ((r).cmic_ledup0_clk_params[0])
#define CMIC_LEDUP0_CLK_PARAMSr_REFRESH_CYCLE_PERIODf_SET(r,f) (r).cmic_ledup0_clk_params[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_LEDUP0_CLK_PARAMSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_CTRLr_OFFSET 0x00020000

#define CMIC_LEDUP0_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_CTRL.
 */
typedef union CMIC_LEDUP0_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_ctrl[1];
	uint32_t _cmic_ledup0_ctrl;
} CMIC_LEDUP0_CTRLr_t;

#define CMIC_LEDUP0_CTRLr_CLR(r) (r).cmic_ledup0_ctrl[0] = 0
#define CMIC_LEDUP0_CTRLr_SET(r,d) (r).cmic_ledup0_ctrl[0] = d
#define CMIC_LEDUP0_CTRLr_GET(r) (r).cmic_ledup0_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_CTRLr_LEDUP_ENf_GET(r) (((r).cmic_ledup0_ctrl[0]) & 0x1)
#define CMIC_LEDUP0_CTRLr_LEDUP_ENf_SET(r,f) (r).cmic_ledup0_ctrl[0]=(((r).cmic_ledup0_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_LEDUP0_CTRLr_LEDUP_SCAN_INTRA_PORT_DELAYf_GET(r) ((((r).cmic_ledup0_ctrl[0]) >> 1) & 0x7)
#define CMIC_LEDUP0_CTRLr_LEDUP_SCAN_INTRA_PORT_DELAYf_SET(r,f) (r).cmic_ledup0_ctrl[0]=(((r).cmic_ledup0_ctrl[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define CMIC_LEDUP0_CTRLr_LEDUP_SCAN_START_DELAYf_GET(r) ((((r).cmic_ledup0_ctrl[0]) >> 4) & 0x3f)
#define CMIC_LEDUP0_CTRLr_LEDUP_SCAN_START_DELAYf_SET(r,f) (r).cmic_ledup0_ctrl[0]=(((r).cmic_ledup0_ctrl[0] & ~((uint32_t)0x3f << 4)) | ((((uint32_t)f) & 0x3f) << 4))

/*******************************************************************************
 * End of 'CMIC_LEDUP0_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_DATA_RAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_DATA_RAMr_OFFSET 0x00020400

#define CMIC_LEDUP0_DATA_RAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_DATA_RAM.
 */
typedef union CMIC_LEDUP0_DATA_RAMr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_data_ram[1];
	uint32_t _cmic_ledup0_data_ram;
} CMIC_LEDUP0_DATA_RAMr_t;

#define CMIC_LEDUP0_DATA_RAMr_CLR(r) (r).cmic_ledup0_data_ram[0] = 0
#define CMIC_LEDUP0_DATA_RAMr_SET(r,d) (r).cmic_ledup0_data_ram[0] = d
#define CMIC_LEDUP0_DATA_RAMr_GET(r) (r).cmic_ledup0_data_ram[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_DATA_RAMr_DATAf_GET(r) (((r).cmic_ledup0_data_ram[0]) & 0xff)
#define CMIC_LEDUP0_DATA_RAMr_DATAf_SET(r,f) (r).cmic_ledup0_data_ram[0]=(((r).cmic_ledup0_data_ram[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP0_DATA_RAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_OFFSET 0x00020010

#define CMIC_LEDUP0_PORT_ORDER_REMAPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_PORT_ORDER_REMAP.
 */
typedef union CMIC_LEDUP0_PORT_ORDER_REMAPr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_port_order_remap[1];
	uint32_t _cmic_ledup0_port_order_remap;
} CMIC_LEDUP0_PORT_ORDER_REMAPr_t;

#define CMIC_LEDUP0_PORT_ORDER_REMAPr_CLR(r) (r).cmic_ledup0_port_order_remap[0] = 0
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_SET(r,d) (r).cmic_ledup0_port_order_remap[0] = d
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_GET(r) (r).cmic_ledup0_port_order_remap[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_REMAP_PORT_0f_GET(r) (((r).cmic_ledup0_port_order_remap[0]) & 0x3f)
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_REMAP_PORT_0f_SET(r,f) (r).cmic_ledup0_port_order_remap[0]=(((r).cmic_ledup0_port_order_remap[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_REMAP_PORT_1f_GET(r) ((((r).cmic_ledup0_port_order_remap[0]) >> 6) & 0x3f)
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_REMAP_PORT_1f_SET(r,f) (r).cmic_ledup0_port_order_remap[0]=(((r).cmic_ledup0_port_order_remap[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_REMAP_PORT_2f_GET(r) ((((r).cmic_ledup0_port_order_remap[0]) >> 12) & 0x3f)
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_REMAP_PORT_2f_SET(r,f) (r).cmic_ledup0_port_order_remap[0]=(((r).cmic_ledup0_port_order_remap[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_REMAP_PORT_3f_GET(r) ((((r).cmic_ledup0_port_order_remap[0]) >> 18) & 0x3f)
#define CMIC_LEDUP0_PORT_ORDER_REMAPr_REMAP_PORT_3f_SET(r,f) (r).cmic_ledup0_port_order_remap[0]=(((r).cmic_ledup0_port_order_remap[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))

/*******************************************************************************
 * End of 'CMIC_LEDUP0_PORT_ORDER_REMAPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_0_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_0_3r_OFFSET 0x00020010

#define CMIC_LEDUP0_PORT_ORDER_REMAP_0_3r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_0_3r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_12_15
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_12_15r_OFFSET 0x0002001c

#define CMIC_LEDUP0_PORT_ORDER_REMAP_12_15r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_12_15r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_16_19
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_16_19r_OFFSET 0x00020020

#define CMIC_LEDUP0_PORT_ORDER_REMAP_16_19r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_16_19r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_20_23
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_20_23r_OFFSET 0x00020024

#define CMIC_LEDUP0_PORT_ORDER_REMAP_20_23r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_20_23r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_24_27
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_24_27r_OFFSET 0x00020028

#define CMIC_LEDUP0_PORT_ORDER_REMAP_24_27r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_24_27r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_28_31
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_28_31r_OFFSET 0x0002002c

#define CMIC_LEDUP0_PORT_ORDER_REMAP_28_31r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_28_31r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_32_35
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_32_35r_OFFSET 0x00020030

#define CMIC_LEDUP0_PORT_ORDER_REMAP_32_35r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_32_35r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_36_39
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_36_39r_OFFSET 0x00020034

#define CMIC_LEDUP0_PORT_ORDER_REMAP_36_39r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_36_39r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_40_43
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_40_43r_OFFSET 0x00020038

#define CMIC_LEDUP0_PORT_ORDER_REMAP_40_43r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_40_43r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_44_47
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_44_47r_OFFSET 0x0002003c

#define CMIC_LEDUP0_PORT_ORDER_REMAP_44_47r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_44_47r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_48_51
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_48_51r_OFFSET 0x00020040

#define CMIC_LEDUP0_PORT_ORDER_REMAP_48_51r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_48_51r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_4_7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_4_7r_OFFSET 0x00020014

#define CMIC_LEDUP0_PORT_ORDER_REMAP_4_7r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_4_7r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_52_55
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_52_55r_OFFSET 0x00020044

#define CMIC_LEDUP0_PORT_ORDER_REMAP_52_55r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_52_55r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_56_59
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_56_59r_OFFSET 0x00020048

#define CMIC_LEDUP0_PORT_ORDER_REMAP_56_59r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_56_59r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_60_63
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_60_63r_OFFSET 0x0002004c

#define CMIC_LEDUP0_PORT_ORDER_REMAP_60_63r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_60_63r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PORT_ORDER_REMAP_8_11
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PORT_ORDER_REMAP_8_11r_OFFSET 0x00020018

#define CMIC_LEDUP0_PORT_ORDER_REMAP_8_11r_SIZE 4

/* CMIC_LEDUP0_PORT_ORDER_REMAP_8_11r is element of CMIC_LEDUP0_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_PROGRAM_RAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_PROGRAM_RAMr_OFFSET 0x00020800

#define CMIC_LEDUP0_PROGRAM_RAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_PROGRAM_RAM.
 */
typedef union CMIC_LEDUP0_PROGRAM_RAMr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_program_ram[1];
	uint32_t _cmic_ledup0_program_ram;
} CMIC_LEDUP0_PROGRAM_RAMr_t;

#define CMIC_LEDUP0_PROGRAM_RAMr_CLR(r) (r).cmic_ledup0_program_ram[0] = 0
#define CMIC_LEDUP0_PROGRAM_RAMr_SET(r,d) (r).cmic_ledup0_program_ram[0] = d
#define CMIC_LEDUP0_PROGRAM_RAMr_GET(r) (r).cmic_ledup0_program_ram[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_PROGRAM_RAMr_DATAf_GET(r) (((r).cmic_ledup0_program_ram[0]) & 0xff)
#define CMIC_LEDUP0_PROGRAM_RAMr_DATAf_SET(r,f) (r).cmic_ledup0_program_ram[0]=(((r).cmic_ledup0_program_ram[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP0_PROGRAM_RAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr_OFFSET 0x00020008

#define CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDR.
 */
typedef union CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_scanchain_assembly_st_addr[1];
	uint32_t _cmic_ledup0_scanchain_assembly_st_addr;
} CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr_t;

#define CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr_CLR(r) (r).cmic_ledup0_scanchain_assembly_st_addr[0] = 0
#define CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr_SET(r,d) (r).cmic_ledup0_scanchain_assembly_st_addr[0] = d
#define CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr_GET(r) (r).cmic_ledup0_scanchain_assembly_st_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr_SCANCHAIN_ASSEMBLY_ST_ADDRf_GET(r) (((r).cmic_ledup0_scanchain_assembly_st_addr[0]) & 0xff)
#define CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr_SCANCHAIN_ASSEMBLY_ST_ADDRf_SET(r,f) (r).cmic_ledup0_scanchain_assembly_st_addr[0]=(((r).cmic_ledup0_scanchain_assembly_st_addr[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP0_SCANCHAIN_ASSEMBLY_ST_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_SCANOUT_COUNT_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_SCANOUT_COUNT_UPPERr_OFFSET 0x00020054

#define CMIC_LEDUP0_SCANOUT_COUNT_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_SCANOUT_COUNT_UPPER.
 */
typedef union CMIC_LEDUP0_SCANOUT_COUNT_UPPERr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_scanout_count_upper[1];
	uint32_t _cmic_ledup0_scanout_count_upper;
} CMIC_LEDUP0_SCANOUT_COUNT_UPPERr_t;

#define CMIC_LEDUP0_SCANOUT_COUNT_UPPERr_CLR(r) (r).cmic_ledup0_scanout_count_upper[0] = 0
#define CMIC_LEDUP0_SCANOUT_COUNT_UPPERr_SET(r,d) (r).cmic_ledup0_scanout_count_upper[0] = d
#define CMIC_LEDUP0_SCANOUT_COUNT_UPPERr_GET(r) (r).cmic_ledup0_scanout_count_upper[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_SCANOUT_COUNT_UPPERr_SCANOUT_COUNT_UPPERf_GET(r) (((r).cmic_ledup0_scanout_count_upper[0]) & 0x3)
#define CMIC_LEDUP0_SCANOUT_COUNT_UPPERr_SCANOUT_COUNT_UPPERf_SET(r,f) (r).cmic_ledup0_scanout_count_upper[0]=(((r).cmic_ledup0_scanout_count_upper[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*******************************************************************************
 * End of 'CMIC_LEDUP0_SCANOUT_COUNT_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_STATUSr_OFFSET 0x00020004

#define CMIC_LEDUP0_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_STATUS.
 */
typedef union CMIC_LEDUP0_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_status[1];
	uint32_t _cmic_ledup0_status;
} CMIC_LEDUP0_STATUSr_t;

#define CMIC_LEDUP0_STATUSr_CLR(r) (r).cmic_ledup0_status[0] = 0
#define CMIC_LEDUP0_STATUSr_SET(r,d) (r).cmic_ledup0_status[0] = d
#define CMIC_LEDUP0_STATUSr_GET(r) (r).cmic_ledup0_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_STATUSr_PROGRAM_COUNTERf_GET(r) (((r).cmic_ledup0_status[0]) & 0xff)
#define CMIC_LEDUP0_STATUSr_PROGRAM_COUNTERf_SET(r,f) (r).cmic_ledup0_status[0]=(((r).cmic_ledup0_status[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_LEDUP0_STATUSr_LEDUP_RUNNINGf_GET(r) ((((r).cmic_ledup0_status[0]) >> 8) & 0x1)
#define CMIC_LEDUP0_STATUSr_LEDUP_RUNNINGf_SET(r,f) (r).cmic_ledup0_status[0]=(((r).cmic_ledup0_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_LEDUP0_STATUSr_LEDUP_INITIALISINGf_GET(r) ((((r).cmic_ledup0_status[0]) >> 9) & 0x1)
#define CMIC_LEDUP0_STATUSr_LEDUP_INITIALISINGf_SET(r,f) (r).cmic_ledup0_status[0]=(((r).cmic_ledup0_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_LEDUP0_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP0_TM_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP0_TM_CONTROLr_OFFSET 0x00020058

#define CMIC_LEDUP0_TM_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP0_TM_CONTROL.
 */
typedef union CMIC_LEDUP0_TM_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_ledup0_tm_control[1];
	uint32_t _cmic_ledup0_tm_control;
} CMIC_LEDUP0_TM_CONTROLr_t;

#define CMIC_LEDUP0_TM_CONTROLr_CLR(r) (r).cmic_ledup0_tm_control[0] = 0
#define CMIC_LEDUP0_TM_CONTROLr_SET(r,d) (r).cmic_ledup0_tm_control[0] = d
#define CMIC_LEDUP0_TM_CONTROLr_GET(r) (r).cmic_ledup0_tm_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP0_TM_CONTROLr_TMf_GET(r) (((r).cmic_ledup0_tm_control[0]) & 0xff)
#define CMIC_LEDUP0_TM_CONTROLr_TMf_SET(r,f) (r).cmic_ledup0_tm_control[0]=(((r).cmic_ledup0_tm_control[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP0_TM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_CLK_DIV
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_CLK_DIVr_OFFSET 0x0002105c

#define CMIC_LEDUP1_CLK_DIVr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_CLK_DIV.
 */
typedef union CMIC_LEDUP1_CLK_DIVr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_clk_div[1];
	uint32_t _cmic_ledup1_clk_div;
} CMIC_LEDUP1_CLK_DIVr_t;

#define CMIC_LEDUP1_CLK_DIVr_CLR(r) (r).cmic_ledup1_clk_div[0] = 0
#define CMIC_LEDUP1_CLK_DIVr_SET(r,d) (r).cmic_ledup1_clk_div[0] = d
#define CMIC_LEDUP1_CLK_DIVr_GET(r) (r).cmic_ledup1_clk_div[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_CLK_DIVr_LEDCLK_HALF_PERIODf_GET(r) (((r).cmic_ledup1_clk_div[0]) & 0xffff)
#define CMIC_LEDUP1_CLK_DIVr_LEDCLK_HALF_PERIODf_SET(r,f) (r).cmic_ledup1_clk_div[0]=(((r).cmic_ledup1_clk_div[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_LEDUP1_CLK_DIVr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_CLK_PARAMS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_CLK_PARAMSr_OFFSET 0x00021050

#define CMIC_LEDUP1_CLK_PARAMSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_CLK_PARAMS.
 */
typedef union CMIC_LEDUP1_CLK_PARAMSr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_clk_params[1];
	uint32_t _cmic_ledup1_clk_params;
} CMIC_LEDUP1_CLK_PARAMSr_t;

#define CMIC_LEDUP1_CLK_PARAMSr_CLR(r) (r).cmic_ledup1_clk_params[0] = 0
#define CMIC_LEDUP1_CLK_PARAMSr_SET(r,d) (r).cmic_ledup1_clk_params[0] = d
#define CMIC_LEDUP1_CLK_PARAMSr_GET(r) (r).cmic_ledup1_clk_params[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_CLK_PARAMSr_REFRESH_CYCLE_PERIODf_GET(r) ((r).cmic_ledup1_clk_params[0])
#define CMIC_LEDUP1_CLK_PARAMSr_REFRESH_CYCLE_PERIODf_SET(r,f) (r).cmic_ledup1_clk_params[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_LEDUP1_CLK_PARAMSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_CTRLr_OFFSET 0x00021000

#define CMIC_LEDUP1_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_CTRL.
 */
typedef union CMIC_LEDUP1_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_ctrl[1];
	uint32_t _cmic_ledup1_ctrl;
} CMIC_LEDUP1_CTRLr_t;

#define CMIC_LEDUP1_CTRLr_CLR(r) (r).cmic_ledup1_ctrl[0] = 0
#define CMIC_LEDUP1_CTRLr_SET(r,d) (r).cmic_ledup1_ctrl[0] = d
#define CMIC_LEDUP1_CTRLr_GET(r) (r).cmic_ledup1_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_CTRLr_LEDUP_ENf_GET(r) (((r).cmic_ledup1_ctrl[0]) & 0x1)
#define CMIC_LEDUP1_CTRLr_LEDUP_ENf_SET(r,f) (r).cmic_ledup1_ctrl[0]=(((r).cmic_ledup1_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_LEDUP1_CTRLr_LEDUP_SCAN_INTRA_PORT_DELAYf_GET(r) ((((r).cmic_ledup1_ctrl[0]) >> 1) & 0x7)
#define CMIC_LEDUP1_CTRLr_LEDUP_SCAN_INTRA_PORT_DELAYf_SET(r,f) (r).cmic_ledup1_ctrl[0]=(((r).cmic_ledup1_ctrl[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define CMIC_LEDUP1_CTRLr_LEDUP_SCAN_START_DELAYf_GET(r) ((((r).cmic_ledup1_ctrl[0]) >> 4) & 0x3f)
#define CMIC_LEDUP1_CTRLr_LEDUP_SCAN_START_DELAYf_SET(r,f) (r).cmic_ledup1_ctrl[0]=(((r).cmic_ledup1_ctrl[0] & ~((uint32_t)0x3f << 4)) | ((((uint32_t)f) & 0x3f) << 4))

/*******************************************************************************
 * End of 'CMIC_LEDUP1_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_DATA_RAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_DATA_RAMr_OFFSET 0x00021400

#define CMIC_LEDUP1_DATA_RAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_DATA_RAM.
 */
typedef union CMIC_LEDUP1_DATA_RAMr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_data_ram[1];
	uint32_t _cmic_ledup1_data_ram;
} CMIC_LEDUP1_DATA_RAMr_t;

#define CMIC_LEDUP1_DATA_RAMr_CLR(r) (r).cmic_ledup1_data_ram[0] = 0
#define CMIC_LEDUP1_DATA_RAMr_SET(r,d) (r).cmic_ledup1_data_ram[0] = d
#define CMIC_LEDUP1_DATA_RAMr_GET(r) (r).cmic_ledup1_data_ram[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_DATA_RAMr_DATAf_GET(r) (((r).cmic_ledup1_data_ram[0]) & 0xff)
#define CMIC_LEDUP1_DATA_RAMr_DATAf_SET(r,f) (r).cmic_ledup1_data_ram[0]=(((r).cmic_ledup1_data_ram[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP1_DATA_RAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_OFFSET 0x00021010

#define CMIC_LEDUP1_PORT_ORDER_REMAPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_PORT_ORDER_REMAP.
 */
typedef union CMIC_LEDUP1_PORT_ORDER_REMAPr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_port_order_remap[1];
	uint32_t _cmic_ledup1_port_order_remap;
} CMIC_LEDUP1_PORT_ORDER_REMAPr_t;

#define CMIC_LEDUP1_PORT_ORDER_REMAPr_CLR(r) (r).cmic_ledup1_port_order_remap[0] = 0
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_SET(r,d) (r).cmic_ledup1_port_order_remap[0] = d
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_GET(r) (r).cmic_ledup1_port_order_remap[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_REMAP_PORT_0f_GET(r) (((r).cmic_ledup1_port_order_remap[0]) & 0x3f)
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_REMAP_PORT_0f_SET(r,f) (r).cmic_ledup1_port_order_remap[0]=(((r).cmic_ledup1_port_order_remap[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_REMAP_PORT_1f_GET(r) ((((r).cmic_ledup1_port_order_remap[0]) >> 6) & 0x3f)
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_REMAP_PORT_1f_SET(r,f) (r).cmic_ledup1_port_order_remap[0]=(((r).cmic_ledup1_port_order_remap[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_REMAP_PORT_2f_GET(r) ((((r).cmic_ledup1_port_order_remap[0]) >> 12) & 0x3f)
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_REMAP_PORT_2f_SET(r,f) (r).cmic_ledup1_port_order_remap[0]=(((r).cmic_ledup1_port_order_remap[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_REMAP_PORT_3f_GET(r) ((((r).cmic_ledup1_port_order_remap[0]) >> 18) & 0x3f)
#define CMIC_LEDUP1_PORT_ORDER_REMAPr_REMAP_PORT_3f_SET(r,f) (r).cmic_ledup1_port_order_remap[0]=(((r).cmic_ledup1_port_order_remap[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))

/*******************************************************************************
 * End of 'CMIC_LEDUP1_PORT_ORDER_REMAPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_0_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_0_3r_OFFSET 0x00021010

#define CMIC_LEDUP1_PORT_ORDER_REMAP_0_3r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_0_3r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_12_15
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_12_15r_OFFSET 0x0002101c

#define CMIC_LEDUP1_PORT_ORDER_REMAP_12_15r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_12_15r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_16_19
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_16_19r_OFFSET 0x00021020

#define CMIC_LEDUP1_PORT_ORDER_REMAP_16_19r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_16_19r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_20_23
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_20_23r_OFFSET 0x00021024

#define CMIC_LEDUP1_PORT_ORDER_REMAP_20_23r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_20_23r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_24_27
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_24_27r_OFFSET 0x00021028

#define CMIC_LEDUP1_PORT_ORDER_REMAP_24_27r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_24_27r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_28_31
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_28_31r_OFFSET 0x0002102c

#define CMIC_LEDUP1_PORT_ORDER_REMAP_28_31r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_28_31r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_32_35
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_32_35r_OFFSET 0x00021030

#define CMIC_LEDUP1_PORT_ORDER_REMAP_32_35r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_32_35r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_36_39
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_36_39r_OFFSET 0x00021034

#define CMIC_LEDUP1_PORT_ORDER_REMAP_36_39r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_36_39r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_40_43
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_40_43r_OFFSET 0x00021038

#define CMIC_LEDUP1_PORT_ORDER_REMAP_40_43r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_40_43r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_44_47
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_44_47r_OFFSET 0x0002103c

#define CMIC_LEDUP1_PORT_ORDER_REMAP_44_47r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_44_47r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_48_51
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_48_51r_OFFSET 0x00021040

#define CMIC_LEDUP1_PORT_ORDER_REMAP_48_51r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_48_51r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_4_7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_4_7r_OFFSET 0x00021014

#define CMIC_LEDUP1_PORT_ORDER_REMAP_4_7r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_4_7r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_52_55
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_52_55r_OFFSET 0x00021044

#define CMIC_LEDUP1_PORT_ORDER_REMAP_52_55r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_52_55r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_56_59
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_56_59r_OFFSET 0x00021048

#define CMIC_LEDUP1_PORT_ORDER_REMAP_56_59r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_56_59r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_60_63
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_60_63r_OFFSET 0x0002104c

#define CMIC_LEDUP1_PORT_ORDER_REMAP_60_63r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_60_63r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PORT_ORDER_REMAP_8_11
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PORT_ORDER_REMAP_8_11r_OFFSET 0x00021018

#define CMIC_LEDUP1_PORT_ORDER_REMAP_8_11r_SIZE 4

/* CMIC_LEDUP1_PORT_ORDER_REMAP_8_11r is element of CMIC_LEDUP1_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_PROGRAM_RAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_PROGRAM_RAMr_OFFSET 0x00021800

#define CMIC_LEDUP1_PROGRAM_RAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_PROGRAM_RAM.
 */
typedef union CMIC_LEDUP1_PROGRAM_RAMr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_program_ram[1];
	uint32_t _cmic_ledup1_program_ram;
} CMIC_LEDUP1_PROGRAM_RAMr_t;

#define CMIC_LEDUP1_PROGRAM_RAMr_CLR(r) (r).cmic_ledup1_program_ram[0] = 0
#define CMIC_LEDUP1_PROGRAM_RAMr_SET(r,d) (r).cmic_ledup1_program_ram[0] = d
#define CMIC_LEDUP1_PROGRAM_RAMr_GET(r) (r).cmic_ledup1_program_ram[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_PROGRAM_RAMr_DATAf_GET(r) (((r).cmic_ledup1_program_ram[0]) & 0xff)
#define CMIC_LEDUP1_PROGRAM_RAMr_DATAf_SET(r,f) (r).cmic_ledup1_program_ram[0]=(((r).cmic_ledup1_program_ram[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP1_PROGRAM_RAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr_OFFSET 0x00021008

#define CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDR.
 */
typedef union CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_scanchain_assembly_st_addr[1];
	uint32_t _cmic_ledup1_scanchain_assembly_st_addr;
} CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr_t;

#define CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr_CLR(r) (r).cmic_ledup1_scanchain_assembly_st_addr[0] = 0
#define CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr_SET(r,d) (r).cmic_ledup1_scanchain_assembly_st_addr[0] = d
#define CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr_GET(r) (r).cmic_ledup1_scanchain_assembly_st_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr_SCANCHAIN_ASSEMBLY_ST_ADDRf_GET(r) (((r).cmic_ledup1_scanchain_assembly_st_addr[0]) & 0xff)
#define CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr_SCANCHAIN_ASSEMBLY_ST_ADDRf_SET(r,f) (r).cmic_ledup1_scanchain_assembly_st_addr[0]=(((r).cmic_ledup1_scanchain_assembly_st_addr[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP1_SCANCHAIN_ASSEMBLY_ST_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_SCANOUT_COUNT_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_SCANOUT_COUNT_UPPERr_OFFSET 0x00021054

#define CMIC_LEDUP1_SCANOUT_COUNT_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_SCANOUT_COUNT_UPPER.
 */
typedef union CMIC_LEDUP1_SCANOUT_COUNT_UPPERr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_scanout_count_upper[1];
	uint32_t _cmic_ledup1_scanout_count_upper;
} CMIC_LEDUP1_SCANOUT_COUNT_UPPERr_t;

#define CMIC_LEDUP1_SCANOUT_COUNT_UPPERr_CLR(r) (r).cmic_ledup1_scanout_count_upper[0] = 0
#define CMIC_LEDUP1_SCANOUT_COUNT_UPPERr_SET(r,d) (r).cmic_ledup1_scanout_count_upper[0] = d
#define CMIC_LEDUP1_SCANOUT_COUNT_UPPERr_GET(r) (r).cmic_ledup1_scanout_count_upper[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_SCANOUT_COUNT_UPPERr_SCANOUT_COUNT_UPPERf_GET(r) (((r).cmic_ledup1_scanout_count_upper[0]) & 0x3)
#define CMIC_LEDUP1_SCANOUT_COUNT_UPPERr_SCANOUT_COUNT_UPPERf_SET(r,f) (r).cmic_ledup1_scanout_count_upper[0]=(((r).cmic_ledup1_scanout_count_upper[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*******************************************************************************
 * End of 'CMIC_LEDUP1_SCANOUT_COUNT_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_STATUSr_OFFSET 0x00021004

#define CMIC_LEDUP1_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_STATUS.
 */
typedef union CMIC_LEDUP1_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_status[1];
	uint32_t _cmic_ledup1_status;
} CMIC_LEDUP1_STATUSr_t;

#define CMIC_LEDUP1_STATUSr_CLR(r) (r).cmic_ledup1_status[0] = 0
#define CMIC_LEDUP1_STATUSr_SET(r,d) (r).cmic_ledup1_status[0] = d
#define CMIC_LEDUP1_STATUSr_GET(r) (r).cmic_ledup1_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_STATUSr_PROGRAM_COUNTERf_GET(r) (((r).cmic_ledup1_status[0]) & 0xff)
#define CMIC_LEDUP1_STATUSr_PROGRAM_COUNTERf_SET(r,f) (r).cmic_ledup1_status[0]=(((r).cmic_ledup1_status[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_LEDUP1_STATUSr_LEDUP_RUNNINGf_GET(r) ((((r).cmic_ledup1_status[0]) >> 8) & 0x1)
#define CMIC_LEDUP1_STATUSr_LEDUP_RUNNINGf_SET(r,f) (r).cmic_ledup1_status[0]=(((r).cmic_ledup1_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_LEDUP1_STATUSr_LEDUP_INITIALISINGf_GET(r) ((((r).cmic_ledup1_status[0]) >> 9) & 0x1)
#define CMIC_LEDUP1_STATUSr_LEDUP_INITIALISINGf_SET(r,f) (r).cmic_ledup1_status[0]=(((r).cmic_ledup1_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_LEDUP1_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP1_TM_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP1_TM_CONTROLr_OFFSET 0x00021058

#define CMIC_LEDUP1_TM_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP1_TM_CONTROL.
 */
typedef union CMIC_LEDUP1_TM_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_ledup1_tm_control[1];
	uint32_t _cmic_ledup1_tm_control;
} CMIC_LEDUP1_TM_CONTROLr_t;

#define CMIC_LEDUP1_TM_CONTROLr_CLR(r) (r).cmic_ledup1_tm_control[0] = 0
#define CMIC_LEDUP1_TM_CONTROLr_SET(r,d) (r).cmic_ledup1_tm_control[0] = d
#define CMIC_LEDUP1_TM_CONTROLr_GET(r) (r).cmic_ledup1_tm_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP1_TM_CONTROLr_TMf_GET(r) (((r).cmic_ledup1_tm_control[0]) & 0xff)
#define CMIC_LEDUP1_TM_CONTROLr_TMf_SET(r,f) (r).cmic_ledup1_tm_control[0]=(((r).cmic_ledup1_tm_control[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP1_TM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_CLK_DIV
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_CLK_DIVr_OFFSET 0x0002905c

#define CMIC_LEDUP2_CLK_DIVr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_CLK_DIV.
 */
typedef union CMIC_LEDUP2_CLK_DIVr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_clk_div[1];
	uint32_t _cmic_ledup2_clk_div;
} CMIC_LEDUP2_CLK_DIVr_t;

#define CMIC_LEDUP2_CLK_DIVr_CLR(r) (r).cmic_ledup2_clk_div[0] = 0
#define CMIC_LEDUP2_CLK_DIVr_SET(r,d) (r).cmic_ledup2_clk_div[0] = d
#define CMIC_LEDUP2_CLK_DIVr_GET(r) (r).cmic_ledup2_clk_div[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_CLK_DIVr_LEDCLK_HALF_PERIODf_GET(r) (((r).cmic_ledup2_clk_div[0]) & 0xffff)
#define CMIC_LEDUP2_CLK_DIVr_LEDCLK_HALF_PERIODf_SET(r,f) (r).cmic_ledup2_clk_div[0]=(((r).cmic_ledup2_clk_div[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_LEDUP2_CLK_DIVr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_CLK_PARAMS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_CLK_PARAMSr_OFFSET 0x00029050

#define CMIC_LEDUP2_CLK_PARAMSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_CLK_PARAMS.
 */
typedef union CMIC_LEDUP2_CLK_PARAMSr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_clk_params[1];
	uint32_t _cmic_ledup2_clk_params;
} CMIC_LEDUP2_CLK_PARAMSr_t;

#define CMIC_LEDUP2_CLK_PARAMSr_CLR(r) (r).cmic_ledup2_clk_params[0] = 0
#define CMIC_LEDUP2_CLK_PARAMSr_SET(r,d) (r).cmic_ledup2_clk_params[0] = d
#define CMIC_LEDUP2_CLK_PARAMSr_GET(r) (r).cmic_ledup2_clk_params[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_CLK_PARAMSr_REFRESH_CYCLE_PERIODf_GET(r) ((r).cmic_ledup2_clk_params[0])
#define CMIC_LEDUP2_CLK_PARAMSr_REFRESH_CYCLE_PERIODf_SET(r,f) (r).cmic_ledup2_clk_params[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_LEDUP2_CLK_PARAMSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_CTRLr_OFFSET 0x00029000

#define CMIC_LEDUP2_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_CTRL.
 */
typedef union CMIC_LEDUP2_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_ctrl[1];
	uint32_t _cmic_ledup2_ctrl;
} CMIC_LEDUP2_CTRLr_t;

#define CMIC_LEDUP2_CTRLr_CLR(r) (r).cmic_ledup2_ctrl[0] = 0
#define CMIC_LEDUP2_CTRLr_SET(r,d) (r).cmic_ledup2_ctrl[0] = d
#define CMIC_LEDUP2_CTRLr_GET(r) (r).cmic_ledup2_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_CTRLr_LEDUP_ENf_GET(r) (((r).cmic_ledup2_ctrl[0]) & 0x1)
#define CMIC_LEDUP2_CTRLr_LEDUP_ENf_SET(r,f) (r).cmic_ledup2_ctrl[0]=(((r).cmic_ledup2_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_LEDUP2_CTRLr_LEDUP_SCAN_INTRA_PORT_DELAYf_GET(r) ((((r).cmic_ledup2_ctrl[0]) >> 1) & 0x7)
#define CMIC_LEDUP2_CTRLr_LEDUP_SCAN_INTRA_PORT_DELAYf_SET(r,f) (r).cmic_ledup2_ctrl[0]=(((r).cmic_ledup2_ctrl[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define CMIC_LEDUP2_CTRLr_LEDUP_SCAN_START_DELAYf_GET(r) ((((r).cmic_ledup2_ctrl[0]) >> 4) & 0x3f)
#define CMIC_LEDUP2_CTRLr_LEDUP_SCAN_START_DELAYf_SET(r,f) (r).cmic_ledup2_ctrl[0]=(((r).cmic_ledup2_ctrl[0] & ~((uint32_t)0x3f << 4)) | ((((uint32_t)f) & 0x3f) << 4))

/*******************************************************************************
 * End of 'CMIC_LEDUP2_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_DATA_RAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_DATA_RAMr_OFFSET 0x00029400

#define CMIC_LEDUP2_DATA_RAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_DATA_RAM.
 */
typedef union CMIC_LEDUP2_DATA_RAMr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_data_ram[1];
	uint32_t _cmic_ledup2_data_ram;
} CMIC_LEDUP2_DATA_RAMr_t;

#define CMIC_LEDUP2_DATA_RAMr_CLR(r) (r).cmic_ledup2_data_ram[0] = 0
#define CMIC_LEDUP2_DATA_RAMr_SET(r,d) (r).cmic_ledup2_data_ram[0] = d
#define CMIC_LEDUP2_DATA_RAMr_GET(r) (r).cmic_ledup2_data_ram[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_DATA_RAMr_DATAf_GET(r) (((r).cmic_ledup2_data_ram[0]) & 0xff)
#define CMIC_LEDUP2_DATA_RAMr_DATAf_SET(r,f) (r).cmic_ledup2_data_ram[0]=(((r).cmic_ledup2_data_ram[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP2_DATA_RAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_OFFSET 0x00029010

#define CMIC_LEDUP2_PORT_ORDER_REMAPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_PORT_ORDER_REMAP.
 */
typedef union CMIC_LEDUP2_PORT_ORDER_REMAPr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_port_order_remap[1];
	uint32_t _cmic_ledup2_port_order_remap;
} CMIC_LEDUP2_PORT_ORDER_REMAPr_t;

#define CMIC_LEDUP2_PORT_ORDER_REMAPr_CLR(r) (r).cmic_ledup2_port_order_remap[0] = 0
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_SET(r,d) (r).cmic_ledup2_port_order_remap[0] = d
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_GET(r) (r).cmic_ledup2_port_order_remap[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_REMAP_PORT_0f_GET(r) (((r).cmic_ledup2_port_order_remap[0]) & 0x3f)
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_REMAP_PORT_0f_SET(r,f) (r).cmic_ledup2_port_order_remap[0]=(((r).cmic_ledup2_port_order_remap[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_REMAP_PORT_1f_GET(r) ((((r).cmic_ledup2_port_order_remap[0]) >> 6) & 0x3f)
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_REMAP_PORT_1f_SET(r,f) (r).cmic_ledup2_port_order_remap[0]=(((r).cmic_ledup2_port_order_remap[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_REMAP_PORT_2f_GET(r) ((((r).cmic_ledup2_port_order_remap[0]) >> 12) & 0x3f)
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_REMAP_PORT_2f_SET(r,f) (r).cmic_ledup2_port_order_remap[0]=(((r).cmic_ledup2_port_order_remap[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_REMAP_PORT_3f_GET(r) ((((r).cmic_ledup2_port_order_remap[0]) >> 18) & 0x3f)
#define CMIC_LEDUP2_PORT_ORDER_REMAPr_REMAP_PORT_3f_SET(r,f) (r).cmic_ledup2_port_order_remap[0]=(((r).cmic_ledup2_port_order_remap[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))

/*******************************************************************************
 * End of 'CMIC_LEDUP2_PORT_ORDER_REMAPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_0_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_0_3r_OFFSET 0x00029010

#define CMIC_LEDUP2_PORT_ORDER_REMAP_0_3r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_0_3r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_12_15
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_12_15r_OFFSET 0x0002901c

#define CMIC_LEDUP2_PORT_ORDER_REMAP_12_15r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_12_15r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_16_19
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_16_19r_OFFSET 0x00029020

#define CMIC_LEDUP2_PORT_ORDER_REMAP_16_19r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_16_19r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_20_23
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_20_23r_OFFSET 0x00029024

#define CMIC_LEDUP2_PORT_ORDER_REMAP_20_23r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_20_23r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_24_27
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_24_27r_OFFSET 0x00029028

#define CMIC_LEDUP2_PORT_ORDER_REMAP_24_27r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_24_27r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_28_31
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_28_31r_OFFSET 0x0002902c

#define CMIC_LEDUP2_PORT_ORDER_REMAP_28_31r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_28_31r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_32_35
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_32_35r_OFFSET 0x00029030

#define CMIC_LEDUP2_PORT_ORDER_REMAP_32_35r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_32_35r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_36_39
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_36_39r_OFFSET 0x00029034

#define CMIC_LEDUP2_PORT_ORDER_REMAP_36_39r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_36_39r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_40_43
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_40_43r_OFFSET 0x00029038

#define CMIC_LEDUP2_PORT_ORDER_REMAP_40_43r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_40_43r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_44_47
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_44_47r_OFFSET 0x0002903c

#define CMIC_LEDUP2_PORT_ORDER_REMAP_44_47r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_44_47r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_48_51
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_48_51r_OFFSET 0x00029040

#define CMIC_LEDUP2_PORT_ORDER_REMAP_48_51r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_48_51r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_4_7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_4_7r_OFFSET 0x00029014

#define CMIC_LEDUP2_PORT_ORDER_REMAP_4_7r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_4_7r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_52_55
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_52_55r_OFFSET 0x00029044

#define CMIC_LEDUP2_PORT_ORDER_REMAP_52_55r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_52_55r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_56_59
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_56_59r_OFFSET 0x00029048

#define CMIC_LEDUP2_PORT_ORDER_REMAP_56_59r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_56_59r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_60_63
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_60_63r_OFFSET 0x0002904c

#define CMIC_LEDUP2_PORT_ORDER_REMAP_60_63r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_60_63r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PORT_ORDER_REMAP_8_11
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PORT_ORDER_REMAP_8_11r_OFFSET 0x00029018

#define CMIC_LEDUP2_PORT_ORDER_REMAP_8_11r_SIZE 4

/* CMIC_LEDUP2_PORT_ORDER_REMAP_8_11r is element of CMIC_LEDUP2_PORT_ORDER_REMAP */

/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_PROGRAM_RAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_PROGRAM_RAMr_OFFSET 0x00029800

#define CMIC_LEDUP2_PROGRAM_RAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_PROGRAM_RAM.
 */
typedef union CMIC_LEDUP2_PROGRAM_RAMr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_program_ram[1];
	uint32_t _cmic_ledup2_program_ram;
} CMIC_LEDUP2_PROGRAM_RAMr_t;

#define CMIC_LEDUP2_PROGRAM_RAMr_CLR(r) (r).cmic_ledup2_program_ram[0] = 0
#define CMIC_LEDUP2_PROGRAM_RAMr_SET(r,d) (r).cmic_ledup2_program_ram[0] = d
#define CMIC_LEDUP2_PROGRAM_RAMr_GET(r) (r).cmic_ledup2_program_ram[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_PROGRAM_RAMr_DATAf_GET(r) (((r).cmic_ledup2_program_ram[0]) & 0xff)
#define CMIC_LEDUP2_PROGRAM_RAMr_DATAf_SET(r,f) (r).cmic_ledup2_program_ram[0]=(((r).cmic_ledup2_program_ram[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP2_PROGRAM_RAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr_OFFSET 0x00029008

#define CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDR.
 */
typedef union CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_scanchain_assembly_st_addr[1];
	uint32_t _cmic_ledup2_scanchain_assembly_st_addr;
} CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr_t;

#define CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr_CLR(r) (r).cmic_ledup2_scanchain_assembly_st_addr[0] = 0
#define CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr_SET(r,d) (r).cmic_ledup2_scanchain_assembly_st_addr[0] = d
#define CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr_GET(r) (r).cmic_ledup2_scanchain_assembly_st_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr_SCANCHAIN_ASSEMBLY_ST_ADDRf_GET(r) (((r).cmic_ledup2_scanchain_assembly_st_addr[0]) & 0xff)
#define CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr_SCANCHAIN_ASSEMBLY_ST_ADDRf_SET(r,f) (r).cmic_ledup2_scanchain_assembly_st_addr[0]=(((r).cmic_ledup2_scanchain_assembly_st_addr[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP2_SCANCHAIN_ASSEMBLY_ST_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_SCANOUT_COUNT_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_SCANOUT_COUNT_UPPERr_OFFSET 0x00029054

#define CMIC_LEDUP2_SCANOUT_COUNT_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_SCANOUT_COUNT_UPPER.
 */
typedef union CMIC_LEDUP2_SCANOUT_COUNT_UPPERr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_scanout_count_upper[1];
	uint32_t _cmic_ledup2_scanout_count_upper;
} CMIC_LEDUP2_SCANOUT_COUNT_UPPERr_t;

#define CMIC_LEDUP2_SCANOUT_COUNT_UPPERr_CLR(r) (r).cmic_ledup2_scanout_count_upper[0] = 0
#define CMIC_LEDUP2_SCANOUT_COUNT_UPPERr_SET(r,d) (r).cmic_ledup2_scanout_count_upper[0] = d
#define CMIC_LEDUP2_SCANOUT_COUNT_UPPERr_GET(r) (r).cmic_ledup2_scanout_count_upper[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_SCANOUT_COUNT_UPPERr_SCANOUT_COUNT_UPPERf_GET(r) (((r).cmic_ledup2_scanout_count_upper[0]) & 0x3)
#define CMIC_LEDUP2_SCANOUT_COUNT_UPPERr_SCANOUT_COUNT_UPPERf_SET(r,f) (r).cmic_ledup2_scanout_count_upper[0]=(((r).cmic_ledup2_scanout_count_upper[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*******************************************************************************
 * End of 'CMIC_LEDUP2_SCANOUT_COUNT_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_STATUSr_OFFSET 0x00029004

#define CMIC_LEDUP2_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_STATUS.
 */
typedef union CMIC_LEDUP2_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_status[1];
	uint32_t _cmic_ledup2_status;
} CMIC_LEDUP2_STATUSr_t;

#define CMIC_LEDUP2_STATUSr_CLR(r) (r).cmic_ledup2_status[0] = 0
#define CMIC_LEDUP2_STATUSr_SET(r,d) (r).cmic_ledup2_status[0] = d
#define CMIC_LEDUP2_STATUSr_GET(r) (r).cmic_ledup2_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_STATUSr_PROGRAM_COUNTERf_GET(r) (((r).cmic_ledup2_status[0]) & 0xff)
#define CMIC_LEDUP2_STATUSr_PROGRAM_COUNTERf_SET(r,f) (r).cmic_ledup2_status[0]=(((r).cmic_ledup2_status[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_LEDUP2_STATUSr_LEDUP_RUNNINGf_GET(r) ((((r).cmic_ledup2_status[0]) >> 8) & 0x1)
#define CMIC_LEDUP2_STATUSr_LEDUP_RUNNINGf_SET(r,f) (r).cmic_ledup2_status[0]=(((r).cmic_ledup2_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_LEDUP2_STATUSr_LEDUP_INITIALISINGf_GET(r) ((((r).cmic_ledup2_status[0]) >> 9) & 0x1)
#define CMIC_LEDUP2_STATUSr_LEDUP_INITIALISINGf_SET(r,f) (r).cmic_ledup2_status[0]=(((r).cmic_ledup2_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*******************************************************************************
 * End of 'CMIC_LEDUP2_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_LEDUP2_TM_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_LEDUP2_TM_CONTROLr_OFFSET 0x00029058

#define CMIC_LEDUP2_TM_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_LEDUP2_TM_CONTROL.
 */
typedef union CMIC_LEDUP2_TM_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_ledup2_tm_control[1];
	uint32_t _cmic_ledup2_tm_control;
} CMIC_LEDUP2_TM_CONTROLr_t;

#define CMIC_LEDUP2_TM_CONTROLr_CLR(r) (r).cmic_ledup2_tm_control[0] = 0
#define CMIC_LEDUP2_TM_CONTROLr_SET(r,d) (r).cmic_ledup2_tm_control[0] = d
#define CMIC_LEDUP2_TM_CONTROLr_GET(r) (r).cmic_ledup2_tm_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_LEDUP2_TM_CONTROLr_TMf_GET(r) (((r).cmic_ledup2_tm_control[0]) & 0xff)
#define CMIC_LEDUP2_TM_CONTROLr_TMf_SET(r,f) (r).cmic_ledup2_tm_control[0]=(((r).cmic_ledup2_tm_control[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_LEDUP2_TM_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_AUTO_SCAN_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_OFFSET 0x00011010

#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_AUTO_SCAN_ADDRESS.
 */
typedef union CMIC_MIIM_AUTO_SCAN_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_miim_auto_scan_address[1];
	uint32_t _cmic_miim_auto_scan_address;
} CMIC_MIIM_AUTO_SCAN_ADDRESSr_t;

#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_CLR(r) (r).cmic_miim_auto_scan_address[0] = 0
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_SET(r,d) (r).cmic_miim_auto_scan_address[0] = d
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_GET(r) (r).cmic_miim_auto_scan_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_miim_auto_scan_address[0]) & 0xffff)
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_miim_auto_scan_address[0]=(((r).cmic_miim_auto_scan_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_miim_auto_scan_address[0]) >> 16) & 0x1f)
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_miim_auto_scan_address[0]=(((r).cmic_miim_auto_scan_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_CLAUSE_22_REGADRf_GET(r) ((((r).cmic_miim_auto_scan_address[0]) >> 21) & 0x1f)
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_CLAUSE_22_REGADRf_SET(r,f) (r).cmic_miim_auto_scan_address[0]=(((r).cmic_miim_auto_scan_address[0] & ~((uint32_t)0x1f << 21)) | ((((uint32_t)f) & 0x1f) << 21))
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_MIIM_LINK_STATUS_BIT_POSITIONf_GET(r) ((((r).cmic_miim_auto_scan_address[0]) >> 26) & 0x1f)
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_MIIM_LINK_STATUS_BIT_POSITIONf_SET(r,f) (r).cmic_miim_auto_scan_address[0]=(((r).cmic_miim_auto_scan_address[0] & ~((uint32_t)0x1f << 26)) | ((((uint32_t)f) & 0x1f) << 26))
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_MIIM_FLIP_STATUS_BITf_GET(r) ((((r).cmic_miim_auto_scan_address[0]) >> 31) & 0x1)
#define CMIC_MIIM_AUTO_SCAN_ADDRESSr_MIIM_FLIP_STATUS_BITf_SET(r,f) (r).cmic_miim_auto_scan_address[0]=(((r).cmic_miim_auto_scan_address[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'CMIC_MIIM_AUTO_SCAN_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_109_100
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_OFFSET 0x00011148

#define CMIC_MIIM_BUS_SEL_MAP_109_100r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_109_100.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_109_100r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_109_100[1];
	uint32_t _cmic_miim_bus_sel_map_109_100;
} CMIC_MIIM_BUS_SEL_MAP_109_100r_t;

#define CMIC_MIIM_BUS_SEL_MAP_109_100r_CLR(r) (r).cmic_miim_bus_sel_map_109_100[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_SET(r,d) (r).cmic_miim_bus_sel_map_109_100[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_GET(r) (r).cmic_miim_bus_sel_map_109_100[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_100_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_109_100[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_100_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_101_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_109_100[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_101_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_102_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_109_100[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_102_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_103_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_109_100[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_103_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_104_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_109_100[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_104_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_105_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_109_100[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_105_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_106_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_109_100[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_106_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_107_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_109_100[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_107_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_108_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_109_100[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_108_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_109_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_109_100[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_109_100r_PORT_109_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_109_100[0]=(((r).cmic_miim_bus_sel_map_109_100[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_109_100r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_119_110
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_OFFSET 0x0001114c

#define CMIC_MIIM_BUS_SEL_MAP_119_110r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_119_110.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_119_110r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_119_110[1];
	uint32_t _cmic_miim_bus_sel_map_119_110;
} CMIC_MIIM_BUS_SEL_MAP_119_110r_t;

#define CMIC_MIIM_BUS_SEL_MAP_119_110r_CLR(r) (r).cmic_miim_bus_sel_map_119_110[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_SET(r,d) (r).cmic_miim_bus_sel_map_119_110[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_GET(r) (r).cmic_miim_bus_sel_map_119_110[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_110_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_119_110[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_110_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_111_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_119_110[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_111_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_112_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_119_110[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_112_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_113_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_119_110[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_113_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_114_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_119_110[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_114_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_115_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_119_110[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_115_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_116_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_119_110[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_116_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_117_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_119_110[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_117_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_118_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_119_110[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_118_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_119_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_119_110[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_119_110r_PORT_119_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_119_110[0]=(((r).cmic_miim_bus_sel_map_119_110[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_119_110r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_129_120
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_OFFSET 0x00011150

#define CMIC_MIIM_BUS_SEL_MAP_129_120r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_129_120.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_129_120r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_129_120[1];
	uint32_t _cmic_miim_bus_sel_map_129_120;
} CMIC_MIIM_BUS_SEL_MAP_129_120r_t;

#define CMIC_MIIM_BUS_SEL_MAP_129_120r_CLR(r) (r).cmic_miim_bus_sel_map_129_120[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_SET(r,d) (r).cmic_miim_bus_sel_map_129_120[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_GET(r) (r).cmic_miim_bus_sel_map_129_120[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_120_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_129_120[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_120_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_121_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_129_120[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_121_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_122_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_129_120[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_122_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_123_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_129_120[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_123_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_124_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_129_120[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_124_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_125_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_129_120[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_125_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_126_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_129_120[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_126_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_127_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_129_120[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_127_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_128_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_129_120[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_128_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_129_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_129_120[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_129_120r_PORT_129_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_129_120[0]=(((r).cmic_miim_bus_sel_map_129_120[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_129_120r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_139_130
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_OFFSET 0x000111c0

#define CMIC_MIIM_BUS_SEL_MAP_139_130r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_139_130.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_139_130r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_139_130[1];
	uint32_t _cmic_miim_bus_sel_map_139_130;
} CMIC_MIIM_BUS_SEL_MAP_139_130r_t;

#define CMIC_MIIM_BUS_SEL_MAP_139_130r_CLR(r) (r).cmic_miim_bus_sel_map_139_130[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_SET(r,d) (r).cmic_miim_bus_sel_map_139_130[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_GET(r) (r).cmic_miim_bus_sel_map_139_130[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_130_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_139_130[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_130_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_131_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_139_130[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_131_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_132_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_139_130[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_132_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_133_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_139_130[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_133_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_134_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_139_130[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_134_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_135_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_139_130[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_135_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_136_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_139_130[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_136_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_137_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_139_130[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_137_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_138_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_139_130[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_138_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_139_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_139_130[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_139_130r_PORT_139_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_139_130[0]=(((r).cmic_miim_bus_sel_map_139_130[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_139_130r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_149_140
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_OFFSET 0x000111c4

#define CMIC_MIIM_BUS_SEL_MAP_149_140r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_149_140.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_149_140r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_149_140[1];
	uint32_t _cmic_miim_bus_sel_map_149_140;
} CMIC_MIIM_BUS_SEL_MAP_149_140r_t;

#define CMIC_MIIM_BUS_SEL_MAP_149_140r_CLR(r) (r).cmic_miim_bus_sel_map_149_140[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_SET(r,d) (r).cmic_miim_bus_sel_map_149_140[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_GET(r) (r).cmic_miim_bus_sel_map_149_140[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_140_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_149_140[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_140_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_141_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_149_140[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_141_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_142_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_149_140[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_142_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_143_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_149_140[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_143_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_144_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_149_140[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_144_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_145_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_149_140[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_145_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_146_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_149_140[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_146_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_147_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_149_140[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_147_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_148_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_149_140[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_148_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_149_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_149_140[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_149_140r_PORT_149_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_149_140[0]=(((r).cmic_miim_bus_sel_map_149_140[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_149_140r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_159_150
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_OFFSET 0x000111c8

#define CMIC_MIIM_BUS_SEL_MAP_159_150r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_159_150.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_159_150r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_159_150[1];
	uint32_t _cmic_miim_bus_sel_map_159_150;
} CMIC_MIIM_BUS_SEL_MAP_159_150r_t;

#define CMIC_MIIM_BUS_SEL_MAP_159_150r_CLR(r) (r).cmic_miim_bus_sel_map_159_150[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_SET(r,d) (r).cmic_miim_bus_sel_map_159_150[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_GET(r) (r).cmic_miim_bus_sel_map_159_150[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_150_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_159_150[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_150_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_151_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_159_150[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_151_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_152_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_159_150[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_152_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_153_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_159_150[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_153_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_154_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_159_150[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_154_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_155_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_159_150[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_155_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_156_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_159_150[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_156_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_157_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_159_150[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_157_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_158_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_159_150[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_158_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_159_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_159_150[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_159_150r_PORT_159_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_159_150[0]=(((r).cmic_miim_bus_sel_map_159_150[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_159_150r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_169_160
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_OFFSET 0x000111cc

#define CMIC_MIIM_BUS_SEL_MAP_169_160r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_169_160.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_169_160r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_169_160[1];
	uint32_t _cmic_miim_bus_sel_map_169_160;
} CMIC_MIIM_BUS_SEL_MAP_169_160r_t;

#define CMIC_MIIM_BUS_SEL_MAP_169_160r_CLR(r) (r).cmic_miim_bus_sel_map_169_160[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_SET(r,d) (r).cmic_miim_bus_sel_map_169_160[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_GET(r) (r).cmic_miim_bus_sel_map_169_160[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_160_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_169_160[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_160_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_161_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_169_160[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_161_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_162_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_169_160[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_162_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_163_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_169_160[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_163_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_164_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_169_160[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_164_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_165_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_169_160[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_165_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_166_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_169_160[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_166_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_167_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_169_160[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_167_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_168_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_169_160[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_168_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_169_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_169_160[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_169_160r_PORT_169_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_169_160[0]=(((r).cmic_miim_bus_sel_map_169_160[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_169_160r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_179_170
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_OFFSET 0x000111d0

#define CMIC_MIIM_BUS_SEL_MAP_179_170r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_179_170.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_179_170r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_179_170[1];
	uint32_t _cmic_miim_bus_sel_map_179_170;
} CMIC_MIIM_BUS_SEL_MAP_179_170r_t;

#define CMIC_MIIM_BUS_SEL_MAP_179_170r_CLR(r) (r).cmic_miim_bus_sel_map_179_170[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_SET(r,d) (r).cmic_miim_bus_sel_map_179_170[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_GET(r) (r).cmic_miim_bus_sel_map_179_170[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_170_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_179_170[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_170_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_171_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_179_170[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_171_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_172_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_179_170[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_172_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_173_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_179_170[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_173_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_174_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_179_170[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_174_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_175_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_179_170[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_175_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_176_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_179_170[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_176_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_177_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_179_170[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_177_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_178_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_179_170[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_178_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_179_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_179_170[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_179_170r_PORT_179_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_179_170[0]=(((r).cmic_miim_bus_sel_map_179_170[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_179_170r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_189_180
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_OFFSET 0x000111d4

#define CMIC_MIIM_BUS_SEL_MAP_189_180r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_189_180.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_189_180r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_189_180[1];
	uint32_t _cmic_miim_bus_sel_map_189_180;
} CMIC_MIIM_BUS_SEL_MAP_189_180r_t;

#define CMIC_MIIM_BUS_SEL_MAP_189_180r_CLR(r) (r).cmic_miim_bus_sel_map_189_180[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_SET(r,d) (r).cmic_miim_bus_sel_map_189_180[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_GET(r) (r).cmic_miim_bus_sel_map_189_180[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_180_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_189_180[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_180_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_181_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_189_180[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_181_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_182_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_189_180[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_182_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_183_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_189_180[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_183_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_184_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_189_180[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_184_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_185_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_189_180[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_185_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_186_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_189_180[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_186_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_187_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_189_180[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_187_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_188_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_189_180[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_188_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_189_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_189_180[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_189_180r_PORT_189_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_189_180[0]=(((r).cmic_miim_bus_sel_map_189_180[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_189_180r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_191_190
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_191_190r_OFFSET 0x000111d8

#define CMIC_MIIM_BUS_SEL_MAP_191_190r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_191_190.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_191_190r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_191_190[1];
	uint32_t _cmic_miim_bus_sel_map_191_190;
} CMIC_MIIM_BUS_SEL_MAP_191_190r_t;

#define CMIC_MIIM_BUS_SEL_MAP_191_190r_CLR(r) (r).cmic_miim_bus_sel_map_191_190[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_191_190r_SET(r,d) (r).cmic_miim_bus_sel_map_191_190[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_191_190r_GET(r) (r).cmic_miim_bus_sel_map_191_190[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_191_190r_PORT_190_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_191_190[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_191_190r_PORT_190_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_191_190[0]=(((r).cmic_miim_bus_sel_map_191_190[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_191_190r_PORT_191_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_191_190[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_191_190r_PORT_191_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_191_190[0]=(((r).cmic_miim_bus_sel_map_191_190[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_191_190r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_19_10
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_OFFSET 0x00011070

#define CMIC_MIIM_BUS_SEL_MAP_19_10r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_19_10.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_19_10r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_19_10[1];
	uint32_t _cmic_miim_bus_sel_map_19_10;
} CMIC_MIIM_BUS_SEL_MAP_19_10r_t;

#define CMIC_MIIM_BUS_SEL_MAP_19_10r_CLR(r) (r).cmic_miim_bus_sel_map_19_10[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_SET(r,d) (r).cmic_miim_bus_sel_map_19_10[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_GET(r) (r).cmic_miim_bus_sel_map_19_10[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_10_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_19_10[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_10_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_11_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_19_10[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_11_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_12_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_19_10[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_12_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_13_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_19_10[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_13_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_14_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_19_10[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_14_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_15_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_19_10[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_15_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_16_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_19_10[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_16_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_17_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_19_10[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_17_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_18_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_19_10[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_18_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_19_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_19_10[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_19_10r_PORT_19_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_19_10[0]=(((r).cmic_miim_bus_sel_map_19_10[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_19_10r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_29_20
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_OFFSET 0x00011074

#define CMIC_MIIM_BUS_SEL_MAP_29_20r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_29_20.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_29_20r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_29_20[1];
	uint32_t _cmic_miim_bus_sel_map_29_20;
} CMIC_MIIM_BUS_SEL_MAP_29_20r_t;

#define CMIC_MIIM_BUS_SEL_MAP_29_20r_CLR(r) (r).cmic_miim_bus_sel_map_29_20[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_SET(r,d) (r).cmic_miim_bus_sel_map_29_20[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_GET(r) (r).cmic_miim_bus_sel_map_29_20[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_20_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_29_20[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_20_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_21_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_29_20[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_21_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_22_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_29_20[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_22_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_23_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_29_20[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_23_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_24_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_29_20[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_24_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_25_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_29_20[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_25_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_26_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_29_20[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_26_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_27_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_29_20[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_27_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_28_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_29_20[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_28_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_29_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_29_20[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_29_20r_PORT_29_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_29_20[0]=(((r).cmic_miim_bus_sel_map_29_20[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_29_20r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_39_30
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_OFFSET 0x00011078

#define CMIC_MIIM_BUS_SEL_MAP_39_30r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_39_30.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_39_30r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_39_30[1];
	uint32_t _cmic_miim_bus_sel_map_39_30;
} CMIC_MIIM_BUS_SEL_MAP_39_30r_t;

#define CMIC_MIIM_BUS_SEL_MAP_39_30r_CLR(r) (r).cmic_miim_bus_sel_map_39_30[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_SET(r,d) (r).cmic_miim_bus_sel_map_39_30[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_GET(r) (r).cmic_miim_bus_sel_map_39_30[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_30_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_39_30[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_30_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_31_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_39_30[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_31_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_32_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_39_30[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_32_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_33_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_39_30[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_33_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_34_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_39_30[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_34_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_35_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_39_30[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_35_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_36_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_39_30[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_36_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_37_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_39_30[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_37_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_38_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_39_30[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_38_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_39_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_39_30[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_39_30r_PORT_39_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_39_30[0]=(((r).cmic_miim_bus_sel_map_39_30[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_39_30r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_49_40
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_OFFSET 0x0001107c

#define CMIC_MIIM_BUS_SEL_MAP_49_40r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_49_40.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_49_40r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_49_40[1];
	uint32_t _cmic_miim_bus_sel_map_49_40;
} CMIC_MIIM_BUS_SEL_MAP_49_40r_t;

#define CMIC_MIIM_BUS_SEL_MAP_49_40r_CLR(r) (r).cmic_miim_bus_sel_map_49_40[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_SET(r,d) (r).cmic_miim_bus_sel_map_49_40[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_GET(r) (r).cmic_miim_bus_sel_map_49_40[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_40_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_49_40[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_40_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_41_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_49_40[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_41_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_42_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_49_40[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_42_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_43_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_49_40[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_43_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_44_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_49_40[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_44_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_45_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_49_40[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_45_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_46_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_49_40[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_46_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_47_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_49_40[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_47_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_48_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_49_40[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_48_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_49_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_49_40[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_49_40r_PORT_49_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_49_40[0]=(((r).cmic_miim_bus_sel_map_49_40[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_49_40r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_59_50
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_OFFSET 0x00011080

#define CMIC_MIIM_BUS_SEL_MAP_59_50r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_59_50.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_59_50r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_59_50[1];
	uint32_t _cmic_miim_bus_sel_map_59_50;
} CMIC_MIIM_BUS_SEL_MAP_59_50r_t;

#define CMIC_MIIM_BUS_SEL_MAP_59_50r_CLR(r) (r).cmic_miim_bus_sel_map_59_50[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_SET(r,d) (r).cmic_miim_bus_sel_map_59_50[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_GET(r) (r).cmic_miim_bus_sel_map_59_50[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_50_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_59_50[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_50_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_51_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_59_50[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_51_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_52_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_59_50[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_52_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_53_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_59_50[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_53_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_54_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_59_50[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_54_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_55_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_59_50[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_55_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_56_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_59_50[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_56_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_57_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_59_50[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_57_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_58_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_59_50[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_58_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_59_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_59_50[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_59_50r_PORT_59_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_59_50[0]=(((r).cmic_miim_bus_sel_map_59_50[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_59_50r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_69_60
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_OFFSET 0x00011084

#define CMIC_MIIM_BUS_SEL_MAP_69_60r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_69_60.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_69_60r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_69_60[1];
	uint32_t _cmic_miim_bus_sel_map_69_60;
} CMIC_MIIM_BUS_SEL_MAP_69_60r_t;

#define CMIC_MIIM_BUS_SEL_MAP_69_60r_CLR(r) (r).cmic_miim_bus_sel_map_69_60[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_SET(r,d) (r).cmic_miim_bus_sel_map_69_60[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_GET(r) (r).cmic_miim_bus_sel_map_69_60[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_60_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_69_60[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_60_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_61_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_69_60[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_61_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_62_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_69_60[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_62_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_63_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_69_60[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_63_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_64_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_69_60[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_64_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_65_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_69_60[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_65_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_66_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_69_60[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_66_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_67_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_69_60[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_67_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_68_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_69_60[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_68_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_69_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_69_60[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_69_60r_PORT_69_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_69_60[0]=(((r).cmic_miim_bus_sel_map_69_60[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_69_60r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_79_70
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_OFFSET 0x00011088

#define CMIC_MIIM_BUS_SEL_MAP_79_70r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_79_70.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_79_70r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_79_70[1];
	uint32_t _cmic_miim_bus_sel_map_79_70;
} CMIC_MIIM_BUS_SEL_MAP_79_70r_t;

#define CMIC_MIIM_BUS_SEL_MAP_79_70r_CLR(r) (r).cmic_miim_bus_sel_map_79_70[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_SET(r,d) (r).cmic_miim_bus_sel_map_79_70[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_GET(r) (r).cmic_miim_bus_sel_map_79_70[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_70_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_79_70[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_70_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_71_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_79_70[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_71_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_72_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_79_70[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_72_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_73_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_79_70[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_73_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_74_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_79_70[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_74_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_75_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_79_70[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_75_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_76_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_79_70[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_76_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_77_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_79_70[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_77_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_78_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_79_70[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_78_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_79_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_79_70[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_79_70r_PORT_79_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_79_70[0]=(((r).cmic_miim_bus_sel_map_79_70[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_79_70r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_89_80
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_OFFSET 0x0001108c

#define CMIC_MIIM_BUS_SEL_MAP_89_80r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_89_80.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_89_80r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_89_80[1];
	uint32_t _cmic_miim_bus_sel_map_89_80;
} CMIC_MIIM_BUS_SEL_MAP_89_80r_t;

#define CMIC_MIIM_BUS_SEL_MAP_89_80r_CLR(r) (r).cmic_miim_bus_sel_map_89_80[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_SET(r,d) (r).cmic_miim_bus_sel_map_89_80[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_GET(r) (r).cmic_miim_bus_sel_map_89_80[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_80_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_89_80[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_80_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_81_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_89_80[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_81_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_82_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_89_80[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_82_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_83_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_89_80[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_83_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_84_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_89_80[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_84_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_85_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_89_80[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_85_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_86_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_89_80[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_86_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_87_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_89_80[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_87_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_88_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_89_80[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_88_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_89_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_89_80[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_89_80r_PORT_89_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_89_80[0]=(((r).cmic_miim_bus_sel_map_89_80[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_89_80r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_99_90
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_OFFSET 0x00011144

#define CMIC_MIIM_BUS_SEL_MAP_99_90r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_99_90.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_99_90r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_99_90[1];
	uint32_t _cmic_miim_bus_sel_map_99_90;
} CMIC_MIIM_BUS_SEL_MAP_99_90r_t;

#define CMIC_MIIM_BUS_SEL_MAP_99_90r_CLR(r) (r).cmic_miim_bus_sel_map_99_90[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_SET(r,d) (r).cmic_miim_bus_sel_map_99_90[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_GET(r) (r).cmic_miim_bus_sel_map_99_90[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_90_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_99_90[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_90_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_91_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_99_90[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_91_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_92_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_99_90[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_92_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_93_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_99_90[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_93_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_94_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_99_90[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_94_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_95_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_99_90[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_95_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_96_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_99_90[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_96_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_97_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_99_90[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_97_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_98_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_99_90[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_98_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_99_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_99_90[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_99_90r_PORT_99_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_99_90[0]=(((r).cmic_miim_bus_sel_map_99_90[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_99_90r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_BUS_SEL_MAP_9_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_OFFSET 0x0001106c

#define CMIC_MIIM_BUS_SEL_MAP_9_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_BUS_SEL_MAP_9_0.
 */
typedef union CMIC_MIIM_BUS_SEL_MAP_9_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_bus_sel_map_9_0[1];
	uint32_t _cmic_miim_bus_sel_map_9_0;
} CMIC_MIIM_BUS_SEL_MAP_9_0r_t;

#define CMIC_MIIM_BUS_SEL_MAP_9_0r_CLR(r) (r).cmic_miim_bus_sel_map_9_0[0] = 0
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_SET(r,d) (r).cmic_miim_bus_sel_map_9_0[0] = d
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_GET(r) (r).cmic_miim_bus_sel_map_9_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_0_BUS_NUMf_GET(r) (((r).cmic_miim_bus_sel_map_9_0[0]) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_0_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_1_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_9_0[0]) >> 3) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_1_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_2_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_9_0[0]) >> 6) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_2_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_3_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_9_0[0]) >> 9) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_3_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_4_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_9_0[0]) >> 12) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_4_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_5_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_9_0[0]) >> 15) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_5_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7 << 15)) | ((((uint32_t)f) & 0x7) << 15))
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_6_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_9_0[0]) >> 18) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_6_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7 << 18)) | ((((uint32_t)f) & 0x7) << 18))
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_7_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_9_0[0]) >> 21) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_7_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7 << 21)) | ((((uint32_t)f) & 0x7) << 21))
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_8_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_9_0[0]) >> 24) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_8_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7 << 24)) | ((((uint32_t)f) & 0x7) << 24))
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_9_BUS_NUMf_GET(r) ((((r).cmic_miim_bus_sel_map_9_0[0]) >> 27) & 0x7)
#define CMIC_MIIM_BUS_SEL_MAP_9_0r_PORT_9_BUS_NUMf_SET(r,f) (r).cmic_miim_bus_sel_map_9_0[0]=(((r).cmic_miim_bus_sel_map_9_0[0] & ~((uint32_t)0x7 << 27)) | ((((uint32_t)f) & 0x7) << 27))

/*******************************************************************************
 * End of 'CMIC_MIIM_BUS_SEL_MAP_9_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_CLR_SCAN_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_CLR_SCAN_STATUSr_OFFSET 0x00011124

#define CMIC_MIIM_CLR_SCAN_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_CLR_SCAN_STATUS.
 */
typedef union CMIC_MIIM_CLR_SCAN_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_miim_clr_scan_status[1];
	uint32_t _cmic_miim_clr_scan_status;
} CMIC_MIIM_CLR_SCAN_STATUSr_t;

#define CMIC_MIIM_CLR_SCAN_STATUSr_CLR(r) (r).cmic_miim_clr_scan_status[0] = 0
#define CMIC_MIIM_CLR_SCAN_STATUSr_SET(r,d) (r).cmic_miim_clr_scan_status[0] = d
#define CMIC_MIIM_CLR_SCAN_STATUSr_GET(r) (r).cmic_miim_clr_scan_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_CLR_SCAN_STATUSr_CLR_LINK_STATUS_CHANGEf_GET(r) ((((r).cmic_miim_clr_scan_status[0]) >> 4) & 0x1)
#define CMIC_MIIM_CLR_SCAN_STATUSr_CLR_LINK_STATUS_CHANGEf_SET(r,f) (r).cmic_miim_clr_scan_status[0]=(((r).cmic_miim_clr_scan_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_MIIM_CLR_SCAN_STATUSr_CLR_TX_PAUSE_STATUS_CHANGEf_GET(r) ((((r).cmic_miim_clr_scan_status[0]) >> 8) & 0x1)
#define CMIC_MIIM_CLR_SCAN_STATUSr_CLR_TX_PAUSE_STATUS_CHANGEf_SET(r,f) (r).cmic_miim_clr_scan_status[0]=(((r).cmic_miim_clr_scan_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_MIIM_CLR_SCAN_STATUSr_CLR_RX_PAUSE_STATUS_CHANGEf_GET(r) ((((r).cmic_miim_clr_scan_status[0]) >> 12) & 0x1)
#define CMIC_MIIM_CLR_SCAN_STATUSr_CLR_RX_PAUSE_STATUS_CHANGEf_SET(r,f) (r).cmic_miim_clr_scan_status[0]=(((r).cmic_miim_clr_scan_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_MIIM_CLR_SCAN_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_CONFIGr_OFFSET 0x00011184

#define CMIC_MIIM_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_CONFIG.
 */
typedef union CMIC_MIIM_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_miim_config[1];
	uint32_t _cmic_miim_config;
} CMIC_MIIM_CONFIGr_t;

#define CMIC_MIIM_CONFIGr_CLR(r) (r).cmic_miim_config[0] = 0
#define CMIC_MIIM_CONFIGr_SET(r,d) (r).cmic_miim_config[0] = d
#define CMIC_MIIM_CONFIGr_GET(r) (r).cmic_miim_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_CONFIGr_MDIO_OUT_DELAYf_GET(r) (((r).cmic_miim_config[0]) & 0xf)
#define CMIC_MIIM_CONFIGr_MDIO_OUT_DELAYf_SET(r,f) (r).cmic_miim_config[0]=(((r).cmic_miim_config[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*******************************************************************************
 * End of 'CMIC_MIIM_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_OFFSET 0x00011158

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_103_100[1];
	uint32_t _cmic_miim_ext_phy_addr_map_103_100;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_CLR(r) (r).cmic_miim_ext_phy_addr_map_103_100[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_103_100[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_GET(r) (r).cmic_miim_ext_phy_addr_map_103_100[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_PHY_ID_100f_GET(r) (((r).cmic_miim_ext_phy_addr_map_103_100[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_PHY_ID_100f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_103_100[0]=(((r).cmic_miim_ext_phy_addr_map_103_100[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_PHY_ID_101f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_103_100[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_PHY_ID_101f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_103_100[0]=(((r).cmic_miim_ext_phy_addr_map_103_100[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_PHY_ID_102f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_103_100[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_PHY_ID_102f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_103_100[0]=(((r).cmic_miim_ext_phy_addr_map_103_100[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_PHY_ID_103f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_103_100[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r_PHY_ID_103f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_103_100[0]=(((r).cmic_miim_ext_phy_addr_map_103_100[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_103_100r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_OFFSET 0x0001115c

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_107_104[1];
	uint32_t _cmic_miim_ext_phy_addr_map_107_104;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_CLR(r) (r).cmic_miim_ext_phy_addr_map_107_104[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_107_104[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_GET(r) (r).cmic_miim_ext_phy_addr_map_107_104[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_PHY_ID_104f_GET(r) (((r).cmic_miim_ext_phy_addr_map_107_104[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_PHY_ID_104f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_107_104[0]=(((r).cmic_miim_ext_phy_addr_map_107_104[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_PHY_ID_105f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_107_104[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_PHY_ID_105f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_107_104[0]=(((r).cmic_miim_ext_phy_addr_map_107_104[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_PHY_ID_106f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_107_104[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_PHY_ID_106f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_107_104[0]=(((r).cmic_miim_ext_phy_addr_map_107_104[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_PHY_ID_107f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_107_104[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r_PHY_ID_107f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_107_104[0]=(((r).cmic_miim_ext_phy_addr_map_107_104[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_107_104r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_OFFSET 0x00011160

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_111_108[1];
	uint32_t _cmic_miim_ext_phy_addr_map_111_108;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_CLR(r) (r).cmic_miim_ext_phy_addr_map_111_108[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_111_108[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_GET(r) (r).cmic_miim_ext_phy_addr_map_111_108[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_PHY_ID_108f_GET(r) (((r).cmic_miim_ext_phy_addr_map_111_108[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_PHY_ID_108f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_111_108[0]=(((r).cmic_miim_ext_phy_addr_map_111_108[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_PHY_ID_109f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_111_108[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_PHY_ID_109f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_111_108[0]=(((r).cmic_miim_ext_phy_addr_map_111_108[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_PHY_ID_110f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_111_108[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_PHY_ID_110f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_111_108[0]=(((r).cmic_miim_ext_phy_addr_map_111_108[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_PHY_ID_111f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_111_108[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r_PHY_ID_111f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_111_108[0]=(((r).cmic_miim_ext_phy_addr_map_111_108[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_111_108r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_OFFSET 0x00011164

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_115_112[1];
	uint32_t _cmic_miim_ext_phy_addr_map_115_112;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_CLR(r) (r).cmic_miim_ext_phy_addr_map_115_112[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_115_112[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_GET(r) (r).cmic_miim_ext_phy_addr_map_115_112[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_PHY_ID_112f_GET(r) (((r).cmic_miim_ext_phy_addr_map_115_112[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_PHY_ID_112f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_115_112[0]=(((r).cmic_miim_ext_phy_addr_map_115_112[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_PHY_ID_113f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_115_112[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_PHY_ID_113f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_115_112[0]=(((r).cmic_miim_ext_phy_addr_map_115_112[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_PHY_ID_114f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_115_112[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_PHY_ID_114f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_115_112[0]=(((r).cmic_miim_ext_phy_addr_map_115_112[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_PHY_ID_115f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_115_112[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r_PHY_ID_115f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_115_112[0]=(((r).cmic_miim_ext_phy_addr_map_115_112[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_115_112r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_OFFSET 0x00011168

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_119_116[1];
	uint32_t _cmic_miim_ext_phy_addr_map_119_116;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_CLR(r) (r).cmic_miim_ext_phy_addr_map_119_116[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_119_116[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_GET(r) (r).cmic_miim_ext_phy_addr_map_119_116[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_PHY_ID_116f_GET(r) (((r).cmic_miim_ext_phy_addr_map_119_116[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_PHY_ID_116f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_119_116[0]=(((r).cmic_miim_ext_phy_addr_map_119_116[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_PHY_ID_117f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_119_116[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_PHY_ID_117f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_119_116[0]=(((r).cmic_miim_ext_phy_addr_map_119_116[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_PHY_ID_118f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_119_116[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_PHY_ID_118f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_119_116[0]=(((r).cmic_miim_ext_phy_addr_map_119_116[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_PHY_ID_119f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_119_116[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r_PHY_ID_119f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_119_116[0]=(((r).cmic_miim_ext_phy_addr_map_119_116[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_119_116r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_OFFSET 0x0001109c

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_11_8[1];
	uint32_t _cmic_miim_ext_phy_addr_map_11_8;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_CLR(r) (r).cmic_miim_ext_phy_addr_map_11_8[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_11_8[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_GET(r) (r).cmic_miim_ext_phy_addr_map_11_8[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_PHY_ID_8f_GET(r) (((r).cmic_miim_ext_phy_addr_map_11_8[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_PHY_ID_8f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_11_8[0]=(((r).cmic_miim_ext_phy_addr_map_11_8[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_PHY_ID_9f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_11_8[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_PHY_ID_9f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_11_8[0]=(((r).cmic_miim_ext_phy_addr_map_11_8[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_PHY_ID_10f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_11_8[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_PHY_ID_10f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_11_8[0]=(((r).cmic_miim_ext_phy_addr_map_11_8[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_PHY_ID_11f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_11_8[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r_PHY_ID_11f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_11_8[0]=(((r).cmic_miim_ext_phy_addr_map_11_8[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_11_8r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_OFFSET 0x0001116c

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_123_120[1];
	uint32_t _cmic_miim_ext_phy_addr_map_123_120;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_CLR(r) (r).cmic_miim_ext_phy_addr_map_123_120[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_123_120[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_GET(r) (r).cmic_miim_ext_phy_addr_map_123_120[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_PHY_ID_120f_GET(r) (((r).cmic_miim_ext_phy_addr_map_123_120[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_PHY_ID_120f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_123_120[0]=(((r).cmic_miim_ext_phy_addr_map_123_120[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_PHY_ID_121f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_123_120[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_PHY_ID_121f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_123_120[0]=(((r).cmic_miim_ext_phy_addr_map_123_120[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_PHY_ID_122f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_123_120[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_PHY_ID_122f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_123_120[0]=(((r).cmic_miim_ext_phy_addr_map_123_120[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_PHY_ID_123f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_123_120[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r_PHY_ID_123f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_123_120[0]=(((r).cmic_miim_ext_phy_addr_map_123_120[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_123_120r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_OFFSET 0x00011170

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_127_124[1];
	uint32_t _cmic_miim_ext_phy_addr_map_127_124;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_CLR(r) (r).cmic_miim_ext_phy_addr_map_127_124[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_127_124[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_GET(r) (r).cmic_miim_ext_phy_addr_map_127_124[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_PHY_ID_124f_GET(r) (((r).cmic_miim_ext_phy_addr_map_127_124[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_PHY_ID_124f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_127_124[0]=(((r).cmic_miim_ext_phy_addr_map_127_124[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_PHY_ID_125f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_127_124[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_PHY_ID_125f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_127_124[0]=(((r).cmic_miim_ext_phy_addr_map_127_124[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_PHY_ID_126f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_127_124[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_PHY_ID_126f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_127_124[0]=(((r).cmic_miim_ext_phy_addr_map_127_124[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_PHY_ID_127f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_127_124[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r_PHY_ID_127f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_127_124[0]=(((r).cmic_miim_ext_phy_addr_map_127_124[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_127_124r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_OFFSET 0x000111dc

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_131_128[1];
	uint32_t _cmic_miim_ext_phy_addr_map_131_128;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_CLR(r) (r).cmic_miim_ext_phy_addr_map_131_128[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_131_128[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_GET(r) (r).cmic_miim_ext_phy_addr_map_131_128[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_PHY_ID_128f_GET(r) (((r).cmic_miim_ext_phy_addr_map_131_128[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_PHY_ID_128f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_131_128[0]=(((r).cmic_miim_ext_phy_addr_map_131_128[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_PHY_ID_129f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_131_128[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_PHY_ID_129f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_131_128[0]=(((r).cmic_miim_ext_phy_addr_map_131_128[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_PHY_ID_130f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_131_128[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_PHY_ID_130f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_131_128[0]=(((r).cmic_miim_ext_phy_addr_map_131_128[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_PHY_ID_131f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_131_128[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r_PHY_ID_131f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_131_128[0]=(((r).cmic_miim_ext_phy_addr_map_131_128[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_131_128r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_OFFSET 0x000111e0

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_135_132[1];
	uint32_t _cmic_miim_ext_phy_addr_map_135_132;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_CLR(r) (r).cmic_miim_ext_phy_addr_map_135_132[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_135_132[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_GET(r) (r).cmic_miim_ext_phy_addr_map_135_132[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_PHY_ID_132f_GET(r) (((r).cmic_miim_ext_phy_addr_map_135_132[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_PHY_ID_132f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_135_132[0]=(((r).cmic_miim_ext_phy_addr_map_135_132[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_PHY_ID_133f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_135_132[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_PHY_ID_133f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_135_132[0]=(((r).cmic_miim_ext_phy_addr_map_135_132[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_PHY_ID_134f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_135_132[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_PHY_ID_134f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_135_132[0]=(((r).cmic_miim_ext_phy_addr_map_135_132[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_PHY_ID_135f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_135_132[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r_PHY_ID_135f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_135_132[0]=(((r).cmic_miim_ext_phy_addr_map_135_132[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_135_132r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_OFFSET 0x000111e4

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_139_136[1];
	uint32_t _cmic_miim_ext_phy_addr_map_139_136;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_CLR(r) (r).cmic_miim_ext_phy_addr_map_139_136[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_139_136[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_GET(r) (r).cmic_miim_ext_phy_addr_map_139_136[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_PHY_ID_136f_GET(r) (((r).cmic_miim_ext_phy_addr_map_139_136[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_PHY_ID_136f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_139_136[0]=(((r).cmic_miim_ext_phy_addr_map_139_136[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_PHY_ID_137f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_139_136[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_PHY_ID_137f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_139_136[0]=(((r).cmic_miim_ext_phy_addr_map_139_136[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_PHY_ID_138f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_139_136[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_PHY_ID_138f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_139_136[0]=(((r).cmic_miim_ext_phy_addr_map_139_136[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_PHY_ID_139f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_139_136[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r_PHY_ID_139f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_139_136[0]=(((r).cmic_miim_ext_phy_addr_map_139_136[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_139_136r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_OFFSET 0x000111e8

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_143_140[1];
	uint32_t _cmic_miim_ext_phy_addr_map_143_140;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_CLR(r) (r).cmic_miim_ext_phy_addr_map_143_140[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_143_140[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_GET(r) (r).cmic_miim_ext_phy_addr_map_143_140[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_PHY_ID_140f_GET(r) (((r).cmic_miim_ext_phy_addr_map_143_140[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_PHY_ID_140f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_143_140[0]=(((r).cmic_miim_ext_phy_addr_map_143_140[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_PHY_ID_141f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_143_140[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_PHY_ID_141f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_143_140[0]=(((r).cmic_miim_ext_phy_addr_map_143_140[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_PHY_ID_142f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_143_140[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_PHY_ID_142f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_143_140[0]=(((r).cmic_miim_ext_phy_addr_map_143_140[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_PHY_ID_143f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_143_140[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r_PHY_ID_143f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_143_140[0]=(((r).cmic_miim_ext_phy_addr_map_143_140[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_143_140r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_OFFSET 0x000111ec

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_147_144[1];
	uint32_t _cmic_miim_ext_phy_addr_map_147_144;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_CLR(r) (r).cmic_miim_ext_phy_addr_map_147_144[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_147_144[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_GET(r) (r).cmic_miim_ext_phy_addr_map_147_144[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_PHY_ID_144f_GET(r) (((r).cmic_miim_ext_phy_addr_map_147_144[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_PHY_ID_144f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_147_144[0]=(((r).cmic_miim_ext_phy_addr_map_147_144[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_PHY_ID_145f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_147_144[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_PHY_ID_145f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_147_144[0]=(((r).cmic_miim_ext_phy_addr_map_147_144[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_PHY_ID_146f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_147_144[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_PHY_ID_146f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_147_144[0]=(((r).cmic_miim_ext_phy_addr_map_147_144[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_PHY_ID_147f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_147_144[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r_PHY_ID_147f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_147_144[0]=(((r).cmic_miim_ext_phy_addr_map_147_144[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_147_144r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_OFFSET 0x000111f0

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_151_148[1];
	uint32_t _cmic_miim_ext_phy_addr_map_151_148;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_CLR(r) (r).cmic_miim_ext_phy_addr_map_151_148[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_151_148[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_GET(r) (r).cmic_miim_ext_phy_addr_map_151_148[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_PHY_ID_148f_GET(r) (((r).cmic_miim_ext_phy_addr_map_151_148[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_PHY_ID_148f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_151_148[0]=(((r).cmic_miim_ext_phy_addr_map_151_148[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_PHY_ID_149f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_151_148[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_PHY_ID_149f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_151_148[0]=(((r).cmic_miim_ext_phy_addr_map_151_148[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_PHY_ID_150f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_151_148[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_PHY_ID_150f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_151_148[0]=(((r).cmic_miim_ext_phy_addr_map_151_148[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_PHY_ID_151f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_151_148[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r_PHY_ID_151f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_151_148[0]=(((r).cmic_miim_ext_phy_addr_map_151_148[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_151_148r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_OFFSET 0x000111f4

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_155_152[1];
	uint32_t _cmic_miim_ext_phy_addr_map_155_152;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_CLR(r) (r).cmic_miim_ext_phy_addr_map_155_152[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_155_152[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_GET(r) (r).cmic_miim_ext_phy_addr_map_155_152[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_PHY_ID_152f_GET(r) (((r).cmic_miim_ext_phy_addr_map_155_152[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_PHY_ID_152f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_155_152[0]=(((r).cmic_miim_ext_phy_addr_map_155_152[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_PHY_ID_153f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_155_152[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_PHY_ID_153f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_155_152[0]=(((r).cmic_miim_ext_phy_addr_map_155_152[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_PHY_ID_154f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_155_152[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_PHY_ID_154f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_155_152[0]=(((r).cmic_miim_ext_phy_addr_map_155_152[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_PHY_ID_155f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_155_152[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r_PHY_ID_155f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_155_152[0]=(((r).cmic_miim_ext_phy_addr_map_155_152[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_155_152r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_OFFSET 0x000111f8

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_159_156[1];
	uint32_t _cmic_miim_ext_phy_addr_map_159_156;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_CLR(r) (r).cmic_miim_ext_phy_addr_map_159_156[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_159_156[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_GET(r) (r).cmic_miim_ext_phy_addr_map_159_156[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_PHY_ID_156f_GET(r) (((r).cmic_miim_ext_phy_addr_map_159_156[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_PHY_ID_156f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_159_156[0]=(((r).cmic_miim_ext_phy_addr_map_159_156[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_PHY_ID_157f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_159_156[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_PHY_ID_157f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_159_156[0]=(((r).cmic_miim_ext_phy_addr_map_159_156[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_PHY_ID_158f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_159_156[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_PHY_ID_158f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_159_156[0]=(((r).cmic_miim_ext_phy_addr_map_159_156[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_PHY_ID_159f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_159_156[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r_PHY_ID_159f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_159_156[0]=(((r).cmic_miim_ext_phy_addr_map_159_156[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_159_156r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_OFFSET 0x000110a0

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_15_12[1];
	uint32_t _cmic_miim_ext_phy_addr_map_15_12;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_CLR(r) (r).cmic_miim_ext_phy_addr_map_15_12[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_15_12[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_GET(r) (r).cmic_miim_ext_phy_addr_map_15_12[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_PHY_ID_12f_GET(r) (((r).cmic_miim_ext_phy_addr_map_15_12[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_PHY_ID_12f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_15_12[0]=(((r).cmic_miim_ext_phy_addr_map_15_12[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_PHY_ID_13f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_15_12[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_PHY_ID_13f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_15_12[0]=(((r).cmic_miim_ext_phy_addr_map_15_12[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_PHY_ID_14f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_15_12[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_PHY_ID_14f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_15_12[0]=(((r).cmic_miim_ext_phy_addr_map_15_12[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_PHY_ID_15f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_15_12[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r_PHY_ID_15f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_15_12[0]=(((r).cmic_miim_ext_phy_addr_map_15_12[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_15_12r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_OFFSET 0x000111fc

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_163_160[1];
	uint32_t _cmic_miim_ext_phy_addr_map_163_160;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_CLR(r) (r).cmic_miim_ext_phy_addr_map_163_160[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_163_160[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_GET(r) (r).cmic_miim_ext_phy_addr_map_163_160[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_PHY_ID_160f_GET(r) (((r).cmic_miim_ext_phy_addr_map_163_160[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_PHY_ID_160f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_163_160[0]=(((r).cmic_miim_ext_phy_addr_map_163_160[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_PHY_ID_161f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_163_160[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_PHY_ID_161f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_163_160[0]=(((r).cmic_miim_ext_phy_addr_map_163_160[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_PHY_ID_162f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_163_160[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_PHY_ID_162f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_163_160[0]=(((r).cmic_miim_ext_phy_addr_map_163_160[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_PHY_ID_163f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_163_160[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r_PHY_ID_163f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_163_160[0]=(((r).cmic_miim_ext_phy_addr_map_163_160[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_163_160r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_OFFSET 0x00011200

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_167_164[1];
	uint32_t _cmic_miim_ext_phy_addr_map_167_164;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_CLR(r) (r).cmic_miim_ext_phy_addr_map_167_164[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_167_164[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_GET(r) (r).cmic_miim_ext_phy_addr_map_167_164[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_PHY_ID_164f_GET(r) (((r).cmic_miim_ext_phy_addr_map_167_164[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_PHY_ID_164f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_167_164[0]=(((r).cmic_miim_ext_phy_addr_map_167_164[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_PHY_ID_165f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_167_164[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_PHY_ID_165f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_167_164[0]=(((r).cmic_miim_ext_phy_addr_map_167_164[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_PHY_ID_166f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_167_164[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_PHY_ID_166f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_167_164[0]=(((r).cmic_miim_ext_phy_addr_map_167_164[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_PHY_ID_167f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_167_164[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r_PHY_ID_167f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_167_164[0]=(((r).cmic_miim_ext_phy_addr_map_167_164[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_167_164r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_OFFSET 0x00011204

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_171_168[1];
	uint32_t _cmic_miim_ext_phy_addr_map_171_168;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_CLR(r) (r).cmic_miim_ext_phy_addr_map_171_168[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_171_168[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_GET(r) (r).cmic_miim_ext_phy_addr_map_171_168[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_PHY_ID_168f_GET(r) (((r).cmic_miim_ext_phy_addr_map_171_168[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_PHY_ID_168f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_171_168[0]=(((r).cmic_miim_ext_phy_addr_map_171_168[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_PHY_ID_169f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_171_168[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_PHY_ID_169f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_171_168[0]=(((r).cmic_miim_ext_phy_addr_map_171_168[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_PHY_ID_170f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_171_168[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_PHY_ID_170f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_171_168[0]=(((r).cmic_miim_ext_phy_addr_map_171_168[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_PHY_ID_171f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_171_168[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r_PHY_ID_171f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_171_168[0]=(((r).cmic_miim_ext_phy_addr_map_171_168[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_171_168r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_OFFSET 0x00011208

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_175_172[1];
	uint32_t _cmic_miim_ext_phy_addr_map_175_172;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_CLR(r) (r).cmic_miim_ext_phy_addr_map_175_172[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_175_172[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_GET(r) (r).cmic_miim_ext_phy_addr_map_175_172[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_PHY_ID_172f_GET(r) (((r).cmic_miim_ext_phy_addr_map_175_172[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_PHY_ID_172f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_175_172[0]=(((r).cmic_miim_ext_phy_addr_map_175_172[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_PHY_ID_173f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_175_172[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_PHY_ID_173f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_175_172[0]=(((r).cmic_miim_ext_phy_addr_map_175_172[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_PHY_ID_174f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_175_172[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_PHY_ID_174f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_175_172[0]=(((r).cmic_miim_ext_phy_addr_map_175_172[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_PHY_ID_175f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_175_172[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r_PHY_ID_175f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_175_172[0]=(((r).cmic_miim_ext_phy_addr_map_175_172[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_175_172r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_OFFSET 0x0001120c

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_179_176[1];
	uint32_t _cmic_miim_ext_phy_addr_map_179_176;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_CLR(r) (r).cmic_miim_ext_phy_addr_map_179_176[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_179_176[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_GET(r) (r).cmic_miim_ext_phy_addr_map_179_176[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_PHY_ID_176f_GET(r) (((r).cmic_miim_ext_phy_addr_map_179_176[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_PHY_ID_176f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_179_176[0]=(((r).cmic_miim_ext_phy_addr_map_179_176[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_PHY_ID_177f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_179_176[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_PHY_ID_177f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_179_176[0]=(((r).cmic_miim_ext_phy_addr_map_179_176[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_PHY_ID_178f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_179_176[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_PHY_ID_178f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_179_176[0]=(((r).cmic_miim_ext_phy_addr_map_179_176[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_PHY_ID_179f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_179_176[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r_PHY_ID_179f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_179_176[0]=(((r).cmic_miim_ext_phy_addr_map_179_176[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_179_176r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_OFFSET 0x00011210

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_183_180[1];
	uint32_t _cmic_miim_ext_phy_addr_map_183_180;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_CLR(r) (r).cmic_miim_ext_phy_addr_map_183_180[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_183_180[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_GET(r) (r).cmic_miim_ext_phy_addr_map_183_180[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_PHY_ID_180f_GET(r) (((r).cmic_miim_ext_phy_addr_map_183_180[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_PHY_ID_180f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_183_180[0]=(((r).cmic_miim_ext_phy_addr_map_183_180[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_PHY_ID_181f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_183_180[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_PHY_ID_181f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_183_180[0]=(((r).cmic_miim_ext_phy_addr_map_183_180[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_PHY_ID_182f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_183_180[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_PHY_ID_182f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_183_180[0]=(((r).cmic_miim_ext_phy_addr_map_183_180[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_PHY_ID_183f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_183_180[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r_PHY_ID_183f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_183_180[0]=(((r).cmic_miim_ext_phy_addr_map_183_180[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_183_180r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_OFFSET 0x00011214

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_187_184[1];
	uint32_t _cmic_miim_ext_phy_addr_map_187_184;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_CLR(r) (r).cmic_miim_ext_phy_addr_map_187_184[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_187_184[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_GET(r) (r).cmic_miim_ext_phy_addr_map_187_184[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_PHY_ID_184f_GET(r) (((r).cmic_miim_ext_phy_addr_map_187_184[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_PHY_ID_184f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_187_184[0]=(((r).cmic_miim_ext_phy_addr_map_187_184[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_PHY_ID_185f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_187_184[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_PHY_ID_185f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_187_184[0]=(((r).cmic_miim_ext_phy_addr_map_187_184[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_PHY_ID_186f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_187_184[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_PHY_ID_186f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_187_184[0]=(((r).cmic_miim_ext_phy_addr_map_187_184[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_PHY_ID_187f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_187_184[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r_PHY_ID_187f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_187_184[0]=(((r).cmic_miim_ext_phy_addr_map_187_184[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_187_184r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_OFFSET 0x00011218

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_191_188[1];
	uint32_t _cmic_miim_ext_phy_addr_map_191_188;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_CLR(r) (r).cmic_miim_ext_phy_addr_map_191_188[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_191_188[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_GET(r) (r).cmic_miim_ext_phy_addr_map_191_188[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_PHY_ID_188f_GET(r) (((r).cmic_miim_ext_phy_addr_map_191_188[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_PHY_ID_188f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_191_188[0]=(((r).cmic_miim_ext_phy_addr_map_191_188[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_PHY_ID_189f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_191_188[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_PHY_ID_189f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_191_188[0]=(((r).cmic_miim_ext_phy_addr_map_191_188[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_PHY_ID_190f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_191_188[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_PHY_ID_190f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_191_188[0]=(((r).cmic_miim_ext_phy_addr_map_191_188[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_PHY_ID_191f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_191_188[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r_PHY_ID_191f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_191_188[0]=(((r).cmic_miim_ext_phy_addr_map_191_188[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_191_188r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_OFFSET 0x000110a4

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_19_16[1];
	uint32_t _cmic_miim_ext_phy_addr_map_19_16;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_CLR(r) (r).cmic_miim_ext_phy_addr_map_19_16[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_19_16[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_GET(r) (r).cmic_miim_ext_phy_addr_map_19_16[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_PHY_ID_16f_GET(r) (((r).cmic_miim_ext_phy_addr_map_19_16[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_PHY_ID_16f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_19_16[0]=(((r).cmic_miim_ext_phy_addr_map_19_16[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_PHY_ID_17f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_19_16[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_PHY_ID_17f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_19_16[0]=(((r).cmic_miim_ext_phy_addr_map_19_16[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_PHY_ID_18f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_19_16[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_PHY_ID_18f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_19_16[0]=(((r).cmic_miim_ext_phy_addr_map_19_16[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_PHY_ID_19f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_19_16[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r_PHY_ID_19f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_19_16[0]=(((r).cmic_miim_ext_phy_addr_map_19_16[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_19_16r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_OFFSET 0x000110a8

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_23_20[1];
	uint32_t _cmic_miim_ext_phy_addr_map_23_20;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_CLR(r) (r).cmic_miim_ext_phy_addr_map_23_20[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_23_20[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_GET(r) (r).cmic_miim_ext_phy_addr_map_23_20[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_PHY_ID_20f_GET(r) (((r).cmic_miim_ext_phy_addr_map_23_20[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_PHY_ID_20f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_23_20[0]=(((r).cmic_miim_ext_phy_addr_map_23_20[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_PHY_ID_21f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_23_20[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_PHY_ID_21f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_23_20[0]=(((r).cmic_miim_ext_phy_addr_map_23_20[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_PHY_ID_22f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_23_20[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_PHY_ID_22f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_23_20[0]=(((r).cmic_miim_ext_phy_addr_map_23_20[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_PHY_ID_23f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_23_20[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r_PHY_ID_23f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_23_20[0]=(((r).cmic_miim_ext_phy_addr_map_23_20[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_23_20r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_OFFSET 0x000110ac

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_27_24[1];
	uint32_t _cmic_miim_ext_phy_addr_map_27_24;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_CLR(r) (r).cmic_miim_ext_phy_addr_map_27_24[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_27_24[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_GET(r) (r).cmic_miim_ext_phy_addr_map_27_24[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_PHY_ID_24f_GET(r) (((r).cmic_miim_ext_phy_addr_map_27_24[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_PHY_ID_24f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_27_24[0]=(((r).cmic_miim_ext_phy_addr_map_27_24[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_PHY_ID_25f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_27_24[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_PHY_ID_25f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_27_24[0]=(((r).cmic_miim_ext_phy_addr_map_27_24[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_PHY_ID_26f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_27_24[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_PHY_ID_26f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_27_24[0]=(((r).cmic_miim_ext_phy_addr_map_27_24[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_PHY_ID_27f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_27_24[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r_PHY_ID_27f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_27_24[0]=(((r).cmic_miim_ext_phy_addr_map_27_24[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_27_24r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_OFFSET 0x000110b0

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_31_28[1];
	uint32_t _cmic_miim_ext_phy_addr_map_31_28;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_CLR(r) (r).cmic_miim_ext_phy_addr_map_31_28[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_31_28[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_GET(r) (r).cmic_miim_ext_phy_addr_map_31_28[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_PHY_ID_28f_GET(r) (((r).cmic_miim_ext_phy_addr_map_31_28[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_PHY_ID_28f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_31_28[0]=(((r).cmic_miim_ext_phy_addr_map_31_28[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_PHY_ID_29f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_31_28[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_PHY_ID_29f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_31_28[0]=(((r).cmic_miim_ext_phy_addr_map_31_28[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_PHY_ID_30f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_31_28[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_PHY_ID_30f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_31_28[0]=(((r).cmic_miim_ext_phy_addr_map_31_28[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_PHY_ID_31f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_31_28[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r_PHY_ID_31f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_31_28[0]=(((r).cmic_miim_ext_phy_addr_map_31_28[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_31_28r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_OFFSET 0x000110b4

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_35_32[1];
	uint32_t _cmic_miim_ext_phy_addr_map_35_32;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_CLR(r) (r).cmic_miim_ext_phy_addr_map_35_32[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_35_32[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_GET(r) (r).cmic_miim_ext_phy_addr_map_35_32[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_PHY_ID_32f_GET(r) (((r).cmic_miim_ext_phy_addr_map_35_32[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_PHY_ID_32f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_35_32[0]=(((r).cmic_miim_ext_phy_addr_map_35_32[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_PHY_ID_33f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_35_32[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_PHY_ID_33f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_35_32[0]=(((r).cmic_miim_ext_phy_addr_map_35_32[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_PHY_ID_34f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_35_32[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_PHY_ID_34f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_35_32[0]=(((r).cmic_miim_ext_phy_addr_map_35_32[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_PHY_ID_35f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_35_32[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r_PHY_ID_35f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_35_32[0]=(((r).cmic_miim_ext_phy_addr_map_35_32[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_35_32r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_OFFSET 0x000110b8

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_39_36[1];
	uint32_t _cmic_miim_ext_phy_addr_map_39_36;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_CLR(r) (r).cmic_miim_ext_phy_addr_map_39_36[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_39_36[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_GET(r) (r).cmic_miim_ext_phy_addr_map_39_36[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_PHY_ID_36f_GET(r) (((r).cmic_miim_ext_phy_addr_map_39_36[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_PHY_ID_36f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_39_36[0]=(((r).cmic_miim_ext_phy_addr_map_39_36[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_PHY_ID_37f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_39_36[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_PHY_ID_37f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_39_36[0]=(((r).cmic_miim_ext_phy_addr_map_39_36[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_PHY_ID_38f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_39_36[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_PHY_ID_38f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_39_36[0]=(((r).cmic_miim_ext_phy_addr_map_39_36[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_PHY_ID_39f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_39_36[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r_PHY_ID_39f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_39_36[0]=(((r).cmic_miim_ext_phy_addr_map_39_36[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_39_36r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_OFFSET 0x00011094

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_3_0[1];
	uint32_t _cmic_miim_ext_phy_addr_map_3_0;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_CLR(r) (r).cmic_miim_ext_phy_addr_map_3_0[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_3_0[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_GET(r) (r).cmic_miim_ext_phy_addr_map_3_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_PHY_ID_0f_GET(r) (((r).cmic_miim_ext_phy_addr_map_3_0[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_PHY_ID_0f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_3_0[0]=(((r).cmic_miim_ext_phy_addr_map_3_0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_PHY_ID_1f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_3_0[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_PHY_ID_1f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_3_0[0]=(((r).cmic_miim_ext_phy_addr_map_3_0[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_PHY_ID_2f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_3_0[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_PHY_ID_2f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_3_0[0]=(((r).cmic_miim_ext_phy_addr_map_3_0[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_PHY_ID_3f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_3_0[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r_PHY_ID_3f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_3_0[0]=(((r).cmic_miim_ext_phy_addr_map_3_0[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_3_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_OFFSET 0x000110bc

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_43_40[1];
	uint32_t _cmic_miim_ext_phy_addr_map_43_40;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_CLR(r) (r).cmic_miim_ext_phy_addr_map_43_40[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_43_40[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_GET(r) (r).cmic_miim_ext_phy_addr_map_43_40[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_PHY_ID_40f_GET(r) (((r).cmic_miim_ext_phy_addr_map_43_40[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_PHY_ID_40f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_43_40[0]=(((r).cmic_miim_ext_phy_addr_map_43_40[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_PHY_ID_41f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_43_40[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_PHY_ID_41f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_43_40[0]=(((r).cmic_miim_ext_phy_addr_map_43_40[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_PHY_ID_42f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_43_40[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_PHY_ID_42f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_43_40[0]=(((r).cmic_miim_ext_phy_addr_map_43_40[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_PHY_ID_43f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_43_40[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r_PHY_ID_43f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_43_40[0]=(((r).cmic_miim_ext_phy_addr_map_43_40[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_43_40r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_OFFSET 0x000110c0

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_47_44[1];
	uint32_t _cmic_miim_ext_phy_addr_map_47_44;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_CLR(r) (r).cmic_miim_ext_phy_addr_map_47_44[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_47_44[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_GET(r) (r).cmic_miim_ext_phy_addr_map_47_44[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_PHY_ID_44f_GET(r) (((r).cmic_miim_ext_phy_addr_map_47_44[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_PHY_ID_44f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_47_44[0]=(((r).cmic_miim_ext_phy_addr_map_47_44[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_PHY_ID_45f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_47_44[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_PHY_ID_45f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_47_44[0]=(((r).cmic_miim_ext_phy_addr_map_47_44[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_PHY_ID_46f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_47_44[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_PHY_ID_46f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_47_44[0]=(((r).cmic_miim_ext_phy_addr_map_47_44[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_PHY_ID_47f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_47_44[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r_PHY_ID_47f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_47_44[0]=(((r).cmic_miim_ext_phy_addr_map_47_44[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_47_44r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_OFFSET 0x000110c4

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_51_48[1];
	uint32_t _cmic_miim_ext_phy_addr_map_51_48;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_CLR(r) (r).cmic_miim_ext_phy_addr_map_51_48[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_51_48[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_GET(r) (r).cmic_miim_ext_phy_addr_map_51_48[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_PHY_ID_48f_GET(r) (((r).cmic_miim_ext_phy_addr_map_51_48[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_PHY_ID_48f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_51_48[0]=(((r).cmic_miim_ext_phy_addr_map_51_48[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_PHY_ID_49f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_51_48[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_PHY_ID_49f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_51_48[0]=(((r).cmic_miim_ext_phy_addr_map_51_48[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_PHY_ID_50f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_51_48[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_PHY_ID_50f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_51_48[0]=(((r).cmic_miim_ext_phy_addr_map_51_48[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_PHY_ID_51f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_51_48[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r_PHY_ID_51f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_51_48[0]=(((r).cmic_miim_ext_phy_addr_map_51_48[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_51_48r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_OFFSET 0x000110c8

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_55_52[1];
	uint32_t _cmic_miim_ext_phy_addr_map_55_52;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_CLR(r) (r).cmic_miim_ext_phy_addr_map_55_52[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_55_52[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_GET(r) (r).cmic_miim_ext_phy_addr_map_55_52[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_PHY_ID_52f_GET(r) (((r).cmic_miim_ext_phy_addr_map_55_52[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_PHY_ID_52f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_55_52[0]=(((r).cmic_miim_ext_phy_addr_map_55_52[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_PHY_ID_53f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_55_52[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_PHY_ID_53f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_55_52[0]=(((r).cmic_miim_ext_phy_addr_map_55_52[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_PHY_ID_54f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_55_52[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_PHY_ID_54f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_55_52[0]=(((r).cmic_miim_ext_phy_addr_map_55_52[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_PHY_ID_55f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_55_52[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r_PHY_ID_55f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_55_52[0]=(((r).cmic_miim_ext_phy_addr_map_55_52[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_55_52r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_OFFSET 0x000110cc

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_59_56[1];
	uint32_t _cmic_miim_ext_phy_addr_map_59_56;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_CLR(r) (r).cmic_miim_ext_phy_addr_map_59_56[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_59_56[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_GET(r) (r).cmic_miim_ext_phy_addr_map_59_56[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_PHY_ID_56f_GET(r) (((r).cmic_miim_ext_phy_addr_map_59_56[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_PHY_ID_56f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_59_56[0]=(((r).cmic_miim_ext_phy_addr_map_59_56[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_PHY_ID_57f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_59_56[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_PHY_ID_57f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_59_56[0]=(((r).cmic_miim_ext_phy_addr_map_59_56[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_PHY_ID_58f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_59_56[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_PHY_ID_58f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_59_56[0]=(((r).cmic_miim_ext_phy_addr_map_59_56[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_PHY_ID_59f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_59_56[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r_PHY_ID_59f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_59_56[0]=(((r).cmic_miim_ext_phy_addr_map_59_56[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_59_56r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_OFFSET 0x000110d0

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_63_60[1];
	uint32_t _cmic_miim_ext_phy_addr_map_63_60;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_CLR(r) (r).cmic_miim_ext_phy_addr_map_63_60[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_63_60[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_GET(r) (r).cmic_miim_ext_phy_addr_map_63_60[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_PHY_ID_60f_GET(r) (((r).cmic_miim_ext_phy_addr_map_63_60[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_PHY_ID_60f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_63_60[0]=(((r).cmic_miim_ext_phy_addr_map_63_60[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_PHY_ID_61f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_63_60[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_PHY_ID_61f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_63_60[0]=(((r).cmic_miim_ext_phy_addr_map_63_60[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_PHY_ID_62f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_63_60[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_PHY_ID_62f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_63_60[0]=(((r).cmic_miim_ext_phy_addr_map_63_60[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_PHY_ID_63f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_63_60[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r_PHY_ID_63f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_63_60[0]=(((r).cmic_miim_ext_phy_addr_map_63_60[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_63_60r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_OFFSET 0x000110d4

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_67_64[1];
	uint32_t _cmic_miim_ext_phy_addr_map_67_64;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_CLR(r) (r).cmic_miim_ext_phy_addr_map_67_64[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_67_64[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_GET(r) (r).cmic_miim_ext_phy_addr_map_67_64[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_PHY_ID_64f_GET(r) (((r).cmic_miim_ext_phy_addr_map_67_64[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_PHY_ID_64f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_67_64[0]=(((r).cmic_miim_ext_phy_addr_map_67_64[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_PHY_ID_65f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_67_64[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_PHY_ID_65f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_67_64[0]=(((r).cmic_miim_ext_phy_addr_map_67_64[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_PHY_ID_66f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_67_64[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_PHY_ID_66f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_67_64[0]=(((r).cmic_miim_ext_phy_addr_map_67_64[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_PHY_ID_67f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_67_64[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r_PHY_ID_67f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_67_64[0]=(((r).cmic_miim_ext_phy_addr_map_67_64[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_67_64r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_OFFSET 0x000110d8

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_71_68[1];
	uint32_t _cmic_miim_ext_phy_addr_map_71_68;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_CLR(r) (r).cmic_miim_ext_phy_addr_map_71_68[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_71_68[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_GET(r) (r).cmic_miim_ext_phy_addr_map_71_68[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_PHY_ID_68f_GET(r) (((r).cmic_miim_ext_phy_addr_map_71_68[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_PHY_ID_68f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_71_68[0]=(((r).cmic_miim_ext_phy_addr_map_71_68[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_PHY_ID_69f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_71_68[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_PHY_ID_69f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_71_68[0]=(((r).cmic_miim_ext_phy_addr_map_71_68[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_PHY_ID_70f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_71_68[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_PHY_ID_70f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_71_68[0]=(((r).cmic_miim_ext_phy_addr_map_71_68[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_PHY_ID_71f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_71_68[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r_PHY_ID_71f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_71_68[0]=(((r).cmic_miim_ext_phy_addr_map_71_68[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_71_68r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_OFFSET 0x000110dc

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_75_72[1];
	uint32_t _cmic_miim_ext_phy_addr_map_75_72;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_CLR(r) (r).cmic_miim_ext_phy_addr_map_75_72[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_75_72[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_GET(r) (r).cmic_miim_ext_phy_addr_map_75_72[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_PHY_ID_72f_GET(r) (((r).cmic_miim_ext_phy_addr_map_75_72[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_PHY_ID_72f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_75_72[0]=(((r).cmic_miim_ext_phy_addr_map_75_72[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_PHY_ID_73f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_75_72[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_PHY_ID_73f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_75_72[0]=(((r).cmic_miim_ext_phy_addr_map_75_72[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_PHY_ID_74f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_75_72[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_PHY_ID_74f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_75_72[0]=(((r).cmic_miim_ext_phy_addr_map_75_72[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_PHY_ID_75f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_75_72[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r_PHY_ID_75f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_75_72[0]=(((r).cmic_miim_ext_phy_addr_map_75_72[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_75_72r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_OFFSET 0x000110e0

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_79_76[1];
	uint32_t _cmic_miim_ext_phy_addr_map_79_76;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_CLR(r) (r).cmic_miim_ext_phy_addr_map_79_76[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_79_76[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_GET(r) (r).cmic_miim_ext_phy_addr_map_79_76[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_PHY_ID_76f_GET(r) (((r).cmic_miim_ext_phy_addr_map_79_76[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_PHY_ID_76f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_79_76[0]=(((r).cmic_miim_ext_phy_addr_map_79_76[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_PHY_ID_77f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_79_76[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_PHY_ID_77f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_79_76[0]=(((r).cmic_miim_ext_phy_addr_map_79_76[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_PHY_ID_78f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_79_76[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_PHY_ID_78f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_79_76[0]=(((r).cmic_miim_ext_phy_addr_map_79_76[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_PHY_ID_79f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_79_76[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r_PHY_ID_79f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_79_76[0]=(((r).cmic_miim_ext_phy_addr_map_79_76[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_79_76r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_OFFSET 0x00011098

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_7_4[1];
	uint32_t _cmic_miim_ext_phy_addr_map_7_4;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_CLR(r) (r).cmic_miim_ext_phy_addr_map_7_4[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_7_4[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_GET(r) (r).cmic_miim_ext_phy_addr_map_7_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_PHY_ID_4f_GET(r) (((r).cmic_miim_ext_phy_addr_map_7_4[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_PHY_ID_4f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_7_4[0]=(((r).cmic_miim_ext_phy_addr_map_7_4[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_PHY_ID_5f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_7_4[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_PHY_ID_5f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_7_4[0]=(((r).cmic_miim_ext_phy_addr_map_7_4[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_PHY_ID_6f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_7_4[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_PHY_ID_6f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_7_4[0]=(((r).cmic_miim_ext_phy_addr_map_7_4[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_PHY_ID_7f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_7_4[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r_PHY_ID_7f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_7_4[0]=(((r).cmic_miim_ext_phy_addr_map_7_4[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_7_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_OFFSET 0x000110e4

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_83_80[1];
	uint32_t _cmic_miim_ext_phy_addr_map_83_80;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_CLR(r) (r).cmic_miim_ext_phy_addr_map_83_80[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_83_80[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_GET(r) (r).cmic_miim_ext_phy_addr_map_83_80[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_PHY_ID_80f_GET(r) (((r).cmic_miim_ext_phy_addr_map_83_80[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_PHY_ID_80f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_83_80[0]=(((r).cmic_miim_ext_phy_addr_map_83_80[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_PHY_ID_81f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_83_80[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_PHY_ID_81f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_83_80[0]=(((r).cmic_miim_ext_phy_addr_map_83_80[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_PHY_ID_82f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_83_80[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_PHY_ID_82f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_83_80[0]=(((r).cmic_miim_ext_phy_addr_map_83_80[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_PHY_ID_83f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_83_80[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r_PHY_ID_83f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_83_80[0]=(((r).cmic_miim_ext_phy_addr_map_83_80[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_83_80r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_OFFSET 0x000110e8

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_87_84[1];
	uint32_t _cmic_miim_ext_phy_addr_map_87_84;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_CLR(r) (r).cmic_miim_ext_phy_addr_map_87_84[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_87_84[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_GET(r) (r).cmic_miim_ext_phy_addr_map_87_84[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_PHY_ID_84f_GET(r) (((r).cmic_miim_ext_phy_addr_map_87_84[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_PHY_ID_84f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_87_84[0]=(((r).cmic_miim_ext_phy_addr_map_87_84[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_PHY_ID_85f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_87_84[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_PHY_ID_85f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_87_84[0]=(((r).cmic_miim_ext_phy_addr_map_87_84[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_PHY_ID_86f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_87_84[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_PHY_ID_86f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_87_84[0]=(((r).cmic_miim_ext_phy_addr_map_87_84[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_PHY_ID_87f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_87_84[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r_PHY_ID_87f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_87_84[0]=(((r).cmic_miim_ext_phy_addr_map_87_84[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_87_84r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_OFFSET 0x000110ec

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_91_88[1];
	uint32_t _cmic_miim_ext_phy_addr_map_91_88;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_CLR(r) (r).cmic_miim_ext_phy_addr_map_91_88[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_91_88[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_GET(r) (r).cmic_miim_ext_phy_addr_map_91_88[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_PHY_ID_88f_GET(r) (((r).cmic_miim_ext_phy_addr_map_91_88[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_PHY_ID_88f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_91_88[0]=(((r).cmic_miim_ext_phy_addr_map_91_88[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_PHY_ID_89f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_91_88[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_PHY_ID_89f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_91_88[0]=(((r).cmic_miim_ext_phy_addr_map_91_88[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_PHY_ID_90f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_91_88[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_PHY_ID_90f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_91_88[0]=(((r).cmic_miim_ext_phy_addr_map_91_88[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_PHY_ID_91f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_91_88[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r_PHY_ID_91f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_91_88[0]=(((r).cmic_miim_ext_phy_addr_map_91_88[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_91_88r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_OFFSET 0x000110f0

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_95_92[1];
	uint32_t _cmic_miim_ext_phy_addr_map_95_92;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_CLR(r) (r).cmic_miim_ext_phy_addr_map_95_92[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_95_92[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_GET(r) (r).cmic_miim_ext_phy_addr_map_95_92[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_PHY_ID_92f_GET(r) (((r).cmic_miim_ext_phy_addr_map_95_92[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_PHY_ID_92f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_95_92[0]=(((r).cmic_miim_ext_phy_addr_map_95_92[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_PHY_ID_93f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_95_92[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_PHY_ID_93f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_95_92[0]=(((r).cmic_miim_ext_phy_addr_map_95_92[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_PHY_ID_94f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_95_92[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_PHY_ID_94f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_95_92[0]=(((r).cmic_miim_ext_phy_addr_map_95_92[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_PHY_ID_95f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_95_92[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r_PHY_ID_95f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_95_92[0]=(((r).cmic_miim_ext_phy_addr_map_95_92[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_95_92r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_OFFSET 0x00011154

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96.
 */
typedef union CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_s {
	uint32_t v[1];
	uint32_t cmic_miim_ext_phy_addr_map_99_96[1];
	uint32_t _cmic_miim_ext_phy_addr_map_99_96;
} CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_t;

#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_CLR(r) (r).cmic_miim_ext_phy_addr_map_99_96[0] = 0
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_SET(r,d) (r).cmic_miim_ext_phy_addr_map_99_96[0] = d
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_GET(r) (r).cmic_miim_ext_phy_addr_map_99_96[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_PHY_ID_96f_GET(r) (((r).cmic_miim_ext_phy_addr_map_99_96[0]) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_PHY_ID_96f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_99_96[0]=(((r).cmic_miim_ext_phy_addr_map_99_96[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_PHY_ID_97f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_99_96[0]) >> 8) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_PHY_ID_97f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_99_96[0]=(((r).cmic_miim_ext_phy_addr_map_99_96[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_PHY_ID_98f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_99_96[0]) >> 16) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_PHY_ID_98f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_99_96[0]=(((r).cmic_miim_ext_phy_addr_map_99_96[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_PHY_ID_99f_GET(r) ((((r).cmic_miim_ext_phy_addr_map_99_96[0]) >> 24) & 0x1f)
#define CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r_PHY_ID_99f_SET(r,f) (r).cmic_miim_ext_phy_addr_map_99_96[0]=(((r).cmic_miim_ext_phy_addr_map_99_96[0] & ~((uint32_t)0x1f << 24)) | ((((uint32_t)f) & 0x1f) << 24))

/*******************************************************************************
 * End of 'CMIC_MIIM_EXT_PHY_ADDR_MAP_99_96r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_INT_SEL_MAP_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_INT_SEL_MAP_0r_OFFSET 0x00011060

#define CMIC_MIIM_INT_SEL_MAP_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_INT_SEL_MAP_0.
 */
typedef union CMIC_MIIM_INT_SEL_MAP_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_int_sel_map_0[1];
	uint32_t _cmic_miim_int_sel_map_0;
} CMIC_MIIM_INT_SEL_MAP_0r_t;

#define CMIC_MIIM_INT_SEL_MAP_0r_CLR(r) (r).cmic_miim_int_sel_map_0[0] = 0
#define CMIC_MIIM_INT_SEL_MAP_0r_SET(r,d) (r).cmic_miim_int_sel_map_0[0] = d
#define CMIC_MIIM_INT_SEL_MAP_0r_GET(r) (r).cmic_miim_int_sel_map_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_INT_SEL_MAP_0r_PORT_BITMAPf_GET(r) ((r).cmic_miim_int_sel_map_0[0])
#define CMIC_MIIM_INT_SEL_MAP_0r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_int_sel_map_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_INT_SEL_MAP_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_INT_SEL_MAP_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_INT_SEL_MAP_1r_OFFSET 0x00011064

#define CMIC_MIIM_INT_SEL_MAP_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_INT_SEL_MAP_1.
 */
typedef union CMIC_MIIM_INT_SEL_MAP_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_int_sel_map_1[1];
	uint32_t _cmic_miim_int_sel_map_1;
} CMIC_MIIM_INT_SEL_MAP_1r_t;

#define CMIC_MIIM_INT_SEL_MAP_1r_CLR(r) (r).cmic_miim_int_sel_map_1[0] = 0
#define CMIC_MIIM_INT_SEL_MAP_1r_SET(r,d) (r).cmic_miim_int_sel_map_1[0] = d
#define CMIC_MIIM_INT_SEL_MAP_1r_GET(r) (r).cmic_miim_int_sel_map_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_INT_SEL_MAP_1r_PORT_BITMAPf_GET(r) ((r).cmic_miim_int_sel_map_1[0])
#define CMIC_MIIM_INT_SEL_MAP_1r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_int_sel_map_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_INT_SEL_MAP_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_INT_SEL_MAP_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_INT_SEL_MAP_2r_OFFSET 0x00011068

#define CMIC_MIIM_INT_SEL_MAP_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_INT_SEL_MAP_2.
 */
typedef union CMIC_MIIM_INT_SEL_MAP_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_int_sel_map_2[1];
	uint32_t _cmic_miim_int_sel_map_2;
} CMIC_MIIM_INT_SEL_MAP_2r_t;

#define CMIC_MIIM_INT_SEL_MAP_2r_CLR(r) (r).cmic_miim_int_sel_map_2[0] = 0
#define CMIC_MIIM_INT_SEL_MAP_2r_SET(r,d) (r).cmic_miim_int_sel_map_2[0] = d
#define CMIC_MIIM_INT_SEL_MAP_2r_GET(r) (r).cmic_miim_int_sel_map_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_INT_SEL_MAP_2r_PORT_BITMAPf_GET(r) ((r).cmic_miim_int_sel_map_2[0])
#define CMIC_MIIM_INT_SEL_MAP_2r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_int_sel_map_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_INT_SEL_MAP_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_INT_SEL_MAP_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_INT_SEL_MAP_3r_OFFSET 0x00011140

#define CMIC_MIIM_INT_SEL_MAP_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_INT_SEL_MAP_3.
 */
typedef union CMIC_MIIM_INT_SEL_MAP_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_int_sel_map_3[1];
	uint32_t _cmic_miim_int_sel_map_3;
} CMIC_MIIM_INT_SEL_MAP_3r_t;

#define CMIC_MIIM_INT_SEL_MAP_3r_CLR(r) (r).cmic_miim_int_sel_map_3[0] = 0
#define CMIC_MIIM_INT_SEL_MAP_3r_SET(r,d) (r).cmic_miim_int_sel_map_3[0] = d
#define CMIC_MIIM_INT_SEL_MAP_3r_GET(r) (r).cmic_miim_int_sel_map_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_INT_SEL_MAP_3r_PORT_BITMAPf_GET(r) ((r).cmic_miim_int_sel_map_3[0])
#define CMIC_MIIM_INT_SEL_MAP_3r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_int_sel_map_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_INT_SEL_MAP_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_INT_SEL_MAP_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_INT_SEL_MAP_4r_OFFSET 0x000111b8

#define CMIC_MIIM_INT_SEL_MAP_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_INT_SEL_MAP_4.
 */
typedef union CMIC_MIIM_INT_SEL_MAP_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_int_sel_map_4[1];
	uint32_t _cmic_miim_int_sel_map_4;
} CMIC_MIIM_INT_SEL_MAP_4r_t;

#define CMIC_MIIM_INT_SEL_MAP_4r_CLR(r) (r).cmic_miim_int_sel_map_4[0] = 0
#define CMIC_MIIM_INT_SEL_MAP_4r_SET(r,d) (r).cmic_miim_int_sel_map_4[0] = d
#define CMIC_MIIM_INT_SEL_MAP_4r_GET(r) (r).cmic_miim_int_sel_map_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_INT_SEL_MAP_4r_PORT_BITMAPf_GET(r) ((r).cmic_miim_int_sel_map_4[0])
#define CMIC_MIIM_INT_SEL_MAP_4r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_int_sel_map_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_INT_SEL_MAP_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_INT_SEL_MAP_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_INT_SEL_MAP_5r_OFFSET 0x000111bc

#define CMIC_MIIM_INT_SEL_MAP_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_INT_SEL_MAP_5.
 */
typedef union CMIC_MIIM_INT_SEL_MAP_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_int_sel_map_5[1];
	uint32_t _cmic_miim_int_sel_map_5;
} CMIC_MIIM_INT_SEL_MAP_5r_t;

#define CMIC_MIIM_INT_SEL_MAP_5r_CLR(r) (r).cmic_miim_int_sel_map_5[0] = 0
#define CMIC_MIIM_INT_SEL_MAP_5r_SET(r,d) (r).cmic_miim_int_sel_map_5[0] = d
#define CMIC_MIIM_INT_SEL_MAP_5r_GET(r) (r).cmic_miim_int_sel_map_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_INT_SEL_MAP_5r_PORT_BITMAPf_GET(r) ((r).cmic_miim_int_sel_map_5[0])
#define CMIC_MIIM_INT_SEL_MAP_5r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_int_sel_map_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_INT_SEL_MAP_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_LINK_STATUS_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_LINK_STATUS_0r_OFFSET 0x00011018

#define CMIC_MIIM_LINK_STATUS_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_LINK_STATUS_0.
 */
typedef union CMIC_MIIM_LINK_STATUS_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_link_status_0[1];
	uint32_t _cmic_miim_link_status_0;
} CMIC_MIIM_LINK_STATUS_0r_t;

#define CMIC_MIIM_LINK_STATUS_0r_CLR(r) (r).cmic_miim_link_status_0[0] = 0
#define CMIC_MIIM_LINK_STATUS_0r_SET(r,d) (r).cmic_miim_link_status_0[0] = d
#define CMIC_MIIM_LINK_STATUS_0r_GET(r) (r).cmic_miim_link_status_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_LINK_STATUS_0r_PORT_BITMAPf_GET(r) ((r).cmic_miim_link_status_0[0])
#define CMIC_MIIM_LINK_STATUS_0r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_link_status_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_LINK_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_LINK_STATUS_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_LINK_STATUS_1r_OFFSET 0x0001101c

#define CMIC_MIIM_LINK_STATUS_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_LINK_STATUS_1.
 */
typedef union CMIC_MIIM_LINK_STATUS_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_link_status_1[1];
	uint32_t _cmic_miim_link_status_1;
} CMIC_MIIM_LINK_STATUS_1r_t;

#define CMIC_MIIM_LINK_STATUS_1r_CLR(r) (r).cmic_miim_link_status_1[0] = 0
#define CMIC_MIIM_LINK_STATUS_1r_SET(r,d) (r).cmic_miim_link_status_1[0] = d
#define CMIC_MIIM_LINK_STATUS_1r_GET(r) (r).cmic_miim_link_status_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_LINK_STATUS_1r_PORT_BITMAPf_GET(r) ((r).cmic_miim_link_status_1[0])
#define CMIC_MIIM_LINK_STATUS_1r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_link_status_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_LINK_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_LINK_STATUS_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_LINK_STATUS_2r_OFFSET 0x00011020

#define CMIC_MIIM_LINK_STATUS_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_LINK_STATUS_2.
 */
typedef union CMIC_MIIM_LINK_STATUS_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_link_status_2[1];
	uint32_t _cmic_miim_link_status_2;
} CMIC_MIIM_LINK_STATUS_2r_t;

#define CMIC_MIIM_LINK_STATUS_2r_CLR(r) (r).cmic_miim_link_status_2[0] = 0
#define CMIC_MIIM_LINK_STATUS_2r_SET(r,d) (r).cmic_miim_link_status_2[0] = d
#define CMIC_MIIM_LINK_STATUS_2r_GET(r) (r).cmic_miim_link_status_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_LINK_STATUS_2r_PORT_BITMAPf_GET(r) ((r).cmic_miim_link_status_2[0])
#define CMIC_MIIM_LINK_STATUS_2r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_link_status_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_LINK_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_LINK_STATUS_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_LINK_STATUS_3r_OFFSET 0x00011128

#define CMIC_MIIM_LINK_STATUS_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_LINK_STATUS_3.
 */
typedef union CMIC_MIIM_LINK_STATUS_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_link_status_3[1];
	uint32_t _cmic_miim_link_status_3;
} CMIC_MIIM_LINK_STATUS_3r_t;

#define CMIC_MIIM_LINK_STATUS_3r_CLR(r) (r).cmic_miim_link_status_3[0] = 0
#define CMIC_MIIM_LINK_STATUS_3r_SET(r,d) (r).cmic_miim_link_status_3[0] = d
#define CMIC_MIIM_LINK_STATUS_3r_GET(r) (r).cmic_miim_link_status_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_LINK_STATUS_3r_PORT_BITMAPf_GET(r) ((r).cmic_miim_link_status_3[0])
#define CMIC_MIIM_LINK_STATUS_3r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_link_status_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_LINK_STATUS_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_LINK_STATUS_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_LINK_STATUS_4r_OFFSET 0x00011188

#define CMIC_MIIM_LINK_STATUS_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_LINK_STATUS_4.
 */
typedef union CMIC_MIIM_LINK_STATUS_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_link_status_4[1];
	uint32_t _cmic_miim_link_status_4;
} CMIC_MIIM_LINK_STATUS_4r_t;

#define CMIC_MIIM_LINK_STATUS_4r_CLR(r) (r).cmic_miim_link_status_4[0] = 0
#define CMIC_MIIM_LINK_STATUS_4r_SET(r,d) (r).cmic_miim_link_status_4[0] = d
#define CMIC_MIIM_LINK_STATUS_4r_GET(r) (r).cmic_miim_link_status_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_LINK_STATUS_4r_PORT_BITMAPf_GET(r) ((r).cmic_miim_link_status_4[0])
#define CMIC_MIIM_LINK_STATUS_4r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_link_status_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_LINK_STATUS_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_LINK_STATUS_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_LINK_STATUS_5r_OFFSET 0x0001118c

#define CMIC_MIIM_LINK_STATUS_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_LINK_STATUS_5.
 */
typedef union CMIC_MIIM_LINK_STATUS_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_link_status_5[1];
	uint32_t _cmic_miim_link_status_5;
} CMIC_MIIM_LINK_STATUS_5r_t;

#define CMIC_MIIM_LINK_STATUS_5r_CLR(r) (r).cmic_miim_link_status_5[0] = 0
#define CMIC_MIIM_LINK_STATUS_5r_SET(r,d) (r).cmic_miim_link_status_5[0] = d
#define CMIC_MIIM_LINK_STATUS_5r_GET(r) (r).cmic_miim_link_status_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_LINK_STATUS_5r_PORT_BITMAPf_GET(r) ((r).cmic_miim_link_status_5[0])
#define CMIC_MIIM_LINK_STATUS_5r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_link_status_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_LINK_STATUS_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PAUSE_MIIM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_OFFSET 0x00011014

#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PAUSE_MIIM_ADDRESS.
 */
typedef union CMIC_MIIM_PAUSE_MIIM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_miim_pause_miim_address[1];
	uint32_t _cmic_miim_pause_miim_address;
} CMIC_MIIM_PAUSE_MIIM_ADDRESSr_t;

#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_CLR(r) (r).cmic_miim_pause_miim_address[0] = 0
#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_SET(r,d) (r).cmic_miim_pause_miim_address[0] = d
#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_GET(r) (r).cmic_miim_pause_miim_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_miim_pause_miim_address[0]) & 0xffff)
#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_miim_pause_miim_address[0]=(((r).cmic_miim_pause_miim_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_miim_pause_miim_address[0]) >> 16) & 0x1f)
#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_miim_pause_miim_address[0]=(((r).cmic_miim_pause_miim_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_CLAUSE_22_REGADRf_GET(r) ((((r).cmic_miim_pause_miim_address[0]) >> 21) & 0x1f)
#define CMIC_MIIM_PAUSE_MIIM_ADDRESSr_CLAUSE_22_REGADRf_SET(r,f) (r).cmic_miim_pause_miim_address[0]=(((r).cmic_miim_pause_miim_address[0] & ~((uint32_t)0x1f << 21)) | ((((uint32_t)f) & 0x1f) << 21))

/*******************************************************************************
 * End of 'CMIC_MIIM_PAUSE_MIIM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PAUSE_SCAN_PORTS_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_0r_OFFSET 0x00011048

#define CMIC_MIIM_PAUSE_SCAN_PORTS_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PAUSE_SCAN_PORTS_0.
 */
typedef union CMIC_MIIM_PAUSE_SCAN_PORTS_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_pause_scan_ports_0[1];
	uint32_t _cmic_miim_pause_scan_ports_0;
} CMIC_MIIM_PAUSE_SCAN_PORTS_0r_t;

#define CMIC_MIIM_PAUSE_SCAN_PORTS_0r_CLR(r) (r).cmic_miim_pause_scan_ports_0[0] = 0
#define CMIC_MIIM_PAUSE_SCAN_PORTS_0r_SET(r,d) (r).cmic_miim_pause_scan_ports_0[0] = d
#define CMIC_MIIM_PAUSE_SCAN_PORTS_0r_GET(r) (r).cmic_miim_pause_scan_ports_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_0r_PAUSE_SCAN_PORTSf_GET(r) ((r).cmic_miim_pause_scan_ports_0[0])
#define CMIC_MIIM_PAUSE_SCAN_PORTS_0r_PAUSE_SCAN_PORTSf_SET(r,f) (r).cmic_miim_pause_scan_ports_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PAUSE_SCAN_PORTS_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PAUSE_SCAN_PORTS_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_1r_OFFSET 0x0001104c

#define CMIC_MIIM_PAUSE_SCAN_PORTS_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PAUSE_SCAN_PORTS_1.
 */
typedef union CMIC_MIIM_PAUSE_SCAN_PORTS_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_pause_scan_ports_1[1];
	uint32_t _cmic_miim_pause_scan_ports_1;
} CMIC_MIIM_PAUSE_SCAN_PORTS_1r_t;

#define CMIC_MIIM_PAUSE_SCAN_PORTS_1r_CLR(r) (r).cmic_miim_pause_scan_ports_1[0] = 0
#define CMIC_MIIM_PAUSE_SCAN_PORTS_1r_SET(r,d) (r).cmic_miim_pause_scan_ports_1[0] = d
#define CMIC_MIIM_PAUSE_SCAN_PORTS_1r_GET(r) (r).cmic_miim_pause_scan_ports_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_1r_PAUSE_SCAN_PORTSf_GET(r) ((r).cmic_miim_pause_scan_ports_1[0])
#define CMIC_MIIM_PAUSE_SCAN_PORTS_1r_PAUSE_SCAN_PORTSf_SET(r,f) (r).cmic_miim_pause_scan_ports_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PAUSE_SCAN_PORTS_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PAUSE_SCAN_PORTS_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_2r_OFFSET 0x00011050

#define CMIC_MIIM_PAUSE_SCAN_PORTS_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PAUSE_SCAN_PORTS_2.
 */
typedef union CMIC_MIIM_PAUSE_SCAN_PORTS_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_pause_scan_ports_2[1];
	uint32_t _cmic_miim_pause_scan_ports_2;
} CMIC_MIIM_PAUSE_SCAN_PORTS_2r_t;

#define CMIC_MIIM_PAUSE_SCAN_PORTS_2r_CLR(r) (r).cmic_miim_pause_scan_ports_2[0] = 0
#define CMIC_MIIM_PAUSE_SCAN_PORTS_2r_SET(r,d) (r).cmic_miim_pause_scan_ports_2[0] = d
#define CMIC_MIIM_PAUSE_SCAN_PORTS_2r_GET(r) (r).cmic_miim_pause_scan_ports_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_2r_PAUSE_SCAN_PORTSf_GET(r) ((r).cmic_miim_pause_scan_ports_2[0])
#define CMIC_MIIM_PAUSE_SCAN_PORTS_2r_PAUSE_SCAN_PORTSf_SET(r,f) (r).cmic_miim_pause_scan_ports_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PAUSE_SCAN_PORTS_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PAUSE_SCAN_PORTS_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_3r_OFFSET 0x00011138

#define CMIC_MIIM_PAUSE_SCAN_PORTS_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PAUSE_SCAN_PORTS_3.
 */
typedef union CMIC_MIIM_PAUSE_SCAN_PORTS_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_pause_scan_ports_3[1];
	uint32_t _cmic_miim_pause_scan_ports_3;
} CMIC_MIIM_PAUSE_SCAN_PORTS_3r_t;

#define CMIC_MIIM_PAUSE_SCAN_PORTS_3r_CLR(r) (r).cmic_miim_pause_scan_ports_3[0] = 0
#define CMIC_MIIM_PAUSE_SCAN_PORTS_3r_SET(r,d) (r).cmic_miim_pause_scan_ports_3[0] = d
#define CMIC_MIIM_PAUSE_SCAN_PORTS_3r_GET(r) (r).cmic_miim_pause_scan_ports_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_3r_PAUSE_SCAN_PORTSf_GET(r) ((r).cmic_miim_pause_scan_ports_3[0])
#define CMIC_MIIM_PAUSE_SCAN_PORTS_3r_PAUSE_SCAN_PORTSf_SET(r,f) (r).cmic_miim_pause_scan_ports_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PAUSE_SCAN_PORTS_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PAUSE_SCAN_PORTS_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_4r_OFFSET 0x000111a8

#define CMIC_MIIM_PAUSE_SCAN_PORTS_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PAUSE_SCAN_PORTS_4.
 */
typedef union CMIC_MIIM_PAUSE_SCAN_PORTS_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_pause_scan_ports_4[1];
	uint32_t _cmic_miim_pause_scan_ports_4;
} CMIC_MIIM_PAUSE_SCAN_PORTS_4r_t;

#define CMIC_MIIM_PAUSE_SCAN_PORTS_4r_CLR(r) (r).cmic_miim_pause_scan_ports_4[0] = 0
#define CMIC_MIIM_PAUSE_SCAN_PORTS_4r_SET(r,d) (r).cmic_miim_pause_scan_ports_4[0] = d
#define CMIC_MIIM_PAUSE_SCAN_PORTS_4r_GET(r) (r).cmic_miim_pause_scan_ports_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_4r_PAUSE_SCAN_PORTSf_GET(r) ((r).cmic_miim_pause_scan_ports_4[0])
#define CMIC_MIIM_PAUSE_SCAN_PORTS_4r_PAUSE_SCAN_PORTSf_SET(r,f) (r).cmic_miim_pause_scan_ports_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PAUSE_SCAN_PORTS_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PAUSE_SCAN_PORTS_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_5r_OFFSET 0x000111ac

#define CMIC_MIIM_PAUSE_SCAN_PORTS_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PAUSE_SCAN_PORTS_5.
 */
typedef union CMIC_MIIM_PAUSE_SCAN_PORTS_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_pause_scan_ports_5[1];
	uint32_t _cmic_miim_pause_scan_ports_5;
} CMIC_MIIM_PAUSE_SCAN_PORTS_5r_t;

#define CMIC_MIIM_PAUSE_SCAN_PORTS_5r_CLR(r) (r).cmic_miim_pause_scan_ports_5[0] = 0
#define CMIC_MIIM_PAUSE_SCAN_PORTS_5r_SET(r,d) (r).cmic_miim_pause_scan_ports_5[0] = d
#define CMIC_MIIM_PAUSE_SCAN_PORTS_5r_GET(r) (r).cmic_miim_pause_scan_ports_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PAUSE_SCAN_PORTS_5r_PAUSE_SCAN_PORTSf_GET(r) ((r).cmic_miim_pause_scan_ports_5[0])
#define CMIC_MIIM_PAUSE_SCAN_PORTS_5r_PAUSE_SCAN_PORTSf_SET(r,f) (r).cmic_miim_pause_scan_ports_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PAUSE_SCAN_PORTS_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PROTOCOL_MAP_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PROTOCOL_MAP_0r_OFFSET 0x00011054

#define CMIC_MIIM_PROTOCOL_MAP_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PROTOCOL_MAP_0.
 */
typedef union CMIC_MIIM_PROTOCOL_MAP_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_protocol_map_0[1];
	uint32_t _cmic_miim_protocol_map_0;
} CMIC_MIIM_PROTOCOL_MAP_0r_t;

#define CMIC_MIIM_PROTOCOL_MAP_0r_CLR(r) (r).cmic_miim_protocol_map_0[0] = 0
#define CMIC_MIIM_PROTOCOL_MAP_0r_SET(r,d) (r).cmic_miim_protocol_map_0[0] = d
#define CMIC_MIIM_PROTOCOL_MAP_0r_GET(r) (r).cmic_miim_protocol_map_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PROTOCOL_MAP_0r_BITMAPf_GET(r) ((r).cmic_miim_protocol_map_0[0])
#define CMIC_MIIM_PROTOCOL_MAP_0r_BITMAPf_SET(r,f) (r).cmic_miim_protocol_map_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PROTOCOL_MAP_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PROTOCOL_MAP_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PROTOCOL_MAP_1r_OFFSET 0x00011058

#define CMIC_MIIM_PROTOCOL_MAP_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PROTOCOL_MAP_1.
 */
typedef union CMIC_MIIM_PROTOCOL_MAP_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_protocol_map_1[1];
	uint32_t _cmic_miim_protocol_map_1;
} CMIC_MIIM_PROTOCOL_MAP_1r_t;

#define CMIC_MIIM_PROTOCOL_MAP_1r_CLR(r) (r).cmic_miim_protocol_map_1[0] = 0
#define CMIC_MIIM_PROTOCOL_MAP_1r_SET(r,d) (r).cmic_miim_protocol_map_1[0] = d
#define CMIC_MIIM_PROTOCOL_MAP_1r_GET(r) (r).cmic_miim_protocol_map_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PROTOCOL_MAP_1r_BITMAPf_GET(r) ((r).cmic_miim_protocol_map_1[0])
#define CMIC_MIIM_PROTOCOL_MAP_1r_BITMAPf_SET(r,f) (r).cmic_miim_protocol_map_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PROTOCOL_MAP_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PROTOCOL_MAP_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PROTOCOL_MAP_2r_OFFSET 0x0001105c

#define CMIC_MIIM_PROTOCOL_MAP_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PROTOCOL_MAP_2.
 */
typedef union CMIC_MIIM_PROTOCOL_MAP_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_protocol_map_2[1];
	uint32_t _cmic_miim_protocol_map_2;
} CMIC_MIIM_PROTOCOL_MAP_2r_t;

#define CMIC_MIIM_PROTOCOL_MAP_2r_CLR(r) (r).cmic_miim_protocol_map_2[0] = 0
#define CMIC_MIIM_PROTOCOL_MAP_2r_SET(r,d) (r).cmic_miim_protocol_map_2[0] = d
#define CMIC_MIIM_PROTOCOL_MAP_2r_GET(r) (r).cmic_miim_protocol_map_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PROTOCOL_MAP_2r_BITMAPf_GET(r) ((r).cmic_miim_protocol_map_2[0])
#define CMIC_MIIM_PROTOCOL_MAP_2r_BITMAPf_SET(r,f) (r).cmic_miim_protocol_map_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PROTOCOL_MAP_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PROTOCOL_MAP_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PROTOCOL_MAP_3r_OFFSET 0x0001113c

#define CMIC_MIIM_PROTOCOL_MAP_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PROTOCOL_MAP_3.
 */
typedef union CMIC_MIIM_PROTOCOL_MAP_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_protocol_map_3[1];
	uint32_t _cmic_miim_protocol_map_3;
} CMIC_MIIM_PROTOCOL_MAP_3r_t;

#define CMIC_MIIM_PROTOCOL_MAP_3r_CLR(r) (r).cmic_miim_protocol_map_3[0] = 0
#define CMIC_MIIM_PROTOCOL_MAP_3r_SET(r,d) (r).cmic_miim_protocol_map_3[0] = d
#define CMIC_MIIM_PROTOCOL_MAP_3r_GET(r) (r).cmic_miim_protocol_map_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PROTOCOL_MAP_3r_BITMAPf_GET(r) ((r).cmic_miim_protocol_map_3[0])
#define CMIC_MIIM_PROTOCOL_MAP_3r_BITMAPf_SET(r,f) (r).cmic_miim_protocol_map_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PROTOCOL_MAP_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PROTOCOL_MAP_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PROTOCOL_MAP_4r_OFFSET 0x000111b0

#define CMIC_MIIM_PROTOCOL_MAP_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PROTOCOL_MAP_4.
 */
typedef union CMIC_MIIM_PROTOCOL_MAP_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_protocol_map_4[1];
	uint32_t _cmic_miim_protocol_map_4;
} CMIC_MIIM_PROTOCOL_MAP_4r_t;

#define CMIC_MIIM_PROTOCOL_MAP_4r_CLR(r) (r).cmic_miim_protocol_map_4[0] = 0
#define CMIC_MIIM_PROTOCOL_MAP_4r_SET(r,d) (r).cmic_miim_protocol_map_4[0] = d
#define CMIC_MIIM_PROTOCOL_MAP_4r_GET(r) (r).cmic_miim_protocol_map_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PROTOCOL_MAP_4r_BITMAPf_GET(r) ((r).cmic_miim_protocol_map_4[0])
#define CMIC_MIIM_PROTOCOL_MAP_4r_BITMAPf_SET(r,f) (r).cmic_miim_protocol_map_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PROTOCOL_MAP_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_PROTOCOL_MAP_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_PROTOCOL_MAP_5r_OFFSET 0x000111b4

#define CMIC_MIIM_PROTOCOL_MAP_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_PROTOCOL_MAP_5.
 */
typedef union CMIC_MIIM_PROTOCOL_MAP_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_protocol_map_5[1];
	uint32_t _cmic_miim_protocol_map_5;
} CMIC_MIIM_PROTOCOL_MAP_5r_t;

#define CMIC_MIIM_PROTOCOL_MAP_5r_CLR(r) (r).cmic_miim_protocol_map_5[0] = 0
#define CMIC_MIIM_PROTOCOL_MAP_5r_SET(r,d) (r).cmic_miim_protocol_map_5[0] = d
#define CMIC_MIIM_PROTOCOL_MAP_5r_GET(r) (r).cmic_miim_protocol_map_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_PROTOCOL_MAP_5r_BITMAPf_GET(r) ((r).cmic_miim_protocol_map_5[0])
#define CMIC_MIIM_PROTOCOL_MAP_5r_BITMAPf_SET(r,f) (r).cmic_miim_protocol_map_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_PROTOCOL_MAP_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_CAPABILITY_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_0r_OFFSET 0x000110f4

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_CAPABILITY_0.
 */
typedef union CMIC_MIIM_RX_PAUSE_CAPABILITY_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_capability_0[1];
	uint32_t _cmic_miim_rx_pause_capability_0;
} CMIC_MIIM_RX_PAUSE_CAPABILITY_0r_t;

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_0r_CLR(r) (r).cmic_miim_rx_pause_capability_0[0] = 0
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_0r_SET(r,d) (r).cmic_miim_rx_pause_capability_0[0] = d
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_0r_GET(r) (r).cmic_miim_rx_pause_capability_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_0r_RX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_rx_pause_capability_0[0])
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_0r_RX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_rx_pause_capability_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_CAPABILITY_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_CAPABILITY_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_1r_OFFSET 0x000110f8

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_CAPABILITY_1.
 */
typedef union CMIC_MIIM_RX_PAUSE_CAPABILITY_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_capability_1[1];
	uint32_t _cmic_miim_rx_pause_capability_1;
} CMIC_MIIM_RX_PAUSE_CAPABILITY_1r_t;

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_1r_CLR(r) (r).cmic_miim_rx_pause_capability_1[0] = 0
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_1r_SET(r,d) (r).cmic_miim_rx_pause_capability_1[0] = d
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_1r_GET(r) (r).cmic_miim_rx_pause_capability_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_1r_RX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_rx_pause_capability_1[0])
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_1r_RX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_rx_pause_capability_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_CAPABILITY_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_CAPABILITY_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_2r_OFFSET 0x000110fc

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_CAPABILITY_2.
 */
typedef union CMIC_MIIM_RX_PAUSE_CAPABILITY_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_capability_2[1];
	uint32_t _cmic_miim_rx_pause_capability_2;
} CMIC_MIIM_RX_PAUSE_CAPABILITY_2r_t;

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_2r_CLR(r) (r).cmic_miim_rx_pause_capability_2[0] = 0
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_2r_SET(r,d) (r).cmic_miim_rx_pause_capability_2[0] = d
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_2r_GET(r) (r).cmic_miim_rx_pause_capability_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_2r_RX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_rx_pause_capability_2[0])
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_2r_RX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_rx_pause_capability_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_CAPABILITY_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_CAPABILITY_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_3r_OFFSET 0x00011174

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_CAPABILITY_3.
 */
typedef union CMIC_MIIM_RX_PAUSE_CAPABILITY_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_capability_3[1];
	uint32_t _cmic_miim_rx_pause_capability_3;
} CMIC_MIIM_RX_PAUSE_CAPABILITY_3r_t;

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_3r_CLR(r) (r).cmic_miim_rx_pause_capability_3[0] = 0
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_3r_SET(r,d) (r).cmic_miim_rx_pause_capability_3[0] = d
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_3r_GET(r) (r).cmic_miim_rx_pause_capability_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_3r_RX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_rx_pause_capability_3[0])
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_3r_RX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_rx_pause_capability_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_CAPABILITY_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_CAPABILITY_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_4r_OFFSET 0x0001121c

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_CAPABILITY_4.
 */
typedef union CMIC_MIIM_RX_PAUSE_CAPABILITY_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_capability_4[1];
	uint32_t _cmic_miim_rx_pause_capability_4;
} CMIC_MIIM_RX_PAUSE_CAPABILITY_4r_t;

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_4r_CLR(r) (r).cmic_miim_rx_pause_capability_4[0] = 0
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_4r_SET(r,d) (r).cmic_miim_rx_pause_capability_4[0] = d
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_4r_GET(r) (r).cmic_miim_rx_pause_capability_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_4r_RX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_rx_pause_capability_4[0])
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_4r_RX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_rx_pause_capability_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_CAPABILITY_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_CAPABILITY_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_5r_OFFSET 0x00011220

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_CAPABILITY_5.
 */
typedef union CMIC_MIIM_RX_PAUSE_CAPABILITY_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_capability_5[1];
	uint32_t _cmic_miim_rx_pause_capability_5;
} CMIC_MIIM_RX_PAUSE_CAPABILITY_5r_t;

#define CMIC_MIIM_RX_PAUSE_CAPABILITY_5r_CLR(r) (r).cmic_miim_rx_pause_capability_5[0] = 0
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_5r_SET(r,d) (r).cmic_miim_rx_pause_capability_5[0] = d
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_5r_GET(r) (r).cmic_miim_rx_pause_capability_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_5r_RX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_rx_pause_capability_5[0])
#define CMIC_MIIM_RX_PAUSE_CAPABILITY_5r_RX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_rx_pause_capability_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_CAPABILITY_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r_OFFSET 0x00011100

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0.
 */
typedef union CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_override_control_0[1];
	uint32_t _cmic_miim_rx_pause_override_control_0;
} CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r_t;

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r_CLR(r) (r).cmic_miim_rx_pause_override_control_0[0] = 0
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r_SET(r,d) (r).cmic_miim_rx_pause_override_control_0[0] = d
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r_GET(r) (r).cmic_miim_rx_pause_override_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r_RX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_rx_pause_override_control_0[0])
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r_RX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_rx_pause_override_control_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r_OFFSET 0x00011104

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1.
 */
typedef union CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_override_control_1[1];
	uint32_t _cmic_miim_rx_pause_override_control_1;
} CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r_t;

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r_CLR(r) (r).cmic_miim_rx_pause_override_control_1[0] = 0
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r_SET(r,d) (r).cmic_miim_rx_pause_override_control_1[0] = d
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r_GET(r) (r).cmic_miim_rx_pause_override_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r_RX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_rx_pause_override_control_1[0])
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r_RX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_rx_pause_override_control_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r_OFFSET 0x00011108

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2.
 */
typedef union CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_override_control_2[1];
	uint32_t _cmic_miim_rx_pause_override_control_2;
} CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r_t;

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r_CLR(r) (r).cmic_miim_rx_pause_override_control_2[0] = 0
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r_SET(r,d) (r).cmic_miim_rx_pause_override_control_2[0] = d
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r_GET(r) (r).cmic_miim_rx_pause_override_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r_RX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_rx_pause_override_control_2[0])
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r_RX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_rx_pause_override_control_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r_OFFSET 0x00011178

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3.
 */
typedef union CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_override_control_3[1];
	uint32_t _cmic_miim_rx_pause_override_control_3;
} CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r_t;

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r_CLR(r) (r).cmic_miim_rx_pause_override_control_3[0] = 0
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r_SET(r,d) (r).cmic_miim_rx_pause_override_control_3[0] = d
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r_GET(r) (r).cmic_miim_rx_pause_override_control_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r_RX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_rx_pause_override_control_3[0])
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r_RX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_rx_pause_override_control_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r_OFFSET 0x00011224

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4.
 */
typedef union CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_override_control_4[1];
	uint32_t _cmic_miim_rx_pause_override_control_4;
} CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r_t;

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r_CLR(r) (r).cmic_miim_rx_pause_override_control_4[0] = 0
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r_SET(r,d) (r).cmic_miim_rx_pause_override_control_4[0] = d
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r_GET(r) (r).cmic_miim_rx_pause_override_control_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r_RX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_rx_pause_override_control_4[0])
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r_RX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_rx_pause_override_control_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r_OFFSET 0x00011228

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5.
 */
typedef union CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_override_control_5[1];
	uint32_t _cmic_miim_rx_pause_override_control_5;
} CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r_t;

#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r_CLR(r) (r).cmic_miim_rx_pause_override_control_5[0] = 0
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r_SET(r,d) (r).cmic_miim_rx_pause_override_control_5[0] = d
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r_GET(r) (r).cmic_miim_rx_pause_override_control_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r_RX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_rx_pause_override_control_5[0])
#define CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r_RX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_rx_pause_override_control_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_OVERRIDE_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_STATUS_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_0r_OFFSET 0x00011024

#define CMIC_MIIM_RX_PAUSE_STATUS_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_STATUS_0.
 */
typedef union CMIC_MIIM_RX_PAUSE_STATUS_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_status_0[1];
	uint32_t _cmic_miim_rx_pause_status_0;
} CMIC_MIIM_RX_PAUSE_STATUS_0r_t;

#define CMIC_MIIM_RX_PAUSE_STATUS_0r_CLR(r) (r).cmic_miim_rx_pause_status_0[0] = 0
#define CMIC_MIIM_RX_PAUSE_STATUS_0r_SET(r,d) (r).cmic_miim_rx_pause_status_0[0] = d
#define CMIC_MIIM_RX_PAUSE_STATUS_0r_GET(r) (r).cmic_miim_rx_pause_status_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_0r_PAUSE_STATf_GET(r) ((r).cmic_miim_rx_pause_status_0[0])
#define CMIC_MIIM_RX_PAUSE_STATUS_0r_PAUSE_STATf_SET(r,f) (r).cmic_miim_rx_pause_status_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_STATUS_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_1r_OFFSET 0x00011028

#define CMIC_MIIM_RX_PAUSE_STATUS_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_STATUS_1.
 */
typedef union CMIC_MIIM_RX_PAUSE_STATUS_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_status_1[1];
	uint32_t _cmic_miim_rx_pause_status_1;
} CMIC_MIIM_RX_PAUSE_STATUS_1r_t;

#define CMIC_MIIM_RX_PAUSE_STATUS_1r_CLR(r) (r).cmic_miim_rx_pause_status_1[0] = 0
#define CMIC_MIIM_RX_PAUSE_STATUS_1r_SET(r,d) (r).cmic_miim_rx_pause_status_1[0] = d
#define CMIC_MIIM_RX_PAUSE_STATUS_1r_GET(r) (r).cmic_miim_rx_pause_status_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_1r_PAUSE_STATf_GET(r) ((r).cmic_miim_rx_pause_status_1[0])
#define CMIC_MIIM_RX_PAUSE_STATUS_1r_PAUSE_STATf_SET(r,f) (r).cmic_miim_rx_pause_status_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_STATUS_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_2r_OFFSET 0x0001102c

#define CMIC_MIIM_RX_PAUSE_STATUS_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_STATUS_2.
 */
typedef union CMIC_MIIM_RX_PAUSE_STATUS_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_status_2[1];
	uint32_t _cmic_miim_rx_pause_status_2;
} CMIC_MIIM_RX_PAUSE_STATUS_2r_t;

#define CMIC_MIIM_RX_PAUSE_STATUS_2r_CLR(r) (r).cmic_miim_rx_pause_status_2[0] = 0
#define CMIC_MIIM_RX_PAUSE_STATUS_2r_SET(r,d) (r).cmic_miim_rx_pause_status_2[0] = d
#define CMIC_MIIM_RX_PAUSE_STATUS_2r_GET(r) (r).cmic_miim_rx_pause_status_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_2r_PAUSE_STATf_GET(r) ((r).cmic_miim_rx_pause_status_2[0])
#define CMIC_MIIM_RX_PAUSE_STATUS_2r_PAUSE_STATf_SET(r,f) (r).cmic_miim_rx_pause_status_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_STATUS_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_3r_OFFSET 0x0001112c

#define CMIC_MIIM_RX_PAUSE_STATUS_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_STATUS_3.
 */
typedef union CMIC_MIIM_RX_PAUSE_STATUS_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_status_3[1];
	uint32_t _cmic_miim_rx_pause_status_3;
} CMIC_MIIM_RX_PAUSE_STATUS_3r_t;

#define CMIC_MIIM_RX_PAUSE_STATUS_3r_CLR(r) (r).cmic_miim_rx_pause_status_3[0] = 0
#define CMIC_MIIM_RX_PAUSE_STATUS_3r_SET(r,d) (r).cmic_miim_rx_pause_status_3[0] = d
#define CMIC_MIIM_RX_PAUSE_STATUS_3r_GET(r) (r).cmic_miim_rx_pause_status_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_3r_PAUSE_STATf_GET(r) ((r).cmic_miim_rx_pause_status_3[0])
#define CMIC_MIIM_RX_PAUSE_STATUS_3r_PAUSE_STATf_SET(r,f) (r).cmic_miim_rx_pause_status_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_STATUS_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_STATUS_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_4r_OFFSET 0x00011190

#define CMIC_MIIM_RX_PAUSE_STATUS_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_STATUS_4.
 */
typedef union CMIC_MIIM_RX_PAUSE_STATUS_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_status_4[1];
	uint32_t _cmic_miim_rx_pause_status_4;
} CMIC_MIIM_RX_PAUSE_STATUS_4r_t;

#define CMIC_MIIM_RX_PAUSE_STATUS_4r_CLR(r) (r).cmic_miim_rx_pause_status_4[0] = 0
#define CMIC_MIIM_RX_PAUSE_STATUS_4r_SET(r,d) (r).cmic_miim_rx_pause_status_4[0] = d
#define CMIC_MIIM_RX_PAUSE_STATUS_4r_GET(r) (r).cmic_miim_rx_pause_status_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_4r_PAUSE_STATf_GET(r) ((r).cmic_miim_rx_pause_status_4[0])
#define CMIC_MIIM_RX_PAUSE_STATUS_4r_PAUSE_STATf_SET(r,f) (r).cmic_miim_rx_pause_status_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_STATUS_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_RX_PAUSE_STATUS_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_5r_OFFSET 0x00011194

#define CMIC_MIIM_RX_PAUSE_STATUS_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_RX_PAUSE_STATUS_5.
 */
typedef union CMIC_MIIM_RX_PAUSE_STATUS_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_rx_pause_status_5[1];
	uint32_t _cmic_miim_rx_pause_status_5;
} CMIC_MIIM_RX_PAUSE_STATUS_5r_t;

#define CMIC_MIIM_RX_PAUSE_STATUS_5r_CLR(r) (r).cmic_miim_rx_pause_status_5[0] = 0
#define CMIC_MIIM_RX_PAUSE_STATUS_5r_SET(r,d) (r).cmic_miim_rx_pause_status_5[0] = d
#define CMIC_MIIM_RX_PAUSE_STATUS_5r_GET(r) (r).cmic_miim_rx_pause_status_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_RX_PAUSE_STATUS_5r_PAUSE_STATf_GET(r) ((r).cmic_miim_rx_pause_status_5[0])
#define CMIC_MIIM_RX_PAUSE_STATUS_5r_PAUSE_STATf_SET(r,f) (r).cmic_miim_rx_pause_status_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_RX_PAUSE_STATUS_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_SCAN_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_SCAN_CTRLr_OFFSET 0x00011008

#define CMIC_MIIM_SCAN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_SCAN_CTRL.
 */
typedef union CMIC_MIIM_SCAN_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_miim_scan_ctrl[1];
	uint32_t _cmic_miim_scan_ctrl;
} CMIC_MIIM_SCAN_CTRLr_t;

#define CMIC_MIIM_SCAN_CTRLr_CLR(r) (r).cmic_miim_scan_ctrl[0] = 0
#define CMIC_MIIM_SCAN_CTRLr_SET(r,d) (r).cmic_miim_scan_ctrl[0] = d
#define CMIC_MIIM_SCAN_CTRLr_GET(r) (r).cmic_miim_scan_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_SCAN_CTRLr_MIIM_LINK_SCAN_ENf_GET(r) (((r).cmic_miim_scan_ctrl[0]) & 0x1)
#define CMIC_MIIM_SCAN_CTRLr_MIIM_LINK_SCAN_ENf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_MIIM_SCAN_CTRLr_MIIM_PAUSE_SCAN_ENf_GET(r) ((((r).cmic_miim_scan_ctrl[0]) >> 1) & 0x1)
#define CMIC_MIIM_SCAN_CTRLr_MIIM_PAUSE_SCAN_ENf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_MIIM_SCAN_CTRLr_TX_PAUSE_BIT_POSf_GET(r) ((((r).cmic_miim_scan_ctrl[0]) >> 4) & 0x1f)
#define CMIC_MIIM_SCAN_CTRLr_TX_PAUSE_BIT_POSf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define CMIC_MIIM_SCAN_CTRLr_RX_PAUSE_BIT_POSf_GET(r) ((((r).cmic_miim_scan_ctrl[0]) >> 12) & 0x1f)
#define CMIC_MIIM_SCAN_CTRLr_RX_PAUSE_BIT_POSf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1f << 12)) | ((((uint32_t)f) & 0x1f) << 12))
#define CMIC_MIIM_SCAN_CTRLr_STOP_LS_ON_CHANGEf_GET(r) ((((r).cmic_miim_scan_ctrl[0]) >> 20) & 0x1)
#define CMIC_MIIM_SCAN_CTRLr_STOP_LS_ON_CHANGEf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_MIIM_SCAN_CTRLr_STOP_LS_ON_FIRST_CHANGEf_GET(r) ((((r).cmic_miim_scan_ctrl[0]) >> 21) & 0x1)
#define CMIC_MIIM_SCAN_CTRLr_STOP_LS_ON_FIRST_CHANGEf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_MIIM_SCAN_CTRLr_STOP_PAUSE_SCAN_ON_CHANGEf_GET(r) ((((r).cmic_miim_scan_ctrl[0]) >> 24) & 0x1)
#define CMIC_MIIM_SCAN_CTRLr_STOP_PAUSE_SCAN_ON_CHANGEf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_MIIM_SCAN_CTRLr_STOP_PAUSE_SCAN_ON_FIRST_CHANGEf_GET(r) ((((r).cmic_miim_scan_ctrl[0]) >> 25) & 0x1)
#define CMIC_MIIM_SCAN_CTRLr_STOP_PAUSE_SCAN_ON_FIRST_CHANGEf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_MIIM_SCAN_CTRLr_OVER_RIDE_EXT_MDIO_MSTR_CNTRLf_GET(r) ((((r).cmic_miim_scan_ctrl[0]) >> 28) & 0x1)
#define CMIC_MIIM_SCAN_CTRLr_OVER_RIDE_EXT_MDIO_MSTR_CNTRLf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_MIIM_SCAN_CTRLr_MIIM_ADDR_MAP_ENABLEf_GET(r) ((((r).cmic_miim_scan_ctrl[0]) >> 29) & 0x1)
#define CMIC_MIIM_SCAN_CTRLr_MIIM_ADDR_MAP_ENABLEf_SET(r,f) (r).cmic_miim_scan_ctrl[0]=(((r).cmic_miim_scan_ctrl[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))

/*******************************************************************************
 * End of 'CMIC_MIIM_SCAN_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_SCAN_PORTS_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_SCAN_PORTS_0r_OFFSET 0x0001103c

#define CMIC_MIIM_SCAN_PORTS_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_SCAN_PORTS_0.
 */
typedef union CMIC_MIIM_SCAN_PORTS_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_scan_ports_0[1];
	uint32_t _cmic_miim_scan_ports_0;
} CMIC_MIIM_SCAN_PORTS_0r_t;

#define CMIC_MIIM_SCAN_PORTS_0r_CLR(r) (r).cmic_miim_scan_ports_0[0] = 0
#define CMIC_MIIM_SCAN_PORTS_0r_SET(r,d) (r).cmic_miim_scan_ports_0[0] = d
#define CMIC_MIIM_SCAN_PORTS_0r_GET(r) (r).cmic_miim_scan_ports_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_SCAN_PORTS_0r_PORT_BITMAPf_GET(r) ((r).cmic_miim_scan_ports_0[0])
#define CMIC_MIIM_SCAN_PORTS_0r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_scan_ports_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_SCAN_PORTS_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_SCAN_PORTS_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_SCAN_PORTS_1r_OFFSET 0x00011040

#define CMIC_MIIM_SCAN_PORTS_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_SCAN_PORTS_1.
 */
typedef union CMIC_MIIM_SCAN_PORTS_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_scan_ports_1[1];
	uint32_t _cmic_miim_scan_ports_1;
} CMIC_MIIM_SCAN_PORTS_1r_t;

#define CMIC_MIIM_SCAN_PORTS_1r_CLR(r) (r).cmic_miim_scan_ports_1[0] = 0
#define CMIC_MIIM_SCAN_PORTS_1r_SET(r,d) (r).cmic_miim_scan_ports_1[0] = d
#define CMIC_MIIM_SCAN_PORTS_1r_GET(r) (r).cmic_miim_scan_ports_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_SCAN_PORTS_1r_PORT_BITMAPf_GET(r) ((r).cmic_miim_scan_ports_1[0])
#define CMIC_MIIM_SCAN_PORTS_1r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_scan_ports_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_SCAN_PORTS_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_SCAN_PORTS_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_SCAN_PORTS_2r_OFFSET 0x00011044

#define CMIC_MIIM_SCAN_PORTS_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_SCAN_PORTS_2.
 */
typedef union CMIC_MIIM_SCAN_PORTS_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_scan_ports_2[1];
	uint32_t _cmic_miim_scan_ports_2;
} CMIC_MIIM_SCAN_PORTS_2r_t;

#define CMIC_MIIM_SCAN_PORTS_2r_CLR(r) (r).cmic_miim_scan_ports_2[0] = 0
#define CMIC_MIIM_SCAN_PORTS_2r_SET(r,d) (r).cmic_miim_scan_ports_2[0] = d
#define CMIC_MIIM_SCAN_PORTS_2r_GET(r) (r).cmic_miim_scan_ports_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_SCAN_PORTS_2r_PORT_BITMAPf_GET(r) ((r).cmic_miim_scan_ports_2[0])
#define CMIC_MIIM_SCAN_PORTS_2r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_scan_ports_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_SCAN_PORTS_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_SCAN_PORTS_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_SCAN_PORTS_3r_OFFSET 0x00011134

#define CMIC_MIIM_SCAN_PORTS_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_SCAN_PORTS_3.
 */
typedef union CMIC_MIIM_SCAN_PORTS_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_scan_ports_3[1];
	uint32_t _cmic_miim_scan_ports_3;
} CMIC_MIIM_SCAN_PORTS_3r_t;

#define CMIC_MIIM_SCAN_PORTS_3r_CLR(r) (r).cmic_miim_scan_ports_3[0] = 0
#define CMIC_MIIM_SCAN_PORTS_3r_SET(r,d) (r).cmic_miim_scan_ports_3[0] = d
#define CMIC_MIIM_SCAN_PORTS_3r_GET(r) (r).cmic_miim_scan_ports_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_SCAN_PORTS_3r_PORT_BITMAPf_GET(r) ((r).cmic_miim_scan_ports_3[0])
#define CMIC_MIIM_SCAN_PORTS_3r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_scan_ports_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_SCAN_PORTS_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_SCAN_PORTS_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_SCAN_PORTS_4r_OFFSET 0x000111a0

#define CMIC_MIIM_SCAN_PORTS_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_SCAN_PORTS_4.
 */
typedef union CMIC_MIIM_SCAN_PORTS_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_scan_ports_4[1];
	uint32_t _cmic_miim_scan_ports_4;
} CMIC_MIIM_SCAN_PORTS_4r_t;

#define CMIC_MIIM_SCAN_PORTS_4r_CLR(r) (r).cmic_miim_scan_ports_4[0] = 0
#define CMIC_MIIM_SCAN_PORTS_4r_SET(r,d) (r).cmic_miim_scan_ports_4[0] = d
#define CMIC_MIIM_SCAN_PORTS_4r_GET(r) (r).cmic_miim_scan_ports_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_SCAN_PORTS_4r_PORT_BITMAPf_GET(r) ((r).cmic_miim_scan_ports_4[0])
#define CMIC_MIIM_SCAN_PORTS_4r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_scan_ports_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_SCAN_PORTS_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_SCAN_PORTS_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_SCAN_PORTS_5r_OFFSET 0x000111a4

#define CMIC_MIIM_SCAN_PORTS_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_SCAN_PORTS_5.
 */
typedef union CMIC_MIIM_SCAN_PORTS_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_scan_ports_5[1];
	uint32_t _cmic_miim_scan_ports_5;
} CMIC_MIIM_SCAN_PORTS_5r_t;

#define CMIC_MIIM_SCAN_PORTS_5r_CLR(r) (r).cmic_miim_scan_ports_5[0] = 0
#define CMIC_MIIM_SCAN_PORTS_5r_SET(r,d) (r).cmic_miim_scan_ports_5[0] = d
#define CMIC_MIIM_SCAN_PORTS_5r_GET(r) (r).cmic_miim_scan_ports_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_SCAN_PORTS_5r_PORT_BITMAPf_GET(r) ((r).cmic_miim_scan_ports_5[0])
#define CMIC_MIIM_SCAN_PORTS_5r_PORT_BITMAPf_SET(r,f) (r).cmic_miim_scan_ports_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_SCAN_PORTS_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_SCAN_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_SCAN_STATUSr_OFFSET 0x0001100c

#define CMIC_MIIM_SCAN_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_SCAN_STATUS.
 */
typedef union CMIC_MIIM_SCAN_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_miim_scan_status[1];
	uint32_t _cmic_miim_scan_status;
} CMIC_MIIM_SCAN_STATUSr_t;

#define CMIC_MIIM_SCAN_STATUSr_CLR(r) (r).cmic_miim_scan_status[0] = 0
#define CMIC_MIIM_SCAN_STATUSr_SET(r,d) (r).cmic_miim_scan_status[0] = d
#define CMIC_MIIM_SCAN_STATUSr_GET(r) (r).cmic_miim_scan_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_SCAN_STATUSr_MIIM_SCAN_BUSYf_GET(r) (((r).cmic_miim_scan_status[0]) & 0x1)
#define CMIC_MIIM_SCAN_STATUSr_MIIM_SCAN_BUSYf_SET(r,f) (r).cmic_miim_scan_status[0]=(((r).cmic_miim_scan_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_MIIM_SCAN_STATUSr_LINK_STATUS_CHANGEf_GET(r) ((((r).cmic_miim_scan_status[0]) >> 4) & 0x1)
#define CMIC_MIIM_SCAN_STATUSr_LINK_STATUS_CHANGEf_SET(r,f) (r).cmic_miim_scan_status[0]=(((r).cmic_miim_scan_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_MIIM_SCAN_STATUSr_TX_PAUSE_STATUS_CHANGEf_GET(r) ((((r).cmic_miim_scan_status[0]) >> 8) & 0x1)
#define CMIC_MIIM_SCAN_STATUSr_TX_PAUSE_STATUS_CHANGEf_SET(r,f) (r).cmic_miim_scan_status[0]=(((r).cmic_miim_scan_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_MIIM_SCAN_STATUSr_RX_PAUSE_STATUS_CHANGEf_GET(r) ((((r).cmic_miim_scan_status[0]) >> 12) & 0x1)
#define CMIC_MIIM_SCAN_STATUSr_RX_PAUSE_STATUS_CHANGEf_SET(r,f) (r).cmic_miim_scan_status[0]=(((r).cmic_miim_scan_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_MIIM_SCAN_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_CAPABILITY_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_0r_OFFSET 0x0001110c

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_CAPABILITY_0.
 */
typedef union CMIC_MIIM_TX_PAUSE_CAPABILITY_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_capability_0[1];
	uint32_t _cmic_miim_tx_pause_capability_0;
} CMIC_MIIM_TX_PAUSE_CAPABILITY_0r_t;

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_0r_CLR(r) (r).cmic_miim_tx_pause_capability_0[0] = 0
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_0r_SET(r,d) (r).cmic_miim_tx_pause_capability_0[0] = d
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_0r_GET(r) (r).cmic_miim_tx_pause_capability_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_0r_TX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_tx_pause_capability_0[0])
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_0r_TX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_tx_pause_capability_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_CAPABILITY_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_CAPABILITY_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_1r_OFFSET 0x00011110

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_CAPABILITY_1.
 */
typedef union CMIC_MIIM_TX_PAUSE_CAPABILITY_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_capability_1[1];
	uint32_t _cmic_miim_tx_pause_capability_1;
} CMIC_MIIM_TX_PAUSE_CAPABILITY_1r_t;

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_1r_CLR(r) (r).cmic_miim_tx_pause_capability_1[0] = 0
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_1r_SET(r,d) (r).cmic_miim_tx_pause_capability_1[0] = d
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_1r_GET(r) (r).cmic_miim_tx_pause_capability_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_1r_TX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_tx_pause_capability_1[0])
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_1r_TX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_tx_pause_capability_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_CAPABILITY_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_CAPABILITY_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_2r_OFFSET 0x00011114

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_CAPABILITY_2.
 */
typedef union CMIC_MIIM_TX_PAUSE_CAPABILITY_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_capability_2[1];
	uint32_t _cmic_miim_tx_pause_capability_2;
} CMIC_MIIM_TX_PAUSE_CAPABILITY_2r_t;

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_2r_CLR(r) (r).cmic_miim_tx_pause_capability_2[0] = 0
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_2r_SET(r,d) (r).cmic_miim_tx_pause_capability_2[0] = d
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_2r_GET(r) (r).cmic_miim_tx_pause_capability_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_2r_TX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_tx_pause_capability_2[0])
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_2r_TX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_tx_pause_capability_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_CAPABILITY_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_CAPABILITY_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_3r_OFFSET 0x0001117c

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_CAPABILITY_3.
 */
typedef union CMIC_MIIM_TX_PAUSE_CAPABILITY_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_capability_3[1];
	uint32_t _cmic_miim_tx_pause_capability_3;
} CMIC_MIIM_TX_PAUSE_CAPABILITY_3r_t;

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_3r_CLR(r) (r).cmic_miim_tx_pause_capability_3[0] = 0
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_3r_SET(r,d) (r).cmic_miim_tx_pause_capability_3[0] = d
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_3r_GET(r) (r).cmic_miim_tx_pause_capability_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_3r_TX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_tx_pause_capability_3[0])
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_3r_TX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_tx_pause_capability_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_CAPABILITY_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_CAPABILITY_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_4r_OFFSET 0x0001122c

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_CAPABILITY_4.
 */
typedef union CMIC_MIIM_TX_PAUSE_CAPABILITY_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_capability_4[1];
	uint32_t _cmic_miim_tx_pause_capability_4;
} CMIC_MIIM_TX_PAUSE_CAPABILITY_4r_t;

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_4r_CLR(r) (r).cmic_miim_tx_pause_capability_4[0] = 0
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_4r_SET(r,d) (r).cmic_miim_tx_pause_capability_4[0] = d
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_4r_GET(r) (r).cmic_miim_tx_pause_capability_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_4r_TX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_tx_pause_capability_4[0])
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_4r_TX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_tx_pause_capability_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_CAPABILITY_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_CAPABILITY_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_5r_OFFSET 0x00011230

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_CAPABILITY_5.
 */
typedef union CMIC_MIIM_TX_PAUSE_CAPABILITY_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_capability_5[1];
	uint32_t _cmic_miim_tx_pause_capability_5;
} CMIC_MIIM_TX_PAUSE_CAPABILITY_5r_t;

#define CMIC_MIIM_TX_PAUSE_CAPABILITY_5r_CLR(r) (r).cmic_miim_tx_pause_capability_5[0] = 0
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_5r_SET(r,d) (r).cmic_miim_tx_pause_capability_5[0] = d
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_5r_GET(r) (r).cmic_miim_tx_pause_capability_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_5r_TX_PAUSE_CAPABILITYf_GET(r) ((r).cmic_miim_tx_pause_capability_5[0])
#define CMIC_MIIM_TX_PAUSE_CAPABILITY_5r_TX_PAUSE_CAPABILITYf_SET(r,f) (r).cmic_miim_tx_pause_capability_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_CAPABILITY_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r_OFFSET 0x00011118

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0.
 */
typedef union CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_override_control_0[1];
	uint32_t _cmic_miim_tx_pause_override_control_0;
} CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r_t;

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r_CLR(r) (r).cmic_miim_tx_pause_override_control_0[0] = 0
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r_SET(r,d) (r).cmic_miim_tx_pause_override_control_0[0] = d
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r_GET(r) (r).cmic_miim_tx_pause_override_control_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r_TX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_tx_pause_override_control_0[0])
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r_TX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_tx_pause_override_control_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r_OFFSET 0x0001111c

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1.
 */
typedef union CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_override_control_1[1];
	uint32_t _cmic_miim_tx_pause_override_control_1;
} CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r_t;

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r_CLR(r) (r).cmic_miim_tx_pause_override_control_1[0] = 0
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r_SET(r,d) (r).cmic_miim_tx_pause_override_control_1[0] = d
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r_GET(r) (r).cmic_miim_tx_pause_override_control_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r_TX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_tx_pause_override_control_1[0])
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r_TX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_tx_pause_override_control_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r_OFFSET 0x00011120

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2.
 */
typedef union CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_override_control_2[1];
	uint32_t _cmic_miim_tx_pause_override_control_2;
} CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r_t;

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r_CLR(r) (r).cmic_miim_tx_pause_override_control_2[0] = 0
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r_SET(r,d) (r).cmic_miim_tx_pause_override_control_2[0] = d
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r_GET(r) (r).cmic_miim_tx_pause_override_control_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r_TX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_tx_pause_override_control_2[0])
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r_TX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_tx_pause_override_control_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r_OFFSET 0x00011180

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3.
 */
typedef union CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_override_control_3[1];
	uint32_t _cmic_miim_tx_pause_override_control_3;
} CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r_t;

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r_CLR(r) (r).cmic_miim_tx_pause_override_control_3[0] = 0
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r_SET(r,d) (r).cmic_miim_tx_pause_override_control_3[0] = d
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r_GET(r) (r).cmic_miim_tx_pause_override_control_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r_TX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_tx_pause_override_control_3[0])
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r_TX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_tx_pause_override_control_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r_OFFSET 0x00011234

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4.
 */
typedef union CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_override_control_4[1];
	uint32_t _cmic_miim_tx_pause_override_control_4;
} CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r_t;

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r_CLR(r) (r).cmic_miim_tx_pause_override_control_4[0] = 0
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r_SET(r,d) (r).cmic_miim_tx_pause_override_control_4[0] = d
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r_GET(r) (r).cmic_miim_tx_pause_override_control_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r_TX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_tx_pause_override_control_4[0])
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r_TX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_tx_pause_override_control_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r_OFFSET 0x00011238

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5.
 */
typedef union CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_override_control_5[1];
	uint32_t _cmic_miim_tx_pause_override_control_5;
} CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r_t;

#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r_CLR(r) (r).cmic_miim_tx_pause_override_control_5[0] = 0
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r_SET(r,d) (r).cmic_miim_tx_pause_override_control_5[0] = d
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r_GET(r) (r).cmic_miim_tx_pause_override_control_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r_TX_PAUSE_OVERRIDE_CONTROLf_GET(r) ((r).cmic_miim_tx_pause_override_control_5[0])
#define CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r_TX_PAUSE_OVERRIDE_CONTROLf_SET(r,f) (r).cmic_miim_tx_pause_override_control_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_OVERRIDE_CONTROL_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_STATUS_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_0r_OFFSET 0x00011030

#define CMIC_MIIM_TX_PAUSE_STATUS_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_STATUS_0.
 */
typedef union CMIC_MIIM_TX_PAUSE_STATUS_0r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_status_0[1];
	uint32_t _cmic_miim_tx_pause_status_0;
} CMIC_MIIM_TX_PAUSE_STATUS_0r_t;

#define CMIC_MIIM_TX_PAUSE_STATUS_0r_CLR(r) (r).cmic_miim_tx_pause_status_0[0] = 0
#define CMIC_MIIM_TX_PAUSE_STATUS_0r_SET(r,d) (r).cmic_miim_tx_pause_status_0[0] = d
#define CMIC_MIIM_TX_PAUSE_STATUS_0r_GET(r) (r).cmic_miim_tx_pause_status_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_0r_PAUSE_STATf_GET(r) ((r).cmic_miim_tx_pause_status_0[0])
#define CMIC_MIIM_TX_PAUSE_STATUS_0r_PAUSE_STATf_SET(r,f) (r).cmic_miim_tx_pause_status_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_STATUS_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_STATUS_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_1r_OFFSET 0x00011034

#define CMIC_MIIM_TX_PAUSE_STATUS_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_STATUS_1.
 */
typedef union CMIC_MIIM_TX_PAUSE_STATUS_1r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_status_1[1];
	uint32_t _cmic_miim_tx_pause_status_1;
} CMIC_MIIM_TX_PAUSE_STATUS_1r_t;

#define CMIC_MIIM_TX_PAUSE_STATUS_1r_CLR(r) (r).cmic_miim_tx_pause_status_1[0] = 0
#define CMIC_MIIM_TX_PAUSE_STATUS_1r_SET(r,d) (r).cmic_miim_tx_pause_status_1[0] = d
#define CMIC_MIIM_TX_PAUSE_STATUS_1r_GET(r) (r).cmic_miim_tx_pause_status_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_1r_PAUSE_STATf_GET(r) ((r).cmic_miim_tx_pause_status_1[0])
#define CMIC_MIIM_TX_PAUSE_STATUS_1r_PAUSE_STATf_SET(r,f) (r).cmic_miim_tx_pause_status_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_STATUS_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_2r_OFFSET 0x00011038

#define CMIC_MIIM_TX_PAUSE_STATUS_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_STATUS_2.
 */
typedef union CMIC_MIIM_TX_PAUSE_STATUS_2r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_status_2[1];
	uint32_t _cmic_miim_tx_pause_status_2;
} CMIC_MIIM_TX_PAUSE_STATUS_2r_t;

#define CMIC_MIIM_TX_PAUSE_STATUS_2r_CLR(r) (r).cmic_miim_tx_pause_status_2[0] = 0
#define CMIC_MIIM_TX_PAUSE_STATUS_2r_SET(r,d) (r).cmic_miim_tx_pause_status_2[0] = d
#define CMIC_MIIM_TX_PAUSE_STATUS_2r_GET(r) (r).cmic_miim_tx_pause_status_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_2r_PAUSE_STATf_GET(r) ((r).cmic_miim_tx_pause_status_2[0])
#define CMIC_MIIM_TX_PAUSE_STATUS_2r_PAUSE_STATf_SET(r,f) (r).cmic_miim_tx_pause_status_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_STATUS_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_STATUS_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_3r_OFFSET 0x00011130

#define CMIC_MIIM_TX_PAUSE_STATUS_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_STATUS_3.
 */
typedef union CMIC_MIIM_TX_PAUSE_STATUS_3r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_status_3[1];
	uint32_t _cmic_miim_tx_pause_status_3;
} CMIC_MIIM_TX_PAUSE_STATUS_3r_t;

#define CMIC_MIIM_TX_PAUSE_STATUS_3r_CLR(r) (r).cmic_miim_tx_pause_status_3[0] = 0
#define CMIC_MIIM_TX_PAUSE_STATUS_3r_SET(r,d) (r).cmic_miim_tx_pause_status_3[0] = d
#define CMIC_MIIM_TX_PAUSE_STATUS_3r_GET(r) (r).cmic_miim_tx_pause_status_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_3r_PAUSE_STATf_GET(r) ((r).cmic_miim_tx_pause_status_3[0])
#define CMIC_MIIM_TX_PAUSE_STATUS_3r_PAUSE_STATf_SET(r,f) (r).cmic_miim_tx_pause_status_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_STATUS_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_STATUS_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_4r_OFFSET 0x00011198

#define CMIC_MIIM_TX_PAUSE_STATUS_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_STATUS_4.
 */
typedef union CMIC_MIIM_TX_PAUSE_STATUS_4r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_status_4[1];
	uint32_t _cmic_miim_tx_pause_status_4;
} CMIC_MIIM_TX_PAUSE_STATUS_4r_t;

#define CMIC_MIIM_TX_PAUSE_STATUS_4r_CLR(r) (r).cmic_miim_tx_pause_status_4[0] = 0
#define CMIC_MIIM_TX_PAUSE_STATUS_4r_SET(r,d) (r).cmic_miim_tx_pause_status_4[0] = d
#define CMIC_MIIM_TX_PAUSE_STATUS_4r_GET(r) (r).cmic_miim_tx_pause_status_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_4r_PAUSE_STATf_GET(r) ((r).cmic_miim_tx_pause_status_4[0])
#define CMIC_MIIM_TX_PAUSE_STATUS_4r_PAUSE_STATf_SET(r,f) (r).cmic_miim_tx_pause_status_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_STATUS_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MIIM_TX_PAUSE_STATUS_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_5r_OFFSET 0x0001119c

#define CMIC_MIIM_TX_PAUSE_STATUS_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MIIM_TX_PAUSE_STATUS_5.
 */
typedef union CMIC_MIIM_TX_PAUSE_STATUS_5r_s {
	uint32_t v[1];
	uint32_t cmic_miim_tx_pause_status_5[1];
	uint32_t _cmic_miim_tx_pause_status_5;
} CMIC_MIIM_TX_PAUSE_STATUS_5r_t;

#define CMIC_MIIM_TX_PAUSE_STATUS_5r_CLR(r) (r).cmic_miim_tx_pause_status_5[0] = 0
#define CMIC_MIIM_TX_PAUSE_STATUS_5r_SET(r,d) (r).cmic_miim_tx_pause_status_5[0] = d
#define CMIC_MIIM_TX_PAUSE_STATUS_5r_GET(r) (r).cmic_miim_tx_pause_status_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MIIM_TX_PAUSE_STATUS_5r_PAUSE_STATf_GET(r) ((r).cmic_miim_tx_pause_status_5[0])
#define CMIC_MIIM_TX_PAUSE_STATUS_5r_PAUSE_STATf_SET(r,f) (r).cmic_miim_tx_pause_status_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MIIM_TX_PAUSE_STATUS_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MISC_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MISC_CONTROLr_OFFSET 0x00010198

#define CMIC_MISC_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MISC_CONTROL.
 */
typedef union CMIC_MISC_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_misc_control[1];
	uint32_t _cmic_misc_control;
} CMIC_MISC_CONTROLr_t;

#define CMIC_MISC_CONTROLr_CLR(r) (r).cmic_misc_control[0] = 0
#define CMIC_MISC_CONTROLr_SET(r,d) (r).cmic_misc_control[0] = d
#define CMIC_MISC_CONTROLr_GET(r) (r).cmic_misc_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MISC_CONTROLr_MISC_CTRLf_GET(r) ((r).cmic_misc_control[0])
#define CMIC_MISC_CONTROLr_MISC_CTRLf_SET(r,f) (r).cmic_misc_control[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_MISC_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MISC_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MISC_STATUSr_OFFSET 0x0001019c

#define CMIC_MISC_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MISC_STATUS.
 */
typedef union CMIC_MISC_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_misc_status[1];
	uint32_t _cmic_misc_status;
} CMIC_MISC_STATUSr_t;

#define CMIC_MISC_STATUSr_CLR(r) (r).cmic_misc_status[0] = 0
#define CMIC_MISC_STATUSr_SET(r,d) (r).cmic_misc_status[0] = d
#define CMIC_MISC_STATUSr_GET(r) (r).cmic_misc_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MISC_STATUSr_ALL_CORE_PLL_TO_CMIC_LOCKf_GET(r) (((r).cmic_misc_status[0]) & 0x1)
#define CMIC_MISC_STATUSr_ALL_CORE_PLL_TO_CMIC_LOCKf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_MISC_STATUSr_RSRV_1f_GET(r) ((((r).cmic_misc_status[0]) >> 1) & 0x7)
#define CMIC_MISC_STATUSr_RSRV_1f_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define CMIC_MISC_STATUSr_PCIE_PHYLINKUPf_GET(r) ((((r).cmic_misc_status[0]) >> 4) & 0x1)
#define CMIC_MISC_STATUSr_PCIE_PHYLINKUPf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_MISC_STATUSr_PCIE_LINK_IN_L23f_GET(r) ((((r).cmic_misc_status[0]) >> 5) & 0x1)
#define CMIC_MISC_STATUSr_PCIE_LINK_IN_L23f_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_MISC_STATUSr_CORE_PLL_MSTR_TO_CMIC_LOCKf_GET(r) ((((r).cmic_misc_status[0]) >> 6) & 0x1)
#define CMIC_MISC_STATUSr_CORE_PLL_MSTR_TO_CMIC_LOCKf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_MISC_STATUSr_CORE_PLL0_TO_CMIC_LOCKf_GET(r) ((((r).cmic_misc_status[0]) >> 7) & 0x1)
#define CMIC_MISC_STATUSr_CORE_PLL0_TO_CMIC_LOCKf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_MISC_STATUSr_CORE_PLL1_TO_CMIC_LOCKf_GET(r) ((((r).cmic_misc_status[0]) >> 8) & 0x1)
#define CMIC_MISC_STATUSr_CORE_PLL1_TO_CMIC_LOCKf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_MISC_STATUSr_CORE_PLL2_TO_CMIC_LOCKf_GET(r) ((((r).cmic_misc_status[0]) >> 9) & 0x1)
#define CMIC_MISC_STATUSr_CORE_PLL2_TO_CMIC_LOCKf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_MISC_STATUSr_CORE_PLL3_TO_CMIC_LOCKf_GET(r) ((((r).cmic_misc_status[0]) >> 10) & 0x1)
#define CMIC_MISC_STATUSr_CORE_PLL3_TO_CMIC_LOCKf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_MISC_STATUSr_CORE_PLL4_TO_CMIC_LOCKf_GET(r) ((((r).cmic_misc_status[0]) >> 11) & 0x1)
#define CMIC_MISC_STATUSr_CORE_PLL4_TO_CMIC_LOCKf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_MISC_STATUSr_CORE_PLL5_TO_CMIC_LOCKf_GET(r) ((((r).cmic_misc_status[0]) >> 12) & 0x1)
#define CMIC_MISC_STATUSr_CORE_PLL5_TO_CMIC_LOCKf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_MISC_STATUSr_AVS_STATUSf_GET(r) ((((r).cmic_misc_status[0]) >> 13) & 0x7)
#define CMIC_MISC_STATUSr_AVS_STATUSf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define CMIC_MISC_STATUSr_PLL_STAT_OUTf_GET(r) ((((r).cmic_misc_status[0]) >> 16) & 0xfff)
#define CMIC_MISC_STATUSr_PLL_STAT_OUTf_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0xfff << 16)) | ((((uint32_t)f) & 0xfff) << 16))
#define CMIC_MISC_STATUSr_RSRV_0f_GET(r) ((((r).cmic_misc_status[0]) >> 28) & 0xf)
#define CMIC_MISC_STATUSr_RSRV_0f_SET(r,f) (r).cmic_misc_status[0]=(((r).cmic_misc_status[0] & ~((uint32_t)0xf << 28)) | ((((uint32_t)f) & 0xf) << 28))

/*******************************************************************************
 * End of 'CMIC_MISC_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MMU_COSLC_COUNT_ADDR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MMU_COSLC_COUNT_ADDRr_OFFSET 0x00023000

#define CMIC_MMU_COSLC_COUNT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MMU_COSLC_COUNT_ADDR.
 */
typedef union CMIC_MMU_COSLC_COUNT_ADDRr_s {
	uint32_t v[1];
	uint32_t cmic_mmu_coslc_count_addr[1];
	uint32_t _cmic_mmu_coslc_count_addr;
} CMIC_MMU_COSLC_COUNT_ADDRr_t;

#define CMIC_MMU_COSLC_COUNT_ADDRr_CLR(r) (r).cmic_mmu_coslc_count_addr[0] = 0
#define CMIC_MMU_COSLC_COUNT_ADDRr_SET(r,d) (r).cmic_mmu_coslc_count_addr[0] = d
#define CMIC_MMU_COSLC_COUNT_ADDRr_GET(r) (r).cmic_mmu_coslc_count_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MMU_COSLC_COUNT_ADDRr_COSf_GET(r) (((r).cmic_mmu_coslc_count_addr[0]) & 0xff)
#define CMIC_MMU_COSLC_COUNT_ADDRr_COSf_SET(r,f) (r).cmic_mmu_coslc_count_addr[0]=(((r).cmic_mmu_coslc_count_addr[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_MMU_COSLC_COUNT_ADDRr_PORT_NUMf_GET(r) ((((r).cmic_mmu_coslc_count_addr[0]) >> 8) & 0xff)
#define CMIC_MMU_COSLC_COUNT_ADDRr_PORT_NUMf_SET(r,f) (r).cmic_mmu_coslc_count_addr[0]=(((r).cmic_mmu_coslc_count_addr[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define CMIC_MMU_COSLC_COUNT_ADDRr_EN_RECURSIVE_COSLC_REQ_TO_MMUf_GET(r) ((((r).cmic_mmu_coslc_count_addr[0]) >> 16) & 0x1)
#define CMIC_MMU_COSLC_COUNT_ADDRr_EN_RECURSIVE_COSLC_REQ_TO_MMUf_SET(r,f) (r).cmic_mmu_coslc_count_addr[0]=(((r).cmic_mmu_coslc_count_addr[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_MMU_COSLC_COUNT_ADDRr_RESERVED_0f_GET(r) ((((r).cmic_mmu_coslc_count_addr[0]) >> 17) & 0x7fff)
#define CMIC_MMU_COSLC_COUNT_ADDRr_RESERVED_0f_SET(r,f) (r).cmic_mmu_coslc_count_addr[0]=(((r).cmic_mmu_coslc_count_addr[0] & ~((uint32_t)0x7fff << 17)) | ((((uint32_t)f) & 0x7fff) << 17))

/*******************************************************************************
 * End of 'CMIC_MMU_COSLC_COUNT_ADDRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_MMU_COSLC_COUNT_DATA
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_MMU_COSLC_COUNT_DATAr_OFFSET 0x00023004

#define CMIC_MMU_COSLC_COUNT_DATAr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_MMU_COSLC_COUNT_DATA.
 */
typedef union CMIC_MMU_COSLC_COUNT_DATAr_s {
	uint32_t v[1];
	uint32_t cmic_mmu_coslc_count_data[1];
	uint32_t _cmic_mmu_coslc_count_data;
} CMIC_MMU_COSLC_COUNT_DATAr_t;

#define CMIC_MMU_COSLC_COUNT_DATAr_CLR(r) (r).cmic_mmu_coslc_count_data[0] = 0
#define CMIC_MMU_COSLC_COUNT_DATAr_SET(r,d) (r).cmic_mmu_coslc_count_data[0] = d
#define CMIC_MMU_COSLC_COUNT_DATAr_GET(r) (r).cmic_mmu_coslc_count_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_MMU_COSLC_COUNT_DATAr_COSLC_COUNTf_GET(r) (((r).cmic_mmu_coslc_count_data[0]) & 0xffff)
#define CMIC_MMU_COSLC_COUNT_DATAr_COSLC_COUNTf_SET(r,f) (r).cmic_mmu_coslc_count_data[0]=(((r).cmic_mmu_coslc_count_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_MMU_COSLC_COUNT_DATAr_RESERVED_0f_GET(r) ((((r).cmic_mmu_coslc_count_data[0]) >> 16) & 0xffff)
#define CMIC_MMU_COSLC_COUNT_DATAr_RESERVED_0f_SET(r,f) (r).cmic_mmu_coslc_count_data[0]=(((r).cmic_mmu_coslc_count_data[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*******************************************************************************
 * End of 'CMIC_MMU_COSLC_COUNT_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_OVERRIDE_STRAP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_OVERRIDE_STRAPr_OFFSET 0x00010234

#define CMIC_OVERRIDE_STRAPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_OVERRIDE_STRAP.
 */
typedef union CMIC_OVERRIDE_STRAPr_s {
	uint32_t v[1];
	uint32_t cmic_override_strap[1];
	uint32_t _cmic_override_strap;
} CMIC_OVERRIDE_STRAPr_t;

#define CMIC_OVERRIDE_STRAPr_CLR(r) (r).cmic_override_strap[0] = 0
#define CMIC_OVERRIDE_STRAPr_SET(r,d) (r).cmic_override_strap[0] = d
#define CMIC_OVERRIDE_STRAPr_GET(r) (r).cmic_override_strap[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_OVERRIDE_STRAPr_I2C_DEBUG_MODEf_GET(r) (((r).cmic_override_strap[0]) & 0x1)
#define CMIC_OVERRIDE_STRAPr_I2C_DEBUG_MODEf_SET(r,f) (r).cmic_override_strap[0]=(((r).cmic_override_strap[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_OVERRIDE_STRAPr_I2C_MASTER_SLAVE_MODEf_GET(r) ((((r).cmic_override_strap[0]) >> 1) & 0x1)
#define CMIC_OVERRIDE_STRAPr_I2C_MASTER_SLAVE_MODEf_SET(r,f) (r).cmic_override_strap[0]=(((r).cmic_override_strap[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_OVERRIDE_STRAPr_SPI_MASTER_SLAVE_MODEf_GET(r) ((((r).cmic_override_strap[0]) >> 2) & 0x1)
#define CMIC_OVERRIDE_STRAPr_SPI_MASTER_SLAVE_MODEf_SET(r,f) (r).cmic_override_strap[0]=(((r).cmic_override_strap[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_OVERRIDE_STRAPr_ENABLE_OVERRIDE_I2C_DEBUG_MODEf_GET(r) ((((r).cmic_override_strap[0]) >> 3) & 0x1)
#define CMIC_OVERRIDE_STRAPr_ENABLE_OVERRIDE_I2C_DEBUG_MODEf_SET(r,f) (r).cmic_override_strap[0]=(((r).cmic_override_strap[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_OVERRIDE_STRAPr_ENABLE_OVERRIDE_I2C_MASTER_SLAVE_MODEf_GET(r) ((((r).cmic_override_strap[0]) >> 4) & 0x1)
#define CMIC_OVERRIDE_STRAPr_ENABLE_OVERRIDE_I2C_MASTER_SLAVE_MODEf_SET(r,f) (r).cmic_override_strap[0]=(((r).cmic_override_strap[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_OVERRIDE_STRAPr_ENABLE_OVERRIDE_SPI_MASTER_SLAVE_MODEf_GET(r) ((((r).cmic_override_strap[0]) >> 5) & 0x1)
#define CMIC_OVERRIDE_STRAPr_ENABLE_OVERRIDE_SPI_MASTER_SLAVE_MODEf_SET(r,f) (r).cmic_override_strap[0]=(((r).cmic_override_strap[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))

/*******************************************************************************
 * End of 'CMIC_OVERRIDE_STRAPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_CONFIGr_OFFSET 0x00010208

#define CMIC_PCIE_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_CONFIG.
 */
typedef union CMIC_PCIE_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_config[1];
	uint32_t _cmic_pcie_config;
} CMIC_PCIE_CONFIGr_t;

#define CMIC_PCIE_CONFIGr_CLR(r) (r).cmic_pcie_config[0] = 0
#define CMIC_PCIE_CONFIGr_SET(r,d) (r).cmic_pcie_config[0] = d
#define CMIC_PCIE_CONFIGr_GET(r) (r).cmic_pcie_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_CONFIGr_ACT_LOW_INTRf_GET(r) (((r).cmic_pcie_config[0]) & 0x1)
#define CMIC_PCIE_CONFIGr_ACT_LOW_INTRf_SET(r,f) (r).cmic_pcie_config[0]=(((r).cmic_pcie_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_CONFIGr_WRITEREQ_PLD_SIZEf_GET(r) ((((r).cmic_pcie_config[0]) >> 1) & 0x3)
#define CMIC_PCIE_CONFIGr_WRITEREQ_PLD_SIZEf_SET(r,f) (r).cmic_pcie_config[0]=(((r).cmic_pcie_config[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define CMIC_PCIE_CONFIGr_READREQ_PLD_SIZEf_GET(r) ((((r).cmic_pcie_config[0]) >> 3) & 0x3)
#define CMIC_PCIE_CONFIGr_READREQ_PLD_SIZEf_SET(r,f) (r).cmic_pcie_config[0]=(((r).cmic_pcie_config[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))

/*******************************************************************************
 * End of 'CMIC_PCIE_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_ERROR_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_ERROR_STATUSr_OFFSET 0x00010214

#define CMIC_PCIE_ERROR_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_ERROR_STATUS.
 */
typedef union CMIC_PCIE_ERROR_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_error_status[1];
	uint32_t _cmic_pcie_error_status;
} CMIC_PCIE_ERROR_STATUSr_t;

#define CMIC_PCIE_ERROR_STATUSr_CLR(r) (r).cmic_pcie_error_status[0] = 0
#define CMIC_PCIE_ERROR_STATUSr_SET(r,d) (r).cmic_pcie_error_status[0] = d
#define CMIC_PCIE_ERROR_STATUSr_GET(r) (r).cmic_pcie_error_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_ERROR_STATUSr_LINK_CRC_ERRORf_GET(r) (((r).cmic_pcie_error_status[0]) & 0x1)
#define CMIC_PCIE_ERROR_STATUSr_LINK_CRC_ERRORf_SET(r,f) (r).cmic_pcie_error_status[0]=(((r).cmic_pcie_error_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_ERROR_STATUSr_END_CRC_ERRORf_GET(r) ((((r).cmic_pcie_error_status[0]) >> 1) & 0x1)
#define CMIC_PCIE_ERROR_STATUSr_END_CRC_ERRORf_SET(r,f) (r).cmic_pcie_error_status[0]=(((r).cmic_pcie_error_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_PCIE_ERROR_STATUSr_OVERFLOW_UNDERFLOW_ERRORf_GET(r) ((((r).cmic_pcie_error_status[0]) >> 2) & 0x1)
#define CMIC_PCIE_ERROR_STATUSr_OVERFLOW_UNDERFLOW_ERRORf_SET(r,f) (r).cmic_pcie_error_status[0]=(((r).cmic_pcie_error_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_PCIE_ERROR_STATUSr_ERROR_ATTENTION_SETf_GET(r) ((((r).cmic_pcie_error_status[0]) >> 3) & 0x1)
#define CMIC_PCIE_ERROR_STATUSr_ERROR_ATTENTION_SETf_SET(r,f) (r).cmic_pcie_error_status[0]=(((r).cmic_pcie_error_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_PCIE_ERROR_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_ERROR_STATUS_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_ERROR_STATUS_CLRr_OFFSET 0x00010218

#define CMIC_PCIE_ERROR_STATUS_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_ERROR_STATUS_CLR.
 */
typedef union CMIC_PCIE_ERROR_STATUS_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_error_status_clr[1];
	uint32_t _cmic_pcie_error_status_clr;
} CMIC_PCIE_ERROR_STATUS_CLRr_t;

#define CMIC_PCIE_ERROR_STATUS_CLRr_CLR(r) (r).cmic_pcie_error_status_clr[0] = 0
#define CMIC_PCIE_ERROR_STATUS_CLRr_SET(r,d) (r).cmic_pcie_error_status_clr[0] = d
#define CMIC_PCIE_ERROR_STATUS_CLRr_GET(r) (r).cmic_pcie_error_status_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_ERROR_STATUS_CLRr_LINK_CRC_ERRORf_GET(r) (((r).cmic_pcie_error_status_clr[0]) & 0x1)
#define CMIC_PCIE_ERROR_STATUS_CLRr_LINK_CRC_ERRORf_SET(r,f) (r).cmic_pcie_error_status_clr[0]=(((r).cmic_pcie_error_status_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_ERROR_STATUS_CLRr_END_CRC_ERRORf_GET(r) ((((r).cmic_pcie_error_status_clr[0]) >> 1) & 0x1)
#define CMIC_PCIE_ERROR_STATUS_CLRr_END_CRC_ERRORf_SET(r,f) (r).cmic_pcie_error_status_clr[0]=(((r).cmic_pcie_error_status_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_PCIE_ERROR_STATUS_CLRr_OVERFLOW_UNDERFLOW_ERRORf_GET(r) ((((r).cmic_pcie_error_status_clr[0]) >> 2) & 0x1)
#define CMIC_PCIE_ERROR_STATUS_CLRr_OVERFLOW_UNDERFLOW_ERRORf_SET(r,f) (r).cmic_pcie_error_status_clr[0]=(((r).cmic_pcie_error_status_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_PCIE_ERROR_STATUS_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_USERIF_PURGE_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_OFFSET 0x00010260

#define CMIC_PCIE_USERIF_PURGE_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_USERIF_PURGE_CONTROL.
 */
typedef union CMIC_PCIE_USERIF_PURGE_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_userif_purge_control[1];
	uint32_t _cmic_pcie_userif_purge_control;
} CMIC_PCIE_USERIF_PURGE_CONTROLr_t;

#define CMIC_PCIE_USERIF_PURGE_CONTROLr_CLR(r) (r).cmic_pcie_userif_purge_control[0] = 0
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_SET(r,d) (r).cmic_pcie_userif_purge_control[0] = d
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_GET(r) (r).cmic_pcie_userif_purge_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PURGE_IF_USERIF_TIMESOUTf_GET(r) (((r).cmic_pcie_userif_purge_control[0]) & 0x1)
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PURGE_IF_USERIF_TIMESOUTf_SET(r,f) (r).cmic_pcie_userif_purge_control[0]=(((r).cmic_pcie_userif_purge_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PURGE_IF_USERIF_RESETf_GET(r) ((((r).cmic_pcie_userif_purge_control[0]) >> 1) & 0x1)
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PURGE_IF_USERIF_RESETf_SET(r,f) (r).cmic_pcie_userif_purge_control[0]=(((r).cmic_pcie_userif_purge_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PURGE_SW_PROGRAMMABLEf_GET(r) ((((r).cmic_pcie_userif_purge_control[0]) >> 2) & 0x1)
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PURGE_SW_PROGRAMMABLEf_SET(r,f) (r).cmic_pcie_userif_purge_control[0]=(((r).cmic_pcie_userif_purge_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PIO_PURGE_SW_PROGRAMMABLEf_GET(r) ((((r).cmic_pcie_userif_purge_control[0]) >> 3) & 0x1)
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PIO_PURGE_SW_PROGRAMMABLEf_SET(r,f) (r).cmic_pcie_userif_purge_control[0]=(((r).cmic_pcie_userif_purge_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PIO_PURGE_IF_USERIF_RESETf_GET(r) ((((r).cmic_pcie_userif_purge_control[0]) >> 4) & 0x1)
#define CMIC_PCIE_USERIF_PURGE_CONTROLr_ENABLE_PIO_PURGE_IF_USERIF_RESETf_SET(r,f) (r).cmic_pcie_userif_purge_control[0]=(((r).cmic_pcie_userif_purge_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))

/*******************************************************************************
 * End of 'CMIC_PCIE_USERIF_PURGE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_USERIF_PURGE_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_USERIF_PURGE_STATUSr_OFFSET 0x00010264

#define CMIC_PCIE_USERIF_PURGE_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_USERIF_PURGE_STATUS.
 */
typedef union CMIC_PCIE_USERIF_PURGE_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_userif_purge_status[1];
	uint32_t _cmic_pcie_userif_purge_status;
} CMIC_PCIE_USERIF_PURGE_STATUSr_t;

#define CMIC_PCIE_USERIF_PURGE_STATUSr_CLR(r) (r).cmic_pcie_userif_purge_status[0] = 0
#define CMIC_PCIE_USERIF_PURGE_STATUSr_SET(r,d) (r).cmic_pcie_userif_purge_status[0] = d
#define CMIC_PCIE_USERIF_PURGE_STATUSr_GET(r) (r).cmic_pcie_userif_purge_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_USERIF_PURGE_STATUSr_PURGE_BECAUSE_OF_TIMEOUT_IN_PROGRESSf_GET(r) (((r).cmic_pcie_userif_purge_status[0]) & 0x1)
#define CMIC_PCIE_USERIF_PURGE_STATUSr_PURGE_BECAUSE_OF_TIMEOUT_IN_PROGRESSf_SET(r,f) (r).cmic_pcie_userif_purge_status[0]=(((r).cmic_pcie_userif_purge_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_USERIF_PURGE_STATUSr_PURGE_BECAUSE_OF_USERIF_RESET_IN_PROGRESSf_GET(r) ((((r).cmic_pcie_userif_purge_status[0]) >> 1) & 0x1)
#define CMIC_PCIE_USERIF_PURGE_STATUSr_PURGE_BECAUSE_OF_USERIF_RESET_IN_PROGRESSf_SET(r,f) (r).cmic_pcie_userif_purge_status[0]=(((r).cmic_pcie_userif_purge_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_PCIE_USERIF_PURGE_STATUSr_PURGE_BECAUSE_OF_SW_PROGRAMME_IN_PROGRESSf_GET(r) ((((r).cmic_pcie_userif_purge_status[0]) >> 2) & 0x1)
#define CMIC_PCIE_USERIF_PURGE_STATUSr_PURGE_BECAUSE_OF_SW_PROGRAMME_IN_PROGRESSf_SET(r,f) (r).cmic_pcie_userif_purge_status[0]=(((r).cmic_pcie_userif_purge_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_PCIE_USERIF_PURGE_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_USERIF_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_USERIF_STATUSr_OFFSET 0x00010254

#define CMIC_PCIE_USERIF_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_USERIF_STATUS.
 */
typedef union CMIC_PCIE_USERIF_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_userif_status[1];
	uint32_t _cmic_pcie_userif_status;
} CMIC_PCIE_USERIF_STATUSr_t;

#define CMIC_PCIE_USERIF_STATUSr_CLR(r) (r).cmic_pcie_userif_status[0] = 0
#define CMIC_PCIE_USERIF_STATUSr_SET(r,d) (r).cmic_pcie_userif_status[0] = d
#define CMIC_PCIE_USERIF_STATUSr_GET(r) (r).cmic_pcie_userif_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_USERIF_STATUSr_USERIF_TIMEDOUTf_GET(r) (((r).cmic_pcie_userif_status[0]) & 0x1)
#define CMIC_PCIE_USERIF_STATUSr_USERIF_TIMEDOUTf_SET(r,f) (r).cmic_pcie_userif_status[0]=(((r).cmic_pcie_userif_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_USERIF_STATUSr_USERIF_RESETf_GET(r) ((((r).cmic_pcie_userif_status[0]) >> 1) & 0x1)
#define CMIC_PCIE_USERIF_STATUSr_USERIF_RESETf_SET(r,f) (r).cmic_pcie_userif_status[0]=(((r).cmic_pcie_userif_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_PCIE_USERIF_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_USERIF_STATUS_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_USERIF_STATUS_CLRr_OFFSET 0x00010258

#define CMIC_PCIE_USERIF_STATUS_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_USERIF_STATUS_CLR.
 */
typedef union CMIC_PCIE_USERIF_STATUS_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_userif_status_clr[1];
	uint32_t _cmic_pcie_userif_status_clr;
} CMIC_PCIE_USERIF_STATUS_CLRr_t;

#define CMIC_PCIE_USERIF_STATUS_CLRr_CLR(r) (r).cmic_pcie_userif_status_clr[0] = 0
#define CMIC_PCIE_USERIF_STATUS_CLRr_SET(r,d) (r).cmic_pcie_userif_status_clr[0] = d
#define CMIC_PCIE_USERIF_STATUS_CLRr_GET(r) (r).cmic_pcie_userif_status_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_USERIF_STATUS_CLRr_USERIF_TIMEDOUTf_GET(r) (((r).cmic_pcie_userif_status_clr[0]) & 0x1)
#define CMIC_PCIE_USERIF_STATUS_CLRr_USERIF_TIMEDOUTf_SET(r,f) (r).cmic_pcie_userif_status_clr[0]=(((r).cmic_pcie_userif_status_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_USERIF_STATUS_CLRr_USERIF_RESETf_GET(r) ((((r).cmic_pcie_userif_status_clr[0]) >> 1) & 0x1)
#define CMIC_PCIE_USERIF_STATUS_CLRr_USERIF_RESETf_SET(r,f) (r).cmic_pcie_userif_status_clr[0]=(((r).cmic_pcie_userif_status_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_PCIE_USERIF_STATUS_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_USERIF_STATUS_MASK
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_USERIF_STATUS_MASKr_OFFSET 0x0001025c

#define CMIC_PCIE_USERIF_STATUS_MASKr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_USERIF_STATUS_MASK.
 */
typedef union CMIC_PCIE_USERIF_STATUS_MASKr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_userif_status_mask[1];
	uint32_t _cmic_pcie_userif_status_mask;
} CMIC_PCIE_USERIF_STATUS_MASKr_t;

#define CMIC_PCIE_USERIF_STATUS_MASKr_CLR(r) (r).cmic_pcie_userif_status_mask[0] = 0
#define CMIC_PCIE_USERIF_STATUS_MASKr_SET(r,d) (r).cmic_pcie_userif_status_mask[0] = d
#define CMIC_PCIE_USERIF_STATUS_MASKr_GET(r) (r).cmic_pcie_userif_status_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_USERIF_STATUS_MASKr_USERIF_TIMEDOUTf_GET(r) (((r).cmic_pcie_userif_status_mask[0]) & 0x1)
#define CMIC_PCIE_USERIF_STATUS_MASKr_USERIF_TIMEDOUTf_SET(r,f) (r).cmic_pcie_userif_status_mask[0]=(((r).cmic_pcie_userif_status_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PCIE_USERIF_STATUS_MASKr_USERIF_RESETf_GET(r) ((((r).cmic_pcie_userif_status_mask[0]) >> 1) & 0x1)
#define CMIC_PCIE_USERIF_STATUS_MASKr_USERIF_RESETf_SET(r,f) (r).cmic_pcie_userif_status_mask[0]=(((r).cmic_pcie_userif_status_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_PCIE_USERIF_STATUS_MASKr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PCIE_USERIF_TIMEOUT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PCIE_USERIF_TIMEOUTr_OFFSET 0x00010250

#define CMIC_PCIE_USERIF_TIMEOUTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PCIE_USERIF_TIMEOUT.
 */
typedef union CMIC_PCIE_USERIF_TIMEOUTr_s {
	uint32_t v[1];
	uint32_t cmic_pcie_userif_timeout[1];
	uint32_t _cmic_pcie_userif_timeout;
} CMIC_PCIE_USERIF_TIMEOUTr_t;

#define CMIC_PCIE_USERIF_TIMEOUTr_CLR(r) (r).cmic_pcie_userif_timeout[0] = 0
#define CMIC_PCIE_USERIF_TIMEOUTr_SET(r,d) (r).cmic_pcie_userif_timeout[0] = d
#define CMIC_PCIE_USERIF_TIMEOUTr_GET(r) (r).cmic_pcie_userif_timeout[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PCIE_USERIF_TIMEOUTr_TIMEOUTf_GET(r) ((r).cmic_pcie_userif_timeout[0])
#define CMIC_PCIE_USERIF_TIMEOUTr_TIMEOUTf_SET(r,f) (r).cmic_pcie_userif_timeout[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PCIE_USERIF_TIMEOUTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AR_ARB_MI0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AR_ARB_MI0r_OFFSET 0x0001c408

#define CMIC_PIO_IC_AR_ARB_MI0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AR_ARB_MI0.
 */
typedef union CMIC_PIO_IC_AR_ARB_MI0r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_ar_arb_mi0[1];
	uint32_t _cmic_pio_ic_ar_arb_mi0;
} CMIC_PIO_IC_AR_ARB_MI0r_t;

#define CMIC_PIO_IC_AR_ARB_MI0r_CLR(r) (r).cmic_pio_ic_ar_arb_mi0[0] = 0
#define CMIC_PIO_IC_AR_ARB_MI0r_SET(r,d) (r).cmic_pio_ic_ar_arb_mi0[0] = d
#define CMIC_PIO_IC_AR_ARB_MI0r_GET(r) (r).cmic_pio_ic_ar_arb_mi0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AR_ARB_MI0r_PIO_IC_AR_ARB_MI0f_GET(r) ((r).cmic_pio_ic_ar_arb_mi0[0])
#define CMIC_PIO_IC_AR_ARB_MI0r_PIO_IC_AR_ARB_MI0f_SET(r,f) (r).cmic_pio_ic_ar_arb_mi0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AR_ARB_MI0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AR_ARB_MI1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AR_ARB_MI1r_OFFSET 0x0001c428

#define CMIC_PIO_IC_AR_ARB_MI1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AR_ARB_MI1.
 */
typedef union CMIC_PIO_IC_AR_ARB_MI1r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_ar_arb_mi1[1];
	uint32_t _cmic_pio_ic_ar_arb_mi1;
} CMIC_PIO_IC_AR_ARB_MI1r_t;

#define CMIC_PIO_IC_AR_ARB_MI1r_CLR(r) (r).cmic_pio_ic_ar_arb_mi1[0] = 0
#define CMIC_PIO_IC_AR_ARB_MI1r_SET(r,d) (r).cmic_pio_ic_ar_arb_mi1[0] = d
#define CMIC_PIO_IC_AR_ARB_MI1r_GET(r) (r).cmic_pio_ic_ar_arb_mi1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AR_ARB_MI1r_PIO_IC_AR_ARB_MI1f_GET(r) ((r).cmic_pio_ic_ar_arb_mi1[0])
#define CMIC_PIO_IC_AR_ARB_MI1r_PIO_IC_AR_ARB_MI1f_SET(r,f) (r).cmic_pio_ic_ar_arb_mi1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AR_ARB_MI1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AR_ARB_MI2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AR_ARB_MI2r_OFFSET 0x0001c448

#define CMIC_PIO_IC_AR_ARB_MI2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AR_ARB_MI2.
 */
typedef union CMIC_PIO_IC_AR_ARB_MI2r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_ar_arb_mi2[1];
	uint32_t _cmic_pio_ic_ar_arb_mi2;
} CMIC_PIO_IC_AR_ARB_MI2r_t;

#define CMIC_PIO_IC_AR_ARB_MI2r_CLR(r) (r).cmic_pio_ic_ar_arb_mi2[0] = 0
#define CMIC_PIO_IC_AR_ARB_MI2r_SET(r,d) (r).cmic_pio_ic_ar_arb_mi2[0] = d
#define CMIC_PIO_IC_AR_ARB_MI2r_GET(r) (r).cmic_pio_ic_ar_arb_mi2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AR_ARB_MI2r_PIO_IC_AR_ARB_MI2f_GET(r) ((r).cmic_pio_ic_ar_arb_mi2[0])
#define CMIC_PIO_IC_AR_ARB_MI2r_PIO_IC_AR_ARB_MI2f_SET(r,f) (r).cmic_pio_ic_ar_arb_mi2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AR_ARB_MI2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AR_ARB_MI3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AR_ARB_MI3r_OFFSET 0x0001c468

#define CMIC_PIO_IC_AR_ARB_MI3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AR_ARB_MI3.
 */
typedef union CMIC_PIO_IC_AR_ARB_MI3r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_ar_arb_mi3[1];
	uint32_t _cmic_pio_ic_ar_arb_mi3;
} CMIC_PIO_IC_AR_ARB_MI3r_t;

#define CMIC_PIO_IC_AR_ARB_MI3r_CLR(r) (r).cmic_pio_ic_ar_arb_mi3[0] = 0
#define CMIC_PIO_IC_AR_ARB_MI3r_SET(r,d) (r).cmic_pio_ic_ar_arb_mi3[0] = d
#define CMIC_PIO_IC_AR_ARB_MI3r_GET(r) (r).cmic_pio_ic_ar_arb_mi3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AR_ARB_MI3r_PIO_IC_AR_ARB_MI3f_GET(r) ((r).cmic_pio_ic_ar_arb_mi3[0])
#define CMIC_PIO_IC_AR_ARB_MI3r_PIO_IC_AR_ARB_MI3f_SET(r,f) (r).cmic_pio_ic_ar_arb_mi3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AR_ARB_MI3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AR_ARB_MI4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AR_ARB_MI4r_OFFSET 0x0001c488

#define CMIC_PIO_IC_AR_ARB_MI4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AR_ARB_MI4.
 */
typedef union CMIC_PIO_IC_AR_ARB_MI4r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_ar_arb_mi4[1];
	uint32_t _cmic_pio_ic_ar_arb_mi4;
} CMIC_PIO_IC_AR_ARB_MI4r_t;

#define CMIC_PIO_IC_AR_ARB_MI4r_CLR(r) (r).cmic_pio_ic_ar_arb_mi4[0] = 0
#define CMIC_PIO_IC_AR_ARB_MI4r_SET(r,d) (r).cmic_pio_ic_ar_arb_mi4[0] = d
#define CMIC_PIO_IC_AR_ARB_MI4r_GET(r) (r).cmic_pio_ic_ar_arb_mi4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AR_ARB_MI4r_PIO_IC_AR_ARB_MI4f_GET(r) ((r).cmic_pio_ic_ar_arb_mi4[0])
#define CMIC_PIO_IC_AR_ARB_MI4r_PIO_IC_AR_ARB_MI4f_SET(r,f) (r).cmic_pio_ic_ar_arb_mi4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AR_ARB_MI4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AR_ARB_MI5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AR_ARB_MI5r_OFFSET 0x0001c4a8

#define CMIC_PIO_IC_AR_ARB_MI5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AR_ARB_MI5.
 */
typedef union CMIC_PIO_IC_AR_ARB_MI5r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_ar_arb_mi5[1];
	uint32_t _cmic_pio_ic_ar_arb_mi5;
} CMIC_PIO_IC_AR_ARB_MI5r_t;

#define CMIC_PIO_IC_AR_ARB_MI5r_CLR(r) (r).cmic_pio_ic_ar_arb_mi5[0] = 0
#define CMIC_PIO_IC_AR_ARB_MI5r_SET(r,d) (r).cmic_pio_ic_ar_arb_mi5[0] = d
#define CMIC_PIO_IC_AR_ARB_MI5r_GET(r) (r).cmic_pio_ic_ar_arb_mi5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AR_ARB_MI5r_PIO_IC_AR_ARB_MI5f_GET(r) ((r).cmic_pio_ic_ar_arb_mi5[0])
#define CMIC_PIO_IC_AR_ARB_MI5r_PIO_IC_AR_ARB_MI5f_SET(r,f) (r).cmic_pio_ic_ar_arb_mi5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AR_ARB_MI5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AR_ARB_MI6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AR_ARB_MI6r_OFFSET 0x0001c4c8

#define CMIC_PIO_IC_AR_ARB_MI6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AR_ARB_MI6.
 */
typedef union CMIC_PIO_IC_AR_ARB_MI6r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_ar_arb_mi6[1];
	uint32_t _cmic_pio_ic_ar_arb_mi6;
} CMIC_PIO_IC_AR_ARB_MI6r_t;

#define CMIC_PIO_IC_AR_ARB_MI6r_CLR(r) (r).cmic_pio_ic_ar_arb_mi6[0] = 0
#define CMIC_PIO_IC_AR_ARB_MI6r_SET(r,d) (r).cmic_pio_ic_ar_arb_mi6[0] = d
#define CMIC_PIO_IC_AR_ARB_MI6r_GET(r) (r).cmic_pio_ic_ar_arb_mi6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AR_ARB_MI6r_PIO_IC_AR_ARB_MI6f_GET(r) ((r).cmic_pio_ic_ar_arb_mi6[0])
#define CMIC_PIO_IC_AR_ARB_MI6r_PIO_IC_AR_ARB_MI6f_SET(r,f) (r).cmic_pio_ic_ar_arb_mi6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AR_ARB_MI6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AR_ARB_MI7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AR_ARB_MI7r_OFFSET 0x0001c4e8

#define CMIC_PIO_IC_AR_ARB_MI7r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AR_ARB_MI7.
 */
typedef union CMIC_PIO_IC_AR_ARB_MI7r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_ar_arb_mi7[1];
	uint32_t _cmic_pio_ic_ar_arb_mi7;
} CMIC_PIO_IC_AR_ARB_MI7r_t;

#define CMIC_PIO_IC_AR_ARB_MI7r_CLR(r) (r).cmic_pio_ic_ar_arb_mi7[0] = 0
#define CMIC_PIO_IC_AR_ARB_MI7r_SET(r,d) (r).cmic_pio_ic_ar_arb_mi7[0] = d
#define CMIC_PIO_IC_AR_ARB_MI7r_GET(r) (r).cmic_pio_ic_ar_arb_mi7[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AR_ARB_MI7r_PIO_IC_AR_ARB_MI7f_GET(r) ((r).cmic_pio_ic_ar_arb_mi7[0])
#define CMIC_PIO_IC_AR_ARB_MI7r_PIO_IC_AR_ARB_MI7f_SET(r,f) (r).cmic_pio_ic_ar_arb_mi7[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AR_ARB_MI7r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AW_ARB_MI0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AW_ARB_MI0r_OFFSET 0x0001c40c

#define CMIC_PIO_IC_AW_ARB_MI0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AW_ARB_MI0.
 */
typedef union CMIC_PIO_IC_AW_ARB_MI0r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_aw_arb_mi0[1];
	uint32_t _cmic_pio_ic_aw_arb_mi0;
} CMIC_PIO_IC_AW_ARB_MI0r_t;

#define CMIC_PIO_IC_AW_ARB_MI0r_CLR(r) (r).cmic_pio_ic_aw_arb_mi0[0] = 0
#define CMIC_PIO_IC_AW_ARB_MI0r_SET(r,d) (r).cmic_pio_ic_aw_arb_mi0[0] = d
#define CMIC_PIO_IC_AW_ARB_MI0r_GET(r) (r).cmic_pio_ic_aw_arb_mi0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AW_ARB_MI0r_PIO_IC_AW_ARB_MI0f_GET(r) ((r).cmic_pio_ic_aw_arb_mi0[0])
#define CMIC_PIO_IC_AW_ARB_MI0r_PIO_IC_AW_ARB_MI0f_SET(r,f) (r).cmic_pio_ic_aw_arb_mi0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AW_ARB_MI0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AW_ARB_MI1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AW_ARB_MI1r_OFFSET 0x0001c42c

#define CMIC_PIO_IC_AW_ARB_MI1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AW_ARB_MI1.
 */
typedef union CMIC_PIO_IC_AW_ARB_MI1r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_aw_arb_mi1[1];
	uint32_t _cmic_pio_ic_aw_arb_mi1;
} CMIC_PIO_IC_AW_ARB_MI1r_t;

#define CMIC_PIO_IC_AW_ARB_MI1r_CLR(r) (r).cmic_pio_ic_aw_arb_mi1[0] = 0
#define CMIC_PIO_IC_AW_ARB_MI1r_SET(r,d) (r).cmic_pio_ic_aw_arb_mi1[0] = d
#define CMIC_PIO_IC_AW_ARB_MI1r_GET(r) (r).cmic_pio_ic_aw_arb_mi1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AW_ARB_MI1r_PIO_IC_AW_ARB_MI1f_GET(r) ((r).cmic_pio_ic_aw_arb_mi1[0])
#define CMIC_PIO_IC_AW_ARB_MI1r_PIO_IC_AW_ARB_MI1f_SET(r,f) (r).cmic_pio_ic_aw_arb_mi1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AW_ARB_MI1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AW_ARB_MI2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AW_ARB_MI2r_OFFSET 0x0001c44c

#define CMIC_PIO_IC_AW_ARB_MI2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AW_ARB_MI2.
 */
typedef union CMIC_PIO_IC_AW_ARB_MI2r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_aw_arb_mi2[1];
	uint32_t _cmic_pio_ic_aw_arb_mi2;
} CMIC_PIO_IC_AW_ARB_MI2r_t;

#define CMIC_PIO_IC_AW_ARB_MI2r_CLR(r) (r).cmic_pio_ic_aw_arb_mi2[0] = 0
#define CMIC_PIO_IC_AW_ARB_MI2r_SET(r,d) (r).cmic_pio_ic_aw_arb_mi2[0] = d
#define CMIC_PIO_IC_AW_ARB_MI2r_GET(r) (r).cmic_pio_ic_aw_arb_mi2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AW_ARB_MI2r_PIO_IC_AW_ARB_MI2f_GET(r) ((r).cmic_pio_ic_aw_arb_mi2[0])
#define CMIC_PIO_IC_AW_ARB_MI2r_PIO_IC_AW_ARB_MI2f_SET(r,f) (r).cmic_pio_ic_aw_arb_mi2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AW_ARB_MI2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AW_ARB_MI3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AW_ARB_MI3r_OFFSET 0x0001c46c

#define CMIC_PIO_IC_AW_ARB_MI3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AW_ARB_MI3.
 */
typedef union CMIC_PIO_IC_AW_ARB_MI3r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_aw_arb_mi3[1];
	uint32_t _cmic_pio_ic_aw_arb_mi3;
} CMIC_PIO_IC_AW_ARB_MI3r_t;

#define CMIC_PIO_IC_AW_ARB_MI3r_CLR(r) (r).cmic_pio_ic_aw_arb_mi3[0] = 0
#define CMIC_PIO_IC_AW_ARB_MI3r_SET(r,d) (r).cmic_pio_ic_aw_arb_mi3[0] = d
#define CMIC_PIO_IC_AW_ARB_MI3r_GET(r) (r).cmic_pio_ic_aw_arb_mi3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AW_ARB_MI3r_PIO_IC_AW_ARB_MI3f_GET(r) ((r).cmic_pio_ic_aw_arb_mi3[0])
#define CMIC_PIO_IC_AW_ARB_MI3r_PIO_IC_AW_ARB_MI3f_SET(r,f) (r).cmic_pio_ic_aw_arb_mi3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AW_ARB_MI3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AW_ARB_MI4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AW_ARB_MI4r_OFFSET 0x0001c48c

#define CMIC_PIO_IC_AW_ARB_MI4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AW_ARB_MI4.
 */
typedef union CMIC_PIO_IC_AW_ARB_MI4r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_aw_arb_mi4[1];
	uint32_t _cmic_pio_ic_aw_arb_mi4;
} CMIC_PIO_IC_AW_ARB_MI4r_t;

#define CMIC_PIO_IC_AW_ARB_MI4r_CLR(r) (r).cmic_pio_ic_aw_arb_mi4[0] = 0
#define CMIC_PIO_IC_AW_ARB_MI4r_SET(r,d) (r).cmic_pio_ic_aw_arb_mi4[0] = d
#define CMIC_PIO_IC_AW_ARB_MI4r_GET(r) (r).cmic_pio_ic_aw_arb_mi4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AW_ARB_MI4r_PIO_IC_AW_ARB_MI4f_GET(r) ((r).cmic_pio_ic_aw_arb_mi4[0])
#define CMIC_PIO_IC_AW_ARB_MI4r_PIO_IC_AW_ARB_MI4f_SET(r,f) (r).cmic_pio_ic_aw_arb_mi4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AW_ARB_MI4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AW_ARB_MI5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AW_ARB_MI5r_OFFSET 0x0001c4ac

#define CMIC_PIO_IC_AW_ARB_MI5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AW_ARB_MI5.
 */
typedef union CMIC_PIO_IC_AW_ARB_MI5r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_aw_arb_mi5[1];
	uint32_t _cmic_pio_ic_aw_arb_mi5;
} CMIC_PIO_IC_AW_ARB_MI5r_t;

#define CMIC_PIO_IC_AW_ARB_MI5r_CLR(r) (r).cmic_pio_ic_aw_arb_mi5[0] = 0
#define CMIC_PIO_IC_AW_ARB_MI5r_SET(r,d) (r).cmic_pio_ic_aw_arb_mi5[0] = d
#define CMIC_PIO_IC_AW_ARB_MI5r_GET(r) (r).cmic_pio_ic_aw_arb_mi5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AW_ARB_MI5r_PIO_IC_AW_ARB_MI5f_GET(r) ((r).cmic_pio_ic_aw_arb_mi5[0])
#define CMIC_PIO_IC_AW_ARB_MI5r_PIO_IC_AW_ARB_MI5f_SET(r,f) (r).cmic_pio_ic_aw_arb_mi5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AW_ARB_MI5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AW_ARB_MI6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AW_ARB_MI6r_OFFSET 0x0001c4cc

#define CMIC_PIO_IC_AW_ARB_MI6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AW_ARB_MI6.
 */
typedef union CMIC_PIO_IC_AW_ARB_MI6r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_aw_arb_mi6[1];
	uint32_t _cmic_pio_ic_aw_arb_mi6;
} CMIC_PIO_IC_AW_ARB_MI6r_t;

#define CMIC_PIO_IC_AW_ARB_MI6r_CLR(r) (r).cmic_pio_ic_aw_arb_mi6[0] = 0
#define CMIC_PIO_IC_AW_ARB_MI6r_SET(r,d) (r).cmic_pio_ic_aw_arb_mi6[0] = d
#define CMIC_PIO_IC_AW_ARB_MI6r_GET(r) (r).cmic_pio_ic_aw_arb_mi6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AW_ARB_MI6r_PIO_IC_AW_ARB_MI6f_GET(r) ((r).cmic_pio_ic_aw_arb_mi6[0])
#define CMIC_PIO_IC_AW_ARB_MI6r_PIO_IC_AW_ARB_MI6f_SET(r,f) (r).cmic_pio_ic_aw_arb_mi6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AW_ARB_MI6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_AW_ARB_MI7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_AW_ARB_MI7r_OFFSET 0x0001c4ec

#define CMIC_PIO_IC_AW_ARB_MI7r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_AW_ARB_MI7.
 */
typedef union CMIC_PIO_IC_AW_ARB_MI7r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_aw_arb_mi7[1];
	uint32_t _cmic_pio_ic_aw_arb_mi7;
} CMIC_PIO_IC_AW_ARB_MI7r_t;

#define CMIC_PIO_IC_AW_ARB_MI7r_CLR(r) (r).cmic_pio_ic_aw_arb_mi7[0] = 0
#define CMIC_PIO_IC_AW_ARB_MI7r_SET(r,d) (r).cmic_pio_ic_aw_arb_mi7[0] = d
#define CMIC_PIO_IC_AW_ARB_MI7r_GET(r) (r).cmic_pio_ic_aw_arb_mi7[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_AW_ARB_MI7r_PIO_IC_AW_ARB_MI7f_GET(r) ((r).cmic_pio_ic_aw_arb_mi7[0])
#define CMIC_PIO_IC_AW_ARB_MI7r_PIO_IC_AW_ARB_MI7f_SET(r,f) (r).cmic_pio_ic_aw_arb_mi7[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_AW_ARB_MI7r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_CFG_REG_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_CFG_REG_0r_OFFSET 0x0001cfc0

#define CMIC_PIO_IC_CFG_REG_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_CFG_REG_0.
 */
typedef union CMIC_PIO_IC_CFG_REG_0r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_cfg_reg_0[1];
	uint32_t _cmic_pio_ic_cfg_reg_0;
} CMIC_PIO_IC_CFG_REG_0r_t;

#define CMIC_PIO_IC_CFG_REG_0r_CLR(r) (r).cmic_pio_ic_cfg_reg_0[0] = 0
#define CMIC_PIO_IC_CFG_REG_0r_SET(r,d) (r).cmic_pio_ic_cfg_reg_0[0] = d
#define CMIC_PIO_IC_CFG_REG_0r_GET(r) (r).cmic_pio_ic_cfg_reg_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_CFG_REG_0r_PIO_IC_CFG_REG_0f_GET(r) ((r).cmic_pio_ic_cfg_reg_0[0])
#define CMIC_PIO_IC_CFG_REG_0r_PIO_IC_CFG_REG_0f_SET(r,f) (r).cmic_pio_ic_cfg_reg_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_CFG_REG_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_CFG_REG_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_CFG_REG_1r_OFFSET 0x0001cfc4

#define CMIC_PIO_IC_CFG_REG_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_CFG_REG_1.
 */
typedef union CMIC_PIO_IC_CFG_REG_1r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_cfg_reg_1[1];
	uint32_t _cmic_pio_ic_cfg_reg_1;
} CMIC_PIO_IC_CFG_REG_1r_t;

#define CMIC_PIO_IC_CFG_REG_1r_CLR(r) (r).cmic_pio_ic_cfg_reg_1[0] = 0
#define CMIC_PIO_IC_CFG_REG_1r_SET(r,d) (r).cmic_pio_ic_cfg_reg_1[0] = d
#define CMIC_PIO_IC_CFG_REG_1r_GET(r) (r).cmic_pio_ic_cfg_reg_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_CFG_REG_1r_PIO_IC_CFG_REG_1f_GET(r) ((r).cmic_pio_ic_cfg_reg_1[0])
#define CMIC_PIO_IC_CFG_REG_1r_PIO_IC_CFG_REG_1f_SET(r,f) (r).cmic_pio_ic_cfg_reg_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_CFG_REG_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_CFG_REG_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_CFG_REG_2r_OFFSET 0x0001cfcc

#define CMIC_PIO_IC_CFG_REG_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_CFG_REG_2.
 */
typedef union CMIC_PIO_IC_CFG_REG_2r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_cfg_reg_2[1];
	uint32_t _cmic_pio_ic_cfg_reg_2;
} CMIC_PIO_IC_CFG_REG_2r_t;

#define CMIC_PIO_IC_CFG_REG_2r_CLR(r) (r).cmic_pio_ic_cfg_reg_2[0] = 0
#define CMIC_PIO_IC_CFG_REG_2r_SET(r,d) (r).cmic_pio_ic_cfg_reg_2[0] = d
#define CMIC_PIO_IC_CFG_REG_2r_GET(r) (r).cmic_pio_ic_cfg_reg_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_CFG_REG_2r_PIO_IC_CFG_REG_3f_GET(r) ((r).cmic_pio_ic_cfg_reg_2[0])
#define CMIC_PIO_IC_CFG_REG_2r_PIO_IC_CFG_REG_3f_SET(r,f) (r).cmic_pio_ic_cfg_reg_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_CFG_REG_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_ID_REG_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_ID_REG_0r_OFFSET 0x0001cff0

#define CMIC_PIO_IC_ID_REG_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_ID_REG_0.
 */
typedef union CMIC_PIO_IC_ID_REG_0r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_id_reg_0[1];
	uint32_t _cmic_pio_ic_id_reg_0;
} CMIC_PIO_IC_ID_REG_0r_t;

#define CMIC_PIO_IC_ID_REG_0r_CLR(r) (r).cmic_pio_ic_id_reg_0[0] = 0
#define CMIC_PIO_IC_ID_REG_0r_SET(r,d) (r).cmic_pio_ic_id_reg_0[0] = d
#define CMIC_PIO_IC_ID_REG_0r_GET(r) (r).cmic_pio_ic_id_reg_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_ID_REG_0r_PIO_IC_ID_REG_0f_GET(r) ((r).cmic_pio_ic_id_reg_0[0])
#define CMIC_PIO_IC_ID_REG_0r_PIO_IC_ID_REG_0f_SET(r,f) (r).cmic_pio_ic_id_reg_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_ID_REG_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_ID_REG_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_ID_REG_1r_OFFSET 0x0001cff4

#define CMIC_PIO_IC_ID_REG_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_ID_REG_1.
 */
typedef union CMIC_PIO_IC_ID_REG_1r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_id_reg_1[1];
	uint32_t _cmic_pio_ic_id_reg_1;
} CMIC_PIO_IC_ID_REG_1r_t;

#define CMIC_PIO_IC_ID_REG_1r_CLR(r) (r).cmic_pio_ic_id_reg_1[0] = 0
#define CMIC_PIO_IC_ID_REG_1r_SET(r,d) (r).cmic_pio_ic_id_reg_1[0] = d
#define CMIC_PIO_IC_ID_REG_1r_GET(r) (r).cmic_pio_ic_id_reg_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_ID_REG_1r_PIO_IC_ID_REG_1f_GET(r) ((r).cmic_pio_ic_id_reg_1[0])
#define CMIC_PIO_IC_ID_REG_1r_PIO_IC_ID_REG_1f_SET(r,f) (r).cmic_pio_ic_id_reg_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_ID_REG_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_ID_REG_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_ID_REG_2r_OFFSET 0x0001cff8

#define CMIC_PIO_IC_ID_REG_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_ID_REG_2.
 */
typedef union CMIC_PIO_IC_ID_REG_2r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_id_reg_2[1];
	uint32_t _cmic_pio_ic_id_reg_2;
} CMIC_PIO_IC_ID_REG_2r_t;

#define CMIC_PIO_IC_ID_REG_2r_CLR(r) (r).cmic_pio_ic_id_reg_2[0] = 0
#define CMIC_PIO_IC_ID_REG_2r_SET(r,d) (r).cmic_pio_ic_id_reg_2[0] = d
#define CMIC_PIO_IC_ID_REG_2r_GET(r) (r).cmic_pio_ic_id_reg_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_ID_REG_2r_PIO_IC_ID_REG_2f_GET(r) ((r).cmic_pio_ic_id_reg_2[0])
#define CMIC_PIO_IC_ID_REG_2r_PIO_IC_ID_REG_2f_SET(r,f) (r).cmic_pio_ic_id_reg_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_ID_REG_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_ID_REG_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_ID_REG_3r_OFFSET 0x0001cffc

#define CMIC_PIO_IC_ID_REG_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_ID_REG_3.
 */
typedef union CMIC_PIO_IC_ID_REG_3r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_id_reg_3[1];
	uint32_t _cmic_pio_ic_id_reg_3;
} CMIC_PIO_IC_ID_REG_3r_t;

#define CMIC_PIO_IC_ID_REG_3r_CLR(r) (r).cmic_pio_ic_id_reg_3[0] = 0
#define CMIC_PIO_IC_ID_REG_3r_SET(r,d) (r).cmic_pio_ic_id_reg_3[0] = d
#define CMIC_PIO_IC_ID_REG_3r_GET(r) (r).cmic_pio_ic_id_reg_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_ID_REG_3r_PIO_IC_ID_REG_3f_GET(r) ((r).cmic_pio_ic_id_reg_3[0])
#define CMIC_PIO_IC_ID_REG_3r_PIO_IC_ID_REG_3f_SET(r,f) (r).cmic_pio_ic_id_reg_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_ID_REG_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_PER_REG_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_PER_REG_0r_OFFSET 0x0001cfe0

#define CMIC_PIO_IC_PER_REG_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_PER_REG_0.
 */
typedef union CMIC_PIO_IC_PER_REG_0r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_per_reg_0[1];
	uint32_t _cmic_pio_ic_per_reg_0;
} CMIC_PIO_IC_PER_REG_0r_t;

#define CMIC_PIO_IC_PER_REG_0r_CLR(r) (r).cmic_pio_ic_per_reg_0[0] = 0
#define CMIC_PIO_IC_PER_REG_0r_SET(r,d) (r).cmic_pio_ic_per_reg_0[0] = d
#define CMIC_PIO_IC_PER_REG_0r_GET(r) (r).cmic_pio_ic_per_reg_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_PER_REG_0r_PIO_IC_PER_REG_0f_GET(r) ((r).cmic_pio_ic_per_reg_0[0])
#define CMIC_PIO_IC_PER_REG_0r_PIO_IC_PER_REG_0f_SET(r,f) (r).cmic_pio_ic_per_reg_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_PER_REG_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_PER_REG_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_PER_REG_1r_OFFSET 0x0001cfe4

#define CMIC_PIO_IC_PER_REG_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_PER_REG_1.
 */
typedef union CMIC_PIO_IC_PER_REG_1r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_per_reg_1[1];
	uint32_t _cmic_pio_ic_per_reg_1;
} CMIC_PIO_IC_PER_REG_1r_t;

#define CMIC_PIO_IC_PER_REG_1r_CLR(r) (r).cmic_pio_ic_per_reg_1[0] = 0
#define CMIC_PIO_IC_PER_REG_1r_SET(r,d) (r).cmic_pio_ic_per_reg_1[0] = d
#define CMIC_PIO_IC_PER_REG_1r_GET(r) (r).cmic_pio_ic_per_reg_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_PER_REG_1r_PIO_IC_PER_REG_1f_GET(r) ((r).cmic_pio_ic_per_reg_1[0])
#define CMIC_PIO_IC_PER_REG_1r_PIO_IC_PER_REG_1f_SET(r,f) (r).cmic_pio_ic_per_reg_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_PER_REG_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_PER_REG_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_PER_REG_2r_OFFSET 0x0001cfe8

#define CMIC_PIO_IC_PER_REG_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_PER_REG_2.
 */
typedef union CMIC_PIO_IC_PER_REG_2r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_per_reg_2[1];
	uint32_t _cmic_pio_ic_per_reg_2;
} CMIC_PIO_IC_PER_REG_2r_t;

#define CMIC_PIO_IC_PER_REG_2r_CLR(r) (r).cmic_pio_ic_per_reg_2[0] = 0
#define CMIC_PIO_IC_PER_REG_2r_SET(r,d) (r).cmic_pio_ic_per_reg_2[0] = d
#define CMIC_PIO_IC_PER_REG_2r_GET(r) (r).cmic_pio_ic_per_reg_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_PER_REG_2r_PIO_IC_PER_REG_2f_GET(r) ((r).cmic_pio_ic_per_reg_2[0])
#define CMIC_PIO_IC_PER_REG_2r_PIO_IC_PER_REG_2f_SET(r,f) (r).cmic_pio_ic_per_reg_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_PER_REG_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_IC_PER_REG_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_IC_PER_REG_3r_OFFSET 0x0001cfec

#define CMIC_PIO_IC_PER_REG_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_IC_PER_REG_3.
 */
typedef union CMIC_PIO_IC_PER_REG_3r_s {
	uint32_t v[1];
	uint32_t cmic_pio_ic_per_reg_3[1];
	uint32_t _cmic_pio_ic_per_reg_3;
} CMIC_PIO_IC_PER_REG_3r_t;

#define CMIC_PIO_IC_PER_REG_3r_CLR(r) (r).cmic_pio_ic_per_reg_3[0] = 0
#define CMIC_PIO_IC_PER_REG_3r_SET(r,d) (r).cmic_pio_ic_per_reg_3[0] = d
#define CMIC_PIO_IC_PER_REG_3r_GET(r) (r).cmic_pio_ic_per_reg_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_IC_PER_REG_3r_PIO_IC_PER_REG_3f_GET(r) ((r).cmic_pio_ic_per_reg_3[0])
#define CMIC_PIO_IC_PER_REG_3r_PIO_IC_PER_REG_3f_SET(r,f) (r).cmic_pio_ic_per_reg_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_IC_PER_REG_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PIO_MCS_ACCESS_PAGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PIO_MCS_ACCESS_PAGEr_OFFSET 0x00010204

#define CMIC_PIO_MCS_ACCESS_PAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PIO_MCS_ACCESS_PAGE.
 */
typedef union CMIC_PIO_MCS_ACCESS_PAGEr_s {
	uint32_t v[1];
	uint32_t cmic_pio_mcs_access_page[1];
	uint32_t _cmic_pio_mcs_access_page;
} CMIC_PIO_MCS_ACCESS_PAGEr_t;

#define CMIC_PIO_MCS_ACCESS_PAGEr_CLR(r) (r).cmic_pio_mcs_access_page[0] = 0
#define CMIC_PIO_MCS_ACCESS_PAGEr_SET(r,d) (r).cmic_pio_mcs_access_page[0] = d
#define CMIC_PIO_MCS_ACCESS_PAGEr_GET(r) (r).cmic_pio_mcs_access_page[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PIO_MCS_ACCESS_PAGEr_PAGEf_GET(r) ((r).cmic_pio_mcs_access_page[0])
#define CMIC_PIO_MCS_ACCESS_PAGEr_PAGEf_SET(r,f) (r).cmic_pio_mcs_access_page[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PIO_MCS_ACCESS_PAGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COSr_OFFSET 0x0002221c

#define CMIC_PKT_COSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COS.
 */
typedef union CMIC_PKT_COSr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_cos[1];
	uint32_t _cmic_pkt_cos;
} CMIC_PKT_COSr_t;

#define CMIC_PKT_COSr_CLR(r) (r).cmic_pkt_cos[0] = 0
#define CMIC_PKT_COSr_SET(r,d) (r).cmic_pkt_cos[0] = d
#define CMIC_PKT_COSr_GET(r) (r).cmic_pkt_cos[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COSr_COSf_GET(r) ((r).cmic_pkt_cos[0])
#define CMIC_PKT_COSr_COSf_SET(r,f) (r).cmic_pkt_cos[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COS_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COS_0r_OFFSET 0x0002221c

#define CMIC_PKT_COS_0r_SIZE 4

/* CMIC_PKT_COS_0r is element of CMIC_PKT_COS */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_COS_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COS_1r_OFFSET 0x00022220

#define CMIC_PKT_COS_1r_SIZE 4

/* CMIC_PKT_COS_1r is element of CMIC_PKT_COS */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_COS_QUEUES_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COS_QUEUES_HIr_OFFSET 0x000222a4

#define CMIC_PKT_COS_QUEUES_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COS_QUEUES_HI.
 */
typedef union CMIC_PKT_COS_QUEUES_HIr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_cos_queues_hi[1];
	uint32_t _cmic_pkt_cos_queues_hi;
} CMIC_PKT_COS_QUEUES_HIr_t;

#define CMIC_PKT_COS_QUEUES_HIr_CLR(r) (r).cmic_pkt_cos_queues_hi[0] = 0
#define CMIC_PKT_COS_QUEUES_HIr_SET(r,d) (r).cmic_pkt_cos_queues_hi[0] = d
#define CMIC_PKT_COS_QUEUES_HIr_GET(r) (r).cmic_pkt_cos_queues_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COS_QUEUES_HIr_COS_QUEUEf_GET(r) ((r).cmic_pkt_cos_queues_hi[0])
#define CMIC_PKT_COS_QUEUES_HIr_COS_QUEUEf_SET(r,f) (r).cmic_pkt_cos_queues_hi[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COS_QUEUES_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COS_QUEUES_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COS_QUEUES_LOr_OFFSET 0x000222a8

#define CMIC_PKT_COS_QUEUES_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COS_QUEUES_LO.
 */
typedef union CMIC_PKT_COS_QUEUES_LOr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_cos_queues_lo[1];
	uint32_t _cmic_pkt_cos_queues_lo;
} CMIC_PKT_COS_QUEUES_LOr_t;

#define CMIC_PKT_COS_QUEUES_LOr_CLR(r) (r).cmic_pkt_cos_queues_lo[0] = 0
#define CMIC_PKT_COS_QUEUES_LOr_SET(r,d) (r).cmic_pkt_cos_queues_lo[0] = d
#define CMIC_PKT_COS_QUEUES_LOr_GET(r) (r).cmic_pkt_cos_queues_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COS_QUEUES_LOr_COS_QUEUEf_GET(r) ((r).cmic_pkt_cos_queues_lo[0])
#define CMIC_PKT_COS_QUEUES_LOr_COS_QUEUEf_SET(r,f) (r).cmic_pkt_cos_queues_lo[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COS_QUEUES_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_FROMCPU
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_FROMCPUr_OFFSET 0x000222b8

#define CMIC_PKT_COUNT_FROMCPUr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_FROMCPU.
 */
typedef union CMIC_PKT_COUNT_FROMCPUr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_fromcpu[1];
	uint32_t _cmic_pkt_count_fromcpu;
} CMIC_PKT_COUNT_FROMCPUr_t;

#define CMIC_PKT_COUNT_FROMCPUr_CLR(r) (r).cmic_pkt_count_fromcpu[0] = 0
#define CMIC_PKT_COUNT_FROMCPUr_SET(r,d) (r).cmic_pkt_count_fromcpu[0] = d
#define CMIC_PKT_COUNT_FROMCPUr_GET(r) (r).cmic_pkt_count_fromcpu[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_FROMCPUr_COUNTf_GET(r) ((r).cmic_pkt_count_fromcpu[0])
#define CMIC_PKT_COUNT_FROMCPUr_COUNTf_SET(r,f) (r).cmic_pkt_count_fromcpu[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_FROMCPUr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_FROMCPU_MH
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_FROMCPU_MHr_OFFSET 0x000222b4

#define CMIC_PKT_COUNT_FROMCPU_MHr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_FROMCPU_MH.
 */
typedef union CMIC_PKT_COUNT_FROMCPU_MHr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_fromcpu_mh[1];
	uint32_t _cmic_pkt_count_fromcpu_mh;
} CMIC_PKT_COUNT_FROMCPU_MHr_t;

#define CMIC_PKT_COUNT_FROMCPU_MHr_CLR(r) (r).cmic_pkt_count_fromcpu_mh[0] = 0
#define CMIC_PKT_COUNT_FROMCPU_MHr_SET(r,d) (r).cmic_pkt_count_fromcpu_mh[0] = d
#define CMIC_PKT_COUNT_FROMCPU_MHr_GET(r) (r).cmic_pkt_count_fromcpu_mh[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_FROMCPU_MHr_COUNTf_GET(r) ((r).cmic_pkt_count_fromcpu_mh[0])
#define CMIC_PKT_COUNT_FROMCPU_MHr_COUNTf_SET(r,f) (r).cmic_pkt_count_fromcpu_mh[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_FROMCPU_MHr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_INTR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_INTRr_OFFSET 0x000222d4

#define CMIC_PKT_COUNT_INTRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_INTR.
 */
typedef union CMIC_PKT_COUNT_INTRr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_intr[1];
	uint32_t _cmic_pkt_count_intr;
} CMIC_PKT_COUNT_INTRr_t;

#define CMIC_PKT_COUNT_INTRr_CLR(r) (r).cmic_pkt_count_intr[0] = 0
#define CMIC_PKT_COUNT_INTRr_SET(r,d) (r).cmic_pkt_count_intr[0] = d
#define CMIC_PKT_COUNT_INTRr_GET(r) (r).cmic_pkt_count_intr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_INTRr_COUNTf_GET(r) ((r).cmic_pkt_count_intr[0])
#define CMIC_PKT_COUNT_INTRr_COUNTf_SET(r,f) (r).cmic_pkt_count_intr[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_INTRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_PIO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_PIOr_OFFSET 0x000222d0

#define CMIC_PKT_COUNT_PIOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_PIO.
 */
typedef union CMIC_PKT_COUNT_PIOr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_pio[1];
	uint32_t _cmic_pkt_count_pio;
} CMIC_PKT_COUNT_PIOr_t;

#define CMIC_PKT_COUNT_PIOr_CLR(r) (r).cmic_pkt_count_pio[0] = 0
#define CMIC_PKT_COUNT_PIOr_SET(r,d) (r).cmic_pkt_count_pio[0] = d
#define CMIC_PKT_COUNT_PIOr_GET(r) (r).cmic_pkt_count_pio[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_PIOr_COUNTf_GET(r) ((r).cmic_pkt_count_pio[0])
#define CMIC_PKT_COUNT_PIOr_COUNTf_SET(r,f) (r).cmic_pkt_count_pio[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_PIOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_PIO_REPLY
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_PIO_REPLYr_OFFSET 0x000222cc

#define CMIC_PKT_COUNT_PIO_REPLYr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_PIO_REPLY.
 */
typedef union CMIC_PKT_COUNT_PIO_REPLYr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_pio_reply[1];
	uint32_t _cmic_pkt_count_pio_reply;
} CMIC_PKT_COUNT_PIO_REPLYr_t;

#define CMIC_PKT_COUNT_PIO_REPLYr_CLR(r) (r).cmic_pkt_count_pio_reply[0] = 0
#define CMIC_PKT_COUNT_PIO_REPLYr_SET(r,d) (r).cmic_pkt_count_pio_reply[0] = d
#define CMIC_PKT_COUNT_PIO_REPLYr_GET(r) (r).cmic_pkt_count_pio_reply[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_PIO_REPLYr_COUNTf_GET(r) ((r).cmic_pkt_count_pio_reply[0])
#define CMIC_PKT_COUNT_PIO_REPLYr_COUNTf_SET(r,f) (r).cmic_pkt_count_pio_reply[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_PIO_REPLYr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_SCHAN
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_SCHANr_OFFSET 0x000222ac

#define CMIC_PKT_COUNT_SCHANr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_SCHAN.
 */
typedef union CMIC_PKT_COUNT_SCHANr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_schan[1];
	uint32_t _cmic_pkt_count_schan;
} CMIC_PKT_COUNT_SCHANr_t;

#define CMIC_PKT_COUNT_SCHANr_CLR(r) (r).cmic_pkt_count_schan[0] = 0
#define CMIC_PKT_COUNT_SCHANr_SET(r,d) (r).cmic_pkt_count_schan[0] = d
#define CMIC_PKT_COUNT_SCHANr_GET(r) (r).cmic_pkt_count_schan[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_SCHANr_COUNTf_GET(r) ((r).cmic_pkt_count_schan[0])
#define CMIC_PKT_COUNT_SCHANr_COUNTf_SET(r,f) (r).cmic_pkt_count_schan[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_SCHANr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_SCHAN_REP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_SCHAN_REPr_OFFSET 0x000222b0

#define CMIC_PKT_COUNT_SCHAN_REPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_SCHAN_REP.
 */
typedef union CMIC_PKT_COUNT_SCHAN_REPr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_schan_rep[1];
	uint32_t _cmic_pkt_count_schan_rep;
} CMIC_PKT_COUNT_SCHAN_REPr_t;

#define CMIC_PKT_COUNT_SCHAN_REPr_CLR(r) (r).cmic_pkt_count_schan_rep[0] = 0
#define CMIC_PKT_COUNT_SCHAN_REPr_SET(r,d) (r).cmic_pkt_count_schan_rep[0] = d
#define CMIC_PKT_COUNT_SCHAN_REPr_GET(r) (r).cmic_pkt_count_schan_rep[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_SCHAN_REPr_COUNTf_GET(r) ((r).cmic_pkt_count_schan_rep[0])
#define CMIC_PKT_COUNT_SCHAN_REPr_COUNTf_SET(r,f) (r).cmic_pkt_count_schan_rep[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_SCHAN_REPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_TOCPUD
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_TOCPUDr_OFFSET 0x000222c0

#define CMIC_PKT_COUNT_TOCPUDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_TOCPUD.
 */
typedef union CMIC_PKT_COUNT_TOCPUDr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_tocpud[1];
	uint32_t _cmic_pkt_count_tocpud;
} CMIC_PKT_COUNT_TOCPUDr_t;

#define CMIC_PKT_COUNT_TOCPUDr_CLR(r) (r).cmic_pkt_count_tocpud[0] = 0
#define CMIC_PKT_COUNT_TOCPUDr_SET(r,d) (r).cmic_pkt_count_tocpud[0] = d
#define CMIC_PKT_COUNT_TOCPUDr_GET(r) (r).cmic_pkt_count_tocpud[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_TOCPUDr_COUNTf_GET(r) ((r).cmic_pkt_count_tocpud[0])
#define CMIC_PKT_COUNT_TOCPUDr_COUNTf_SET(r,f) (r).cmic_pkt_count_tocpud[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_TOCPUDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_TOCPUDM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_TOCPUDMr_OFFSET 0x000222bc

#define CMIC_PKT_COUNT_TOCPUDMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_TOCPUDM.
 */
typedef union CMIC_PKT_COUNT_TOCPUDMr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_tocpudm[1];
	uint32_t _cmic_pkt_count_tocpudm;
} CMIC_PKT_COUNT_TOCPUDMr_t;

#define CMIC_PKT_COUNT_TOCPUDMr_CLR(r) (r).cmic_pkt_count_tocpudm[0] = 0
#define CMIC_PKT_COUNT_TOCPUDMr_SET(r,d) (r).cmic_pkt_count_tocpudm[0] = d
#define CMIC_PKT_COUNT_TOCPUDMr_GET(r) (r).cmic_pkt_count_tocpudm[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_TOCPUDMr_COUNTf_GET(r) ((r).cmic_pkt_count_tocpudm[0])
#define CMIC_PKT_COUNT_TOCPUDMr_COUNTf_SET(r,f) (r).cmic_pkt_count_tocpudm[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_TOCPUDMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_TOCPUE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_TOCPUEr_OFFSET 0x000222c8

#define CMIC_PKT_COUNT_TOCPUEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_TOCPUE.
 */
typedef union CMIC_PKT_COUNT_TOCPUEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_tocpue[1];
	uint32_t _cmic_pkt_count_tocpue;
} CMIC_PKT_COUNT_TOCPUEr_t;

#define CMIC_PKT_COUNT_TOCPUEr_CLR(r) (r).cmic_pkt_count_tocpue[0] = 0
#define CMIC_PKT_COUNT_TOCPUEr_SET(r,d) (r).cmic_pkt_count_tocpue[0] = d
#define CMIC_PKT_COUNT_TOCPUEr_GET(r) (r).cmic_pkt_count_tocpue[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_TOCPUEr_COUNTf_GET(r) ((r).cmic_pkt_count_tocpue[0])
#define CMIC_PKT_COUNT_TOCPUEr_COUNTf_SET(r,f) (r).cmic_pkt_count_tocpue[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_TOCPUEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_COUNT_TOCPUEM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_COUNT_TOCPUEMr_OFFSET 0x000222c4

#define CMIC_PKT_COUNT_TOCPUEMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_COUNT_TOCPUEM.
 */
typedef union CMIC_PKT_COUNT_TOCPUEMr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_count_tocpuem[1];
	uint32_t _cmic_pkt_count_tocpuem;
} CMIC_PKT_COUNT_TOCPUEMr_t;

#define CMIC_PKT_COUNT_TOCPUEMr_CLR(r) (r).cmic_pkt_count_tocpuem[0] = 0
#define CMIC_PKT_COUNT_TOCPUEMr_SET(r,d) (r).cmic_pkt_count_tocpuem[0] = d
#define CMIC_PKT_COUNT_TOCPUEMr_GET(r) (r).cmic_pkt_count_tocpuem[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_COUNT_TOCPUEMr_COUNTf_GET(r) ((r).cmic_pkt_count_tocpuem[0])
#define CMIC_PKT_COUNT_TOCPUEMr_COUNTf_SET(r,f) (r).cmic_pkt_count_tocpuem[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_COUNT_TOCPUEMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_CTRLr_OFFSET 0x00022200

#define CMIC_PKT_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_CTRL.
 */
typedef union CMIC_PKT_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ctrl[1];
	uint32_t _cmic_pkt_ctrl;
} CMIC_PKT_CTRLr_t;

#define CMIC_PKT_CTRLr_CLR(r) (r).cmic_pkt_ctrl[0] = 0
#define CMIC_PKT_CTRLr_SET(r,d) (r).cmic_pkt_ctrl[0] = d
#define CMIC_PKT_CTRLr_GET(r) (r).cmic_pkt_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_CTRLr_ENABLE_SCHAN_REQUESTf_GET(r) (((r).cmic_pkt_ctrl[0]) & 0x1)
#define CMIC_PKT_CTRLr_ENABLE_SCHAN_REQUESTf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_PKT_CTRLr_ENABLE_FROMCPU_PACKETf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 1) & 0x1)
#define CMIC_PKT_CTRLr_ENABLE_FROMCPU_PACKETf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_PKT_CTRLr_ENABLE_TOCPU_PACKETf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 2) & 0x1)
#define CMIC_PKT_CTRLr_ENABLE_TOCPU_PACKETf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_PKT_CTRLr_VLAN_MATCHf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 3) & 0x1)
#define CMIC_PKT_CTRLr_VLAN_MATCHf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_PKT_CTRLr_LMAC0_MATCHf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 4) & 0x1)
#define CMIC_PKT_CTRLr_LMAC0_MATCHf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_PKT_CTRLr_LMAC1_MATCHf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 5) & 0x1)
#define CMIC_PKT_CTRLr_LMAC1_MATCHf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_PKT_CTRLr_TOCPU_TRUNCATION_SIZEf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 6) & 0xff)
#define CMIC_PKT_CTRLr_TOCPU_TRUNCATION_SIZEf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0xff << 6)) | ((((uint32_t)f) & 0xff) << 6))
#define CMIC_PKT_CTRLr_MH_SRC_PID_ENABLEf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 14) & 0x1)
#define CMIC_PKT_CTRLr_MH_SRC_PID_ENABLEf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define CMIC_PKT_CTRLr_CPU_TC_ENABLEf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 15) & 0x1)
#define CMIC_PKT_CTRLr_CPU_TC_ENABLEf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define CMIC_PKT_CTRLr_MH_TC_MAP_ENABLEf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 16) & 0x1)
#define CMIC_PKT_CTRLr_MH_TC_MAP_ENABLEf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_PKT_CTRLr_IEEE_802_1_PRI_MAP_ENABLEf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 17) & 0x1)
#define CMIC_PKT_CTRLr_IEEE_802_1_PRI_MAP_ENABLEf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 17)) | ((((uint32_t)f) & 0x1) << 17))
#define CMIC_PKT_CTRLr_ENABLE_CMIC_REQUESTf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 18) & 0x1)
#define CMIC_PKT_CTRLr_ENABLE_CMIC_REQUESTf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 18)) | ((((uint32_t)f) & 0x1) << 18))
#define CMIC_PKT_CTRLr_ENABLE_RCPU_FOR_ATEf_GET(r) ((((r).cmic_pkt_ctrl[0]) >> 19) & 0x1)
#define CMIC_PKT_CTRLr_ENABLE_RCPU_FOR_ATEf_SET(r,f) (r).cmic_pkt_ctrl[0]=(((r).cmic_pkt_ctrl[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))

/*******************************************************************************
 * End of 'CMIC_PKT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_ETHER_SIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_ETHER_SIGr_OFFSET 0x00022218

#define CMIC_PKT_ETHER_SIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_ETHER_SIG.
 */
typedef union CMIC_PKT_ETHER_SIGr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ether_sig[1];
	uint32_t _cmic_pkt_ether_sig;
} CMIC_PKT_ETHER_SIGr_t;

#define CMIC_PKT_ETHER_SIGr_CLR(r) (r).cmic_pkt_ether_sig[0] = 0
#define CMIC_PKT_ETHER_SIGr_SET(r,d) (r).cmic_pkt_ether_sig[0] = d
#define CMIC_PKT_ETHER_SIGr_GET(r) (r).cmic_pkt_ether_sig[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_ETHER_SIGr_SIGNATUREf_GET(r) (((r).cmic_pkt_ether_sig[0]) & 0xffff)
#define CMIC_PKT_ETHER_SIGr_SIGNATUREf_SET(r,f) (r).cmic_pkt_ether_sig[0]=(((r).cmic_pkt_ether_sig[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_PKT_ETHER_SIGr_ETHERTYPEf_GET(r) ((((r).cmic_pkt_ether_sig[0]) >> 16) & 0xffff)
#define CMIC_PKT_ETHER_SIGr_ETHERTYPEf_SET(r,f) (r).cmic_pkt_ether_sig[0]=(((r).cmic_pkt_ether_sig[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*******************************************************************************
 * End of 'CMIC_PKT_ETHER_SIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_LMAC0_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_LMAC0_HIr_OFFSET 0x00022204

#define CMIC_PKT_LMAC0_HIr_SIZE 4

/* CMIC_PKT_LMAC0_HIr is element of CMIC_PKT_LMAC_HI */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_LMAC0_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_LMAC0_LOr_OFFSET 0x00022208

#define CMIC_PKT_LMAC0_LOr_SIZE 4

/* CMIC_PKT_LMAC0_LOr is element of CMIC_PKT_LMAC_LO */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_LMAC1_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_LMAC1_HIr_OFFSET 0x0002220c

#define CMIC_PKT_LMAC1_HIr_SIZE 4

/* CMIC_PKT_LMAC1_HIr is element of CMIC_PKT_LMAC_HI */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_LMAC1_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_LMAC1_LOr_OFFSET 0x00022210

#define CMIC_PKT_LMAC1_LOr_SIZE 4

/* CMIC_PKT_LMAC1_LOr is element of CMIC_PKT_LMAC_LO */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_LMAC_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_LMAC_HIr_OFFSET 0x00022204

#define CMIC_PKT_LMAC_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_LMAC_HI.
 */
typedef union CMIC_PKT_LMAC_HIr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_lmac_hi[1];
	uint32_t _cmic_pkt_lmac_hi;
} CMIC_PKT_LMAC_HIr_t;

#define CMIC_PKT_LMAC_HIr_CLR(r) (r).cmic_pkt_lmac_hi[0] = 0
#define CMIC_PKT_LMAC_HIr_SET(r,d) (r).cmic_pkt_lmac_hi[0] = d
#define CMIC_PKT_LMAC_HIr_GET(r) (r).cmic_pkt_lmac_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_LMAC_HIr_MAC0_HIf_GET(r) (((r).cmic_pkt_lmac_hi[0]) & 0xffff)
#define CMIC_PKT_LMAC_HIr_MAC0_HIf_SET(r,f) (r).cmic_pkt_lmac_hi[0]=(((r).cmic_pkt_lmac_hi[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_PKT_LMAC_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_LMAC_LO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_LMAC_LOr_OFFSET 0x00022208

#define CMIC_PKT_LMAC_LOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_LMAC_LO.
 */
typedef union CMIC_PKT_LMAC_LOr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_lmac_lo[1];
	uint32_t _cmic_pkt_lmac_lo;
} CMIC_PKT_LMAC_LOr_t;

#define CMIC_PKT_LMAC_LOr_CLR(r) (r).cmic_pkt_lmac_lo[0] = 0
#define CMIC_PKT_LMAC_LOr_SET(r,d) (r).cmic_pkt_lmac_lo[0] = d
#define CMIC_PKT_LMAC_LOr_GET(r) (r).cmic_pkt_lmac_lo[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_LMAC_LOr_MAC0_LOf_GET(r) ((r).cmic_pkt_lmac_lo[0])
#define CMIC_PKT_LMAC_LOr_MAC0_LOf_SET(r,f) (r).cmic_pkt_lmac_lo[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_LMAC_LOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PORTS_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PORTS_0r_OFFSET 0x00022224

#define CMIC_PKT_PORTS_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_PORTS_0.
 */
typedef union CMIC_PKT_PORTS_0r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ports_0[1];
	uint32_t _cmic_pkt_ports_0;
} CMIC_PKT_PORTS_0r_t;

#define CMIC_PKT_PORTS_0r_CLR(r) (r).cmic_pkt_ports_0[0] = 0
#define CMIC_PKT_PORTS_0r_SET(r,d) (r).cmic_pkt_ports_0[0] = d
#define CMIC_PKT_PORTS_0r_GET(r) (r).cmic_pkt_ports_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_PORTS_0r_PORTSf_GET(r) ((r).cmic_pkt_ports_0[0])
#define CMIC_PKT_PORTS_0r_PORTSf_SET(r,f) (r).cmic_pkt_ports_0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_PORTS_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PORTS_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PORTS_1r_OFFSET 0x00022228

#define CMIC_PKT_PORTS_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_PORTS_1.
 */
typedef union CMIC_PKT_PORTS_1r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ports_1[1];
	uint32_t _cmic_pkt_ports_1;
} CMIC_PKT_PORTS_1r_t;

#define CMIC_PKT_PORTS_1r_CLR(r) (r).cmic_pkt_ports_1[0] = 0
#define CMIC_PKT_PORTS_1r_SET(r,d) (r).cmic_pkt_ports_1[0] = d
#define CMIC_PKT_PORTS_1r_GET(r) (r).cmic_pkt_ports_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_PORTS_1r_PORTS_HIf_GET(r) ((r).cmic_pkt_ports_1[0])
#define CMIC_PKT_PORTS_1r_PORTS_HIf_SET(r,f) (r).cmic_pkt_ports_1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_PORTS_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PORTS_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PORTS_2r_OFFSET 0x0002222c

#define CMIC_PKT_PORTS_2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_PORTS_2.
 */
typedef union CMIC_PKT_PORTS_2r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ports_2[1];
	uint32_t _cmic_pkt_ports_2;
} CMIC_PKT_PORTS_2r_t;

#define CMIC_PKT_PORTS_2r_CLR(r) (r).cmic_pkt_ports_2[0] = 0
#define CMIC_PKT_PORTS_2r_SET(r,d) (r).cmic_pkt_ports_2[0] = d
#define CMIC_PKT_PORTS_2r_GET(r) (r).cmic_pkt_ports_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_PORTS_2r_PORTS_HIf_GET(r) ((r).cmic_pkt_ports_2[0])
#define CMIC_PKT_PORTS_2r_PORTS_HIf_SET(r,f) (r).cmic_pkt_ports_2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_PORTS_2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PORTS_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PORTS_3r_OFFSET 0x00022250

#define CMIC_PKT_PORTS_3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_PORTS_3.
 */
typedef union CMIC_PKT_PORTS_3r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ports_3[1];
	uint32_t _cmic_pkt_ports_3;
} CMIC_PKT_PORTS_3r_t;

#define CMIC_PKT_PORTS_3r_CLR(r) (r).cmic_pkt_ports_3[0] = 0
#define CMIC_PKT_PORTS_3r_SET(r,d) (r).cmic_pkt_ports_3[0] = d
#define CMIC_PKT_PORTS_3r_GET(r) (r).cmic_pkt_ports_3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_PORTS_3r_PORTS_HIf_GET(r) ((r).cmic_pkt_ports_3[0])
#define CMIC_PKT_PORTS_3r_PORTS_HIf_SET(r,f) (r).cmic_pkt_ports_3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_PORTS_3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PORTS_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PORTS_4r_OFFSET 0x00022254

#define CMIC_PKT_PORTS_4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_PORTS_4.
 */
typedef union CMIC_PKT_PORTS_4r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ports_4[1];
	uint32_t _cmic_pkt_ports_4;
} CMIC_PKT_PORTS_4r_t;

#define CMIC_PKT_PORTS_4r_CLR(r) (r).cmic_pkt_ports_4[0] = 0
#define CMIC_PKT_PORTS_4r_SET(r,d) (r).cmic_pkt_ports_4[0] = d
#define CMIC_PKT_PORTS_4r_GET(r) (r).cmic_pkt_ports_4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_PORTS_4r_PORTS_HIf_GET(r) ((r).cmic_pkt_ports_4[0])
#define CMIC_PKT_PORTS_4r_PORTS_HIf_SET(r,f) (r).cmic_pkt_ports_4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_PORTS_4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PORTS_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PORTS_5r_OFFSET 0x00022258

#define CMIC_PKT_PORTS_5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_PORTS_5.
 */
typedef union CMIC_PKT_PORTS_5r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ports_5[1];
	uint32_t _cmic_pkt_ports_5;
} CMIC_PKT_PORTS_5r_t;

#define CMIC_PKT_PORTS_5r_CLR(r) (r).cmic_pkt_ports_5[0] = 0
#define CMIC_PKT_PORTS_5r_SET(r,d) (r).cmic_pkt_ports_5[0] = d
#define CMIC_PKT_PORTS_5r_GET(r) (r).cmic_pkt_ports_5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_PORTS_5r_PORTS_HIf_GET(r) ((r).cmic_pkt_ports_5[0])
#define CMIC_PKT_PORTS_5r_PORTS_HIf_SET(r,f) (r).cmic_pkt_ports_5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_PORTS_5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PORTS_6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PORTS_6r_OFFSET 0x0002225c

#define CMIC_PKT_PORTS_6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_PORTS_6.
 */
typedef union CMIC_PKT_PORTS_6r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ports_6[1];
	uint32_t _cmic_pkt_ports_6;
} CMIC_PKT_PORTS_6r_t;

#define CMIC_PKT_PORTS_6r_CLR(r) (r).cmic_pkt_ports_6[0] = 0
#define CMIC_PKT_PORTS_6r_SET(r,d) (r).cmic_pkt_ports_6[0] = d
#define CMIC_PKT_PORTS_6r_GET(r) (r).cmic_pkt_ports_6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_PORTS_6r_PORTS_HIf_GET(r) ((r).cmic_pkt_ports_6[0])
#define CMIC_PKT_PORTS_6r_PORTS_HIf_SET(r,f) (r).cmic_pkt_ports_6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_PORTS_6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PORTS_7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PORTS_7r_OFFSET 0x00022260

#define CMIC_PKT_PORTS_7r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_PORTS_7.
 */
typedef union CMIC_PKT_PORTS_7r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_ports_7[1];
	uint32_t _cmic_pkt_ports_7;
} CMIC_PKT_PORTS_7r_t;

#define CMIC_PKT_PORTS_7r_CLR(r) (r).cmic_pkt_ports_7[0] = 0
#define CMIC_PKT_PORTS_7r_SET(r,d) (r).cmic_pkt_ports_7[0] = d
#define CMIC_PKT_PORTS_7r_GET(r) (r).cmic_pkt_ports_7[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_PORTS_7r_PORTS_HIf_GET(r) ((r).cmic_pkt_ports_7[0])
#define CMIC_PKT_PORTS_7r_PORTS_HIf_SET(r,f) (r).cmic_pkt_ports_7[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_PORTS_7r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_OFFSET 0x00022100

#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_PRI_MAP_TABLE_ENTRY.
 */
typedef union CMIC_PKT_PRI_MAP_TABLE_ENTRYr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_pri_map_table_entry[1];
	uint32_t _cmic_pkt_pri_map_table_entry;
} CMIC_PKT_PRI_MAP_TABLE_ENTRYr_t;

#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_CLR(r) (r).cmic_pkt_pri_map_table_entry[0] = 0
#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_SET(r,d) (r).cmic_pkt_pri_map_table_entry[0] = d
#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_GET(r) (r).cmic_pkt_pri_map_table_entry[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_IEEE_802_1_Pf_GET(r) (((r).cmic_pkt_pri_map_table_entry[0]) & 0x7)
#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_IEEE_802_1_Pf_SET(r,f) (r).cmic_pkt_pri_map_table_entry[0]=(((r).cmic_pkt_pri_map_table_entry[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))
#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_MH_TCf_GET(r) ((((r).cmic_pkt_pri_map_table_entry[0]) >> 3) & 0xf)
#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_MH_TCf_SET(r,f) (r).cmic_pkt_pri_map_table_entry[0]=(((r).cmic_pkt_pri_map_table_entry[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3))
#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_CPU_TCf_GET(r) ((((r).cmic_pkt_pri_map_table_entry[0]) >> 7) & 0xff)
#define CMIC_PKT_PRI_MAP_TABLE_ENTRYr_CPU_TCf_SET(r,f) (r).cmic_pkt_pri_map_table_entry[0]=(((r).cmic_pkt_pri_map_table_entry[0] & ~((uint32_t)0xff << 7)) | ((((uint32_t)f) & 0xff) << 7))

/*******************************************************************************
 * End of 'CMIC_PKT_PRI_MAP_TABLE_ENTRYr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_0r_OFFSET 0x00022100

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_0r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_0r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_1r_OFFSET 0x00022104

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_1r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_1r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_10
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_10r_OFFSET 0x00022128

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_10r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_10r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_11
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_11r_OFFSET 0x0002212c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_11r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_11r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_12
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_12r_OFFSET 0x00022130

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_12r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_12r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_13
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_13r_OFFSET 0x00022134

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_13r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_13r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_14
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_14r_OFFSET 0x00022138

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_14r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_14r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_15
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_15r_OFFSET 0x0002213c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_15r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_15r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_16
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_16r_OFFSET 0x00022140

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_16r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_16r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_17
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_17r_OFFSET 0x00022144

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_17r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_17r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_18
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_18r_OFFSET 0x00022148

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_18r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_18r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_19
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_19r_OFFSET 0x0002214c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_19r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_19r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_2r_OFFSET 0x00022108

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_2r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_2r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_20
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_20r_OFFSET 0x00022150

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_20r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_20r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_21
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_21r_OFFSET 0x00022154

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_21r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_21r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_22
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_22r_OFFSET 0x00022158

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_22r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_22r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_23
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_23r_OFFSET 0x0002215c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_23r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_23r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_24
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_24r_OFFSET 0x00022160

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_24r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_24r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_25
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_25r_OFFSET 0x00022164

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_25r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_25r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_26
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_26r_OFFSET 0x00022168

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_26r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_26r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_27
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_27r_OFFSET 0x0002216c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_27r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_27r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_28
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_28r_OFFSET 0x00022170

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_28r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_28r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_29
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_29r_OFFSET 0x00022174

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_29r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_29r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_3r_OFFSET 0x0002210c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_3r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_3r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_30
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_30r_OFFSET 0x00022178

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_30r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_30r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_31
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_31r_OFFSET 0x0002217c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_31r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_31r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_32
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_32r_OFFSET 0x00022180

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_32r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_32r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_33
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_33r_OFFSET 0x00022184

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_33r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_33r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_34
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_34r_OFFSET 0x00022188

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_34r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_34r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_35
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_35r_OFFSET 0x0002218c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_35r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_35r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_36
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_36r_OFFSET 0x00022190

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_36r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_36r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_37
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_37r_OFFSET 0x00022194

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_37r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_37r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_38
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_38r_OFFSET 0x00022198

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_38r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_38r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_39
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_39r_OFFSET 0x0002219c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_39r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_39r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_4r_OFFSET 0x00022110

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_4r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_4r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_40
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_40r_OFFSET 0x000221a0

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_40r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_40r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_41
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_41r_OFFSET 0x000221a4

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_41r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_41r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_42
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_42r_OFFSET 0x000221a8

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_42r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_42r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_43
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_43r_OFFSET 0x000221ac

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_43r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_43r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_44
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_44r_OFFSET 0x000221b0

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_44r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_44r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_45
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_45r_OFFSET 0x000221b4

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_45r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_45r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_46
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_46r_OFFSET 0x000221b8

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_46r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_46r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_47
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_47r_OFFSET 0x000221bc

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_47r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_47r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_48
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_48r_OFFSET 0x000221c0

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_48r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_48r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_49
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_49r_OFFSET 0x000221c4

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_49r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_49r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_5r_OFFSET 0x00022114

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_5r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_5r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_50
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_50r_OFFSET 0x000221c8

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_50r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_50r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_51
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_51r_OFFSET 0x000221cc

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_51r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_51r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_52
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_52r_OFFSET 0x000221d0

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_52r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_52r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_53
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_53r_OFFSET 0x000221d4

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_53r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_53r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_54
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_54r_OFFSET 0x000221d8

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_54r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_54r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_55
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_55r_OFFSET 0x000221dc

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_55r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_55r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_56
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_56r_OFFSET 0x000221e0

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_56r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_56r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_57
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_57r_OFFSET 0x000221e4

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_57r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_57r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_58
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_58r_OFFSET 0x000221e8

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_58r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_58r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_59
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_59r_OFFSET 0x000221ec

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_59r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_59r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_6r_OFFSET 0x00022118

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_6r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_6r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_60
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_60r_OFFSET 0x000221f0

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_60r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_60r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_61
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_61r_OFFSET 0x000221f4

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_61r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_61r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_62
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_62r_OFFSET 0x000221f8

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_62r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_62r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_63
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_63r_OFFSET 0x000221fc

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_63r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_63r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_7r_OFFSET 0x0002211c

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_7r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_7r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_8
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_8r_OFFSET 0x00022120

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_8r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_8r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_PRI_MAP_TABLE_ENTRY_9
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_9r_OFFSET 0x00022124

#define CMIC_PKT_PRI_MAP_TABLE_ENTRY_9r_SIZE 4

/* CMIC_PKT_PRI_MAP_TABLE_ENTRY_9r is element of CMIC_PKT_PRI_MAP_TABLE_ENTRY */

/*******************************************************************************
 * REGISTER:  CMIC_PKT_REASON_0_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_REASON_0_TYPEr_OFFSET 0x00022370

#define CMIC_PKT_REASON_0_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_REASON_0_TYPE.
 */
typedef union CMIC_PKT_REASON_0_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_reason_0_type[1];
	uint32_t _cmic_pkt_reason_0_type;
} CMIC_PKT_REASON_0_TYPEr_t;

#define CMIC_PKT_REASON_0_TYPEr_CLR(r) (r).cmic_pkt_reason_0_type[0] = 0
#define CMIC_PKT_REASON_0_TYPEr_SET(r,d) (r).cmic_pkt_reason_0_type[0] = d
#define CMIC_PKT_REASON_0_TYPEr_GET(r) (r).cmic_pkt_reason_0_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_REASON_0_TYPEr_REASONSf_GET(r) ((r).cmic_pkt_reason_0_type[0])
#define CMIC_PKT_REASON_0_TYPEr_REASONSf_SET(r,f) (r).cmic_pkt_reason_0_type[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_REASON_0_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_REASON_1_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_REASON_1_TYPEr_OFFSET 0x000223b0

#define CMIC_PKT_REASON_1_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_REASON_1_TYPE.
 */
typedef union CMIC_PKT_REASON_1_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_reason_1_type[1];
	uint32_t _cmic_pkt_reason_1_type;
} CMIC_PKT_REASON_1_TYPEr_t;

#define CMIC_PKT_REASON_1_TYPEr_CLR(r) (r).cmic_pkt_reason_1_type[0] = 0
#define CMIC_PKT_REASON_1_TYPEr_SET(r,d) (r).cmic_pkt_reason_1_type[0] = d
#define CMIC_PKT_REASON_1_TYPEr_GET(r) (r).cmic_pkt_reason_1_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_REASON_1_TYPEr_REASONSf_GET(r) ((r).cmic_pkt_reason_1_type[0])
#define CMIC_PKT_REASON_1_TYPEr_REASONSf_SET(r,f) (r).cmic_pkt_reason_1_type[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_REASON_1_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_REASON_2_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_REASON_2_TYPEr_OFFSET 0x000224f0

#define CMIC_PKT_REASON_2_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_REASON_2_TYPE.
 */
typedef union CMIC_PKT_REASON_2_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_reason_2_type[1];
	uint32_t _cmic_pkt_reason_2_type;
} CMIC_PKT_REASON_2_TYPEr_t;

#define CMIC_PKT_REASON_2_TYPEr_CLR(r) (r).cmic_pkt_reason_2_type[0] = 0
#define CMIC_PKT_REASON_2_TYPEr_SET(r,d) (r).cmic_pkt_reason_2_type[0] = d
#define CMIC_PKT_REASON_2_TYPEr_GET(r) (r).cmic_pkt_reason_2_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_REASON_2_TYPEr_REASONSf_GET(r) (((r).cmic_pkt_reason_2_type[0]) & 0x1)
#define CMIC_PKT_REASON_2_TYPEr_REASONSf_SET(r,f) (r).cmic_pkt_reason_2_type[0]=(((r).cmic_pkt_reason_2_type[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_PKT_REASON_2_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_REASON_DIRECT_0_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_REASON_DIRECT_0_TYPEr_OFFSET 0x000223f0

#define CMIC_PKT_REASON_DIRECT_0_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_REASON_DIRECT_0_TYPE.
 */
typedef union CMIC_PKT_REASON_DIRECT_0_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_reason_direct_0_type[1];
	uint32_t _cmic_pkt_reason_direct_0_type;
} CMIC_PKT_REASON_DIRECT_0_TYPEr_t;

#define CMIC_PKT_REASON_DIRECT_0_TYPEr_CLR(r) (r).cmic_pkt_reason_direct_0_type[0] = 0
#define CMIC_PKT_REASON_DIRECT_0_TYPEr_SET(r,d) (r).cmic_pkt_reason_direct_0_type[0] = d
#define CMIC_PKT_REASON_DIRECT_0_TYPEr_GET(r) (r).cmic_pkt_reason_direct_0_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_REASON_DIRECT_0_TYPEr_REASONSf_GET(r) ((r).cmic_pkt_reason_direct_0_type[0])
#define CMIC_PKT_REASON_DIRECT_0_TYPEr_REASONSf_SET(r,f) (r).cmic_pkt_reason_direct_0_type[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_REASON_DIRECT_0_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_REASON_DIRECT_1_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_REASON_DIRECT_1_TYPEr_OFFSET 0x00022430

#define CMIC_PKT_REASON_DIRECT_1_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_REASON_DIRECT_1_TYPE.
 */
typedef union CMIC_PKT_REASON_DIRECT_1_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_reason_direct_1_type[1];
	uint32_t _cmic_pkt_reason_direct_1_type;
} CMIC_PKT_REASON_DIRECT_1_TYPEr_t;

#define CMIC_PKT_REASON_DIRECT_1_TYPEr_CLR(r) (r).cmic_pkt_reason_direct_1_type[0] = 0
#define CMIC_PKT_REASON_DIRECT_1_TYPEr_SET(r,d) (r).cmic_pkt_reason_direct_1_type[0] = d
#define CMIC_PKT_REASON_DIRECT_1_TYPEr_GET(r) (r).cmic_pkt_reason_direct_1_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_REASON_DIRECT_1_TYPEr_REASONSf_GET(r) ((r).cmic_pkt_reason_direct_1_type[0])
#define CMIC_PKT_REASON_DIRECT_1_TYPEr_REASONSf_SET(r,f) (r).cmic_pkt_reason_direct_1_type[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_REASON_DIRECT_1_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_REASON_DIRECT_2_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_REASON_DIRECT_2_TYPEr_OFFSET 0x00022530

#define CMIC_PKT_REASON_DIRECT_2_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_REASON_DIRECT_2_TYPE.
 */
typedef union CMIC_PKT_REASON_DIRECT_2_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_reason_direct_2_type[1];
	uint32_t _cmic_pkt_reason_direct_2_type;
} CMIC_PKT_REASON_DIRECT_2_TYPEr_t;

#define CMIC_PKT_REASON_DIRECT_2_TYPEr_CLR(r) (r).cmic_pkt_reason_direct_2_type[0] = 0
#define CMIC_PKT_REASON_DIRECT_2_TYPEr_SET(r,d) (r).cmic_pkt_reason_direct_2_type[0] = d
#define CMIC_PKT_REASON_DIRECT_2_TYPEr_GET(r) (r).cmic_pkt_reason_direct_2_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_REASON_DIRECT_2_TYPEr_REASONSf_GET(r) (((r).cmic_pkt_reason_direct_2_type[0]) & 0x1)
#define CMIC_PKT_REASON_DIRECT_2_TYPEr_REASONSf_SET(r,f) (r).cmic_pkt_reason_direct_2_type[0]=(((r).cmic_pkt_reason_direct_2_type[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_PKT_REASON_DIRECT_2_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_REASON_MINI_0_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_REASON_MINI_0_TYPEr_OFFSET 0x00022470

#define CMIC_PKT_REASON_MINI_0_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_REASON_MINI_0_TYPE.
 */
typedef union CMIC_PKT_REASON_MINI_0_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_reason_mini_0_type[1];
	uint32_t _cmic_pkt_reason_mini_0_type;
} CMIC_PKT_REASON_MINI_0_TYPEr_t;

#define CMIC_PKT_REASON_MINI_0_TYPEr_CLR(r) (r).cmic_pkt_reason_mini_0_type[0] = 0
#define CMIC_PKT_REASON_MINI_0_TYPEr_SET(r,d) (r).cmic_pkt_reason_mini_0_type[0] = d
#define CMIC_PKT_REASON_MINI_0_TYPEr_GET(r) (r).cmic_pkt_reason_mini_0_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_REASON_MINI_0_TYPEr_REASONSf_GET(r) ((r).cmic_pkt_reason_mini_0_type[0])
#define CMIC_PKT_REASON_MINI_0_TYPEr_REASONSf_SET(r,f) (r).cmic_pkt_reason_mini_0_type[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_REASON_MINI_0_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_REASON_MINI_1_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_REASON_MINI_1_TYPEr_OFFSET 0x000224b0

#define CMIC_PKT_REASON_MINI_1_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_REASON_MINI_1_TYPE.
 */
typedef union CMIC_PKT_REASON_MINI_1_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_reason_mini_1_type[1];
	uint32_t _cmic_pkt_reason_mini_1_type;
} CMIC_PKT_REASON_MINI_1_TYPEr_t;

#define CMIC_PKT_REASON_MINI_1_TYPEr_CLR(r) (r).cmic_pkt_reason_mini_1_type[0] = 0
#define CMIC_PKT_REASON_MINI_1_TYPEr_SET(r,d) (r).cmic_pkt_reason_mini_1_type[0] = d
#define CMIC_PKT_REASON_MINI_1_TYPEr_GET(r) (r).cmic_pkt_reason_mini_1_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_REASON_MINI_1_TYPEr_REASONSf_GET(r) ((r).cmic_pkt_reason_mini_1_type[0])
#define CMIC_PKT_REASON_MINI_1_TYPEr_REASONSf_SET(r,f) (r).cmic_pkt_reason_mini_1_type[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_REASON_MINI_1_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_REASON_MINI_2_TYPE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_REASON_MINI_2_TYPEr_OFFSET 0x00022570

#define CMIC_PKT_REASON_MINI_2_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_REASON_MINI_2_TYPE.
 */
typedef union CMIC_PKT_REASON_MINI_2_TYPEr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_reason_mini_2_type[1];
	uint32_t _cmic_pkt_reason_mini_2_type;
} CMIC_PKT_REASON_MINI_2_TYPEr_t;

#define CMIC_PKT_REASON_MINI_2_TYPEr_CLR(r) (r).cmic_pkt_reason_mini_2_type[0] = 0
#define CMIC_PKT_REASON_MINI_2_TYPEr_SET(r,d) (r).cmic_pkt_reason_mini_2_type[0] = d
#define CMIC_PKT_REASON_MINI_2_TYPEr_GET(r) (r).cmic_pkt_reason_mini_2_type[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_REASON_MINI_2_TYPEr_REASONSf_GET(r) (((r).cmic_pkt_reason_mini_2_type[0]) & 0x1)
#define CMIC_PKT_REASON_MINI_2_TYPEr_REASONSf_SET(r,f) (r).cmic_pkt_reason_mini_2_type[0]=(((r).cmic_pkt_reason_mini_2_type[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_PKT_REASON_MINI_2_TYPEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_RMAC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_RMACr_OFFSET 0x00022230

#define CMIC_PKT_RMACr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_RMAC.
 */
typedef union CMIC_PKT_RMACr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_rmac[1];
	uint32_t _cmic_pkt_rmac;
} CMIC_PKT_RMACr_t;

#define CMIC_PKT_RMACr_CLR(r) (r).cmic_pkt_rmac[0] = 0
#define CMIC_PKT_RMACr_SET(r,d) (r).cmic_pkt_rmac[0] = d
#define CMIC_PKT_RMACr_GET(r) (r).cmic_pkt_rmac[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_RMACr_MAC_LOf_GET(r) ((r).cmic_pkt_rmac[0])
#define CMIC_PKT_RMACr_MAC_LOf_SET(r,f) (r).cmic_pkt_rmac[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_RMACr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_RMAC_HI
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_RMAC_HIr_OFFSET 0x00022234

#define CMIC_PKT_RMAC_HIr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_RMAC_HI.
 */
typedef union CMIC_PKT_RMAC_HIr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_rmac_hi[1];
	uint32_t _cmic_pkt_rmac_hi;
} CMIC_PKT_RMAC_HIr_t;

#define CMIC_PKT_RMAC_HIr_CLR(r) (r).cmic_pkt_rmac_hi[0] = 0
#define CMIC_PKT_RMAC_HIr_SET(r,d) (r).cmic_pkt_rmac_hi[0] = d
#define CMIC_PKT_RMAC_HIr_GET(r) (r).cmic_pkt_rmac_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_RMAC_HIr_MAC_HIf_GET(r) (((r).cmic_pkt_rmac_hi[0]) & 0xffff)
#define CMIC_PKT_RMAC_HIr_MAC_HIf_SET(r,f) (r).cmic_pkt_rmac_hi[0]=(((r).cmic_pkt_rmac_hi[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_PKT_RMAC_HIr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_RMH0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_RMH0r_OFFSET 0x00022238

#define CMIC_PKT_RMH0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_RMH0.
 */
typedef union CMIC_PKT_RMH0r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_rmh0[1];
	uint32_t _cmic_pkt_rmh0;
} CMIC_PKT_RMH0r_t;

#define CMIC_PKT_RMH0r_CLR(r) (r).cmic_pkt_rmh0[0] = 0
#define CMIC_PKT_RMH0r_SET(r,d) (r).cmic_pkt_rmh0[0] = d
#define CMIC_PKT_RMH0r_GET(r) (r).cmic_pkt_rmh0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_RMH0r_MH0f_GET(r) ((r).cmic_pkt_rmh0[0])
#define CMIC_PKT_RMH0r_MH0f_SET(r,f) (r).cmic_pkt_rmh0[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_RMH0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_RMH1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_RMH1r_OFFSET 0x0002223c

#define CMIC_PKT_RMH1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_RMH1.
 */
typedef union CMIC_PKT_RMH1r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_rmh1[1];
	uint32_t _cmic_pkt_rmh1;
} CMIC_PKT_RMH1r_t;

#define CMIC_PKT_RMH1r_CLR(r) (r).cmic_pkt_rmh1[0] = 0
#define CMIC_PKT_RMH1r_SET(r,d) (r).cmic_pkt_rmh1[0] = d
#define CMIC_PKT_RMH1r_GET(r) (r).cmic_pkt_rmh1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_RMH1r_MH1f_GET(r) ((r).cmic_pkt_rmh1[0])
#define CMIC_PKT_RMH1r_MH1f_SET(r,f) (r).cmic_pkt_rmh1[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_RMH1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_RMH2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_RMH2r_OFFSET 0x00022240

#define CMIC_PKT_RMH2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_RMH2.
 */
typedef union CMIC_PKT_RMH2r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_rmh2[1];
	uint32_t _cmic_pkt_rmh2;
} CMIC_PKT_RMH2r_t;

#define CMIC_PKT_RMH2r_CLR(r) (r).cmic_pkt_rmh2[0] = 0
#define CMIC_PKT_RMH2r_SET(r,d) (r).cmic_pkt_rmh2[0] = d
#define CMIC_PKT_RMH2r_GET(r) (r).cmic_pkt_rmh2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_RMH2r_MH2f_GET(r) ((r).cmic_pkt_rmh2[0])
#define CMIC_PKT_RMH2r_MH2f_SET(r,f) (r).cmic_pkt_rmh2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_RMH2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_RMH3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_RMH3r_OFFSET 0x00022364

#define CMIC_PKT_RMH3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_RMH3.
 */
typedef union CMIC_PKT_RMH3r_s {
	uint32_t v[1];
	uint32_t cmic_pkt_rmh3[1];
	uint32_t _cmic_pkt_rmh3;
} CMIC_PKT_RMH3r_t;

#define CMIC_PKT_RMH3r_CLR(r) (r).cmic_pkt_rmh3[0] = 0
#define CMIC_PKT_RMH3r_SET(r,d) (r).cmic_pkt_rmh3[0] = d
#define CMIC_PKT_RMH3r_GET(r) (r).cmic_pkt_rmh3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_RMH3r_MH3f_GET(r) ((r).cmic_pkt_rmh3[0])
#define CMIC_PKT_RMH3r_MH3f_SET(r,f) (r).cmic_pkt_rmh3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_PKT_RMH3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_PKT_VLAN
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_PKT_VLANr_OFFSET 0x00022214

#define CMIC_PKT_VLANr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_PKT_VLAN.
 */
typedef union CMIC_PKT_VLANr_s {
	uint32_t v[1];
	uint32_t cmic_pkt_vlan[1];
	uint32_t _cmic_pkt_vlan;
} CMIC_PKT_VLANr_t;

#define CMIC_PKT_VLANr_CLR(r) (r).cmic_pkt_vlan[0] = 0
#define CMIC_PKT_VLANr_SET(r,d) (r).cmic_pkt_vlan[0] = d
#define CMIC_PKT_VLANr_GET(r) (r).cmic_pkt_vlan[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_PKT_VLANr_VLAN_IDf_GET(r) (((r).cmic_pkt_vlan[0]) & 0xffff)
#define CMIC_PKT_VLANr_VLAN_IDf_SET(r,f) (r).cmic_pkt_vlan[0]=(((r).cmic_pkt_vlan[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_PKT_VLANr_TPIDf_GET(r) ((((r).cmic_pkt_vlan[0]) >> 16) & 0xffff)
#define CMIC_PKT_VLANr_TPIDf_SET(r,f) (r).cmic_pkt_vlan[0]=(((r).cmic_pkt_vlan[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*******************************************************************************
 * End of 'CMIC_PKT_VLANr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RATE_ADJUST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RATE_ADJUSTr_OFFSET 0x00011000

#define CMIC_RATE_ADJUSTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RATE_ADJUST.
 */
typedef union CMIC_RATE_ADJUSTr_s {
	uint32_t v[1];
	uint32_t cmic_rate_adjust[1];
	uint32_t _cmic_rate_adjust;
} CMIC_RATE_ADJUSTr_t;

#define CMIC_RATE_ADJUSTr_CLR(r) (r).cmic_rate_adjust[0] = 0
#define CMIC_RATE_ADJUSTr_SET(r,d) (r).cmic_rate_adjust[0] = d
#define CMIC_RATE_ADJUSTr_GET(r) (r).cmic_rate_adjust[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RATE_ADJUSTr_DIVISORf_GET(r) (((r).cmic_rate_adjust[0]) & 0xffff)
#define CMIC_RATE_ADJUSTr_DIVISORf_SET(r,f) (r).cmic_rate_adjust[0]=(((r).cmic_rate_adjust[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_RATE_ADJUSTr_DIVIDENDf_GET(r) ((((r).cmic_rate_adjust[0]) >> 16) & 0xffff)
#define CMIC_RATE_ADJUSTr_DIVIDENDf_SET(r,f) (r).cmic_rate_adjust[0]=(((r).cmic_rate_adjust[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*******************************************************************************
 * End of 'CMIC_RATE_ADJUSTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RATE_ADJUST_INT_MDIO
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RATE_ADJUST_INT_MDIOr_OFFSET 0x00011004

#define CMIC_RATE_ADJUST_INT_MDIOr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RATE_ADJUST_INT_MDIO.
 */
typedef union CMIC_RATE_ADJUST_INT_MDIOr_s {
	uint32_t v[1];
	uint32_t cmic_rate_adjust_int_mdio[1];
	uint32_t _cmic_rate_adjust_int_mdio;
} CMIC_RATE_ADJUST_INT_MDIOr_t;

#define CMIC_RATE_ADJUST_INT_MDIOr_CLR(r) (r).cmic_rate_adjust_int_mdio[0] = 0
#define CMIC_RATE_ADJUST_INT_MDIOr_SET(r,d) (r).cmic_rate_adjust_int_mdio[0] = d
#define CMIC_RATE_ADJUST_INT_MDIOr_GET(r) (r).cmic_rate_adjust_int_mdio[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RATE_ADJUST_INT_MDIOr_DIVISORf_GET(r) (((r).cmic_rate_adjust_int_mdio[0]) & 0xffff)
#define CMIC_RATE_ADJUST_INT_MDIOr_DIVISORf_SET(r,f) (r).cmic_rate_adjust_int_mdio[0]=(((r).cmic_rate_adjust_int_mdio[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_RATE_ADJUST_INT_MDIOr_DIVIDENDf_GET(r) ((((r).cmic_rate_adjust_int_mdio[0]) >> 16) & 0xffff)
#define CMIC_RATE_ADJUST_INT_MDIOr_DIVIDENDf_SET(r,f) (r).cmic_rate_adjust_int_mdio[0]=(((r).cmic_rate_adjust_int_mdio[0] & ~((uint32_t)0xffff << 16)) | ((((uint32_t)f) & 0xffff) << 16))

/*******************************************************************************
 * End of 'CMIC_RATE_ADJUST_INT_MDIOr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE0_MAX_CELL_LIMIT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE0_MAX_CELL_LIMITr_OFFSET 0x00022604

#define CMIC_RPE0_MAX_CELL_LIMITr_SIZE 4

/* CMIC_RPE0_MAX_CELL_LIMITr is element of CMIC_RPE_MAX_CELL_LIMIT */

/*******************************************************************************
 * REGISTER:  CMIC_RPE1_MAX_CELL_LIMIT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE1_MAX_CELL_LIMITr_OFFSET 0x00022600

#define CMIC_RPE1_MAX_CELL_LIMITr_SIZE 4

/* CMIC_RPE1_MAX_CELL_LIMITr is element of CMIC_RPE_MAX_CELL_LIMIT */

/*******************************************************************************
 * REGISTER:  CMIC_RPE_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_DEBUGr_OFFSET 0x00022610

#define CMIC_RPE_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_DEBUG.
 */
typedef union CMIC_RPE_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_debug[1];
	uint32_t _cmic_rpe_debug;
} CMIC_RPE_DEBUGr_t;

#define CMIC_RPE_DEBUGr_CLR(r) (r).cmic_rpe_debug[0] = 0
#define CMIC_RPE_DEBUGr_SET(r,d) (r).cmic_rpe_debug[0] = d
#define CMIC_RPE_DEBUGr_GET(r) (r).cmic_rpe_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_DEBUGr_RPE1_TMf_GET(r) (((r).cmic_rpe_debug[0]) & 0xfff)
#define CMIC_RPE_DEBUGr_RPE1_TMf_SET(r,f) (r).cmic_rpe_debug[0]=(((r).cmic_rpe_debug[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_RPE_DEBUGr_RPE0_TMf_GET(r) ((((r).cmic_rpe_debug[0]) >> 12) & 0xfff)
#define CMIC_RPE_DEBUGr_RPE0_TMf_SET(r,f) (r).cmic_rpe_debug[0]=(((r).cmic_rpe_debug[0] & ~((uint32_t)0xfff << 12)) | ((((uint32_t)f) & 0xfff) << 12))

/*******************************************************************************
 * End of 'CMIC_RPE_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_IRQ_STAT0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_IRQ_STAT0r_OFFSET 0x00022330

#define CMIC_RPE_IRQ_STAT0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_IRQ_STAT0.
 */
typedef union CMIC_RPE_IRQ_STAT0r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_irq_stat0[1];
	uint32_t _cmic_rpe_irq_stat0;
} CMIC_RPE_IRQ_STAT0r_t;

#define CMIC_RPE_IRQ_STAT0r_CLR(r) (r).cmic_rpe_irq_stat0[0] = 0
#define CMIC_RPE_IRQ_STAT0r_SET(r,d) (r).cmic_rpe_irq_stat0[0] = d
#define CMIC_RPE_IRQ_STAT0r_GET(r) (r).cmic_rpe_irq_stat0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_IRQ_STAT0r_MIIM_OP_DONEf_GET(r) (((r).cmic_rpe_irq_stat0[0]) & 0x1)
#define CMIC_RPE_IRQ_STAT0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_rpe_irq_stat0[0]=(((r).cmic_rpe_irq_stat0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_IRQ_STAT0r_SW_INTRf_GET(r) ((((r).cmic_rpe_irq_stat0[0]) >> 1) & 0xf)
#define CMIC_RPE_IRQ_STAT0r_SW_INTRf_SET(r,f) (r).cmic_rpe_irq_stat0[0]=(((r).cmic_rpe_irq_stat0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))

/*******************************************************************************
 * End of 'CMIC_RPE_IRQ_STAT0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_IRQ_STAT1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_IRQ_STAT1r_OFFSET 0x00022334

#define CMIC_RPE_IRQ_STAT1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_IRQ_STAT1.
 */
typedef union CMIC_RPE_IRQ_STAT1r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_irq_stat1[1];
	uint32_t _cmic_rpe_irq_stat1;
} CMIC_RPE_IRQ_STAT1r_t;

#define CMIC_RPE_IRQ_STAT1r_CLR(r) (r).cmic_rpe_irq_stat1[0] = 0
#define CMIC_RPE_IRQ_STAT1r_SET(r,d) (r).cmic_rpe_irq_stat1[0] = d
#define CMIC_RPE_IRQ_STAT1r_GET(r) (r).cmic_rpe_irq_stat1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_IRQ_STAT1r_I2C_INTRf_GET(r) (((r).cmic_rpe_irq_stat1[0]) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_I2C_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 1) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_RPE_IRQ_STAT1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 2) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_RPE_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 3) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_RPE_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 4) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_RPE_IRQ_STAT1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 5) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_RPE_IRQ_STAT1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 6) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_RPE_IRQ_STAT1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 7) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_RPE_IRQ_STAT1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 8) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_RPE_IRQ_STAT1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 9) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_RPE_IRQ_STAT1r_GPIO_INTRf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 10) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_GPIO_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_RPE_IRQ_STAT1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 11) & 0xff)
#define CMIC_RPE_IRQ_STAT1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_RPE_IRQ_STAT1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 19) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_RPE_IRQ_STAT1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 20) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_RPE_IRQ_STAT1r_WDT_0_INTRf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 21) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_WDT_0_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_RPE_IRQ_STAT1r_WDT_1_INTRf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 22) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_WDT_1_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_RPE_IRQ_STAT1r_TIM0_INTR1f_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 23) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_TIM0_INTR1f_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_RPE_IRQ_STAT1r_TIM0_INTR2f_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 24) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_TIM0_INTR2f_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_RPE_IRQ_STAT1r_TIM1_INTR1f_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 25) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_TIM1_INTR1f_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_RPE_IRQ_STAT1r_TIM1_INTR2f_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 26) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_TIM1_INTR2f_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_RPE_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 27) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_RPE_IRQ_STAT1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 28) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_RPE_IRQ_STAT1r_SER_INTRf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 29) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_SER_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_RPE_IRQ_STAT1r_SBUS_BLOCK_127_64_INTRf_GET(r) ((((r).cmic_rpe_irq_stat1[0]) >> 30) & 0x1)
#define CMIC_RPE_IRQ_STAT1r_SBUS_BLOCK_127_64_INTRf_SET(r,f) (r).cmic_rpe_irq_stat1[0]=(((r).cmic_rpe_irq_stat1[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_RPE_IRQ_STAT1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_IRQ_STAT2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_IRQ_STAT2r_OFFSET 0x00022338

#define CMIC_RPE_IRQ_STAT2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_IRQ_STAT2.
 */
typedef union CMIC_RPE_IRQ_STAT2r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_irq_stat2[1];
	uint32_t _cmic_rpe_irq_stat2;
} CMIC_RPE_IRQ_STAT2r_t;

#define CMIC_RPE_IRQ_STAT2r_CLR(r) (r).cmic_rpe_irq_stat2[0] = 0
#define CMIC_RPE_IRQ_STAT2r_SET(r,d) (r).cmic_rpe_irq_stat2[0] = d
#define CMIC_RPE_IRQ_STAT2r_GET(r) (r).cmic_rpe_irq_stat2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_GET(r) ((r).cmic_rpe_irq_stat2[0])
#define CMIC_RPE_IRQ_STAT2r_CHIP_PARITY_INTERUPT_STATUSf_SET(r,f) (r).cmic_rpe_irq_stat2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_IRQ_STAT2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_IRQ_STAT3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_IRQ_STAT3r_OFFSET 0x0002233c

#define CMIC_RPE_IRQ_STAT3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_IRQ_STAT3.
 */
typedef union CMIC_RPE_IRQ_STAT3r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_irq_stat3[1];
	uint32_t _cmic_rpe_irq_stat3;
} CMIC_RPE_IRQ_STAT3r_t;

#define CMIC_RPE_IRQ_STAT3r_CLR(r) (r).cmic_rpe_irq_stat3[0] = 0
#define CMIC_RPE_IRQ_STAT3r_SET(r,d) (r).cmic_rpe_irq_stat3[0] = d
#define CMIC_RPE_IRQ_STAT3r_GET(r) (r).cmic_rpe_irq_stat3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_rpe_irq_stat3[0])
#define CMIC_RPE_IRQ_STAT3r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_rpe_irq_stat3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_IRQ_STAT3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_IRQ_STAT4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_IRQ_STAT4r_OFFSET 0x00022340

#define CMIC_RPE_IRQ_STAT4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_IRQ_STAT4.
 */
typedef union CMIC_RPE_IRQ_STAT4r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_irq_stat4[1];
	uint32_t _cmic_rpe_irq_stat4;
} CMIC_RPE_IRQ_STAT4r_t;

#define CMIC_RPE_IRQ_STAT4r_CLR(r) (r).cmic_rpe_irq_stat4[0] = 0
#define CMIC_RPE_IRQ_STAT4r_SET(r,d) (r).cmic_rpe_irq_stat4[0] = d
#define CMIC_RPE_IRQ_STAT4r_GET(r) (r).cmic_rpe_irq_stat4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_rpe_irq_stat4[0])
#define CMIC_RPE_IRQ_STAT4r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_rpe_irq_stat4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_IRQ_STAT4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_IRQ_STAT5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_IRQ_STAT5r_OFFSET 0x000226b0

#define CMIC_RPE_IRQ_STAT5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_IRQ_STAT5.
 */
typedef union CMIC_RPE_IRQ_STAT5r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_irq_stat5[1];
	uint32_t _cmic_rpe_irq_stat5;
} CMIC_RPE_IRQ_STAT5r_t;

#define CMIC_RPE_IRQ_STAT5r_CLR(r) (r).cmic_rpe_irq_stat5[0] = 0
#define CMIC_RPE_IRQ_STAT5r_SET(r,d) (r).cmic_rpe_irq_stat5[0] = d
#define CMIC_RPE_IRQ_STAT5r_GET(r) (r).cmic_rpe_irq_stat5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_rpe_irq_stat5[0])
#define CMIC_RPE_IRQ_STAT5r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_rpe_irq_stat5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_IRQ_STAT5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_IRQ_STAT6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_IRQ_STAT6r_OFFSET 0x000226b4

#define CMIC_RPE_IRQ_STAT6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_IRQ_STAT6.
 */
typedef union CMIC_RPE_IRQ_STAT6r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_irq_stat6[1];
	uint32_t _cmic_rpe_irq_stat6;
} CMIC_RPE_IRQ_STAT6r_t;

#define CMIC_RPE_IRQ_STAT6r_CLR(r) (r).cmic_rpe_irq_stat6[0] = 0
#define CMIC_RPE_IRQ_STAT6r_SET(r,d) (r).cmic_rpe_irq_stat6[0] = d
#define CMIC_RPE_IRQ_STAT6r_GET(r) (r).cmic_rpe_irq_stat6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_GET(r) ((r).cmic_rpe_irq_stat6[0])
#define CMIC_RPE_IRQ_STAT6r_SBUS_SLAVE_INTERRUPTSf_SET(r,f) (r).cmic_rpe_irq_stat6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_IRQ_STAT6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_MAX_CELL_LIMIT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_MAX_CELL_LIMITr_OFFSET 0x00022368

#define CMIC_RPE_MAX_CELL_LIMITr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_MAX_CELL_LIMIT.
 */
typedef union CMIC_RPE_MAX_CELL_LIMITr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_max_cell_limit[1];
	uint32_t _cmic_rpe_max_cell_limit;
} CMIC_RPE_MAX_CELL_LIMITr_t;

#define CMIC_RPE_MAX_CELL_LIMITr_CLR(r) (r).cmic_rpe_max_cell_limit[0] = 0
#define CMIC_RPE_MAX_CELL_LIMITr_SET(r,d) (r).cmic_rpe_max_cell_limit[0] = d
#define CMIC_RPE_MAX_CELL_LIMITr_GET(r) (r).cmic_rpe_max_cell_limit[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_MAX_CELL_LIMITr_MAX_CELL_LIMITf_GET(r) (((r).cmic_rpe_max_cell_limit[0]) & 0xff)
#define CMIC_RPE_MAX_CELL_LIMITr_MAX_CELL_LIMITf_SET(r,f) (r).cmic_rpe_max_cell_limit[0]=(((r).cmic_rpe_max_cell_limit[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_RPE_MAX_CELL_LIMITr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_MIIM_ADDRESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_MIIM_ADDRESSr_OFFSET 0x00022088

#define CMIC_RPE_MIIM_ADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_MIIM_ADDRESS.
 */
typedef union CMIC_RPE_MIIM_ADDRESSr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_miim_address[1];
	uint32_t _cmic_rpe_miim_address;
} CMIC_RPE_MIIM_ADDRESSr_t;

#define CMIC_RPE_MIIM_ADDRESSr_CLR(r) (r).cmic_rpe_miim_address[0] = 0
#define CMIC_RPE_MIIM_ADDRESSr_SET(r,d) (r).cmic_rpe_miim_address[0] = d
#define CMIC_RPE_MIIM_ADDRESSr_GET(r) (r).cmic_rpe_miim_address[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_MIIM_ADDRESSr_CLAUSE_45_REGADRf_GET(r) (((r).cmic_rpe_miim_address[0]) & 0xffff)
#define CMIC_RPE_MIIM_ADDRESSr_CLAUSE_45_REGADRf_SET(r,f) (r).cmic_rpe_miim_address[0]=(((r).cmic_rpe_miim_address[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_RPE_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_GET(r) ((((r).cmic_rpe_miim_address[0]) >> 16) & 0x1f)
#define CMIC_RPE_MIIM_ADDRESSr_CLAUSE_45_DTYPEf_SET(r,f) (r).cmic_rpe_miim_address[0]=(((r).cmic_rpe_miim_address[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))

/*******************************************************************************
 * End of 'CMIC_RPE_MIIM_ADDRESSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_MIIM_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_MIIM_CTRLr_OFFSET 0x0002208c

#define CMIC_RPE_MIIM_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_MIIM_CTRL.
 */
typedef union CMIC_RPE_MIIM_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_miim_ctrl[1];
	uint32_t _cmic_rpe_miim_ctrl;
} CMIC_RPE_MIIM_CTRLr_t;

#define CMIC_RPE_MIIM_CTRLr_CLR(r) (r).cmic_rpe_miim_ctrl[0] = 0
#define CMIC_RPE_MIIM_CTRLr_SET(r,d) (r).cmic_rpe_miim_ctrl[0] = d
#define CMIC_RPE_MIIM_CTRLr_GET(r) (r).cmic_rpe_miim_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_MIIM_CTRLr_MIIM_WR_STARTf_GET(r) (((r).cmic_rpe_miim_ctrl[0]) & 0x1)
#define CMIC_RPE_MIIM_CTRLr_MIIM_WR_STARTf_SET(r,f) (r).cmic_rpe_miim_ctrl[0]=(((r).cmic_rpe_miim_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_MIIM_CTRLr_MIIM_RD_STARTf_GET(r) ((((r).cmic_rpe_miim_ctrl[0]) >> 1) & 0x1)
#define CMIC_RPE_MIIM_CTRLr_MIIM_RD_STARTf_SET(r,f) (r).cmic_rpe_miim_ctrl[0]=(((r).cmic_rpe_miim_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_RPE_MIIM_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_MIIM_PARAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_MIIM_PARAMr_OFFSET 0x00022080

#define CMIC_RPE_MIIM_PARAMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_MIIM_PARAM.
 */
typedef union CMIC_RPE_MIIM_PARAMr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_miim_param[1];
	uint32_t _cmic_rpe_miim_param;
} CMIC_RPE_MIIM_PARAMr_t;

#define CMIC_RPE_MIIM_PARAMr_CLR(r) (r).cmic_rpe_miim_param[0] = 0
#define CMIC_RPE_MIIM_PARAMr_SET(r,d) (r).cmic_rpe_miim_param[0] = d
#define CMIC_RPE_MIIM_PARAMr_GET(r) (r).cmic_rpe_miim_param[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_MIIM_PARAMr_PHY_DATAf_GET(r) (((r).cmic_rpe_miim_param[0]) & 0xffff)
#define CMIC_RPE_MIIM_PARAMr_PHY_DATAf_SET(r,f) (r).cmic_rpe_miim_param[0]=(((r).cmic_rpe_miim_param[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_RPE_MIIM_PARAMr_PHY_IDf_GET(r) ((((r).cmic_rpe_miim_param[0]) >> 16) & 0x1f)
#define CMIC_RPE_MIIM_PARAMr_PHY_IDf_SET(r,f) (r).cmic_rpe_miim_param[0]=(((r).cmic_rpe_miim_param[0] & ~((uint32_t)0x1f << 16)) | ((((uint32_t)f) & 0x1f) << 16))
#define CMIC_RPE_MIIM_PARAMr_C45_SELf_GET(r) ((((r).cmic_rpe_miim_param[0]) >> 21) & 0x1)
#define CMIC_RPE_MIIM_PARAMr_C45_SELf_SET(r,f) (r).cmic_rpe_miim_param[0]=(((r).cmic_rpe_miim_param[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_RPE_MIIM_PARAMr_BUS_IDf_GET(r) ((((r).cmic_rpe_miim_param[0]) >> 22) & 0x7)
#define CMIC_RPE_MIIM_PARAMr_BUS_IDf_SET(r,f) (r).cmic_rpe_miim_param[0]=(((r).cmic_rpe_miim_param[0] & ~((uint32_t)0x7 << 22)) | ((((uint32_t)f) & 0x7) << 22))
#define CMIC_RPE_MIIM_PARAMr_INTERNAL_SELf_GET(r) ((((r).cmic_rpe_miim_param[0]) >> 25) & 0x1)
#define CMIC_RPE_MIIM_PARAMr_INTERNAL_SELf_SET(r,f) (r).cmic_rpe_miim_param[0]=(((r).cmic_rpe_miim_param[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_RPE_MIIM_PARAMr_MIIM_CYCLEf_GET(r) ((((r).cmic_rpe_miim_param[0]) >> 29) & 0x7)
#define CMIC_RPE_MIIM_PARAMr_MIIM_CYCLEf_SET(r,f) (r).cmic_rpe_miim_param[0]=(((r).cmic_rpe_miim_param[0] & ~((uint32_t)0x7 << 29)) | ((((uint32_t)f) & 0x7) << 29))

/*******************************************************************************
 * End of 'CMIC_RPE_MIIM_PARAMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_MIIM_READ_DATA
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_MIIM_READ_DATAr_OFFSET 0x00022084

#define CMIC_RPE_MIIM_READ_DATAr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_MIIM_READ_DATA.
 */
typedef union CMIC_RPE_MIIM_READ_DATAr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_miim_read_data[1];
	uint32_t _cmic_rpe_miim_read_data;
} CMIC_RPE_MIIM_READ_DATAr_t;

#define CMIC_RPE_MIIM_READ_DATAr_CLR(r) (r).cmic_rpe_miim_read_data[0] = 0
#define CMIC_RPE_MIIM_READ_DATAr_SET(r,d) (r).cmic_rpe_miim_read_data[0] = d
#define CMIC_RPE_MIIM_READ_DATAr_GET(r) (r).cmic_rpe_miim_read_data[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_MIIM_READ_DATAr_DATAf_GET(r) (((r).cmic_rpe_miim_read_data[0]) & 0xffff)
#define CMIC_RPE_MIIM_READ_DATAr_DATAf_SET(r,f) (r).cmic_rpe_miim_read_data[0]=(((r).cmic_rpe_miim_read_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_RPE_MIIM_READ_DATAr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_MIIM_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_MIIM_STATr_OFFSET 0x00022090

#define CMIC_RPE_MIIM_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_MIIM_STAT.
 */
typedef union CMIC_RPE_MIIM_STATr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_miim_stat[1];
	uint32_t _cmic_rpe_miim_stat;
} CMIC_RPE_MIIM_STATr_t;

#define CMIC_RPE_MIIM_STATr_CLR(r) (r).cmic_rpe_miim_stat[0] = 0
#define CMIC_RPE_MIIM_STATr_SET(r,d) (r).cmic_rpe_miim_stat[0] = d
#define CMIC_RPE_MIIM_STATr_GET(r) (r).cmic_rpe_miim_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_MIIM_STATr_MIIM_OPN_DONEf_GET(r) (((r).cmic_rpe_miim_stat[0]) & 0x1)
#define CMIC_RPE_MIIM_STATr_MIIM_OPN_DONEf_SET(r,f) (r).cmic_rpe_miim_stat[0]=(((r).cmic_rpe_miim_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_RPE_MIIM_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_PCIE_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_PCIE_IRQ_MASK0r_OFFSET 0x00022358

#define CMIC_RPE_PCIE_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_PCIE_IRQ_MASK0.
 */
typedef union CMIC_RPE_PCIE_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_pcie_irq_mask0[1];
	uint32_t _cmic_rpe_pcie_irq_mask0;
} CMIC_RPE_PCIE_IRQ_MASK0r_t;

#define CMIC_RPE_PCIE_IRQ_MASK0r_CLR(r) (r).cmic_rpe_pcie_irq_mask0[0] = 0
#define CMIC_RPE_PCIE_IRQ_MASK0r_SET(r,d) (r).cmic_rpe_pcie_irq_mask0[0] = d
#define CMIC_RPE_PCIE_IRQ_MASK0r_GET(r) (r).cmic_rpe_pcie_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) (((r).cmic_rpe_pcie_irq_mask0[0]) & 0x1)
#define CMIC_RPE_PCIE_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_rpe_pcie_irq_mask0[0]=(((r).cmic_rpe_pcie_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_PCIE_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_rpe_pcie_irq_mask0[0]) >> 1) & 0xf)
#define CMIC_RPE_PCIE_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_rpe_pcie_irq_mask0[0]=(((r).cmic_rpe_pcie_irq_mask0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))

/*******************************************************************************
 * End of 'CMIC_RPE_PCIE_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_RCPU_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_RCPU_IRQ_MASK0r_OFFSET 0x00022344

#define CMIC_RPE_RCPU_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_RCPU_IRQ_MASK0.
 */
typedef union CMIC_RPE_RCPU_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_rcpu_irq_mask0[1];
	uint32_t _cmic_rpe_rcpu_irq_mask0;
} CMIC_RPE_RCPU_IRQ_MASK0r_t;

#define CMIC_RPE_RCPU_IRQ_MASK0r_CLR(r) (r).cmic_rpe_rcpu_irq_mask0[0] = 0
#define CMIC_RPE_RCPU_IRQ_MASK0r_SET(r,d) (r).cmic_rpe_rcpu_irq_mask0[0] = d
#define CMIC_RPE_RCPU_IRQ_MASK0r_GET(r) (r).cmic_rpe_rcpu_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) (((r).cmic_rpe_rcpu_irq_mask0[0]) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask0[0]=(((r).cmic_rpe_rcpu_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_RCPU_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask0[0]) >> 1) & 0xf)
#define CMIC_RPE_RCPU_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask0[0]=(((r).cmic_rpe_rcpu_irq_mask0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))

/*******************************************************************************
 * End of 'CMIC_RPE_RCPU_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_RCPU_IRQ_MASK1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_RCPU_IRQ_MASK1r_OFFSET 0x00022348

#define CMIC_RPE_RCPU_IRQ_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_RCPU_IRQ_MASK1.
 */
typedef union CMIC_RPE_RCPU_IRQ_MASK1r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_rcpu_irq_mask1[1];
	uint32_t _cmic_rpe_rcpu_irq_mask1;
} CMIC_RPE_RCPU_IRQ_MASK1r_t;

#define CMIC_RPE_RCPU_IRQ_MASK1r_CLR(r) (r).cmic_rpe_rcpu_irq_mask1[0] = 0
#define CMIC_RPE_RCPU_IRQ_MASK1r_SET(r,d) (r).cmic_rpe_rcpu_irq_mask1[0] = d
#define CMIC_RPE_RCPU_IRQ_MASK1r_GET(r) (r).cmic_rpe_rcpu_irq_mask1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_RCPU_IRQ_MASK1r_I2C_INTRf_GET(r) (((r).cmic_rpe_rcpu_irq_mask1[0]) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_I2C_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_RCPU_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 1) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_PCIE_ECRC_ERR_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIMESYNC_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 2) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIMESYNC_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_RPE_RCPU_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 3) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_PHY_LINKSCAN_LINKSTATUS_CHDf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_RPE_RCPU_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 4) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_PHY_PAUSESCAN_PAUSESTATUS_CHDf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_RPE_RCPU_IRQ_MASK1r_SPI_INTERRUPTf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 5) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_SPI_INTERRUPTf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_RPE_RCPU_IRQ_MASK1r_UART0_INTERRUPTf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 6) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_UART0_INTERRUPTf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_RPE_RCPU_IRQ_MASK1r_UART1_INTERRUPTf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 7) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_UART1_INTERRUPTf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_RPE_RCPU_IRQ_MASK1r_COMMON_SCHAN_DONEf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 8) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_COMMON_SCHAN_DONEf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_RPE_RCPU_IRQ_MASK1r_MIIM_OP_DONEf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 9) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_MIIM_OP_DONEf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_RPE_RCPU_IRQ_MASK1r_GPIO_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 10) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_GPIO_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_RPE_RCPU_IRQ_MASK1r_CHIP_FUNC_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 11) & 0xff)
#define CMIC_RPE_RCPU_IRQ_MASK1r_CHIP_FUNC_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0xff << 11)) | ((((uint32_t)f) & 0xff) << 11))
#define CMIC_RPE_RCPU_IRQ_MASK1r_UC_0_PMUIRQf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 19) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_UC_0_PMUIRQf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))
#define CMIC_RPE_RCPU_IRQ_MASK1r_UC_1_PMUIRQf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 20) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_UC_1_PMUIRQf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 20)) | ((((uint32_t)f) & 0x1) << 20))
#define CMIC_RPE_RCPU_IRQ_MASK1r_WDT_0_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 21) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_WDT_0_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 21)) | ((((uint32_t)f) & 0x1) << 21))
#define CMIC_RPE_RCPU_IRQ_MASK1r_WDT_1_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 22) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_WDT_1_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 22)) | ((((uint32_t)f) & 0x1) << 22))
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIM0_INTR1f_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 23) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIM0_INTR1f_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIM0_INTR2f_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 24) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIM0_INTR2f_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 24)) | ((((uint32_t)f) & 0x1) << 24))
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIM1_INTR1f_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 25) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIM1_INTR1f_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIM1_INTR2f_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 26) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_TIM1_INTR2f_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_RPE_RCPU_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 27) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_PCIEINTF_NEEDS_CLEANUPf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_RPE_RCPU_IRQ_MASK1r_SRAM_ECC_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 28) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_SRAM_ECC_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))
#define CMIC_RPE_RCPU_IRQ_MASK1r_SER_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 29) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_SER_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 29)) | ((((uint32_t)f) & 0x1) << 29))
#define CMIC_RPE_RCPU_IRQ_MASK1r_SBUS_BLOCK_127_64_INTRf_GET(r) ((((r).cmic_rpe_rcpu_irq_mask1[0]) >> 30) & 0x1)
#define CMIC_RPE_RCPU_IRQ_MASK1r_SBUS_BLOCK_127_64_INTRf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask1[0]=(((r).cmic_rpe_rcpu_irq_mask1[0] & ~((uint32_t)0x1 << 30)) | ((((uint32_t)f) & 0x1) << 30))

/*******************************************************************************
 * End of 'CMIC_RPE_RCPU_IRQ_MASK1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_RCPU_IRQ_MASK2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_RCPU_IRQ_MASK2r_OFFSET 0x0002234c

#define CMIC_RPE_RCPU_IRQ_MASK2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_RCPU_IRQ_MASK2.
 */
typedef union CMIC_RPE_RCPU_IRQ_MASK2r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_rcpu_irq_mask2[1];
	uint32_t _cmic_rpe_rcpu_irq_mask2;
} CMIC_RPE_RCPU_IRQ_MASK2r_t;

#define CMIC_RPE_RCPU_IRQ_MASK2r_CLR(r) (r).cmic_rpe_rcpu_irq_mask2[0] = 0
#define CMIC_RPE_RCPU_IRQ_MASK2r_SET(r,d) (r).cmic_rpe_rcpu_irq_mask2[0] = d
#define CMIC_RPE_RCPU_IRQ_MASK2r_GET(r) (r).cmic_rpe_rcpu_irq_mask2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_RCPU_IRQ_MASK2r_MASKf_GET(r) ((r).cmic_rpe_rcpu_irq_mask2[0])
#define CMIC_RPE_RCPU_IRQ_MASK2r_MASKf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask2[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_RCPU_IRQ_MASK2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_RCPU_IRQ_MASK3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_RCPU_IRQ_MASK3r_OFFSET 0x00022350

#define CMIC_RPE_RCPU_IRQ_MASK3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_RCPU_IRQ_MASK3.
 */
typedef union CMIC_RPE_RCPU_IRQ_MASK3r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_rcpu_irq_mask3[1];
	uint32_t _cmic_rpe_rcpu_irq_mask3;
} CMIC_RPE_RCPU_IRQ_MASK3r_t;

#define CMIC_RPE_RCPU_IRQ_MASK3r_CLR(r) (r).cmic_rpe_rcpu_irq_mask3[0] = 0
#define CMIC_RPE_RCPU_IRQ_MASK3r_SET(r,d) (r).cmic_rpe_rcpu_irq_mask3[0] = d
#define CMIC_RPE_RCPU_IRQ_MASK3r_GET(r) (r).cmic_rpe_rcpu_irq_mask3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_RCPU_IRQ_MASK3r_MASKf_GET(r) ((r).cmic_rpe_rcpu_irq_mask3[0])
#define CMIC_RPE_RCPU_IRQ_MASK3r_MASKf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask3[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_RCPU_IRQ_MASK3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_RCPU_IRQ_MASK4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_RCPU_IRQ_MASK4r_OFFSET 0x00022354

#define CMIC_RPE_RCPU_IRQ_MASK4r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_RCPU_IRQ_MASK4.
 */
typedef union CMIC_RPE_RCPU_IRQ_MASK4r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_rcpu_irq_mask4[1];
	uint32_t _cmic_rpe_rcpu_irq_mask4;
} CMIC_RPE_RCPU_IRQ_MASK4r_t;

#define CMIC_RPE_RCPU_IRQ_MASK4r_CLR(r) (r).cmic_rpe_rcpu_irq_mask4[0] = 0
#define CMIC_RPE_RCPU_IRQ_MASK4r_SET(r,d) (r).cmic_rpe_rcpu_irq_mask4[0] = d
#define CMIC_RPE_RCPU_IRQ_MASK4r_GET(r) (r).cmic_rpe_rcpu_irq_mask4[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_RCPU_IRQ_MASK4r_MASKf_GET(r) ((r).cmic_rpe_rcpu_irq_mask4[0])
#define CMIC_RPE_RCPU_IRQ_MASK4r_MASKf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask4[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_RCPU_IRQ_MASK4r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_RCPU_IRQ_MASK5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_RCPU_IRQ_MASK5r_OFFSET 0x000226b8

#define CMIC_RPE_RCPU_IRQ_MASK5r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_RCPU_IRQ_MASK5.
 */
typedef union CMIC_RPE_RCPU_IRQ_MASK5r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_rcpu_irq_mask5[1];
	uint32_t _cmic_rpe_rcpu_irq_mask5;
} CMIC_RPE_RCPU_IRQ_MASK5r_t;

#define CMIC_RPE_RCPU_IRQ_MASK5r_CLR(r) (r).cmic_rpe_rcpu_irq_mask5[0] = 0
#define CMIC_RPE_RCPU_IRQ_MASK5r_SET(r,d) (r).cmic_rpe_rcpu_irq_mask5[0] = d
#define CMIC_RPE_RCPU_IRQ_MASK5r_GET(r) (r).cmic_rpe_rcpu_irq_mask5[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_RCPU_IRQ_MASK5r_MASKf_GET(r) ((r).cmic_rpe_rcpu_irq_mask5[0])
#define CMIC_RPE_RCPU_IRQ_MASK5r_MASKf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask5[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_RCPU_IRQ_MASK5r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_RCPU_IRQ_MASK6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_RCPU_IRQ_MASK6r_OFFSET 0x000226bc

#define CMIC_RPE_RCPU_IRQ_MASK6r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_RCPU_IRQ_MASK6.
 */
typedef union CMIC_RPE_RCPU_IRQ_MASK6r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_rcpu_irq_mask6[1];
	uint32_t _cmic_rpe_rcpu_irq_mask6;
} CMIC_RPE_RCPU_IRQ_MASK6r_t;

#define CMIC_RPE_RCPU_IRQ_MASK6r_CLR(r) (r).cmic_rpe_rcpu_irq_mask6[0] = 0
#define CMIC_RPE_RCPU_IRQ_MASK6r_SET(r,d) (r).cmic_rpe_rcpu_irq_mask6[0] = d
#define CMIC_RPE_RCPU_IRQ_MASK6r_GET(r) (r).cmic_rpe_rcpu_irq_mask6[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_RCPU_IRQ_MASK6r_MASKf_GET(r) ((r).cmic_rpe_rcpu_irq_mask6[0])
#define CMIC_RPE_RCPU_IRQ_MASK6r_MASKf_SET(r,f) (r).cmic_rpe_rcpu_irq_mask6[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_RPE_RCPU_IRQ_MASK6r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_STATr_OFFSET 0x00022248

#define CMIC_RPE_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_STAT.
 */
typedef union CMIC_RPE_STATr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_stat[1];
	uint32_t _cmic_rpe_stat;
} CMIC_RPE_STATr_t;

#define CMIC_RPE_STATr_CLR(r) (r).cmic_rpe_stat[0] = 0
#define CMIC_RPE_STATr_SET(r,d) (r).cmic_rpe_stat[0] = d
#define CMIC_RPE_STATr_GET(r) (r).cmic_rpe_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_STATr_RPE1_ECCERRf_GET(r) (((r).cmic_rpe_stat[0]) & 0x1)
#define CMIC_RPE_STATr_RPE1_ECCERRf_SET(r,f) (r).cmic_rpe_stat[0]=(((r).cmic_rpe_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_STATr_RPE0_ECCERRf_GET(r) ((((r).cmic_rpe_stat[0]) >> 1) & 0x1)
#define CMIC_RPE_STATr_RPE0_ECCERRf_SET(r,f) (r).cmic_rpe_stat[0]=(((r).cmic_rpe_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_RPE_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_STAT_CLRr_OFFSET 0x0002224c

#define CMIC_RPE_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_STAT_CLR.
 */
typedef union CMIC_RPE_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_stat_clr[1];
	uint32_t _cmic_rpe_stat_clr;
} CMIC_RPE_STAT_CLRr_t;

#define CMIC_RPE_STAT_CLRr_CLR(r) (r).cmic_rpe_stat_clr[0] = 0
#define CMIC_RPE_STAT_CLRr_SET(r,d) (r).cmic_rpe_stat_clr[0] = d
#define CMIC_RPE_STAT_CLRr_GET(r) (r).cmic_rpe_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_STAT_CLRr_RPE1_ECCERR_CLRf_GET(r) (((r).cmic_rpe_stat_clr[0]) & 0x1)
#define CMIC_RPE_STAT_CLRr_RPE1_ECCERR_CLRf_SET(r,f) (r).cmic_rpe_stat_clr[0]=(((r).cmic_rpe_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_STAT_CLRr_RPE0_ECCERR_CLRf_GET(r) ((((r).cmic_rpe_stat_clr[0]) >> 1) & 0x1)
#define CMIC_RPE_STAT_CLRr_RPE0_ECCERR_CLRf_SET(r,f) (r).cmic_rpe_stat_clr[0]=(((r).cmic_rpe_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_RPE_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_SW_INTR_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_SW_INTR_CONFIGr_OFFSET 0x0002236c

#define CMIC_RPE_SW_INTR_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_SW_INTR_CONFIG.
 */
typedef union CMIC_RPE_SW_INTR_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_rpe_sw_intr_config[1];
	uint32_t _cmic_rpe_sw_intr_config;
} CMIC_RPE_SW_INTR_CONFIGr_t;

#define CMIC_RPE_SW_INTR_CONFIGr_CLR(r) (r).cmic_rpe_sw_intr_config[0] = 0
#define CMIC_RPE_SW_INTR_CONFIGr_SET(r,d) (r).cmic_rpe_sw_intr_config[0] = d
#define CMIC_RPE_SW_INTR_CONFIGr_GET(r) (r).cmic_rpe_sw_intr_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_GET(r) (((r).cmic_rpe_sw_intr_config[0]) & 0x3)
#define CMIC_RPE_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_POSITIONf_SET(r,f) (r).cmic_rpe_sw_intr_config[0]=(((r).cmic_rpe_sw_intr_config[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define CMIC_RPE_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_GET(r) ((((r).cmic_rpe_sw_intr_config[0]) >> 2) & 0x1)
#define CMIC_RPE_SW_INTR_CONFIGr_SW_INTR_STAT_BIT_VALUEf_SET(r,f) (r).cmic_rpe_sw_intr_config[0]=(((r).cmic_rpe_sw_intr_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_RPE_SW_INTR_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_UC0_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_UC0_IRQ_MASK0r_OFFSET 0x0002235c

#define CMIC_RPE_UC0_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_UC0_IRQ_MASK0.
 */
typedef union CMIC_RPE_UC0_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_uc0_irq_mask0[1];
	uint32_t _cmic_rpe_uc0_irq_mask0;
} CMIC_RPE_UC0_IRQ_MASK0r_t;

#define CMIC_RPE_UC0_IRQ_MASK0r_CLR(r) (r).cmic_rpe_uc0_irq_mask0[0] = 0
#define CMIC_RPE_UC0_IRQ_MASK0r_SET(r,d) (r).cmic_rpe_uc0_irq_mask0[0] = d
#define CMIC_RPE_UC0_IRQ_MASK0r_GET(r) (r).cmic_rpe_uc0_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_UC0_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) (((r).cmic_rpe_uc0_irq_mask0[0]) & 0x1)
#define CMIC_RPE_UC0_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_rpe_uc0_irq_mask0[0]=(((r).cmic_rpe_uc0_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_UC0_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_rpe_uc0_irq_mask0[0]) >> 1) & 0xf)
#define CMIC_RPE_UC0_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_rpe_uc0_irq_mask0[0]=(((r).cmic_rpe_uc0_irq_mask0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))

/*******************************************************************************
 * End of 'CMIC_RPE_UC0_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RPE_UC1_IRQ_MASK0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RPE_UC1_IRQ_MASK0r_OFFSET 0x00022360

#define CMIC_RPE_UC1_IRQ_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RPE_UC1_IRQ_MASK0.
 */
typedef union CMIC_RPE_UC1_IRQ_MASK0r_s {
	uint32_t v[1];
	uint32_t cmic_rpe_uc1_irq_mask0[1];
	uint32_t _cmic_rpe_uc1_irq_mask0;
} CMIC_RPE_UC1_IRQ_MASK0r_t;

#define CMIC_RPE_UC1_IRQ_MASK0r_CLR(r) (r).cmic_rpe_uc1_irq_mask0[0] = 0
#define CMIC_RPE_UC1_IRQ_MASK0r_SET(r,d) (r).cmic_rpe_uc1_irq_mask0[0] = d
#define CMIC_RPE_UC1_IRQ_MASK0r_GET(r) (r).cmic_rpe_uc1_irq_mask0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RPE_UC1_IRQ_MASK0r_MIIM_OP_DONEf_GET(r) (((r).cmic_rpe_uc1_irq_mask0[0]) & 0x1)
#define CMIC_RPE_UC1_IRQ_MASK0r_MIIM_OP_DONEf_SET(r,f) (r).cmic_rpe_uc1_irq_mask0[0]=(((r).cmic_rpe_uc1_irq_mask0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RPE_UC1_IRQ_MASK0r_SW_INTRf_GET(r) ((((r).cmic_rpe_uc1_irq_mask0[0]) >> 1) & 0xf)
#define CMIC_RPE_UC1_IRQ_MASK0r_SW_INTRf_SET(r,f) (r).cmic_rpe_uc1_irq_mask0[0]=(((r).cmic_rpe_uc1_irq_mask0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))

/*******************************************************************************
 * End of 'CMIC_RPE_UC1_IRQ_MASK0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_BLOCK_DATABUF_ALLOC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_BLOCK_DATABUF_ALLOCr_OFFSET 0x0001a01c

#define CMIC_RXBUF_BLOCK_DATABUF_ALLOCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_BLOCK_DATABUF_ALLOC.
 */
typedef union CMIC_RXBUF_BLOCK_DATABUF_ALLOCr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_block_databuf_alloc[1];
	uint32_t _cmic_rxbuf_block_databuf_alloc;
} CMIC_RXBUF_BLOCK_DATABUF_ALLOCr_t;

#define CMIC_RXBUF_BLOCK_DATABUF_ALLOCr_CLR(r) (r).cmic_rxbuf_block_databuf_alloc[0] = 0
#define CMIC_RXBUF_BLOCK_DATABUF_ALLOCr_SET(r,d) (r).cmic_rxbuf_block_databuf_alloc[0] = d
#define CMIC_RXBUF_BLOCK_DATABUF_ALLOCr_GET(r) (r).cmic_rxbuf_block_databuf_alloc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_BLOCK_DATABUF_ALLOCr_BLOCK_ALLOCf_GET(r) (((r).cmic_rxbuf_block_databuf_alloc[0]) & 0x1)
#define CMIC_RXBUF_BLOCK_DATABUF_ALLOCr_BLOCK_ALLOCf_SET(r,f) (r).cmic_rxbuf_block_databuf_alloc[0]=(((r).cmic_rxbuf_block_databuf_alloc[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_RXBUF_BLOCK_DATABUF_ALLOCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_BLOCK_STATUSBUF_ALLOC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr_OFFSET 0x0001a018

#define CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_BLOCK_STATUSBUF_ALLOC.
 */
typedef union CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_block_statusbuf_alloc[1];
	uint32_t _cmic_rxbuf_block_statusbuf_alloc;
} CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr_t;

#define CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr_CLR(r) (r).cmic_rxbuf_block_statusbuf_alloc[0] = 0
#define CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr_SET(r,d) (r).cmic_rxbuf_block_statusbuf_alloc[0] = d
#define CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr_GET(r) (r).cmic_rxbuf_block_statusbuf_alloc[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr_BLOCK_ALLOCf_GET(r) (((r).cmic_rxbuf_block_statusbuf_alloc[0]) & 0x1)
#define CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr_BLOCK_ALLOCf_SET(r,f) (r).cmic_rxbuf_block_statusbuf_alloc[0]=(((r).cmic_rxbuf_block_statusbuf_alloc[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_RXBUF_BLOCK_STATUSBUF_ALLOCr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_CONFIGr_OFFSET 0x0001a024

#define CMIC_RXBUF_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_CONFIG.
 */
typedef union CMIC_RXBUF_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_config[1];
	uint32_t _cmic_rxbuf_config;
} CMIC_RXBUF_CONFIGr_t;

#define CMIC_RXBUF_CONFIGr_CLR(r) (r).cmic_rxbuf_config[0] = 0
#define CMIC_RXBUF_CONFIGr_SET(r,d) (r).cmic_rxbuf_config[0] = d
#define CMIC_RXBUF_CONFIGr_GET(r) (r).cmic_rxbuf_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_CONFIGr_CMC0_ECC_CHECK_ENf_GET(r) (((r).cmic_rxbuf_config[0]) & 0x1)
#define CMIC_RXBUF_CONFIGr_CMC0_ECC_CHECK_ENf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RXBUF_CONFIGr_CMC1_ECC_CHECK_ENf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 1) & 0x1)
#define CMIC_RXBUF_CONFIGr_CMC1_ECC_CHECK_ENf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_RXBUF_CONFIGr_CMC2_ECC_CHECK_ENf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 2) & 0x1)
#define CMIC_RXBUF_CONFIGr_CMC2_ECC_CHECK_ENf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_RXBUF_CONFIGr_RPE_ECC_CHECK_ENf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 3) & 0x1)
#define CMIC_RXBUF_CONFIGr_RPE_ECC_CHECK_ENf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_RXBUF_CONFIGr_RXPKTBUF_ECC_PROTECTION_ENf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 4) & 0x1)
#define CMIC_RXBUF_CONFIGr_RXPKTBUF_ECC_PROTECTION_ENf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_RXBUF_CONFIGr_RXSTATUSBUF_ECC_PROTECTION_ENf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 5) & 0x1)
#define CMIC_RXBUF_CONFIGr_RXSTATUSBUF_ECC_PROTECTION_ENf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_RXBUF_CONFIGr_RXSTATUSBUF_MEM_TMf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 6) & 0x3ff)
#define CMIC_RXBUF_CONFIGr_RXSTATUSBUF_MEM_TMf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define CMIC_RXBUF_CONFIGr_RXSTATUSBUF_MEM_DCMf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 16) & 0x1)
#define CMIC_RXBUF_CONFIGr_RXSTATUSBUF_MEM_DCMf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x1 << 16)) | ((((uint32_t)f) & 0x1) << 16))
#define CMIC_RXBUF_CONFIGr_RXDATABUF_MEM_TMf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 17) & 0x3ff)
#define CMIC_RXBUF_CONFIGr_RXDATABUF_MEM_TMf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x3ff << 17)) | ((((uint32_t)f) & 0x3ff) << 17))
#define CMIC_RXBUF_CONFIGr_RXDATABUF_MEM_DCMf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 27) & 0x1)
#define CMIC_RXBUF_CONFIGr_RXDATABUF_MEM_DCMf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_RXBUF_CONFIGr_FLUSH_EPINTFBUFf_GET(r) ((((r).cmic_rxbuf_config[0]) >> 28) & 0x1)
#define CMIC_RXBUF_CONFIGr_FLUSH_EPINTFBUFf_SET(r,f) (r).cmic_rxbuf_config[0]=(((r).cmic_rxbuf_config[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))

/*******************************************************************************
 * End of 'CMIC_RXBUF_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIES
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr_OFFSET 0x0001a00c

#define CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIES.
 */
typedef union CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_databuf_max_flist_entries[1];
	uint32_t _cmic_rxbuf_databuf_max_flist_entries;
} CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr_t;

#define CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr_CLR(r) (r).cmic_rxbuf_databuf_max_flist_entries[0] = 0
#define CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr_SET(r,d) (r).cmic_rxbuf_databuf_max_flist_entries[0] = d
#define CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr_GET(r) (r).cmic_rxbuf_databuf_max_flist_entries[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr_MAX_NUMBER_OF_ENTRIES_ENCf_GET(r) (((r).cmic_rxbuf_databuf_max_flist_entries[0]) & 0xf)
#define CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr_MAX_NUMBER_OF_ENTRIES_ENCf_SET(r,f) (r).cmic_rxbuf_databuf_max_flist_entries[0]=(((r).cmic_rxbuf_databuf_max_flist_entries[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*******************************************************************************
 * End of 'CMIC_RXBUF_DATABUF_MAX_FLIST_ENTRIESr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIES
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr_OFFSET 0x0001a014

#define CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIES.
 */
typedef union CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_databuf_num_free_entries[1];
	uint32_t _cmic_rxbuf_databuf_num_free_entries;
} CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr_t;

#define CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr_CLR(r) (r).cmic_rxbuf_databuf_num_free_entries[0] = 0
#define CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr_SET(r,d) (r).cmic_rxbuf_databuf_num_free_entries[0] = d
#define CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr_GET(r) (r).cmic_rxbuf_databuf_num_free_entries[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr_NUMBER_OF_FREE_ENTRIESf_GET(r) (((r).cmic_rxbuf_databuf_num_free_entries[0]) & 0x1ff)
#define CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr_NUMBER_OF_FREE_ENTRIESf_SET(r,f) (r).cmic_rxbuf_databuf_num_free_entries[0]=(((r).cmic_rxbuf_databuf_num_free_entries[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*******************************************************************************
 * End of 'CMIC_RXBUF_DATABUF_NUM_FREE_ENTRIESr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_DATABUF_TM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_DATABUF_TMr_OFFSET 0x0001a02c

#define CMIC_RXBUF_DATABUF_TMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_DATABUF_TM.
 */
typedef union CMIC_RXBUF_DATABUF_TMr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_databuf_tm[1];
	uint32_t _cmic_rxbuf_databuf_tm;
} CMIC_RXBUF_DATABUF_TMr_t;

#define CMIC_RXBUF_DATABUF_TMr_CLR(r) (r).cmic_rxbuf_databuf_tm[0] = 0
#define CMIC_RXBUF_DATABUF_TMr_SET(r,d) (r).cmic_rxbuf_databuf_tm[0] = d
#define CMIC_RXBUF_DATABUF_TMr_GET(r) (r).cmic_rxbuf_databuf_tm[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_DATABUF_TMr_BUF_00_TMf_GET(r) (((r).cmic_rxbuf_databuf_tm[0]) & 0xfff)
#define CMIC_RXBUF_DATABUF_TMr_BUF_00_TMf_SET(r,f) (r).cmic_rxbuf_databuf_tm[0]=(((r).cmic_rxbuf_databuf_tm[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_RXBUF_DATABUF_TMr_BUF_00_LVMf_GET(r) ((((r).cmic_rxbuf_databuf_tm[0]) >> 12) & 0x1)
#define CMIC_RXBUF_DATABUF_TMr_BUF_00_LVMf_SET(r,f) (r).cmic_rxbuf_databuf_tm[0]=(((r).cmic_rxbuf_databuf_tm[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_RXBUF_DATABUF_TMr_BUF_01_TMf_GET(r) ((((r).cmic_rxbuf_databuf_tm[0]) >> 13) & 0xfff)
#define CMIC_RXBUF_DATABUF_TMr_BUF_01_TMf_SET(r,f) (r).cmic_rxbuf_databuf_tm[0]=(((r).cmic_rxbuf_databuf_tm[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_RXBUF_DATABUF_TMr_BUF_01_LVMf_GET(r) ((((r).cmic_rxbuf_databuf_tm[0]) >> 25) & 0x1)
#define CMIC_RXBUF_DATABUF_TMr_BUF_01_LVMf_SET(r,f) (r).cmic_rxbuf_databuf_tm[0]=(((r).cmic_rxbuf_databuf_tm[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_RXBUF_DATABUF_TMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_DATABUF_TM_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_DATABUF_TM_0r_OFFSET 0x0001a02c

#define CMIC_RXBUF_DATABUF_TM_0r_SIZE 4

/* CMIC_RXBUF_DATABUF_TM_0r is element of CMIC_RXBUF_DATABUF_TM */

/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_DATABUF_TM_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_DATABUF_TM_1r_OFFSET 0x0001a030

#define CMIC_RXBUF_DATABUF_TM_1r_SIZE 4

/* CMIC_RXBUF_DATABUF_TM_1r is element of CMIC_RXBUF_DATABUF_TM */

/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_DATABUF_TM_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_DATABUF_TM_2r_OFFSET 0x0001a034

#define CMIC_RXBUF_DATABUF_TM_2r_SIZE 4

/* CMIC_RXBUF_DATABUF_TM_2r is element of CMIC_RXBUF_DATABUF_TM */

/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_ECCERR_CONTROLr_OFFSET 0x0001a028

#define CMIC_RXBUF_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_ECCERR_CONTROL.
 */
typedef union CMIC_RXBUF_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_eccerr_control[1];
	uint32_t _cmic_rxbuf_eccerr_control;
} CMIC_RXBUF_ECCERR_CONTROLr_t;

#define CMIC_RXBUF_ECCERR_CONTROLr_CLR(r) (r).cmic_rxbuf_eccerr_control[0] = 0
#define CMIC_RXBUF_ECCERR_CONTROLr_SET(r,d) (r).cmic_rxbuf_eccerr_control[0] = d
#define CMIC_RXBUF_ECCERR_CONTROLr_GET(r) (r).cmic_rxbuf_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_STATUSBUFf_GET(r) (((r).cmic_rxbuf_eccerr_control[0]) & 0x1)
#define CMIC_RXBUF_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_STATUSBUFf_SET(r,f) (r).cmic_rxbuf_eccerr_control[0]=(((r).cmic_rxbuf_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_RXBUF_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_STATUSBUFf_GET(r) ((((r).cmic_rxbuf_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_RXBUF_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_STATUSBUFf_SET(r,f) (r).cmic_rxbuf_eccerr_control[0]=(((r).cmic_rxbuf_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_RXBUF_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DATABUFf_GET(r) ((((r).cmic_rxbuf_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_RXBUF_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DATABUFf_SET(r,f) (r).cmic_rxbuf_eccerr_control[0]=(((r).cmic_rxbuf_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_RXBUF_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DATABUFf_GET(r) ((((r).cmic_rxbuf_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_RXBUF_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DATABUFf_SET(r,f) (r).cmic_rxbuf_eccerr_control[0]=(((r).cmic_rxbuf_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_RXBUF_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_EP_BUF_DEPTH
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_EP_BUF_DEPTHr_OFFSET 0x0001a020

#define CMIC_RXBUF_EP_BUF_DEPTHr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_EP_BUF_DEPTH.
 */
typedef union CMIC_RXBUF_EP_BUF_DEPTHr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_ep_buf_depth[1];
	uint32_t _cmic_rxbuf_ep_buf_depth;
} CMIC_RXBUF_EP_BUF_DEPTHr_t;

#define CMIC_RXBUF_EP_BUF_DEPTHr_CLR(r) (r).cmic_rxbuf_ep_buf_depth[0] = 0
#define CMIC_RXBUF_EP_BUF_DEPTHr_SET(r,d) (r).cmic_rxbuf_ep_buf_depth[0] = d
#define CMIC_RXBUF_EP_BUF_DEPTHr_GET(r) (r).cmic_rxbuf_ep_buf_depth[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_EP_BUF_DEPTHr_BUF_DEPTHf_GET(r) (((r).cmic_rxbuf_ep_buf_depth[0]) & 0x3f)
#define CMIC_RXBUF_EP_BUF_DEPTHr_BUF_DEPTHf_SET(r,f) (r).cmic_rxbuf_ep_buf_depth[0]=(((r).cmic_rxbuf_ep_buf_depth[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*******************************************************************************
 * End of 'CMIC_RXBUF_EP_BUF_DEPTHr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_EP_MAX_CRED
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_EP_MAX_CREDr_OFFSET 0x0001a004

#define CMIC_RXBUF_EP_MAX_CREDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_EP_MAX_CRED.
 */
typedef union CMIC_RXBUF_EP_MAX_CREDr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_ep_max_cred[1];
	uint32_t _cmic_rxbuf_ep_max_cred;
} CMIC_RXBUF_EP_MAX_CREDr_t;

#define CMIC_RXBUF_EP_MAX_CREDr_CLR(r) (r).cmic_rxbuf_ep_max_cred[0] = 0
#define CMIC_RXBUF_EP_MAX_CREDr_SET(r,d) (r).cmic_rxbuf_ep_max_cred[0] = d
#define CMIC_RXBUF_EP_MAX_CREDr_GET(r) (r).cmic_rxbuf_ep_max_cred[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_EP_MAX_CREDr_MAX_CREDITSf_GET(r) (((r).cmic_rxbuf_ep_max_cred[0]) & 0x3f)
#define CMIC_RXBUF_EP_MAX_CREDr_MAX_CREDITSf_SET(r,f) (r).cmic_rxbuf_ep_max_cred[0]=(((r).cmic_rxbuf_ep_max_cred[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*******************************************************************************
 * End of 'CMIC_RXBUF_EP_MAX_CREDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_EP_RLS_CRED
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_EP_RLS_CREDr_OFFSET 0x0001a000

#define CMIC_RXBUF_EP_RLS_CREDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_EP_RLS_CRED.
 */
typedef union CMIC_RXBUF_EP_RLS_CREDr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_ep_rls_cred[1];
	uint32_t _cmic_rxbuf_ep_rls_cred;
} CMIC_RXBUF_EP_RLS_CREDr_t;

#define CMIC_RXBUF_EP_RLS_CREDr_CLR(r) (r).cmic_rxbuf_ep_rls_cred[0] = 0
#define CMIC_RXBUF_EP_RLS_CREDr_SET(r,d) (r).cmic_rxbuf_ep_rls_cred[0] = d
#define CMIC_RXBUF_EP_RLS_CREDr_GET(r) (r).cmic_rxbuf_ep_rls_cred[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_EP_RLS_CREDr_RELEASE_ALL_CREDITSf_GET(r) (((r).cmic_rxbuf_ep_rls_cred[0]) & 0x1)
#define CMIC_RXBUF_EP_RLS_CREDr_RELEASE_ALL_CREDITSf_SET(r,f) (r).cmic_rxbuf_ep_rls_cred[0]=(((r).cmic_rxbuf_ep_rls_cred[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_RXBUF_EP_RLS_CREDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_STATBUF_TM_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_STATBUF_TM_0r_OFFSET 0x0001a038

#define CMIC_RXBUF_STATBUF_TM_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_STATBUF_TM_0.
 */
typedef union CMIC_RXBUF_STATBUF_TM_0r_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_statbuf_tm_0[1];
	uint32_t _cmic_rxbuf_statbuf_tm_0;
} CMIC_RXBUF_STATBUF_TM_0r_t;

#define CMIC_RXBUF_STATBUF_TM_0r_CLR(r) (r).cmic_rxbuf_statbuf_tm_0[0] = 0
#define CMIC_RXBUF_STATBUF_TM_0r_SET(r,d) (r).cmic_rxbuf_statbuf_tm_0[0] = d
#define CMIC_RXBUF_STATBUF_TM_0r_GET(r) (r).cmic_rxbuf_statbuf_tm_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_STATBUF_TM_0r_BUF_0_TMf_GET(r) (((r).cmic_rxbuf_statbuf_tm_0[0]) & 0xfff)
#define CMIC_RXBUF_STATBUF_TM_0r_BUF_0_TMf_SET(r,f) (r).cmic_rxbuf_statbuf_tm_0[0]=(((r).cmic_rxbuf_statbuf_tm_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_RXBUF_STATBUF_TM_0r_BUF_0_LVMf_GET(r) ((((r).cmic_rxbuf_statbuf_tm_0[0]) >> 12) & 0x1)
#define CMIC_RXBUF_STATBUF_TM_0r_BUF_0_LVMf_SET(r,f) (r).cmic_rxbuf_statbuf_tm_0[0]=(((r).cmic_rxbuf_statbuf_tm_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_RXBUF_STATBUF_TM_0r_BUF_1_TMf_GET(r) ((((r).cmic_rxbuf_statbuf_tm_0[0]) >> 13) & 0xfff)
#define CMIC_RXBUF_STATBUF_TM_0r_BUF_1_TMf_SET(r,f) (r).cmic_rxbuf_statbuf_tm_0[0]=(((r).cmic_rxbuf_statbuf_tm_0[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_RXBUF_STATBUF_TM_0r_BUF_1_LVMf_GET(r) ((((r).cmic_rxbuf_statbuf_tm_0[0]) >> 25) & 0x1)
#define CMIC_RXBUF_STATBUF_TM_0r_BUF_1_LVMf_SET(r,f) (r).cmic_rxbuf_statbuf_tm_0[0]=(((r).cmic_rxbuf_statbuf_tm_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_RXBUF_STATBUF_TM_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_STATBUF_TM_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_STATBUF_TM_1r_OFFSET 0x0001a03c

#define CMIC_RXBUF_STATBUF_TM_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_STATBUF_TM_1.
 */
typedef union CMIC_RXBUF_STATBUF_TM_1r_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_statbuf_tm_1[1];
	uint32_t _cmic_rxbuf_statbuf_tm_1;
} CMIC_RXBUF_STATBUF_TM_1r_t;

#define CMIC_RXBUF_STATBUF_TM_1r_CLR(r) (r).cmic_rxbuf_statbuf_tm_1[0] = 0
#define CMIC_RXBUF_STATBUF_TM_1r_SET(r,d) (r).cmic_rxbuf_statbuf_tm_1[0] = d
#define CMIC_RXBUF_STATBUF_TM_1r_GET(r) (r).cmic_rxbuf_statbuf_tm_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_STATBUF_TM_1r_BUF_2_TMf_GET(r) (((r).cmic_rxbuf_statbuf_tm_1[0]) & 0xfff)
#define CMIC_RXBUF_STATBUF_TM_1r_BUF_2_TMf_SET(r,f) (r).cmic_rxbuf_statbuf_tm_1[0]=(((r).cmic_rxbuf_statbuf_tm_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_RXBUF_STATBUF_TM_1r_BUF_2_LVMf_GET(r) ((((r).cmic_rxbuf_statbuf_tm_1[0]) >> 12) & 0x1)
#define CMIC_RXBUF_STATBUF_TM_1r_BUF_2_LVMf_SET(r,f) (r).cmic_rxbuf_statbuf_tm_1[0]=(((r).cmic_rxbuf_statbuf_tm_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_RXBUF_STATBUF_TM_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIES
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr_OFFSET 0x0001a008

#define CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIES.
 */
typedef union CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_statusbuf_max_flist_entries[1];
	uint32_t _cmic_rxbuf_statusbuf_max_flist_entries;
} CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr_t;

#define CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr_CLR(r) (r).cmic_rxbuf_statusbuf_max_flist_entries[0] = 0
#define CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr_SET(r,d) (r).cmic_rxbuf_statusbuf_max_flist_entries[0] = d
#define CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr_GET(r) (r).cmic_rxbuf_statusbuf_max_flist_entries[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr_MAX_NUMBER_OF_ENTRIES_ENCf_GET(r) (((r).cmic_rxbuf_statusbuf_max_flist_entries[0]) & 0x7)
#define CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr_MAX_NUMBER_OF_ENTRIES_ENCf_SET(r,f) (r).cmic_rxbuf_statusbuf_max_flist_entries[0]=(((r).cmic_rxbuf_statusbuf_max_flist_entries[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*******************************************************************************
 * End of 'CMIC_RXBUF_STATUSBUF_MAX_FLIST_ENTRIESr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIES
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr_OFFSET 0x0001a010

#define CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIES.
 */
typedef union CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr_s {
	uint32_t v[1];
	uint32_t cmic_rxbuf_statusbuf_num_free_entries[1];
	uint32_t _cmic_rxbuf_statusbuf_num_free_entries;
} CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr_t;

#define CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr_CLR(r) (r).cmic_rxbuf_statusbuf_num_free_entries[0] = 0
#define CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr_SET(r,d) (r).cmic_rxbuf_statusbuf_num_free_entries[0] = d
#define CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr_GET(r) (r).cmic_rxbuf_statusbuf_num_free_entries[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr_NUMBER_OF_FREE_ENTRIESf_GET(r) (((r).cmic_rxbuf_statusbuf_num_free_entries[0]) & 0xff)
#define CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr_NUMBER_OF_FREE_ENTRIESf_SET(r,f) (r).cmic_rxbuf_statusbuf_num_free_entries[0]=(((r).cmic_rxbuf_statusbuf_num_free_entries[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_RXBUF_STATUSBUF_NUM_FREE_ENTRIESr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAPr_OFFSET 0x00010098

#define CMIC_SBUS_RING_MAPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SBUS_RING_MAP.
 */
typedef union CMIC_SBUS_RING_MAPr_s {
	uint32_t v[1];
	uint32_t cmic_sbus_ring_map[1];
	uint32_t _cmic_sbus_ring_map;
} CMIC_SBUS_RING_MAPr_t;

#define CMIC_SBUS_RING_MAPr_CLR(r) (r).cmic_sbus_ring_map[0] = 0
#define CMIC_SBUS_RING_MAPr_SET(r,d) (r).cmic_sbus_ring_map[0] = d
#define CMIC_SBUS_RING_MAPr_GET(r) (r).cmic_sbus_ring_map[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_0f_GET(r) (((r).cmic_sbus_ring_map[0]) & 0xf)
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_0f_SET(r,f) (r).cmic_sbus_ring_map[0]=(((r).cmic_sbus_ring_map[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_1f_GET(r) ((((r).cmic_sbus_ring_map[0]) >> 4) & 0xf)
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_1f_SET(r,f) (r).cmic_sbus_ring_map[0]=(((r).cmic_sbus_ring_map[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_2f_GET(r) ((((r).cmic_sbus_ring_map[0]) >> 8) & 0xf)
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_2f_SET(r,f) (r).cmic_sbus_ring_map[0]=(((r).cmic_sbus_ring_map[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_3f_GET(r) ((((r).cmic_sbus_ring_map[0]) >> 12) & 0xf)
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_3f_SET(r,f) (r).cmic_sbus_ring_map[0]=(((r).cmic_sbus_ring_map[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_4f_GET(r) ((((r).cmic_sbus_ring_map[0]) >> 16) & 0xf)
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_4f_SET(r,f) (r).cmic_sbus_ring_map[0]=(((r).cmic_sbus_ring_map[0] & ~((uint32_t)0xf << 16)) | ((((uint32_t)f) & 0xf) << 16))
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_5f_GET(r) ((((r).cmic_sbus_ring_map[0]) >> 20) & 0xf)
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_5f_SET(r,f) (r).cmic_sbus_ring_map[0]=(((r).cmic_sbus_ring_map[0] & ~((uint32_t)0xf << 20)) | ((((uint32_t)f) & 0xf) << 20))
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_6f_GET(r) ((((r).cmic_sbus_ring_map[0]) >> 24) & 0xf)
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_6f_SET(r,f) (r).cmic_sbus_ring_map[0]=(((r).cmic_sbus_ring_map[0] & ~((uint32_t)0xf << 24)) | ((((uint32_t)f) & 0xf) << 24))
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_7f_GET(r) ((((r).cmic_sbus_ring_map[0]) >> 28) & 0xf)
#define CMIC_SBUS_RING_MAPr_RING_NUM_SBUS_ID_7f_SET(r,f) (r).cmic_sbus_ring_map[0]=(((r).cmic_sbus_ring_map[0] & ~((uint32_t)0xf << 28)) | ((((uint32_t)f) & 0xf) << 28))

/*******************************************************************************
 * End of 'CMIC_SBUS_RING_MAPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_0_7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_0_7r_OFFSET 0x00010098

#define CMIC_SBUS_RING_MAP_0_7r_SIZE 4

/* CMIC_SBUS_RING_MAP_0_7r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_104_111
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_104_111r_OFFSET 0x000100cc

#define CMIC_SBUS_RING_MAP_104_111r_SIZE 4

/* CMIC_SBUS_RING_MAP_104_111r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_112_119
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_112_119r_OFFSET 0x000100d0

#define CMIC_SBUS_RING_MAP_112_119r_SIZE 4

/* CMIC_SBUS_RING_MAP_112_119r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_120_127
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_120_127r_OFFSET 0x000100d4

#define CMIC_SBUS_RING_MAP_120_127r_SIZE 4

/* CMIC_SBUS_RING_MAP_120_127r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_16_23
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_16_23r_OFFSET 0x000100a0

#define CMIC_SBUS_RING_MAP_16_23r_SIZE 4

/* CMIC_SBUS_RING_MAP_16_23r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_24_31
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_24_31r_OFFSET 0x000100a4

#define CMIC_SBUS_RING_MAP_24_31r_SIZE 4

/* CMIC_SBUS_RING_MAP_24_31r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_32_39
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_32_39r_OFFSET 0x000100a8

#define CMIC_SBUS_RING_MAP_32_39r_SIZE 4

/* CMIC_SBUS_RING_MAP_32_39r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_40_47
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_40_47r_OFFSET 0x000100ac

#define CMIC_SBUS_RING_MAP_40_47r_SIZE 4

/* CMIC_SBUS_RING_MAP_40_47r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_48_55
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_48_55r_OFFSET 0x000100b0

#define CMIC_SBUS_RING_MAP_48_55r_SIZE 4

/* CMIC_SBUS_RING_MAP_48_55r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_56_63
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_56_63r_OFFSET 0x000100b4

#define CMIC_SBUS_RING_MAP_56_63r_SIZE 4

/* CMIC_SBUS_RING_MAP_56_63r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_64_71
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_64_71r_OFFSET 0x000100b8

#define CMIC_SBUS_RING_MAP_64_71r_SIZE 4

/* CMIC_SBUS_RING_MAP_64_71r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_72_79
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_72_79r_OFFSET 0x000100bc

#define CMIC_SBUS_RING_MAP_72_79r_SIZE 4

/* CMIC_SBUS_RING_MAP_72_79r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_80_87
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_80_87r_OFFSET 0x000100c0

#define CMIC_SBUS_RING_MAP_80_87r_SIZE 4

/* CMIC_SBUS_RING_MAP_80_87r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_88_95
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_88_95r_OFFSET 0x000100c4

#define CMIC_SBUS_RING_MAP_88_95r_SIZE 4

/* CMIC_SBUS_RING_MAP_88_95r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_8_15
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_8_15r_OFFSET 0x0001009c

#define CMIC_SBUS_RING_MAP_8_15r_SIZE 4

/* CMIC_SBUS_RING_MAP_8_15r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_RING_MAP_96_103
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_RING_MAP_96_103r_OFFSET 0x000100c8

#define CMIC_SBUS_RING_MAP_96_103r_SIZE 4

/* CMIC_SBUS_RING_MAP_96_103r is element of CMIC_SBUS_RING_MAP */

/*******************************************************************************
 * REGISTER:  CMIC_SBUS_TIMEOUT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SBUS_TIMEOUTr_OFFSET 0x00010094

#define CMIC_SBUS_TIMEOUTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SBUS_TIMEOUT.
 */
typedef union CMIC_SBUS_TIMEOUTr_s {
	uint32_t v[1];
	uint32_t cmic_sbus_timeout[1];
	uint32_t _cmic_sbus_timeout;
} CMIC_SBUS_TIMEOUTr_t;

#define CMIC_SBUS_TIMEOUTr_CLR(r) (r).cmic_sbus_timeout[0] = 0
#define CMIC_SBUS_TIMEOUTr_SET(r,d) (r).cmic_sbus_timeout[0] = d
#define CMIC_SBUS_TIMEOUTr_GET(r) (r).cmic_sbus_timeout[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SBUS_TIMEOUTr_TIMEOUT_VALf_GET(r) ((r).cmic_sbus_timeout[0])
#define CMIC_SBUS_TIMEOUTr_TIMEOUT_VALf_SET(r,f) (r).cmic_sbus_timeout[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_SBUS_TIMEOUTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SCHAN_RCPU_RPIO_MESSAGE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SCHAN_RCPU_RPIO_MESSAGEr_OFFSET 0x000222d8

#define CMIC_SCHAN_RCPU_RPIO_MESSAGEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SCHAN_RCPU_RPIO_MESSAGE.
 */
typedef union CMIC_SCHAN_RCPU_RPIO_MESSAGEr_s {
	uint32_t v[1];
	uint32_t cmic_schan_rcpu_rpio_message[1];
	uint32_t _cmic_schan_rcpu_rpio_message;
} CMIC_SCHAN_RCPU_RPIO_MESSAGEr_t;

#define CMIC_SCHAN_RCPU_RPIO_MESSAGEr_CLR(r) (r).cmic_schan_rcpu_rpio_message[0] = 0
#define CMIC_SCHAN_RCPU_RPIO_MESSAGEr_SET(r,d) (r).cmic_schan_rcpu_rpio_message[0] = d
#define CMIC_SCHAN_RCPU_RPIO_MESSAGEr_GET(r) (r).cmic_schan_rcpu_rpio_message[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SCHAN_RCPU_RPIO_MESSAGEr_DATAf_GET(r) ((r).cmic_schan_rcpu_rpio_message[0])
#define CMIC_SCHAN_RCPU_RPIO_MESSAGEr_DATAf_SET(r,f) (r).cmic_schan_rcpu_rpio_message[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_SCHAN_RCPU_RPIO_MESSAGEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHOREr_OFFSET 0x00010300

#define CMIC_SEMAPHOREr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SEMAPHORE.
 */
typedef union CMIC_SEMAPHOREr_s {
	uint32_t v[1];
	uint32_t cmic_semaphore[1];
	uint32_t _cmic_semaphore;
} CMIC_SEMAPHOREr_t;

#define CMIC_SEMAPHOREr_CLR(r) (r).cmic_semaphore[0] = 0
#define CMIC_SEMAPHOREr_SET(r,d) (r).cmic_semaphore[0] = d
#define CMIC_SEMAPHOREr_GET(r) (r).cmic_semaphore[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SEMAPHOREr_SEMAPHOREf_GET(r) (((r).cmic_semaphore[0]) & 0x1)
#define CMIC_SEMAPHOREr_SEMAPHOREf_SET(r,f) (r).cmic_semaphore[0]=(((r).cmic_semaphore[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_SEMAPHOREr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_1r_OFFSET 0x00010300

#define CMIC_SEMAPHORE_1r_SIZE 4

/* CMIC_SEMAPHORE_1r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_10
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_10r_OFFSET 0x00010348

#define CMIC_SEMAPHORE_10r_SIZE 4

/* CMIC_SEMAPHORE_10r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_10_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_10_SHADOWr_OFFSET 0x0001034c

#define CMIC_SEMAPHORE_10_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_10_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_11
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_11r_OFFSET 0x00010350

#define CMIC_SEMAPHORE_11r_SIZE 4

/* CMIC_SEMAPHORE_11r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_11_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_11_SHADOWr_OFFSET 0x00010354

#define CMIC_SEMAPHORE_11_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_11_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_12
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_12r_OFFSET 0x00010358

#define CMIC_SEMAPHORE_12r_SIZE 4

/* CMIC_SEMAPHORE_12r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_12_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_12_SHADOWr_OFFSET 0x0001035c

#define CMIC_SEMAPHORE_12_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_12_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_13
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_13r_OFFSET 0x00010360

#define CMIC_SEMAPHORE_13r_SIZE 4

/* CMIC_SEMAPHORE_13r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_13_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_13_SHADOWr_OFFSET 0x00010364

#define CMIC_SEMAPHORE_13_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_13_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_14
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_14r_OFFSET 0x00010368

#define CMIC_SEMAPHORE_14r_SIZE 4

/* CMIC_SEMAPHORE_14r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_14_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_14_SHADOWr_OFFSET 0x0001036c

#define CMIC_SEMAPHORE_14_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_14_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_15
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_15r_OFFSET 0x00010370

#define CMIC_SEMAPHORE_15r_SIZE 4

/* CMIC_SEMAPHORE_15r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_15_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_15_SHADOWr_OFFSET 0x00010374

#define CMIC_SEMAPHORE_15_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_15_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_16
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_16r_OFFSET 0x00010378

#define CMIC_SEMAPHORE_16r_SIZE 4

/* CMIC_SEMAPHORE_16r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_16_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_16_SHADOWr_OFFSET 0x0001037c

#define CMIC_SEMAPHORE_16_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_16_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_17
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_17r_OFFSET 0x00010380

#define CMIC_SEMAPHORE_17r_SIZE 4

/* CMIC_SEMAPHORE_17r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_17_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_17_SHADOWr_OFFSET 0x00010384

#define CMIC_SEMAPHORE_17_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_17_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_18
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_18r_OFFSET 0x00010388

#define CMIC_SEMAPHORE_18r_SIZE 4

/* CMIC_SEMAPHORE_18r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_18_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_18_SHADOWr_OFFSET 0x0001038c

#define CMIC_SEMAPHORE_18_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_18_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_19
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_19r_OFFSET 0x00010390

#define CMIC_SEMAPHORE_19r_SIZE 4

/* CMIC_SEMAPHORE_19r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_19_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_19_SHADOWr_OFFSET 0x00010394

#define CMIC_SEMAPHORE_19_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_19_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_1_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_1_SHADOWr_OFFSET 0x00010304

#define CMIC_SEMAPHORE_1_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_1_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_2r_OFFSET 0x00010308

#define CMIC_SEMAPHORE_2r_SIZE 4

/* CMIC_SEMAPHORE_2r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_20
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_20r_OFFSET 0x00010398

#define CMIC_SEMAPHORE_20r_SIZE 4

/* CMIC_SEMAPHORE_20r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_20_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_20_SHADOWr_OFFSET 0x0001039c

#define CMIC_SEMAPHORE_20_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_20_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_21
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_21r_OFFSET 0x000103a0

#define CMIC_SEMAPHORE_21r_SIZE 4

/* CMIC_SEMAPHORE_21r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_21_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_21_SHADOWr_OFFSET 0x000103a4

#define CMIC_SEMAPHORE_21_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_21_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_22
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_22r_OFFSET 0x000103a8

#define CMIC_SEMAPHORE_22r_SIZE 4

/* CMIC_SEMAPHORE_22r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_22_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_22_SHADOWr_OFFSET 0x000103ac

#define CMIC_SEMAPHORE_22_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_22_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_23
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_23r_OFFSET 0x000103b0

#define CMIC_SEMAPHORE_23r_SIZE 4

/* CMIC_SEMAPHORE_23r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_23_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_23_SHADOWr_OFFSET 0x000103b4

#define CMIC_SEMAPHORE_23_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_23_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_24
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_24r_OFFSET 0x000103b8

#define CMIC_SEMAPHORE_24r_SIZE 4

/* CMIC_SEMAPHORE_24r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_24_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_24_SHADOWr_OFFSET 0x000103bc

#define CMIC_SEMAPHORE_24_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_24_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_25
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_25r_OFFSET 0x000103c0

#define CMIC_SEMAPHORE_25r_SIZE 4

/* CMIC_SEMAPHORE_25r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_25_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_25_SHADOWr_OFFSET 0x000103c4

#define CMIC_SEMAPHORE_25_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_25_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_26
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_26r_OFFSET 0x000103c8

#define CMIC_SEMAPHORE_26r_SIZE 4

/* CMIC_SEMAPHORE_26r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_26_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_26_SHADOWr_OFFSET 0x000103cc

#define CMIC_SEMAPHORE_26_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_26_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_27
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_27r_OFFSET 0x000103d0

#define CMIC_SEMAPHORE_27r_SIZE 4

/* CMIC_SEMAPHORE_27r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_27_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_27_SHADOWr_OFFSET 0x000103d4

#define CMIC_SEMAPHORE_27_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_27_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_28
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_28r_OFFSET 0x000103d8

#define CMIC_SEMAPHORE_28r_SIZE 4

/* CMIC_SEMAPHORE_28r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_28_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_28_SHADOWr_OFFSET 0x000103dc

#define CMIC_SEMAPHORE_28_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_28_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_29
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_29r_OFFSET 0x000103e0

#define CMIC_SEMAPHORE_29r_SIZE 4

/* CMIC_SEMAPHORE_29r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_29_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_29_SHADOWr_OFFSET 0x000103e4

#define CMIC_SEMAPHORE_29_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_29_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_2_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_2_SHADOWr_OFFSET 0x0001030c

#define CMIC_SEMAPHORE_2_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_2_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_3r_OFFSET 0x00010310

#define CMIC_SEMAPHORE_3r_SIZE 4

/* CMIC_SEMAPHORE_3r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_30
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_30r_OFFSET 0x000103e8

#define CMIC_SEMAPHORE_30r_SIZE 4

/* CMIC_SEMAPHORE_30r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_30_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_30_SHADOWr_OFFSET 0x000103ec

#define CMIC_SEMAPHORE_30_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_30_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_31
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_31r_OFFSET 0x000103f0

#define CMIC_SEMAPHORE_31r_SIZE 4

/* CMIC_SEMAPHORE_31r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_31_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_31_SHADOWr_OFFSET 0x000103f4

#define CMIC_SEMAPHORE_31_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_31_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_32
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_32r_OFFSET 0x000103f8

#define CMIC_SEMAPHORE_32r_SIZE 4

/* CMIC_SEMAPHORE_32r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_32_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_32_SHADOWr_OFFSET 0x000103fc

#define CMIC_SEMAPHORE_32_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_32_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_3_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_3_SHADOWr_OFFSET 0x00010314

#define CMIC_SEMAPHORE_3_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_3_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_4
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_4r_OFFSET 0x00010318

#define CMIC_SEMAPHORE_4r_SIZE 4

/* CMIC_SEMAPHORE_4r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_4_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_4_SHADOWr_OFFSET 0x0001031c

#define CMIC_SEMAPHORE_4_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_4_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_5
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_5r_OFFSET 0x00010320

#define CMIC_SEMAPHORE_5r_SIZE 4

/* CMIC_SEMAPHORE_5r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_5_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_5_SHADOWr_OFFSET 0x00010324

#define CMIC_SEMAPHORE_5_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_5_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_6
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_6r_OFFSET 0x00010328

#define CMIC_SEMAPHORE_6r_SIZE 4

/* CMIC_SEMAPHORE_6r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_6_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_6_SHADOWr_OFFSET 0x0001032c

#define CMIC_SEMAPHORE_6_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_6_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_7
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_7r_OFFSET 0x00010330

#define CMIC_SEMAPHORE_7r_SIZE 4

/* CMIC_SEMAPHORE_7r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_7_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_7_SHADOWr_OFFSET 0x00010334

#define CMIC_SEMAPHORE_7_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_7_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_8
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_8r_OFFSET 0x00010338

#define CMIC_SEMAPHORE_8r_SIZE 4

/* CMIC_SEMAPHORE_8r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_8_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_8_SHADOWr_OFFSET 0x0001033c

#define CMIC_SEMAPHORE_8_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_8_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_9
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_9r_OFFSET 0x00010340

#define CMIC_SEMAPHORE_9r_SIZE 4

/* CMIC_SEMAPHORE_9r is element of CMIC_SEMAPHORE */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_9_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_9_SHADOWr_OFFSET 0x00010344

#define CMIC_SEMAPHORE_9_SHADOWr_SIZE 4

/* CMIC_SEMAPHORE_9_SHADOWr is element of CMIC_SEMAPHORE_SHADOW */

/*******************************************************************************
 * REGISTER:  CMIC_SEMAPHORE_SHADOW
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SEMAPHORE_SHADOWr_OFFSET 0x00010304

#define CMIC_SEMAPHORE_SHADOWr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SEMAPHORE_SHADOW.
 */
typedef union CMIC_SEMAPHORE_SHADOWr_s {
	uint32_t v[1];
	uint32_t cmic_semaphore_shadow[1];
	uint32_t _cmic_semaphore_shadow;
} CMIC_SEMAPHORE_SHADOWr_t;

#define CMIC_SEMAPHORE_SHADOWr_CLR(r) (r).cmic_semaphore_shadow[0] = 0
#define CMIC_SEMAPHORE_SHADOWr_SET(r,d) (r).cmic_semaphore_shadow[0] = d
#define CMIC_SEMAPHORE_SHADOWr_GET(r) (r).cmic_semaphore_shadow[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SEMAPHORE_SHADOWr_SEMAPHOREf_GET(r) (((r).cmic_semaphore_shadow[0]) & 0x1)
#define CMIC_SEMAPHORE_SHADOWr_SEMAPHOREf_SET(r,f) (r).cmic_semaphore_shadow[0]=(((r).cmic_semaphore_shadow[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_SEMAPHORE_SHADOWr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SRAM_TM0_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SRAM_TM0_CONTROLr_OFFSET 0x00010188

#define CMIC_SRAM_TM0_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SRAM_TM0_CONTROL.
 */
typedef union CMIC_SRAM_TM0_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_sram_tm0_control[1];
	uint32_t _cmic_sram_tm0_control;
} CMIC_SRAM_TM0_CONTROLr_t;

#define CMIC_SRAM_TM0_CONTROLr_CLR(r) (r).cmic_sram_tm0_control[0] = 0
#define CMIC_SRAM_TM0_CONTROLr_SET(r,d) (r).cmic_sram_tm0_control[0] = d
#define CMIC_SRAM_TM0_CONTROLr_GET(r) (r).cmic_sram_tm0_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SRAM_TM0_CONTROLr_SER0_MEM0_TMf_GET(r) (((r).cmic_sram_tm0_control[0]) & 0x1f)
#define CMIC_SRAM_TM0_CONTROLr_SER0_MEM0_TMf_SET(r,f) (r).cmic_sram_tm0_control[0]=(((r).cmic_sram_tm0_control[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_SRAM_TM0_CONTROLr_SER0_MEM1_TMf_GET(r) ((((r).cmic_sram_tm0_control[0]) >> 5) & 0x1f)
#define CMIC_SRAM_TM0_CONTROLr_SER0_MEM1_TMf_SET(r,f) (r).cmic_sram_tm0_control[0]=(((r).cmic_sram_tm0_control[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define CMIC_SRAM_TM0_CONTROLr_PCIE_TGT_IF_RCV_DATA0_FIFOf_GET(r) ((((r).cmic_sram_tm0_control[0]) >> 10) & 0xff)
#define CMIC_SRAM_TM0_CONTROLr_PCIE_TGT_IF_RCV_DATA0_FIFOf_SET(r,f) (r).cmic_sram_tm0_control[0]=(((r).cmic_sram_tm0_control[0] & ~((uint32_t)0xff << 10)) | ((((uint32_t)f) & 0xff) << 10))
#define CMIC_SRAM_TM0_CONTROLr_PCIE_TGT_IF_RCV_DATA1_FIFOf_GET(r) ((((r).cmic_sram_tm0_control[0]) >> 18) & 0xff)
#define CMIC_SRAM_TM0_CONTROLr_PCIE_TGT_IF_RCV_DATA1_FIFOf_SET(r,f) (r).cmic_sram_tm0_control[0]=(((r).cmic_sram_tm0_control[0] & ~((uint32_t)0xff << 18)) | ((((uint32_t)f) & 0xff) << 18))
#define CMIC_SRAM_TM0_CONTROLr_PCIE_DLP2TLP_BUF_STBYf_GET(r) ((((r).cmic_sram_tm0_control[0]) >> 26) & 0x1)
#define CMIC_SRAM_TM0_CONTROLr_PCIE_DLP2TLP_BUF_STBYf_SET(r,f) (r).cmic_sram_tm0_control[0]=(((r).cmic_sram_tm0_control[0] & ~((uint32_t)0x1 << 26)) | ((((uint32_t)f) & 0x1) << 26))
#define CMIC_SRAM_TM0_CONTROLr_PCIE_REPLAY_MEM_STBYf_GET(r) ((((r).cmic_sram_tm0_control[0]) >> 27) & 0x1)
#define CMIC_SRAM_TM0_CONTROLr_PCIE_REPLAY_MEM_STBYf_SET(r,f) (r).cmic_sram_tm0_control[0]=(((r).cmic_sram_tm0_control[0] & ~((uint32_t)0x1 << 27)) | ((((uint32_t)f) & 0x1) << 27))
#define CMIC_SRAM_TM0_CONTROLr_PCIE_CORE_RB_MEM_PMf_GET(r) ((((r).cmic_sram_tm0_control[0]) >> 28) & 0x1)
#define CMIC_SRAM_TM0_CONTROLr_PCIE_CORE_RB_MEM_PMf_SET(r,f) (r).cmic_sram_tm0_control[0]=(((r).cmic_sram_tm0_control[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))

/*******************************************************************************
 * End of 'CMIC_SRAM_TM0_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SRAM_TM1_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SRAM_TM1_CONTROLr_OFFSET 0x0001018c

#define CMIC_SRAM_TM1_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SRAM_TM1_CONTROL.
 */
typedef union CMIC_SRAM_TM1_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_sram_tm1_control[1];
	uint32_t _cmic_sram_tm1_control;
} CMIC_SRAM_TM1_CONTROLr_t;

#define CMIC_SRAM_TM1_CONTROLr_CLR(r) (r).cmic_sram_tm1_control[0] = 0
#define CMIC_SRAM_TM1_CONTROLr_SET(r,d) (r).cmic_sram_tm1_control[0] = d
#define CMIC_SRAM_TM1_CONTROLr_GET(r) (r).cmic_sram_tm1_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SRAM_TM1_CONTROLr_CMIC_MCS_PING_PONG_WRBUF0_MEM0_TMf_GET(r) (((r).cmic_sram_tm1_control[0]) & 0xff)
#define CMIC_SRAM_TM1_CONTROLr_CMIC_MCS_PING_PONG_WRBUF0_MEM0_TMf_SET(r,f) (r).cmic_sram_tm1_control[0]=(((r).cmic_sram_tm1_control[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_SRAM_TM1_CONTROLr_CMIC_MCS_PING_PONG_WRBUF0_MEM1_TMf_GET(r) ((((r).cmic_sram_tm1_control[0]) >> 8) & 0xff)
#define CMIC_SRAM_TM1_CONTROLr_CMIC_MCS_PING_PONG_WRBUF0_MEM1_TMf_SET(r,f) (r).cmic_sram_tm1_control[0]=(((r).cmic_sram_tm1_control[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define CMIC_SRAM_TM1_CONTROLr_CMIC_MCS_PING_PONG_WRBUF1_MEM0_TMf_GET(r) ((((r).cmic_sram_tm1_control[0]) >> 16) & 0xff)
#define CMIC_SRAM_TM1_CONTROLr_CMIC_MCS_PING_PONG_WRBUF1_MEM0_TMf_SET(r,f) (r).cmic_sram_tm1_control[0]=(((r).cmic_sram_tm1_control[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_SRAM_TM1_CONTROLr_CMIC_MCS_PING_PONG_WRBUF1_MEM1_TMf_GET(r) ((((r).cmic_sram_tm1_control[0]) >> 24) & 0xff)
#define CMIC_SRAM_TM1_CONTROLr_CMIC_MCS_PING_PONG_WRBUF1_MEM1_TMf_SET(r,f) (r).cmic_sram_tm1_control[0]=(((r).cmic_sram_tm1_control[0] & ~((uint32_t)0xff << 24)) | ((((uint32_t)f) & 0xff) << 24))

/*******************************************************************************
 * End of 'CMIC_SRAM_TM1_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SRAM_TM2_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SRAM_TM2_CONTROLr_OFFSET 0x00010190

#define CMIC_SRAM_TM2_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SRAM_TM2_CONTROL.
 */
typedef union CMIC_SRAM_TM2_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_sram_tm2_control[1];
	uint32_t _cmic_sram_tm2_control;
} CMIC_SRAM_TM2_CONTROLr_t;

#define CMIC_SRAM_TM2_CONTROLr_CLR(r) (r).cmic_sram_tm2_control[0] = 0
#define CMIC_SRAM_TM2_CONTROLr_SET(r,d) (r).cmic_sram_tm2_control[0] = d
#define CMIC_SRAM_TM2_CONTROLr_GET(r) (r).cmic_sram_tm2_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SRAM_TM2_CONTROLr_CMIC_MCS_PING_PONG_RDBUF0_MEM0_TMf_GET(r) (((r).cmic_sram_tm2_control[0]) & 0xff)
#define CMIC_SRAM_TM2_CONTROLr_CMIC_MCS_PING_PONG_RDBUF0_MEM0_TMf_SET(r,f) (r).cmic_sram_tm2_control[0]=(((r).cmic_sram_tm2_control[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_SRAM_TM2_CONTROLr_CMIC_MCS_PING_PONG_RDBUF0_MEM1_TMf_GET(r) ((((r).cmic_sram_tm2_control[0]) >> 8) & 0xff)
#define CMIC_SRAM_TM2_CONTROLr_CMIC_MCS_PING_PONG_RDBUF0_MEM1_TMf_SET(r,f) (r).cmic_sram_tm2_control[0]=(((r).cmic_sram_tm2_control[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define CMIC_SRAM_TM2_CONTROLr_CMIC_MCS_PING_PONG_RDBUF1_MEM0_TMf_GET(r) ((((r).cmic_sram_tm2_control[0]) >> 16) & 0xff)
#define CMIC_SRAM_TM2_CONTROLr_CMIC_MCS_PING_PONG_RDBUF1_MEM0_TMf_SET(r,f) (r).cmic_sram_tm2_control[0]=(((r).cmic_sram_tm2_control[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define CMIC_SRAM_TM2_CONTROLr_CMIC_MCS_PING_PONG_RDBUF1_MEM1_TMf_GET(r) ((((r).cmic_sram_tm2_control[0]) >> 24) & 0xff)
#define CMIC_SRAM_TM2_CONTROLr_CMIC_MCS_PING_PONG_RDBUF1_MEM1_TMf_SET(r,f) (r).cmic_sram_tm2_control[0]=(((r).cmic_sram_tm2_control[0] & ~((uint32_t)0xff << 24)) | ((((uint32_t)f) & 0xff) << 24))

/*******************************************************************************
 * End of 'CMIC_SRAM_TM2_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SRAM_TM3_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SRAM_TM3_CONTROLr_OFFSET 0x000101a0

#define CMIC_SRAM_TM3_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SRAM_TM3_CONTROL.
 */
typedef union CMIC_SRAM_TM3_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_sram_tm3_control[1];
	uint32_t _cmic_sram_tm3_control;
} CMIC_SRAM_TM3_CONTROLr_t;

#define CMIC_SRAM_TM3_CONTROLr_CLR(r) (r).cmic_sram_tm3_control[0] = 0
#define CMIC_SRAM_TM3_CONTROLr_SET(r,d) (r).cmic_sram_tm3_control[0] = d
#define CMIC_SRAM_TM3_CONTROLr_GET(r) (r).cmic_sram_tm3_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SRAM_TM3_CONTROLr_SER1_MEM0_TMf_GET(r) (((r).cmic_sram_tm3_control[0]) & 0x1f)
#define CMIC_SRAM_TM3_CONTROLr_SER1_MEM0_TMf_SET(r,f) (r).cmic_sram_tm3_control[0]=(((r).cmic_sram_tm3_control[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define CMIC_SRAM_TM3_CONTROLr_SER1_MEM1_TMf_GET(r) ((((r).cmic_sram_tm3_control[0]) >> 5) & 0x1f)
#define CMIC_SRAM_TM3_CONTROLr_SER1_MEM1_TMf_SET(r,f) (r).cmic_sram_tm3_control[0]=(((r).cmic_sram_tm3_control[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))

/*******************************************************************************
 * End of 'CMIC_SRAM_TM3_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_SW_RST
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_SW_RSTr_OFFSET 0x0001021c

#define CMIC_SW_RSTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_SW_RST.
 */
typedef union CMIC_SW_RSTr_s {
	uint32_t v[1];
	uint32_t cmic_sw_rst[1];
	uint32_t _cmic_sw_rst;
} CMIC_SW_RSTr_t;

#define CMIC_SW_RSTr_CLR(r) (r).cmic_sw_rst[0] = 0
#define CMIC_SW_RSTr_SET(r,d) (r).cmic_sw_rst[0] = d
#define CMIC_SW_RSTr_GET(r) (r).cmic_sw_rst[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_SW_RSTr_SPIM_RST_OVERRIDEf_GET(r) (((r).cmic_sw_rst[0]) & 0x1)
#define CMIC_SW_RSTr_SPIM_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_SW_RSTr_I2CM_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 1) & 0x1)
#define CMIC_SW_RSTr_I2CM_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_SW_RSTr_UART_0_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 2) & 0x1)
#define CMIC_SW_RSTr_UART_0_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_SW_RSTr_UART_1_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 3) & 0x1)
#define CMIC_SW_RSTr_UART_1_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_SW_RSTr_GPIO_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 4) & 0x1)
#define CMIC_SW_RSTr_GPIO_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_SW_RSTr_I2CS_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 5) & 0x1)
#define CMIC_SW_RSTr_I2CS_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_SW_RSTr_SPIS_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 6) & 0x1)
#define CMIC_SW_RSTr_SPIS_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_SW_RSTr_TIMER_0_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 7) & 0x1)
#define CMIC_SW_RSTr_TIMER_0_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_SW_RSTr_TIMER_1_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 8) & 0x1)
#define CMIC_SW_RSTr_TIMER_1_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define CMIC_SW_RSTr_WDT_0_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 9) & 0x1)
#define CMIC_SW_RSTr_WDT_0_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define CMIC_SW_RSTr_WDT_1_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 10) & 0x1)
#define CMIC_SW_RSTr_WDT_1_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define CMIC_SW_RSTr_PCIE_I2C_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 11) & 0x1)
#define CMIC_SW_RSTr_PCIE_I2C_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define CMIC_SW_RSTr_MCS_IC_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 12) & 0x1)
#define CMIC_SW_RSTr_MCS_IC_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_SW_RSTr_PIO_IC_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 13) & 0x1)
#define CMIC_SW_RSTr_PIO_IC_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define CMIC_SW_RSTr_DMA_IC_RST_OVERRIDEf_GET(r) ((((r).cmic_sw_rst[0]) >> 14) & 0x1)
#define CMIC_SW_RSTr_DMA_IC_RST_OVERRIDEf_SET(r,f) (r).cmic_sw_rst[0]=(((r).cmic_sw_rst[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))

/*******************************************************************************
 * End of 'CMIC_SW_RSTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER1BGLoad
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER1BGLOADr_OFFSET 0x00024018

#define CMIC_TIM0_TIMER1BGLOADr_SIZE 4

/* CMIC_TIM0_TIMER1BGLOADr is element of CMIC_TIM0_TIMERBGLoad */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER1Control
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER1CONTROLr_OFFSET 0x00024008

#define CMIC_TIM0_TIMER1CONTROLr_SIZE 4

/* CMIC_TIM0_TIMER1CONTROLr is element of CMIC_TIM0_TIMERControl */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER1IntClr
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER1INTCLRr_OFFSET 0x0002400c

#define CMIC_TIM0_TIMER1INTCLRr_SIZE 4

/* CMIC_TIM0_TIMER1INTCLRr is element of CMIC_TIM0_TIMERIntClr */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER1Load
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER1LOADr_OFFSET 0x00024000

#define CMIC_TIM0_TIMER1LOADr_SIZE 4

/* CMIC_TIM0_TIMER1LOADr is element of CMIC_TIM0_TIMERLoad */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER1MIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER1MISr_OFFSET 0x00024014

#define CMIC_TIM0_TIMER1MISr_SIZE 4

/* CMIC_TIM0_TIMER1MISr is element of CMIC_TIM0_TIMERMIS */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER1RIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER1RISr_OFFSET 0x00024010

#define CMIC_TIM0_TIMER1RISr_SIZE 4

/* CMIC_TIM0_TIMER1RISr is element of CMIC_TIM0_TIMERRIS */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER1Value
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER1VALUEr_OFFSET 0x00024004

#define CMIC_TIM0_TIMER1VALUEr_SIZE 4

/* CMIC_TIM0_TIMER1VALUEr is element of CMIC_TIM0_TIMERValue */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER2BGLoad
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER2BGLOADr_OFFSET 0x00024038

#define CMIC_TIM0_TIMER2BGLOADr_SIZE 4

/* CMIC_TIM0_TIMER2BGLOADr is element of CMIC_TIM0_TIMERBGLoad */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER2Control
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER2CONTROLr_OFFSET 0x00024028

#define CMIC_TIM0_TIMER2CONTROLr_SIZE 4

/* CMIC_TIM0_TIMER2CONTROLr is element of CMIC_TIM0_TIMERControl */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER2IntClr
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER2INTCLRr_OFFSET 0x0002402c

#define CMIC_TIM0_TIMER2INTCLRr_SIZE 4

/* CMIC_TIM0_TIMER2INTCLRr is element of CMIC_TIM0_TIMERIntClr */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER2Load
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER2LOADr_OFFSET 0x00024020

#define CMIC_TIM0_TIMER2LOADr_SIZE 4

/* CMIC_TIM0_TIMER2LOADr is element of CMIC_TIM0_TIMERLoad */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER2MIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER2MISr_OFFSET 0x00024034

#define CMIC_TIM0_TIMER2MISr_SIZE 4

/* CMIC_TIM0_TIMER2MISr is element of CMIC_TIM0_TIMERMIS */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER2RIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER2RISr_OFFSET 0x00024030

#define CMIC_TIM0_TIMER2RISr_SIZE 4

/* CMIC_TIM0_TIMER2RISr is element of CMIC_TIM0_TIMERRIS */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMER2Value
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMER2VALUEr_OFFSET 0x00024024

#define CMIC_TIM0_TIMER2VALUEr_SIZE 4

/* CMIC_TIM0_TIMER2VALUEr is element of CMIC_TIM0_TIMERValue */

/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERBGLoad
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERBGLOADr_OFFSET 0x00024018

#define CMIC_TIM0_TIMERBGLOADr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERBGLoad.
 */
typedef union CMIC_TIM0_TIMERBGLOADr_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerbgload[1];
	uint32_t _cmic_tim0_timerbgload;
} CMIC_TIM0_TIMERBGLOADr_t;

#define CMIC_TIM0_TIMERBGLOADr_CLR(r) (r).cmic_tim0_timerbgload[0] = 0
#define CMIC_TIM0_TIMERBGLOADr_SET(r,d) (r).cmic_tim0_timerbgload[0] = d
#define CMIC_TIM0_TIMERBGLOADr_GET(r) (r).cmic_tim0_timerbgload[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERBGLOADr_TIMER1BGLOADf_GET(r) ((r).cmic_tim0_timerbgload[0])
#define CMIC_TIM0_TIMERBGLOADr_TIMER1BGLOADf_SET(r,f) (r).cmic_tim0_timerbgload[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERBGLOADr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERControl
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERCONTROLr_OFFSET 0x00024008

#define CMIC_TIM0_TIMERCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERControl.
 */
typedef union CMIC_TIM0_TIMERCONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timercontrol[1];
	uint32_t _cmic_tim0_timercontrol;
} CMIC_TIM0_TIMERCONTROLr_t;

#define CMIC_TIM0_TIMERCONTROLr_CLR(r) (r).cmic_tim0_timercontrol[0] = 0
#define CMIC_TIM0_TIMERCONTROLr_SET(r,d) (r).cmic_tim0_timercontrol[0] = d
#define CMIC_TIM0_TIMERCONTROLr_GET(r) (r).cmic_tim0_timercontrol[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERCONTROLr_ONESHOTf_GET(r) (((r).cmic_tim0_timercontrol[0]) & 0x1)
#define CMIC_TIM0_TIMERCONTROLr_ONESHOTf_SET(r,f) (r).cmic_tim0_timercontrol[0]=(((r).cmic_tim0_timercontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM0_TIMERCONTROLr_TIMERSIZEf_GET(r) ((((r).cmic_tim0_timercontrol[0]) >> 1) & 0x1)
#define CMIC_TIM0_TIMERCONTROLr_TIMERSIZEf_SET(r,f) (r).cmic_tim0_timercontrol[0]=(((r).cmic_tim0_timercontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_TIM0_TIMERCONTROLr_TIMERPREf_GET(r) ((((r).cmic_tim0_timercontrol[0]) >> 2) & 0x3)
#define CMIC_TIM0_TIMERCONTROLr_TIMERPREf_SET(r,f) (r).cmic_tim0_timercontrol[0]=(((r).cmic_tim0_timercontrol[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define CMIC_TIM0_TIMERCONTROLr_RESERVED_0f_GET(r) ((((r).cmic_tim0_timercontrol[0]) >> 4) & 0x1)
#define CMIC_TIM0_TIMERCONTROLr_RESERVED_0f_SET(r,f) (r).cmic_tim0_timercontrol[0]=(((r).cmic_tim0_timercontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_TIM0_TIMERCONTROLr_INTENABLEf_GET(r) ((((r).cmic_tim0_timercontrol[0]) >> 5) & 0x1)
#define CMIC_TIM0_TIMERCONTROLr_INTENABLEf_SET(r,f) (r).cmic_tim0_timercontrol[0]=(((r).cmic_tim0_timercontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_TIM0_TIMERCONTROLr_TIMERMODEf_GET(r) ((((r).cmic_tim0_timercontrol[0]) >> 6) & 0x1)
#define CMIC_TIM0_TIMERCONTROLr_TIMERMODEf_SET(r,f) (r).cmic_tim0_timercontrol[0]=(((r).cmic_tim0_timercontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_TIM0_TIMERCONTROLr_TIMERENf_GET(r) ((((r).cmic_tim0_timercontrol[0]) >> 7) & 0x1)
#define CMIC_TIM0_TIMERCONTROLr_TIMERENf_SET(r,f) (r).cmic_tim0_timercontrol[0]=(((r).cmic_tim0_timercontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_TIM0_TIMERCONTROLr_RESERVED_1f_GET(r) ((((r).cmic_tim0_timercontrol[0]) >> 8) & 0xffffff)
#define CMIC_TIM0_TIMERCONTROLr_RESERVED_1f_SET(r,f) (r).cmic_tim0_timercontrol[0]=(((r).cmic_tim0_timercontrol[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERCONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERITCR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERITCRr_OFFSET 0x00024f00

#define CMIC_TIM0_TIMERITCRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERITCR.
 */
typedef union CMIC_TIM0_TIMERITCRr_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timeritcr[1];
	uint32_t _cmic_tim0_timeritcr;
} CMIC_TIM0_TIMERITCRr_t;

#define CMIC_TIM0_TIMERITCRr_CLR(r) (r).cmic_tim0_timeritcr[0] = 0
#define CMIC_TIM0_TIMERITCRr_SET(r,d) (r).cmic_tim0_timeritcr[0] = d
#define CMIC_TIM0_TIMERITCRr_GET(r) (r).cmic_tim0_timeritcr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERITCRr_ITENf_GET(r) (((r).cmic_tim0_timeritcr[0]) & 0x1)
#define CMIC_TIM0_TIMERITCRr_ITENf_SET(r,f) (r).cmic_tim0_timeritcr[0]=(((r).cmic_tim0_timeritcr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM0_TIMERITCRr_RESERVEDf_GET(r) ((((r).cmic_tim0_timeritcr[0]) >> 1) & 0x7fffffff)
#define CMIC_TIM0_TIMERITCRr_RESERVEDf_SET(r,f) (r).cmic_tim0_timeritcr[0]=(((r).cmic_tim0_timeritcr[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERITCRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERITOP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERITOPr_OFFSET 0x00024f04

#define CMIC_TIM0_TIMERITOPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERITOP.
 */
typedef union CMIC_TIM0_TIMERITOPr_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timeritop[1];
	uint32_t _cmic_tim0_timeritop;
} CMIC_TIM0_TIMERITOPr_t;

#define CMIC_TIM0_TIMERITOPr_CLR(r) (r).cmic_tim0_timeritop[0] = 0
#define CMIC_TIM0_TIMERITOPr_SET(r,d) (r).cmic_tim0_timeritop[0] = d
#define CMIC_TIM0_TIMERITOPr_GET(r) (r).cmic_tim0_timeritop[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERITOPr_TIMINT1f_GET(r) (((r).cmic_tim0_timeritop[0]) & 0x1)
#define CMIC_TIM0_TIMERITOPr_TIMINT1f_SET(r,f) (r).cmic_tim0_timeritop[0]=(((r).cmic_tim0_timeritop[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM0_TIMERITOPr_TIMINT2f_GET(r) ((((r).cmic_tim0_timeritop[0]) >> 1) & 0x1)
#define CMIC_TIM0_TIMERITOPr_TIMINT2f_SET(r,f) (r).cmic_tim0_timeritop[0]=(((r).cmic_tim0_timeritop[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_TIM0_TIMERITOPr_RESERVEDf_GET(r) ((((r).cmic_tim0_timeritop[0]) >> 2) & 0x3fffffff)
#define CMIC_TIM0_TIMERITOPr_RESERVEDf_SET(r,f) (r).cmic_tim0_timeritop[0]=(((r).cmic_tim0_timeritop[0] & ~((uint32_t)0x3fffffff << 2)) | ((((uint32_t)f) & 0x3fffffff) << 2))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERITOPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERIntClr
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERINTCLRr_OFFSET 0x0002400c

#define CMIC_TIM0_TIMERINTCLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERIntClr.
 */
typedef union CMIC_TIM0_TIMERINTCLRr_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerintclr[1];
	uint32_t _cmic_tim0_timerintclr;
} CMIC_TIM0_TIMERINTCLRr_t;

#define CMIC_TIM0_TIMERINTCLRr_CLR(r) (r).cmic_tim0_timerintclr[0] = 0
#define CMIC_TIM0_TIMERINTCLRr_SET(r,d) (r).cmic_tim0_timerintclr[0] = d
#define CMIC_TIM0_TIMERINTCLRr_GET(r) (r).cmic_tim0_timerintclr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERINTCLRr_INTCLRf_GET(r) (((r).cmic_tim0_timerintclr[0]) & 0x1)
#define CMIC_TIM0_TIMERINTCLRr_INTCLRf_SET(r,f) (r).cmic_tim0_timerintclr[0]=(((r).cmic_tim0_timerintclr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM0_TIMERINTCLRr_RESERVEDf_GET(r) ((((r).cmic_tim0_timerintclr[0]) >> 1) & 0x7fffffff)
#define CMIC_TIM0_TIMERINTCLRr_RESERVEDf_SET(r,f) (r).cmic_tim0_timerintclr[0]=(((r).cmic_tim0_timerintclr[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERINTCLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERLoad
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERLOADr_OFFSET 0x00024000

#define CMIC_TIM0_TIMERLOADr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERLoad.
 */
typedef union CMIC_TIM0_TIMERLOADr_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerload[1];
	uint32_t _cmic_tim0_timerload;
} CMIC_TIM0_TIMERLOADr_t;

#define CMIC_TIM0_TIMERLOADr_CLR(r) (r).cmic_tim0_timerload[0] = 0
#define CMIC_TIM0_TIMERLOADr_SET(r,d) (r).cmic_tim0_timerload[0] = d
#define CMIC_TIM0_TIMERLOADr_GET(r) (r).cmic_tim0_timerload[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERLOADr_TIMER1LOADf_GET(r) ((r).cmic_tim0_timerload[0])
#define CMIC_TIM0_TIMERLOADr_TIMER1LOADf_SET(r,f) (r).cmic_tim0_timerload[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERLOADr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERMIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERMISr_OFFSET 0x00024014

#define CMIC_TIM0_TIMERMISr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERMIS.
 */
typedef union CMIC_TIM0_TIMERMISr_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timermis[1];
	uint32_t _cmic_tim0_timermis;
} CMIC_TIM0_TIMERMISr_t;

#define CMIC_TIM0_TIMERMISr_CLR(r) (r).cmic_tim0_timermis[0] = 0
#define CMIC_TIM0_TIMERMISr_SET(r,d) (r).cmic_tim0_timermis[0] = d
#define CMIC_TIM0_TIMERMISr_GET(r) (r).cmic_tim0_timermis[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERMISr_TIMER1MISf_GET(r) (((r).cmic_tim0_timermis[0]) & 0x1)
#define CMIC_TIM0_TIMERMISr_TIMER1MISf_SET(r,f) (r).cmic_tim0_timermis[0]=(((r).cmic_tim0_timermis[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM0_TIMERMISr_RESERVEDf_GET(r) ((((r).cmic_tim0_timermis[0]) >> 1) & 0x7fffffff)
#define CMIC_TIM0_TIMERMISr_RESERVEDf_SET(r,f) (r).cmic_tim0_timermis[0]=(((r).cmic_tim0_timermis[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERMISr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERPCellID0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERPCELLID0r_OFFSET 0x00024ff0

#define CMIC_TIM0_TIMERPCELLID0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERPCellID0.
 */
typedef union CMIC_TIM0_TIMERPCELLID0r_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerpcellid0[1];
	uint32_t _cmic_tim0_timerpcellid0;
} CMIC_TIM0_TIMERPCELLID0r_t;

#define CMIC_TIM0_TIMERPCELLID0r_CLR(r) (r).cmic_tim0_timerpcellid0[0] = 0
#define CMIC_TIM0_TIMERPCELLID0r_SET(r,d) (r).cmic_tim0_timerpcellid0[0] = d
#define CMIC_TIM0_TIMERPCELLID0r_GET(r) (r).cmic_tim0_timerpcellid0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERPCELLID0r_TIMERPCELLID0f_GET(r) (((r).cmic_tim0_timerpcellid0[0]) & 0xff)
#define CMIC_TIM0_TIMERPCELLID0r_TIMERPCELLID0f_SET(r,f) (r).cmic_tim0_timerpcellid0[0]=(((r).cmic_tim0_timerpcellid0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM0_TIMERPCELLID0r_RESERVEDf_GET(r) ((((r).cmic_tim0_timerpcellid0[0]) >> 8) & 0xffffff)
#define CMIC_TIM0_TIMERPCELLID0r_RESERVEDf_SET(r,f) (r).cmic_tim0_timerpcellid0[0]=(((r).cmic_tim0_timerpcellid0[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERPCELLID0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERPCellID1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERPCELLID1r_OFFSET 0x00024ff4

#define CMIC_TIM0_TIMERPCELLID1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERPCellID1.
 */
typedef union CMIC_TIM0_TIMERPCELLID1r_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerpcellid1[1];
	uint32_t _cmic_tim0_timerpcellid1;
} CMIC_TIM0_TIMERPCELLID1r_t;

#define CMIC_TIM0_TIMERPCELLID1r_CLR(r) (r).cmic_tim0_timerpcellid1[0] = 0
#define CMIC_TIM0_TIMERPCELLID1r_SET(r,d) (r).cmic_tim0_timerpcellid1[0] = d
#define CMIC_TIM0_TIMERPCELLID1r_GET(r) (r).cmic_tim0_timerpcellid1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERPCELLID1r_TIMERPCELLID1f_GET(r) (((r).cmic_tim0_timerpcellid1[0]) & 0xff)
#define CMIC_TIM0_TIMERPCELLID1r_TIMERPCELLID1f_SET(r,f) (r).cmic_tim0_timerpcellid1[0]=(((r).cmic_tim0_timerpcellid1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM0_TIMERPCELLID1r_RESERVEDf_GET(r) ((((r).cmic_tim0_timerpcellid1[0]) >> 8) & 0xffffff)
#define CMIC_TIM0_TIMERPCELLID1r_RESERVEDf_SET(r,f) (r).cmic_tim0_timerpcellid1[0]=(((r).cmic_tim0_timerpcellid1[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERPCELLID1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERPCellID2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERPCELLID2r_OFFSET 0x00024ff8

#define CMIC_TIM0_TIMERPCELLID2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERPCellID2.
 */
typedef union CMIC_TIM0_TIMERPCELLID2r_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerpcellid2[1];
	uint32_t _cmic_tim0_timerpcellid2;
} CMIC_TIM0_TIMERPCELLID2r_t;

#define CMIC_TIM0_TIMERPCELLID2r_CLR(r) (r).cmic_tim0_timerpcellid2[0] = 0
#define CMIC_TIM0_TIMERPCELLID2r_SET(r,d) (r).cmic_tim0_timerpcellid2[0] = d
#define CMIC_TIM0_TIMERPCELLID2r_GET(r) (r).cmic_tim0_timerpcellid2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERPCELLID2r_TIMERPCELLID2f_GET(r) (((r).cmic_tim0_timerpcellid2[0]) & 0xff)
#define CMIC_TIM0_TIMERPCELLID2r_TIMERPCELLID2f_SET(r,f) (r).cmic_tim0_timerpcellid2[0]=(((r).cmic_tim0_timerpcellid2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM0_TIMERPCELLID2r_RESERVEDf_GET(r) ((((r).cmic_tim0_timerpcellid2[0]) >> 8) & 0xffffff)
#define CMIC_TIM0_TIMERPCELLID2r_RESERVEDf_SET(r,f) (r).cmic_tim0_timerpcellid2[0]=(((r).cmic_tim0_timerpcellid2[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERPCELLID2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERPCellID3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERPCELLID3r_OFFSET 0x00024ffc

#define CMIC_TIM0_TIMERPCELLID3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERPCellID3.
 */
typedef union CMIC_TIM0_TIMERPCELLID3r_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerpcellid3[1];
	uint32_t _cmic_tim0_timerpcellid3;
} CMIC_TIM0_TIMERPCELLID3r_t;

#define CMIC_TIM0_TIMERPCELLID3r_CLR(r) (r).cmic_tim0_timerpcellid3[0] = 0
#define CMIC_TIM0_TIMERPCELLID3r_SET(r,d) (r).cmic_tim0_timerpcellid3[0] = d
#define CMIC_TIM0_TIMERPCELLID3r_GET(r) (r).cmic_tim0_timerpcellid3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERPCELLID3r_TIMERPCELLID3f_GET(r) (((r).cmic_tim0_timerpcellid3[0]) & 0xff)
#define CMIC_TIM0_TIMERPCELLID3r_TIMERPCELLID3f_SET(r,f) (r).cmic_tim0_timerpcellid3[0]=(((r).cmic_tim0_timerpcellid3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM0_TIMERPCELLID3r_RESERVEDf_GET(r) ((((r).cmic_tim0_timerpcellid3[0]) >> 8) & 0xffffff)
#define CMIC_TIM0_TIMERPCELLID3r_RESERVEDf_SET(r,f) (r).cmic_tim0_timerpcellid3[0]=(((r).cmic_tim0_timerpcellid3[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERPCELLID3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERPeriphID0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERPERIPHID0r_OFFSET 0x00024fe0

#define CMIC_TIM0_TIMERPERIPHID0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERPeriphID0.
 */
typedef union CMIC_TIM0_TIMERPERIPHID0r_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerperiphid0[1];
	uint32_t _cmic_tim0_timerperiphid0;
} CMIC_TIM0_TIMERPERIPHID0r_t;

#define CMIC_TIM0_TIMERPERIPHID0r_CLR(r) (r).cmic_tim0_timerperiphid0[0] = 0
#define CMIC_TIM0_TIMERPERIPHID0r_SET(r,d) (r).cmic_tim0_timerperiphid0[0] = d
#define CMIC_TIM0_TIMERPERIPHID0r_GET(r) (r).cmic_tim0_timerperiphid0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERPERIPHID0r_PARTNUMBER0f_GET(r) (((r).cmic_tim0_timerperiphid0[0]) & 0xff)
#define CMIC_TIM0_TIMERPERIPHID0r_PARTNUMBER0f_SET(r,f) (r).cmic_tim0_timerperiphid0[0]=(((r).cmic_tim0_timerperiphid0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM0_TIMERPERIPHID0r_RESERVEDf_GET(r) ((((r).cmic_tim0_timerperiphid0[0]) >> 8) & 0xffffff)
#define CMIC_TIM0_TIMERPERIPHID0r_RESERVEDf_SET(r,f) (r).cmic_tim0_timerperiphid0[0]=(((r).cmic_tim0_timerperiphid0[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERPERIPHID0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERPeriphID1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERPERIPHID1r_OFFSET 0x00024fe4

#define CMIC_TIM0_TIMERPERIPHID1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERPeriphID1.
 */
typedef union CMIC_TIM0_TIMERPERIPHID1r_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerperiphid1[1];
	uint32_t _cmic_tim0_timerperiphid1;
} CMIC_TIM0_TIMERPERIPHID1r_t;

#define CMIC_TIM0_TIMERPERIPHID1r_CLR(r) (r).cmic_tim0_timerperiphid1[0] = 0
#define CMIC_TIM0_TIMERPERIPHID1r_SET(r,d) (r).cmic_tim0_timerperiphid1[0] = d
#define CMIC_TIM0_TIMERPERIPHID1r_GET(r) (r).cmic_tim0_timerperiphid1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERPERIPHID1r_PARTNUMBER1f_GET(r) (((r).cmic_tim0_timerperiphid1[0]) & 0xf)
#define CMIC_TIM0_TIMERPERIPHID1r_PARTNUMBER1f_SET(r,f) (r).cmic_tim0_timerperiphid1[0]=(((r).cmic_tim0_timerperiphid1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_TIM0_TIMERPERIPHID1r_DESIGNER0f_GET(r) ((((r).cmic_tim0_timerperiphid1[0]) >> 4) & 0xf)
#define CMIC_TIM0_TIMERPERIPHID1r_DESIGNER0f_SET(r,f) (r).cmic_tim0_timerperiphid1[0]=(((r).cmic_tim0_timerperiphid1[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_TIM0_TIMERPERIPHID1r_RESERVEDf_GET(r) ((((r).cmic_tim0_timerperiphid1[0]) >> 8) & 0xffffff)
#define CMIC_TIM0_TIMERPERIPHID1r_RESERVEDf_SET(r,f) (r).cmic_tim0_timerperiphid1[0]=(((r).cmic_tim0_timerperiphid1[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERPERIPHID1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERPeriphID2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERPERIPHID2r_OFFSET 0x00024fe8

#define CMIC_TIM0_TIMERPERIPHID2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERPeriphID2.
 */
typedef union CMIC_TIM0_TIMERPERIPHID2r_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerperiphid2[1];
	uint32_t _cmic_tim0_timerperiphid2;
} CMIC_TIM0_TIMERPERIPHID2r_t;

#define CMIC_TIM0_TIMERPERIPHID2r_CLR(r) (r).cmic_tim0_timerperiphid2[0] = 0
#define CMIC_TIM0_TIMERPERIPHID2r_SET(r,d) (r).cmic_tim0_timerperiphid2[0] = d
#define CMIC_TIM0_TIMERPERIPHID2r_GET(r) (r).cmic_tim0_timerperiphid2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERPERIPHID2r_DESIGNER1f_GET(r) (((r).cmic_tim0_timerperiphid2[0]) & 0xf)
#define CMIC_TIM0_TIMERPERIPHID2r_DESIGNER1f_SET(r,f) (r).cmic_tim0_timerperiphid2[0]=(((r).cmic_tim0_timerperiphid2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_TIM0_TIMERPERIPHID2r_REVISIONf_GET(r) ((((r).cmic_tim0_timerperiphid2[0]) >> 4) & 0xf)
#define CMIC_TIM0_TIMERPERIPHID2r_REVISIONf_SET(r,f) (r).cmic_tim0_timerperiphid2[0]=(((r).cmic_tim0_timerperiphid2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_TIM0_TIMERPERIPHID2r_RESERVEDf_GET(r) ((((r).cmic_tim0_timerperiphid2[0]) >> 8) & 0xffffff)
#define CMIC_TIM0_TIMERPERIPHID2r_RESERVEDf_SET(r,f) (r).cmic_tim0_timerperiphid2[0]=(((r).cmic_tim0_timerperiphid2[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERPERIPHID2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERPeriphID3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERPERIPHID3r_OFFSET 0x00024fec

#define CMIC_TIM0_TIMERPERIPHID3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERPeriphID3.
 */
typedef union CMIC_TIM0_TIMERPERIPHID3r_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerperiphid3[1];
	uint32_t _cmic_tim0_timerperiphid3;
} CMIC_TIM0_TIMERPERIPHID3r_t;

#define CMIC_TIM0_TIMERPERIPHID3r_CLR(r) (r).cmic_tim0_timerperiphid3[0] = 0
#define CMIC_TIM0_TIMERPERIPHID3r_SET(r,d) (r).cmic_tim0_timerperiphid3[0] = d
#define CMIC_TIM0_TIMERPERIPHID3r_GET(r) (r).cmic_tim0_timerperiphid3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERPERIPHID3r_CONFIGURATIONf_GET(r) (((r).cmic_tim0_timerperiphid3[0]) & 0xff)
#define CMIC_TIM0_TIMERPERIPHID3r_CONFIGURATIONf_SET(r,f) (r).cmic_tim0_timerperiphid3[0]=(((r).cmic_tim0_timerperiphid3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM0_TIMERPERIPHID3r_RESERVEDf_GET(r) ((((r).cmic_tim0_timerperiphid3[0]) >> 8) & 0xffffff)
#define CMIC_TIM0_TIMERPERIPHID3r_RESERVEDf_SET(r,f) (r).cmic_tim0_timerperiphid3[0]=(((r).cmic_tim0_timerperiphid3[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERPERIPHID3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERRIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERRISr_OFFSET 0x00024010

#define CMIC_TIM0_TIMERRISr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERRIS.
 */
typedef union CMIC_TIM0_TIMERRISr_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timerris[1];
	uint32_t _cmic_tim0_timerris;
} CMIC_TIM0_TIMERRISr_t;

#define CMIC_TIM0_TIMERRISr_CLR(r) (r).cmic_tim0_timerris[0] = 0
#define CMIC_TIM0_TIMERRISr_SET(r,d) (r).cmic_tim0_timerris[0] = d
#define CMIC_TIM0_TIMERRISr_GET(r) (r).cmic_tim0_timerris[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERRISr_TIMER1RISf_GET(r) (((r).cmic_tim0_timerris[0]) & 0x1)
#define CMIC_TIM0_TIMERRISr_TIMER1RISf_SET(r,f) (r).cmic_tim0_timerris[0]=(((r).cmic_tim0_timerris[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM0_TIMERRISr_RESERVEDf_GET(r) ((((r).cmic_tim0_timerris[0]) >> 1) & 0x7fffffff)
#define CMIC_TIM0_TIMERRISr_RESERVEDf_SET(r,f) (r).cmic_tim0_timerris[0]=(((r).cmic_tim0_timerris[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERRISr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM0_TIMERValue
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM0_TIMERVALUEr_OFFSET 0x00024004

#define CMIC_TIM0_TIMERVALUEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM0_TIMERValue.
 */
typedef union CMIC_TIM0_TIMERVALUEr_s {
	uint32_t v[1];
	uint32_t cmic_tim0_timervalue[1];
	uint32_t _cmic_tim0_timervalue;
} CMIC_TIM0_TIMERVALUEr_t;

#define CMIC_TIM0_TIMERVALUEr_CLR(r) (r).cmic_tim0_timervalue[0] = 0
#define CMIC_TIM0_TIMERVALUEr_SET(r,d) (r).cmic_tim0_timervalue[0] = d
#define CMIC_TIM0_TIMERVALUEr_GET(r) (r).cmic_tim0_timervalue[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM0_TIMERVALUEr_TIMER1VALUEf_GET(r) ((r).cmic_tim0_timervalue[0])
#define CMIC_TIM0_TIMERVALUEr_TIMER1VALUEf_SET(r,f) (r).cmic_tim0_timervalue[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIM0_TIMERVALUEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER1BGLoad
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER1BGLOADr_OFFSET 0x00026018

#define CMIC_TIM1_TIMER1BGLOADr_SIZE 4

/* CMIC_TIM1_TIMER1BGLOADr is element of CMIC_TIM1_TIMERBGLoad */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER1Control
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER1CONTROLr_OFFSET 0x00026008

#define CMIC_TIM1_TIMER1CONTROLr_SIZE 4

/* CMIC_TIM1_TIMER1CONTROLr is element of CMIC_TIM1_TIMERControl */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER1IntClr
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER1INTCLRr_OFFSET 0x0002600c

#define CMIC_TIM1_TIMER1INTCLRr_SIZE 4

/* CMIC_TIM1_TIMER1INTCLRr is element of CMIC_TIM1_TIMERIntClr */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER1Load
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER1LOADr_OFFSET 0x00026000

#define CMIC_TIM1_TIMER1LOADr_SIZE 4

/* CMIC_TIM1_TIMER1LOADr is element of CMIC_TIM1_TIMERLoad */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER1MIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER1MISr_OFFSET 0x00026014

#define CMIC_TIM1_TIMER1MISr_SIZE 4

/* CMIC_TIM1_TIMER1MISr is element of CMIC_TIM1_TIMERMIS */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER1RIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER1RISr_OFFSET 0x00026010

#define CMIC_TIM1_TIMER1RISr_SIZE 4

/* CMIC_TIM1_TIMER1RISr is element of CMIC_TIM1_TIMERRIS */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER1Value
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER1VALUEr_OFFSET 0x00026004

#define CMIC_TIM1_TIMER1VALUEr_SIZE 4

/* CMIC_TIM1_TIMER1VALUEr is element of CMIC_TIM1_TIMERValue */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER2BGLoad
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER2BGLOADr_OFFSET 0x00026038

#define CMIC_TIM1_TIMER2BGLOADr_SIZE 4

/* CMIC_TIM1_TIMER2BGLOADr is element of CMIC_TIM1_TIMERBGLoad */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER2Control
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER2CONTROLr_OFFSET 0x00026028

#define CMIC_TIM1_TIMER2CONTROLr_SIZE 4

/* CMIC_TIM1_TIMER2CONTROLr is element of CMIC_TIM1_TIMERControl */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER2IntClr
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER2INTCLRr_OFFSET 0x0002602c

#define CMIC_TIM1_TIMER2INTCLRr_SIZE 4

/* CMIC_TIM1_TIMER2INTCLRr is element of CMIC_TIM1_TIMERIntClr */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER2Load
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER2LOADr_OFFSET 0x00026020

#define CMIC_TIM1_TIMER2LOADr_SIZE 4

/* CMIC_TIM1_TIMER2LOADr is element of CMIC_TIM1_TIMERLoad */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER2MIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER2MISr_OFFSET 0x00026034

#define CMIC_TIM1_TIMER2MISr_SIZE 4

/* CMIC_TIM1_TIMER2MISr is element of CMIC_TIM1_TIMERMIS */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER2RIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER2RISr_OFFSET 0x00026030

#define CMIC_TIM1_TIMER2RISr_SIZE 4

/* CMIC_TIM1_TIMER2RISr is element of CMIC_TIM1_TIMERRIS */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMER2Value
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMER2VALUEr_OFFSET 0x00026024

#define CMIC_TIM1_TIMER2VALUEr_SIZE 4

/* CMIC_TIM1_TIMER2VALUEr is element of CMIC_TIM1_TIMERValue */

/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERBGLoad
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERBGLOADr_OFFSET 0x00026018

#define CMIC_TIM1_TIMERBGLOADr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERBGLoad.
 */
typedef union CMIC_TIM1_TIMERBGLOADr_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerbgload[1];
	uint32_t _cmic_tim1_timerbgload;
} CMIC_TIM1_TIMERBGLOADr_t;

#define CMIC_TIM1_TIMERBGLOADr_CLR(r) (r).cmic_tim1_timerbgload[0] = 0
#define CMIC_TIM1_TIMERBGLOADr_SET(r,d) (r).cmic_tim1_timerbgload[0] = d
#define CMIC_TIM1_TIMERBGLOADr_GET(r) (r).cmic_tim1_timerbgload[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERBGLOADr_TIMER1BGLOADf_GET(r) ((r).cmic_tim1_timerbgload[0])
#define CMIC_TIM1_TIMERBGLOADr_TIMER1BGLOADf_SET(r,f) (r).cmic_tim1_timerbgload[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERBGLOADr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERControl
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERCONTROLr_OFFSET 0x00026008

#define CMIC_TIM1_TIMERCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERControl.
 */
typedef union CMIC_TIM1_TIMERCONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timercontrol[1];
	uint32_t _cmic_tim1_timercontrol;
} CMIC_TIM1_TIMERCONTROLr_t;

#define CMIC_TIM1_TIMERCONTROLr_CLR(r) (r).cmic_tim1_timercontrol[0] = 0
#define CMIC_TIM1_TIMERCONTROLr_SET(r,d) (r).cmic_tim1_timercontrol[0] = d
#define CMIC_TIM1_TIMERCONTROLr_GET(r) (r).cmic_tim1_timercontrol[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERCONTROLr_ONESHOTf_GET(r) (((r).cmic_tim1_timercontrol[0]) & 0x1)
#define CMIC_TIM1_TIMERCONTROLr_ONESHOTf_SET(r,f) (r).cmic_tim1_timercontrol[0]=(((r).cmic_tim1_timercontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM1_TIMERCONTROLr_TIMERSIZEf_GET(r) ((((r).cmic_tim1_timercontrol[0]) >> 1) & 0x1)
#define CMIC_TIM1_TIMERCONTROLr_TIMERSIZEf_SET(r,f) (r).cmic_tim1_timercontrol[0]=(((r).cmic_tim1_timercontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_TIM1_TIMERCONTROLr_TIMERPREf_GET(r) ((((r).cmic_tim1_timercontrol[0]) >> 2) & 0x3)
#define CMIC_TIM1_TIMERCONTROLr_TIMERPREf_SET(r,f) (r).cmic_tim1_timercontrol[0]=(((r).cmic_tim1_timercontrol[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define CMIC_TIM1_TIMERCONTROLr_RESERVED_0f_GET(r) ((((r).cmic_tim1_timercontrol[0]) >> 4) & 0x1)
#define CMIC_TIM1_TIMERCONTROLr_RESERVED_0f_SET(r,f) (r).cmic_tim1_timercontrol[0]=(((r).cmic_tim1_timercontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_TIM1_TIMERCONTROLr_INTENABLEf_GET(r) ((((r).cmic_tim1_timercontrol[0]) >> 5) & 0x1)
#define CMIC_TIM1_TIMERCONTROLr_INTENABLEf_SET(r,f) (r).cmic_tim1_timercontrol[0]=(((r).cmic_tim1_timercontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_TIM1_TIMERCONTROLr_TIMERMODEf_GET(r) ((((r).cmic_tim1_timercontrol[0]) >> 6) & 0x1)
#define CMIC_TIM1_TIMERCONTROLr_TIMERMODEf_SET(r,f) (r).cmic_tim1_timercontrol[0]=(((r).cmic_tim1_timercontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_TIM1_TIMERCONTROLr_TIMERENf_GET(r) ((((r).cmic_tim1_timercontrol[0]) >> 7) & 0x1)
#define CMIC_TIM1_TIMERCONTROLr_TIMERENf_SET(r,f) (r).cmic_tim1_timercontrol[0]=(((r).cmic_tim1_timercontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define CMIC_TIM1_TIMERCONTROLr_RESERVED_1f_GET(r) ((((r).cmic_tim1_timercontrol[0]) >> 8) & 0xffffff)
#define CMIC_TIM1_TIMERCONTROLr_RESERVED_1f_SET(r,f) (r).cmic_tim1_timercontrol[0]=(((r).cmic_tim1_timercontrol[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERCONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERITCR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERITCRr_OFFSET 0x00026f00

#define CMIC_TIM1_TIMERITCRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERITCR.
 */
typedef union CMIC_TIM1_TIMERITCRr_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timeritcr[1];
	uint32_t _cmic_tim1_timeritcr;
} CMIC_TIM1_TIMERITCRr_t;

#define CMIC_TIM1_TIMERITCRr_CLR(r) (r).cmic_tim1_timeritcr[0] = 0
#define CMIC_TIM1_TIMERITCRr_SET(r,d) (r).cmic_tim1_timeritcr[0] = d
#define CMIC_TIM1_TIMERITCRr_GET(r) (r).cmic_tim1_timeritcr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERITCRr_ITENf_GET(r) (((r).cmic_tim1_timeritcr[0]) & 0x1)
#define CMIC_TIM1_TIMERITCRr_ITENf_SET(r,f) (r).cmic_tim1_timeritcr[0]=(((r).cmic_tim1_timeritcr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM1_TIMERITCRr_RESERVEDf_GET(r) ((((r).cmic_tim1_timeritcr[0]) >> 1) & 0x7fffffff)
#define CMIC_TIM1_TIMERITCRr_RESERVEDf_SET(r,f) (r).cmic_tim1_timeritcr[0]=(((r).cmic_tim1_timeritcr[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERITCRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERITOP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERITOPr_OFFSET 0x00026f04

#define CMIC_TIM1_TIMERITOPr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERITOP.
 */
typedef union CMIC_TIM1_TIMERITOPr_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timeritop[1];
	uint32_t _cmic_tim1_timeritop;
} CMIC_TIM1_TIMERITOPr_t;

#define CMIC_TIM1_TIMERITOPr_CLR(r) (r).cmic_tim1_timeritop[0] = 0
#define CMIC_TIM1_TIMERITOPr_SET(r,d) (r).cmic_tim1_timeritop[0] = d
#define CMIC_TIM1_TIMERITOPr_GET(r) (r).cmic_tim1_timeritop[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERITOPr_TIMINT1f_GET(r) (((r).cmic_tim1_timeritop[0]) & 0x1)
#define CMIC_TIM1_TIMERITOPr_TIMINT1f_SET(r,f) (r).cmic_tim1_timeritop[0]=(((r).cmic_tim1_timeritop[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM1_TIMERITOPr_TIMINT2f_GET(r) ((((r).cmic_tim1_timeritop[0]) >> 1) & 0x1)
#define CMIC_TIM1_TIMERITOPr_TIMINT2f_SET(r,f) (r).cmic_tim1_timeritop[0]=(((r).cmic_tim1_timeritop[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_TIM1_TIMERITOPr_RESERVEDf_GET(r) ((((r).cmic_tim1_timeritop[0]) >> 2) & 0x3fffffff)
#define CMIC_TIM1_TIMERITOPr_RESERVEDf_SET(r,f) (r).cmic_tim1_timeritop[0]=(((r).cmic_tim1_timeritop[0] & ~((uint32_t)0x3fffffff << 2)) | ((((uint32_t)f) & 0x3fffffff) << 2))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERITOPr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERIntClr
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERINTCLRr_OFFSET 0x0002600c

#define CMIC_TIM1_TIMERINTCLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERIntClr.
 */
typedef union CMIC_TIM1_TIMERINTCLRr_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerintclr[1];
	uint32_t _cmic_tim1_timerintclr;
} CMIC_TIM1_TIMERINTCLRr_t;

#define CMIC_TIM1_TIMERINTCLRr_CLR(r) (r).cmic_tim1_timerintclr[0] = 0
#define CMIC_TIM1_TIMERINTCLRr_SET(r,d) (r).cmic_tim1_timerintclr[0] = d
#define CMIC_TIM1_TIMERINTCLRr_GET(r) (r).cmic_tim1_timerintclr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERINTCLRr_INTCLRf_GET(r) (((r).cmic_tim1_timerintclr[0]) & 0x1)
#define CMIC_TIM1_TIMERINTCLRr_INTCLRf_SET(r,f) (r).cmic_tim1_timerintclr[0]=(((r).cmic_tim1_timerintclr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM1_TIMERINTCLRr_RESERVEDf_GET(r) ((((r).cmic_tim1_timerintclr[0]) >> 1) & 0x7fffffff)
#define CMIC_TIM1_TIMERINTCLRr_RESERVEDf_SET(r,f) (r).cmic_tim1_timerintclr[0]=(((r).cmic_tim1_timerintclr[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERINTCLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERLoad
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERLOADr_OFFSET 0x00026000

#define CMIC_TIM1_TIMERLOADr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERLoad.
 */
typedef union CMIC_TIM1_TIMERLOADr_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerload[1];
	uint32_t _cmic_tim1_timerload;
} CMIC_TIM1_TIMERLOADr_t;

#define CMIC_TIM1_TIMERLOADr_CLR(r) (r).cmic_tim1_timerload[0] = 0
#define CMIC_TIM1_TIMERLOADr_SET(r,d) (r).cmic_tim1_timerload[0] = d
#define CMIC_TIM1_TIMERLOADr_GET(r) (r).cmic_tim1_timerload[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERLOADr_TIMER1LOADf_GET(r) ((r).cmic_tim1_timerload[0])
#define CMIC_TIM1_TIMERLOADr_TIMER1LOADf_SET(r,f) (r).cmic_tim1_timerload[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERLOADr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERMIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERMISr_OFFSET 0x00026014

#define CMIC_TIM1_TIMERMISr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERMIS.
 */
typedef union CMIC_TIM1_TIMERMISr_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timermis[1];
	uint32_t _cmic_tim1_timermis;
} CMIC_TIM1_TIMERMISr_t;

#define CMIC_TIM1_TIMERMISr_CLR(r) (r).cmic_tim1_timermis[0] = 0
#define CMIC_TIM1_TIMERMISr_SET(r,d) (r).cmic_tim1_timermis[0] = d
#define CMIC_TIM1_TIMERMISr_GET(r) (r).cmic_tim1_timermis[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERMISr_TIMER1MISf_GET(r) (((r).cmic_tim1_timermis[0]) & 0x1)
#define CMIC_TIM1_TIMERMISr_TIMER1MISf_SET(r,f) (r).cmic_tim1_timermis[0]=(((r).cmic_tim1_timermis[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM1_TIMERMISr_RESERVEDf_GET(r) ((((r).cmic_tim1_timermis[0]) >> 1) & 0x7fffffff)
#define CMIC_TIM1_TIMERMISr_RESERVEDf_SET(r,f) (r).cmic_tim1_timermis[0]=(((r).cmic_tim1_timermis[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERMISr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERPCellID0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERPCELLID0r_OFFSET 0x00026ff0

#define CMIC_TIM1_TIMERPCELLID0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERPCellID0.
 */
typedef union CMIC_TIM1_TIMERPCELLID0r_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerpcellid0[1];
	uint32_t _cmic_tim1_timerpcellid0;
} CMIC_TIM1_TIMERPCELLID0r_t;

#define CMIC_TIM1_TIMERPCELLID0r_CLR(r) (r).cmic_tim1_timerpcellid0[0] = 0
#define CMIC_TIM1_TIMERPCELLID0r_SET(r,d) (r).cmic_tim1_timerpcellid0[0] = d
#define CMIC_TIM1_TIMERPCELLID0r_GET(r) (r).cmic_tim1_timerpcellid0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERPCELLID0r_TIMERPCELLID0f_GET(r) (((r).cmic_tim1_timerpcellid0[0]) & 0xff)
#define CMIC_TIM1_TIMERPCELLID0r_TIMERPCELLID0f_SET(r,f) (r).cmic_tim1_timerpcellid0[0]=(((r).cmic_tim1_timerpcellid0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM1_TIMERPCELLID0r_RESERVEDf_GET(r) ((((r).cmic_tim1_timerpcellid0[0]) >> 8) & 0xffffff)
#define CMIC_TIM1_TIMERPCELLID0r_RESERVEDf_SET(r,f) (r).cmic_tim1_timerpcellid0[0]=(((r).cmic_tim1_timerpcellid0[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERPCELLID0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERPCellID1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERPCELLID1r_OFFSET 0x00026ff4

#define CMIC_TIM1_TIMERPCELLID1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERPCellID1.
 */
typedef union CMIC_TIM1_TIMERPCELLID1r_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerpcellid1[1];
	uint32_t _cmic_tim1_timerpcellid1;
} CMIC_TIM1_TIMERPCELLID1r_t;

#define CMIC_TIM1_TIMERPCELLID1r_CLR(r) (r).cmic_tim1_timerpcellid1[0] = 0
#define CMIC_TIM1_TIMERPCELLID1r_SET(r,d) (r).cmic_tim1_timerpcellid1[0] = d
#define CMIC_TIM1_TIMERPCELLID1r_GET(r) (r).cmic_tim1_timerpcellid1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERPCELLID1r_TIMERPCELLID1f_GET(r) (((r).cmic_tim1_timerpcellid1[0]) & 0xff)
#define CMIC_TIM1_TIMERPCELLID1r_TIMERPCELLID1f_SET(r,f) (r).cmic_tim1_timerpcellid1[0]=(((r).cmic_tim1_timerpcellid1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM1_TIMERPCELLID1r_RESERVEDf_GET(r) ((((r).cmic_tim1_timerpcellid1[0]) >> 8) & 0xffffff)
#define CMIC_TIM1_TIMERPCELLID1r_RESERVEDf_SET(r,f) (r).cmic_tim1_timerpcellid1[0]=(((r).cmic_tim1_timerpcellid1[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERPCELLID1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERPCellID2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERPCELLID2r_OFFSET 0x00026ff8

#define CMIC_TIM1_TIMERPCELLID2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERPCellID2.
 */
typedef union CMIC_TIM1_TIMERPCELLID2r_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerpcellid2[1];
	uint32_t _cmic_tim1_timerpcellid2;
} CMIC_TIM1_TIMERPCELLID2r_t;

#define CMIC_TIM1_TIMERPCELLID2r_CLR(r) (r).cmic_tim1_timerpcellid2[0] = 0
#define CMIC_TIM1_TIMERPCELLID2r_SET(r,d) (r).cmic_tim1_timerpcellid2[0] = d
#define CMIC_TIM1_TIMERPCELLID2r_GET(r) (r).cmic_tim1_timerpcellid2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERPCELLID2r_TIMERPCELLID2f_GET(r) (((r).cmic_tim1_timerpcellid2[0]) & 0xff)
#define CMIC_TIM1_TIMERPCELLID2r_TIMERPCELLID2f_SET(r,f) (r).cmic_tim1_timerpcellid2[0]=(((r).cmic_tim1_timerpcellid2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM1_TIMERPCELLID2r_RESERVEDf_GET(r) ((((r).cmic_tim1_timerpcellid2[0]) >> 8) & 0xffffff)
#define CMIC_TIM1_TIMERPCELLID2r_RESERVEDf_SET(r,f) (r).cmic_tim1_timerpcellid2[0]=(((r).cmic_tim1_timerpcellid2[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERPCELLID2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERPCellID3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERPCELLID3r_OFFSET 0x00026ffc

#define CMIC_TIM1_TIMERPCELLID3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERPCellID3.
 */
typedef union CMIC_TIM1_TIMERPCELLID3r_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerpcellid3[1];
	uint32_t _cmic_tim1_timerpcellid3;
} CMIC_TIM1_TIMERPCELLID3r_t;

#define CMIC_TIM1_TIMERPCELLID3r_CLR(r) (r).cmic_tim1_timerpcellid3[0] = 0
#define CMIC_TIM1_TIMERPCELLID3r_SET(r,d) (r).cmic_tim1_timerpcellid3[0] = d
#define CMIC_TIM1_TIMERPCELLID3r_GET(r) (r).cmic_tim1_timerpcellid3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERPCELLID3r_TIMERPCELLID3f_GET(r) (((r).cmic_tim1_timerpcellid3[0]) & 0xff)
#define CMIC_TIM1_TIMERPCELLID3r_TIMERPCELLID3f_SET(r,f) (r).cmic_tim1_timerpcellid3[0]=(((r).cmic_tim1_timerpcellid3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM1_TIMERPCELLID3r_RESERVEDf_GET(r) ((((r).cmic_tim1_timerpcellid3[0]) >> 8) & 0xffffff)
#define CMIC_TIM1_TIMERPCELLID3r_RESERVEDf_SET(r,f) (r).cmic_tim1_timerpcellid3[0]=(((r).cmic_tim1_timerpcellid3[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERPCELLID3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERPeriphID0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERPERIPHID0r_OFFSET 0x00026fe0

#define CMIC_TIM1_TIMERPERIPHID0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERPeriphID0.
 */
typedef union CMIC_TIM1_TIMERPERIPHID0r_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerperiphid0[1];
	uint32_t _cmic_tim1_timerperiphid0;
} CMIC_TIM1_TIMERPERIPHID0r_t;

#define CMIC_TIM1_TIMERPERIPHID0r_CLR(r) (r).cmic_tim1_timerperiphid0[0] = 0
#define CMIC_TIM1_TIMERPERIPHID0r_SET(r,d) (r).cmic_tim1_timerperiphid0[0] = d
#define CMIC_TIM1_TIMERPERIPHID0r_GET(r) (r).cmic_tim1_timerperiphid0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERPERIPHID0r_PARTNUMBER0f_GET(r) (((r).cmic_tim1_timerperiphid0[0]) & 0xff)
#define CMIC_TIM1_TIMERPERIPHID0r_PARTNUMBER0f_SET(r,f) (r).cmic_tim1_timerperiphid0[0]=(((r).cmic_tim1_timerperiphid0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM1_TIMERPERIPHID0r_RESERVEDf_GET(r) ((((r).cmic_tim1_timerperiphid0[0]) >> 8) & 0xffffff)
#define CMIC_TIM1_TIMERPERIPHID0r_RESERVEDf_SET(r,f) (r).cmic_tim1_timerperiphid0[0]=(((r).cmic_tim1_timerperiphid0[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERPERIPHID0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERPeriphID1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERPERIPHID1r_OFFSET 0x00026fe4

#define CMIC_TIM1_TIMERPERIPHID1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERPeriphID1.
 */
typedef union CMIC_TIM1_TIMERPERIPHID1r_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerperiphid1[1];
	uint32_t _cmic_tim1_timerperiphid1;
} CMIC_TIM1_TIMERPERIPHID1r_t;

#define CMIC_TIM1_TIMERPERIPHID1r_CLR(r) (r).cmic_tim1_timerperiphid1[0] = 0
#define CMIC_TIM1_TIMERPERIPHID1r_SET(r,d) (r).cmic_tim1_timerperiphid1[0] = d
#define CMIC_TIM1_TIMERPERIPHID1r_GET(r) (r).cmic_tim1_timerperiphid1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERPERIPHID1r_PARTNUMBER1f_GET(r) (((r).cmic_tim1_timerperiphid1[0]) & 0xf)
#define CMIC_TIM1_TIMERPERIPHID1r_PARTNUMBER1f_SET(r,f) (r).cmic_tim1_timerperiphid1[0]=(((r).cmic_tim1_timerperiphid1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_TIM1_TIMERPERIPHID1r_DESIGNER0f_GET(r) ((((r).cmic_tim1_timerperiphid1[0]) >> 4) & 0xf)
#define CMIC_TIM1_TIMERPERIPHID1r_DESIGNER0f_SET(r,f) (r).cmic_tim1_timerperiphid1[0]=(((r).cmic_tim1_timerperiphid1[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_TIM1_TIMERPERIPHID1r_RESERVEDf_GET(r) ((((r).cmic_tim1_timerperiphid1[0]) >> 8) & 0xffffff)
#define CMIC_TIM1_TIMERPERIPHID1r_RESERVEDf_SET(r,f) (r).cmic_tim1_timerperiphid1[0]=(((r).cmic_tim1_timerperiphid1[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERPERIPHID1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERPeriphID2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERPERIPHID2r_OFFSET 0x00026fe8

#define CMIC_TIM1_TIMERPERIPHID2r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERPeriphID2.
 */
typedef union CMIC_TIM1_TIMERPERIPHID2r_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerperiphid2[1];
	uint32_t _cmic_tim1_timerperiphid2;
} CMIC_TIM1_TIMERPERIPHID2r_t;

#define CMIC_TIM1_TIMERPERIPHID2r_CLR(r) (r).cmic_tim1_timerperiphid2[0] = 0
#define CMIC_TIM1_TIMERPERIPHID2r_SET(r,d) (r).cmic_tim1_timerperiphid2[0] = d
#define CMIC_TIM1_TIMERPERIPHID2r_GET(r) (r).cmic_tim1_timerperiphid2[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERPERIPHID2r_DESIGNER1f_GET(r) (((r).cmic_tim1_timerperiphid2[0]) & 0xf)
#define CMIC_TIM1_TIMERPERIPHID2r_DESIGNER1f_SET(r,f) (r).cmic_tim1_timerperiphid2[0]=(((r).cmic_tim1_timerperiphid2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define CMIC_TIM1_TIMERPERIPHID2r_REVISIONf_GET(r) ((((r).cmic_tim1_timerperiphid2[0]) >> 4) & 0xf)
#define CMIC_TIM1_TIMERPERIPHID2r_REVISIONf_SET(r,f) (r).cmic_tim1_timerperiphid2[0]=(((r).cmic_tim1_timerperiphid2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define CMIC_TIM1_TIMERPERIPHID2r_RESERVEDf_GET(r) ((((r).cmic_tim1_timerperiphid2[0]) >> 8) & 0xffffff)
#define CMIC_TIM1_TIMERPERIPHID2r_RESERVEDf_SET(r,f) (r).cmic_tim1_timerperiphid2[0]=(((r).cmic_tim1_timerperiphid2[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERPERIPHID2r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERPeriphID3
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERPERIPHID3r_OFFSET 0x00026fec

#define CMIC_TIM1_TIMERPERIPHID3r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERPeriphID3.
 */
typedef union CMIC_TIM1_TIMERPERIPHID3r_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerperiphid3[1];
	uint32_t _cmic_tim1_timerperiphid3;
} CMIC_TIM1_TIMERPERIPHID3r_t;

#define CMIC_TIM1_TIMERPERIPHID3r_CLR(r) (r).cmic_tim1_timerperiphid3[0] = 0
#define CMIC_TIM1_TIMERPERIPHID3r_SET(r,d) (r).cmic_tim1_timerperiphid3[0] = d
#define CMIC_TIM1_TIMERPERIPHID3r_GET(r) (r).cmic_tim1_timerperiphid3[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERPERIPHID3r_CONFIGURATIONf_GET(r) (((r).cmic_tim1_timerperiphid3[0]) & 0xff)
#define CMIC_TIM1_TIMERPERIPHID3r_CONFIGURATIONf_SET(r,f) (r).cmic_tim1_timerperiphid3[0]=(((r).cmic_tim1_timerperiphid3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define CMIC_TIM1_TIMERPERIPHID3r_RESERVEDf_GET(r) ((((r).cmic_tim1_timerperiphid3[0]) >> 8) & 0xffffff)
#define CMIC_TIM1_TIMERPERIPHID3r_RESERVEDf_SET(r,f) (r).cmic_tim1_timerperiphid3[0]=(((r).cmic_tim1_timerperiphid3[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERPERIPHID3r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERRIS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERRISr_OFFSET 0x00026010

#define CMIC_TIM1_TIMERRISr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERRIS.
 */
typedef union CMIC_TIM1_TIMERRISr_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timerris[1];
	uint32_t _cmic_tim1_timerris;
} CMIC_TIM1_TIMERRISr_t;

#define CMIC_TIM1_TIMERRISr_CLR(r) (r).cmic_tim1_timerris[0] = 0
#define CMIC_TIM1_TIMERRISr_SET(r,d) (r).cmic_tim1_timerris[0] = d
#define CMIC_TIM1_TIMERRISr_GET(r) (r).cmic_tim1_timerris[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERRISr_TIMER1RISf_GET(r) (((r).cmic_tim1_timerris[0]) & 0x1)
#define CMIC_TIM1_TIMERRISr_TIMER1RISf_SET(r,f) (r).cmic_tim1_timerris[0]=(((r).cmic_tim1_timerris[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIM1_TIMERRISr_RESERVEDf_GET(r) ((((r).cmic_tim1_timerris[0]) >> 1) & 0x7fffffff)
#define CMIC_TIM1_TIMERRISr_RESERVEDf_SET(r,f) (r).cmic_tim1_timerris[0]=(((r).cmic_tim1_timerris[0] & ~((uint32_t)0x7fffffff << 1)) | ((((uint32_t)f) & 0x7fffffff) << 1))

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERRISr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIM1_TIMERValue
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIM1_TIMERVALUEr_OFFSET 0x00026004

#define CMIC_TIM1_TIMERVALUEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIM1_TIMERValue.
 */
typedef union CMIC_TIM1_TIMERVALUEr_s {
	uint32_t v[1];
	uint32_t cmic_tim1_timervalue[1];
	uint32_t _cmic_tim1_timervalue;
} CMIC_TIM1_TIMERVALUEr_t;

#define CMIC_TIM1_TIMERVALUEr_CLR(r) (r).cmic_tim1_timervalue[0] = 0
#define CMIC_TIM1_TIMERVALUEr_SET(r,d) (r).cmic_tim1_timervalue[0] = d
#define CMIC_TIM1_TIMERVALUEr_GET(r) (r).cmic_tim1_timervalue[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIM1_TIMERVALUEr_TIMER1VALUEf_GET(r) ((r).cmic_tim1_timervalue[0])
#define CMIC_TIM1_TIMERVALUEr_TIMER1VALUEf_SET(r,f) (r).cmic_tim1_timervalue[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIM1_TIMERVALUEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_BROADSYNC0_CLK_COUNT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_BROADSYNC0_CLK_COUNT_CTRLr_OFFSET 0x00010900

#define CMIC_TIMESYNC_BROADSYNC0_CLK_COUNT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_BROADSYNC0_CLK_COUNT_CTRLr is element of CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_BROADSYNC1_CLK_COUNT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_BROADSYNC1_CLK_COUNT_CTRLr_OFFSET 0x00010904

#define CMIC_TIMESYNC_BROADSYNC1_CLK_COUNT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_BROADSYNC1_CLK_COUNT_CTRLr is element of CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_OFFSET 0x00010900

#define CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRL.
 */
typedef union CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_broadsync_clk_count_ctrl[1];
	uint32_t _cmic_timesync_broadsync_clk_count_ctrl;
} CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_t;

#define CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_CLR(r) (r).cmic_timesync_broadsync_clk_count_ctrl[0] = 0
#define CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_SET(r,d) (r).cmic_timesync_broadsync_clk_count_ctrl[0] = d
#define CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_GET(r) (r).cmic_timesync_broadsync_clk_count_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_DIVISORf_GET(r) (((r).cmic_timesync_broadsync_clk_count_ctrl[0]) & 0xfffffff)
#define CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_DIVISORf_SET(r,f) (r).cmic_timesync_broadsync_clk_count_ctrl[0]=(((r).cmic_timesync_broadsync_clk_count_ctrl[0] & ~((uint32_t)0xfffffff)) | (((uint32_t)f) & 0xfffffff))
#define CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_ENABLEf_GET(r) ((((r).cmic_timesync_broadsync_clk_count_ctrl[0]) >> 28) & 0x1)
#define CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr_ENABLEf_SET(r,f) (r).cmic_timesync_broadsync_clk_count_ctrl[0]=(((r).cmic_timesync_broadsync_clk_count_ctrl[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_BROADSYNC_CLK_COUNT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_CAPTURE_STATUS_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_OFFSET 0x0001090c

#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_CAPTURE_STATUS_1.
 */
typedef union CMIC_TIMESYNC_CAPTURE_STATUS_1r_s {
	uint32_t v[1];
	uint32_t cmic_timesync_capture_status_1[1];
	uint32_t _cmic_timesync_capture_status_1;
} CMIC_TIMESYNC_CAPTURE_STATUS_1r_t;

#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_CLR(r) (r).cmic_timesync_capture_status_1[0] = 0
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_SET(r,d) (r).cmic_timesync_capture_status_1[0] = d
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_GET(r) (r).cmic_timesync_capture_status_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_TIME_CAPTURE_COMPLETEf_GET(r) (((r).cmic_timesync_capture_status_1[0]) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_TIME_CAPTURE_COMPLETEf_SET(r,f) (r).cmic_timesync_capture_status_1[0]=(((r).cmic_timesync_capture_status_1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_BSYNC0_TX_HB_STATUSf_GET(r) ((((r).cmic_timesync_capture_status_1[0]) >> 1) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_BSYNC0_TX_HB_STATUSf_SET(r,f) (r).cmic_timesync_capture_status_1[0]=(((r).cmic_timesync_capture_status_1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_BSYNC0_RX_HB_STATUSf_GET(r) ((((r).cmic_timesync_capture_status_1[0]) >> 2) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_BSYNC0_RX_HB_STATUSf_SET(r,f) (r).cmic_timesync_capture_status_1[0]=(((r).cmic_timesync_capture_status_1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_BSYNC1_TX_HB_STATUSf_GET(r) ((((r).cmic_timesync_capture_status_1[0]) >> 3) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_BSYNC1_TX_HB_STATUSf_SET(r,f) (r).cmic_timesync_capture_status_1[0]=(((r).cmic_timesync_capture_status_1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_BSYNC1_RX_HB_STATUSf_GET(r) ((((r).cmic_timesync_capture_status_1[0]) >> 4) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_BSYNC1_RX_HB_STATUSf_SET(r,f) (r).cmic_timesync_capture_status_1[0]=(((r).cmic_timesync_capture_status_1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_FIFO_WRITE_COMPLETEf_GET(r) ((((r).cmic_timesync_capture_status_1[0]) >> 5) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_FIFO_WRITE_COMPLETEf_SET(r,f) (r).cmic_timesync_capture_status_1[0]=(((r).cmic_timesync_capture_status_1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_FIFO_DEPTHf_GET(r) ((((r).cmic_timesync_capture_status_1[0]) >> 6) & 0x7f)
#define CMIC_TIMESYNC_CAPTURE_STATUS_1r_FIFO_DEPTHf_SET(r,f) (r).cmic_timesync_capture_status_1[0]=(((r).cmic_timesync_capture_status_1[0] & ~((uint32_t)0x7f << 6)) | ((((uint32_t)f) & 0x7f) << 6))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_CAPTURE_STATUS_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_OFFSET 0x00010910

#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1.
 */
typedef union CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_s {
	uint32_t v[1];
	uint32_t cmic_timesync_capture_status_clr_1[1];
	uint32_t _cmic_timesync_capture_status_clr_1;
} CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_t;

#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_CLR(r) (r).cmic_timesync_capture_status_clr_1[0] = 0
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_SET(r,d) (r).cmic_timesync_capture_status_clr_1[0] = d
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_GET(r) (r).cmic_timesync_capture_status_clr_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_TIME_CAPTURE_COMPLETE_CLRf_GET(r) (((r).cmic_timesync_capture_status_clr_1[0]) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_TIME_CAPTURE_COMPLETE_CLRf_SET(r,f) (r).cmic_timesync_capture_status_clr_1[0]=(((r).cmic_timesync_capture_status_clr_1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_BSYNC0_TX_HB_STATUS_CLRf_GET(r) ((((r).cmic_timesync_capture_status_clr_1[0]) >> 1) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_BSYNC0_TX_HB_STATUS_CLRf_SET(r,f) (r).cmic_timesync_capture_status_clr_1[0]=(((r).cmic_timesync_capture_status_clr_1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_BSYNC0_RX_HB_STATUS_CLRf_GET(r) ((((r).cmic_timesync_capture_status_clr_1[0]) >> 2) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_BSYNC0_RX_HB_STATUS_CLRf_SET(r,f) (r).cmic_timesync_capture_status_clr_1[0]=(((r).cmic_timesync_capture_status_clr_1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_BSYNC1_TX_HB_STATUS_CLRf_GET(r) ((((r).cmic_timesync_capture_status_clr_1[0]) >> 3) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_BSYNC1_TX_HB_STATUS_CLRf_SET(r,f) (r).cmic_timesync_capture_status_clr_1[0]=(((r).cmic_timesync_capture_status_clr_1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_BSYNC1_RX_HB_STATUS_CLRf_GET(r) ((((r).cmic_timesync_capture_status_clr_1[0]) >> 4) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_BSYNC1_RX_HB_STATUS_CLRf_SET(r,f) (r).cmic_timesync_capture_status_clr_1[0]=(((r).cmic_timesync_capture_status_clr_1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_FIFO_WRITE_COMPLETE_CLRf_GET(r) ((((r).cmic_timesync_capture_status_clr_1[0]) >> 5) & 0x1)
#define CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r_FIFO_WRITE_COMPLETE_CLRf_SET(r,f) (r).cmic_timesync_capture_status_clr_1[0]=(((r).cmic_timesync_capture_status_clr_1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_CAPTURE_STATUS_CLR_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_COUNTER_CONFIG_SELECT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr_OFFSET 0x00010600

#define CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_COUNTER_CONFIG_SELECT.
 */
typedef union CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_counter_config_select[1];
	uint32_t _cmic_timesync_counter_config_select;
} CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr_t;

#define CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr_CLR(r) (r).cmic_timesync_counter_config_select[0] = 0
#define CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr_SET(r,d) (r).cmic_timesync_counter_config_select[0] = d
#define CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr_GET(r) (r).cmic_timesync_counter_config_select[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr_ENABLE_COMMON_CONTROLf_GET(r) (((r).cmic_timesync_counter_config_select[0]) & 0x1)
#define CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr_ENABLE_COMMON_CONTROLf_SET(r,f) (r).cmic_timesync_counter_config_select[0]=(((r).cmic_timesync_counter_config_select[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_COUNTER_CONFIG_SELECTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_FIFO_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_FIFO_STATUSr_OFFSET 0x0001063c

#define CMIC_TIMESYNC_FIFO_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_FIFO_STATUS.
 */
typedef union CMIC_TIMESYNC_FIFO_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_fifo_status[1];
	uint32_t _cmic_timesync_fifo_status;
} CMIC_TIMESYNC_FIFO_STATUSr_t;

#define CMIC_TIMESYNC_FIFO_STATUSr_CLR(r) (r).cmic_timesync_fifo_status[0] = 0
#define CMIC_TIMESYNC_FIFO_STATUSr_SET(r,d) (r).cmic_timesync_fifo_status[0] = d
#define CMIC_TIMESYNC_FIFO_STATUSr_GET(r) (r).cmic_timesync_fifo_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_FIFO_STATUSr_SOURCE_OVERFLOWf_GET(r) (((r).cmic_timesync_fifo_status[0]) & 0x7ffff)
#define CMIC_TIMESYNC_FIFO_STATUSr_SOURCE_OVERFLOWf_SET(r,f) (r).cmic_timesync_fifo_status[0]=(((r).cmic_timesync_fifo_status[0] & ~((uint32_t)0x7ffff)) | (((uint32_t)f) & 0x7ffff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_FIFO_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_0_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_0_CTRLr_OFFSET 0x00010640

#define CMIC_TIMESYNC_GPIO_0_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_0_CTRLr is element of CMIC_TIMESYNC_GPIO_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_0_DOWN_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_0_DOWN_EVENT_CTRLr_OFFSET 0x0001064c

#define CMIC_TIMESYNC_GPIO_0_DOWN_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_0_DOWN_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_0_INPUT_DIVISOR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_0_INPUT_DIVISORr_OFFSET 0x00010658

#define CMIC_TIMESYNC_GPIO_0_INPUT_DIVISORr_SIZE 4

/* CMIC_TIMESYNC_GPIO_0_INPUT_DIVISORr is element of CMIC_TIMESYNC_GPIO_INPUT_DIVISOR */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_0_OUTPUT_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_0_OUTPUT_ENABLEr_OFFSET 0x00010644

#define CMIC_TIMESYNC_GPIO_0_OUTPUT_ENABLEr_SIZE 4

/* CMIC_TIMESYNC_GPIO_0_OUTPUT_ENABLEr is element of CMIC_TIMESYNC_GPIO_OUTPUT_ENABLE */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_0_PHASE_ADJUST_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_0_PHASE_ADJUST_LOWERr_OFFSET 0x00010650

#define CMIC_TIMESYNC_GPIO_0_PHASE_ADJUST_LOWERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_0_PHASE_ADJUST_LOWERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_0_PHASE_ADJUST_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_0_PHASE_ADJUST_UPPERr_OFFSET 0x00010654

#define CMIC_TIMESYNC_GPIO_0_PHASE_ADJUST_UPPERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_0_PHASE_ADJUST_UPPERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_0_UP_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_0_UP_EVENT_CTRLr_OFFSET 0x00010648

#define CMIC_TIMESYNC_GPIO_0_UP_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_0_UP_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_UP_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_1_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_1_CTRLr_OFFSET 0x0001065c

#define CMIC_TIMESYNC_GPIO_1_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_1_CTRLr is element of CMIC_TIMESYNC_GPIO_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_1_DOWN_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_1_DOWN_EVENT_CTRLr_OFFSET 0x00010668

#define CMIC_TIMESYNC_GPIO_1_DOWN_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_1_DOWN_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_1_INPUT_DIVISOR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_1_INPUT_DIVISORr_OFFSET 0x00010674

#define CMIC_TIMESYNC_GPIO_1_INPUT_DIVISORr_SIZE 4

/* CMIC_TIMESYNC_GPIO_1_INPUT_DIVISORr is element of CMIC_TIMESYNC_GPIO_INPUT_DIVISOR */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_1_OUTPUT_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_1_OUTPUT_ENABLEr_OFFSET 0x00010660

#define CMIC_TIMESYNC_GPIO_1_OUTPUT_ENABLEr_SIZE 4

/* CMIC_TIMESYNC_GPIO_1_OUTPUT_ENABLEr is element of CMIC_TIMESYNC_GPIO_OUTPUT_ENABLE */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_1_PHASE_ADJUST_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_1_PHASE_ADJUST_LOWERr_OFFSET 0x0001066c

#define CMIC_TIMESYNC_GPIO_1_PHASE_ADJUST_LOWERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_1_PHASE_ADJUST_LOWERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_1_PHASE_ADJUST_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_1_PHASE_ADJUST_UPPERr_OFFSET 0x00010670

#define CMIC_TIMESYNC_GPIO_1_PHASE_ADJUST_UPPERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_1_PHASE_ADJUST_UPPERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_1_UP_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_1_UP_EVENT_CTRLr_OFFSET 0x00010664

#define CMIC_TIMESYNC_GPIO_1_UP_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_1_UP_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_UP_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_2_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_2_CTRLr_OFFSET 0x00010678

#define CMIC_TIMESYNC_GPIO_2_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_2_CTRLr is element of CMIC_TIMESYNC_GPIO_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_2_DOWN_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_2_DOWN_EVENT_CTRLr_OFFSET 0x00010684

#define CMIC_TIMESYNC_GPIO_2_DOWN_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_2_DOWN_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_2_INPUT_DIVISOR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_2_INPUT_DIVISORr_OFFSET 0x00010690

#define CMIC_TIMESYNC_GPIO_2_INPUT_DIVISORr_SIZE 4

/* CMIC_TIMESYNC_GPIO_2_INPUT_DIVISORr is element of CMIC_TIMESYNC_GPIO_INPUT_DIVISOR */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_2_OUTPUT_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_2_OUTPUT_ENABLEr_OFFSET 0x0001067c

#define CMIC_TIMESYNC_GPIO_2_OUTPUT_ENABLEr_SIZE 4

/* CMIC_TIMESYNC_GPIO_2_OUTPUT_ENABLEr is element of CMIC_TIMESYNC_GPIO_OUTPUT_ENABLE */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_2_PHASE_ADJUST_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_2_PHASE_ADJUST_LOWERr_OFFSET 0x00010688

#define CMIC_TIMESYNC_GPIO_2_PHASE_ADJUST_LOWERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_2_PHASE_ADJUST_LOWERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_2_PHASE_ADJUST_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_2_PHASE_ADJUST_UPPERr_OFFSET 0x0001068c

#define CMIC_TIMESYNC_GPIO_2_PHASE_ADJUST_UPPERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_2_PHASE_ADJUST_UPPERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_2_UP_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_2_UP_EVENT_CTRLr_OFFSET 0x00010680

#define CMIC_TIMESYNC_GPIO_2_UP_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_2_UP_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_UP_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_3_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_3_CTRLr_OFFSET 0x00010694

#define CMIC_TIMESYNC_GPIO_3_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_3_CTRLr is element of CMIC_TIMESYNC_GPIO_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_3_DOWN_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_3_DOWN_EVENT_CTRLr_OFFSET 0x000106a0

#define CMIC_TIMESYNC_GPIO_3_DOWN_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_3_DOWN_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_3_INPUT_DIVISOR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_3_INPUT_DIVISORr_OFFSET 0x000106ac

#define CMIC_TIMESYNC_GPIO_3_INPUT_DIVISORr_SIZE 4

/* CMIC_TIMESYNC_GPIO_3_INPUT_DIVISORr is element of CMIC_TIMESYNC_GPIO_INPUT_DIVISOR */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_3_OUTPUT_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_3_OUTPUT_ENABLEr_OFFSET 0x00010698

#define CMIC_TIMESYNC_GPIO_3_OUTPUT_ENABLEr_SIZE 4

/* CMIC_TIMESYNC_GPIO_3_OUTPUT_ENABLEr is element of CMIC_TIMESYNC_GPIO_OUTPUT_ENABLE */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_3_PHASE_ADJUST_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_3_PHASE_ADJUST_LOWERr_OFFSET 0x000106a4

#define CMIC_TIMESYNC_GPIO_3_PHASE_ADJUST_LOWERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_3_PHASE_ADJUST_LOWERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_3_PHASE_ADJUST_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_3_PHASE_ADJUST_UPPERr_OFFSET 0x000106a8

#define CMIC_TIMESYNC_GPIO_3_PHASE_ADJUST_UPPERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_3_PHASE_ADJUST_UPPERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_3_UP_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_3_UP_EVENT_CTRLr_OFFSET 0x0001069c

#define CMIC_TIMESYNC_GPIO_3_UP_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_3_UP_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_UP_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_4_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_4_CTRLr_OFFSET 0x000106b0

#define CMIC_TIMESYNC_GPIO_4_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_4_CTRLr is element of CMIC_TIMESYNC_GPIO_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_4_DOWN_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_4_DOWN_EVENT_CTRLr_OFFSET 0x000106bc

#define CMIC_TIMESYNC_GPIO_4_DOWN_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_4_DOWN_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_4_INPUT_DIVISOR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_4_INPUT_DIVISORr_OFFSET 0x000106c8

#define CMIC_TIMESYNC_GPIO_4_INPUT_DIVISORr_SIZE 4

/* CMIC_TIMESYNC_GPIO_4_INPUT_DIVISORr is element of CMIC_TIMESYNC_GPIO_INPUT_DIVISOR */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_4_OUTPUT_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_4_OUTPUT_ENABLEr_OFFSET 0x000106b4

#define CMIC_TIMESYNC_GPIO_4_OUTPUT_ENABLEr_SIZE 4

/* CMIC_TIMESYNC_GPIO_4_OUTPUT_ENABLEr is element of CMIC_TIMESYNC_GPIO_OUTPUT_ENABLE */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_4_PHASE_ADJUST_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_4_PHASE_ADJUST_LOWERr_OFFSET 0x000106c0

#define CMIC_TIMESYNC_GPIO_4_PHASE_ADJUST_LOWERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_4_PHASE_ADJUST_LOWERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_4_PHASE_ADJUST_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_4_PHASE_ADJUST_UPPERr_OFFSET 0x000106c4

#define CMIC_TIMESYNC_GPIO_4_PHASE_ADJUST_UPPERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_4_PHASE_ADJUST_UPPERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_4_UP_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_4_UP_EVENT_CTRLr_OFFSET 0x000106b8

#define CMIC_TIMESYNC_GPIO_4_UP_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_4_UP_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_UP_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_5_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_5_CTRLr_OFFSET 0x000106cc

#define CMIC_TIMESYNC_GPIO_5_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_5_CTRLr is element of CMIC_TIMESYNC_GPIO_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_5_DOWN_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_5_DOWN_EVENT_CTRLr_OFFSET 0x000106d8

#define CMIC_TIMESYNC_GPIO_5_DOWN_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_5_DOWN_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_5_INPUT_DIVISOR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_5_INPUT_DIVISORr_OFFSET 0x000106e4

#define CMIC_TIMESYNC_GPIO_5_INPUT_DIVISORr_SIZE 4

/* CMIC_TIMESYNC_GPIO_5_INPUT_DIVISORr is element of CMIC_TIMESYNC_GPIO_INPUT_DIVISOR */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_5_OUTPUT_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_5_OUTPUT_ENABLEr_OFFSET 0x000106d0

#define CMIC_TIMESYNC_GPIO_5_OUTPUT_ENABLEr_SIZE 4

/* CMIC_TIMESYNC_GPIO_5_OUTPUT_ENABLEr is element of CMIC_TIMESYNC_GPIO_OUTPUT_ENABLE */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_5_PHASE_ADJUST_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_5_PHASE_ADJUST_LOWERr_OFFSET 0x000106dc

#define CMIC_TIMESYNC_GPIO_5_PHASE_ADJUST_LOWERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_5_PHASE_ADJUST_LOWERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_5_PHASE_ADJUST_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_5_PHASE_ADJUST_UPPERr_OFFSET 0x000106e0

#define CMIC_TIMESYNC_GPIO_5_PHASE_ADJUST_UPPERr_SIZE 4

/* CMIC_TIMESYNC_GPIO_5_PHASE_ADJUST_UPPERr is element of CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_5_UP_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_5_UP_EVENT_CTRLr_OFFSET 0x000106d4

#define CMIC_TIMESYNC_GPIO_5_UP_EVENT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_GPIO_5_UP_EVENT_CTRLr is element of CMIC_TIMESYNC_GPIO_UP_EVENT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_CTRLr_OFFSET 0x00010640

#define CMIC_TIMESYNC_GPIO_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_GPIO_CTRL.
 */
typedef union CMIC_TIMESYNC_GPIO_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_gpio_ctrl[1];
	uint32_t _cmic_timesync_gpio_ctrl;
} CMIC_TIMESYNC_GPIO_CTRLr_t;

#define CMIC_TIMESYNC_GPIO_CTRLr_CLR(r) (r).cmic_timesync_gpio_ctrl[0] = 0
#define CMIC_TIMESYNC_GPIO_CTRLr_SET(r,d) (r).cmic_timesync_gpio_ctrl[0] = d
#define CMIC_TIMESYNC_GPIO_CTRLr_GET(r) (r).cmic_timesync_gpio_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_GPIO_CTRLr_ENABLEf_GET(r) (((r).cmic_timesync_gpio_ctrl[0]) & 0x1)
#define CMIC_TIMESYNC_GPIO_CTRLr_ENABLEf_SET(r,f) (r).cmic_timesync_gpio_ctrl[0]=(((r).cmic_timesync_gpio_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIMESYNC_GPIO_CTRLr_ONE_SHOTf_GET(r) ((((r).cmic_timesync_gpio_ctrl[0]) >> 1) & 0x1)
#define CMIC_TIMESYNC_GPIO_CTRLr_ONE_SHOTf_SET(r,f) (r).cmic_timesync_gpio_ctrl[0]=(((r).cmic_timesync_gpio_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_GPIO_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr_OFFSET 0x0001064c

#define CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRL.
 */
typedef union CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_gpio_down_event_ctrl[1];
	uint32_t _cmic_timesync_gpio_down_event_ctrl;
} CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr_t;

#define CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr_CLR(r) (r).cmic_timesync_gpio_down_event_ctrl[0] = 0
#define CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr_SET(r,d) (r).cmic_timesync_gpio_down_event_ctrl[0] = d
#define CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr_GET(r) (r).cmic_timesync_gpio_down_event_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr_INTERVAL_LENGTHf_GET(r) (((r).cmic_timesync_gpio_down_event_ctrl[0]) & 0x3fffffff)
#define CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr_INTERVAL_LENGTHf_SET(r,f) (r).cmic_timesync_gpio_down_event_ctrl[0]=(((r).cmic_timesync_gpio_down_event_ctrl[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_GPIO_DOWN_EVENT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_INPUT_DIVISOR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_INPUT_DIVISORr_OFFSET 0x00010658

#define CMIC_TIMESYNC_GPIO_INPUT_DIVISORr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_GPIO_INPUT_DIVISOR.
 */
typedef union CMIC_TIMESYNC_GPIO_INPUT_DIVISORr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_gpio_input_divisor[1];
	uint32_t _cmic_timesync_gpio_input_divisor;
} CMIC_TIMESYNC_GPIO_INPUT_DIVISORr_t;

#define CMIC_TIMESYNC_GPIO_INPUT_DIVISORr_CLR(r) (r).cmic_timesync_gpio_input_divisor[0] = 0
#define CMIC_TIMESYNC_GPIO_INPUT_DIVISORr_SET(r,d) (r).cmic_timesync_gpio_input_divisor[0] = d
#define CMIC_TIMESYNC_GPIO_INPUT_DIVISORr_GET(r) (r).cmic_timesync_gpio_input_divisor[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_GPIO_INPUT_DIVISORr_DIVISORf_GET(r) (((r).cmic_timesync_gpio_input_divisor[0]) & 0xfffffff)
#define CMIC_TIMESYNC_GPIO_INPUT_DIVISORr_DIVISORf_SET(r,f) (r).cmic_timesync_gpio_input_divisor[0]=(((r).cmic_timesync_gpio_input_divisor[0] & ~((uint32_t)0xfffffff)) | (((uint32_t)f) & 0xfffffff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_GPIO_INPUT_DIVISORr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_OUTPUT_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr_OFFSET 0x00010644

#define CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_GPIO_OUTPUT_ENABLE.
 */
typedef union CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_gpio_output_enable[1];
	uint32_t _cmic_timesync_gpio_output_enable;
} CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr_t;

#define CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr_CLR(r) (r).cmic_timesync_gpio_output_enable[0] = 0
#define CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr_SET(r,d) (r).cmic_timesync_gpio_output_enable[0] = d
#define CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr_GET(r) (r).cmic_timesync_gpio_output_enable[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr_OUTPUT_ENABLEf_GET(r) (((r).cmic_timesync_gpio_output_enable[0]) & 0x1)
#define CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr_OUTPUT_ENABLEf_SET(r,f) (r).cmic_timesync_gpio_output_enable[0]=(((r).cmic_timesync_gpio_output_enable[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_GPIO_OUTPUT_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr_OFFSET 0x00010650

#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWER.
 */
typedef union CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_gpio_phase_adjust_lower[1];
	uint32_t _cmic_timesync_gpio_phase_adjust_lower;
} CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr_t;

#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr_CLR(r) (r).cmic_timesync_gpio_phase_adjust_lower[0] = 0
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr_SET(r,d) (r).cmic_timesync_gpio_phase_adjust_lower[0] = d
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr_GET(r) (r).cmic_timesync_gpio_phase_adjust_lower[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr_PHASE_ADJUSTf_GET(r) ((r).cmic_timesync_gpio_phase_adjust_lower[0])
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr_PHASE_ADJUSTf_SET(r,f) (r).cmic_timesync_gpio_phase_adjust_lower[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_GPIO_PHASE_ADJUST_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr_OFFSET 0x00010654

#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPER.
 */
typedef union CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_gpio_phase_adjust_upper[1];
	uint32_t _cmic_timesync_gpio_phase_adjust_upper;
} CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr_t;

#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr_CLR(r) (r).cmic_timesync_gpio_phase_adjust_upper[0] = 0
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr_SET(r,d) (r).cmic_timesync_gpio_phase_adjust_upper[0] = d
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr_GET(r) (r).cmic_timesync_gpio_phase_adjust_upper[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr_PHASE_ADJUSTf_GET(r) (((r).cmic_timesync_gpio_phase_adjust_upper[0]) & 0xffff)
#define CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr_PHASE_ADJUSTf_SET(r,f) (r).cmic_timesync_gpio_phase_adjust_upper[0]=(((r).cmic_timesync_gpio_phase_adjust_upper[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_GPIO_PHASE_ADJUST_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_GPIO_UP_EVENT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr_OFFSET 0x00010648

#define CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_GPIO_UP_EVENT_CTRL.
 */
typedef union CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_gpio_up_event_ctrl[1];
	uint32_t _cmic_timesync_gpio_up_event_ctrl;
} CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr_t;

#define CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr_CLR(r) (r).cmic_timesync_gpio_up_event_ctrl[0] = 0
#define CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr_SET(r,d) (r).cmic_timesync_gpio_up_event_ctrl[0] = d
#define CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr_GET(r) (r).cmic_timesync_gpio_up_event_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr_INTERVAL_LENGTHf_GET(r) (((r).cmic_timesync_gpio_up_event_ctrl[0]) & 0x3fffffff)
#define CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr_INTERVAL_LENGTHf_SET(r,f) (r).cmic_timesync_gpio_up_event_ctrl[0]=(((r).cmic_timesync_gpio_up_event_ctrl[0] & ~((uint32_t)0x3fffffff)) | (((uint32_t)f) & 0x3fffffff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_GPIO_UP_EVENT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr_OFFSET 0x0001062c

#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWER.
 */
typedef union CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_input_time_fifo_ts_lower[1];
	uint32_t _cmic_timesync_input_time_fifo_ts_lower;
} CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr_t;

#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr_CLR(r) (r).cmic_timesync_input_time_fifo_ts_lower[0] = 0
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr_SET(r,d) (r).cmic_timesync_input_time_fifo_ts_lower[0] = d
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr_GET(r) (r).cmic_timesync_input_time_fifo_ts_lower[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr_TIMESTAMPf_GET(r) ((r).cmic_timesync_input_time_fifo_ts_lower[0])
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr_TIMESTAMPf_SET(r,f) (r).cmic_timesync_input_time_fifo_ts_lower[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_OFFSET 0x00010630

#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPER.
 */
typedef union CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_input_time_fifo_ts_upper[1];
	uint32_t _cmic_timesync_input_time_fifo_ts_upper;
} CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_t;

#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_CLR(r) (r).cmic_timesync_input_time_fifo_ts_upper[0] = 0
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_SET(r,d) (r).cmic_timesync_input_time_fifo_ts_upper[0] = d
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_GET(r) (r).cmic_timesync_input_time_fifo_ts_upper[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_TIMESTAMPf_GET(r) (((r).cmic_timesync_input_time_fifo_ts_upper[0]) & 0xffff)
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_TIMESTAMPf_SET(r,f) (r).cmic_timesync_input_time_fifo_ts_upper[0]=(((r).cmic_timesync_input_time_fifo_ts_upper[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_TIMESTAMPING_ERRORf_GET(r) ((((r).cmic_timesync_input_time_fifo_ts_upper[0]) >> 16) & 0x3)
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_TIMESTAMPING_ERRORf_SET(r,f) (r).cmic_timesync_input_time_fifo_ts_upper[0]=(((r).cmic_timesync_input_time_fifo_ts_upper[0] & ~((uint32_t)0x3 << 16)) | ((((uint32_t)f) & 0x3) << 16))
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_EVENT_IDf_GET(r) ((((r).cmic_timesync_input_time_fifo_ts_upper[0]) >> 18) & 0x1f)
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_EVENT_IDf_SET(r,f) (r).cmic_timesync_input_time_fifo_ts_upper[0]=(((r).cmic_timesync_input_time_fifo_ts_upper[0] & ~((uint32_t)0x1f << 18)) | ((((uint32_t)f) & 0x1f) << 18))
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_VALIDf_GET(r) ((((r).cmic_timesync_input_time_fifo_ts_upper[0]) >> 23) & 0x1)
#define CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr_VALIDf_SET(r,f) (r).cmic_timesync_input_time_fifo_ts_upper[0]=(((r).cmic_timesync_input_time_fifo_ts_upper[0] & ~((uint32_t)0x1 << 23)) | ((((uint32_t)f) & 0x1) << 23))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_INPUT_TIME_FIFO_TS_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_INTERRUPT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_INTERRUPT_CLRr_OFFSET 0x0001091c

#define CMIC_TIMESYNC_INTERRUPT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_INTERRUPT_CLR.
 */
typedef union CMIC_TIMESYNC_INTERRUPT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_interrupt_clr[1];
	uint32_t _cmic_timesync_interrupt_clr;
} CMIC_TIMESYNC_INTERRUPT_CLRr_t;

#define CMIC_TIMESYNC_INTERRUPT_CLRr_CLR(r) (r).cmic_timesync_interrupt_clr[0] = 0
#define CMIC_TIMESYNC_INTERRUPT_CLRr_SET(r,d) (r).cmic_timesync_interrupt_clr[0] = d
#define CMIC_TIMESYNC_INTERRUPT_CLRr_GET(r) (r).cmic_timesync_interrupt_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_INTERRUPT_CLRr_INTERRUPT_CLRf_GET(r) (((r).cmic_timesync_interrupt_clr[0]) & 0x7ffff)
#define CMIC_TIMESYNC_INTERRUPT_CLRr_INTERRUPT_CLRf_SET(r,f) (r).cmic_timesync_interrupt_clr[0]=(((r).cmic_timesync_interrupt_clr[0] & ~((uint32_t)0x7ffff)) | (((uint32_t)f) & 0x7ffff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_INTERRUPT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_INTERRUPT_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_INTERRUPT_ENABLEr_OFFSET 0x00010914

#define CMIC_TIMESYNC_INTERRUPT_ENABLEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_INTERRUPT_ENABLE.
 */
typedef union CMIC_TIMESYNC_INTERRUPT_ENABLEr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_interrupt_enable[1];
	uint32_t _cmic_timesync_interrupt_enable;
} CMIC_TIMESYNC_INTERRUPT_ENABLEr_t;

#define CMIC_TIMESYNC_INTERRUPT_ENABLEr_CLR(r) (r).cmic_timesync_interrupt_enable[0] = 0
#define CMIC_TIMESYNC_INTERRUPT_ENABLEr_SET(r,d) (r).cmic_timesync_interrupt_enable[0] = d
#define CMIC_TIMESYNC_INTERRUPT_ENABLEr_GET(r) (r).cmic_timesync_interrupt_enable[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_INTERRUPT_ENABLEr_INT_ENABLEf_GET(r) (((r).cmic_timesync_interrupt_enable[0]) & 0x7ffff)
#define CMIC_TIMESYNC_INTERRUPT_ENABLEr_INT_ENABLEf_SET(r,f) (r).cmic_timesync_interrupt_enable[0]=(((r).cmic_timesync_interrupt_enable[0] & ~((uint32_t)0x7ffff)) | (((uint32_t)f) & 0x7ffff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_INTERRUPT_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_INTERRUPT_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_INTERRUPT_STATUSr_OFFSET 0x00010918

#define CMIC_TIMESYNC_INTERRUPT_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_INTERRUPT_STATUS.
 */
typedef union CMIC_TIMESYNC_INTERRUPT_STATUSr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_interrupt_status[1];
	uint32_t _cmic_timesync_interrupt_status;
} CMIC_TIMESYNC_INTERRUPT_STATUSr_t;

#define CMIC_TIMESYNC_INTERRUPT_STATUSr_CLR(r) (r).cmic_timesync_interrupt_status[0] = 0
#define CMIC_TIMESYNC_INTERRUPT_STATUSr_SET(r,d) (r).cmic_timesync_interrupt_status[0] = d
#define CMIC_TIMESYNC_INTERRUPT_STATUSr_GET(r) (r).cmic_timesync_interrupt_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_INTERRUPT_STATUSr_INTERRUPT_STATUSf_GET(r) (((r).cmic_timesync_interrupt_status[0]) & 0x7ffff)
#define CMIC_TIMESYNC_INTERRUPT_STATUSr_INTERRUPT_STATUSf_SET(r,f) (r).cmic_timesync_interrupt_status[0]=(((r).cmic_timesync_interrupt_status[0] & ~((uint32_t)0x7ffff)) | (((uint32_t)f) & 0x7ffff))
#define CMIC_TIMESYNC_INTERRUPT_STATUSr_INTERRUPTf_GET(r) ((((r).cmic_timesync_interrupt_status[0]) >> 19) & 0x1)
#define CMIC_TIMESYNC_INTERRUPT_STATUSr_INTERRUPTf_SET(r,f) (r).cmic_timesync_interrupt_status[0]=(((r).cmic_timesync_interrupt_status[0] & ~((uint32_t)0x1 << 19)) | ((((uint32_t)f) & 0x1) << 19))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_INTERRUPT_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_SYNCE_CLK1_COUNT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_SYNCE_CLK1_COUNT_CTRLr_OFFSET 0x000106e8

#define CMIC_TIMESYNC_SYNCE_CLK1_COUNT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_SYNCE_CLK1_COUNT_CTRLr is element of CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_SYNCE_CLK2_COUNT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_SYNCE_CLK2_COUNT_CTRLr_OFFSET 0x000106ec

#define CMIC_TIMESYNC_SYNCE_CLK2_COUNT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_SYNCE_CLK2_COUNT_CTRLr is element of CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_SYNCE_CLK3_COUNT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_SYNCE_CLK3_COUNT_CTRLr_OFFSET 0x000106f0

#define CMIC_TIMESYNC_SYNCE_CLK3_COUNT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_SYNCE_CLK3_COUNT_CTRLr is element of CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_SYNCE_CLK4_COUNT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_SYNCE_CLK4_COUNT_CTRLr_OFFSET 0x000106f4

#define CMIC_TIMESYNC_SYNCE_CLK4_COUNT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_SYNCE_CLK4_COUNT_CTRLr is element of CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_SYNCE_CLK5_COUNT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_SYNCE_CLK5_COUNT_CTRLr_OFFSET 0x000106f8

#define CMIC_TIMESYNC_SYNCE_CLK5_COUNT_CTRLr_SIZE 4

/* CMIC_TIMESYNC_SYNCE_CLK5_COUNT_CTRLr is element of CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRL */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_OFFSET 0x000106e8

#define CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRL.
 */
typedef union CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_synce_clk_count_ctrl[1];
	uint32_t _cmic_timesync_synce_clk_count_ctrl;
} CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_t;

#define CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_CLR(r) (r).cmic_timesync_synce_clk_count_ctrl[0] = 0
#define CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_SET(r,d) (r).cmic_timesync_synce_clk_count_ctrl[0] = d
#define CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_GET(r) (r).cmic_timesync_synce_clk_count_ctrl[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_DIVISORf_GET(r) (((r).cmic_timesync_synce_clk_count_ctrl[0]) & 0xfffffff)
#define CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_DIVISORf_SET(r,f) (r).cmic_timesync_synce_clk_count_ctrl[0]=(((r).cmic_timesync_synce_clk_count_ctrl[0] & ~((uint32_t)0xfffffff)) | (((uint32_t)f) & 0xfffffff))
#define CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_ENABLEf_GET(r) ((((r).cmic_timesync_synce_clk_count_ctrl[0]) >> 28) & 0x1)
#define CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr_ENABLEf_SET(r,f) (r).cmic_timesync_synce_clk_count_ctrl[0]=(((r).cmic_timesync_synce_clk_count_ctrl[0] & ~((uint32_t)0x1 << 28)) | ((((uint32_t)f) & 0x1) << 28))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_SYNCE_CLK_COUNT_CTRLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TIME_CAPTURE_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_OFFSET 0x00010908

#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_TIME_CAPTURE_CONTROL.
 */
typedef union CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_time_capture_control[1];
	uint32_t _cmic_timesync_time_capture_control;
} CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_t;

#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_CLR(r) (r).cmic_timesync_time_capture_control[0] = 0
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_SET(r,d) (r).cmic_timesync_time_capture_control[0] = d
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_GET(r) (r).cmic_timesync_time_capture_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_TIME_CAPTURE_ENABLEf_GET(r) (((r).cmic_timesync_time_capture_control[0]) & 0x1)
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_TIME_CAPTURE_ENABLEf_SET(r,f) (r).cmic_timesync_time_capture_control[0]=(((r).cmic_timesync_time_capture_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_BSYNC0_TX_HB_STATUS_ENABLEf_GET(r) ((((r).cmic_timesync_time_capture_control[0]) >> 1) & 0x1)
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_BSYNC0_TX_HB_STATUS_ENABLEf_SET(r,f) (r).cmic_timesync_time_capture_control[0]=(((r).cmic_timesync_time_capture_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_BSYNC0_RX_HB_STATUS_ENABLEf_GET(r) ((((r).cmic_timesync_time_capture_control[0]) >> 2) & 0x1)
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_BSYNC0_RX_HB_STATUS_ENABLEf_SET(r,f) (r).cmic_timesync_time_capture_control[0]=(((r).cmic_timesync_time_capture_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_BSYNC1_TX_HB_STATUS_ENABLEf_GET(r) ((((r).cmic_timesync_time_capture_control[0]) >> 3) & 0x1)
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_BSYNC1_TX_HB_STATUS_ENABLEf_SET(r,f) (r).cmic_timesync_time_capture_control[0]=(((r).cmic_timesync_time_capture_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_BSYNC1_RX_HB_STATUS_ENABLEf_GET(r) ((((r).cmic_timesync_time_capture_control[0]) >> 4) & 0x1)
#define CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr_BSYNC1_RX_HB_STATUS_ENABLEf_SET(r,f) (r).cmic_timesync_time_capture_control[0]=(((r).cmic_timesync_time_capture_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_TIME_CAPTURE_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TIME_CAPTURE_MODE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TIME_CAPTURE_MODEr_OFFSET 0x00010624

#define CMIC_TIMESYNC_TIME_CAPTURE_MODEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_TIME_CAPTURE_MODE.
 */
typedef union CMIC_TIMESYNC_TIME_CAPTURE_MODEr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_time_capture_mode[1];
	uint32_t _cmic_timesync_time_capture_mode;
} CMIC_TIMESYNC_TIME_CAPTURE_MODEr_t;

#define CMIC_TIMESYNC_TIME_CAPTURE_MODEr_CLR(r) (r).cmic_timesync_time_capture_mode[0] = 0
#define CMIC_TIMESYNC_TIME_CAPTURE_MODEr_SET(r,d) (r).cmic_timesync_time_capture_mode[0] = d
#define CMIC_TIMESYNC_TIME_CAPTURE_MODEr_GET(r) (r).cmic_timesync_time_capture_mode[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_TIME_CAPTURE_MODEr_TIME_CAPTURE_MODEf_GET(r) (((r).cmic_timesync_time_capture_mode[0]) & 0x7ffff)
#define CMIC_TIMESYNC_TIME_CAPTURE_MODEr_TIME_CAPTURE_MODEf_SET(r,f) (r).cmic_timesync_time_capture_mode[0]=(((r).cmic_timesync_time_capture_mode[0] & ~((uint32_t)0x7ffff)) | (((uint32_t)f) & 0x7ffff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_TIME_CAPTURE_MODEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TMr_OFFSET 0x00010920

#define CMIC_TIMESYNC_TMr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_TM.
 */
typedef union CMIC_TIMESYNC_TMr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_tm[1];
	uint32_t _cmic_timesync_tm;
} CMIC_TIMESYNC_TMr_t;

#define CMIC_TIMESYNC_TMr_CLR(r) (r).cmic_timesync_tm[0] = 0
#define CMIC_TIMESYNC_TMr_SET(r,d) (r).cmic_timesync_tm[0] = d
#define CMIC_TIMESYNC_TMr_GET(r) (r).cmic_timesync_tm[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_TMr_TMf_GET(r) (((r).cmic_timesync_tm[0]) & 0xff)
#define CMIC_TIMESYNC_TMr_TMf_SET(r,f) (r).cmic_timesync_tm[0]=(((r).cmic_timesync_tm[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_TMr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS0_COUNTER_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS0_COUNTER_ENABLEr_OFFSET 0x00010604

#define CMIC_TIMESYNC_TS0_COUNTER_ENABLEr_SIZE 4

/* CMIC_TIMESYNC_TS0_COUNTER_ENABLEr is element of CMIC_TIMESYNC_TS_COUNTER_ENABLE */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS0_FREQ_CTRL_FRAC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS0_FREQ_CTRL_FRACr_OFFSET 0x00010608

#define CMIC_TIMESYNC_TS0_FREQ_CTRL_FRACr_SIZE 4

/* CMIC_TIMESYNC_TS0_FREQ_CTRL_FRACr is element of CMIC_TIMESYNC_TS_FREQ_CTRL_FRAC */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS0_FREQ_CTRL_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS0_FREQ_CTRL_LOWERr_OFFSET 0x0001060c

#define CMIC_TIMESYNC_TS0_FREQ_CTRL_LOWERr_SIZE 4

/* CMIC_TIMESYNC_TS0_FREQ_CTRL_LOWERr is element of CMIC_TIMESYNC_TS_FREQ_CTRL_LOWER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS0_FREQ_CTRL_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS0_FREQ_CTRL_UPPERr_OFFSET 0x00010610

#define CMIC_TIMESYNC_TS0_FREQ_CTRL_UPPERr_SIZE 4

/* CMIC_TIMESYNC_TS0_FREQ_CTRL_UPPERr is element of CMIC_TIMESYNC_TS_FREQ_CTRL_UPPER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS1_COUNTER_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS1_COUNTER_ENABLEr_OFFSET 0x00010614

#define CMIC_TIMESYNC_TS1_COUNTER_ENABLEr_SIZE 4

/* CMIC_TIMESYNC_TS1_COUNTER_ENABLEr is element of CMIC_TIMESYNC_TS_COUNTER_ENABLE */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS1_FREQ_CTRL_FRAC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS1_FREQ_CTRL_FRACr_OFFSET 0x00010618

#define CMIC_TIMESYNC_TS1_FREQ_CTRL_FRACr_SIZE 4

/* CMIC_TIMESYNC_TS1_FREQ_CTRL_FRACr is element of CMIC_TIMESYNC_TS_FREQ_CTRL_FRAC */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS1_FREQ_CTRL_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS1_FREQ_CTRL_LOWERr_OFFSET 0x0001061c

#define CMIC_TIMESYNC_TS1_FREQ_CTRL_LOWERr_SIZE 4

/* CMIC_TIMESYNC_TS1_FREQ_CTRL_LOWERr is element of CMIC_TIMESYNC_TS_FREQ_CTRL_LOWER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS1_FREQ_CTRL_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS1_FREQ_CTRL_UPPERr_OFFSET 0x00010620

#define CMIC_TIMESYNC_TS1_FREQ_CTRL_UPPERr_SIZE 4

/* CMIC_TIMESYNC_TS1_FREQ_CTRL_UPPERr is element of CMIC_TIMESYNC_TS_FREQ_CTRL_UPPER */

/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS_COUNTER_ENABLE
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS_COUNTER_ENABLEr_OFFSET 0x00010604

#define CMIC_TIMESYNC_TS_COUNTER_ENABLEr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_TS_COUNTER_ENABLE.
 */
typedef union CMIC_TIMESYNC_TS_COUNTER_ENABLEr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_ts_counter_enable[1];
	uint32_t _cmic_timesync_ts_counter_enable;
} CMIC_TIMESYNC_TS_COUNTER_ENABLEr_t;

#define CMIC_TIMESYNC_TS_COUNTER_ENABLEr_CLR(r) (r).cmic_timesync_ts_counter_enable[0] = 0
#define CMIC_TIMESYNC_TS_COUNTER_ENABLEr_SET(r,d) (r).cmic_timesync_ts_counter_enable[0] = d
#define CMIC_TIMESYNC_TS_COUNTER_ENABLEr_GET(r) (r).cmic_timesync_ts_counter_enable[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_TS_COUNTER_ENABLEr_ENABLEf_GET(r) (((r).cmic_timesync_ts_counter_enable[0]) & 0x1)
#define CMIC_TIMESYNC_TS_COUNTER_ENABLEr_ENABLEf_SET(r,f) (r).cmic_timesync_ts_counter_enable[0]=(((r).cmic_timesync_ts_counter_enable[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_TS_COUNTER_ENABLEr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS_FREQ_CTRL_FRAC
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr_OFFSET 0x00010608

#define CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_TS_FREQ_CTRL_FRAC.
 */
typedef union CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_ts_freq_ctrl_frac[1];
	uint32_t _cmic_timesync_ts_freq_ctrl_frac;
} CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr_t;

#define CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr_CLR(r) (r).cmic_timesync_ts_freq_ctrl_frac[0] = 0
#define CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr_SET(r,d) (r).cmic_timesync_ts_freq_ctrl_frac[0] = d
#define CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr_GET(r) (r).cmic_timesync_ts_freq_ctrl_frac[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr_FRACf_GET(r) ((r).cmic_timesync_ts_freq_ctrl_frac[0])
#define CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr_FRACf_SET(r,f) (r).cmic_timesync_ts_freq_ctrl_frac[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_TS_FREQ_CTRL_FRACr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS_FREQ_CTRL_LOWER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr_OFFSET 0x0001060c

#define CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_TS_FREQ_CTRL_LOWER.
 */
typedef union CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_ts_freq_ctrl_lower[1];
	uint32_t _cmic_timesync_ts_freq_ctrl_lower;
} CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr_t;

#define CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr_CLR(r) (r).cmic_timesync_ts_freq_ctrl_lower[0] = 0
#define CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr_SET(r,d) (r).cmic_timesync_ts_freq_ctrl_lower[0] = d
#define CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr_GET(r) (r).cmic_timesync_ts_freq_ctrl_lower[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr_NSf_GET(r) ((r).cmic_timesync_ts_freq_ctrl_lower[0])
#define CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr_NSf_SET(r,f) (r).cmic_timesync_ts_freq_ctrl_lower[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_TS_FREQ_CTRL_LOWERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TIMESYNC_TS_FREQ_CTRL_UPPER
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr_OFFSET 0x00010610

#define CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TIMESYNC_TS_FREQ_CTRL_UPPER.
 */
typedef union CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr_s {
	uint32_t v[1];
	uint32_t cmic_timesync_ts_freq_ctrl_upper[1];
	uint32_t _cmic_timesync_ts_freq_ctrl_upper;
} CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr_t;

#define CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr_CLR(r) (r).cmic_timesync_ts_freq_ctrl_upper[0] = 0
#define CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr_SET(r,d) (r).cmic_timesync_ts_freq_ctrl_upper[0] = d
#define CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr_GET(r) (r).cmic_timesync_ts_freq_ctrl_upper[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr_NSf_GET(r) (((r).cmic_timesync_ts_freq_ctrl_upper[0]) & 0xffff)
#define CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr_NSf_SET(r,f) (r).cmic_timesync_ts_freq_ctrl_upper[0]=(((r).cmic_timesync_ts_freq_ctrl_upper[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*******************************************************************************
 * End of 'CMIC_TIMESYNC_TS_FREQ_CTRL_UPPERr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_CMC0_PKT_CNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_CMC0_PKT_CNTr_OFFSET 0x0001b010

#define CMIC_TXBUF_CMC0_PKT_CNTr_SIZE 4

/* CMIC_TXBUF_CMC0_PKT_CNTr is element of CMIC_TXBUF_CMC_PKT_CNT */

/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_CMC1_PKT_CNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_CMC1_PKT_CNTr_OFFSET 0x0001b014

#define CMIC_TXBUF_CMC1_PKT_CNTr_SIZE 4

/* CMIC_TXBUF_CMC1_PKT_CNTr is element of CMIC_TXBUF_CMC_PKT_CNT */

/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_CMC2_PKT_CNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_CMC2_PKT_CNTr_OFFSET 0x0001b018

#define CMIC_TXBUF_CMC2_PKT_CNTr_SIZE 4

/* CMIC_TXBUF_CMC2_PKT_CNTr is element of CMIC_TXBUF_CMC_PKT_CNT */

/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_CMC_PKT_CNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_CMC_PKT_CNTr_OFFSET 0x0001b010

#define CMIC_TXBUF_CMC_PKT_CNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_CMC_PKT_CNT.
 */
typedef union CMIC_TXBUF_CMC_PKT_CNTr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_cmc_pkt_cnt[1];
	uint32_t _cmic_txbuf_cmc_pkt_cnt;
} CMIC_TXBUF_CMC_PKT_CNTr_t;

#define CMIC_TXBUF_CMC_PKT_CNTr_CLR(r) (r).cmic_txbuf_cmc_pkt_cnt[0] = 0
#define CMIC_TXBUF_CMC_PKT_CNTr_SET(r,d) (r).cmic_txbuf_cmc_pkt_cnt[0] = d
#define CMIC_TXBUF_CMC_PKT_CNTr_GET(r) (r).cmic_txbuf_cmc_pkt_cnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_CMC_PKT_CNTr_COUNTf_GET(r) ((r).cmic_txbuf_cmc_pkt_cnt[0])
#define CMIC_TXBUF_CMC_PKT_CNTr_COUNTf_SET(r,f) (r).cmic_txbuf_cmc_pkt_cnt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TXBUF_CMC_PKT_CNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_CONFIGr_OFFSET 0x0001b034

#define CMIC_TXBUF_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_CONFIG.
 */
typedef union CMIC_TXBUF_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_config[1];
	uint32_t _cmic_txbuf_config;
} CMIC_TXBUF_CONFIGr_t;

#define CMIC_TXBUF_CONFIGr_CLR(r) (r).cmic_txbuf_config[0] = 0
#define CMIC_TXBUF_CONFIGr_SET(r,d) (r).cmic_txbuf_config[0] = d
#define CMIC_TXBUF_CONFIGr_GET(r) (r).cmic_txbuf_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_CONFIGr_TXPKTBUF_ECC_PROTECTION_ENf_GET(r) (((r).cmic_txbuf_config[0]) & 0x1)
#define CMIC_TXBUF_CONFIGr_TXPKTBUF_ECC_PROTECTION_ENf_SET(r,f) (r).cmic_txbuf_config[0]=(((r).cmic_txbuf_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TXBUF_CONFIGr_TXSTATUSBUF_ECC_PROTECTION_ENf_GET(r) ((((r).cmic_txbuf_config[0]) >> 1) & 0x1)
#define CMIC_TXBUF_CONFIGr_TXSTATUSBUF_ECC_PROTECTION_ENf_SET(r,f) (r).cmic_txbuf_config[0]=(((r).cmic_txbuf_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_TXBUF_CONFIGr_FIRST_SERVE_BUFFERS_WITH_EOP_CELLSf_GET(r) ((((r).cmic_txbuf_config[0]) >> 2) & 0x1)
#define CMIC_TXBUF_CONFIGr_FIRST_SERVE_BUFFERS_WITH_EOP_CELLSf_SET(r,f) (r).cmic_txbuf_config[0]=(((r).cmic_txbuf_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))

/*******************************************************************************
 * End of 'CMIC_TXBUF_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIES
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr_OFFSET 0x0001b030

#define CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIES.
 */
typedef union CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_databuf_max_flist_entries[1];
	uint32_t _cmic_txbuf_databuf_max_flist_entries;
} CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr_t;

#define CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr_CLR(r) (r).cmic_txbuf_databuf_max_flist_entries[0] = 0
#define CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr_SET(r,d) (r).cmic_txbuf_databuf_max_flist_entries[0] = d
#define CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr_GET(r) (r).cmic_txbuf_databuf_max_flist_entries[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr_MAX_NUMBER_OF_ENTRIES_ENCf_GET(r) (((r).cmic_txbuf_databuf_max_flist_entries[0]) & 0x7)
#define CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr_MAX_NUMBER_OF_ENTRIES_ENCf_SET(r,f) (r).cmic_txbuf_databuf_max_flist_entries[0]=(((r).cmic_txbuf_databuf_max_flist_entries[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*******************************************************************************
 * End of 'CMIC_TXBUF_DATABUF_MAX_FLIST_ENTRIESr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIES
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr_OFFSET 0x0001b028

#define CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIES.
 */
typedef union CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_databuf_num_free_entries[1];
	uint32_t _cmic_txbuf_databuf_num_free_entries;
} CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr_t;

#define CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr_CLR(r) (r).cmic_txbuf_databuf_num_free_entries[0] = 0
#define CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr_SET(r,d) (r).cmic_txbuf_databuf_num_free_entries[0] = d
#define CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr_GET(r) (r).cmic_txbuf_databuf_num_free_entries[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr_NUMBER_OF_FREE_ENTRIESf_GET(r) (((r).cmic_txbuf_databuf_num_free_entries[0]) & 0x3f)
#define CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr_NUMBER_OF_FREE_ENTRIESf_SET(r,f) (r).cmic_txbuf_databuf_num_free_entries[0]=(((r).cmic_txbuf_databuf_num_free_entries[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*******************************************************************************
 * End of 'CMIC_TXBUF_DATABUF_NUM_FREE_ENTRIESr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_DATABUF_TM_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_DATABUF_TM_0r_OFFSET 0x0001b044

#define CMIC_TXBUF_DATABUF_TM_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_DATABUF_TM_0.
 */
typedef union CMIC_TXBUF_DATABUF_TM_0r_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_databuf_tm_0[1];
	uint32_t _cmic_txbuf_databuf_tm_0;
} CMIC_TXBUF_DATABUF_TM_0r_t;

#define CMIC_TXBUF_DATABUF_TM_0r_CLR(r) (r).cmic_txbuf_databuf_tm_0[0] = 0
#define CMIC_TXBUF_DATABUF_TM_0r_SET(r,d) (r).cmic_txbuf_databuf_tm_0[0] = d
#define CMIC_TXBUF_DATABUF_TM_0r_GET(r) (r).cmic_txbuf_databuf_tm_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_DATABUF_TM_0r_TM_0f_GET(r) (((r).cmic_txbuf_databuf_tm_0[0]) & 0xfff)
#define CMIC_TXBUF_DATABUF_TM_0r_TM_0f_SET(r,f) (r).cmic_txbuf_databuf_tm_0[0]=(((r).cmic_txbuf_databuf_tm_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_TXBUF_DATABUF_TM_0r_LVM_0f_GET(r) ((((r).cmic_txbuf_databuf_tm_0[0]) >> 12) & 0x1)
#define CMIC_TXBUF_DATABUF_TM_0r_LVM_0f_SET(r,f) (r).cmic_txbuf_databuf_tm_0[0]=(((r).cmic_txbuf_databuf_tm_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_TXBUF_DATABUF_TM_0r_TM_1f_GET(r) ((((r).cmic_txbuf_databuf_tm_0[0]) >> 13) & 0xfff)
#define CMIC_TXBUF_DATABUF_TM_0r_TM_1f_SET(r,f) (r).cmic_txbuf_databuf_tm_0[0]=(((r).cmic_txbuf_databuf_tm_0[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_TXBUF_DATABUF_TM_0r_LVM_1f_GET(r) ((((r).cmic_txbuf_databuf_tm_0[0]) >> 25) & 0x1)
#define CMIC_TXBUF_DATABUF_TM_0r_LVM_1f_SET(r,f) (r).cmic_txbuf_databuf_tm_0[0]=(((r).cmic_txbuf_databuf_tm_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_TXBUF_DATABUF_TM_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_DATABUF_TM_1
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_DATABUF_TM_1r_OFFSET 0x0001b048

#define CMIC_TXBUF_DATABUF_TM_1r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_DATABUF_TM_1.
 */
typedef union CMIC_TXBUF_DATABUF_TM_1r_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_databuf_tm_1[1];
	uint32_t _cmic_txbuf_databuf_tm_1;
} CMIC_TXBUF_DATABUF_TM_1r_t;

#define CMIC_TXBUF_DATABUF_TM_1r_CLR(r) (r).cmic_txbuf_databuf_tm_1[0] = 0
#define CMIC_TXBUF_DATABUF_TM_1r_SET(r,d) (r).cmic_txbuf_databuf_tm_1[0] = d
#define CMIC_TXBUF_DATABUF_TM_1r_GET(r) (r).cmic_txbuf_databuf_tm_1[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_DATABUF_TM_1r_TM_0f_GET(r) (((r).cmic_txbuf_databuf_tm_1[0]) & 0xfff)
#define CMIC_TXBUF_DATABUF_TM_1r_TM_0f_SET(r,f) (r).cmic_txbuf_databuf_tm_1[0]=(((r).cmic_txbuf_databuf_tm_1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_TXBUF_DATABUF_TM_1r_LVM_0f_GET(r) ((((r).cmic_txbuf_databuf_tm_1[0]) >> 12) & 0x1)
#define CMIC_TXBUF_DATABUF_TM_1r_LVM_0f_SET(r,f) (r).cmic_txbuf_databuf_tm_1[0]=(((r).cmic_txbuf_databuf_tm_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*******************************************************************************
 * End of 'CMIC_TXBUF_DATABUF_TM_1r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_DEBUG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_DEBUGr_OFFSET 0x0001b01c

#define CMIC_TXBUF_DEBUGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_DEBUG.
 */
typedef union CMIC_TXBUF_DEBUGr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_debug[1];
	uint32_t _cmic_txbuf_debug;
} CMIC_TXBUF_DEBUGr_t;

#define CMIC_TXBUF_DEBUGr_CLR(r) (r).cmic_txbuf_debug[0] = 0
#define CMIC_TXBUF_DEBUGr_SET(r,d) (r).cmic_txbuf_debug[0] = d
#define CMIC_TXBUF_DEBUGr_GET(r) (r).cmic_txbuf_debug[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_DEBUGr_CURR_IP_INTF_OWNER_IDf_GET(r) (((r).cmic_txbuf_debug[0]) & 0x3)
#define CMIC_TXBUF_DEBUGr_CURR_IP_INTF_OWNER_IDf_SET(r,f) (r).cmic_txbuf_debug[0]=(((r).cmic_txbuf_debug[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define CMIC_TXBUF_DEBUGr_CURR_RPE_CELLCNTf_GET(r) ((((r).cmic_txbuf_debug[0]) >> 2) & 0x3f)
#define CMIC_TXBUF_DEBUGr_CURR_RPE_CELLCNTf_SET(r,f) (r).cmic_txbuf_debug[0]=(((r).cmic_txbuf_debug[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2))
#define CMIC_TXBUF_DEBUGr_CURR_CMC0_CELLCNTf_GET(r) ((((r).cmic_txbuf_debug[0]) >> 8) & 0x3f)
#define CMIC_TXBUF_DEBUGr_CURR_CMC0_CELLCNTf_SET(r,f) (r).cmic_txbuf_debug[0]=(((r).cmic_txbuf_debug[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define CMIC_TXBUF_DEBUGr_CURR_CMC1_CELLCNTf_GET(r) ((((r).cmic_txbuf_debug[0]) >> 14) & 0x3f)
#define CMIC_TXBUF_DEBUGr_CURR_CMC1_CELLCNTf_SET(r,f) (r).cmic_txbuf_debug[0]=(((r).cmic_txbuf_debug[0] & ~((uint32_t)0x3f << 14)) | ((((uint32_t)f) & 0x3f) << 14))
#define CMIC_TXBUF_DEBUGr_CURR_CMC2_CELLCNTf_GET(r) ((((r).cmic_txbuf_debug[0]) >> 20) & 0x3f)
#define CMIC_TXBUF_DEBUGr_CURR_CMC2_CELLCNTf_SET(r,f) (r).cmic_txbuf_debug[0]=(((r).cmic_txbuf_debug[0] & ~((uint32_t)0x3f << 20)) | ((((uint32_t)f) & 0x3f) << 20))

/*******************************************************************************
 * End of 'CMIC_TXBUF_DEBUGr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_ECCERR_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_ECCERR_CONTROLr_OFFSET 0x0001b040

#define CMIC_TXBUF_ECCERR_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_ECCERR_CONTROL.
 */
typedef union CMIC_TXBUF_ECCERR_CONTROLr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_eccerr_control[1];
	uint32_t _cmic_txbuf_eccerr_control;
} CMIC_TXBUF_ECCERR_CONTROLr_t;

#define CMIC_TXBUF_ECCERR_CONTROLr_CLR(r) (r).cmic_txbuf_eccerr_control[0] = 0
#define CMIC_TXBUF_ECCERR_CONTROLr_SET(r,d) (r).cmic_txbuf_eccerr_control[0] = d
#define CMIC_TXBUF_ECCERR_CONTROLr_GET(r) (r).cmic_txbuf_eccerr_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_MHDRBUFf_GET(r) (((r).cmic_txbuf_eccerr_control[0]) & 0x1)
#define CMIC_TXBUF_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_MHDRBUFf_SET(r,f) (r).cmic_txbuf_eccerr_control[0]=(((r).cmic_txbuf_eccerr_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TXBUF_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_MHDRBUFf_GET(r) ((((r).cmic_txbuf_eccerr_control[0]) >> 1) & 0x1)
#define CMIC_TXBUF_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_MHDRBUFf_SET(r,f) (r).cmic_txbuf_eccerr_control[0]=(((r).cmic_txbuf_eccerr_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define CMIC_TXBUF_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DATABUFf_GET(r) ((((r).cmic_txbuf_eccerr_control[0]) >> 2) & 0x1)
#define CMIC_TXBUF_ECCERR_CONTROLr_INJECT_1BIT_ECC_ERROR_IN_DATABUFf_SET(r,f) (r).cmic_txbuf_eccerr_control[0]=(((r).cmic_txbuf_eccerr_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define CMIC_TXBUF_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DATABUFf_GET(r) ((((r).cmic_txbuf_eccerr_control[0]) >> 3) & 0x1)
#define CMIC_TXBUF_ECCERR_CONTROLr_INJECT_2BIT_ECC_ERROR_IN_DATABUFf_SET(r,f) (r).cmic_txbuf_eccerr_control[0]=(((r).cmic_txbuf_eccerr_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*******************************************************************************
 * End of 'CMIC_TXBUF_ECCERR_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_IP_BUF_DEPTH
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_IP_BUF_DEPTHr_OFFSET 0x0001b024

#define CMIC_TXBUF_IP_BUF_DEPTHr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_IP_BUF_DEPTH.
 */
typedef union CMIC_TXBUF_IP_BUF_DEPTHr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_ip_buf_depth[1];
	uint32_t _cmic_txbuf_ip_buf_depth;
} CMIC_TXBUF_IP_BUF_DEPTHr_t;

#define CMIC_TXBUF_IP_BUF_DEPTHr_CLR(r) (r).cmic_txbuf_ip_buf_depth[0] = 0
#define CMIC_TXBUF_IP_BUF_DEPTHr_SET(r,d) (r).cmic_txbuf_ip_buf_depth[0] = d
#define CMIC_TXBUF_IP_BUF_DEPTHr_GET(r) (r).cmic_txbuf_ip_buf_depth[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_IP_BUF_DEPTHr_BUF_DEPTHf_GET(r) (((r).cmic_txbuf_ip_buf_depth[0]) & 0x3f)
#define CMIC_TXBUF_IP_BUF_DEPTHr_BUF_DEPTHf_SET(r,f) (r).cmic_txbuf_ip_buf_depth[0]=(((r).cmic_txbuf_ip_buf_depth[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*******************************************************************************
 * End of 'CMIC_TXBUF_IP_BUF_DEPTHr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_IP_CRED
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_IP_CREDr_OFFSET 0x0001b02c

#define CMIC_TXBUF_IP_CREDr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_IP_CRED.
 */
typedef union CMIC_TXBUF_IP_CREDr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_ip_cred[1];
	uint32_t _cmic_txbuf_ip_cred;
} CMIC_TXBUF_IP_CREDr_t;

#define CMIC_TXBUF_IP_CREDr_CLR(r) (r).cmic_txbuf_ip_cred[0] = 0
#define CMIC_TXBUF_IP_CREDr_SET(r,d) (r).cmic_txbuf_ip_cred[0] = d
#define CMIC_TXBUF_IP_CREDr_GET(r) (r).cmic_txbuf_ip_cred[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_IP_CREDr_IP_INTF_CREDITSf_GET(r) (((r).cmic_txbuf_ip_cred[0]) & 0x3f)
#define CMIC_TXBUF_IP_CREDr_IP_INTF_CREDITSf_SET(r,f) (r).cmic_txbuf_ip_cred[0]=(((r).cmic_txbuf_ip_cred[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_TXBUF_IP_CREDr_WR_IP_INTF_CREDITSf_GET(r) ((((r).cmic_txbuf_ip_cred[0]) >> 6) & 0x1)
#define CMIC_TXBUF_IP_CREDr_WR_IP_INTF_CREDITSf_SET(r,f) (r).cmic_txbuf_ip_cred[0]=(((r).cmic_txbuf_ip_cred[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define CMIC_TXBUF_IP_CREDr_FLUSH_IP_INTF_BUFFERf_GET(r) ((((r).cmic_txbuf_ip_cred[0]) >> 7) & 0x1)
#define CMIC_TXBUF_IP_CREDr_FLUSH_IP_INTF_BUFFERf_SET(r,f) (r).cmic_txbuf_ip_cred[0]=(((r).cmic_txbuf_ip_cred[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*******************************************************************************
 * End of 'CMIC_TXBUF_IP_CREDr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_MAX_BUF_LIMITS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_MAX_BUF_LIMITSr_OFFSET 0x0001b000

#define CMIC_TXBUF_MAX_BUF_LIMITSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_MAX_BUF_LIMITS.
 */
typedef union CMIC_TXBUF_MAX_BUF_LIMITSr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_max_buf_limits[1];
	uint32_t _cmic_txbuf_max_buf_limits;
} CMIC_TXBUF_MAX_BUF_LIMITSr_t;

#define CMIC_TXBUF_MAX_BUF_LIMITSr_CLR(r) (r).cmic_txbuf_max_buf_limits[0] = 0
#define CMIC_TXBUF_MAX_BUF_LIMITSr_SET(r,d) (r).cmic_txbuf_max_buf_limits[0] = d
#define CMIC_TXBUF_MAX_BUF_LIMITSr_GET(r) (r).cmic_txbuf_max_buf_limits[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_MAX_BUF_LIMITSr_RPE_MAX_BUFLIMITf_GET(r) (((r).cmic_txbuf_max_buf_limits[0]) & 0x3f)
#define CMIC_TXBUF_MAX_BUF_LIMITSr_RPE_MAX_BUFLIMITf_SET(r,f) (r).cmic_txbuf_max_buf_limits[0]=(((r).cmic_txbuf_max_buf_limits[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_TXBUF_MAX_BUF_LIMITSr_CMC0_MAX_BUFLIMITf_GET(r) ((((r).cmic_txbuf_max_buf_limits[0]) >> 6) & 0x3f)
#define CMIC_TXBUF_MAX_BUF_LIMITSr_CMC0_MAX_BUFLIMITf_SET(r,f) (r).cmic_txbuf_max_buf_limits[0]=(((r).cmic_txbuf_max_buf_limits[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_TXBUF_MAX_BUF_LIMITSr_CMC1_MAX_BUFLIMITf_GET(r) ((((r).cmic_txbuf_max_buf_limits[0]) >> 12) & 0x3f)
#define CMIC_TXBUF_MAX_BUF_LIMITSr_CMC1_MAX_BUFLIMITf_SET(r,f) (r).cmic_txbuf_max_buf_limits[0]=(((r).cmic_txbuf_max_buf_limits[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_TXBUF_MAX_BUF_LIMITSr_CMC2_MAX_BUFLIMITf_GET(r) ((((r).cmic_txbuf_max_buf_limits[0]) >> 18) & 0x3f)
#define CMIC_TXBUF_MAX_BUF_LIMITSr_CMC2_MAX_BUFLIMITf_SET(r,f) (r).cmic_txbuf_max_buf_limits[0]=(((r).cmic_txbuf_max_buf_limits[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))

/*******************************************************************************
 * End of 'CMIC_TXBUF_MAX_BUF_LIMITSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_MHDRBUF_TM_0
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_MHDRBUF_TM_0r_OFFSET 0x0001b04c

#define CMIC_TXBUF_MHDRBUF_TM_0r_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_MHDRBUF_TM_0.
 */
typedef union CMIC_TXBUF_MHDRBUF_TM_0r_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_mhdrbuf_tm_0[1];
	uint32_t _cmic_txbuf_mhdrbuf_tm_0;
} CMIC_TXBUF_MHDRBUF_TM_0r_t;

#define CMIC_TXBUF_MHDRBUF_TM_0r_CLR(r) (r).cmic_txbuf_mhdrbuf_tm_0[0] = 0
#define CMIC_TXBUF_MHDRBUF_TM_0r_SET(r,d) (r).cmic_txbuf_mhdrbuf_tm_0[0] = d
#define CMIC_TXBUF_MHDRBUF_TM_0r_GET(r) (r).cmic_txbuf_mhdrbuf_tm_0[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_MHDRBUF_TM_0r_TM_0f_GET(r) (((r).cmic_txbuf_mhdrbuf_tm_0[0]) & 0xfff)
#define CMIC_TXBUF_MHDRBUF_TM_0r_TM_0f_SET(r,f) (r).cmic_txbuf_mhdrbuf_tm_0[0]=(((r).cmic_txbuf_mhdrbuf_tm_0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))
#define CMIC_TXBUF_MHDRBUF_TM_0r_LVM_0f_GET(r) ((((r).cmic_txbuf_mhdrbuf_tm_0[0]) >> 12) & 0x1)
#define CMIC_TXBUF_MHDRBUF_TM_0r_LVM_0f_SET(r,f) (r).cmic_txbuf_mhdrbuf_tm_0[0]=(((r).cmic_txbuf_mhdrbuf_tm_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define CMIC_TXBUF_MHDRBUF_TM_0r_TM_1f_GET(r) ((((r).cmic_txbuf_mhdrbuf_tm_0[0]) >> 13) & 0xfff)
#define CMIC_TXBUF_MHDRBUF_TM_0r_TM_1f_SET(r,f) (r).cmic_txbuf_mhdrbuf_tm_0[0]=(((r).cmic_txbuf_mhdrbuf_tm_0[0] & ~((uint32_t)0xfff << 13)) | ((((uint32_t)f) & 0xfff) << 13))
#define CMIC_TXBUF_MHDRBUF_TM_0r_LVM_1f_GET(r) ((((r).cmic_txbuf_mhdrbuf_tm_0[0]) >> 25) & 0x1)
#define CMIC_TXBUF_MHDRBUF_TM_0r_LVM_1f_SET(r,f) (r).cmic_txbuf_mhdrbuf_tm_0[0]=(((r).cmic_txbuf_mhdrbuf_tm_0[0] & ~((uint32_t)0x1 << 25)) | ((((uint32_t)f) & 0x1) << 25))

/*******************************************************************************
 * End of 'CMIC_TXBUF_MHDRBUF_TM_0r'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_MIN_BUF_LIMITS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_MIN_BUF_LIMITSr_OFFSET 0x0001b004

#define CMIC_TXBUF_MIN_BUF_LIMITSr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_MIN_BUF_LIMITS.
 */
typedef union CMIC_TXBUF_MIN_BUF_LIMITSr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_min_buf_limits[1];
	uint32_t _cmic_txbuf_min_buf_limits;
} CMIC_TXBUF_MIN_BUF_LIMITSr_t;

#define CMIC_TXBUF_MIN_BUF_LIMITSr_CLR(r) (r).cmic_txbuf_min_buf_limits[0] = 0
#define CMIC_TXBUF_MIN_BUF_LIMITSr_SET(r,d) (r).cmic_txbuf_min_buf_limits[0] = d
#define CMIC_TXBUF_MIN_BUF_LIMITSr_GET(r) (r).cmic_txbuf_min_buf_limits[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_MIN_BUF_LIMITSr_RPE_MIN_BUFLIMITf_GET(r) (((r).cmic_txbuf_min_buf_limits[0]) & 0x3f)
#define CMIC_TXBUF_MIN_BUF_LIMITSr_RPE_MIN_BUFLIMITf_SET(r,f) (r).cmic_txbuf_min_buf_limits[0]=(((r).cmic_txbuf_min_buf_limits[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))
#define CMIC_TXBUF_MIN_BUF_LIMITSr_CMC0_MIN_BUFLIMITf_GET(r) ((((r).cmic_txbuf_min_buf_limits[0]) >> 6) & 0x3f)
#define CMIC_TXBUF_MIN_BUF_LIMITSr_CMC0_MIN_BUFLIMITf_SET(r,f) (r).cmic_txbuf_min_buf_limits[0]=(((r).cmic_txbuf_min_buf_limits[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define CMIC_TXBUF_MIN_BUF_LIMITSr_CMC1_MIN_BUFLIMITf_GET(r) ((((r).cmic_txbuf_min_buf_limits[0]) >> 12) & 0x3f)
#define CMIC_TXBUF_MIN_BUF_LIMITSr_CMC1_MIN_BUFLIMITf_SET(r,f) (r).cmic_txbuf_min_buf_limits[0]=(((r).cmic_txbuf_min_buf_limits[0] & ~((uint32_t)0x3f << 12)) | ((((uint32_t)f) & 0x3f) << 12))
#define CMIC_TXBUF_MIN_BUF_LIMITSr_CMC2_MIN_BUFLIMITf_GET(r) ((((r).cmic_txbuf_min_buf_limits[0]) >> 18) & 0x3f)
#define CMIC_TXBUF_MIN_BUF_LIMITSr_CMC2_MIN_BUFLIMITf_SET(r,f) (r).cmic_txbuf_min_buf_limits[0]=(((r).cmic_txbuf_min_buf_limits[0] & ~((uint32_t)0x3f << 18)) | ((((uint32_t)f) & 0x3f) << 18))

/*******************************************************************************
 * End of 'CMIC_TXBUF_MIN_BUF_LIMITSr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_RPE_PKT_CNT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_RPE_PKT_CNTr_OFFSET 0x0001b00c

#define CMIC_TXBUF_RPE_PKT_CNTr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_RPE_PKT_CNT.
 */
typedef union CMIC_TXBUF_RPE_PKT_CNTr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_rpe_pkt_cnt[1];
	uint32_t _cmic_txbuf_rpe_pkt_cnt;
} CMIC_TXBUF_RPE_PKT_CNTr_t;

#define CMIC_TXBUF_RPE_PKT_CNTr_CLR(r) (r).cmic_txbuf_rpe_pkt_cnt[0] = 0
#define CMIC_TXBUF_RPE_PKT_CNTr_SET(r,d) (r).cmic_txbuf_rpe_pkt_cnt[0] = d
#define CMIC_TXBUF_RPE_PKT_CNTr_GET(r) (r).cmic_txbuf_rpe_pkt_cnt[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_RPE_PKT_CNTr_COUNTf_GET(r) ((r).cmic_txbuf_rpe_pkt_cnt[0])
#define CMIC_TXBUF_RPE_PKT_CNTr_COUNTf_SET(r,f) (r).cmic_txbuf_rpe_pkt_cnt[0]=((uint32_t)f)

/*******************************************************************************
 * End of 'CMIC_TXBUF_RPE_PKT_CNTr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_STAT
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_STATr_OFFSET 0x0001b038

#define CMIC_TXBUF_STATr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_STAT.
 */
typedef union CMIC_TXBUF_STATr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_stat[1];
	uint32_t _cmic_txbuf_stat;
} CMIC_TXBUF_STATr_t;

#define CMIC_TXBUF_STATr_CLR(r) (r).cmic_txbuf_stat[0] = 0
#define CMIC_TXBUF_STATr_SET(r,d) (r).cmic_txbuf_stat[0] = d
#define CMIC_TXBUF_STATr_GET(r) (r).cmic_txbuf_stat[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_STATr_TXPKTBUF_ECC_ERRORf_GET(r) (((r).cmic_txbuf_stat[0]) & 0x1)
#define CMIC_TXBUF_STATr_TXPKTBUF_ECC_ERRORf_SET(r,f) (r).cmic_txbuf_stat[0]=(((r).cmic_txbuf_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TXBUF_STATr_TXSTATUSBUF_ECC_ERRORf_GET(r) ((((r).cmic_txbuf_stat[0]) >> 1) & 0x1)
#define CMIC_TXBUF_STATr_TXSTATUSBUF_ECC_ERRORf_SET(r,f) (r).cmic_txbuf_stat[0]=(((r).cmic_txbuf_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_TXBUF_STATr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_TXBUF_STAT_CLR
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_TXBUF_STAT_CLRr_OFFSET 0x0001b03c

#define CMIC_TXBUF_STAT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_TXBUF_STAT_CLR.
 */
typedef union CMIC_TXBUF_STAT_CLRr_s {
	uint32_t v[1];
	uint32_t cmic_txbuf_stat_clr[1];
	uint32_t _cmic_txbuf_stat_clr;
} CMIC_TXBUF_STAT_CLRr_t;

#define CMIC_TXBUF_STAT_CLRr_CLR(r) (r).cmic_txbuf_stat_clr[0] = 0
#define CMIC_TXBUF_STAT_CLRr_SET(r,d) (r).cmic_txbuf_stat_clr[0] = d
#define CMIC_TXBUF_STAT_CLRr_GET(r) (r).cmic_txbuf_stat_clr[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_TXBUF_STAT_CLRr_TXPKTBUF_ECC_ERROR_CLRf_GET(r) (((r).cmic_txbuf_stat_clr[0]) & 0x1)
#define CMIC_TXBUF_STAT_CLRr_TXPKTBUF_ECC_ERROR_CLRf_SET(r,f) (r).cmic_txbuf_stat_clr[0]=(((r).cmic_txbuf_stat_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define CMIC_TXBUF_STAT_CLRr_TXSTATUSBUF_ECC_ERROR_CLRf_GET(r) ((((r).cmic_txbuf_stat_clr[0]) >> 1) & 0x1)
#define CMIC_TXBUF_STAT_CLRr_TXSTATUSBUF_ECC_ERROR_CLRf_SET(r,f) (r).cmic_txbuf_stat_clr[0]=(((r).cmic_txbuf_stat_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'CMIC_TXBUF_STAT_CLRr'
 */




/*******************************************************************************
 * REGISTER:  CMIC_UC0_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_UC0_CONFIGr_OFFSET 0x0001020c

#define CMIC_UC0_CONFIGr_SIZE 4

/* CMIC_UC0_CONFIGr is element of CMIC_UC_CONFIG */

/*******************************************************************************
 * REGISTER:  CMIC_UC1_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_UC1_CONFIGr_OFFSET 0x00010210

#define CMIC_UC1_CONFIGr_SIZE 4

/* CMIC_UC1_CONFIGr is element of CMIC_UC_CONFIG */

/*******************************************************************************
 * REGISTER:  CMIC_UC_CONFIG
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define CMIC_UC_CONFIGr_OFFSET 0x0001020c

#define CMIC_UC_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CMIC_UC_CONFIG.
 */
typedef union CMIC_UC_CONFIGr_s {
	uint32_t v[1];
	uint32_t cmic_uc_config[1];
	uint32_t _cmic_uc_config;
} CMIC_UC_CONFIGr_t;

#define CMIC_UC_CONFIGr_CLR(r) (r).cmic_uc_config[0] = 0
#define CMIC_UC_CONFIGr_SET(r,d) (r).cmic_uc_config[0] = d
#define CMIC_UC_CONFIGr_GET(r) (r).cmic_uc_config[0]

/*
 * These macros can be used to access individual fields.
 */
#define CMIC_UC_CONFIGr_ACT_LOW_INTRf_GET(r) (((r).cmic_uc_config[0]) & 0x1)
#define CMIC_UC_CONFIGr_ACT_LOW_INTRf_SET(r,f) (r).cmic_uc_config[0]=(((r).cmic_uc_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'CMIC_UC_CONFIGr'
 */




/*******************************************************************************
 * REGISTER:  DMU_CRU_RESET
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define DMU_CRU_RESETr_OFFSET 0x1800f200

#define DMU_CRU_RESETr_SIZE 4

/*
 * This structure should be used to declare and program DMU_CRU_RESET.
 */
typedef union DMU_CRU_RESETr_s {
	uint32_t v[1];
	uint32_t dmu_cru_reset[1];
	uint32_t _dmu_cru_reset;
} DMU_CRU_RESETr_t;

#define DMU_CRU_RESETr_CLR(r) (r).dmu_cru_reset[0] = 0
#define DMU_CRU_RESETr_SET(r,d) (r).dmu_cru_reset[0] = d
#define DMU_CRU_RESETr_GET(r) (r).dmu_cru_reset[0]

/*
 * These macros can be used to access individual fields.
 */
#define DMU_CRU_RESETr_SW_RESET_Nf_GET(r) (((r).dmu_cru_reset[0]) & 0x1)
#define DMU_CRU_RESETr_SW_RESET_Nf_SET(r,f) (r).dmu_cru_reset[0]=(((r).dmu_cru_reset[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define DMU_CRU_RESETr_IPROC_RESET_Nf_GET(r) ((((r).dmu_cru_reset[0]) >> 1) & 0x1)
#define DMU_CRU_RESETr_IPROC_RESET_Nf_SET(r,f) (r).dmu_cru_reset[0]=(((r).dmu_cru_reset[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*******************************************************************************
 * End of 'DMU_CRU_RESETr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_CDRAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAMr_OFFSET 0x00001640

#define MSPI_CDRAMr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_CDRAM.
 */
typedef union MSPI_CDRAMr_s {
	uint32_t v[1];
	uint32_t mspi_cdram[1];
	uint32_t _mspi_cdram;
} MSPI_CDRAMr_t;

#define MSPI_CDRAMr_CLR(r) (r).mspi_cdram[0] = 0
#define MSPI_CDRAMr_SET(r,d) (r).mspi_cdram[0] = d
#define MSPI_CDRAMr_GET(r) (r).mspi_cdram[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_CDRAMr_PCSf_GET(r) (((r).mspi_cdram[0]) & 0x3)
#define MSPI_CDRAMr_PCSf_SET(r,f) (r).mspi_cdram[0]=(((r).mspi_cdram[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define MSPI_CDRAMr_RESERVED_1f_GET(r) ((((r).mspi_cdram[0]) >> 2) & 0x3)
#define MSPI_CDRAMr_RESERVED_1f_SET(r,f) (r).mspi_cdram[0]=(((r).mspi_cdram[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define MSPI_CDRAMr_DSCKf_GET(r) ((((r).mspi_cdram[0]) >> 4) & 0x1)
#define MSPI_CDRAMr_DSCKf_SET(r,f) (r).mspi_cdram[0]=(((r).mspi_cdram[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define MSPI_CDRAMr_DTf_GET(r) ((((r).mspi_cdram[0]) >> 5) & 0x1)
#define MSPI_CDRAMr_DTf_SET(r,f) (r).mspi_cdram[0]=(((r).mspi_cdram[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define MSPI_CDRAMr_BITSEf_GET(r) ((((r).mspi_cdram[0]) >> 6) & 0x1)
#define MSPI_CDRAMr_BITSEf_SET(r,f) (r).mspi_cdram[0]=(((r).mspi_cdram[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define MSPI_CDRAMr_CONTf_GET(r) ((((r).mspi_cdram[0]) >> 7) & 0x1)
#define MSPI_CDRAMr_CONTf_SET(r,f) (r).mspi_cdram[0]=(((r).mspi_cdram[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define MSPI_CDRAMr_RESERVEDf_GET(r) ((((r).mspi_cdram[0]) >> 8) & 0xffffff)
#define MSPI_CDRAMr_RESERVEDf_SET(r,f) (r).mspi_cdram[0]=(((r).mspi_cdram[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'MSPI_CDRAMr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_00
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_00r_OFFSET 0x00001640

#define MSPI_CDRAM_00r_SIZE 4

/* MSPI_CDRAM_00r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_01
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_01r_OFFSET 0x00001644

#define MSPI_CDRAM_01r_SIZE 4

/* MSPI_CDRAM_01r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_02
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_02r_OFFSET 0x00001648

#define MSPI_CDRAM_02r_SIZE 4

/* MSPI_CDRAM_02r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_03
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_03r_OFFSET 0x0000164c

#define MSPI_CDRAM_03r_SIZE 4

/* MSPI_CDRAM_03r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_04
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_04r_OFFSET 0x00001650

#define MSPI_CDRAM_04r_SIZE 4

/* MSPI_CDRAM_04r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_05
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_05r_OFFSET 0x00001654

#define MSPI_CDRAM_05r_SIZE 4

/* MSPI_CDRAM_05r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_06
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_06r_OFFSET 0x00001658

#define MSPI_CDRAM_06r_SIZE 4

/* MSPI_CDRAM_06r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_07
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_07r_OFFSET 0x0000165c

#define MSPI_CDRAM_07r_SIZE 4

/* MSPI_CDRAM_07r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_08
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_08r_OFFSET 0x00001660

#define MSPI_CDRAM_08r_SIZE 4

/* MSPI_CDRAM_08r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_09
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_09r_OFFSET 0x00001664

#define MSPI_CDRAM_09r_SIZE 4

/* MSPI_CDRAM_09r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_10
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_10r_OFFSET 0x00001668

#define MSPI_CDRAM_10r_SIZE 4

/* MSPI_CDRAM_10r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_11
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_11r_OFFSET 0x0000166c

#define MSPI_CDRAM_11r_SIZE 4

/* MSPI_CDRAM_11r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_12
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_12r_OFFSET 0x00001670

#define MSPI_CDRAM_12r_SIZE 4

/* MSPI_CDRAM_12r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_13
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_13r_OFFSET 0x00001674

#define MSPI_CDRAM_13r_SIZE 4

/* MSPI_CDRAM_13r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_14
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_14r_OFFSET 0x00001678

#define MSPI_CDRAM_14r_SIZE 4

/* MSPI_CDRAM_14r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CDRAM_15
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CDRAM_15r_OFFSET 0x0000167c

#define MSPI_CDRAM_15r_SIZE 4

/* MSPI_CDRAM_15r is element of MSPI_CDRAM */

/*******************************************************************************
 * REGISTER:  MSPI_CPTQP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_CPTQPr_OFFSET 0x00001524

#define MSPI_CPTQPr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_CPTQP.
 */
typedef union MSPI_CPTQPr_s {
	uint32_t v[1];
	uint32_t mspi_cptqp[1];
	uint32_t _mspi_cptqp;
} MSPI_CPTQPr_t;

#define MSPI_CPTQPr_CLR(r) (r).mspi_cptqp[0] = 0
#define MSPI_CPTQPr_SET(r,d) (r).mspi_cptqp[0] = d
#define MSPI_CPTQPr_GET(r) (r).mspi_cptqp[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_CPTQPr_CPTQPf_GET(r) (((r).mspi_cptqp[0]) & 0xf)
#define MSPI_CPTQPr_CPTQPf_SET(r,f) (r).mspi_cptqp[0]=(((r).mspi_cptqp[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define MSPI_CPTQPr_RESERVEDf_GET(r) ((((r).mspi_cptqp[0]) >> 4) & 0xfffffff)
#define MSPI_CPTQPr_RESERVEDf_SET(r,f) (r).mspi_cptqp[0]=(((r).mspi_cptqp[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'MSPI_CPTQPr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_ENDQP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_ENDQPr_OFFSET 0x00001514

#define MSPI_ENDQPr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_ENDQP.
 */
typedef union MSPI_ENDQPr_s {
	uint32_t v[1];
	uint32_t mspi_endqp[1];
	uint32_t _mspi_endqp;
} MSPI_ENDQPr_t;

#define MSPI_ENDQPr_CLR(r) (r).mspi_endqp[0] = 0
#define MSPI_ENDQPr_SET(r,d) (r).mspi_endqp[0] = d
#define MSPI_ENDQPr_GET(r) (r).mspi_endqp[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_ENDQPr_ENDQPf_GET(r) (((r).mspi_endqp[0]) & 0xf)
#define MSPI_ENDQPr_ENDQPf_SET(r,f) (r).mspi_endqp[0]=(((r).mspi_endqp[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define MSPI_ENDQPr_RESERVEDf_GET(r) ((((r).mspi_endqp[0]) >> 4) & 0xfffffff)
#define MSPI_ENDQPr_RESERVEDf_SET(r,f) (r).mspi_endqp[0]=(((r).mspi_endqp[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'MSPI_ENDQPr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_NEWQP
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_NEWQPr_OFFSET 0x00001510

#define MSPI_NEWQPr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_NEWQP.
 */
typedef union MSPI_NEWQPr_s {
	uint32_t v[1];
	uint32_t mspi_newqp[1];
	uint32_t _mspi_newqp;
} MSPI_NEWQPr_t;

#define MSPI_NEWQPr_CLR(r) (r).mspi_newqp[0] = 0
#define MSPI_NEWQPr_SET(r,d) (r).mspi_newqp[0] = d
#define MSPI_NEWQPr_GET(r) (r).mspi_newqp[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_NEWQPr_NEWQPf_GET(r) (((r).mspi_newqp[0]) & 0xf)
#define MSPI_NEWQPr_NEWQPf_SET(r,f) (r).mspi_newqp[0]=(((r).mspi_newqp[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define MSPI_NEWQPr_RESERVEDf_GET(r) ((((r).mspi_newqp[0]) >> 4) & 0xfffffff)
#define MSPI_NEWQPr_RESERVEDf_SET(r,f) (r).mspi_newqp[0]=(((r).mspi_newqp[0] & ~((uint32_t)0xfffffff << 4)) | ((((uint32_t)f) & 0xfffffff) << 4))

/*******************************************************************************
 * End of 'MSPI_NEWQPr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_RXRAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAMr_OFFSET 0x000015c0

#define MSPI_RXRAMr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_RXRAM.
 */
typedef union MSPI_RXRAMr_s {
	uint32_t v[1];
	uint32_t mspi_rxram[1];
	uint32_t _mspi_rxram;
} MSPI_RXRAMr_t;

#define MSPI_RXRAMr_CLR(r) (r).mspi_rxram[0] = 0
#define MSPI_RXRAMr_SET(r,d) (r).mspi_rxram[0] = d
#define MSPI_RXRAMr_GET(r) (r).mspi_rxram[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_RXRAMr_RXRAMf_GET(r) (((r).mspi_rxram[0]) & 0xff)
#define MSPI_RXRAMr_RXRAMf_SET(r,f) (r).mspi_rxram[0]=(((r).mspi_rxram[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define MSPI_RXRAMr_RESERVEDf_GET(r) ((((r).mspi_rxram[0]) >> 8) & 0xffffff)
#define MSPI_RXRAMr_RESERVEDf_SET(r,f) (r).mspi_rxram[0]=(((r).mspi_rxram[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'MSPI_RXRAMr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_00
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_00r_OFFSET 0x000015c0

#define MSPI_RXRAM_00r_SIZE 4

/* MSPI_RXRAM_00r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_01
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_01r_OFFSET 0x000015c4

#define MSPI_RXRAM_01r_SIZE 4

/* MSPI_RXRAM_01r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_02
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_02r_OFFSET 0x000015c8

#define MSPI_RXRAM_02r_SIZE 4

/* MSPI_RXRAM_02r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_03
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_03r_OFFSET 0x000015cc

#define MSPI_RXRAM_03r_SIZE 4

/* MSPI_RXRAM_03r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_04
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_04r_OFFSET 0x000015d0

#define MSPI_RXRAM_04r_SIZE 4

/* MSPI_RXRAM_04r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_05
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_05r_OFFSET 0x000015d4

#define MSPI_RXRAM_05r_SIZE 4

/* MSPI_RXRAM_05r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_06
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_06r_OFFSET 0x000015d8

#define MSPI_RXRAM_06r_SIZE 4

/* MSPI_RXRAM_06r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_07
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_07r_OFFSET 0x000015dc

#define MSPI_RXRAM_07r_SIZE 4

/* MSPI_RXRAM_07r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_08
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_08r_OFFSET 0x000015e0

#define MSPI_RXRAM_08r_SIZE 4

/* MSPI_RXRAM_08r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_09
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_09r_OFFSET 0x000015e4

#define MSPI_RXRAM_09r_SIZE 4

/* MSPI_RXRAM_09r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_10
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_10r_OFFSET 0x000015e8

#define MSPI_RXRAM_10r_SIZE 4

/* MSPI_RXRAM_10r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_11
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_11r_OFFSET 0x000015ec

#define MSPI_RXRAM_11r_SIZE 4

/* MSPI_RXRAM_11r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_12
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_12r_OFFSET 0x000015f0

#define MSPI_RXRAM_12r_SIZE 4

/* MSPI_RXRAM_12r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_13
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_13r_OFFSET 0x000015f4

#define MSPI_RXRAM_13r_SIZE 4

/* MSPI_RXRAM_13r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_14
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_14r_OFFSET 0x000015f8

#define MSPI_RXRAM_14r_SIZE 4

/* MSPI_RXRAM_14r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_15
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_15r_OFFSET 0x000015fc

#define MSPI_RXRAM_15r_SIZE 4

/* MSPI_RXRAM_15r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_16
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_16r_OFFSET 0x00001600

#define MSPI_RXRAM_16r_SIZE 4

/* MSPI_RXRAM_16r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_17
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_17r_OFFSET 0x00001604

#define MSPI_RXRAM_17r_SIZE 4

/* MSPI_RXRAM_17r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_18
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_18r_OFFSET 0x00001608

#define MSPI_RXRAM_18r_SIZE 4

/* MSPI_RXRAM_18r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_19
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_19r_OFFSET 0x0000160c

#define MSPI_RXRAM_19r_SIZE 4

/* MSPI_RXRAM_19r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_20
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_20r_OFFSET 0x00001610

#define MSPI_RXRAM_20r_SIZE 4

/* MSPI_RXRAM_20r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_21
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_21r_OFFSET 0x00001614

#define MSPI_RXRAM_21r_SIZE 4

/* MSPI_RXRAM_21r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_22
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_22r_OFFSET 0x00001618

#define MSPI_RXRAM_22r_SIZE 4

/* MSPI_RXRAM_22r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_23
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_23r_OFFSET 0x0000161c

#define MSPI_RXRAM_23r_SIZE 4

/* MSPI_RXRAM_23r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_24
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_24r_OFFSET 0x00001620

#define MSPI_RXRAM_24r_SIZE 4

/* MSPI_RXRAM_24r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_25
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_25r_OFFSET 0x00001624

#define MSPI_RXRAM_25r_SIZE 4

/* MSPI_RXRAM_25r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_26
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_26r_OFFSET 0x00001628

#define MSPI_RXRAM_26r_SIZE 4

/* MSPI_RXRAM_26r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_27
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_27r_OFFSET 0x0000162c

#define MSPI_RXRAM_27r_SIZE 4

/* MSPI_RXRAM_27r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_28
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_28r_OFFSET 0x00001630

#define MSPI_RXRAM_28r_SIZE 4

/* MSPI_RXRAM_28r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_29
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_29r_OFFSET 0x00001634

#define MSPI_RXRAM_29r_SIZE 4

/* MSPI_RXRAM_29r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_30
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_30r_OFFSET 0x00001638

#define MSPI_RXRAM_30r_SIZE 4

/* MSPI_RXRAM_30r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_RXRAM_31
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_RXRAM_31r_OFFSET 0x0000163c

#define MSPI_RXRAM_31r_SIZE 4

/* MSPI_RXRAM_31r is element of MSPI_RXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_SPCR0_LSB
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_SPCR0_LSBr_OFFSET 0x00001500

#define MSPI_SPCR0_LSBr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_SPCR0_LSB.
 */
typedef union MSPI_SPCR0_LSBr_s {
	uint32_t v[1];
	uint32_t mspi_spcr0_lsb[1];
	uint32_t _mspi_spcr0_lsb;
} MSPI_SPCR0_LSBr_t;

#define MSPI_SPCR0_LSBr_CLR(r) (r).mspi_spcr0_lsb[0] = 0
#define MSPI_SPCR0_LSBr_SET(r,d) (r).mspi_spcr0_lsb[0] = d
#define MSPI_SPCR0_LSBr_GET(r) (r).mspi_spcr0_lsb[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_SPCR0_LSBr_SPBRf_GET(r) (((r).mspi_spcr0_lsb[0]) & 0xff)
#define MSPI_SPCR0_LSBr_SPBRf_SET(r,f) (r).mspi_spcr0_lsb[0]=(((r).mspi_spcr0_lsb[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define MSPI_SPCR0_LSBr_RESERVEDf_GET(r) ((((r).mspi_spcr0_lsb[0]) >> 8) & 0xffffff)
#define MSPI_SPCR0_LSBr_RESERVEDf_SET(r,f) (r).mspi_spcr0_lsb[0]=(((r).mspi_spcr0_lsb[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'MSPI_SPCR0_LSBr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_SPCR0_MSB
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_SPCR0_MSBr_OFFSET 0x00001504

#define MSPI_SPCR0_MSBr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_SPCR0_MSB.
 */
typedef union MSPI_SPCR0_MSBr_s {
	uint32_t v[1];
	uint32_t mspi_spcr0_msb[1];
	uint32_t _mspi_spcr0_msb;
} MSPI_SPCR0_MSBr_t;

#define MSPI_SPCR0_MSBr_CLR(r) (r).mspi_spcr0_msb[0] = 0
#define MSPI_SPCR0_MSBr_SET(r,d) (r).mspi_spcr0_msb[0] = d
#define MSPI_SPCR0_MSBr_GET(r) (r).mspi_spcr0_msb[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_SPCR0_MSBr_CPHAf_GET(r) (((r).mspi_spcr0_msb[0]) & 0x1)
#define MSPI_SPCR0_MSBr_CPHAf_SET(r,f) (r).mspi_spcr0_msb[0]=(((r).mspi_spcr0_msb[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define MSPI_SPCR0_MSBr_CPOLf_GET(r) ((((r).mspi_spcr0_msb[0]) >> 1) & 0x1)
#define MSPI_SPCR0_MSBr_CPOLf_SET(r,f) (r).mspi_spcr0_msb[0]=(((r).mspi_spcr0_msb[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define MSPI_SPCR0_MSBr_BITSf_GET(r) ((((r).mspi_spcr0_msb[0]) >> 2) & 0xf)
#define MSPI_SPCR0_MSBr_BITSf_SET(r,f) (r).mspi_spcr0_msb[0]=(((r).mspi_spcr0_msb[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2))
#define MSPI_SPCR0_MSBr_RESERVED_1f_GET(r) ((((r).mspi_spcr0_msb[0]) >> 6) & 0x1)
#define MSPI_SPCR0_MSBr_RESERVED_1f_SET(r,f) (r).mspi_spcr0_msb[0]=(((r).mspi_spcr0_msb[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define MSPI_SPCR0_MSBr_MSTRf_GET(r) ((((r).mspi_spcr0_msb[0]) >> 7) & 0x1)
#define MSPI_SPCR0_MSBr_MSTRf_SET(r,f) (r).mspi_spcr0_msb[0]=(((r).mspi_spcr0_msb[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define MSPI_SPCR0_MSBr_RESERVEDf_GET(r) ((((r).mspi_spcr0_msb[0]) >> 8) & 0xffffff)
#define MSPI_SPCR0_MSBr_RESERVEDf_SET(r,f) (r).mspi_spcr0_msb[0]=(((r).mspi_spcr0_msb[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'MSPI_SPCR0_MSBr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_SPCR1_LSB
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_SPCR1_LSBr_OFFSET 0x00001508

#define MSPI_SPCR1_LSBr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_SPCR1_LSB.
 */
typedef union MSPI_SPCR1_LSBr_s {
	uint32_t v[1];
	uint32_t mspi_spcr1_lsb[1];
	uint32_t _mspi_spcr1_lsb;
} MSPI_SPCR1_LSBr_t;

#define MSPI_SPCR1_LSBr_CLR(r) (r).mspi_spcr1_lsb[0] = 0
#define MSPI_SPCR1_LSBr_SET(r,d) (r).mspi_spcr1_lsb[0] = d
#define MSPI_SPCR1_LSBr_GET(r) (r).mspi_spcr1_lsb[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_SPCR1_LSBr_DTLf_GET(r) (((r).mspi_spcr1_lsb[0]) & 0xff)
#define MSPI_SPCR1_LSBr_DTLf_SET(r,f) (r).mspi_spcr1_lsb[0]=(((r).mspi_spcr1_lsb[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define MSPI_SPCR1_LSBr_RESERVEDf_GET(r) ((((r).mspi_spcr1_lsb[0]) >> 8) & 0xffffff)
#define MSPI_SPCR1_LSBr_RESERVEDf_SET(r,f) (r).mspi_spcr1_lsb[0]=(((r).mspi_spcr1_lsb[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'MSPI_SPCR1_LSBr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_SPCR1_MSB
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_SPCR1_MSBr_OFFSET 0x0000150c

#define MSPI_SPCR1_MSBr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_SPCR1_MSB.
 */
typedef union MSPI_SPCR1_MSBr_s {
	uint32_t v[1];
	uint32_t mspi_spcr1_msb[1];
	uint32_t _mspi_spcr1_msb;
} MSPI_SPCR1_MSBr_t;

#define MSPI_SPCR1_MSBr_CLR(r) (r).mspi_spcr1_msb[0] = 0
#define MSPI_SPCR1_MSBr_SET(r,d) (r).mspi_spcr1_msb[0] = d
#define MSPI_SPCR1_MSBr_GET(r) (r).mspi_spcr1_msb[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_SPCR1_MSBr_RDSCLKf_GET(r) (((r).mspi_spcr1_msb[0]) & 0xff)
#define MSPI_SPCR1_MSBr_RDSCLKf_SET(r,f) (r).mspi_spcr1_msb[0]=(((r).mspi_spcr1_msb[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define MSPI_SPCR1_MSBr_RESERVEDf_GET(r) ((((r).mspi_spcr1_msb[0]) >> 8) & 0xffffff)
#define MSPI_SPCR1_MSBr_RESERVEDf_SET(r,f) (r).mspi_spcr1_msb[0]=(((r).mspi_spcr1_msb[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'MSPI_SPCR1_MSBr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_SPCR2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_SPCR2r_OFFSET 0x00001518

#define MSPI_SPCR2r_SIZE 4

/*
 * This structure should be used to declare and program MSPI_SPCR2.
 */
typedef union MSPI_SPCR2r_s {
	uint32_t v[1];
	uint32_t mspi_spcr2[1];
	uint32_t _mspi_spcr2;
} MSPI_SPCR2r_t;

#define MSPI_SPCR2r_CLR(r) (r).mspi_spcr2[0] = 0
#define MSPI_SPCR2r_SET(r,d) (r).mspi_spcr2[0] = d
#define MSPI_SPCR2r_GET(r) (r).mspi_spcr2[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_SPCR2r_HALTf_GET(r) (((r).mspi_spcr2[0]) & 0x1)
#define MSPI_SPCR2r_HALTf_SET(r,f) (r).mspi_spcr2[0]=(((r).mspi_spcr2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define MSPI_SPCR2r_HIEf_GET(r) ((((r).mspi_spcr2[0]) >> 1) & 0x1)
#define MSPI_SPCR2r_HIEf_SET(r,f) (r).mspi_spcr2[0]=(((r).mspi_spcr2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define MSPI_SPCR2r_LOOPQf_GET(r) ((((r).mspi_spcr2[0]) >> 2) & 0x1)
#define MSPI_SPCR2r_LOOPQf_SET(r,f) (r).mspi_spcr2[0]=(((r).mspi_spcr2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define MSPI_SPCR2r_WRT0f_GET(r) ((((r).mspi_spcr2[0]) >> 3) & 0x1)
#define MSPI_SPCR2r_WRT0f_SET(r,f) (r).mspi_spcr2[0]=(((r).mspi_spcr2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define MSPI_SPCR2r_WRENf_GET(r) ((((r).mspi_spcr2[0]) >> 4) & 0x1)
#define MSPI_SPCR2r_WRENf_SET(r,f) (r).mspi_spcr2[0]=(((r).mspi_spcr2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define MSPI_SPCR2r_SPIFEf_GET(r) ((((r).mspi_spcr2[0]) >> 5) & 0x1)
#define MSPI_SPCR2r_SPIFEf_SET(r,f) (r).mspi_spcr2[0]=(((r).mspi_spcr2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define MSPI_SPCR2r_SPEf_GET(r) ((((r).mspi_spcr2[0]) >> 6) & 0x1)
#define MSPI_SPCR2r_SPEf_SET(r,f) (r).mspi_spcr2[0]=(((r).mspi_spcr2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define MSPI_SPCR2r_RESERVEDf_GET(r) ((((r).mspi_spcr2[0]) >> 7) & 0x1ffffff)
#define MSPI_SPCR2r_RESERVEDf_SET(r,f) (r).mspi_spcr2[0]=(((r).mspi_spcr2[0] & ~((uint32_t)0x1ffffff << 7)) | ((((uint32_t)f) & 0x1ffffff) << 7))

/*******************************************************************************
 * End of 'MSPI_SPCR2r'
 */




/*******************************************************************************
 * REGISTER:  MSPI_STATUS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_STATUSr_OFFSET 0x00001520

#define MSPI_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_STATUS.
 */
typedef union MSPI_STATUSr_s {
	uint32_t v[1];
	uint32_t mspi_status[1];
	uint32_t _mspi_status;
} MSPI_STATUSr_t;

#define MSPI_STATUSr_CLR(r) (r).mspi_status[0] = 0
#define MSPI_STATUSr_SET(r,d) (r).mspi_status[0] = d
#define MSPI_STATUSr_GET(r) (r).mspi_status[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_STATUSr_SPIFf_GET(r) (((r).mspi_status[0]) & 0x1)
#define MSPI_STATUSr_SPIFf_SET(r,f) (r).mspi_status[0]=(((r).mspi_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define MSPI_STATUSr_HALTAf_GET(r) ((((r).mspi_status[0]) >> 1) & 0x1)
#define MSPI_STATUSr_HALTAf_SET(r,f) (r).mspi_status[0]=(((r).mspi_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define MSPI_STATUSr_RESERVEDf_GET(r) ((((r).mspi_status[0]) >> 2) & 0x3fffffff)
#define MSPI_STATUSr_RESERVEDf_SET(r,f) (r).mspi_status[0]=(((r).mspi_status[0] & ~((uint32_t)0x3fffffff << 2)) | ((((uint32_t)f) & 0x3fffffff) << 2))

/*******************************************************************************
 * End of 'MSPI_STATUSr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_TXRAM
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAMr_OFFSET 0x00001540

#define MSPI_TXRAMr_SIZE 4

/*
 * This structure should be used to declare and program MSPI_TXRAM.
 */
typedef union MSPI_TXRAMr_s {
	uint32_t v[1];
	uint32_t mspi_txram[1];
	uint32_t _mspi_txram;
} MSPI_TXRAMr_t;

#define MSPI_TXRAMr_CLR(r) (r).mspi_txram[0] = 0
#define MSPI_TXRAMr_SET(r,d) (r).mspi_txram[0] = d
#define MSPI_TXRAMr_GET(r) (r).mspi_txram[0]

/*
 * These macros can be used to access individual fields.
 */
#define MSPI_TXRAMr_TXRAMf_GET(r) (((r).mspi_txram[0]) & 0xff)
#define MSPI_TXRAMr_TXRAMf_SET(r,f) (r).mspi_txram[0]=(((r).mspi_txram[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define MSPI_TXRAMr_RESERVEDf_GET(r) ((((r).mspi_txram[0]) >> 8) & 0xffffff)
#define MSPI_TXRAMr_RESERVEDf_SET(r,f) (r).mspi_txram[0]=(((r).mspi_txram[0] & ~((uint32_t)0xffffff << 8)) | ((((uint32_t)f) & 0xffffff) << 8))

/*******************************************************************************
 * End of 'MSPI_TXRAMr'
 */




/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_00
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_00r_OFFSET 0x00001540

#define MSPI_TXRAM_00r_SIZE 4

/* MSPI_TXRAM_00r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_01
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_01r_OFFSET 0x00001544

#define MSPI_TXRAM_01r_SIZE 4

/* MSPI_TXRAM_01r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_02
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_02r_OFFSET 0x00001548

#define MSPI_TXRAM_02r_SIZE 4

/* MSPI_TXRAM_02r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_03
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_03r_OFFSET 0x0000154c

#define MSPI_TXRAM_03r_SIZE 4

/* MSPI_TXRAM_03r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_04
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_04r_OFFSET 0x00001550

#define MSPI_TXRAM_04r_SIZE 4

/* MSPI_TXRAM_04r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_05
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_05r_OFFSET 0x00001554

#define MSPI_TXRAM_05r_SIZE 4

/* MSPI_TXRAM_05r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_06
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_06r_OFFSET 0x00001558

#define MSPI_TXRAM_06r_SIZE 4

/* MSPI_TXRAM_06r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_07
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_07r_OFFSET 0x0000155c

#define MSPI_TXRAM_07r_SIZE 4

/* MSPI_TXRAM_07r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_08
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_08r_OFFSET 0x00001560

#define MSPI_TXRAM_08r_SIZE 4

/* MSPI_TXRAM_08r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_09
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_09r_OFFSET 0x00001564

#define MSPI_TXRAM_09r_SIZE 4

/* MSPI_TXRAM_09r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_10
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_10r_OFFSET 0x00001568

#define MSPI_TXRAM_10r_SIZE 4

/* MSPI_TXRAM_10r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_11
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_11r_OFFSET 0x0000156c

#define MSPI_TXRAM_11r_SIZE 4

/* MSPI_TXRAM_11r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_12
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_12r_OFFSET 0x00001570

#define MSPI_TXRAM_12r_SIZE 4

/* MSPI_TXRAM_12r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_13
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_13r_OFFSET 0x00001574

#define MSPI_TXRAM_13r_SIZE 4

/* MSPI_TXRAM_13r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_14
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_14r_OFFSET 0x00001578

#define MSPI_TXRAM_14r_SIZE 4

/* MSPI_TXRAM_14r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_15
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_15r_OFFSET 0x0000157c

#define MSPI_TXRAM_15r_SIZE 4

/* MSPI_TXRAM_15r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_16
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_16r_OFFSET 0x00001580

#define MSPI_TXRAM_16r_SIZE 4

/* MSPI_TXRAM_16r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_17
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_17r_OFFSET 0x00001584

#define MSPI_TXRAM_17r_SIZE 4

/* MSPI_TXRAM_17r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_18
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_18r_OFFSET 0x00001588

#define MSPI_TXRAM_18r_SIZE 4

/* MSPI_TXRAM_18r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_19
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_19r_OFFSET 0x0000158c

#define MSPI_TXRAM_19r_SIZE 4

/* MSPI_TXRAM_19r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_20
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_20r_OFFSET 0x00001590

#define MSPI_TXRAM_20r_SIZE 4

/* MSPI_TXRAM_20r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_21
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_21r_OFFSET 0x00001594

#define MSPI_TXRAM_21r_SIZE 4

/* MSPI_TXRAM_21r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_22
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_22r_OFFSET 0x00001598

#define MSPI_TXRAM_22r_SIZE 4

/* MSPI_TXRAM_22r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_23
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_23r_OFFSET 0x0000159c

#define MSPI_TXRAM_23r_SIZE 4

/* MSPI_TXRAM_23r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_24
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_24r_OFFSET 0x000015a0

#define MSPI_TXRAM_24r_SIZE 4

/* MSPI_TXRAM_24r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_25
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_25r_OFFSET 0x000015a4

#define MSPI_TXRAM_25r_SIZE 4

/* MSPI_TXRAM_25r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_26
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_26r_OFFSET 0x000015a8

#define MSPI_TXRAM_26r_SIZE 4

/* MSPI_TXRAM_26r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_27
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_27r_OFFSET 0x000015ac

#define MSPI_TXRAM_27r_SIZE 4

/* MSPI_TXRAM_27r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_28
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_28r_OFFSET 0x000015b0

#define MSPI_TXRAM_28r_SIZE 4

/* MSPI_TXRAM_28r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_29
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_29r_OFFSET 0x000015b4

#define MSPI_TXRAM_29r_SIZE 4

/* MSPI_TXRAM_29r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_30
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_30r_OFFSET 0x000015b8

#define MSPI_TXRAM_30r_SIZE 4

/* MSPI_TXRAM_30r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  MSPI_TXRAM_31
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define MSPI_TXRAM_31r_OFFSET 0x000015bc

#define MSPI_TXRAM_31r_SIZE 4

/* MSPI_TXRAM_31r is element of MSPI_TXRAM */

/*******************************************************************************
 * REGISTER:  PAXB_0_PAXB_ENDIANNESS
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define PAXB_0_PAXB_ENDIANNESSr_OFFSET 0x18012030

#define PAXB_0_PAXB_ENDIANNESSr_SIZE 4

/*
 * This structure should be used to declare and program PAXB_0_PAXB_ENDIANNESS.
 */
typedef union PAXB_0_PAXB_ENDIANNESSr_s {
	uint32_t v[1];
	uint32_t paxb_0_paxb_endianness[1];
	uint32_t _paxb_0_paxb_endianness;
} PAXB_0_PAXB_ENDIANNESSr_t;

#define PAXB_0_PAXB_ENDIANNESSr_CLR(r) (r).paxb_0_paxb_endianness[0] = 0
#define PAXB_0_PAXB_ENDIANNESSr_SET(r,d) (r).paxb_0_paxb_endianness[0] = d
#define PAXB_0_PAXB_ENDIANNESSr_GET(r) (r).paxb_0_paxb_endianness[0]

/*
 * These macros can be used to access individual fields.
 */
#define PAXB_0_PAXB_ENDIANNESSr_BIGENDIANf_GET(r) (((r).paxb_0_paxb_endianness[0]) & 0x1)
#define PAXB_0_PAXB_ENDIANNESSr_BIGENDIANf_SET(r,f) (r).paxb_0_paxb_endianness[0]=(((r).paxb_0_paxb_endianness[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*******************************************************************************
 * End of 'PAXB_0_PAXB_ENDIANNESSr'
 */




/*******************************************************************************
 * REGISTER:  PCIE_RST_CONTROL
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define PCIE_RST_CONTROLr_OFFSET 0x00010230

#define PCIE_RST_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program PCIE_RST_CONTROL.
 */
typedef union PCIE_RST_CONTROLr_s {
	uint32_t v[1];
	uint32_t pcie_rst_control[1];
	uint32_t _pcie_rst_control;
} PCIE_RST_CONTROLr_t;

#define PCIE_RST_CONTROLr_CLR(r) (r).pcie_rst_control[0] = 0
#define PCIE_RST_CONTROLr_SET(r,d) (r).pcie_rst_control[0] = d
#define PCIE_RST_CONTROLr_GET(r) (r).pcie_rst_control[0]

/*
 * These macros can be used to access individual fields.
 */
#define PCIE_RST_CONTROLr_CORE_PERST_Nf_GET(r) (((r).pcie_rst_control[0]) & 0x1)
#define PCIE_RST_CONTROLr_CORE_PERST_Nf_SET(r,f) (r).pcie_rst_control[0]=(((r).pcie_rst_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define PCIE_RST_CONTROLr_CORE_RB_RST_Nf_GET(r) ((((r).pcie_rst_control[0]) >> 1) & 0x1)
#define PCIE_RST_CONTROLr_CORE_RB_RST_Nf_SET(r,f) (r).pcie_rst_control[0]=(((r).pcie_rst_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define PCIE_RST_CONTROLr_HARD_CORE_RST_Nf_GET(r) ((((r).pcie_rst_control[0]) >> 2) & 0x1)
#define PCIE_RST_CONTROLr_HARD_CORE_RST_Nf_SET(r,f) (r).pcie_rst_control[0]=(((r).pcie_rst_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define PCIE_RST_CONTROLr_REG_HARD_CORE_RST_Nf_GET(r) ((((r).pcie_rst_control[0]) >> 3) & 0x1)
#define PCIE_RST_CONTROLr_REG_HARD_CORE_RST_Nf_SET(r,f) (r).pcie_rst_control[0]=(((r).pcie_rst_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define PCIE_RST_CONTROLr_RESERVED_0f_GET(r) ((((r).pcie_rst_control[0]) >> 4) & 0x7ffffff)
#define PCIE_RST_CONTROLr_RESERVED_0f_SET(r,f) (r).pcie_rst_control[0]=(((r).pcie_rst_control[0] & ~((uint32_t)0x7ffffff << 4)) | ((((uint32_t)f) & 0x7ffffff) << 4))
#define PCIE_RST_CONTROLr_BYPASS_RSTFSM_CTRLf_GET(r) ((((r).pcie_rst_control[0]) >> 31) & 0x1)
#define PCIE_RST_CONTROLr_BYPASS_RSTFSM_CTRLf_SET(r,f) (r).pcie_rst_control[0]=(((r).pcie_rst_control[0] & ~((uint32_t)0x1 << 31)) | ((((uint32_t)f) & 0x1) << 31))

/*******************************************************************************
 * End of 'PCIE_RST_CONTROLr'
 */




/*******************************************************************************
 * REGISTER:  SMBus_Timing_Config_2
 * BLOCKS:   CMIC
 * SIZE:     32
 */
#define SMBUS_TIMING_CONFIG_2r_OFFSET 0x000000b0

#define SMBUS_TIMING_CONFIG_2r_SIZE 4

/*
 * This structure should be used to declare and program SMBus_Timing_Config_2.
 */
typedef union SMBUS_TIMING_CONFIG_2r_s {
	uint32_t v[1];
	uint32_t smbus_timing_config_2[1];
	uint32_t _smbus_timing_config_2;
} SMBUS_TIMING_CONFIG_2r_t;

#define SMBUS_TIMING_CONFIG_2r_CLR(r) (r).smbus_timing_config_2[0] = 0
#define SMBUS_TIMING_CONFIG_2r_SET(r,d) (r).smbus_timing_config_2[0] = d
#define SMBUS_TIMING_CONFIG_2r_GET(r) (r).smbus_timing_config_2[0]

/*
 * These macros can be used to access individual fields.
 */
#define SMBUS_TIMING_CONFIG_2r_TIMING_TLOW_100KHZf_GET(r) (((r).smbus_timing_config_2[0]) & 0xff)
#define SMBUS_TIMING_CONFIG_2r_TIMING_TLOW_100KHZf_SET(r,f) (r).smbus_timing_config_2[0]=(((r).smbus_timing_config_2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define SMBUS_TIMING_CONFIG_2r_TIMING_THIGH_100KHZf_GET(r) ((((r).smbus_timing_config_2[0]) >> 8) & 0xff)
#define SMBUS_TIMING_CONFIG_2r_TIMING_THIGH_100KHZf_SET(r,f) (r).smbus_timing_config_2[0]=(((r).smbus_timing_config_2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define SMBUS_TIMING_CONFIG_2r_TIMING_TLOW_400KHZf_GET(r) ((((r).smbus_timing_config_2[0]) >> 16) & 0xff)
#define SMBUS_TIMING_CONFIG_2r_TIMING_TLOW_400KHZf_SET(r,f) (r).smbus_timing_config_2[0]=(((r).smbus_timing_config_2[0] & ~((uint32_t)0xff << 16)) | ((((uint32_t)f) & 0xff) << 16))
#define SMBUS_TIMING_CONFIG_2r_TIMING_THIGH_400KHZf_GET(r) ((((r).smbus_timing_config_2[0]) >> 24) & 0xff)
#define SMBUS_TIMING_CONFIG_2r_TIMING_THIGH_400KHZf_SET(r,f) (r).smbus_timing_config_2[0]=(((r).smbus_timing_config_2[0] & ~((uint32_t)0xff << 24)) | ((((uint32_t)f) & 0xff) << 24))

/*******************************************************************************
 * End of 'SMBUS_TIMING_CONFIG_2r'
 */




#endif /* BCM56960_A0_CMIC_DEFS_H */
